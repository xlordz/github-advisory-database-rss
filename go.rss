<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-03-04T09:01:25.993Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/minio/minio] MinIO allows an SFTP authentication bypass due to improperly trusted SSH key]]></title>
        <id>https://github.com/advisories/GHSA-wc79-7x8x-2p58</id>
        <link href="https://github.com/advisories/GHSA-wc79-7x8x-2p58"/>
        <updated>2025-03-03T19:56:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>A bug in evaluating the trust of the SSH key used in an SFTP connection to MinIO allows authentication bypass and unauthorized data access.</em></p>
<h3 id="details">Details</h3>
<p>On a MinIO server with SFTP access configured and using LDAP as an external identity provider, MinIO supports SSH key based authentication for SFTP connections when the user has the <code>sshPublicKey</code> attribute set in their LDAP server. The server trusts the client's key only when the public key is the same as the <code>sshPublicKey</code> attribute.</p>
<p>Due to the bug, when the user has no <code>sshPublicKey</code> property in LDAP, the server ends up trusting the key allowing the client to perform any FTP operations allowed by the MinIO access policies associated with the LDAP user (or any of their groups).</p>
<p>The bug was introduced in <a href="https://github.com/minio/minio/commit/91e1487de45720753c9e9e4c02b1bd16b7e452fa">https://github.com/minio/minio/commit/91e1487de45720753c9e9e4c02b1bd16b7e452fa</a>.</p>
<h3 id="impact">Impact</h3>
<p>The following requirements must be met to exploit this vulnerability:</p>
<ol>
<li>MinIO server must be configured to allow SFTP access and use LDAP as an external identity provider.</li>
<li>Knowledge of an LDAP username that does not have the <code>sshPublicKey</code> property set.</li>
<li>Such an LDAP username or one of their groups must also have some MinIO access policy configured.</li>
</ol>
<p>When this bug is successfully exploited, the attacker can perform any FTP operations (i.e. reading, writing, deleting and listing objects) allowed by the access policy associated with the LDAP user account (and their groups).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/minio/minio/security/advisories/GHSA-wc79-7x8x-2p58">https://github.com/minio/minio/security/advisories/GHSA-wc79-7x8x-2p58</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27414">https://nvd.nist.gov/vuln/detail/CVE-2025-27414</a></li>
<li><a href="https://github.com/minio/minio/commit/4c71f1b4ec0fb2a473ddaac18c20ec9e63f267ec">https://github.com/minio/minio/commit/4c71f1b4ec0fb2a473ddaac18c20ec9e63f267ec</a></li>
<li><a href="https://github.com/minio/minio/commit/91e1487de45720753c9e9e4c02b1bd16b7e452fa">https://github.com/minio/minio/commit/91e1487de45720753c9e9e4c02b1bd16b7e452fa</a></li>
<li><a href="https://github.com/advisories/GHSA-wc79-7x8x-2p58">https://github.com/advisories/GHSA-wc79-7x8x-2p58</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc79-7x8x-2p58</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-03T19:56:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jasonlovesdoggo/abacus] Goroutine Leak in Abacus SSE Implementation]]></title>
        <id>https://github.com/advisories/GHSA-vh64-54px-qgf8</id>
        <link href="https://github.com/advisories/GHSA-vh64-54px-qgf8"/>
        <updated>2025-03-03T19:41:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="goroutine-leak-in-abacus-sse-implementation">Goroutine Leak in Abacus SSE Implementation</h2>
<h3 id="summary">Summary</h3>
<p>A critical goroutine leak vulnerability has been identified in the Abacus server's Server-Sent Events (SSE) implementation. The issue occurs when clients disconnect from the <code>/stream</code> endpoint, as the server fails to properly clean up resources and terminate associated goroutines. This leads to resource exhaustion where the server continues running but eventually stops accepting new SSE connections while maintaining high memory usage. The vulnerability specifically involves improper channel cleanup in the event handling mechanism, causing goroutines to remain blocked indefinitely.</p>
<h3 id="poc"><a href="https://github.com/JasonLovesDoggo/abacus/blob/main/docs/bugs/GHSA-vh64-54px-qgf8/test.py">POC</a></h3>
<h3 id="impact">Impact</h3>
<p>This vulnerability affects all versions of Abacus prior to v1.4.0. The issue causes:</p>
<ul>
<li>Permanent unresponsiveness of the <code>/stream</code> endpoint after prolonged use</li>
<li>Memory growth that stabilizes at a high level but prevents proper functionality</li>
<li>Selective denial of service affecting only SSE connections while other endpoints remain functional</li>
<li>Accumulated orphaned goroutines that cannot be garbage collected</li>
<li>High resource consumption under sustained client connection/disconnection patterns</li>
</ul>
<p>Systems running Abacus in production with client applications that frequently establish and terminate SSE connections are most vulnerable. The issue becomes particularly apparent in high-traffic environments or during connection stress testing.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in Abacus v1.4.0. The fix includes:</p>
<ol>
<li>Implementing buffered channels to prevent blocking operations during cleanup</li>
<li>Adding proper mutex-protected cleanup logic to ensure resources are released exactly once</li>
<li>Implementing timeout protection for channel operations to prevent deadlocks</li>
<li>Ensuring consistent cleanup when connections terminate unexpectedly</li>
<li>Adding improved monitoring for client disconnections using request context</li>
<li>Restructuring the event broadcasting system to safely handle client removal</li>
</ol>
<p>Users should upgrade to v1.4.0 or later versions as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If upgrading is not immediately possible, the following workarounds can help mitigate the issue:</p>
<ol>
<li><p><strong>Limit maximum connections</strong>: Configure your reverse proxy to limit the maximum number of concurrent connections to the <code>/stream</code> endpoints.</p>
</li>
<li><p><strong>Implement request timeouts</strong>: Configure your infrastructure to terminate long-lived SSE connections after a reasonable period.</p>
</li>
<li><p><strong>Restart regularly</strong>: Schedule regular restarts of the Abacus service to reclaim resources.</p>
</li>
<li><p><strong>Monitor memory usage</strong>: Set up alerts for abnormal memory growth patterns.</p>
</li>
<li><p><strong>Separate instance for SSE</strong>: Run a dedicated Abacus instance solely for handling SSE connections, allowing it to be restarted without affecting the main API functionality.</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://blog.golang.org/context">Go Concurrency Patterns: Context</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/772.html">CWE-772: Missing Release of Resource after Effective Lifetime</a></li>
<li><a href="https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control">OWASP Top 10: Resource Exhaustion</a></li>
<li><a href="https://go.dev/blog/defer-panic-and-recover">Resource Management in Go</a></li>
</ul>
<h3 id="for-more-information">For More Information</h3>
<p>Please contact the Abacus security team at <a href="mailto:abacus@jsn.cam">abacus@jsn.cam</a> for additional information or to report further security issues.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/JasonLovesDoggo/abacus/security/advisories/GHSA-vh64-54px-qgf8">https://github.com/JasonLovesDoggo/abacus/security/advisories/GHSA-vh64-54px-qgf8</a></li>
<li><a href="https://github.com/JasonLovesDoggo/abacus/commit/78fdb9b48b7f6d08ed0cd41077509c0a97071552">https://github.com/JasonLovesDoggo/abacus/commit/78fdb9b48b7f6d08ed0cd41077509c0a97071552</a></li>
<li><a href="https://github.com/JasonLovesDoggo/abacus/commit/898ff1204e11317cc161240b660e63eed5a72b33">https://github.com/JasonLovesDoggo/abacus/commit/898ff1204e11317cc161240b660e63eed5a72b33</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27421">https://nvd.nist.gov/vuln/detail/CVE-2025-27421</a></li>
<li><a href="https://github.com/advisories/GHSA-vh64-54px-qgf8">https://github.com/advisories/GHSA-vh64-54px-qgf8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vh64-54px-qgf8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T16:21:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/usememos/memos] Memos Server-Side Request Forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-wfxg-v3j4-7qmj</id>
        <link href="https://github.com/advisories/GHSA-wfxg-v3j4-7qmj"/>
        <updated>2025-03-03T19:40:53.000Z</updated>
        <content type="html"><![CDATA[<p>elestio memos v0.23.0 is vulnerable to Server-Side Request Forgery (SSRF) due to insufficient validation of user-supplied URLs, which can be exploited to perform SSRF attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22952">https://nvd.nist.gov/vuln/detail/CVE-2025-22952</a></li>
<li><a href="https://github.com/usememos/memos/issues/4413">https://github.com/usememos/memos/issues/4413</a></li>
<li><a href="https://github.com/usememos/memos/pull/4428">https://github.com/usememos/memos/pull/4428</a></li>
<li><a href="https://elest.io/open-source/memos">https://elest.io/open-source/memos</a></li>
<li><a href="https://github.com/usememos/memos">https://github.com/usememos/memos</a></li>
<li><a href="https://github.com/usememos/memos/pull/4421">https://github.com/usememos/memos/pull/4421</a></li>
<li><a href="https://github.com/usememos/memos/commit/f17774cb3b9612495d89576a91ab3480018cb0b6">https://github.com/usememos/memos/commit/f17774cb3b9612495d89576a91ab3480018cb0b6</a></li>
<li><a href="https://github.com/usememos/memos/commit/f8c973c938742827baaf6665cfe66805dc8e8d02">https://github.com/usememos/memos/commit/f8c973c938742827baaf6665cfe66805dc8e8d02</a></li>
<li><a href="https://github.com/advisories/GHSA-wfxg-v3j4-7qmj">https://github.com/advisories/GHSA-wfxg-v3j4-7qmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wfxg-v3j4-7qmj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-27T21:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v8] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v7] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v6] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v5] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v4] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v3] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go/v2] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/ibc-go] IBC-Go has Non-deterministic JSON Unmarshalling of IBC Acknowledgement]]></title>
        <id>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</id>
        <link href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw"/>
        <updated>2025-02-28T17:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2025-004: Non-deterministic JSON Unmarshalling of IBC Acknowledgement can result in a chain halt
Component: IBC-Go
Criticality: Critical (Considerable Impact; Almost Certain Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: IBC-Go &gt;= v7; Earlier IBC-Go versions may also be affected.
Affected users: Validators, Full nodes, IBC Middleware authors</p>
<h3 id="description">Description</h3>
<p>An issue was discovered in IBC-Go's deserialization of acknowledgements that results in non-deterministic behavior which can halt a chain. Any user that can open an IBC channel can introduce this state to the chain</p>
<h3 id="patches">Patches</h3>
<p>The new IBC-Go releases below address this issue:</p>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v7.9.2">v7.9.2</a></li>
<li><a href="https://github.com/cosmos/ibc-go/releases/tag/v8.6.1">v8.6.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To prevent this state from being introduced to a chain, it is possible to permission Channel Opening as a workaround.</p>
<h3 id="notes-on-re-release">Notes on Re-Release</h3>
<h4 id="is-this-state-breaking-probably-not-but-it-depends-on-your-transfer-middlewares">Is this state breaking? Probably not but it depends on your transfer middlewares</h4>
<p>This patch is not state breaking unless you depend on transfer middlewares that deserialize and serialize acknowledgement packets before passing them to the transfer handler.  As far as we can tell, these middlewares are rare. For example, packet-forward-middleware and ibc-hooks, do not serialize ack packets in this way and therefore aren't broken by this patch. So if these are the only transfer middlewares you depend on, you can safely apply this patch in a rolling manner (and we've already cut new versions of these for you).</p>
<h4 id="what-to-do-if-you-do-depend-on-ack-serializing-middleware">What to do if you do depend on ack-serializing middleware</h4>
<p>In the unlikely case that you depend on middlewares that serialize ack packets and you do not update them when you apply this patch, all transfers that are handled by the middleware will fail (or experience other unexpected behavior) if the serialization approach differs from the transfer app's. If you have such dependencies and do not update them, validators who apply the patch in a rolling manner will halt when they upgrade, and transfers processed by the middleware will just fail once everyone has upgraded.</p>
<p>To update these middlewares and avoid failing transfers or a chain halt, you will simply need to change the serialization approach in the middleware to use ibc-go's codec: <code>transfertypes.ModuleCdc.[Must]MarshalJSON</code>, rather than whatever you're doing today.  For example:</p>
<pre><code>import transfertypes "github.com/cosmos/ibc-go/v10/modules/apps/transfer/types"
transfertypes.ModuleCdc.[Must]MarshalJSON
func MarshalAsIBCDoes(ack channeltypes.Acknowledgement) ([]byte, error) {
    return transfertypes.ModuleCdc.MarshalJSON(&amp;ack)
}
</code></pre>
<p>When you do make a change to the serialization approach, this will make the patch state breaking and you will need a coordinated upgrade. So for absolute clarity: chains with these ack-serializing middlewares must do coordinated upgrades</p>
<h4 id="why-we-retracted-the-earlier-patch-in-favor-of-this-approach">Why we retracted the earlier patch in favor of this approach</h4>
<p>We retracted the releases of ibc-go we cut earlier today because these broke all transfer middlewares that deserialized then re-serialized receive packets differently than the transfer app. It turned out that this was a common pattern (unlike serializing/deserializing ack packets), so widely used middlewares, including packet-forward-middleware, broke unexpectedly.</p>
<p>In the new set of patches, we removed this constraint on how middlewares serialize receive packets, preventing this breakage. Only the serialization requirement on acknowledgement packets remains. This is convenient because this is the only constraint we had to add to fix the vulnerability, and middlewares that deserialize and serialize ack packets are much less common than ones that do so for receive packets. The constraint on receive packets was added for defense in depth.</p>
<h4 id="testing-we-have-done-to-gain-more-confidence-in-this-release">Testing we have done to gain more confidence in this release</h4>
<ul>
<li>In addition to testing ibc-go, we also did the following:</li>
<li>Tested pfm v7 and v8 after bumping dependencies</li>
<li>Tested ibc-hooks v7 and v8 after bumping dependencies</li>
<li>Ran a patched node on mainnet on the cosmos hub and triggered failing and successful transactions that used PFM</li>
<li>Ran a patched node on osmosis and triggered failing and successful transactions that used ibc-hooks
This is a more thorough process than before, so we have higher confidence.</li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>February 18, 2025, 4:54am PST: Issue reported to the Cosmos Bug Bounty program</li>
<li>February 18, 2025, 6:56am PST: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>February 18, 2025, 8:15am PST: Core team completes validation of issue</li>
<li>February 25, 2025, 8:00am PST / 17:00 CET: Pre-notification delivered</li>
<li>February 27, 2025, 8:00am PST / 17:00 CET: Patch made available</li>
<li>February 27, 2025, 1:00pm PST: Patch re-release made available</li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program by swelf19 on HackerOne on February 18, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>. For more information about the Interchain Foundation’s engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<p>A Github Security Advisory for this issue is available in the IBC-Go <a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/cosmos/ibc-go/security/advisories/GHSA-jg6f-48ff-5xrw</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748">https://github.com/cosmos/ibc-go/commit/59987d52d959dc5876ffd4f307c9b33a52a43748</a></li>
<li><a href="https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5">https://github.com/cosmos/ibc-go/commit/9869b3c6f7eb05a935b1eb33611c5406f68438a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jg6f-48ff-5xrw">https://github.com/advisories/GHSA-jg6f-48ff-5xrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jg6f-48ff-5xrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-28T17:46:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher does not Properly Validate Account Bindings in SAML Authentication Enables User Impersonation on First Login]]></title>
        <id>https://github.com/advisories/GHSA-mq23-vvg7-xfm4</id>
        <link href="https://github.com/advisories/GHSA-mq23-vvg7-xfm4"/>
        <updated>2025-02-27T18:27:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in Rancher has been discovered, leading to a local user impersonation through SAML Authentication on first login.</p>
<p>The issue occurs when a SAML authentication provider (AP) is configured (e.g. Keycloak). A newly created AP user can impersonate any user on Rancher by manipulating cookie values during their initial login to Rancher. This vulnerability could also be exploited if a Rancher user (present on the AP) is removed, either manually or automatically via the <a href="https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-user-retention">User Retention feature</a> with delete-inactive-user-after.</p>
<p>More precisely, Rancher validates only a subset of input from the SAML assertion request; however, it trusts and uses values that are not properly validated. An attacker could then configure the saml_Rancher_UserID cookie and the saml_Rancher_Action cookie so that the user principal from the AP will be added to the user specified by the attacker (from saml_Rancher_UserID). Rancher can then be deceived by setting saml_Rancher_UserID to the admin's user ID and saml_Rancher_Action to testAndEnable, thereby executing the vulnerable code path and leading to privilege escalation.</p>
<p>Note that the vulnerability impacts all SAML APs available in Rancher. However the following Rancher deployments are not affected :
Rancher deployments not using SAML-based AP.
Rancher deployments using SAML-based AP, where all SAML users are already signed in and linked to a Rancher account.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1134/001/">MITRE ATT&amp;CK - Technique - Access Token Manipulation: Token Impersonation/Theft</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability is addressed by adding the UserID claim to a JWT signed token, which is protected against tampering. </p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Rancher deployments that can't upgrade, could temporarily disable the SAML-based AP as a temporary workaround. However, upgrading is recommended.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-mq23-vvg7-xfm4">https://github.com/rancher/rancher/security/advisories/GHSA-mq23-vvg7-xfm4</a></li>
<li><a href="https://github.com/advisories/GHSA-mq23-vvg7-xfm4">https://github.com/advisories/GHSA-mq23-vvg7-xfm4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq23-vvg7-xfm4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-27T18:27:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher does not Properly Validate Account Bindings in SAML Authentication Enables User Impersonation on First Login]]></title>
        <id>https://github.com/advisories/GHSA-mq23-vvg7-xfm4</id>
        <link href="https://github.com/advisories/GHSA-mq23-vvg7-xfm4"/>
        <updated>2025-02-27T18:27:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in Rancher has been discovered, leading to a local user impersonation through SAML Authentication on first login.</p>
<p>The issue occurs when a SAML authentication provider (AP) is configured (e.g. Keycloak). A newly created AP user can impersonate any user on Rancher by manipulating cookie values during their initial login to Rancher. This vulnerability could also be exploited if a Rancher user (present on the AP) is removed, either manually or automatically via the <a href="https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-user-retention">User Retention feature</a> with delete-inactive-user-after.</p>
<p>More precisely, Rancher validates only a subset of input from the SAML assertion request; however, it trusts and uses values that are not properly validated. An attacker could then configure the saml_Rancher_UserID cookie and the saml_Rancher_Action cookie so that the user principal from the AP will be added to the user specified by the attacker (from saml_Rancher_UserID). Rancher can then be deceived by setting saml_Rancher_UserID to the admin's user ID and saml_Rancher_Action to testAndEnable, thereby executing the vulnerable code path and leading to privilege escalation.</p>
<p>Note that the vulnerability impacts all SAML APs available in Rancher. However the following Rancher deployments are not affected :
Rancher deployments not using SAML-based AP.
Rancher deployments using SAML-based AP, where all SAML users are already signed in and linked to a Rancher account.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1134/001/">MITRE ATT&amp;CK - Technique - Access Token Manipulation: Token Impersonation/Theft</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability is addressed by adding the UserID claim to a JWT signed token, which is protected against tampering. </p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Rancher deployments that can't upgrade, could temporarily disable the SAML-based AP as a temporary workaround. However, upgrading is recommended.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-mq23-vvg7-xfm4">https://github.com/rancher/rancher/security/advisories/GHSA-mq23-vvg7-xfm4</a></li>
<li><a href="https://github.com/advisories/GHSA-mq23-vvg7-xfm4">https://github.com/advisories/GHSA-mq23-vvg7-xfm4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq23-vvg7-xfm4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-27T18:27:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher does not Properly Validate Account Bindings in SAML Authentication Enables User Impersonation on First Login]]></title>
        <id>https://github.com/advisories/GHSA-mq23-vvg7-xfm4</id>
        <link href="https://github.com/advisories/GHSA-mq23-vvg7-xfm4"/>
        <updated>2025-02-27T18:27:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in Rancher has been discovered, leading to a local user impersonation through SAML Authentication on first login.</p>
<p>The issue occurs when a SAML authentication provider (AP) is configured (e.g. Keycloak). A newly created AP user can impersonate any user on Rancher by manipulating cookie values during their initial login to Rancher. This vulnerability could also be exploited if a Rancher user (present on the AP) is removed, either manually or automatically via the <a href="https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-user-retention">User Retention feature</a> with delete-inactive-user-after.</p>
<p>More precisely, Rancher validates only a subset of input from the SAML assertion request; however, it trusts and uses values that are not properly validated. An attacker could then configure the saml_Rancher_UserID cookie and the saml_Rancher_Action cookie so that the user principal from the AP will be added to the user specified by the attacker (from saml_Rancher_UserID). Rancher can then be deceived by setting saml_Rancher_UserID to the admin's user ID and saml_Rancher_Action to testAndEnable, thereby executing the vulnerable code path and leading to privilege escalation.</p>
<p>Note that the vulnerability impacts all SAML APs available in Rancher. However the following Rancher deployments are not affected :
Rancher deployments not using SAML-based AP.
Rancher deployments using SAML-based AP, where all SAML users are already signed in and linked to a Rancher account.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1134/001/">MITRE ATT&amp;CK - Technique - Access Token Manipulation: Token Impersonation/Theft</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability is addressed by adding the UserID claim to a JWT signed token, which is protected against tampering. </p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Rancher deployments that can't upgrade, could temporarily disable the SAML-based AP as a temporary workaround. However, upgrading is recommended.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-mq23-vvg7-xfm4">https://github.com/rancher/rancher/security/advisories/GHSA-mq23-vvg7-xfm4</a></li>
<li><a href="https://github.com/advisories/GHSA-mq23-vvg7-xfm4">https://github.com/advisories/GHSA-mq23-vvg7-xfm4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq23-vvg7-xfm4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-27T18:27:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher allows an unauthenticated stack overflow in /v3-public/authproviders API]]></title>
        <id>https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</id>
        <link href="https://github.com/advisories/GHSA-xr9q-h9c7-xw8q"/>
        <updated>2025-02-27T18:27:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An unauthenticated stack overflow crash, leading to a denial of service (DoS), was identified in Rancher’s <code>/v3-public/authproviders</code> public API endpoint. A malicious user could submit data to the API which would cause the Rancher server to crash, but no malicious or incorrect data would actually be written in the API. The downstream clusters, i.e., the clusters managed by Rancher, are not affected by this issue.</p>
<p>This vulnerability affects those using external authentication providers as well as Rancher’s local authentication.</p>
<h3 id="patches">Patches</h3>
<p>The patch includes the removal of unnecessary HTTP methods of the specific API.</p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds for this issue. Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-xr9q-h9c7-xw8q">https://github.com/rancher/rancher/security/advisories/GHSA-xr9q-h9c7-xw8q</a></li>
<li><a href="https://github.com/advisories/GHSA-xr9q-h9c7-xw8q">https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-27T18:27:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher allows an unauthenticated stack overflow in /v3-public/authproviders API]]></title>
        <id>https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</id>
        <link href="https://github.com/advisories/GHSA-xr9q-h9c7-xw8q"/>
        <updated>2025-02-27T18:27:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An unauthenticated stack overflow crash, leading to a denial of service (DoS), was identified in Rancher’s <code>/v3-public/authproviders</code> public API endpoint. A malicious user could submit data to the API which would cause the Rancher server to crash, but no malicious or incorrect data would actually be written in the API. The downstream clusters, i.e., the clusters managed by Rancher, are not affected by this issue.</p>
<p>This vulnerability affects those using external authentication providers as well as Rancher’s local authentication.</p>
<h3 id="patches">Patches</h3>
<p>The patch includes the removal of unnecessary HTTP methods of the specific API.</p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds for this issue. Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-xr9q-h9c7-xw8q">https://github.com/rancher/rancher/security/advisories/GHSA-xr9q-h9c7-xw8q</a></li>
<li><a href="https://github.com/advisories/GHSA-xr9q-h9c7-xw8q">https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-27T18:27:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher allows an unauthenticated stack overflow in /v3-public/authproviders API]]></title>
        <id>https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</id>
        <link href="https://github.com/advisories/GHSA-xr9q-h9c7-xw8q"/>
        <updated>2025-02-27T18:27:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An unauthenticated stack overflow crash, leading to a denial of service (DoS), was identified in Rancher’s <code>/v3-public/authproviders</code> public API endpoint. A malicious user could submit data to the API which would cause the Rancher server to crash, but no malicious or incorrect data would actually be written in the API. The downstream clusters, i.e., the clusters managed by Rancher, are not affected by this issue.</p>
<p>This vulnerability affects those using external authentication providers as well as Rancher’s local authentication.</p>
<h3 id="patches">Patches</h3>
<p>The patch includes the removal of unnecessary HTTP methods of the specific API.</p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds for this issue. Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-xr9q-h9c7-xw8q">https://github.com/rancher/rancher/security/advisories/GHSA-xr9q-h9c7-xw8q</a></li>
<li><a href="https://github.com/advisories/GHSA-xr9q-h9c7-xw8q">https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xr9q-h9c7-xw8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-27T18:27:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher's SAML-based login via CLI can be denied by unauthenticated users]]></title>
        <id>https://github.com/advisories/GHSA-5qmp-9x47-92q8</id>
        <link href="https://github.com/advisories/GHSA-5qmp-9x47-92q8"/>
        <updated>2025-02-27T18:27:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where it is possible for an unauthenticated user to list all CLI authentication tokens and delete them before the CLI is able to get the token value. This effectively prevents users from logging in via the CLI when using rancher token as the execution command (instead of the token directly being in the kubeconfig). </p>
<p>Note that this token is not the kubeconfig token and if an attacker is able to intercept it they can't use it to impersonate a real user since it is encrypted.</p>
<p>This happens because for SAML-based authentication providers, the login flow from the CLI works by generating a link to be pasted in the browser, and then polling every 10 seconds for the <code>/v3-public/authTokens/&lt;token name&gt;</code> endpoint.  The <code>&lt;token name&gt;</code> is randomly generated by the CLI. Once the login flow succeeds, Rancher creates an auth token (with an encrypted token value). The CLI then deletes the authToken.</p>
<p>Rancher deployments using only the local authentication provider, or non-SAML-based authentication providers, are not impacted by this vulnerability. SAML-based users not using the CLI are also not impacted.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1531/">MITRE ATT&amp;CK - Technique - Account Access Removal</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix involves removing GET and DELETE methods for the authTokens collection.</p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can refrain from using the Rancher CLI to log in as a workaround. Otherwise, users are advised to upgrade to a patched version of Rancher Manager.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-5qmp-9x47-92q8">https://github.com/rancher/rancher/security/advisories/GHSA-5qmp-9x47-92q8</a></li>
<li><a href="https://github.com/advisories/GHSA-5qmp-9x47-92q8">https://github.com/advisories/GHSA-5qmp-9x47-92q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5qmp-9x47-92q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-27T18:27:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher's SAML-based login via CLI can be denied by unauthenticated users]]></title>
        <id>https://github.com/advisories/GHSA-5qmp-9x47-92q8</id>
        <link href="https://github.com/advisories/GHSA-5qmp-9x47-92q8"/>
        <updated>2025-02-27T18:27:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where it is possible for an unauthenticated user to list all CLI authentication tokens and delete them before the CLI is able to get the token value. This effectively prevents users from logging in via the CLI when using rancher token as the execution command (instead of the token directly being in the kubeconfig). </p>
<p>Note that this token is not the kubeconfig token and if an attacker is able to intercept it they can't use it to impersonate a real user since it is encrypted.</p>
<p>This happens because for SAML-based authentication providers, the login flow from the CLI works by generating a link to be pasted in the browser, and then polling every 10 seconds for the <code>/v3-public/authTokens/&lt;token name&gt;</code> endpoint.  The <code>&lt;token name&gt;</code> is randomly generated by the CLI. Once the login flow succeeds, Rancher creates an auth token (with an encrypted token value). The CLI then deletes the authToken.</p>
<p>Rancher deployments using only the local authentication provider, or non-SAML-based authentication providers, are not impacted by this vulnerability. SAML-based users not using the CLI are also not impacted.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1531/">MITRE ATT&amp;CK - Technique - Account Access Removal</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix involves removing GET and DELETE methods for the authTokens collection.</p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can refrain from using the Rancher CLI to log in as a workaround. Otherwise, users are advised to upgrade to a patched version of Rancher Manager.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-5qmp-9x47-92q8">https://github.com/rancher/rancher/security/advisories/GHSA-5qmp-9x47-92q8</a></li>
<li><a href="https://github.com/advisories/GHSA-5qmp-9x47-92q8">https://github.com/advisories/GHSA-5qmp-9x47-92q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5qmp-9x47-92q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-27T18:27:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher's SAML-based login via CLI can be denied by unauthenticated users]]></title>
        <id>https://github.com/advisories/GHSA-5qmp-9x47-92q8</id>
        <link href="https://github.com/advisories/GHSA-5qmp-9x47-92q8"/>
        <updated>2025-02-27T18:27:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where it is possible for an unauthenticated user to list all CLI authentication tokens and delete them before the CLI is able to get the token value. This effectively prevents users from logging in via the CLI when using rancher token as the execution command (instead of the token directly being in the kubeconfig). </p>
<p>Note that this token is not the kubeconfig token and if an attacker is able to intercept it they can't use it to impersonate a real user since it is encrypted.</p>
<p>This happens because for SAML-based authentication providers, the login flow from the CLI works by generating a link to be pasted in the browser, and then polling every 10 seconds for the <code>/v3-public/authTokens/&lt;token name&gt;</code> endpoint.  The <code>&lt;token name&gt;</code> is randomly generated by the CLI. Once the login flow succeeds, Rancher creates an auth token (with an encrypted token value). The CLI then deletes the authToken.</p>
<p>Rancher deployments using only the local authentication provider, or non-SAML-based authentication providers, are not impacted by this vulnerability. SAML-based users not using the CLI are also not impacted.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1531/">MITRE ATT&amp;CK - Technique - Account Access Removal</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix involves removing GET and DELETE methods for the authTokens collection.</p>
<p>Patched versions include releases <code>v2.8.13</code>, <code>v2.9.7</code> and <code>v2.10.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can refrain from using the Rancher CLI to log in as a workaround. Otherwise, users are advised to upgrade to a patched version of Rancher Manager.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-5qmp-9x47-92q8">https://github.com/rancher/rancher/security/advisories/GHSA-5qmp-9x47-92q8</a></li>
<li><a href="https://github.com/advisories/GHSA-5qmp-9x47-92q8">https://github.com/advisories/GHSA-5qmp-9x47-92q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5qmp-9x47-92q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-27T18:27:41.000Z</published>
    </entry>
</feed>