<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-11-22T15:02:08.460Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/pingcap/tidb] PingCAP TiDB nil pointer dereference]]></title>
        <id>https://github.com/advisories/GHSA-9g6g-xqv5-8g5w</id>
        <link href="https://github.com/advisories/GHSA-9g6g-xqv5-8g5w"/>
        <updated>2024-11-21T23:19:52.000Z</updated>
        <content type="html"><![CDATA[<p>A nil pointer dereference in PingCAP TiDB v8.2.0-alpha-216-gfe5858b allows attackers to crash the application via expression.inferCollation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37820">https://nvd.nist.gov/vuln/detail/CVE-2024-37820</a></li>
<li><a href="https://github.com/pingcap/tidb/issues/53580">https://github.com/pingcap/tidb/issues/53580</a></li>
<li><a href="https://gist.github.com/ycybfhb/a9c1e14ce281f2f553adca84d384b761">https://gist.github.com/ycybfhb/a9c1e14ce281f2f553adca84d384b761</a></li>
<li><a href="https://github.com/pingcap/tidb/commit/3d68bd21240c610c6307713e2bd54a5e71c32608">https://github.com/pingcap/tidb/commit/3d68bd21240c610c6307713e2bd54a5e71c32608</a></li>
<li><a href="https://github.com/advisories/GHSA-9g6g-xqv5-8g5w">https://github.com/advisories/GHSA-9g6g-xqv5-8g5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9g6g-xqv5-8g5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-25T21:31:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/drakkan/sftpgo/v2] SFTPGo allows administrators to restrict command execution from the EventManager]]></title>
        <id>https://github.com/advisories/GHSA-49cc-xrjf-9qf7</id>
        <link href="https://github.com/advisories/GHSA-49cc-xrjf-9qf7"/>
        <updated>2024-11-21T23:19:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>One powerful feature of SFTPGo is the ability to have the EventManager execute scripts or run applications in response to certain events.
This feature is very common in all software similar to SFTPGo and is generally unrestricted. </p>
<p>However, any SFTPGo administrator with permission to run a script has access to the underlying OS/container with the same permissions as the user running SFTPGo.</p>
<p>This is unexpected for some SFTPGo administrators who think that there is a clear distinction between accessing the system shell and accessing the SFTPGo WebAdmin UI.</p>
<h3 id="patches">Patches</h3>
<p>To avoid this confusion, running system commands is now disabled by default, and an allow list has been added so that system administrators configuring SFTPGo must explicitly define which commands are allowed to be configured from the WebAdmin UI.</p>
<p><a href="https://github.com/drakkan/sftpgo/commit/88b1850b5806eee81150873d4e565144b21021fb">https://github.com/drakkan/sftpgo/commit/88b1850b5806eee81150873d4e565144b21021fb</a>
<a href="https://github.com/drakkan/sftpgo/commit/b524da11e9466d05fe03304713ee1c61bb276ec4">https://github.com/drakkan/sftpgo/commit/b524da11e9466d05fe03304713ee1c61bb276ec4</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Allow EventManager to be used only by SFTPGo administrators who also have shell access.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/drakkan/sftpgo/security/advisories/GHSA-49cc-xrjf-9qf7">https://github.com/drakkan/sftpgo/security/advisories/GHSA-49cc-xrjf-9qf7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52309">https://nvd.nist.gov/vuln/detail/CVE-2024-52309</a></li>
<li><a href="https://github.com/drakkan/sftpgo/commit/88b1850b5806eee81150873d4e565144b21021fb">https://github.com/drakkan/sftpgo/commit/88b1850b5806eee81150873d4e565144b21021fb</a></li>
<li><a href="https://github.com/drakkan/sftpgo/commit/b524da11e9466d05fe03304713ee1c61bb276ec4">https://github.com/drakkan/sftpgo/commit/b524da11e9466d05fe03304713ee1c61bb276ec4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3283">https://pkg.go.dev/vuln/GO-2024-3283</a></li>
<li><a href="https://github.com/advisories/GHSA-49cc-xrjf-9qf7">https://github.com/advisories/GHSA-49cc-xrjf-9qf7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-49cc-xrjf-9qf7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-21T23:19:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cert-manager/cert-manager] cert-manager ha a potential slowdown / DoS when parsing specially crafted PEM inputs]]></title>
        <id>https://github.com/advisories/GHSA-r4pg-vg54-wxx4</id>
        <link href="https://github.com/advisories/GHSA-r4pg-vg54-wxx4"/>
        <updated>2024-11-20T20:48:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>cert-manager packages which call the standard library <code>pem.Decode()</code> function  can take a long time to process specially crafted invalid PEM data.</p>
<p>If an attacker is able to modify PEM data which cert-manager reads (e.g. in a Secret resource), they may be able to use large amounts of CPU in the cert-manager controller pod to effectively create a denial-of-service (DoS) vector for cert-manager in the cluster.</p>
<p>Secrets are limited in size to <a href="https://kubernetes.io/docs/concepts/configuration/secret/#restriction-data-size">1MiB</a>, which reduces the impact of this issue; it was discovered through an ~856kB fuzz test input which causes <code>pem.Decode</code> to take roughly 750ms to reject the input on an M2 Max Macbook Pro. By way of comparison, a valid PEM-encoded 4096-bit RSA key takes roughly 70Âµs to parse on the same machine.</p>
<p>Given the required size of PEM data needed to present a realistic DoS vector, an attacker would need to create or insert many different large sized resources in the cluster, and so the best secondary defense is to ensure that sensible limits are placed via RBAC.</p>
<p>This issue affects all versions of cert-manager to have been released since at least v0.1.0 (since <code>pem.Decode</code> is core functionality for cert-manager). All <a href="https://cert-manager.io/docs/releases/">supported releases</a> are patched.</p>
<h3 id="patches">Patches</h3>
<p>The fixed versions are v1.16.2, v1.15.4 and v1.12.14.</p>
<ul>
<li>master branch: <a href="https://github.com/cert-manager/cert-manager/pull/7400">https://github.com/cert-manager/cert-manager/pull/7400</a></li>
<li>release-1.16 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7401">https://github.com/cert-manager/cert-manager/pull/7401</a></li>
<li>release-1.15 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7402">https://github.com/cert-manager/cert-manager/pull/7402</a></li>
<li>release-1.12 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7403">https://github.com/cert-manager/cert-manager/pull/7403</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that RBAC is scoped correctly in your cluster. If a user is able to modify resources containing PEM data to be able to exploit this, it's like that those permissions are a bigger security threat than this issue - especially for Secret resources.</p>
<h3 id="references">References</h3>
<ul>
<li>Upstream issue: <a href="https://github.com/golang/go/issues/50116">https://github.com/golang/go/issues/50116</a></li>
<li>Similar issue: <a href="https://github.com/sigstore/sigstore/issues/198">https://github.com/sigstore/sigstore/issues/198</a></li>
<li>Google OSSFuzz: <a href="https://issues.oss-fuzz.com/issues/376728466">https://issues.oss-fuzz.com/issues/376728466</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4">https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4</a></li>
<li><a href="https://github.com/golang/go/issues/50116">https://github.com/golang/go/issues/50116</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7400">https://github.com/cert-manager/cert-manager/pull/7400</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7401">https://github.com/cert-manager/cert-manager/pull/7401</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7402">https://github.com/cert-manager/cert-manager/pull/7402</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7403">https://github.com/cert-manager/cert-manager/pull/7403</a></li>
<li><a href="https://github.com/advisories/GHSA-r4pg-vg54-wxx4">https://github.com/advisories/GHSA-r4pg-vg54-wxx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4pg-vg54-wxx4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T20:48:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cert-manager/cert-manager] cert-manager ha a potential slowdown / DoS when parsing specially crafted PEM inputs]]></title>
        <id>https://github.com/advisories/GHSA-r4pg-vg54-wxx4</id>
        <link href="https://github.com/advisories/GHSA-r4pg-vg54-wxx4"/>
        <updated>2024-11-20T20:48:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>cert-manager packages which call the standard library <code>pem.Decode()</code> function  can take a long time to process specially crafted invalid PEM data.</p>
<p>If an attacker is able to modify PEM data which cert-manager reads (e.g. in a Secret resource), they may be able to use large amounts of CPU in the cert-manager controller pod to effectively create a denial-of-service (DoS) vector for cert-manager in the cluster.</p>
<p>Secrets are limited in size to <a href="https://kubernetes.io/docs/concepts/configuration/secret/#restriction-data-size">1MiB</a>, which reduces the impact of this issue; it was discovered through an ~856kB fuzz test input which causes <code>pem.Decode</code> to take roughly 750ms to reject the input on an M2 Max Macbook Pro. By way of comparison, a valid PEM-encoded 4096-bit RSA key takes roughly 70Âµs to parse on the same machine.</p>
<p>Given the required size of PEM data needed to present a realistic DoS vector, an attacker would need to create or insert many different large sized resources in the cluster, and so the best secondary defense is to ensure that sensible limits are placed via RBAC.</p>
<p>This issue affects all versions of cert-manager to have been released since at least v0.1.0 (since <code>pem.Decode</code> is core functionality for cert-manager). All <a href="https://cert-manager.io/docs/releases/">supported releases</a> are patched.</p>
<h3 id="patches">Patches</h3>
<p>The fixed versions are v1.16.2, v1.15.4 and v1.12.14.</p>
<ul>
<li>master branch: <a href="https://github.com/cert-manager/cert-manager/pull/7400">https://github.com/cert-manager/cert-manager/pull/7400</a></li>
<li>release-1.16 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7401">https://github.com/cert-manager/cert-manager/pull/7401</a></li>
<li>release-1.15 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7402">https://github.com/cert-manager/cert-manager/pull/7402</a></li>
<li>release-1.12 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7403">https://github.com/cert-manager/cert-manager/pull/7403</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that RBAC is scoped correctly in your cluster. If a user is able to modify resources containing PEM data to be able to exploit this, it's like that those permissions are a bigger security threat than this issue - especially for Secret resources.</p>
<h3 id="references">References</h3>
<ul>
<li>Upstream issue: <a href="https://github.com/golang/go/issues/50116">https://github.com/golang/go/issues/50116</a></li>
<li>Similar issue: <a href="https://github.com/sigstore/sigstore/issues/198">https://github.com/sigstore/sigstore/issues/198</a></li>
<li>Google OSSFuzz: <a href="https://issues.oss-fuzz.com/issues/376728466">https://issues.oss-fuzz.com/issues/376728466</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4">https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4</a></li>
<li><a href="https://github.com/golang/go/issues/50116">https://github.com/golang/go/issues/50116</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7400">https://github.com/cert-manager/cert-manager/pull/7400</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7401">https://github.com/cert-manager/cert-manager/pull/7401</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7402">https://github.com/cert-manager/cert-manager/pull/7402</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7403">https://github.com/cert-manager/cert-manager/pull/7403</a></li>
<li><a href="https://github.com/advisories/GHSA-r4pg-vg54-wxx4">https://github.com/advisories/GHSA-r4pg-vg54-wxx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4pg-vg54-wxx4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T20:48:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cert-manager/cert-manager] cert-manager ha a potential slowdown / DoS when parsing specially crafted PEM inputs]]></title>
        <id>https://github.com/advisories/GHSA-r4pg-vg54-wxx4</id>
        <link href="https://github.com/advisories/GHSA-r4pg-vg54-wxx4"/>
        <updated>2024-11-20T20:48:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>cert-manager packages which call the standard library <code>pem.Decode()</code> function  can take a long time to process specially crafted invalid PEM data.</p>
<p>If an attacker is able to modify PEM data which cert-manager reads (e.g. in a Secret resource), they may be able to use large amounts of CPU in the cert-manager controller pod to effectively create a denial-of-service (DoS) vector for cert-manager in the cluster.</p>
<p>Secrets are limited in size to <a href="https://kubernetes.io/docs/concepts/configuration/secret/#restriction-data-size">1MiB</a>, which reduces the impact of this issue; it was discovered through an ~856kB fuzz test input which causes <code>pem.Decode</code> to take roughly 750ms to reject the input on an M2 Max Macbook Pro. By way of comparison, a valid PEM-encoded 4096-bit RSA key takes roughly 70Âµs to parse on the same machine.</p>
<p>Given the required size of PEM data needed to present a realistic DoS vector, an attacker would need to create or insert many different large sized resources in the cluster, and so the best secondary defense is to ensure that sensible limits are placed via RBAC.</p>
<p>This issue affects all versions of cert-manager to have been released since at least v0.1.0 (since <code>pem.Decode</code> is core functionality for cert-manager). All <a href="https://cert-manager.io/docs/releases/">supported releases</a> are patched.</p>
<h3 id="patches">Patches</h3>
<p>The fixed versions are v1.16.2, v1.15.4 and v1.12.14.</p>
<ul>
<li>master branch: <a href="https://github.com/cert-manager/cert-manager/pull/7400">https://github.com/cert-manager/cert-manager/pull/7400</a></li>
<li>release-1.16 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7401">https://github.com/cert-manager/cert-manager/pull/7401</a></li>
<li>release-1.15 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7402">https://github.com/cert-manager/cert-manager/pull/7402</a></li>
<li>release-1.12 branch: <a href="https://github.com/cert-manager/cert-manager/pull/7403">https://github.com/cert-manager/cert-manager/pull/7403</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that RBAC is scoped correctly in your cluster. If a user is able to modify resources containing PEM data to be able to exploit this, it's like that those permissions are a bigger security threat than this issue - especially for Secret resources.</p>
<h3 id="references">References</h3>
<ul>
<li>Upstream issue: <a href="https://github.com/golang/go/issues/50116">https://github.com/golang/go/issues/50116</a></li>
<li>Similar issue: <a href="https://github.com/sigstore/sigstore/issues/198">https://github.com/sigstore/sigstore/issues/198</a></li>
<li>Google OSSFuzz: <a href="https://issues.oss-fuzz.com/issues/376728466">https://issues.oss-fuzz.com/issues/376728466</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4">https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4</a></li>
<li><a href="https://github.com/golang/go/issues/50116">https://github.com/golang/go/issues/50116</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7400">https://github.com/cert-manager/cert-manager/pull/7400</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7401">https://github.com/cert-manager/cert-manager/pull/7401</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7402">https://github.com/cert-manager/cert-manager/pull/7402</a></li>
<li><a href="https://github.com/cert-manager/cert-manager/pull/7403">https://github.com/cert-manager/cert-manager/pull/7403</a></li>
<li><a href="https://github.com/advisories/GHSA-r4pg-vg54-wxx4">https://github.com/advisories/GHSA-r4pg-vg54-wxx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4pg-vg54-wxx4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T20:48:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher Helm Applications may have sensitive values leaked]]></title>
        <id>https://github.com/advisories/GHSA-9c5p-35gj-jqp4</id>
        <link href="https://github.com/advisories/GHSA-9c5p-35gj-jqp4"/>
        <updated>2024-11-20T18:24:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher Manager whereby applications installed via Rancher Manager Apps Catalog store their Helm values directly into the <code>Apps</code> Custom Resource Definition, resulting in any users with <code>GET</code> access to it to be able to read any sensitive information that are contained within the Appsâ values. Additionally, the same information leaks into auditing logs when the audit level is set to equal or above 2.</p>
<p>Application charts without sensitive data are not affected by this vulnerability.
This vulnerability impacts any Helm applications installed on a Rancher Manager cluster, regardless of it being installed via the Marketplace or using the helm cli.</p>
<p>Please consult the associated <a href="https://attack.mitre.org/techniques/T1068/">MITRE ATT&amp;CK - Technique - Exploitation for Privilege Escalation</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include Rancher Manager <code>2.9.5</code> and <code>2.8.10</code>. The fix ensures that all Helm values for each App are stored as Kubernetes Secrets. After the upgrade, users are recommended to rotate passwords and secrets that may have been leaked while using the affected versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds are available, therefore users are advised to upgrade to a patched version of Rancher Manager.
For deployments that canât be upgraded in a timely fashion, admins are advised to limit the impact by reducing the amount of users who can get or list the Appsâ CRD. Additionally, the same applies to the auditing logs if the Rancher Manager has audit logs enabled and set to level 2 or above.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-9c5p-35gj-jqp4">https://github.com/rancher/rancher/security/advisories/GHSA-9c5p-35gj-jqp4</a></li>
<li><a href="https://github.com/advisories/GHSA-9c5p-35gj-jqp4">https://github.com/advisories/GHSA-9c5p-35gj-jqp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c5p-35gj-jqp4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T18:24:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher Helm Applications may have sensitive values leaked]]></title>
        <id>https://github.com/advisories/GHSA-9c5p-35gj-jqp4</id>
        <link href="https://github.com/advisories/GHSA-9c5p-35gj-jqp4"/>
        <updated>2024-11-20T18:24:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher Manager whereby applications installed via Rancher Manager Apps Catalog store their Helm values directly into the <code>Apps</code> Custom Resource Definition, resulting in any users with <code>GET</code> access to it to be able to read any sensitive information that are contained within the Appsâ values. Additionally, the same information leaks into auditing logs when the audit level is set to equal or above 2.</p>
<p>Application charts without sensitive data are not affected by this vulnerability.
This vulnerability impacts any Helm applications installed on a Rancher Manager cluster, regardless of it being installed via the Marketplace or using the helm cli.</p>
<p>Please consult the associated <a href="https://attack.mitre.org/techniques/T1068/">MITRE ATT&amp;CK - Technique - Exploitation for Privilege Escalation</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include Rancher Manager <code>2.9.5</code> and <code>2.8.10</code>. The fix ensures that all Helm values for each App are stored as Kubernetes Secrets. After the upgrade, users are recommended to rotate passwords and secrets that may have been leaked while using the affected versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds are available, therefore users are advised to upgrade to a patched version of Rancher Manager.
For deployments that canât be upgraded in a timely fashion, admins are advised to limit the impact by reducing the amount of users who can get or list the Appsâ CRD. Additionally, the same applies to the auditing logs if the Rancher Manager has audit logs enabled and set to level 2 or above.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-9c5p-35gj-jqp4">https://github.com/rancher/rancher/security/advisories/GHSA-9c5p-35gj-jqp4</a></li>
<li><a href="https://github.com/advisories/GHSA-9c5p-35gj-jqp4">https://github.com/advisories/GHSA-9c5p-35gj-jqp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c5p-35gj-jqp4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T18:24:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmossdk.io/math] ASA-2024-010: cosmossdk.io/math: Mismatched bit-length validation in sdk.Int and sdk.Dec can lead to panic]]></title>
        <id>https://github.com/advisories/GHSA-7225-m954-23v7</id>
        <link href="https://github.com/advisories/GHSA-7225-m954-23v7"/>
        <updated>2024-11-20T18:23:52.000Z</updated>
        <content type="html"><![CDATA[<p>Name: ASA-2024-010: Mismatched bit-length in <code>sdk.Int</code> and <code>sdk.Dec</code> can lead to panic 
Component: Cosmos SDK / Math
Criticality: High (Considerable Impact, and Possible Likelihood per <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>)
Affected versions: <code>cosmossdk.io/math</code> package versions &lt;= <code>math/v1.3.0</code>
Affected users: Chain Builders + Maintainers, Validators</p>
<h3 id="impact">Impact</h3>
<p>The bit-length in <code>sdk.Int</code> and <code>sdk.Dec</code> are not aligned, which may present a possible panic condition when interacting with <code>Dec</code> types in an <code>Int</code> context. This issue was resolved by aligning the max size between the data types in the cosmossdk.io/math package.</p>
<p>This issue impacts consumers of the cosmossdk.io/math, which includes popular modules including IBC-Go and tokenfactory (permissionless). If your chain interacts with APIs in the cosmossdk.io/math package, or utilizes a module that consumes this library, it is advised to update to the latest version at the time of the patch release by updating your project's go.mod dependency for cosmossdk.io/math.</p>
<p>The patch can be applied without a hard-fork, and with a version bump in a chain's go.mod file like the following:</p>
<h4 id="gomod"><code>go.mod</code></h4>
<pre><code class="language-diff">- cosmossdk.io/math v1.3.0
+ cosmossdk.io/math v1.4.0
</code></pre>
<blockquote>
<p>[!NOTE]<br>When on a lower version than cosmossdk.io/math v1.3.0, please do a coordinated upgrade before upgrading to &gt;= 1.3.0</p>
</blockquote>
<h3 id="patches">Patches</h3>
<p>The new release of <code>cosmossdk.io/math v1.4.0</code> resolves this issue.  Chains that utilize the cosmossdk.io/math library or modules that utilize the cosmossdk.io/math library should update to avoid this condition.</p>
<h3 id="timeline">Timeline</h3>
<ul>
<li>October 31, 2024, 6:55pm UTC: Issue reported to the Cosmos Bug Bounty program</li>
<li>October 31, 2024, 8:56pm UTC: Issue triaged by Amulet on-call, and distributed to Core team</li>
<li>Nov 15, 2024, 2:12am PST: Core team completes patch for issue</li>
<li>Nov 19, 2024, 8:00am PST / 16:00 GMT: Pre-notification delivered</li>
<li>Nov 20, 2024, 8:00am PST / 16:00 GMT: Patch made available</li>
</ul>
<p>This issue was reported by LonelySloth to the Cosmos Bug Bounty Program on HackerOne on October 31, 2024. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.  For more information about the Interchain Foundationâs engagement with Amulet, and to sign up for security notification emails, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.  </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-7225-m954-23v7">https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-7225-m954-23v7</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/commit/c6522a72a45c34897f9fc85d438c0b74d52f8862">https://github.com/cosmos/cosmos-sdk/commit/c6522a72a45c34897f9fc85d438c0b74d52f8862</a></li>
<li><a href="https://github.com/advisories/GHSA-7225-m954-23v7">https://github.com/advisories/GHSA-7225-m954-23v7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7225-m954-23v7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-20T18:23:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/steve]  github.com/rancher/steve's users can issue watch commands for arbitrary resources]]></title>
        <id>https://github.com/advisories/GHSA-j5hq-5jcr-xwx7</id>
        <link href="https://github.com/advisories/GHSA-j5hq-5jcr-xwx7"/>
        <updated>2024-11-20T18:23:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been discovered in Steve API (Kubernetes API Translator) in which users can watch resources they are not allowed to access, when they have at least some generic permissions on the type. For example, a user who can get a single secret in a single namespace can get all secrets in every namespace.</p>
<p>During a <code>watch</code> request for a single ID, the following occurs:</p>
<ul>
<li>In the case of a watch request for a single resource, Steve API will return a partition with the requested resource in it. In other cases, it will check the user's access when constructing partitions.</li>
<li>When a watch request for a single resource is issued, instead of using a client which impersonates the user making the request, Steve API will use the admin client, which can read all resources.</li>
</ul>
<p>This allows any requester to see the contents of any object such as secret keys, signing certificates, API tokens.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1078/003/">MITRE ATT&amp;CK - Technique - Valid Accounts</a> and  <a href="https://attack.mitre.org/techniques/T1613/">MITRE ATT&amp;CK - Technique - Container and Resource Discovery</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>To address this issue, the fix introduces a change in the behavior of the Steve API.</p>
<p>When issuing a <code>watch</code> request with an ID specified, the requester's permissions are now correctly honoured. This will deny events for objects the requester cannot actually access. Previously these events were returned unconditionally, allowing any requester to see the contents of any object.</p>
<p>Patched versions include the following commits:</p>
<table>
<thead>
<tr>
<th>Branch</th>
<th>Commit</th>
</tr>
</thead>
<tbody><tr>
<td>main</td>
<td><a href="https://github.com/rancher/steve/commit/2175e090fe4b1e603a54e1cdc5148a2b1c11b4d9">https://github.com/rancher/steve/commit/2175e090fe4b1e603a54e1cdc5148a2b1c11b4d9</a></td>
</tr>
<tr>
<td>release/v2.9</td>
<td><a href="https://github.com/rancher/steve/commit/6e30359c652333a49e229b2791c9b403d5ef81a9">https://github.com/rancher/steve/commit/6e30359c652333a49e229b2791c9b403d5ef81a9</a></td>
</tr>
<tr>
<td>release/v2.8</td>
<td><a href="https://github.com/rancher/steve/commit/c744f0b17b88ff5e2fcabc60841174d878ddc88e">https://github.com/rancher/steve/commit/c744f0b17b88ff5e2fcabc60841174d878ddc88e</a></td>
</tr>
</tbody></table>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds for this issue. Users are recommended to upgrade, as soon as possible, to a version of Steve API/Rancher Manager which contains the fixes.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security-related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/steve/security/advisories/GHSA-j5hq-5jcr-xwx7">https://github.com/rancher/steve/security/advisories/GHSA-j5hq-5jcr-xwx7</a></li>
<li><a href="https://github.com/rancher/steve/commit/2175e090fe4b1e603a54e1cdc5148a2b1c11b4d9">https://github.com/rancher/steve/commit/2175e090fe4b1e603a54e1cdc5148a2b1c11b4d9</a></li>
<li><a href="https://github.com/advisories/GHSA-j5hq-5jcr-xwx7">https://github.com/advisories/GHSA-j5hq-5jcr-xwx7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j5hq-5jcr-xwx7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-20T18:23:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rclone/rclone] Rclone has Improper Permission and Ownership Handling on Symlink Targets with --links and --metadata]]></title>
        <id>https://github.com/advisories/GHSA-hrxh-9w67-g4cv</id>
        <link href="https://github.com/advisories/GHSA-hrxh-9w67-g4cv"/>
        <updated>2024-11-19T20:36:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="tldr"><strong>tl;dr:</strong></h3>
<p>unprivileged user creates a symlink to /etc/sudoers, /etc/shadow or similar and waits for a privileged user or process to copy/backup/mirror users data (using <code>--links</code> and <code>--metadata</code>). unprivileged user now owns /etc/sudoers.</p>
<h3 id="summary">Summary</h3>
<p>Insecure handling of symlinks with <code>--links</code> and <code>--metadata</code> in rclone while copying to local disk allows unprivileged users to indirectly modify ownership and permissions on symlink target files when a superuser or privileged process performs a copy. This vulnerability could enable privilege escalation and unauthorized access to critical system files (e.g., /etc/shadow), compromising system integrity, confidentiality, and availability.</p>
<p>For instance, an unprivileged user could set a symlink to a sensitive file within their home directory, waiting for an administrator or automated process (e.g., a cron job running with elevated privileges) to copy their files with rclone using the --links and --metadata options. Upon copying, rclone will incorrectly apply chown and chmod to the symlinkâs target file rather than just the symlink itself, resulting in ownership and permission changes on the sensitive file.</p>
<h3 id="who-is-affected">Who is affected</h3>
<p>If you are not using <code>--metadata</code> <strong>and</strong> <code>--links</code> <strong>and</strong> copying files <strong>to</strong> the local backend you are not affected by this issue.</p>
<p>If you are using <code>--metadata</code> and <code>-links</code> and copying files to the local backend but not as a superuser, then this will manifest itself as a bug by setting incorrect permissions.</p>
<p>If you are using <code>--metadata</code> and <code>-links</code> and copying files to the local backend but as a superuser then this could affect you.</p>
<h3 id="details">Details</h3>
<p>When copying directories containing symlinks with rclone using the --links and --metadata options, rclone mistakenly applies chown and chmod operations to the target of the symlink instead of the symlink itself. As a result, ownership and permissions on sensitive system files (e.g., /etc/shadow) may be altered if they are the target of any symlink within the copied directory structure. This allows users to affect the permissions and ownership of files they should not have access to, resulting in privilege escalation and potential system compromise.</p>
<h3 id="poc">PoC</h3>
<pre><code># Create a directory to simulate a user home directory
root@workstation:~# mkdir -p /tmp/home/user1
root@workstation:~# sudo chown user1:user1 /tmp/home/user1
</code></pre>
<pre><code># As user1, create a symlink to /etc/shadow within their home directory
root@workstation:~# sudo -u user1 ln -s /etc/shadow /tmp/home/user1/shadow_link
</code></pre>
<pre><code># List permissions on the original files
root@workstation:~# ls -l /tmp/home/user1/shadow_link /etc/shadow
----------. 1 root  root  1283 Nov  5 13:30 /etc/shadow
lrwxrwxrwx. 1 user1 user1   11 Nov  5 13:56 /tmp/home/user1/shadow_link -&gt; /etc/shadow
</code></pre>
<pre><code># Copy the directory structure with rclone
root@workstation:~# rclone copy /tmp/home /tmp/home_new --links --metadata --log-level=DEBUG
2024/11/05 13:56:53 DEBUG : rclone: Version "v1.68.1" starting with parameters ["rclone" "copy" "/tmp/home" "/tmp/home_new" "--links" "--metadata" "--log-level=DEBUG"]
2024/11/05 13:56:53 DEBUG : Creating backend with remote "/tmp/home"
2024/11/05 13:56:53 NOTICE: Config file "/root/.config/rclone/rclone.conf" not found - using defaults
2024/11/05 13:56:53 DEBUG : local: detected overridden config - adding "{b6816}" suffix to name
2024/11/05 13:56:53 DEBUG : fs cache: renaming cache item "/tmp/home" to be canonical "local{b6816}:/tmp/home"
2024/11/05 13:56:53 DEBUG : Creating backend with remote "/tmp/home_new"
2024/11/05 13:56:53 DEBUG : local: detected overridden config - adding "{b6816}" suffix to name
2024/11/05 13:56:53 DEBUG : fs cache: renaming cache item "/tmp/home_new" to be canonical "local{b6816}:/tmp/home_new"
2024/11/05 13:56:53 DEBUG : Added delayed dir = "user1", newDst=&lt;nil&gt;
2024/11/05 13:56:53 DEBUG : user1/shadow_link.rclonelink: Need to transfer - File not found at Destination
2024/11/05 13:56:53 DEBUG : user1/shadow_link.rclonelink: md5 = 2fe8599cb25a0c790213d39b3be97c27 OK
2024/11/05 13:56:53 INFO  : user1/shadow_link.rclonelink: Copied (new)
2024/11/05 13:56:53 DEBUG : Local file system at /tmp/home_new: Waiting for checks to finish
2024/11/05 13:56:53 DEBUG : Local file system at /tmp/home_new: Waiting for transfers to finish
2024/11/05 13:56:53 INFO  : user1: Updated directory metadata
2024/11/05 13:56:53 INFO  :
Transferred:             11 B / 11 B, 100%, 0 B/s, ETA -
Transferred:            1 / 1, 100%
Elapsed time:         0.0s

2024/11/05 13:56:53 DEBUG : 6 go routines active
</code></pre>
<pre><code># List permissions again
root@workstation:~# ls -l /tmp/home/user1/shadow_link /etc/shadow /tmp/home_new/user1/shadow_link
-rwxrwxrwx. 1 user1 user1 1283 Nov  5 13:30 /etc/shadow                                                 # Wrong, very wrong. Should be root:root and 0000.
lrwxrwxrwx. 1 root  root    11 Nov  5 13:56 /tmp/home_new/user1/shadow_link -&gt; /etc/shadow              # Wrong too, should be user1:user1
lrwxrwxrwx. 1 user1 user1   11 Nov  5 13:56 /tmp/home/user1/shadow_link -&gt; /etc/shadow
</code></pre>
<pre><code># Fix /etc/shadow and clean up
root@workstation:~# chown root:root /etc/shadow
root@workstation:~# chmod 000 /etc/shadow
root@workstation:~# rm -rf /tmp/home /tmp/home_new
</code></pre>
<h3 id="impact">Impact</h3>
<p>Type of Vulnerability: Improper permissions and ownership handling on symlink targets (Insecure Handling of Symlinks)</p>
<p>Impact: This vulnerability allows unprivileged users to modify permissions and ownership of sensitive system files by creating symlinks to those files in directories that are subsequently copied by an administrator with rclone --links --metadata. This can lead to unauthorized access, privilege escalation, and potential system compromise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rclone/rclone/security/advisories/GHSA-hrxh-9w67-g4cv">https://github.com/rclone/rclone/security/advisories/GHSA-hrxh-9w67-g4cv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52522">https://nvd.nist.gov/vuln/detail/CVE-2024-52522</a></li>
<li><a href="https://github.com/rclone/rclone/commit/01ccf204f42b4f68541b16843292439090a2dcf0">https://github.com/rclone/rclone/commit/01ccf204f42b4f68541b16843292439090a2dcf0</a></li>
<li><a href="https://github.com/advisories/GHSA-hrxh-9w67-g4cv">https://github.com/advisories/GHSA-hrxh-9w67-g4cv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrxh-9w67-g4cv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-19T20:36:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cli/cli] Connecting to a malicious Codespaces via GH CLI could allow command execution on the user's computer]]></title>
        <id>https://github.com/advisories/GHSA-p2h2-3vg9-4p87</id>
        <link href="https://github.com/advisories/GHSA-p2h2-3vg9-4p87"/>
        <updated>2024-11-19T19:37:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A security vulnerability has been identified in GitHub CLI that could allow remote code execution (RCE) when users connect to a malicious Codespace SSH server and use the <code>gh codespace ssh</code> or <code>gh codespace logs</code> commands.</p>
<h3 id="details">Details</h3>
<p>The vulnerability stems from the way GitHub CLI handles SSH connection details when executing commands. When developers connect to remote Codespaces, they typically use a SSH server running within a devcontainer, often provided through the <a href="https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers#using-the-default-dev-container-configuration">default devcontainer image</a>.  GitHub CLI <a href="https://github.com/cli/cli/blob/30066b0042d0c5928d959e288144300cb28196c9/internal/codespaces/rpc/invoker.go#L230-L244">retrieves SSH connection details</a>, such as remote username, which is used in <a href="https://github.com/cli/cli/blob/e356c69a6f0125cfaac782c35acf77314f18908d/pkg/cmd/codespace/ssh.go#L263">executing <code>ssh</code> commands</a> for <code>gh codespace ssh</code> or <code>gh codespace logs</code> commands.</p>
<p>This exploit occurs when a malicious third-party devcontainer contains a modified SSH server that injects <code>ssh</code> arguments within the SSH connection details. <code>gh codespace ssh</code> and <code>gh codespace logs</code> commands could execute arbitrary code on the user's workstation if the remote username contains something like <code>-oProxyCommand="echo hacked" #</code>.  The <code>-oProxyCommand</code> flag causes <code>ssh</code> to execute the provided command while <code>#</code> shell comment causes any other <code>ssh</code> arguments to be ignored.</p>
<p>In <code>2.62.0</code>, the remote username information is being validated before being used.</p>
<h3 id="impact">Impact</h3>
<p>Successful exploitation could lead to arbitrary code execution on the user's workstation, potentially compromising the user's data and system.</p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<ol>
<li>Upgrade <code>gh</code> to <code>2.62.0</code></li>
<li>Exercise caution when using custom devcontainer images, prefer default or pre-built devcontainers from trusted sources.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cli/cli/security/advisories/GHSA-p2h2-3vg9-4p87">https://github.com/cli/cli/security/advisories/GHSA-p2h2-3vg9-4p87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52308">https://nvd.nist.gov/vuln/detail/CVE-2024-52308</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3269">https://pkg.go.dev/vuln/GO-2024-3269</a></li>
<li><a href="https://github.com/advisories/GHSA-p2h2-3vg9-4p87">https://github.com/advisories/GHSA-p2h2-3vg9-4p87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2h2-3vg9-4p87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-14T17:39:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tobychui/zoraxy] Zoraxy has an authenticated command injection in the Web SSH feature]]></title>
        <id>https://github.com/advisories/GHSA-7hpf-g48v-hw3j</id>
        <link href="https://github.com/advisories/GHSA-7hpf-g48v-hw3j"/>
        <updated>2024-11-19T19:38:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A command injection vulnerability in the Web SSH feature allows an authenticated attacker to execute arbitrary commands as root on the host.</p>
<h3 id="details">Details</h3>
<p>Zoraxy has a Web SSH terminal feature that allows authenticated users to connect to SSH servers from their browsers.
In <a href="https://github.com/tobychui/zoraxy/blob/9cb315ea6739d1cc201b690322d25166b12dc5db/src/webssh.go#L19"><code>HandleCreateProxySession</code></a> the request to create an SSH session is handled. After checking for the presence of required parameters, ensuring that the target is not the loopback interface and that there is actually an SSH service running on the target, <code>CreateNewConnection</code> is called:</p>
<p><a href="https://github.com/tobychui/zoraxy/blob/e79a70b7acfa45c2445aff9d60e4e7525c89fec8/src/mod/sshprox/sshprox.go#L165-L178">https://github.com/tobychui/zoraxy/blob/e79a70b7acfa45c2445aff9d60e4e7525c89fec8/src/mod/sshprox/sshprox.go#L165-L178</a></p>
<p>In line 178, the <code>gotty</code> binary is executed running <code>sshCommand</code> from the line above. It contains the user-controlled variable <code>connAddr</code>, which includes the hostname of the SSH server and - if provided - the username.
An attacker can exploit the <code>username</code> variable to escape from the <code>bash</code> command and inject arbitrary commands into <code>sshCommand</code>. This is possible, because, unlike hostname and port, the username is not validated or sanitized.</p>
<p>This vulnerability was introduced in <a href="https://github.com/tobychui/zoraxy/commit/c07d5f85dfc37bd32819358ed7d4bc32c604e8f0">https://github.com/tobychui/zoraxy/commit/c07d5f85dfc37bd32819358ed7d4bc32c604e8f0</a>.
If Zoraxy is run without authentication of the management interface (started with<code>-noauth</code>), this vulnerability can be exploited without authentication.
Additionally, if Zoraxy is run in Docker with the Docker socket mounted (as described in <a href="https://github.com/tobychui/zoraxy/blob/9cb315ea6739d1cc201b690322d25166b12dc5db/docker/README.md">https://github.com/tobychui/zoraxy/blob/9cb315ea6739d1cc201b690322d25166b12dc5db/docker/README.md</a>), this vulnerability can be exploited to escape the Zoraxy container and gain access to the Docker host.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Download and run Zoraxy as described in the <a href="https://github.com/tobychui/zoraxy/blob/9a371f5bcbccce0918c61621f3b26ee549e01b90/README.md#standalone-mode">README</a></li>
<li>Setup a user</li>
<li>Login as user</li>
<li>Navigate to Other -&gt; Network Tools -&gt; Connection</li>
<li>Enter hostname / IP of any server with SSH running, e.g. <code>github.com</code></li>
<li>Enter <code>; bash ;</code> as user</li>
<li>Click <code>Connect using SSH</code></li>
<li>A window will open with <code>bash</code> running on the Zoraxy host</li>
</ol>
<p>Demo:</p>
<p><a href="https://github.com/user-attachments/assets/5a3d8771-167f-4a79-8665-ed0dfb490181">https://github.com/user-attachments/assets/5a3d8771-167f-4a79-8665-ed0dfb490181</a></p>
<h3 id="impact">Impact</h3>
<p>This vulnerability allows an authenticated attacker to gain remote code execution with the privileges of the Zoraxy process (root by default). This affects Zoraxy versions 2.6.1 through 3.1.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tobychui/zoraxy/security/advisories/GHSA-7hpf-g48v-hw3j">https://github.com/tobychui/zoraxy/security/advisories/GHSA-7hpf-g48v-hw3j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52010">https://nvd.nist.gov/vuln/detail/CVE-2024-52010</a></li>
<li><a href="https://github.com/tobychui/zoraxy/commit/2e9bc77a5d832bff1093058d42ce7a61382e4bc6">https://github.com/tobychui/zoraxy/commit/2e9bc77a5d832bff1093058d42ce7a61382e4bc6</a></li>
<li><a href="https://github.com/tobychui/zoraxy/commit/c07d5f85dfc37bd32819358ed7d4bc32c604e8f0">https://github.com/tobychui/zoraxy/commit/c07d5f85dfc37bd32819358ed7d4bc32c604e8f0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3267">https://pkg.go.dev/vuln/GO-2024-3267</a></li>
<li><a href="https://github.com/advisories/GHSA-7hpf-g48v-hw3j">https://github.com/advisories/GHSA-7hpf-g48v-hw3j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7hpf-g48v-hw3j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-12T21:28:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Kubernetes Nil pointer dereference in KCM after v1 HPA patch request]]></title>
        <id>https://github.com/advisories/GHSA-h7wq-jj8r-qm7p</id>
        <link href="https://github.com/advisories/GHSA-h7wq-jj8r-qm7p"/>
        <updated>2024-11-19T20:25:31.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in kube-controller-manager. This issue occurs when the initial application of a HPA config YAML lacking a .spec.behavior.scaleUp block causes a denial of service due to KCM pods going into restart churn.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-0793">https://nvd.nist.gov/vuln/detail/CVE-2024-0793</a></li>
<li><a href="https://github.com/openshift/kubernetes/pull/1876">https://github.com/openshift/kubernetes/pull/1876</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:0741">https://access.redhat.com/errata/RHSA-2024:0741</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:1267">https://access.redhat.com/errata/RHSA-2024:1267</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-0793">https://access.redhat.com/security/cve/CVE-2024-0793</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2214402">https://bugzilla.redhat.com/show_bug.cgi?id=2214402</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/107038#issuecomment-1911327145">https://github.com/kubernetes/kubernetes/issues/107038#issuecomment-1911327145</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3277">https://pkg.go.dev/vuln/GO-2024-3277</a></li>
<li><a href="https://github.com/advisories/GHSA-h7wq-jj8r-qm7p">https://github.com/advisories/GHSA-h7wq-jj8r-qm7p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7wq-jj8r-qm7p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-17T12:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gogs.io/gogs] Unpatched Remote Code Execution in Gogs]]></title>
        <id>https://github.com/advisories/GHSA-phm4-wf3h-pc3r</id>
        <link href="https://github.com/advisories/GHSA-phm4-wf3h-pc3r"/>
        <updated>2024-11-20T16:44:13.000Z</updated>
        <content type="html"><![CDATA[<p>Gogs &lt;=0.13.0 is vulnerable to Directory Traversal via the editFilePost function of internal/route/repo/editor.go.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44625">https://nvd.nist.gov/vuln/detail/CVE-2024-44625</a></li>
<li><a href="https://fysac.github.io/posts/2024/11/unpatched-remote-code-execution-in-gogs">https://fysac.github.io/posts/2024/11/unpatched-remote-code-execution-in-gogs</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3275">https://pkg.go.dev/vuln/GO-2024-3275</a></li>
<li><a href="https://gogs.io">https://gogs.io</a></li>
<li><a href="https://github.com/advisories/GHSA-phm4-wf3h-pc3r">https://github.com/advisories/GHSA-phm4-wf3h-pc3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-phm4-wf3h-pc3r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-15T18:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/usememos/memos] Stored XSS using two files in usememos/memos]]></title>
        <id>https://github.com/advisories/GHSA-5r2g-59px-3q9w</id>
        <link href="https://github.com/advisories/GHSA-5r2g-59px-3q9w"/>
        <updated>2024-11-19T20:26:51.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting (XSS) vulnerability was discovered in usememos/memos version 0.9.1. This vulnerability allows an attacker to upload a JavaScript file containing a malicious script and reference it in an HTML file. When the HTML file is accessed, the malicious script is executed. This can lead to the theft of sensitive information, such as login credentials, from users visiting the affected website. The issue has been fixed in version 0.10.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0109">https://nvd.nist.gov/vuln/detail/CVE-2023-0109</a></li>
<li><a href="https://github.com/usememos/memos/commit/46c13a4b7f675b92d297df6dabb4441f13c7cd9c">https://github.com/usememos/memos/commit/46c13a4b7f675b92d297df6dabb4441f13c7cd9c</a></li>
<li><a href="https://huntr.com/bounties/1899ffb2-ce1e-4dc0-af96-972612190f6e">https://huntr.com/bounties/1899ffb2-ce1e-4dc0-af96-972612190f6e</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3274">https://pkg.go.dev/vuln/GO-2024-3274</a></li>
<li><a href="https://github.com/advisories/GHSA-5r2g-59px-3q9w">https://github.com/advisories/GHSA-5r2g-59px-3q9w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r2g-59px-3q9w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-15T12:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor/src] Harbor fails to validate the user permissions when updating p2p preheat policies]]></title>
        <id>https://github.com/advisories/GHSA-r864-28pw-8682</id>
        <link href="https://github.com/advisories/GHSA-r864-28pw-8682"/>
        <updated>2024-11-14T18:33:50.000Z</updated>
        <content type="html"><![CDATA[<p>Harbor fails to validate the user permissions when updating p2p preheat policies.&nbsp;By sending a request to update a p2p preheat policy with an id that belongs to a project that the currently authenticated user doesn't have access to, the attacker could modify p2p preheat policies configured in other projects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-3wpx-625q-22j7">https://github.com/goharbor/harbor/security/advisories/GHSA-3wpx-625q-22j7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31668">https://nvd.nist.gov/vuln/detail/CVE-2022-31668</a></li>
<li><a href="https://github.com/advisories/GHSA-r864-28pw-8682">https://github.com/advisories/GHSA-r864-28pw-8682</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r864-28pw-8682</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-14T12:31:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating p2p preheat policies]]></title>
        <id>https://github.com/advisories/GHSA-r864-28pw-8682</id>
        <link href="https://github.com/advisories/GHSA-r864-28pw-8682"/>
        <updated>2024-11-14T18:33:50.000Z</updated>
        <content type="html"><![CDATA[<p>Harbor fails to validate the user permissions when updating p2p preheat policies.&nbsp;By sending a request to update a p2p preheat policy with an id that belongs to a project that the currently authenticated user doesn't have access to, the attacker could modify p2p preheat policies configured in other projects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-3wpx-625q-22j7">https://github.com/goharbor/harbor/security/advisories/GHSA-3wpx-625q-22j7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31668">https://nvd.nist.gov/vuln/detail/CVE-2022-31668</a></li>
<li><a href="https://github.com/advisories/GHSA-r864-28pw-8682">https://github.com/advisories/GHSA-r864-28pw-8682</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r864-28pw-8682</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-14T12:31:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating p2p preheat policies]]></title>
        <id>https://github.com/advisories/GHSA-r864-28pw-8682</id>
        <link href="https://github.com/advisories/GHSA-r864-28pw-8682"/>
        <updated>2024-11-14T18:33:50.000Z</updated>
        <content type="html"><![CDATA[<p>Harbor fails to validate the user permissions when updating p2p preheat policies.&nbsp;By sending a request to update a p2p preheat policy with an id that belongs to a project that the currently authenticated user doesn't have access to, the attacker could modify p2p preheat policies configured in other projects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-3wpx-625q-22j7">https://github.com/goharbor/harbor/security/advisories/GHSA-3wpx-625q-22j7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31668">https://nvd.nist.gov/vuln/detail/CVE-2022-31668</a></li>
<li><a href="https://github.com/advisories/GHSA-r864-28pw-8682">https://github.com/advisories/GHSA-r864-28pw-8682</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r864-28pw-8682</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-14T12:31:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cli/cli/v2] Connecting to a malicious Codespaces via GH CLI could allow command execution on the user's computer]]></title>
        <id>https://github.com/advisories/GHSA-p2h2-3vg9-4p87</id>
        <link href="https://github.com/advisories/GHSA-p2h2-3vg9-4p87"/>
        <updated>2024-11-19T19:37:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A security vulnerability has been identified in GitHub CLI that could allow remote code execution (RCE) when users connect to a malicious Codespace SSH server and use the <code>gh codespace ssh</code> or <code>gh codespace logs</code> commands.</p>
<h3 id="details">Details</h3>
<p>The vulnerability stems from the way GitHub CLI handles SSH connection details when executing commands. When developers connect to remote Codespaces, they typically use a SSH server running within a devcontainer, often provided through the <a href="https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers#using-the-default-dev-container-configuration">default devcontainer image</a>.  GitHub CLI <a href="https://github.com/cli/cli/blob/30066b0042d0c5928d959e288144300cb28196c9/internal/codespaces/rpc/invoker.go#L230-L244">retrieves SSH connection details</a>, such as remote username, which is used in <a href="https://github.com/cli/cli/blob/e356c69a6f0125cfaac782c35acf77314f18908d/pkg/cmd/codespace/ssh.go#L263">executing <code>ssh</code> commands</a> for <code>gh codespace ssh</code> or <code>gh codespace logs</code> commands.</p>
<p>This exploit occurs when a malicious third-party devcontainer contains a modified SSH server that injects <code>ssh</code> arguments within the SSH connection details. <code>gh codespace ssh</code> and <code>gh codespace logs</code> commands could execute arbitrary code on the user's workstation if the remote username contains something like <code>-oProxyCommand="echo hacked" #</code>.  The <code>-oProxyCommand</code> flag causes <code>ssh</code> to execute the provided command while <code>#</code> shell comment causes any other <code>ssh</code> arguments to be ignored.</p>
<p>In <code>2.62.0</code>, the remote username information is being validated before being used.</p>
<h3 id="impact">Impact</h3>
<p>Successful exploitation could lead to arbitrary code execution on the user's workstation, potentially compromising the user's data and system.</p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<ol>
<li>Upgrade <code>gh</code> to <code>2.62.0</code></li>
<li>Exercise caution when using custom devcontainer images, prefer default or pre-built devcontainers from trusted sources.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cli/cli/security/advisories/GHSA-p2h2-3vg9-4p87">https://github.com/cli/cli/security/advisories/GHSA-p2h2-3vg9-4p87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52308">https://nvd.nist.gov/vuln/detail/CVE-2024-52308</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3269">https://pkg.go.dev/vuln/GO-2024-3269</a></li>
<li><a href="https://github.com/advisories/GHSA-p2h2-3vg9-4p87">https://github.com/advisories/GHSA-p2h2-3vg9-4p87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2h2-3vg9-4p87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-14T17:39:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/golang-jwt/jwt/v4] Bad documentation of error handling in ParseWithClaims can lead to potentially dangerous situations]]></title>
        <id>https://github.com/advisories/GHSA-29wx-vh33-7x7r</id>
        <link href="https://github.com/advisories/GHSA-29wx-vh33-7x7r"/>
        <updated>2024-11-12T21:32:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Unclear documentation of the error behavior in <code>ParseWithClaims</code> can lead to situation where users are potentially not checking errors in the way they should be. Especially, if a token is both expired and invalid, the errors returned by <code>ParseWithClaims</code> return both error codes. If users only check for the <code>jwt.ErrTokenExpired </code> using <code>error.Is</code>, they will ignore the embedded <code>jwt.ErrTokenSignatureInvalid</code> and thus potentially accept invalid tokens.</p>
<h3 id="fix">Fix</h3>
<p>We have back-ported the error handling logic from the <code>v5</code> branch to the <code>v4</code> branch. In this logic, the <code>ParseWithClaims</code> function will immediately return in "dangerous" situations (e.g., an invalid signature), limiting the combined errors only to situations where the signature is valid, but further validation failed (e.g., if the signature is valid, but is expired AND has the wrong audience). This fix is part of the 4.5.1 release.</p>
<h3 id="workaround">Workaround</h3>
<p>We are aware that this changes the behaviour of an established function and is not 100 % backwards compatible, so updating to 4.5.1 might break your code. In case you cannot update to 4.5.0, please make sure that you are properly checking for all errors ("dangerous" ones first), so that you are not running in the case detailed above.</p>
<pre><code class="language-Go">token, err := /* jwt.Parse or similar */
if token.Valid {
    fmt.Println("You look nice today")
} else if errors.Is(err, jwt.ErrTokenMalformed) {
    fmt.Println("That's not even a token")
} else if errors.Is(err, jwt.ErrTokenUnverifiable) {
    fmt.Println("We could not verify this token")
} else if errors.Is(err, jwt.ErrTokenSignatureInvalid) {
    fmt.Println("This token has an invalid signature")
} else if errors.Is(err, jwt.ErrTokenExpired) || errors.Is(err, jwt.ErrTokenNotValidYet) {
    // Token is either expired or not active yet
    fmt.Println("Timing is everything")
} else {
    fmt.Println("Couldn't handle this token:", err)
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang-jwt/jwt/security/advisories/GHSA-29wx-vh33-7x7r">https://github.com/golang-jwt/jwt/security/advisories/GHSA-29wx-vh33-7x7r</a></li>
<li><a href="https://github.com/golang-jwt/jwt/commit/7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c">https://github.com/golang-jwt/jwt/commit/7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51744">https://nvd.nist.gov/vuln/detail/CVE-2024-51744</a></li>
<li><a href="https://github.com/advisories/GHSA-29wx-vh33-7x7r">https://github.com/advisories/GHSA-29wx-vh33-7x7r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29wx-vh33-7x7r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-04T23:22:41.000Z</published>
    </entry>
</feed>