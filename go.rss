<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-02-07T20:01:27.080Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/clidey/whodb/core] WhoDB allows parameter injection in DB connection URIs leading to local file inclusion]]></title>
        <id>https://github.com/advisories/GHSA-c7w4-9wv8-7x7c</id>
        <link href="https://github.com/advisories/GHSA-c7w4-9wv8-7x7c"/>
        <updated>2025-02-07T17:35:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The application is vulnerable to parameter injection in database connection strings, which allows an attacker to read local files on the machine the application is running on.</p>
<h3 id="details">Details</h3>
<p>The application uses string concatenation to build database connection URIs which are then passed to corresponding libraries responsible for setting up the database connections.</p>
<p>This string concatenation is done unsafely and without escaping or encoding the user input. This allows an user, in many cases, to inject arbitrary parameters into the URI string. These parameters can be potentially dangerous depending on the libraries used.</p>
<p>One of these dangerous parameters is <code>allowAllFiles</code> in the library <code>github.com/go-sql-driver/mysql</code>. Should this be set to <code>true</code>, the library enables running the <code>LOAD DATA LOCAL INFILE</code> query on any file on the host machine (in this case, the machine that WhoDB is running on). Source: <a href="https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128">https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128</a></p>
<p>By injecting <code>&amp;allowAllFiles=true</code> into the connection URI and connecting to any MySQL server (such as an attacker-controlled one), the attacker is able to read local files.</p>
<h3 id="poc">PoC</h3>
<p>As this vulnerability does not require sending requests manually and can all be done using the WhoDB UI, screenshots are provided instead of HTTP requests.</p>
<p>For this proof-of-concept, a clean instance of WhoDB and MySQL were set up using podman (docker is a suitable alternative):</p>
<pre><code>podman network create whodb-poc
podman run -d -p 8080:8080 --network whodb-poc docker.io/clidey/whodb
podman run -d --name mysql -e MYSQL_ROOT_PASSWORD=password --network whodb-poc docker.io/mysql:9
</code></pre>
<p>The attacker connects to the database via WhoDB. Note that in the <code>Loc</code> field, the string <code>&amp;allowAllFiles=true</code> is inserted:</p>
<p><img alt="2025-01-21-13-28-08" src="https://github.com/user-attachments/assets/28709707-97e4-4d26-b61c-5462db6dd43f"></p>
<p>After connecting, the attacker navigates to the scratchpad in <code>/scratchpad</code>.</p>
<p>The attacker first creates a demo table:</p>
<pre><code class="language-sql">CREATE TABLE poc (
    line TEXT
);
</code></pre>
<p>The attacker then enables loading files from the server side. For the sake of clarity, do note that while this is required, the file is not being read from the remote server where MySQL is running, but the local machine that WhoDB is running on.</p>
<pre><code class="language-sql">SET GLOBAL local_infile=1;
</code></pre>
<p>The attacker then uses the <code>LOAD DATA LOCAL INFILE</code> statement to read the contents of <code>/etc/passwd</code> (in this case from inside the container where WhoDB is running) into the previously created table:</p>
<pre><code class="language-sql">LOAD DATA LOCAL INFILE '/etc/passwd'
INTO TABLE poc
FIELDS TERMINATED BY '\0'
LINES TERMINATED BY '\n';
</code></pre>
<p>The attacker then navigates to the <code>poc</code> table in the <em>Tables</em> view and observes that the file has been read successfully:</p>
<p><img alt="2025-01-21-14-04-47" src="https://github.com/user-attachments/assets/c8f499ce-0d40-49ba-a2c6-fe2d12c677c5"></p>
<h3 id="impact">Impact</h3>
<p>While this proof-of-concept demonstrates local file inclusion, the root cause of the issue is the unsafe construction of database connection URIs from user input. Not all database connector libraries used in WhoDB were inspected; there may be libraries which allow for even more impactful parameters.</p>
<p>The attack requires no user authentication to WhoDB (only authentication to any database server, such as an attacker-controlled one) and no special configuration - the default configuration of the application is vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/clidey/whodb/security/advisories/GHSA-c7w4-9wv8-7x7c">https://github.com/clidey/whodb/security/advisories/GHSA-c7w4-9wv8-7x7c</a></li>
<li><a href="https://github.com/clidey/whodb/commit/8d67b767e00552e5eba2b1537179b74bfa662ee1">https://github.com/clidey/whodb/commit/8d67b767e00552e5eba2b1537179b74bfa662ee1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24787">https://nvd.nist.gov/vuln/detail/CVE-2025-24787</a></li>
<li><a href="https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128">https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128</a></li>
<li><a href="https://github.com/advisories/GHSA-c7w4-9wv8-7x7c">https://github.com/advisories/GHSA-c7w4-9wv8-7x7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c7w4-9wv8-7x7c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T19:58:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/clidey/whodb/core] WhoDB has a path traversal opening Sqlite3 database]]></title>
        <id>https://github.com/advisories/GHSA-9r4c-jwx3-3j76</id>
        <link href="https://github.com/advisories/GHSA-9r4c-jwx3-3j76"/>
        <updated>2025-02-07T17:35:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>While the application only displays Sqlite3 databases present in the directory <code>/db</code>, there is no path traversal prevention in place. This allows an unauthenticated attacker to open any Sqlite3 database present on the host machine that the application is running on.</p>
<h3 id="details">Details</h3>
<p>WhoDB allows users to connect to Sqlite3 databases. By default, the databases must be present in <code>/db/</code> (or alternatively <code>./tmp/</code> if development mode is enabled). Source: <a href="https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20</a></p>
<p>If no databases are present in the default directory, the UI indicates that the user is unable to open any databases:</p>
<p><img alt="2025-01-22-12-12-42" src="https://github.com/user-attachments/assets/98ffbcf6-907d-4f90-bf11-2c921b2d93b3"></p>
<p>The database file is an user-controlled value. This value is used in <code>.Join()</code> with the default directory, in order to get the full path of the database file to open. Source: <a href="https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26</a></p>
<p>No checks are performed whether the database file that is eventually opened actually resides in the default directory <code>/db</code>.</p>
<p>This allows an attacker to use path traversal (<code>../../</code>) in order to open any Sqlite3 database present on the system. </p>
<h3 id="poc">PoC</h3>
<p>Before running the container, an example Sqlite3 database with dummy "secret" data was created:</p>
<pre><code class="language-sh">DB_FILE=$(mktemp)
echo "CREATE TABLE secret_table (data TEXT); INSERT INTO secret_table VALUES ('secret data')" | sqlite3 "$DB_FILE"
</code></pre>
<p>The container was then created with nothing mounted into <code>/db</code>, and the dummy database mounted into <code>/etc/secret.db</code>:</p>
<pre><code class="language-sh">podman run -d -p 8080:8080 -v "$DB_FILE":/etc/secret.db docker.io/clidey/whodb
</code></pre>
<p>The attacker sends a HTTP request to determine whether the <code>secret.db</code> is accessible by setting the <code>Database</code> value to <code>../etc/secret.db</code>:</p>
<pre><code class="language-http">POST /api/query HTTP/1.1
Host: localhost:8080
content-type: application/json
...

{"operationName":"Login","variables":{"credentials":{"Type":"Sqlite3","Hostname":"","Database":"../etc/secret.db","Username":"","Password":"","Advanced":[]}},"query":"mutation Login($credentials: LoginCredentials!) {\n  Login(credentials: $credentials) {\n    Status\n    __typename\n  }\n}"}
</code></pre>
<p>The server response indicates that the database was successfully opened:</p>
<pre><code class="language-http">HTTP/1.1 200 OK
Content-Type: application/json
Set-Cookie: Token=eyJUeXBlIjoiU3FsaXRlMyIsIkhvc3RuYW1lIjoiIiwiVXNlcm5hbWUiOiIiLCJQYXNzd29yZCI6IiIsIkRhdGFiYXNlIjoiLi4vZXRjL3NlY3JldC5kYiJ9; Path=/; Expires=Thu, 23 Jan 2025 10:35:43 GMT; HttpOnly
...

{"data":{"Login":{"Status":true,"__typename":"StatusResponse"}}}
</code></pre>
<p>The <code>Set-Cookie</code> <code>Token</code> value is simply a Base64-encoded string with a JSON payload containing the connection details:</p>
<pre><code class="language-json">{
  "Type": "Sqlite3",
  "Hostname": "",
  "Username": "",
  "Password": "",
  "Database": "../etc/secret.db"
}
</code></pre>
<p>The attacker may set this cookie in the browser manually (alongside corresponding profiles in Local Storage) in order to open this database in the WhoDB application graphically. An easy way to perform this is by using a HTTP proxy such as Burp Suite, intercepting the login request and swapping the <code>Database</code> value to <code>../etc/secret.db</code>.</p>
<p>Doing so, the attacker can then browse the database, its tables and the data within:</p>
<p><img alt="2025-01-22-12-36-25" src="https://github.com/user-attachments/assets/c28f1273-7a3c-49e8-bb73-d08a09c7521d"></p>
<p>The attacker may also insert or modify data using either the buttons presented in the UI or the <em>Scratchpad</em> functionality. In this proof-of-concept, the attacker inserts a new row using the <em>Add Row</em> button:</p>
<p><img alt="2025-01-22-12-36-49" src="https://github.com/user-attachments/assets/dbd86beb-9969-464c-9a28-a19d470d0f52"></p>
<h3 id="impact">Impact</h3>
<p>Allows an unauthenticated attacker to open and read any Sqlite3 databases present on the system WhoDB is running on. If WhoDB has write permissions for the database file, the attacker is also able to modify the opened database.</p>
<p>The attacker is unable to create new databases; however, files which already exist but have no content (0-length files) may be opened and modified as fresh databases.</p>
<h3 id="recommendations">Recommendations</h3>
<p>Before attempting to open the database, resolve and normalize the path to the database and check whether it is in the default directory. If not, present the user with an error.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/clidey/whodb/security/advisories/GHSA-9r4c-jwx3-3j76">https://github.com/clidey/whodb/security/advisories/GHSA-9r4c-jwx3-3j76</a></li>
<li><a href="https://github.com/clidey/whodb/commit/547336ac73c8d17929c18c3941c0d5b0099753cc">https://github.com/clidey/whodb/commit/547336ac73c8d17929c18c3941c0d5b0099753cc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24786">https://nvd.nist.gov/vuln/detail/CVE-2025-24786</a></li>
<li><a href="https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20</a></li>
<li><a href="https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26</a></li>
<li><a href="https://github.com/advisories/GHSA-9r4c-jwx3-3j76">https://github.com/advisories/GHSA-9r4c-jwx3-3j76</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r4c-jwx3-3j76</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-06T19:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/plentico/plenti] Plenti  - Code Injection - Denial of Services]]></title>
        <id>https://github.com/advisories/GHSA-mj4v-hp69-27x5</id>
        <link href="https://github.com/advisories/GHSA-mj4v-hp69-27x5"/>
        <updated>2025-02-06T18:05:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>While pushing a file via postLocal method if user add javascript code in file parameter that codes can exe in v8go context.</p>
<h3 id="details">Details</h3>
<p>While posting a file via postLocal, any attacker will add javascript codes to file parameter. That parameter content pass to componentSignature method after some validation. After that componentSignature parameter concat with ssrStr parameter.</p>
<img src="https://github.com/user-attachments/assets/a08a3fe5-2fbd-4a05-b93c-2ad127e6ee81" alt="image" width="1145">

<p>Last part of compileSvelte function ssrStr parameter executed in v8go engine.</p>
<img src="https://github.com/user-attachments/assets/4e622761-3324-48d6-8264-6dd6e09055af" alt="image" width="754">

<p>This cause to any one who can post a file also can push javascript code and run it. Thanks to v8go we can't use all javascript metod, if there is no any vulnerability in v8go we can't escape sandbox and can't run dangerous command like opening socket etc. But we can create infinite loop and the plenti can't response any request.</p>
<p>After posting a file with name 'layouts/global/test; eval(<code>while(1);</code>);var test.svelte' we can see the ssrStr parameter include our javascript codes.</p>
<img src="https://github.com/user-attachments/assets/369c7820-ff8a-4b9a-9cd3-6b0692f1dcf3" alt="image" width="1023">

<p><strong>Note</strong>: Eval usage not must I just want to ensure that it's run javascript commands.</p>
<h3 id="poc">PoC</h3>
<p><strong>Request</strong></p>
<pre><code>POST /postlocal HTTP/1.1
Host: localhost:3000
Content-Length: 125
Content-Type: application/json; charset=utf-8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36
Accept-Encoding: gzip, deflate, br
Connection: keep-alive

[{"action":"create","encoding":"text","file":"layouts/global/test; eval(`while(1);`);var test.svelte","contents":"anethole"}]
</code></pre>
<p><strong>Video</strong>
<img alt="PoC" src="https://github.com/user-attachments/assets/2aca36a1-6989-4be8-a8d1-3b12960f3e9b"></p>
<p><strong>Curl Request</strong></p>
<pre><code>curl --path-as-is -i -s -k -X $'POST' \
    -H $'Host: localhost:3000' -H $'Content-Length: 125' -H $'Content-Type: application/json; charset=utf-8' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36' -H $'Accept-Encoding: gzip, deflate, br' -H $'Connection: keep-alive' \
    --data-binary $'[{\"action\":\"create\",\"encoding\":\"text\",\"file\":\"layouts/global/test; eval(`while(1);`);var test.svelte\",\"contents\":\"anethole\"}]' \
    $'http://localhost:3000/postlocal'
</code></pre>
<h3 id="impact">Impact</h3>
<p>It's a remote code execution vulnerability. Because of the sandbox we can show only Denial of Service impact. Any vulnerability will be exists in v8go that cause to escape sandbox, different impacts can be show.</p>
<p><strong>Note:</strong> Plenti is using V8GO and V8GO is using V8 version of 11.1.278. This version released at 25 January 2023. After this date some RCE vulnerabilities founded in V8 like <a href="https://github.com/advisories/GHSA-fchp-8m28-g68f">CVE-2024-5830</a>,</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plentico/plenti/security/advisories/GHSA-mj4v-hp69-27x5">https://github.com/plentico/plenti/security/advisories/GHSA-mj4v-hp69-27x5</a></li>
<li><a href="https://github.com/plentico/plenti/commit/c3e72a9ebbc2a03f4b0f3104becbfc25e390cb8e">https://github.com/plentico/plenti/commit/c3e72a9ebbc2a03f4b0f3104becbfc25e390cb8e</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3454">https://pkg.go.dev/vuln/GO-2025-3454</a></li>
<li><a href="https://github.com/advisories/GHSA-mj4v-hp69-27x5">https://github.com/advisories/GHSA-mj4v-hp69-27x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mj4v-hp69-27x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-05T21:30:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/edgelesssys/contrast] Contrast's unauthenticated recovery allows Coordinator impersonation]]></title>
        <id>https://github.com/advisories/GHSA-vqv5-385r-2hf8</id>
        <link href="https://github.com/advisories/GHSA-vqv5-385r-2hf8"/>
        <updated>2025-02-06T18:05:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Recovering coordinators do not verify the seed provided by the recovering party. This allows an attacker to set up a coordinator with a manifest that passes validation, but with a secret seed controlled by the attacker. </p>
<p>If network traffic is redirected from the legitimate coordinator to the attacker's coordinator, a workload owner is susceptible to impersonation if either </p>
<ul>
<li>they <code>set</code> a new manifest and don't compare the root CA cert with the existing one (this is the default of the <code>contrast</code> CLI) or</li>
<li>they <code>verify</code> the coordinator and don't compare the root CA cert with a trusted reference.</li>
</ul>
<p>Under these circumstances, the attacker can:</p>
<ul>
<li>Issue certificates that chain back to the attacker coordinator's root CA.</li>
<li>Recover arbitrary workload secrets of workloads deployed after the attack.</li>
</ul>
<p>This issue does <strong>not</strong> affect the following:</p>
<ul>
<li>secrets of the legitimate coordinator (seed, workload secrets, CA)</li>
<li>integrity of workloads, even when used with the rogue coordinator</li>
<li>certificates chaining back to the mesh CA</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This issue is patched in Contrast v1.4.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue can be avoided by verifying the coordinator root CA cert against expectations.</p>
<ul>
<li>At the first <code>set</code> call, keep a copy of the CA cert returned by the coordinator.</li>
<li>After subsequent <code>set</code> or <code>verify</code> calls, compare the returned CA cert with the backup copy. If it matches bit-for-bit, the coordinator is legitimate.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edgelesssys/contrast/security/advisories/GHSA-vqv5-385r-2hf8">https://github.com/edgelesssys/contrast/security/advisories/GHSA-vqv5-385r-2hf8</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3455">https://pkg.go.dev/vuln/GO-2025-3455</a></li>
<li><a href="https://github.com/advisories/GHSA-vqv5-385r-2hf8">https://github.com/advisories/GHSA-vqv5-385r-2hf8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqv5-385r-2hf8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-05T21:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/binance-chain/tss-lib] IO FinNet tss-lib vulnerable to timing attack from non-constant time scalar arithmetic]]></title>
        <id>https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</id>
        <link href="https://github.com/advisories/GHSA-mjqv-xhgm-gx8c"/>
        <updated>2025-02-05T19:43:34.000Z</updated>
        <content type="html"><![CDATA[<p>io.finnet tss-lib before 2.0.0 can leak the lambda value of a private key via a timing side-channel attack because it relies on Go big.Int, which is not constant time for Cmp, modular exponentiation, or modular inverse. An example leak is in crypto/paillier/paillier.go. (bnb-chain/tss-lib and thorchain/tss are also affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26557">https://nvd.nist.gov/vuln/detail/CVE-2023-26557</a></li>
<li><a href="https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/tree/v1.3.5">https://github.com/bnb-chain/tss-lib/tree/v1.3.5</a></li>
<li><a href="https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3">https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3</a></li>
<li><a href="https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1733">https://pkg.go.dev/vuln/GO-2023-1733</a></li>
<li><a href="https://github.com/advisories/GHSA-mjqv-xhgm-gx8c">https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-04-21T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/bnb-chain/tss-lib] IO FinNet tss-lib vulnerable to timing attack from non-constant time scalar arithmetic]]></title>
        <id>https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</id>
        <link href="https://github.com/advisories/GHSA-mjqv-xhgm-gx8c"/>
        <updated>2025-02-05T19:43:34.000Z</updated>
        <content type="html"><![CDATA[<p>io.finnet tss-lib before 2.0.0 can leak the lambda value of a private key via a timing side-channel attack because it relies on Go big.Int, which is not constant time for Cmp, modular exponentiation, or modular inverse. An example leak is in crypto/paillier/paillier.go. (bnb-chain/tss-lib and thorchain/tss are also affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26557">https://nvd.nist.gov/vuln/detail/CVE-2023-26557</a></li>
<li><a href="https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/tree/v1.3.5">https://github.com/bnb-chain/tss-lib/tree/v1.3.5</a></li>
<li><a href="https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3">https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3</a></li>
<li><a href="https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1733">https://pkg.go.dev/vuln/GO-2023-1733</a></li>
<li><a href="https://github.com/advisories/GHSA-mjqv-xhgm-gx8c">https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-04-21T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/binance-chain/tss-lib] IO FinNet tss-lib vulnerable to timing attack from non-constant time scalar multiplication]]></title>
        <id>https://github.com/advisories/GHSA-3w84-4mjc-rjw7</id>
        <link href="https://github.com/advisories/GHSA-3w84-4mjc-rjw7"/>
        <updated>2025-02-05T19:42:54.000Z</updated>
        <content type="html"><![CDATA[<p>io.finnet tss-lib before 2.0.0 can leak a secret key via a timing side-channel attack because it relies on the scalar-multiplication implementation in Go crypto/elliptic, which is not constant time (there is an if statement in a loop). One leak is in ecdsa/keygen/round_2.go. (bnb-chain/tss-lib and thorchain/tss are also affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26556">https://nvd.nist.gov/vuln/detail/CVE-2023-26556</a></li>
<li><a href="https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/tree/v1.3.5">https://github.com/bnb-chain/tss-lib/tree/v1.3.5</a></li>
<li><a href="https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3">https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3</a></li>
<li><a href="https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/issues/44">https://github.com/bnb-chain/tss-lib/issues/44</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/releases/tag/v2.0.0">https://github.com/bnb-chain/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1732">https://pkg.go.dev/vuln/GO-2023-1732</a></li>
<li><a href="https://github.com/advisories/GHSA-3w84-4mjc-rjw7">https://github.com/advisories/GHSA-3w84-4mjc-rjw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w84-4mjc-rjw7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-04-21T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/bnb-chain/tss-lib] IO FinNet tss-lib vulnerable to timing attack from non-constant time scalar multiplication]]></title>
        <id>https://github.com/advisories/GHSA-3w84-4mjc-rjw7</id>
        <link href="https://github.com/advisories/GHSA-3w84-4mjc-rjw7"/>
        <updated>2025-02-05T19:42:54.000Z</updated>
        <content type="html"><![CDATA[<p>io.finnet tss-lib before 2.0.0 can leak a secret key via a timing side-channel attack because it relies on the scalar-multiplication implementation in Go crypto/elliptic, which is not constant time (there is an if statement in a loop). One leak is in ecdsa/keygen/round_2.go. (bnb-chain/tss-lib and thorchain/tss are also affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26556">https://nvd.nist.gov/vuln/detail/CVE-2023-26556</a></li>
<li><a href="https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/tree/v1.3.5">https://github.com/bnb-chain/tss-lib/tree/v1.3.5</a></li>
<li><a href="https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3">https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3</a></li>
<li><a href="https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/issues/44">https://github.com/bnb-chain/tss-lib/issues/44</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/releases/tag/v2.0.0">https://github.com/bnb-chain/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1732">https://pkg.go.dev/vuln/GO-2023-1732</a></li>
<li><a href="https://github.com/advisories/GHSA-3w84-4mjc-rjw7">https://github.com/advisories/GHSA-3w84-4mjc-rjw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w84-4mjc-rjw7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-04-21T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/binance-chain/tss-lib] IO FinNet tss-lib vulnerable to replay attacks involving proofs]]></title>
        <id>https://github.com/advisories/GHSA-c58h-qv6g-fw74</id>
        <link href="https://github.com/advisories/GHSA-c58h-qv6g-fw74"/>
        <updated>2025-02-05T19:42:28.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in IO FinNet tss-lib before 2.0.0. The parameter ssid for defining a session id is not used through the MPC implementation, which makes replaying and spoofing of messages easier. In particular, the Schnorr proof of knowledge implemented in sch.go does not utilize a session id, context, or random nonce in the generation of the challenge. This could allow a malicious user or an eavesdropper to replay a valid proof sent in the past.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-47930">https://nvd.nist.gov/vuln/detail/CVE-2022-47930</a></li>
<li><a href="https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/pull/256">https://github.com/bnb-chain/tss-lib/pull/256</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/commit/1a14f3ac9ecbf6115e80d44c7fff16bcc3139250">https://github.com/bnb-chain/tss-lib/commit/1a14f3ac9ecbf6115e80d44c7fff16bcc3139250</a></li>
<li><a href="https://github.com/advisories/GHSA-c58h-qv6g-fw74">https://github.com/advisories/GHSA-c58h-qv6g-fw74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c58h-qv6g-fw74</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-21T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/bnb-chain/tss-lib] IO FinNet tss-lib vulnerable to replay attacks involving proofs]]></title>
        <id>https://github.com/advisories/GHSA-c58h-qv6g-fw74</id>
        <link href="https://github.com/advisories/GHSA-c58h-qv6g-fw74"/>
        <updated>2025-02-05T19:42:28.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in IO FinNet tss-lib before 2.0.0. The parameter ssid for defining a session id is not used through the MPC implementation, which makes replaying and spoofing of messages easier. In particular, the Schnorr proof of knowledge implemented in sch.go does not utilize a session id, context, or random nonce in the generation of the challenge. This could allow a malicious user or an eavesdropper to replay a valid proof sent in the past.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-47930">https://nvd.nist.gov/vuln/detail/CVE-2022-47930</a></li>
<li><a href="https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>
<li><a href="https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/pull/256">https://github.com/bnb-chain/tss-lib/pull/256</a></li>
<li><a href="https://github.com/bnb-chain/tss-lib/commit/1a14f3ac9ecbf6115e80d44c7fff16bcc3139250">https://github.com/bnb-chain/tss-lib/commit/1a14f3ac9ecbf6115e80d44c7fff16bcc3139250</a></li>
<li><a href="https://github.com/advisories/GHSA-c58h-qv6g-fw74">https://github.com/advisories/GHSA-c58h-qv6g-fw74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c58h-qv6g-fw74</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-21T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/RichardoC/kube-audit-rest] kube-audit-rest's example logging configuration could disclose secret values in the audit log]]></title>
        <id>https://github.com/advisories/GHSA-hcr5-wv4p-h2g2</id>
        <link href="https://github.com/advisories/GHSA-hcr5-wv4p-h2g2"/>
        <updated>2025-02-05T16:28:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
If the "full-elastic-stack" example vector configuration was used for a real cluster, the previous values of kubernetes secrets would have been disclosed in the audit messages.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
The example has been updated to fix this in commit 9df8886b4819409f566233adc7c3b7a43a4096ba</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
Replace </p>
<pre><code class="language-yaml">
          if .request.requestKind.kind == "Secret" {
            del(.request.object.data)
            .request.object.data.redacted = "REDACTED"
            del(.request.oldObject.data)
            .request.oldObject.data.redacted = "REDACTED"
          }
</code></pre>
<p>In the vector "audit-files-json-parser-and-redaction" step
with</p>
<pre><code class="language-yaml">
          if .request.requestKind.kind == "Secret" {
            # Redact the secret data
            del(.request.object.data)
            .request.object.data.redacted = "REDACTED"
            del(.request.oldObject.data)
            .request.oldObject.data.redacted = "REDACTED"
            # Remove the previously set secret data - Not bothering to parse it as this annotation shouldn't ever be needed
            del(.request.object.metadata.annotations.["kubectl.kubernetes.io/last-applied-configuration"])
            del(.request.oldObject.metadata.annotations.["kubectl.kubernetes.io/last-applied-configuration"])
          }
</code></pre>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/RichardoC/kube-audit-rest/security/advisories/GHSA-hcr5-wv4p-h2g2">https://github.com/RichardoC/kube-audit-rest/security/advisories/GHSA-hcr5-wv4p-h2g2</a></li>
<li><a href="https://github.com/RichardoC/kube-audit-rest/commit/db1aa5b867256b0a7bf206544c6981ab068b73dc">https://github.com/RichardoC/kube-audit-rest/commit/db1aa5b867256b0a7bf206544c6981ab068b73dc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24884">https://nvd.nist.gov/vuln/detail/CVE-2025-24884</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3431">https://pkg.go.dev/vuln/GO-2025-3431</a></li>
<li><a href="https://github.com/advisories/GHSA-hcr5-wv4p-h2g2">https://github.com/advisories/GHSA-hcr5-wv4p-h2g2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcr5-wv4p-h2g2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-29T20:47:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Argo CD does not scrub secret values from patch errors]]></title>
        <id>https://github.com/advisories/GHSA-47g2-qmh2-749v</id>
        <link href="https://github.com/advisories/GHSA-47g2-qmh2-749v"/>
        <updated>2025-02-05T16:21:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>
<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability is available in the following Argo CD versions:</p>
<ul>
<li>v2.13.4</li>
<li>v2.12.10</li>
<li>v2.11.13</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround other than upgrading.</p>
<h3 id="references">References</h3>
<p>Fixed with commit <a href="https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href="https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>
<li><a href="https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>
<li><a href="https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23216">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>
<li><a href="https://github.com/advisories/GHSA-47g2-qmh2-749v">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47g2-qmh2-749v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-30T17:52:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/edgelesssys/marblerun] MarbleRun unauthenticated recovery allows Coordinator impersonation]]></title>
        <id>https://github.com/advisories/GHSA-w7wm-2425-7p2h</id>
        <link href="https://github.com/advisories/GHSA-w7wm-2425-7p2h"/>
        <updated>2025-02-06T18:04:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>During recovery, a Coordinator only verifies that a given recovery key decrypts the sealed state, not if this key was provided by a party with access to one of the recovery keys defined in the manifest.
This allows an attacker to manually craft a sealed state using their own recovery keys, and a manifest that does not match the rest of the state.</p>
<p>If network traffic is redirected from the legitimate coordinator to the attacker's Coordinator, a remote party is susceptible to impersonation if they verify the Coordinator without comparing the root certificate of the Coordinator against a trusted reference.</p>
<p>Under these circumstances, an attacker can trick a remote party into trusting the malicious Coordinator by presenting a manifest that does not match the actual state of the deployment.</p>
<p>This issue does <strong>not</strong> affect the following:</p>
<ul>
<li>secrets and state of the legitimate Coordinator instances</li>
<li>integrity of workloads</li>
<li>certificates chaining back to the legitimate Coordinator root certificate</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in <a href="https://github.com/edgelesssys/marblerun/releases/tag/v1.7.0"><code>v1.7.0</code></a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Connections that purely authenticate based on a known Coordinator's root certificate, e.g. the one retrieved when using the <code>marblerun manifest set</code> CLI command, are not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edgelesssys/marblerun/security/advisories/GHSA-w7wm-2425-7p2h">https://github.com/edgelesssys/marblerun/security/advisories/GHSA-w7wm-2425-7p2h</a></li>
<li><a href="https://github.com/edgelesssys/marblerun/commit/e4864f9f1d0f12a4a7d28514da43bcc75603a5b5">https://github.com/edgelesssys/marblerun/commit/e4864f9f1d0f12a4a7d28514da43bcc75603a5b5</a></li>
<li><a href="https://github.com/edgelesssys/marblerun/releases/tag/v1.7.0">https://github.com/edgelesssys/marblerun/releases/tag/v1.7.0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3450">https://pkg.go.dev/vuln/GO-2025-3450</a></li>
<li><a href="https://github.com/advisories/GHSA-w7wm-2425-7p2h">https://github.com/advisories/GHSA-w7wm-2425-7p2h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7wm-2425-7p2h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-04T21:23:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm/v2] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm/v2] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm/v2] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm/v2] wasmvm: Malicious smart contract can crash the chain]]></title>
        <id>https://github.com/advisories/GHSA-23qp-3c2m-xx6w</id>
        <link href="https://github.com/advisories/GHSA-23qp-3c2m-xx6w"/>
        <updated>2025-02-06T18:03:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-001">CWA-2025-001</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to crash the chain. The underlying bug that causes this is present on both permissioned and premissionless chains, but it can only be triggered <em>reliably</em> with a malicious contract, so permissioned chains are much less likely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea">https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678">https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d">https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d">https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>While the fix for this issue is not consensus breaking, the patch contains another
consensus breaking fix and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-25: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-11-28: Confio security contributors confirm the report.</li>
<li>2024-11-28: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-23qp-3c2m-xx6w">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-23qp-3c2m-xx6w</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d">https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea">https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d">https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678">https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-001.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-001.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3448">https://pkg.go.dev/vuln/GO-2025-3448</a></li>
<li><a href="https://github.com/advisories/GHSA-23qp-3c2m-xx6w">https://github.com/advisories/GHSA-23qp-3c2m-xx6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-23qp-3c2m-xx6w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:54:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm/v2] wasmvm: Malicious smart contract can crash the chain]]></title>
        <id>https://github.com/advisories/GHSA-23qp-3c2m-xx6w</id>
        <link href="https://github.com/advisories/GHSA-23qp-3c2m-xx6w"/>
        <updated>2025-02-06T18:03:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-001">CWA-2025-001</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to crash the chain. The underlying bug that causes this is present on both permissioned and premissionless chains, but it can only be triggered <em>reliably</em> with a malicious contract, so permissioned chains are much less likely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea">https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678">https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d">https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d">https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>While the fix for this issue is not consensus breaking, the patch contains another
consensus breaking fix and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-25: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-11-28: Confio security contributors confirm the report.</li>
<li>2024-11-28: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-23qp-3c2m-xx6w">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-23qp-3c2m-xx6w</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d">https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea">https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d">https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678">https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-001.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-001.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3448">https://pkg.go.dev/vuln/GO-2025-3448</a></li>
<li><a href="https://github.com/advisories/GHSA-23qp-3c2m-xx6w">https://github.com/advisories/GHSA-23qp-3c2m-xx6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-23qp-3c2m-xx6w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:54:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm/v2] wasmvm: Malicious smart contract can crash the chain]]></title>
        <id>https://github.com/advisories/GHSA-23qp-3c2m-xx6w</id>
        <link href="https://github.com/advisories/GHSA-23qp-3c2m-xx6w"/>
        <updated>2025-02-06T18:03:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-001">CWA-2025-001</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to crash the chain. The underlying bug that causes this is present on both permissioned and premissionless chains, but it can only be triggered <em>reliably</em> with a malicious contract, so permissioned chains are much less likely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea">https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678">https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d">https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d">https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>While the fix for this issue is not consensus breaking, the patch contains another
consensus breaking fix and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-25: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-11-28: Confio security contributors confirm the report.</li>
<li>2024-11-28: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-23qp-3c2m-xx6w">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-23qp-3c2m-xx6w</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d">https://github.com/CosmWasm/wasmvm/commit/0aefa4c378457aeb3c07e7975b875be38872c56d</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea">https://github.com/CosmWasm/wasmvm/commit/1151bc6df7d02d1889b8da37cf8510eaf4198eea</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d">https://github.com/CosmWasm/wasmvm/commit/8d44a286fabc793a2fba93752e58cd0fd5b88a2d</a></li>
<li><a href="https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678">https://github.com/CosmWasm/wasmvm/commit/d4ff2adee44e6b9f7415a5dfbb3de745ab9b7678</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-001.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-001.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3448">https://pkg.go.dev/vuln/GO-2025-3448</a></li>
<li><a href="https://github.com/advisories/GHSA-23qp-3c2m-xx6w">https://github.com/advisories/GHSA-23qp-3c2m-xx6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-23qp-3c2m-xx6w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:54:13.000Z</published>
    </entry>
</feed>