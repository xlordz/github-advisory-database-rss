<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-04-01T22:01:20.459Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/answer] Apache Answer User Using External Images Potentially Discloses User Information]]></title>
        <id>https://github.com/advisories/GHSA-wqcc-mfhw-53pc</id>
        <link href="https://github.com/advisories/GHSA-wqcc-mfhw-53pc"/>
        <updated>2025-04-01T18:20:05.000Z</updated>
        <content type="html"><![CDATA[<p>Private Data Structure Returned From A Public Method vulnerability in Apache Answer.</p>
<p>This issue affects Apache Answer: through 1.4.2.</p>
<p>If a user uses an externally referenced image, when a user accesses this image, the provider of the image may obtain private information about the ip address of that accessing user.
Users are recommended to upgrade to version 1.4.5, which fixes the issue.&nbsp;In the new version, administrators can set whether external content can be displayed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29868">https://nvd.nist.gov/vuln/detail/CVE-2025-29868</a></li>
<li><a href="https://lists.apache.org/thread/l7pohw5g03g3qsvrz8pqc9t29mdv5lhf">https://lists.apache.org/thread/l7pohw5g03g3qsvrz8pqc9t29mdv5lhf</a></li>
<li><a href="https://github.com/apache/answer/issues/1250">https://github.com/apache/answer/issues/1250</a></li>
<li><a href="https://github.com/advisories/GHSA-wqcc-mfhw-53pc">https://github.com/advisories/GHSA-wqcc-mfhw-53pc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wqcc-mfhw-53pc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-01T09:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords]]></title>
        <id>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</id>
        <link href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g"/>
        <updated>2025-04-01T14:19:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>
<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>
<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.
Please consult the associated  <a href="https://attack.mitre.org/techniques/T1548/">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix introduces a few changes:</p>
<ol>
<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>
<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>
</ol>
<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.
If users can't upgrade, the following are recommended:</p>
<ol>
<li>Limit access to Rancher Restricted Admin only to trusted users.</li>
<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>
</ol>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>
<li><a href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-01T14:19:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords]]></title>
        <id>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</id>
        <link href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g"/>
        <updated>2025-04-01T14:19:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>
<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>
<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.
Please consult the associated  <a href="https://attack.mitre.org/techniques/T1548/">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix introduces a few changes:</p>
<ol>
<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>
<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>
</ol>
<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.
If users can't upgrade, the following are recommended:</p>
<ol>
<li>Limit access to Rancher Restricted Admin only to trusted users.</li>
<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>
</ol>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>
<li><a href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-01T14:19:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords]]></title>
        <id>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</id>
        <link href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g"/>
        <updated>2025-04-01T14:19:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>
<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>
<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.
Please consult the associated  <a href="https://attack.mitre.org/techniques/T1548/">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix introduces a few changes:</p>
<ol>
<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>
<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>
</ol>
<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.
If users can't upgrade, the following are recommended:</p>
<ol>
<li>Limit access to Rancher Restricted Admin only to trusted users.</li>
<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>
</ol>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>
<li><a href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-01T14:19:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/beego/beego] Beego allows Reflected/Stored XSS in Beego's RenderForm() Function Due to Unescaped User Input]]></title>
        <id>https://github.com/advisories/GHSA-2j42-h78h-q4fg</id>
        <link href="https://github.com/advisories/GHSA-2j42-h78h-q4fg"/>
        <updated>2025-03-31T23:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Cross-Site Scripting (XSS) vulnerability exists in Beego's <code>RenderForm()</code> function due to improper HTML escaping of user-controlled data. This vulnerability allows attackers to inject malicious JavaScript code that executes in victims' browsers, potentially leading to session hijacking, credential theft, or account takeover. The vulnerability affects any application using Beego's <code>RenderForm()</code> function with user-provided data. Since it is a high-level function generating an entire form markup, many developers would assume it automatically escapes attributes (the way most frameworks do).</p>
<h3 id="details">Details</h3>
<p>The vulnerability is located in the <code>renderFormField()</code> function in Beego's <code>templatefunc.go</code> file (around lines 316-356). This function directly injects user-provided values into HTML without proper escaping:</p>
<pre><code class="language-go">return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    label, id, class, name, fType, value, requiredString)
</code></pre>
<p>None of the values (label, id, class, name, value) are properly HTML-escaped before being inserted into the HTML template. This allows attackers to break out of the attribute context or inject HTML tags directly.
The vulnerability can be exploited in two main ways:</p>
<ul>
<li>Attribute Injection: By injecting code into fields like DisplayName, an attacker can break out of the attribute context and execute JavaScript.</li>
<li>Content Injection: By injecting HTML tags into textarea content, an attacker can execute JavaScript.</li>
</ul>
<p>The <code>RenderForm()</code> function returns <code>template.HTML</code>, which bypasses Go's automatic HTML escaping, making this vulnerability particularly dangerous.</p>
<h3 id="poc">PoC</h3>
<p>Retrieve the following (secret) gist: <a href="https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b">https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b</a></p>
<p>To run it:</p>
<pre><code class="language-go">go mod init beego-xss-poc
go mod tidy
go run poc.go
</code></pre>
<p>Open your browser and navigate to <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>The application demonstrates the vulnerability through several examples:</p>
<ul>
<li><code>/profile</code> - Shows a profile with malicious data in the Display Name and Bio fields</li>
<li><code>/admin</code> - Shows multiple user profiles, including one with malicious data</li>
<li><code>/submit</code> - Allows you to create your own profile with malicious data</li>
</ul>
<p>In addition, you may use this Go test in <code>templatefunc_test.go</code>. The test passes, validating the vulnerability.</p>
<pre><code class="language-go">func TestRenderFormXSSVulnerability(t *testing.T) {
    type UserProfile struct {
        DisplayName string `form:"displayName,text,Name:"`
        Bio         string `form:",textarea"`
    }

    // Test case 1: Attribute injection in input field
    maliciousUser := UserProfile{
        DisplayName: `" onmouseover="alert('XSS')" data-malicious="`,
        Bio:         "Normal bio text",
    }

    output := RenderForm(&amp;maliciousUser)

    // The vulnerable output would contain the unescaped JavaScript
    if !strings.Contains(string(output), `onmouseover="alert('XSS')"`) {
        t.Errorf("Expected XSS vulnerability in attribute, but got safe output: %v", output)
    }

    // Test case 2: Script injection in textarea
    maliciousUser2 := UserProfile{
        DisplayName: "Normal Name",
        Bio:         `&lt;/textarea&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;&lt;textarea&gt;`,
    }

    output = RenderForm(&amp;maliciousUser2)

    // The vulnerable output would contain the unescaped script tag
    if !strings.Contains(string(output), `&lt;/textarea&gt;&lt;script&gt;alert('XSS')`) {
        t.Errorf("Expected XSS vulnerability in textarea content, but got safe output: %v", output)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a high-severity vulnerability with the following impacts:</p>
<ul>
<li>Cross-Site Scripting (XSS): Allows execution of arbitrary JavaScript in the context of the victim's browser.</li>
<li>Session Hijacking: Attackers can steal session cookies and impersonate victims.</li>
<li>Credential Theft: Attackers can create fake login forms to steal credentials.</li>
<li>Account Takeover: Attackers can perform actions on behalf of the victim.</li>
<li>Data Exfiltration: Sensitive data visible in the browser can be stolen.</li>
</ul>
<p>This is particularly concerning in admin panels or user management interfaces where one user's data is displayed to another user (typically an administrator).</p>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability can be fixed by properly escaping all user-provided values before inserting them into HTML, for example:</p>
<pre><code class="language-go">// Convert value to string and escape it
valueStr := ""
if value != nil {
    valueStr = template.HTMLEscapeString(fmt.Sprintf("%v", value))
}

// Escape the name and label
escapedName := template.HTMLEscapeString(name)
escapedLabel := template.HTMLEscapeString(label)
escapedType := template.HTMLEscapeString(fType)

return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    escapedLabel, id, class, escapedName, escapedType, valueStr, requiredString)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg">https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg</a></li>
<li><a href="https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25">https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30223">https://nvd.nist.gov/vuln/detail/CVE-2025-30223</a></li>
<li><a href="https://github.com/advisories/GHSA-2j42-h78h-q4fg">https://github.com/advisories/GHSA-2j42-h78h-q4fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2j42-h78h-q4fg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-31T16:55:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/beego/beego/v2] Beego allows Reflected/Stored XSS in Beego's RenderForm() Function Due to Unescaped User Input]]></title>
        <id>https://github.com/advisories/GHSA-2j42-h78h-q4fg</id>
        <link href="https://github.com/advisories/GHSA-2j42-h78h-q4fg"/>
        <updated>2025-03-31T23:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Cross-Site Scripting (XSS) vulnerability exists in Beego's <code>RenderForm()</code> function due to improper HTML escaping of user-controlled data. This vulnerability allows attackers to inject malicious JavaScript code that executes in victims' browsers, potentially leading to session hijacking, credential theft, or account takeover. The vulnerability affects any application using Beego's <code>RenderForm()</code> function with user-provided data. Since it is a high-level function generating an entire form markup, many developers would assume it automatically escapes attributes (the way most frameworks do).</p>
<h3 id="details">Details</h3>
<p>The vulnerability is located in the <code>renderFormField()</code> function in Beego's <code>templatefunc.go</code> file (around lines 316-356). This function directly injects user-provided values into HTML without proper escaping:</p>
<pre><code class="language-go">return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    label, id, class, name, fType, value, requiredString)
</code></pre>
<p>None of the values (label, id, class, name, value) are properly HTML-escaped before being inserted into the HTML template. This allows attackers to break out of the attribute context or inject HTML tags directly.
The vulnerability can be exploited in two main ways:</p>
<ul>
<li>Attribute Injection: By injecting code into fields like DisplayName, an attacker can break out of the attribute context and execute JavaScript.</li>
<li>Content Injection: By injecting HTML tags into textarea content, an attacker can execute JavaScript.</li>
</ul>
<p>The <code>RenderForm()</code> function returns <code>template.HTML</code>, which bypasses Go's automatic HTML escaping, making this vulnerability particularly dangerous.</p>
<h3 id="poc">PoC</h3>
<p>Retrieve the following (secret) gist: <a href="https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b">https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b</a></p>
<p>To run it:</p>
<pre><code class="language-go">go mod init beego-xss-poc
go mod tidy
go run poc.go
</code></pre>
<p>Open your browser and navigate to <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>The application demonstrates the vulnerability through several examples:</p>
<ul>
<li><code>/profile</code> - Shows a profile with malicious data in the Display Name and Bio fields</li>
<li><code>/admin</code> - Shows multiple user profiles, including one with malicious data</li>
<li><code>/submit</code> - Allows you to create your own profile with malicious data</li>
</ul>
<p>In addition, you may use this Go test in <code>templatefunc_test.go</code>. The test passes, validating the vulnerability.</p>
<pre><code class="language-go">func TestRenderFormXSSVulnerability(t *testing.T) {
    type UserProfile struct {
        DisplayName string `form:"displayName,text,Name:"`
        Bio         string `form:",textarea"`
    }

    // Test case 1: Attribute injection in input field
    maliciousUser := UserProfile{
        DisplayName: `" onmouseover="alert('XSS')" data-malicious="`,
        Bio:         "Normal bio text",
    }

    output := RenderForm(&amp;maliciousUser)

    // The vulnerable output would contain the unescaped JavaScript
    if !strings.Contains(string(output), `onmouseover="alert('XSS')"`) {
        t.Errorf("Expected XSS vulnerability in attribute, but got safe output: %v", output)
    }

    // Test case 2: Script injection in textarea
    maliciousUser2 := UserProfile{
        DisplayName: "Normal Name",
        Bio:         `&lt;/textarea&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;&lt;textarea&gt;`,
    }

    output = RenderForm(&amp;maliciousUser2)

    // The vulnerable output would contain the unescaped script tag
    if !strings.Contains(string(output), `&lt;/textarea&gt;&lt;script&gt;alert('XSS')`) {
        t.Errorf("Expected XSS vulnerability in textarea content, but got safe output: %v", output)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a high-severity vulnerability with the following impacts:</p>
<ul>
<li>Cross-Site Scripting (XSS): Allows execution of arbitrary JavaScript in the context of the victim's browser.</li>
<li>Session Hijacking: Attackers can steal session cookies and impersonate victims.</li>
<li>Credential Theft: Attackers can create fake login forms to steal credentials.</li>
<li>Account Takeover: Attackers can perform actions on behalf of the victim.</li>
<li>Data Exfiltration: Sensitive data visible in the browser can be stolen.</li>
</ul>
<p>This is particularly concerning in admin panels or user management interfaces where one user's data is displayed to another user (typically an administrator).</p>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability can be fixed by properly escaping all user-provided values before inserting them into HTML, for example:</p>
<pre><code class="language-go">// Convert value to string and escape it
valueStr := ""
if value != nil {
    valueStr = template.HTMLEscapeString(fmt.Sprintf("%v", value))
}

// Escape the name and label
escapedName := template.HTMLEscapeString(name)
escapedLabel := template.HTMLEscapeString(label)
escapedType := template.HTMLEscapeString(fType)

return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    escapedLabel, id, class, escapedName, escapedType, valueStr, requiredString)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg">https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg</a></li>
<li><a href="https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25">https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30223">https://nvd.nist.gov/vuln/detail/CVE-2025-30223</a></li>
<li><a href="https://github.com/advisories/GHSA-2j42-h78h-q4fg">https://github.com/advisories/GHSA-2j42-h78h-q4fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2j42-h78h-q4fg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-31T16:55:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.rgst.io/stencil/v2] go.rgst.io/stencil/v2 vulnerable to Path Traversal]]></title>
        <id>https://github.com/advisories/GHSA-p799-q2pr-6mxj</id>
        <link href="https://github.com/advisories/GHSA-p799-q2pr-6mxj"/>
        <updated>2025-03-29T00:08:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The library used to extract archives (github.com/jaredallard/archives) was vulnerable to the "zip slip" vulnerability. This is used to extract native extension archives and repository source archives. A native extension or repository archive could be crafted in such a way where a remote code execution or modification/reading of a file is possible using the user who is running stencil.</p>
<p>The severity is marked as "medium" because native extensions have always considered to be "unsafe" to run when not trusted. Native extensions are arbitrary code being ran, which could always do this same exploit with less steps. The medium severity is to reflect that this could be done even when a user is <em>not</em> using a native extension, for example a repository source archive. However, one would need to mutate the archives provided by Github or perform some hackery with links, which may not be possible. Thus, "medium" is used out of an abundance of caution where I would've labeled this as "low".</p>
<h3 id="patches">Patches</h3>
<p>Patched in 2.3.0 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds are present.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h">https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h">https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h</a></li>
<li><a href="https://github.com/rgst-io/stencil/security/advisories/GHSA-p799-q2pr-6mxj">https://github.com/rgst-io/stencil/security/advisories/GHSA-p799-q2pr-6mxj</a></li>
<li><a href="https://github.com/rgst-io/stencil/pull/255">https://github.com/rgst-io/stencil/pull/255</a></li>
<li><a href="https://github.com/rgst-io/stencil/commit/5482fcada0c6f77d903d13129bd656b7df80ac3a">https://github.com/rgst-io/stencil/commit/5482fcada0c6f77d903d13129bd656b7df80ac3a</a></li>
<li><a href="https://github.com/advisories/GHSA-p799-q2pr-6mxj">https://github.com/advisories/GHSA-p799-q2pr-6mxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p799-q2pr-6mxj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-29T00:08:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ollama/ollama] Ollama Denial of Service (DoS) via Null Pointer Dereference]]></title>
        <id>https://github.com/advisories/GHSA-p2wh-w96x-w232</id>
        <link href="https://github.com/advisories/GHSA-p2wh-w96x-w232"/>
        <updated>2025-03-28T22:13:54.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in ollama/ollama versions &lt;=0.3.14 allows a malicious user to create a customized GGUF model file that, when uploaded and created on the Ollama server, can cause a crash due to an unchecked null pointer dereference. This can lead to a Denial of Service (DoS) attack via remote network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0312">https://nvd.nist.gov/vuln/detail/CVE-2025-0312</a></li>
<li><a href="https://huntr.com/bounties/522c87b6-a7ac-41b2-84f3-62fd58921f21">https://huntr.com/bounties/522c87b6-a7ac-41b2-84f3-62fd58921f21</a></li>
<li><a href="https://github.com/advisories/GHSA-p2wh-w96x-w232">https://github.com/advisories/GHSA-p2wh-w96x-w232</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2wh-w96x-w232</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/NethermindEth/juno] Nethermind Juno Potential Denial of Service (DoS) via Integer Overflow]]></title>
        <id>https://github.com/advisories/GHSA-wq32-8rp4-w2mc</id>
        <link href="https://github.com/advisories/GHSA-wq32-8rp4-w2mc"/>
        <updated>2025-03-28T22:05:00.000Z</updated>
        <content type="html"><![CDATA[<p>An integer overflow in Nethermind Juno before v0.12.5 within the Sierra bytecode decompression logic within the "cairo-lang-starknet-classes" library could allow remote attackers to trigger an infinite loop (and high CPU usage) by submitting a malicious Declare v2/v3 transaction. This results in a denial-of-service condition for affected Starknet full-node implementations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29072">https://nvd.nist.gov/vuln/detail/CVE-2025-29072</a></li>
<li><a href="https://github.com/NethermindEth/juno/commit/51074875941aa111c5dd2b41f2ec890a4a15b587">https://github.com/NethermindEth/juno/commit/51074875941aa111c5dd2b41f2ec890a4a15b587</a></li>
<li><a href="https://community.starknet.io/t/starknet-security-update-potential-full-node-vulnerability-recap/115314">https://community.starknet.io/t/starknet-security-update-potential-full-node-vulnerability-recap/115314</a></li>
<li><a href="https://github.com/NethermindEth/juno/commit/b9fe28df6a4339a66f91bff723c61dc063f9ed50">https://github.com/NethermindEth/juno/commit/b9fe28df6a4339a66f91bff723c61dc063f9ed50</a></li>
<li><a href="https://github.com/advisories/GHSA-wq32-8rp4-w2mc">https://github.com/advisories/GHSA-wq32-8rp4-w2mc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq32-8rp4-w2mc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-27T18:31:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jaredallard/archives] github.com/jaredallard/archives Has Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')]]></title>
        <id>https://github.com/advisories/GHSA-j95m-rcjp-q69h</id>
        <link href="https://github.com/advisories/GHSA-j95m-rcjp-q69h"/>
        <updated>2025-03-31T13:55:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious user could feed a specially crafted archive to this library causing RCE, modification of files or other bad things in the context of whatever user is running this library as, through the program that imports it.</p>
<p>The severity highly depends on the user's permissions and environment it is being ran in (e.g., non root, read only root container would likely have no impact vs running something as root on a production system).</p>
<p>The severity is also dependent on <strong>arbitrary archives</strong> being passed or not.</p>
<p>Based on the above, severity high was picked to be safe.</p>
<h3 id="patches">Patches</h3>
<p>Patched with the help of snyk and gosec in v1.0.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only workaround is to manually validate archives before submitting them to this library, however that is not recommended vs upgrading to unaffected versions.</p>
<h3 id="references">References</h3>
<p><a href="https://security.snyk.io/research/zip-slip-vulnerability">https://security.snyk.io/research/zip-slip-vulnerability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h">https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h</a></li>
<li><a href="https://github.com/advisories/GHSA-j95m-rcjp-q69h">https://github.com/advisories/GHSA-j95m-rcjp-q69h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j95m-rcjp-q69h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-28T14:45:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx admission controller RCE escalation]]></title>
        <id>https://github.com/advisories/GHSA-mgvx-rpfc-9mpv</id>
        <link href="https://github.com/advisories/GHSA-mgvx-rpfc-9mpv"/>
        <updated>2025-03-25T15:10:16.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in Kubernetes where under certain conditions, an unauthenticated attacker with access to the pod network can achieve arbitrary code execution in the context of the ingress-nginx controller. This can lead to disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1974">https://nvd.nist.gov/vuln/detail/CVE-2025-1974</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131009">https://github.com/kubernetes/kubernetes/issues/131009</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-mgvx-rpfc-9mpv">https://github.com/advisories/GHSA-mgvx-rpfc-9mpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgvx-rpfc-9mpv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx admission controller RCE escalation]]></title>
        <id>https://github.com/advisories/GHSA-mgvx-rpfc-9mpv</id>
        <link href="https://github.com/advisories/GHSA-mgvx-rpfc-9mpv"/>
        <updated>2025-03-25T15:10:16.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in Kubernetes where under certain conditions, an unauthenticated attacker with access to the pod network can achieve arbitrary code execution in the context of the ingress-nginx controller. This can lead to disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1974">https://nvd.nist.gov/vuln/detail/CVE-2025-1974</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131009">https://github.com/kubernetes/kubernetes/issues/131009</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-mgvx-rpfc-9mpv">https://github.com/advisories/GHSA-mgvx-rpfc-9mpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgvx-rpfc-9mpv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx controller - auth secret file path traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-242m-6h72-7hgp</id>
        <link href="https://github.com/advisories/GHSA-242m-6h72-7hgp"/>
        <updated>2025-03-25T15:10:09.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where attacker-provided data are included in a filename by the ingress-nginx Admission Controller feature, resulting in directory traversal within the container. This could result in denial of service, or when combined with other vulnerabilities, limited disclosure of Secret objects from the cluster.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24513">https://nvd.nist.gov/vuln/detail/CVE-2025-24513</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131005">https://github.com/kubernetes/kubernetes/issues/131005</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-242m-6h72-7hgp">https://github.com/advisories/GHSA-242m-6h72-7hgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242m-6h72-7hgp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx controller - auth secret file path traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-242m-6h72-7hgp</id>
        <link href="https://github.com/advisories/GHSA-242m-6h72-7hgp"/>
        <updated>2025-03-25T15:10:09.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where attacker-provided data are included in a filename by the ingress-nginx Admission Controller feature, resulting in directory traversal within the container. This could result in denial of service, or when combined with other vulnerabilities, limited disclosure of Secret objects from the cluster.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24513">https://nvd.nist.gov/vuln/detail/CVE-2025-24513</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131005">https://github.com/kubernetes/kubernetes/issues/131005</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-242m-6h72-7hgp">https://github.com/advisories/GHSA-242m-6h72-7hgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242m-6h72-7hgp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx controller - configuration injection via unsanitized auth-url annotation]]></title>
        <id>https://github.com/advisories/GHSA-fwwp-xcxw-39vq</id>
        <link href="https://github.com/advisories/GHSA-fwwp-xcxw-39vq"/>
        <updated>2025-03-25T15:10:03.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where the <code>auth-url</code> Ingress annotation can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24514">https://nvd.nist.gov/vuln/detail/CVE-2025-24514</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131006">https://github.com/kubernetes/kubernetes/issues/131006</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-fwwp-xcxw-39vq">https://github.com/advisories/GHSA-fwwp-xcxw-39vq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fwwp-xcxw-39vq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx controller - configuration injection via unsanitized auth-url annotation]]></title>
        <id>https://github.com/advisories/GHSA-fwwp-xcxw-39vq</id>
        <link href="https://github.com/advisories/GHSA-fwwp-xcxw-39vq"/>
        <updated>2025-03-25T15:10:03.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where the <code>auth-url</code> Ingress annotation can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24514">https://nvd.nist.gov/vuln/detail/CVE-2025-24514</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131006">https://github.com/kubernetes/kubernetes/issues/131006</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-fwwp-xcxw-39vq">https://github.com/advisories/GHSA-fwwp-xcxw-39vq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fwwp-xcxw-39vq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ngress-nginx controller - configuration injection via unsanitized auth-tls-match-cn annotation]]></title>
        <id>https://github.com/advisories/GHSA-823x-fv5p-h7hw</id>
        <link href="https://github.com/advisories/GHSA-823x-fv5p-h7hw"/>
        <updated>2025-03-25T15:07:13.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where the <code>auth-tls-match-cn</code> Ingress annotation can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1097">https://nvd.nist.gov/vuln/detail/CVE-2025-1097</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131007">https://github.com/kubernetes/kubernetes/issues/131007</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-823x-fv5p-h7hw">https://github.com/advisories/GHSA-823x-fv5p-h7hw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-823x-fv5p-h7hw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ngress-nginx controller - configuration injection via unsanitized auth-tls-match-cn annotation]]></title>
        <id>https://github.com/advisories/GHSA-823x-fv5p-h7hw</id>
        <link href="https://github.com/advisories/GHSA-823x-fv5p-h7hw"/>
        <updated>2025-03-25T15:07:13.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where the <code>auth-tls-match-cn</code> Ingress annotation can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1097">https://nvd.nist.gov/vuln/detail/CVE-2025-1097</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131007">https://github.com/kubernetes/kubernetes/issues/131007</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-823x-fv5p-h7hw">https://github.com/advisories/GHSA-823x-fv5p-h7hw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-823x-fv5p-h7hw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx controller - configuration injection via unsanitized mirror annotations]]></title>
        <id>https://github.com/advisories/GHSA-vg63-w3p9-jc9m</id>
        <link href="https://github.com/advisories/GHSA-vg63-w3p9-jc9m"/>
        <updated>2025-03-25T15:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where the <code>mirror-target</code> and <code>mirror-host</code> Ingress annotations can be used to inject arbitrary configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1098">https://nvd.nist.gov/vuln/detail/CVE-2025-1098</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131008">https://github.com/kubernetes/kubernetes/issues/131008</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-vg63-w3p9-jc9m">https://github.com/advisories/GHSA-vg63-w3p9-jc9m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vg63-w3p9-jc9m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx controller - configuration injection via unsanitized mirror annotations]]></title>
        <id>https://github.com/advisories/GHSA-vg63-w3p9-jc9m</id>
        <link href="https://github.com/advisories/GHSA-vg63-w3p9-jc9m"/>
        <updated>2025-03-25T15:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in <a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a> where the <code>mirror-target</code> and <code>mirror-host</code> Ingress annotations can be used to inject arbitrary configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller. (Note that in the default installation, the controller can access all Secrets cluster-wide.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1098">https://nvd.nist.gov/vuln/detail/CVE-2025-1098</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/131008">https://github.com/kubernetes/kubernetes/issues/131008</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.11.5</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1">https://github.com/kubernetes/ingress-nginx/releases/tag/controller-v1.12.1</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ">https://groups.google.com/g/kubernetes-security-announce/c/2qa9DFtN0cQ</a></li>
<li><a href="https://github.com/advisories/GHSA-vg63-w3p9-jc9m">https://github.com/advisories/GHSA-vg63-w3p9-jc9m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vg63-w3p9-jc9m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-25T00:30:26.000Z</published>
    </entry>
</feed>