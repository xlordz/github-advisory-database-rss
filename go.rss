<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-05-11T15:01:14.502Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/kyverno/kyverno] Kyverno ignores subjectRegExp and IssuerRegExp]]></title>
        <id>https://github.com/advisories/GHSA-46mp-8w32-6g94</id>
        <link href="https://github.com/advisories/GHSA-46mp-8w32-6g94"/>
        <updated>2025-05-08T14:51:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Kyverno ignores subjectRegExp and IssuerRegExp while verifying artifact's sign with keyless mode. It allows the attacker to deploy kubernetes resources with the artifacts that were signed by unexpected certificate.</p>
<h3 id="details">Details</h3>
<p>Kyverno checks only subject and issuer fields when verifying an artifact's signature: <a href="https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537">https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537</a>. While there are subjectRegExp and issuerRegExp fields that can also be used for the defining expected subject and issue values. If the last ones are used then their values are not taken in count and there is no actually restriction for the certificate that was used for the image sign.</p>
<h3 id="poc">PoC</h3>
<p>For the successful exploitation attacker needs:</p>
<ul>
<li>Private key of any certificate in the certificate chain that trusted by cosign. It can be certificate that signed by company's self-signed Root CA if they are using their own PKI.</li>
<li>Access to container registry to push artifacts images </li>
<li>Availability to deploy malicious artifacts to the kubernetes cluster</li>
</ul>
<ol>
<li>Generate certificate that will be used for the image signing with the oidcissuer url. That can be done with the Fulcio or manually by using openssl</li>
</ol>
<pre><code># Create self-signed RootCA
openssl req -x509 -newkey rsa:4096 -keyout root-ca-key.pem -sha256 -noenc -days 9999 -subj "/C=AA/L=Location/O=IT/OU=Security/CN=Root Certificate Authority" -out root-ca.pem


# Create request for the intermediate certificate
openssl req -noenc -newkey rsa:4096 -keyout intermediate-ca-key.pem -addext "subjectKeyIdentifier = hash" -addext "keyUsage = critical,keyCertSign" -addext "basicConstraints = critical,CA:TRUE,pathlen:2" -subj "/C=AA/L=Location/O=IT/OU=Security/CN=Intermediate Certificate Authority" -out intermediate-ca.csr

# Issue intermediate cert with RootCA
openssl x509 -req -days 9999 -sha256 -in intermediate-ca.csr -CA root-ca.pem -CAkey root-ca-key.pem -copy_extensions copy -out intermediate-ca.pem

# OID_1_1 is the hexadecimal representation of the oidcissuer url
OID_1_1=$(echo -n "https://me.net" | xxd -p -u)

# Create request for the leaf certificate
openssl req -noenc -newkey rsa:4096 -keyout my-key.pem -addext "subjectKeyIdentifier = hash" -addext "basicConstraints = critical,CA:FALSE" -addext "keyUsage = critical,digitalSignature" -addext "subjectAltName = email:me@me.net" -addext "1.3.6.1.4.1.57264.1.1 = DER:${OID_1_1}" -addext "1.3.6.1.4.1.57264.1.8 = ASN1:UTF8String:https://me.net" -subj "/C=AA/L=Location/O=IT/OU=Security/CN=My Cosign Certificate" -out my-cert.csr

# Issue leaf cert with Intermediate CA
openssl x509 -req -in my-cert.csr -CA intermediate-ca.pem -CAkey intermediate-ca-key.pem -copy_extensions copy -days 9999 -sha256 -out my-cert.pem

# Generate certificates chain
cat intermediate-ca.pem root-ca.pem &gt; cert-chain.pem
</code></pre>
<ol start="2">
<li>Build and push container image</li>
<li>Import key and sign the image with the generated certificate</li>
</ol>
<pre><code>COSIGN_PASSWORD="" cosign import-key-pair --key my-key.pem --output-key-prefix=import-my-key
COSIGN_PASSWORD="" cosign sign $IMAGE_WITH_HASH --tlog-upload=false --cert my-cert.pem --cert-chain cert-chain.pem --key import-my-key.key
</code></pre>
<ol start="3">
<li>Add ClusterPolicy for the Kyverno with the wrong subject and issuer regexp. Adding (Fulcio) Root CA as secret and using it in policy is optional only if cosign cannot trust it:</li>
</ol>
<pre><code>apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: check-image-keyless
spec:
  validationFailureAction: Enforce
  webhookTimeoutSeconds: 30
  rules:
    - name: check-image-keyless
      match:
        any:
        - resources:
            kinds:
              - Pod
      context:
        - name: encodedCert
          apiCall:
            urlPath: "/api/v1/namespaces/kyverno/secrets/fulcio-ca"
            method: GET
            jmesPath: "data.\"fulcio-ca.pem\""
        - name: root
          variable:
            jmesPath: "base64_decode(encodedCert)"
      verifyImages:
      - imageReferences:
        - "&lt;IMAGE_REGEXP&gt;"
        attestors:
        - entries:
          - keyless:
              subjectRegExp: https://ivalid
              issuerRegExp: https://ivalid
              roots: "{{root}}"
              rekor:
                url: &lt;URL_TO_REKOR&gt;
                pubkey: |-
                  -----BEGIN PUBLIC KEY-----
                  ...
                  -----END PUBLIC KEY-----
              ctlog:
                pubkey: |-
                  -----BEGIN PUBLIC KEY-----
                  ...
                  -----END PUBLIC KEY-----
</code></pre>
<ol start="4">
<li>Deploy previously signed image</li>
</ol>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: image-sign
  name: image-sign
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: image-sign
  strategy: {}
  template:
    metadata:
      annotations:
      labels:
        app: image-sign
    spec:
      containers:
        - image: &lt;YOUR_IMAGE&gt;
          imagePullPolicy: Always
          name: image-signing
          ports:
            - containerPort: 5000
          resources:
            requests:
              memory: 500Mi
              cpu: 0.1
            limits:
              memory: 2Gi
              cpu: 0.2
      restartPolicy: Always
status: {}
</code></pre>
<ol start="5">
<li>The deployment with pods will be create successfully due to not checking subjectRegExp and issuerRegExp fields validation</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Deploying unauthorized kubernetes resources that can lead to full compromise of kubernetes cluster</p>
<h3 id="ps">P.S.</h3>
<p>Problem was discovered by me when testing image sign verifying with keyless signing: 
<a href="https://kubernetes.slack.com/archives/CLGR9BJU9/p1740136401365279?thread_ts=1740136401.365279&amp;cid=CLGR9BJU9">https://kubernetes.slack.com/archives/CLGR9BJU9/p1740136401365279?thread_ts=1740136401.365279&amp;cid=CLGR9BJU9</a>. Then it was <a href="https://github.com/kyverno/policies/issues/1246">verified</a> and <a href="https://github.com/kyverno/kyverno/pull/12237">fixed</a> by <a href="https://github.com/Mohdcode">Mohcode</a>. But i think it should be registered as security problem such as it allows to bypass part of the verification mechanism and Kyverno users should be aware of it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kyverno/kyverno/security/advisories/GHSA-46mp-8w32-6g94">https://github.com/kyverno/kyverno/security/advisories/GHSA-46mp-8w32-6g94</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29778">https://nvd.nist.gov/vuln/detail/CVE-2025-29778</a></li>
<li><a href="https://github.com/kyverno/policies/issues/1246">https://github.com/kyverno/policies/issues/1246</a></li>
<li><a href="https://github.com/kyverno/kyverno/pull/12237">https://github.com/kyverno/kyverno/pull/12237</a></li>
<li><a href="https://github.com/kyverno/kyverno/commit/8777672fb17bdf252bd2e7d8de3441e240404a60">https://github.com/kyverno/kyverno/commit/8777672fb17bdf252bd2e7d8de3441e240404a60</a></li>
<li><a href="https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537">https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537</a></li>
<li><a href="https://github.com/advisories/GHSA-46mp-8w32-6g94">https://github.com/advisories/GHSA-46mp-8w32-6g94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46mp-8w32-6g94</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-24T19:07:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/blevesearch/bleve/v2] Missing Role Based Access Control for the REST handlers in bleve/http package]]></title>
        <id>https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</id>
        <link href="https://github.com/advisories/GHSA-9w9f-6mg8-jp7w"/>
        <updated>2025-05-08T16:45:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Bleve includes HTTP utilities under bleve/http package, that are used by its sample application. 
(<a href="https://github.com/blevesearch/bleve-explorer">https://github.com/blevesearch/bleve-explorer</a>)
These HTTP methods paves way for exploitation of a node’s filesystem where the bleve index resides, 
if the user has used bleve’s own HTTP (bleve/http) handlers for exposing the access to the indexes. 
For instance, the CreateIndexHandler (http/index_create.go) and DeleteIndexHandler (http/index_delete.go) 
enable an attacker to create a bleve index (directory structure) anywhere where the user running the server 
has the write permissions and to delete recursively any directory owned by the same user account.</p>
<p>Users who have used the bleve/http package for exposing access to bleve index without the explicit 
handling for the Role Based Access Controls(RBAC) of the index assets would be impacted.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p><strong>No</strong>. The http package is purely intended to be used for demonstration purposes. 
And bleve is never designed to be handling the RBACs or it was ever advertised to be used in that way. 
Hence the collaborators of this project have decided to stay away from adding any authentication or 
authorization to bleve project at the moment.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>The bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user 
inputs as well as any authentication and authorization measures. 
So it is recommended to not use that in production use cases.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue <a href="https://github.com/blevesearch/bleve/issues">here</a>.</li>
<li>Email us at [mailto:<a href="mailto:security@couchbase.com">security@couchbase.com</a>, <a href="mailto:fts-team@couchbase.com">fts-team@couchbase.com</a>].</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w">https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31022">https://nvd.nist.gov/vuln/detail/CVE-2022-31022</a></li>
<li><a href="https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff">https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0470">https://pkg.go.dev/vuln/GO-2022-0470</a></li>
<li><a href="https://github.com/blevesearch/bleve/commit/af9e3111dadfedf9d30f0448506b4a57fecc8550">https://github.com/blevesearch/bleve/commit/af9e3111dadfedf9d30f0448506b4a57fecc8550</a></li>
<li><a href="https://github.com/advisories/GHSA-9w9f-6mg8-jp7w">https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-06-03T22:17:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/casdoor/casdoor] Casdoor SCIM User Creation Endpoint scim.go HandleScim authorization in github.com/casdoor/casdoor]]></title>
        <id>https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</id>
        <link href="https://github.com/advisories/GHSA-8w8f-h4cm-c4pg"/>
        <updated>2025-05-06T19:59:55.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability classified as critical was found in Casdoor up to 1.811.0. This vulnerability affects the function HandleScim of the file controllers/scim.go of the component SCIM User Creation Endpoint. The manipulation leads to authorization bypass. The attack can be initiated remotely. Upgrading to version 1.812.0 is able to address this issue. The name of the patch is 3d12ac8dc2282369296c3386815c00a06c6a92fe. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4210">https://nvd.nist.gov/vuln/detail/CVE-2025-4210</a></li>
<li><a href="https://github.com/casdoor/casdoor/commit/3d12ac8dc2282369296c3386815c00a06c6a92fe">https://github.com/casdoor/casdoor/commit/3d12ac8dc2282369296c3386815c00a06c6a92fe</a></li>
<li><a href="https://github.com/casdoor/casdoor/releases/tag/v1.812.0">https://github.com/casdoor/casdoor/releases/tag/v1.812.0</a></li>
<li><a href="https://vuldb.com/?ctiid.307180">https://vuldb.com/?ctiid.307180</a></li>
<li><a href="https://vuldb.com/?id.307180">https://vuldb.com/?id.307180</a></li>
<li><a href="https://vuldb.com/?submit.556201">https://vuldb.com/?submit.556201</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3661">https://pkg.go.dev/vuln/GO-2024-3661</a></li>
<li><a href="https://github.com/advisories/GHSA-8w8f-h4cm-c4pg">https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T18:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse]]></title>
        <id>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</id>
        <link href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq"/>
        <updated>2025-05-06T19:57:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL offers developers the ability to manage user sessions using the <a href="https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>
<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>
<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>
<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>
<h3 id="patches">Patches</h3>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">3.0.0</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">2.71.9</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">2.70.10</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46815">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>
<li><a href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-06T16:51:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse]]></title>
        <id>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</id>
        <link href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq"/>
        <updated>2025-05-06T19:57:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL offers developers the ability to manage user sessions using the <a href="https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>
<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>
<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>
<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>
<h3 id="patches">Patches</h3>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">3.0.0</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">2.71.9</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">2.70.10</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46815">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>
<li><a href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-06T16:51:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse]]></title>
        <id>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</id>
        <link href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq"/>
        <updated>2025-05-06T19:57:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL offers developers the ability to manage user sessions using the <a href="https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>
<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>
<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>
<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>
<h3 id="patches">Patches</h3>
<p>3.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">3.0.0</a>
2.71.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">2.71.9</a>
2.x versions are fixed on &gt;=<a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">2.70.10</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The recommended solution is to update ZITADEL to a patched version.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.70.10">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.71.9">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v3.0.0">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46815">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>
<li><a href="https://github.com/advisories/GHSA-g4r8-mp7g-85fq">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4r8-mp7g-85fq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-06T16:51:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/patrickhener/goshs] goshs route not protected, allows command execution]]></title>
        <id>https://github.com/advisories/GHSA-rwj2-w85g-5cmm</id>
        <link href="https://github.com/advisories/GHSA-rwj2-w85g-5cmm"/>
        <updated>2025-05-06T21:44:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It seems that when running <strong>goshs</strong> without arguments it is possible for anyone to execute commands on the server. This was tested on version <strong>1.0.4</strong> of <strong>goshs</strong>. The command function was introduced in version <strong>0.3.4</strong>.</p>
<h3 id="details">Details</h3>
<p>It seems that the function <code>dispatchReadPump</code> does not checks the option cli <code>-c</code>, thus allowing anyone to execute arbitrary command through the use of websockets.</p>
<h3 id="poc">PoC</h3>
<p>Used <strong>websocat</strong> for the POC:</p>
<pre><code class="language-bash">echo -e '{"type": "command", "content": "id"}' |./websocat 'ws://192.168.1.11:8000/?ws' -t
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability will only impacts goshs server on vulnerable versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/patrickhener/goshs/security/advisories/GHSA-rwj2-w85g-5cmm">https://github.com/patrickhener/goshs/security/advisories/GHSA-rwj2-w85g-5cmm</a></li>
<li><a href="https://github.com/patrickhener/goshs/commit/160220974576afe5111485b8d12fd36058984cfa">https://github.com/patrickhener/goshs/commit/160220974576afe5111485b8d12fd36058984cfa</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46816">https://nvd.nist.gov/vuln/detail/CVE-2025-46816</a></li>
<li><a href="https://github.com/advisories/GHSA-rwj2-w85g-5cmm">https://github.com/advisories/GHSA-rwj2-w85g-5cmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwj2-w85g-5cmm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-06T16:45:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/nrkno/terraform-provider-windns] Terraform WinDNS Provider improperly sanitizes input variables in `windns_record`]]></title>
        <id>https://github.com/advisories/GHSA-4vgf-2cm4-mp7c</id>
        <link href="https://github.com/advisories/GHSA-4vgf-2cm4-mp7c"/>
        <updated>2025-05-06T19:56:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact:</h2>
<p>A security issue has been found in <code>terraform-provider-windns</code> before version <code>1.0.5</code>. The <code>windns_record</code> resource did not santize the input variables. This can lead to authenticated command injection in the underlyding powershell command prompt.</p>
<h2 id="patches">Patches:</h2>
<p><a href="https://github.com/nrkno/terraform-provider-windns/commit/c76f69610c1b502f90aaed8c4f102194530b5bce"><code>83ef736 (fix: better input validation)</code></a></p>
<h2 id="fixed-versions">Fixed versions:</h2>
<ul>
<li><code>v1.0.5</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nrkno/terraform-provider-windns/security/advisories/GHSA-4vgf-2cm4-mp7c">https://github.com/nrkno/terraform-provider-windns/security/advisories/GHSA-4vgf-2cm4-mp7c</a></li>
<li><a href="https://github.com/nrkno/terraform-provider-windns/commit/c76f69610c1b502f90aaed8c4f102194530b5bce">https://github.com/nrkno/terraform-provider-windns/commit/c76f69610c1b502f90aaed8c4f102194530b5bce</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46735">https://nvd.nist.gov/vuln/detail/CVE-2025-46735</a></li>
<li><a href="https://github.com/advisories/GHSA-4vgf-2cm4-mp7c">https://github.com/advisories/GHSA-4vgf-2cm4-mp7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vgf-2cm4-mp7c</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-06T16:38:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/inspektor-gadget/inspektor-gadget] Inspektor Gadget Security Policies Can be Bypassed]]></title>
        <id>https://github.com/advisories/GHSA-pv22-fqcj-7xwh</id>
        <link href="https://github.com/advisories/GHSA-pv22-fqcj-7xwh"/>
        <updated>2025-05-06T19:13:24.000Z</updated>
        <content type="html"><![CDATA[<p>Security policies like <a href="https://inspektor-gadget.io/docs/latest/reference/restricting-gadgets"><code>allowed-gadgets</code></a>,  <a href="https://inspektor-gadget.io/docs/latest/reference/disallow-pulling"><code>disallow-pulling</code></a>, <a href="https://inspektor-gadget.io/docs/latest/reference/verify-assets#verify-image-based-gadgets"><code>verify-image</code></a> can be bypassed by a malicious client.</p>
<h3 id="impact">Impact</h3>
<p>Users running <code>ig</code> in daemon mode or IG on Kubernetes that rely on any of the features mentioned above are vulnerable to this issue. In order to exploit this, the client needs access to the server, like the correct TLS certificates on the <code>ig daemon</code> case or access to the cluster in the Kubernetes case. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in v0.40.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is not known workaround to fix it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/inspektor-gadget/inspektor-gadget/security/advisories/GHSA-pv22-fqcj-7xwh">https://github.com/inspektor-gadget/inspektor-gadget/security/advisories/GHSA-pv22-fqcj-7xwh</a></li>
<li><a href="https://github.com/inspektor-gadget/inspektor-gadget/commit/c51d419964f5b6f9344fcad4faba70e2e025212b">https://github.com/inspektor-gadget/inspektor-gadget/commit/c51d419964f5b6f9344fcad4faba70e2e025212b</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3665">https://pkg.go.dev/vuln/GO-2025-3665</a></li>
<li><a href="https://github.com/advisories/GHSA-pv22-fqcj-7xwh">https://github.com/advisories/GHSA-pv22-fqcj-7xwh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pv22-fqcj-7xwh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-06T00:42:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/linkerd/linkerd2] Linkerd resource exhaustion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-42mr-jpwh-m9rv</id>
        <link href="https://github.com/advisories/GHSA-42mr-jpwh-m9rv"/>
        <updated>2025-05-06T00:38:56.000Z</updated>
        <content type="html"><![CDATA[<p>In Buoyant Edge releases before edge-25.2.1 and Enterprise for Linkerd releases 2.16.* before 2.16.5, 2.17.* before 2.17.2, and 2.18.* before 2.18.0, resource exhaustion can occur for Linkerd proxy metrics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-43915">https://nvd.nist.gov/vuln/detail/CVE-2025-43915</a></li>
<li><a href="https://docs.buoyant.io/security/advisories/2025-01">https://docs.buoyant.io/security/advisories/2025-01</a></li>
<li><a href="https://www.buoyant.io/resources">https://www.buoyant.io/resources</a></li>
<li><a href="https://github.com/advisories/GHSA-42mr-jpwh-m9rv">https://github.com/advisories/GHSA-42mr-jpwh-m9rv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-42mr-jpwh-m9rv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-05T18:32:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/open-policy-agent/opa] OPA server Data API HTTP path injection of Rego]]></title>
        <id>https://github.com/advisories/GHSA-6m8w-jc87-6cr7</id>
        <link href="https://github.com/advisories/GHSA-6m8w-jc87-6cr7"/>
        <updated>2025-05-05T22:02:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When run as a server, OPA exposes an HTTP<a href="https://www.openpolicyagent.org/docs/latest/rest-api/#data-api"> Data API</a> for reading and writing documents. Requesting a virtual document through the Data API entails policy evaluation, where a Rego query containing a single data document <a href="https://www.openpolicyagent.org/docs/latest/policy-language/#references">reference</a> is constructed from the requested path. This query is then used for policy evaluation.</p>
<p>A HTTP request path can be crafted in a way that injects Rego code into the constructed query. The evaluation result cannot be made to return any other data than what is generated by the requested path, but this path can be misdirected, and the injected Rego code can be crafted to make the query succeed or fail; opening up for oracle attacks or, given the right circumstances, erroneous policy decision results. Furthermore, the injected code can be crafted to be computationally expensive, resulting in a Denial Of Service (DoS) attack.</p>
<p><strong>Users are only impacted if all of the following apply:</strong></p>
<ul>
<li>OPA is deployed as a standalone server (rather than being used as a Go library)</li>
<li>The OPA server is exposed outside of the local host in an untrusted environment.</li>
<li>The configured <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authorization policy</a> does not do exact matching of the <code>input.path</code> attribute when deciding if the request should be allowed.</li>
</ul>
<p><strong>or, if all of the following apply:</strong></p>
<ul>
<li>OPA is deployed as a standalone server.</li>
<li>The service connecting to OPA allows 3rd parties to insert unsanitised text into the path of the HTTP request to OPA’s Data API.</li>
</ul>
<p><strong>Note:</strong> With <strong>no</strong> Authorization Policy configured for restricting API access (the default configuration), the RESTful Data API provides access for managing Rego policies; and the RESTful Query API facilitates advanced queries. Full access to these APIs provides both simpler, and broader access than what the security issue describes here can facilitate. As such, OPA servers exposed to a network are <strong>not</strong> considered affected by the attack described here if they are knowingly not restricting access through an Authorization Policy.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in OPA v1.4.0.</p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="dont-publicly-expose-opas-restful-apis">Don’t publicly expose OPA’s RESTful APIs</h4>
<p>Unless necessary for production reasons, network access to OPA’s RESTful APIs should be limited to <code>localhost</code> and/or trusted networks. 
Since OPA v1.0, unless otherwise configured, the server listener defaults to <code>localhost</code>.</p>
<h4 id="enable-authentication-to-only-allow-access-to-trusted-clients">Enable Authentication to Only Allow Access to Trusted Clients</h4>
<p>A configured <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authentication</a> scheme is a requirement when OPA is exposed in an untrusted environment. While requiring authentication alone doesn’t mitigate this attack, it effectively reduces the scope from untrusted clients to trusted clients.</p>
<h4 id="perform-path-validation-using-opas-authorization-policy-functionality">Perform Path Validation Using OPA’s Authorization Policy Functionality</h4>
<p>OPA can be configured to use an <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">Authorization Policy</a> to validate all incoming requests.
By authoring the Authorization Policy to only accept paths corresponding to expected Rego package references, this attack can be fully mitigated.</p>
<p>The HTTP path in a Data API request is of the format <code>/v1/data/{path:.+}</code> (<code>/v0/data/{path:.+}</code>, for the v0 Data API), where <code>data/{path:.+}</code> directly corresponds to a reference to a virtual document, and a prefix of <code>{path:.+}</code> corresponds to a Rego <code>package</code> declaration. 
E.g. the HTTP path <code>v1/data/do/re/mi</code> corresponds to the data reference <code>data.do.re.mi</code>, where <code>do.re</code> is the package and <code>mi</code> is the rule in the following Rego module:</p>
<pre><code class="language-rego">package do.re

mi if {
    ...
}
</code></pre>
<p>Unless otherwise <a href="https://www.openpolicyagent.org/docs/latest/configuration/#miscellaneous">configured</a>, OPA will use the rule at <code>data.system.authz.allow</code> as Authorization Policy. Authorization is enabled by starting OPA with the <code>--authorization=basic</code> flag, and the Authorization policy must be made available to the OPA runtime either through a bundle (via the <code>--bundle</code> flag or through <a href="https://www.openpolicyagent.org/docs/latest/management-discovery/">discovery</a>) or as an individual module via the command-line.</p>
<p>A trivial Authorization Policy example:</p>
<pre><code class="language-rego">package system.authz

allowed_paths := [
    ["v1", "data", "policy1", "allow"],
    ["v1", "data", "policy2", "allow"],
    ...
]

allow if {
    input.path in allowed_paths
}
</code></pre>
<p><strong>Note:</strong> configuring an Authorization Policy in OPA isn't the only way to protect against malicious request paths. Path validation and sanitisation can also be performed by connecting clients and 3rd party intermediaries, such as API gateways, reverse proxies, etc.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7">https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c">https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46569">https://nvd.nist.gov/vuln/detail/CVE-2025-46569</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3660">https://pkg.go.dev/vuln/GO-2025-3660</a></li>
<li><a href="https://github.com/advisories/GHSA-6m8w-jc87-6cr7">https://github.com/advisories/GHSA-6m8w-jc87-6cr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m8w-jc87-6cr7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-01T17:02:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/steve] Steve doesn’t verify a server’s certificate and is susceptible to man-in-the-middle (MitM) attacks]]></title>
        <id>https://github.com/advisories/GHSA-95fc-g4gj-mqmx</id>
        <link href="https://github.com/advisories/GHSA-95fc-g4gj-mqmx"/>
        <updated>2025-05-05T22:02:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified in Steve where by default it was using an insecure option that did not validate the certificate presented by the remote server while performing a TLS connection. This could allow the execution of a man-in-the-middle (MitM) attack against services using Steve.</p>
<p>For example, Rancher relies on Steve as a dependency for its user interface (UI) to proxy requests to Kubernetes clusters. Users who have the permission to create a service in Rancher’s local cluster can take over Rancher’s UI and display their own UI to gather sensitive information. This is only possible when the setting <code>ui-offline-preferred</code> is manually set to <code>remote</code> (by default Rancher sets it to <code>dynamic</code>). This enables further attacks such as cross-site scripting (XSS), or tampering the UI to collect passwords from other users etc.</p>
<p>Please consult the associated  <a href="https://attack.mitre.org/techniques/T1557/">MITRE ATT&amp;CK - Technique - Adversary-in-the-Middle</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions of Steve include releases <code>v0.2.1</code>, <code>v0.3.3</code>, <code>v0.4.4</code> and <code>v0.5.13</code>.</p>
<p>This vulnerability is addressed by changing Steve to always verify a server’s certificate based on Go’s TLS settings.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you can't upgrade to a fixed version, please make sure that you are only using Steve to connect to trusted servers.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/steve/security/advisories/GHSA-95fc-g4gj-mqmx">https://github.com/rancher/steve/security/advisories/GHSA-95fc-g4gj-mqmx</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3648">https://pkg.go.dev/vuln/GO-2025-3648</a></li>
<li><a href="https://github.com/advisories/GHSA-95fc-g4gj-mqmx">https://github.com/advisories/GHSA-95fc-g4gj-mqmx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95fc-g4gj-mqmx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-25T15:12:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Hashicorp Vault Community vulnerable to Incorrect Authorization]]></title>
        <id>https://github.com/advisories/GHSA-f9ch-h8j7-8jwg</id>
        <link href="https://github.com/advisories/GHSA-f9ch-h8j7-8jwg"/>
        <updated>2025-05-06T19:12:49.000Z</updated>
        <content type="html"><![CDATA[<p>Vault Community, Vault Enterprise (“Vault”) Azure Auth method did not correctly validate the claims in the Azure-issued token, resulting in the potential bypass of the bound_locations parameter on login. Fixed in Vault Community Edition 1.19.1 and Vault Enterprise 1.19.1, 1.18.7, 1.17.14, 1.16.18.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3879">https://nvd.nist.gov/vuln/detail/CVE-2025-3879</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2025-07-vault-s-azure-authentication-method-bound-location-restriction-could-be-bypassed-on-login/74716">https://discuss.hashicorp.com/t/hcsec-2025-07-vault-s-azure-authentication-method-bound-location-restriction-could-be-bypassed-on-login/74716</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3662">https://pkg.go.dev/vuln/GO-2025-3662</a></li>
<li><a href="https://github.com/advisories/GHSA-f9ch-h8j7-8jwg">https://github.com/advisories/GHSA-f9ch-h8j7-8jwg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f9ch-h8j7-8jwg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T18:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Hashicorp Vault Community vulnerable to Generation of Error Message Containing Sensitive Information]]></title>
        <id>https://github.com/advisories/GHSA-gcqf-f89c-68hv</id>
        <link href="https://github.com/advisories/GHSA-gcqf-f89c-68hv"/>
        <updated>2025-05-06T19:11:10.000Z</updated>
        <content type="html"><![CDATA[<p>Vault Community and Vault Enterprise Key/Value (kv) Version 2 plugin may unintentionally expose sensitive information in server and audit logs when users submit malformed payloads during secret creation or update operations via the Vault REST API. This vulnerability, identified as CVE-2025-4166, is fixed in Vault Community 1.19.3 and Vault Enterprise 1.19.3, 1.18.9, 1.17.16, 1.16.20.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4166">https://nvd.nist.gov/vuln/detail/CVE-2025-4166</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin">https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3663">https://pkg.go.dev/vuln/GO-2025-3663</a></li>
<li><a href="https://github.com/advisories/GHSA-gcqf-f89c-68hv">https://github.com/advisories/GHSA-gcqf-f89c-68hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gcqf-f89c-68hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T15:31:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/open-policy-agent/opa/server] OPA server Data API HTTP path injection of Rego]]></title>
        <id>https://github.com/advisories/GHSA-6m8w-jc87-6cr7</id>
        <link href="https://github.com/advisories/GHSA-6m8w-jc87-6cr7"/>
        <updated>2025-05-05T22:02:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When run as a server, OPA exposes an HTTP<a href="https://www.openpolicyagent.org/docs/latest/rest-api/#data-api"> Data API</a> for reading and writing documents. Requesting a virtual document through the Data API entails policy evaluation, where a Rego query containing a single data document <a href="https://www.openpolicyagent.org/docs/latest/policy-language/#references">reference</a> is constructed from the requested path. This query is then used for policy evaluation.</p>
<p>A HTTP request path can be crafted in a way that injects Rego code into the constructed query. The evaluation result cannot be made to return any other data than what is generated by the requested path, but this path can be misdirected, and the injected Rego code can be crafted to make the query succeed or fail; opening up for oracle attacks or, given the right circumstances, erroneous policy decision results. Furthermore, the injected code can be crafted to be computationally expensive, resulting in a Denial Of Service (DoS) attack.</p>
<p><strong>Users are only impacted if all of the following apply:</strong></p>
<ul>
<li>OPA is deployed as a standalone server (rather than being used as a Go library)</li>
<li>The OPA server is exposed outside of the local host in an untrusted environment.</li>
<li>The configured <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authorization policy</a> does not do exact matching of the <code>input.path</code> attribute when deciding if the request should be allowed.</li>
</ul>
<p><strong>or, if all of the following apply:</strong></p>
<ul>
<li>OPA is deployed as a standalone server.</li>
<li>The service connecting to OPA allows 3rd parties to insert unsanitised text into the path of the HTTP request to OPA’s Data API.</li>
</ul>
<p><strong>Note:</strong> With <strong>no</strong> Authorization Policy configured for restricting API access (the default configuration), the RESTful Data API provides access for managing Rego policies; and the RESTful Query API facilitates advanced queries. Full access to these APIs provides both simpler, and broader access than what the security issue describes here can facilitate. As such, OPA servers exposed to a network are <strong>not</strong> considered affected by the attack described here if they are knowingly not restricting access through an Authorization Policy.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in OPA v1.4.0.</p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="dont-publicly-expose-opas-restful-apis">Don’t publicly expose OPA’s RESTful APIs</h4>
<p>Unless necessary for production reasons, network access to OPA’s RESTful APIs should be limited to <code>localhost</code> and/or trusted networks. 
Since OPA v1.0, unless otherwise configured, the server listener defaults to <code>localhost</code>.</p>
<h4 id="enable-authentication-to-only-allow-access-to-trusted-clients">Enable Authentication to Only Allow Access to Trusted Clients</h4>
<p>A configured <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authentication</a> scheme is a requirement when OPA is exposed in an untrusted environment. While requiring authentication alone doesn’t mitigate this attack, it effectively reduces the scope from untrusted clients to trusted clients.</p>
<h4 id="perform-path-validation-using-opas-authorization-policy-functionality">Perform Path Validation Using OPA’s Authorization Policy Functionality</h4>
<p>OPA can be configured to use an <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">Authorization Policy</a> to validate all incoming requests.
By authoring the Authorization Policy to only accept paths corresponding to expected Rego package references, this attack can be fully mitigated.</p>
<p>The HTTP path in a Data API request is of the format <code>/v1/data/{path:.+}</code> (<code>/v0/data/{path:.+}</code>, for the v0 Data API), where <code>data/{path:.+}</code> directly corresponds to a reference to a virtual document, and a prefix of <code>{path:.+}</code> corresponds to a Rego <code>package</code> declaration. 
E.g. the HTTP path <code>v1/data/do/re/mi</code> corresponds to the data reference <code>data.do.re.mi</code>, where <code>do.re</code> is the package and <code>mi</code> is the rule in the following Rego module:</p>
<pre><code class="language-rego">package do.re

mi if {
    ...
}
</code></pre>
<p>Unless otherwise <a href="https://www.openpolicyagent.org/docs/latest/configuration/#miscellaneous">configured</a>, OPA will use the rule at <code>data.system.authz.allow</code> as Authorization Policy. Authorization is enabled by starting OPA with the <code>--authorization=basic</code> flag, and the Authorization policy must be made available to the OPA runtime either through a bundle (via the <code>--bundle</code> flag or through <a href="https://www.openpolicyagent.org/docs/latest/management-discovery/">discovery</a>) or as an individual module via the command-line.</p>
<p>A trivial Authorization Policy example:</p>
<pre><code class="language-rego">package system.authz

allowed_paths := [
    ["v1", "data", "policy1", "allow"],
    ["v1", "data", "policy2", "allow"],
    ...
]

allow if {
    input.path in allowed_paths
}
</code></pre>
<p><strong>Note:</strong> configuring an Authorization Policy in OPA isn't the only way to protect against malicious request paths. Path validation and sanitisation can also be performed by connecting clients and 3rd party intermediaries, such as API gateways, reverse proxies, etc.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7">https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c">https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46569">https://nvd.nist.gov/vuln/detail/CVE-2025-46569</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3660">https://pkg.go.dev/vuln/GO-2025-3660</a></li>
<li><a href="https://github.com/advisories/GHSA-6m8w-jc87-6cr7">https://github.com/advisories/GHSA-6m8w-jc87-6cr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m8w-jc87-6cr7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-01T17:02:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/open-policy-agent/opa/v1/server] OPA server Data API HTTP path injection of Rego]]></title>
        <id>https://github.com/advisories/GHSA-6m8w-jc87-6cr7</id>
        <link href="https://github.com/advisories/GHSA-6m8w-jc87-6cr7"/>
        <updated>2025-05-05T22:02:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When run as a server, OPA exposes an HTTP<a href="https://www.openpolicyagent.org/docs/latest/rest-api/#data-api"> Data API</a> for reading and writing documents. Requesting a virtual document through the Data API entails policy evaluation, where a Rego query containing a single data document <a href="https://www.openpolicyagent.org/docs/latest/policy-language/#references">reference</a> is constructed from the requested path. This query is then used for policy evaluation.</p>
<p>A HTTP request path can be crafted in a way that injects Rego code into the constructed query. The evaluation result cannot be made to return any other data than what is generated by the requested path, but this path can be misdirected, and the injected Rego code can be crafted to make the query succeed or fail; opening up for oracle attacks or, given the right circumstances, erroneous policy decision results. Furthermore, the injected code can be crafted to be computationally expensive, resulting in a Denial Of Service (DoS) attack.</p>
<p><strong>Users are only impacted if all of the following apply:</strong></p>
<ul>
<li>OPA is deployed as a standalone server (rather than being used as a Go library)</li>
<li>The OPA server is exposed outside of the local host in an untrusted environment.</li>
<li>The configured <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authorization policy</a> does not do exact matching of the <code>input.path</code> attribute when deciding if the request should be allowed.</li>
</ul>
<p><strong>or, if all of the following apply:</strong></p>
<ul>
<li>OPA is deployed as a standalone server.</li>
<li>The service connecting to OPA allows 3rd parties to insert unsanitised text into the path of the HTTP request to OPA’s Data API.</li>
</ul>
<p><strong>Note:</strong> With <strong>no</strong> Authorization Policy configured for restricting API access (the default configuration), the RESTful Data API provides access for managing Rego policies; and the RESTful Query API facilitates advanced queries. Full access to these APIs provides both simpler, and broader access than what the security issue describes here can facilitate. As such, OPA servers exposed to a network are <strong>not</strong> considered affected by the attack described here if they are knowingly not restricting access through an Authorization Policy.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in OPA v1.4.0.</p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="dont-publicly-expose-opas-restful-apis">Don’t publicly expose OPA’s RESTful APIs</h4>
<p>Unless necessary for production reasons, network access to OPA’s RESTful APIs should be limited to <code>localhost</code> and/or trusted networks. 
Since OPA v1.0, unless otherwise configured, the server listener defaults to <code>localhost</code>.</p>
<h4 id="enable-authentication-to-only-allow-access-to-trusted-clients">Enable Authentication to Only Allow Access to Trusted Clients</h4>
<p>A configured <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authentication</a> scheme is a requirement when OPA is exposed in an untrusted environment. While requiring authentication alone doesn’t mitigate this attack, it effectively reduces the scope from untrusted clients to trusted clients.</p>
<h4 id="perform-path-validation-using-opas-authorization-policy-functionality">Perform Path Validation Using OPA’s Authorization Policy Functionality</h4>
<p>OPA can be configured to use an <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">Authorization Policy</a> to validate all incoming requests.
By authoring the Authorization Policy to only accept paths corresponding to expected Rego package references, this attack can be fully mitigated.</p>
<p>The HTTP path in a Data API request is of the format <code>/v1/data/{path:.+}</code> (<code>/v0/data/{path:.+}</code>, for the v0 Data API), where <code>data/{path:.+}</code> directly corresponds to a reference to a virtual document, and a prefix of <code>{path:.+}</code> corresponds to a Rego <code>package</code> declaration. 
E.g. the HTTP path <code>v1/data/do/re/mi</code> corresponds to the data reference <code>data.do.re.mi</code>, where <code>do.re</code> is the package and <code>mi</code> is the rule in the following Rego module:</p>
<pre><code class="language-rego">package do.re

mi if {
    ...
}
</code></pre>
<p>Unless otherwise <a href="https://www.openpolicyagent.org/docs/latest/configuration/#miscellaneous">configured</a>, OPA will use the rule at <code>data.system.authz.allow</code> as Authorization Policy. Authorization is enabled by starting OPA with the <code>--authorization=basic</code> flag, and the Authorization policy must be made available to the OPA runtime either through a bundle (via the <code>--bundle</code> flag or through <a href="https://www.openpolicyagent.org/docs/latest/management-discovery/">discovery</a>) or as an individual module via the command-line.</p>
<p>A trivial Authorization Policy example:</p>
<pre><code class="language-rego">package system.authz

allowed_paths := [
    ["v1", "data", "policy1", "allow"],
    ["v1", "data", "policy2", "allow"],
    ...
]

allow if {
    input.path in allowed_paths
}
</code></pre>
<p><strong>Note:</strong> configuring an Authorization Policy in OPA isn't the only way to protect against malicious request paths. Path validation and sanitisation can also be performed by connecting clients and 3rd party intermediaries, such as API gateways, reverse proxies, etc.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7">https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c">https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46569">https://nvd.nist.gov/vuln/detail/CVE-2025-46569</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3660">https://pkg.go.dev/vuln/GO-2025-3660</a></li>
<li><a href="https://github.com/advisories/GHSA-6m8w-jc87-6cr7">https://github.com/advisories/GHSA-6m8w-jc87-6cr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m8w-jc87-6cr7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-01T17:02:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openfga/openfga] OpenFGA Authorization Bypass]]></title>
        <id>https://github.com/advisories/GHSA-w222-m46c-mgh6</id>
        <link href="https://github.com/advisories/GHSA-w222-m46c-mgh6"/>
        <updated>2025-05-01T13:30:20.000Z</updated>
        <content type="html"><![CDATA[<p>Overview
OpenFGA v1.8.10 or previous (Helm chart &lt;= openfga-0.2.28, docker &lt;= v.1.8.10) are vulnerable to authorization bypass when certain Check and ListObject calls are executed.</p>
<p>Am I Affected?
If you are using OpenFGA v1.8.10 or previous, specifically under the following conditions, you are affected by this authorization bypass vulnerability:</p>
<ul>
<li>Calling Check API or ListObjects with an <a href="https://openfga.dev/docs/concepts#what-is-an-authorization-model">authorization model</a> that has tuple cycle.</li>
<li><a href="https://github.com/openfga/openfga/blob/9b5974458b777707ed2a30ba6303699499e655ee/.config-schema.json#L528">Check query cache</a> is enabled, and</li>
<li>There are multiple check / list objects requests involving the tuple cycle within the check query TTL</li>
</ul>
<p>Fix
Upgrade to v1.8.11. This upgrade is backwards compatible.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openfga/openfga/security/advisories/GHSA-w222-m46c-mgh6">https://github.com/openfga/openfga/security/advisories/GHSA-w222-m46c-mgh6</a></li>
<li><a href="https://github.com/openfga/openfga/commit/244302e7a8b979d66cc1874a3899cdff7d47862f">https://github.com/openfga/openfga/commit/244302e7a8b979d66cc1874a3899cdff7d47862f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46331">https://nvd.nist.gov/vuln/detail/CVE-2025-46331</a></li>
<li><a href="https://github.com/advisories/GHSA-w222-m46c-mgh6">https://github.com/advisories/GHSA-w222-m46c-mgh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w222-m46c-mgh6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T16:43:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[volcano.sh/volcano] Volcano Scheduler Denial of Service via Unbounded Response from Elastic Service/extender Plugin]]></title>
        <id>https://github.com/advisories/GHSA-hg79-fw4p-25p8</id>
        <link href="https://github.com/advisories/GHSA-hg79-fw4p-25p8"/>
        <updated>2025-05-06T19:12:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue allows an attacker who has compromised either the Elastic service or the extender plugin to cause denial of service of the scheduler. This is a privilege escalation, because Volcano users may run their Elastic service and extender plugins in separate pods or nodes from the scheduler. In the Kubernetes security model, node isolation is a security boundary, and as such an attacker is able to cross that boundary in Volcano's case if they have compromised either the vulnerable services or the pod/node in which they are deployed.  The scheduler will become unavailable to other users and workloads in the cluster. The scheduler will either crash with an unrecoverable OOM panic or freeze while consuming excessive amounts of memory.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/volcano-sh/volcano/security/advisories/GHSA-hg79-fw4p-25p8">https://github.com/volcano-sh/volcano/security/advisories/GHSA-hg79-fw4p-25p8</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/45a4347471a5254121d10afef04c6732095fa398">https://github.com/volcano-sh/volcano/commit/45a4347471a5254121d10afef04c6732095fa398</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/7103c18de19821cd278f949fa24c13da350a8c5d">https://github.com/volcano-sh/volcano/commit/7103c18de19821cd278f949fa24c13da350a8c5d</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/735842af59b9be0da5090677db7693c98a798b2a">https://github.com/volcano-sh/volcano/commit/735842af59b9be0da5090677db7693c98a798b2a</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/7c0ea53fa3cfa7a05b5fba7a8af7bfe88adc41c3">https://github.com/volcano-sh/volcano/commit/7c0ea53fa3cfa7a05b5fba7a8af7bfe88adc41c3</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/d687f75a11fa36f37b54e4b6ff8e49bc0a3ca6b4">https://github.com/volcano-sh/volcano/commit/d687f75a11fa36f37b54e4b6ff8e49bc0a3ca6b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32777">https://nvd.nist.gov/vuln/detail/CVE-2025-32777</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.10.2">https://github.com/volcano-sh/volcano/releases/tag/v1.10.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.11.0-network-topology-preview.3">https://github.com/volcano-sh/volcano/releases/tag/v1.11.0-network-topology-preview.3</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.11.2">https://github.com/volcano-sh/volcano/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.12.0-alpha.2">https://github.com/volcano-sh/volcano/releases/tag/v1.12.0-alpha.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.9.1">https://github.com/volcano-sh/volcano/releases/tag/v1.9.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3656">https://pkg.go.dev/vuln/GO-2025-3656</a></li>
<li><a href="https://github.com/advisories/GHSA-hg79-fw4p-25p8">https://github.com/advisories/GHSA-hg79-fw4p-25p8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg79-fw4p-25p8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:40:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[volcano.sh/volcano] Volcano Scheduler Denial of Service via Unbounded Response from Elastic Service/extender Plugin]]></title>
        <id>https://github.com/advisories/GHSA-hg79-fw4p-25p8</id>
        <link href="https://github.com/advisories/GHSA-hg79-fw4p-25p8"/>
        <updated>2025-05-06T19:12:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue allows an attacker who has compromised either the Elastic service or the extender plugin to cause denial of service of the scheduler. This is a privilege escalation, because Volcano users may run their Elastic service and extender plugins in separate pods or nodes from the scheduler. In the Kubernetes security model, node isolation is a security boundary, and as such an attacker is able to cross that boundary in Volcano's case if they have compromised either the vulnerable services or the pod/node in which they are deployed.  The scheduler will become unavailable to other users and workloads in the cluster. The scheduler will either crash with an unrecoverable OOM panic or freeze while consuming excessive amounts of memory.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/volcano-sh/volcano/security/advisories/GHSA-hg79-fw4p-25p8">https://github.com/volcano-sh/volcano/security/advisories/GHSA-hg79-fw4p-25p8</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/45a4347471a5254121d10afef04c6732095fa398">https://github.com/volcano-sh/volcano/commit/45a4347471a5254121d10afef04c6732095fa398</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/7103c18de19821cd278f949fa24c13da350a8c5d">https://github.com/volcano-sh/volcano/commit/7103c18de19821cd278f949fa24c13da350a8c5d</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/735842af59b9be0da5090677db7693c98a798b2a">https://github.com/volcano-sh/volcano/commit/735842af59b9be0da5090677db7693c98a798b2a</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/7c0ea53fa3cfa7a05b5fba7a8af7bfe88adc41c3">https://github.com/volcano-sh/volcano/commit/7c0ea53fa3cfa7a05b5fba7a8af7bfe88adc41c3</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/d687f75a11fa36f37b54e4b6ff8e49bc0a3ca6b4">https://github.com/volcano-sh/volcano/commit/d687f75a11fa36f37b54e4b6ff8e49bc0a3ca6b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32777">https://nvd.nist.gov/vuln/detail/CVE-2025-32777</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.10.2">https://github.com/volcano-sh/volcano/releases/tag/v1.10.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.11.0-network-topology-preview.3">https://github.com/volcano-sh/volcano/releases/tag/v1.11.0-network-topology-preview.3</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.11.2">https://github.com/volcano-sh/volcano/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.12.0-alpha.2">https://github.com/volcano-sh/volcano/releases/tag/v1.12.0-alpha.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.9.1">https://github.com/volcano-sh/volcano/releases/tag/v1.9.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3656">https://pkg.go.dev/vuln/GO-2025-3656</a></li>
<li><a href="https://github.com/advisories/GHSA-hg79-fw4p-25p8">https://github.com/advisories/GHSA-hg79-fw4p-25p8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg79-fw4p-25p8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:40:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[volcano.sh/volcano] Volcano Scheduler Denial of Service via Unbounded Response from Elastic Service/extender Plugin]]></title>
        <id>https://github.com/advisories/GHSA-hg79-fw4p-25p8</id>
        <link href="https://github.com/advisories/GHSA-hg79-fw4p-25p8"/>
        <updated>2025-05-06T19:12:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue allows an attacker who has compromised either the Elastic service or the extender plugin to cause denial of service of the scheduler. This is a privilege escalation, because Volcano users may run their Elastic service and extender plugins in separate pods or nodes from the scheduler. In the Kubernetes security model, node isolation is a security boundary, and as such an attacker is able to cross that boundary in Volcano's case if they have compromised either the vulnerable services or the pod/node in which they are deployed.  The scheduler will become unavailable to other users and workloads in the cluster. The scheduler will either crash with an unrecoverable OOM panic or freeze while consuming excessive amounts of memory.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/volcano-sh/volcano/security/advisories/GHSA-hg79-fw4p-25p8">https://github.com/volcano-sh/volcano/security/advisories/GHSA-hg79-fw4p-25p8</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/45a4347471a5254121d10afef04c6732095fa398">https://github.com/volcano-sh/volcano/commit/45a4347471a5254121d10afef04c6732095fa398</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/7103c18de19821cd278f949fa24c13da350a8c5d">https://github.com/volcano-sh/volcano/commit/7103c18de19821cd278f949fa24c13da350a8c5d</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/735842af59b9be0da5090677db7693c98a798b2a">https://github.com/volcano-sh/volcano/commit/735842af59b9be0da5090677db7693c98a798b2a</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/7c0ea53fa3cfa7a05b5fba7a8af7bfe88adc41c3">https://github.com/volcano-sh/volcano/commit/7c0ea53fa3cfa7a05b5fba7a8af7bfe88adc41c3</a></li>
<li><a href="https://github.com/volcano-sh/volcano/commit/d687f75a11fa36f37b54e4b6ff8e49bc0a3ca6b4">https://github.com/volcano-sh/volcano/commit/d687f75a11fa36f37b54e4b6ff8e49bc0a3ca6b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32777">https://nvd.nist.gov/vuln/detail/CVE-2025-32777</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.10.2">https://github.com/volcano-sh/volcano/releases/tag/v1.10.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.11.0-network-topology-preview.3">https://github.com/volcano-sh/volcano/releases/tag/v1.11.0-network-topology-preview.3</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.11.2">https://github.com/volcano-sh/volcano/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.12.0-alpha.2">https://github.com/volcano-sh/volcano/releases/tag/v1.12.0-alpha.2</a></li>
<li><a href="https://github.com/volcano-sh/volcano/releases/tag/v1.9.1">https://github.com/volcano-sh/volcano/releases/tag/v1.9.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3656">https://pkg.go.dev/vuln/GO-2025-3656</a></li>
<li><a href="https://github.com/advisories/GHSA-hg79-fw4p-25p8">https://github.com/advisories/GHSA-hg79-fw4p-25p8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg79-fw4p-25p8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:40:03.000Z</published>
    </entry>
</feed>