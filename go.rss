<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-03-21T04:01:31.371Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/mudler/LocalAI] LocalAI Cross-Site Scripting (XSS) vulnerability in its search functionality]]></title>
        <id>https://github.com/advisories/GHSA-w6hh-w36c-vxmw</id>
        <link href="https://github.com/advisories/GHSA-w6hh-w36c-vxmw"/>
        <updated>2025-03-21T03:39:11.000Z</updated>
        <content type="html"><![CDATA[<p>mudler/localai version v2.21.1 contains a Cross-Site Scripting (XSS) vulnerability in its search functionality. The vulnerability arises due to improper sanitization of user input, allowing the injection and execution of arbitrary JavaScript code. This can lead to the execution of malicious scripts in the context of the victim's browser, potentially compromising user sessions, stealing session cookies, redirecting users to malicious websites, or manipulating the DOM.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9900">https://nvd.nist.gov/vuln/detail/CVE-2024-9900</a></li>
<li><a href="https://github.com/mudler/localai/commit/a1634b219a4e52813e70ff07e6376a01449c4515">https://github.com/mudler/localai/commit/a1634b219a4e52813e70ff07e6376a01449c4515</a></li>
<li><a href="https://huntr.com/bounties/b39cd230-db66-471b-89b9-24afaa078e68">https://huntr.com/bounties/b39cd230-db66-471b-89b9-24afaa078e68</a></li>
<li><a href="https://github.com/advisories/GHSA-w6hh-w36c-vxmw">https://github.com/advisories/GHSA-w6hh-w36c-vxmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w6hh-w36c-vxmw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T12:32:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redis/go-redis/v9] go-redis allows potential out of order responses when `CLIENT SETINFO` times out during connection establishment]]></title>
        <id>https://github.com/advisories/GHSA-92cp-5422-2mw7</id>
        <link href="https://github.com/advisories/GHSA-92cp-5422-2mw7"/>
        <updated>2025-03-20T18:50:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The issue only occurs when the <code>CLIENT SETINFO</code> command times out during connection establishment. The following circumstances can cause such a timeout:</p>
<ol>
<li>The client is configured to transmit its identity. This can be disabled via the <code>DisableIndentity</code> flag.</li>
<li>There are network connectivity issues</li>
<li>The client was configured with aggressive timeouts</li>
</ol>
<p>The impact differs by use case:</p>
<ul>
<li><strong>Sticky connections</strong>: Rather than using a connection from the pool on-demand, the caller can stick with a connection. Then you receive persistent out-of-order responses for the lifetime of the connection.</li>
<li><strong>Pipelines</strong>: All commands in the pipeline receive incorrect responses.</li>
<li><strong>Default connection pool usage without pipelining</strong>: When used with the default <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L77">ConnPool</a> once a connection is returned after use with <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L366">ConnPool#Put</a> the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>We prepared a fix in <a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a> and plan to release patch versions soon.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can prevent the vulnerability by setting the flag <code>DisableIndentity</code> (BTW: We also need to fix the spelling.) to <code>true</code> when constructing the client instance.</p>
<h3 id="credit">Credit</h3>
<p>Akhass Wasti
Ramin Ghorashi
Anton Amlinger
Syed Rahman
Mahesh Venkateswaran
Sergey Zavoloka
Aditya Adarwal
Abdulla Anam
Abd-Alhameed
Alex Vanlint
Gaurav Choudhary
Vedanta Jha
Yll Kelani
Ryan Picard</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7">https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29923">https://nvd.nist.gov/vuln/detail/CVE-2025-29923</a></li>
<li><a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a></li>
<li><a href="https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6">https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6</a></li>
<li><a href="https://github.com/advisories/GHSA-92cp-5422-2mw7">https://github.com/advisories/GHSA-92cp-5422-2mw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92cp-5422-2mw7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redis/go-redis/v9] go-redis allows potential out of order responses when `CLIENT SETINFO` times out during connection establishment]]></title>
        <id>https://github.com/advisories/GHSA-92cp-5422-2mw7</id>
        <link href="https://github.com/advisories/GHSA-92cp-5422-2mw7"/>
        <updated>2025-03-20T18:50:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The issue only occurs when the <code>CLIENT SETINFO</code> command times out during connection establishment. The following circumstances can cause such a timeout:</p>
<ol>
<li>The client is configured to transmit its identity. This can be disabled via the <code>DisableIndentity</code> flag.</li>
<li>There are network connectivity issues</li>
<li>The client was configured with aggressive timeouts</li>
</ol>
<p>The impact differs by use case:</p>
<ul>
<li><strong>Sticky connections</strong>: Rather than using a connection from the pool on-demand, the caller can stick with a connection. Then you receive persistent out-of-order responses for the lifetime of the connection.</li>
<li><strong>Pipelines</strong>: All commands in the pipeline receive incorrect responses.</li>
<li><strong>Default connection pool usage without pipelining</strong>: When used with the default <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L77">ConnPool</a> once a connection is returned after use with <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L366">ConnPool#Put</a> the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>We prepared a fix in <a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a> and plan to release patch versions soon.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can prevent the vulnerability by setting the flag <code>DisableIndentity</code> (BTW: We also need to fix the spelling.) to <code>true</code> when constructing the client instance.</p>
<h3 id="credit">Credit</h3>
<p>Akhass Wasti
Ramin Ghorashi
Anton Amlinger
Syed Rahman
Mahesh Venkateswaran
Sergey Zavoloka
Aditya Adarwal
Abdulla Anam
Abd-Alhameed
Alex Vanlint
Gaurav Choudhary
Vedanta Jha
Yll Kelani
Ryan Picard</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7">https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29923">https://nvd.nist.gov/vuln/detail/CVE-2025-29923</a></li>
<li><a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a></li>
<li><a href="https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6">https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6</a></li>
<li><a href="https://github.com/advisories/GHSA-92cp-5422-2mw7">https://github.com/advisories/GHSA-92cp-5422-2mw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92cp-5422-2mw7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redis/go-redis/v9] go-redis allows potential out of order responses when `CLIENT SETINFO` times out during connection establishment]]></title>
        <id>https://github.com/advisories/GHSA-92cp-5422-2mw7</id>
        <link href="https://github.com/advisories/GHSA-92cp-5422-2mw7"/>
        <updated>2025-03-20T18:50:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The issue only occurs when the <code>CLIENT SETINFO</code> command times out during connection establishment. The following circumstances can cause such a timeout:</p>
<ol>
<li>The client is configured to transmit its identity. This can be disabled via the <code>DisableIndentity</code> flag.</li>
<li>There are network connectivity issues</li>
<li>The client was configured with aggressive timeouts</li>
</ol>
<p>The impact differs by use case:</p>
<ul>
<li><strong>Sticky connections</strong>: Rather than using a connection from the pool on-demand, the caller can stick with a connection. Then you receive persistent out-of-order responses for the lifetime of the connection.</li>
<li><strong>Pipelines</strong>: All commands in the pipeline receive incorrect responses.</li>
<li><strong>Default connection pool usage without pipelining</strong>: When used with the default <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L77">ConnPool</a> once a connection is returned after use with <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L366">ConnPool#Put</a> the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>We prepared a fix in <a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a> and plan to release patch versions soon.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can prevent the vulnerability by setting the flag <code>DisableIndentity</code> (BTW: We also need to fix the spelling.) to <code>true</code> when constructing the client instance.</p>
<h3 id="credit">Credit</h3>
<p>Akhass Wasti
Ramin Ghorashi
Anton Amlinger
Syed Rahman
Mahesh Venkateswaran
Sergey Zavoloka
Aditya Adarwal
Abdulla Anam
Abd-Alhameed
Alex Vanlint
Gaurav Choudhary
Vedanta Jha
Yll Kelani
Ryan Picard</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7">https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29923">https://nvd.nist.gov/vuln/detail/CVE-2025-29923</a></li>
<li><a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a></li>
<li><a href="https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6">https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6</a></li>
<li><a href="https://github.com/advisories/GHSA-92cp-5422-2mw7">https://github.com/advisories/GHSA-92cp-5422-2mw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92cp-5422-2mw7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kcp-dev/kcp] kcp allows unauthorized creation and deletion of objects in arbitrary workspaces through APIExport Virtual Workspace]]></title>
        <id>https://github.com/advisories/GHSA-w2rr-38wv-8rrp</id>
        <link href="https://github.com/advisories/GHSA-w2rr-38wv-8rrp"/>
        <updated>2025-03-20T18:49:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>APIExport</code> Virtual Workspace can be used to manage objects in workspaces that bind that <code>APIExport</code> for resources defined in the <code>APIExport</code> or specified and accepted via permission claims. This allows an API provider (via their <code>APIExport</code>) scoped down access to workspaces of API consumers to provide their services properly.</p>
<p>The identified vulnerability allows creating or deleting an object via the <code>APIExport</code> VirtualWorkspace in any arbitrary target workspace for pre-existing resources. By design, this should only be allowed when the workspace owner decides to give access to an API provider by creating an APIBinding.</p>
<p>With this vulnerability, it is possible for an attacker to create and delete objects even if none of these requirements are satisfied, i.e. even if there is no APIBinding in that workspace at all or the workspace owner has created an APIBinding, but rejected a permission claim.</p>
<h3 id="patches">Patches</h3>
<p>A fix for this issue has been identified and has been published with kcp 0.26.3 and 0.27.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users unable to upgrade to one of the patched versions, the following guidance can be given:</p>
<ul>
<li>Minimise the set of people with <code>apiexport/content</code> sub-resource access to <code>APIExport</code> resources. Be aware that this has to apply to all workspaces to be effective.</li>
<li>Filter incoming requests in a reverse proxy with a similar logic as the authorizer added in the referenced pull request.</li>
</ul>
<h3 id="references">References</h3>
<p>See pull request (<a href="https://github.com/kcp-dev/kcp/pull/3338">https://github.com/kcp-dev/kcp/pull/3338</a>).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kcp-dev/kcp/security/advisories/GHSA-w2rr-38wv-8rrp">https://github.com/kcp-dev/kcp/security/advisories/GHSA-w2rr-38wv-8rrp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29922">https://nvd.nist.gov/vuln/detail/CVE-2025-29922</a></li>
<li><a href="https://github.com/kcp-dev/kcp/pull/3338">https://github.com/kcp-dev/kcp/pull/3338</a></li>
<li><a href="https://github.com/kcp-dev/kcp/commit/614ecbf35f11db00f65391ab6fbb1547ca8b5d38">https://github.com/kcp-dev/kcp/commit/614ecbf35f11db00f65391ab6fbb1547ca8b5d38</a></li>
<li><a href="https://github.com/advisories/GHSA-w2rr-38wv-8rrp">https://github.com/advisories/GHSA-w2rr-38wv-8rrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w2rr-38wv-8rrp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-20T18:49:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/corazawaf/coraza/v3] OWASP Coraza WAF has parser confusion which leads to wrong URI in `REQUEST_FILENAME`]]></title>
        <id>https://github.com/advisories/GHSA-q9f5-625g-xm39</id>
        <link href="https://github.com/advisories/GHSA-q9f5-625g-xm39"/>
        <updated>2025-03-20T18:48:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>URLs starting with <code>//</code> are not parsed properly, and the request <code>REQUEST_FILENAME</code> variable contains a wrong value, leading to potential rules bypass.</p>
<h3 id="details">Details</h3>
<p>If a request is made on an URI starting with <code>//</code>, coraza will set a wrong value in <code>REQUEST_FILENAME</code>.
For example, if the URI <code>//bar/uploads/foo.php?a=b</code> is passed to coraza: , <code>REQUEST_FILENAME</code> will be set to <code>/uploads/foo.php</code>.</p>
<p>The root cause is the usage of <code>url.Parse</code> to parse the URI in <a href="https://github.com/corazawaf/coraza/blob/8b612f4e6e18c606e371110227bc7669dc714cab/internal/corazawaf/transaction.go#L768">ProcessURI</a>.</p>
<p><code>url.Parse</code> can parse both absolute URLs (starting with a scheme) or relative ones (just the path). 
<code>//bar/uploads/foo.php</code> is a valid absolute URI (the scheme is empty), <code>url.Parse</code> will consider <code>bar</code> as the host and the path will be set to <code>/uploads/foo.php</code>.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-go">package main

import (
    "fmt"
    "net/url"
    "os"

    "github.com/corazawaf/coraza/v3"
)

const testRule = `
SecDebugLogLevel 9
SecDebugLog /dev/stdout
SecRule REQUEST_FILENAME "@rx /bar/uploads/.*\.(h?ph(p|tm?l?|ar)|module|shtml)" "id:1,phase:1,deny"
`

func main() {
    var testURL = "//bar/uploads/foo.php"

    if os.Getenv("TEST_URL") != "" {
        testURL = os.Getenv("TEST_URL")
    }

    fmt.Printf("Testing URL: %s\n", testURL)

    config := coraza.NewWAFConfig().WithDirectives(testRule)

    waf, err := coraza.NewWAF(config)

    if err != nil {
        panic(err)
    }

    tx := waf.NewTransaction()

    tx.ProcessURI(testURL, "GET", "HTTP/1.1")

    in := tx.ProcessRequestHeaders()

    if in != nil {
        fmt.Printf("%+v\n", in)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Potential bypass of rules using <code>REQUEST_FILENAME</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39">https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29914">https://nvd.nist.gov/vuln/detail/CVE-2025-29914</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d">https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d</a></li>
<li><a href="https://github.com/advisories/GHSA-q9f5-625g-xm39">https://github.com/advisories/GHSA-q9f5-625g-xm39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9f5-625g-xm39</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T18:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jptosso/coraza-waf] OWASP Coraza WAF has parser confusion which leads to wrong URI in `REQUEST_FILENAME`]]></title>
        <id>https://github.com/advisories/GHSA-q9f5-625g-xm39</id>
        <link href="https://github.com/advisories/GHSA-q9f5-625g-xm39"/>
        <updated>2025-03-20T18:48:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>URLs starting with <code>//</code> are not parsed properly, and the request <code>REQUEST_FILENAME</code> variable contains a wrong value, leading to potential rules bypass.</p>
<h3 id="details">Details</h3>
<p>If a request is made on an URI starting with <code>//</code>, coraza will set a wrong value in <code>REQUEST_FILENAME</code>.
For example, if the URI <code>//bar/uploads/foo.php?a=b</code> is passed to coraza: , <code>REQUEST_FILENAME</code> will be set to <code>/uploads/foo.php</code>.</p>
<p>The root cause is the usage of <code>url.Parse</code> to parse the URI in <a href="https://github.com/corazawaf/coraza/blob/8b612f4e6e18c606e371110227bc7669dc714cab/internal/corazawaf/transaction.go#L768">ProcessURI</a>.</p>
<p><code>url.Parse</code> can parse both absolute URLs (starting with a scheme) or relative ones (just the path). 
<code>//bar/uploads/foo.php</code> is a valid absolute URI (the scheme is empty), <code>url.Parse</code> will consider <code>bar</code> as the host and the path will be set to <code>/uploads/foo.php</code>.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-go">package main

import (
    "fmt"
    "net/url"
    "os"

    "github.com/corazawaf/coraza/v3"
)

const testRule = `
SecDebugLogLevel 9
SecDebugLog /dev/stdout
SecRule REQUEST_FILENAME "@rx /bar/uploads/.*\.(h?ph(p|tm?l?|ar)|module|shtml)" "id:1,phase:1,deny"
`

func main() {
    var testURL = "//bar/uploads/foo.php"

    if os.Getenv("TEST_URL") != "" {
        testURL = os.Getenv("TEST_URL")
    }

    fmt.Printf("Testing URL: %s\n", testURL)

    config := coraza.NewWAFConfig().WithDirectives(testRule)

    waf, err := coraza.NewWAF(config)

    if err != nil {
        panic(err)
    }

    tx := waf.NewTransaction()

    tx.ProcessURI(testURL, "GET", "HTTP/1.1")

    in := tx.ProcessRequestHeaders()

    if in != nil {
        fmt.Printf("%+v\n", in)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Potential bypass of rules using <code>REQUEST_FILENAME</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39">https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29914">https://nvd.nist.gov/vuln/detail/CVE-2025-29914</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d">https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d</a></li>
<li><a href="https://github.com/advisories/GHSA-q9f5-625g-xm39">https://github.com/advisories/GHSA-q9f5-625g-xm39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9f5-625g-xm39</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T18:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/console] OpenShift Console Has a Path Traversal Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-69x5-hjg4-m267</id>
        <link href="https://github.com/advisories/GHSA-69x5-hjg4-m267"/>
        <updated>2025-03-20T18:10:13.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the OpenShift Console, an endpoint for plugins to serve resources in multiple languages: /locales/resources.json. This endpoint's lng and ns parameters are used to construct a filepath in pkg/plugins/handlers unsafely.go#L112 Because of this unsafe filepath construction, an authenticated user can manipulate the path to retrieve any JSON files on the console's pod by using sequences of ../ and valid directory paths.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7631">https://nvd.nist.gov/vuln/detail/CVE-2024-7631</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-7631">https://access.redhat.com/security/cve/CVE-2024-7631</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2296053">https://bugzilla.redhat.com/show_bug.cgi?id=2296053</a></li>
<li><a href="https://github.com/advisories/GHSA-69x5-hjg4-m267">https://github.com/advisories/GHSA-69x5-hjg4-m267</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69x5-hjg4-m267</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T21:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/hive] OpenShift Hive Has an Uncontrolled Resource Consumption Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c392-wrgw-jjfw</id>
        <link href="https://github.com/advisories/GHSA-c392-wrgw-jjfw"/>
        <updated>2025-03-20T13:18:18.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the Hive hibernation controller component of OpenShift Dedicated. The ClusterDeployment.hive.openshift.io/v1 resource can be created with the spec.installed field set to true, regardless of the installation status, and a positive timespan for the spec.hibernateAfter value. If a ClusterSync.hiveinternal.openshift.io/v1alpha1 resource is also created, the hive hibernation controller will enter the reconciliation loop leading to a panic when accessing a non-existing field in the ClusterDeployment’s status section, resulting in a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25132">https://nvd.nist.gov/vuln/detail/CVE-2024-25132</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-25132">https://access.redhat.com/security/cve/CVE-2024-25132</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2260371">https://bugzilla.redhat.com/show_bug.cgi?id=2260371</a></li>
<li><a href="https://github.com/advisories/GHSA-c392-wrgw-jjfw">https://github.com/advisories/GHSA-c392-wrgw-jjfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c392-wrgw-jjfw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T18:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Mattermost Fails to Properly Perform Viewer Role Authorization]]></title>
        <id>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</id>
        <link href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x"/>
        <updated>2025-03-19T21:52:51.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost versions 9.11.x &lt;= 9.11.8 fail to properly perform authorization of the Viewer role which allows an attacker with the Viewer role configured with No Access to Reporting to still view team and site statistics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1472">https://nvd.nist.gov/vuln/detail/CVE-2025-1472</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x">https://github.com/advisories/GHSA-fqrq-xmxj-v47x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T15:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost Fails to Properly Perform Viewer Role Authorization]]></title>
        <id>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</id>
        <link href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x"/>
        <updated>2025-03-19T21:52:51.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost versions 9.11.x &lt;= 9.11.8 fail to properly perform authorization of the Viewer role which allows an attacker with the Viewer role configured with No Access to Reporting to still view team and site statistics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1472">https://nvd.nist.gov/vuln/detail/CVE-2025-1472</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x">https://github.com/advisories/GHSA-fqrq-xmxj-v47x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T15:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/getkin/kin-openapi/openapi3filter] Improper Handling of Highly Compressed Data (Data Amplification) in github.com/getkin/kin-openapi/openapi3filter]]></title>
        <id>https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</id>
        <link href="https://github.com/advisories/GHSA-wq9g-9vfc-cfq9"/>
        <updated>2025-03-20T19:00:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When validating a request with a multipart/form-data schema, if the OpenAPI schema allows it, an attacker can upload a crafted ZIP file (e.g., a ZIP bomb), causing the server to consume all available system memory.</p>
<h3 id="details">Details</h3>
<p>The root cause comes from the <a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523">ZipFileBodyDecoder</a>, which is registered <a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275">automatically</a> by the module (contrary to what the <a href="https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse">documentation says</a>.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following OpenAPI schema:</p>
<pre><code class="language-yaml">openapi: 3.0.0
info:
  title: 'Validator'
  version: 0.0.1
paths:
  /:
    post:
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Created
</code></pre>
<p>And this code to validate the request (nothing fancy, it basically only calls the <code>openapi3filter.ValidateRequest</code> function`):</p>
<pre><code class="language-go">package main

import (
    "fmt"
    "log"
    "net/http"

    "github.com/getkin/kin-openapi/openapi3filter"
    legacyrouter "github.com/getkin/kin-openapi/routers/legacy"

    "github.com/getkin/kin-openapi/openapi3"
)

func handler(w http.ResponseWriter, r *http.Request) {
    loader := openapi3.NewLoader()

    doc, err := loader.LoadFromFile("schema.yaml")
    if err != nil {
        http.Error(w, "Failed to load OpenAPI document", http.StatusInternalServerError)
        return
    }

    if err := doc.Validate(r.Context()); err != nil {
        http.Error(w, "Invalid OpenAPI document", http.StatusBadRequest)
        return
    }

    router, err := legacyrouter.NewRouter(doc)
    if err != nil {
        http.Error(w, "Failed to create router", http.StatusInternalServerError)
        return
    }

    route, pathParams, err := router.FindRoute(r)
    if err != nil {
        http.Error(w, "Failed to find route", http.StatusNotFound)
        return
    }

    input := &amp;openapi3filter.RequestValidationInput{
        Request:     r,
        QueryParams: r.URL.Query(),
        Route:       route,
        PathParams:  pathParams,
    }

    if err := openapi3filter.ValidateRequest(r.Context(), input); err != nil {
        http.Error(w, fmt.Sprintf("Request validation failed: %v", err), http.StatusBadRequest)
        return
    }

    w.Write([]byte("request ok !"))
}

func main() {
    http.HandleFunc("/", handler)
    log.Fatal(http.ListenAndServe(":8080", nil))

}
</code></pre>
<p>We also need to create a zip bomb. This command will create a 4.7GB file and compress it to to 4.7MB zip archive:</p>
<pre><code class="language-shell">perl -e 'print "0" x 5000000000' &gt; /tmp/bigfile.txt; zip -9 /tmp/bomb.zip /tmp/bigfile.txt
</code></pre>
<p>Run the PoC provided, and upload the zip bomb with <code>curl localhost:8080/  -F file="@/tmp/bomb.zip;type=application/zip" -v</code>.</p>
<p>Observe the memory consumption of the test server during and after the upload (it jumped to a bit over 22GB in my testing, with only a 4.7MB input file, you can reduce the size of the generated file to not kill your test machine when reproducing.) </p>
<h3 id="impact">Impact</h3>
<p>An attacker can trigger an out-of-memory (OOM) condition, leading to server crashes or degraded performance.
It seems to only be exploitable if the OpenAPI schema allows for multipart upload.</p>
<h3 id="remediation">Remediation</h3>
<p>I see at least 2 potential fixes/improvements:</p>
<ul>
<li>Do not register by default the zip file decoder (I honestly was a bit surprised to see it was enabled by default, it seems to be quite a niche use-case ?)</li>
<li>Update <code>ZipFileBodyDecoder</code> to enforce a maximum size of the decompressed archive and bailout as soon as it's reached (probably with a small default value and allow the users to configure it through the input options ?)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9">https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9</a></li>
<li><a href="https://github.com/getkin/kin-openapi/pull/1059">https://github.com/getkin/kin-openapi/pull/1059</a></li>
<li><a href="https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1">https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1</a></li>
<li><a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275">https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275</a></li>
<li><a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523">https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523</a></li>
<li><a href="https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse">https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30153">https://nvd.nist.gov/vuln/detail/CVE-2025-30153</a></li>
<li><a href="https://github.com/advisories/GHSA-wq9g-9vfc-cfq9">https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-19T18:12:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/hive] Openshift Hive Exposes VCenter Credentials via ClusterProvision]]></title>
        <id>https://github.com/advisories/GHSA-c339-mwfc-fmr2</id>
        <link href="https://github.com/advisories/GHSA-c339-mwfc-fmr2"/>
        <updated>2025-03-17T21:27:58.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Hive, a component of Multicluster Engine (MCE) and Advanced Cluster Management (ACM). This vulnerability causes VCenter credentials to be exposed in the ClusterProvision object after provisioning a VSphere cluster. Users with read access to ClusterProvision objects can extract sensitive credentials even if they do not have direct access to Kubernetes Secrets. This issue can lead to unauthorized VCenter access, cluster management, and privilege escalation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2241">https://nvd.nist.gov/vuln/detail/CVE-2025-2241</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-2241">https://access.redhat.com/security/cve/CVE-2025-2241</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2351350">https://bugzilla.redhat.com/show_bug.cgi?id=2351350</a></li>
<li><a href="https://github.com/advisories/GHSA-c339-mwfc-fmr2">https://github.com/advisories/GHSA-c339-mwfc-fmr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c339-mwfc-fmr2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-17T18:31:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/buildx] buildx allows a possible credential leakage to telemetry endpoint]]></title>
        <id>https://github.com/advisories/GHSA-m4gq-fm9h-8q75</id>
        <link href="https://github.com/advisories/GHSA-m4gq-fm9h-8q75"/>
        <updated>2025-03-17T21:51:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Some cache backends allow configuring their credentials by setting secrets directly as attribute values in <code>cache-to/cache-from</code> configuration. If this was done by the user, these secure values could be captured together with OpenTelemetry trace as part of the arguments and flags for the traced CLI command. Passing tokens to Github cache backend via environment variables or using registry authentication is not affected.</p>
<p>If you passed a token value like this and use a custom OpenTelemetry collector for computing traces you should make sure that your traces are kept secure. OpenTelemetry traces are also saved in BuildKit daemon's history records.</p>
<h3 id="patches">Patches</h3>
<p>Issue has been fixed in Buildx v0.21.3 or newer.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid passing cache backend credentials with CLI arguments. Make sure access to traces and BuildKit history records is kept secure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/docker/buildx/security/advisories/GHSA-m4gq-fm9h-8q75">https://github.com/docker/buildx/security/advisories/GHSA-m4gq-fm9h-8q75</a></li>
<li><a href="https://github.com/docker/buildx/commit/18ccba072076ddbfb0aeedd6746d7719b0729b58">https://github.com/docker/buildx/commit/18ccba072076ddbfb0aeedd6746d7719b0729b58</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0495">https://nvd.nist.gov/vuln/detail/CVE-2025-0495</a></li>
<li><a href="https://github.com/docker/buildx">https://github.com/docker/buildx</a></li>
<li><a href="https://github.com/advisories/GHSA-m4gq-fm9h-8q75">https://github.com/advisories/GHSA-m4gq-fm9h-8q75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4gq-fm9h-8q75</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:27:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/expr-lang/expr] Memory Exhaustion in Expr Parser with Unrestricted Input]]></title>
        <id>https://github.com/advisories/GHSA-93mq-9ffx-83m2</id>
        <link href="https://github.com/advisories/GHSA-93mq-9ffx-83m2"/>
        <updated>2025-03-17T21:26:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the Expr expression parser is given an <strong>unbounded input string</strong>, it will attempt to compile the <em>entire</em> string and generate an Abstract Syntax Tree (AST) node for each part of the expression. In scenarios where input size isn’t limited, a malicious or inadvertent extremely large expression can consume excessive memory as the parser builds a huge AST. This can ultimately lead to <strong>excessive memory usage</strong> and an <strong>Out-Of-Memory (OOM) crash</strong> of the process. This issue is relatively uncommon and will only manifest when there are <strong>no restrictions on the input size</strong>, i.e. the expression length is allowed to grow arbitrarily large. In typical use cases where inputs are bounded or validated, this problem would not occur.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been <strong>patched</strong> in the latest versions of the Expr library. The fix introduces compile-time limits on the number of AST nodes and memory usage during parsing, preventing any single expression from exhausting resources. Users should upgrade to <strong>Expr version 1.17.0 or later</strong>, as this release includes the new node budget and memory limit safeguards. Upgrading to v1.17.0 ensures that extremely deep or large expressions are detected and safely aborted during compilation, avoiding the OOM condition.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users who cannot immediately upgrade, the recommended workaround is to <strong>impose an input size restriction before parsing</strong>. In practice, this means validating or limiting the length of expression strings that your application will accept. For example, set a maximum allowable number of characters (or nodes) for any expression and reject or truncate inputs that exceed this limit. By ensuring no unbounded-length expression is ever fed into the parser, you can prevent the parser from constructing a pathologically large AST and avoid potential memory exhaustion. In short, <strong>pre-validate and cap input size</strong> as a safeguard in the absence of the patch.</p>
<h3 id="references">References</h3>
<ul>
<li>#762</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expr-lang/expr/security/advisories/GHSA-93mq-9ffx-83m2">https://github.com/expr-lang/expr/security/advisories/GHSA-93mq-9ffx-83m2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29786">https://nvd.nist.gov/vuln/detail/CVE-2025-29786</a></li>
<li><a href="https://github.com/expr-lang/expr/pull/762">https://github.com/expr-lang/expr/pull/762</a></li>
<li><a href="https://github.com/expr-lang/expr/commit/0d19441454426d2f58edb22c31f3ba5f99c7a26e">https://github.com/expr-lang/expr/commit/0d19441454426d2f58edb22c31f3ba5f99c7a26e</a></li>
<li><a href="https://github.com/advisories/GHSA-93mq-9ffx-83m2">https://github.com/advisories/GHSA-93mq-9ffx-83m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93mq-9ffx-83m2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-17T21:26:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/metal3-io/baremetal-operator/apis] Bare Metal Operator (BMO) can expose any secret from other namespaces via BMCEventSubscription CRD]]></title>
        <id>https://github.com/advisories/GHSA-c98h-7hp9-v9hq</id>
        <link href="https://github.com/advisories/GHSA-c98h-7hp9-v9hq"/>
        <updated>2025-03-19T14:59:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. </p>
<p>Baremetal Operator enables users to load Secret from arbitrary namespaces upon deployment of the namespace scoped Custom Resource <code>BMCEventSubscription</code> (BMCES). An adversary Kubernetes account with only namespace level roles (e.g. a tenant controlling a namespace) may create a BMCES in their authorized namespace and then load Secrets from their unauthorized namespaces to their authorized namespace via the Baremetal Operator controller's cluster scoped privileges, causing Secret leakage.</p>
<h3 id="patches">Patches</h3>
<p>The patch makes BMO refuse to read Secrets from other namespace than where the corresponding Bare Metal Host (BMH) resource is. The patch does not change the <code>BMCEventSubscription</code> API in BMO, but stricter validation will deny the request at admission time. It will also prevent the controller reading such Secrets, in case the BMCES resource has already been deployed.</p>
<p>The issue exists for all versions of BMO, and is patched in BMO releases v0.9.1 and v0.8.1. Prior upgrading to patched BMO version, duplicate any existing Secret pointed to by <code>BMCEventSubscription</code>'s <code>httpHeadersRef</code> to the same namespace where the corresponding BMH exists. After upgrade, remove the old Secrets.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Operator can configure BMO RBAC to be namespace scoped, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces, and/or use <code>WATCH_NAMESPACE</code> configuration option to limit BMO to single namespace.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/19f8443b1fe182f76dd81b43122e8dd102f8b94c">patch to main</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2321">patch to release-0.9</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2322">patch to release-0.8</a></li>
<li><a href="https://github.com/metal3-io/metal3-docs/blob/main/design/baremetal-operator/bmc-events.md">BMCEventSubscription design document</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Metal3 Security Team thanks <a href="https://github.com/WHALEEYE">WHALEEYE</a> and <a href="https://github.com/debuggerchen">debuggerchen</a> of <a href="https://users.cs.northwestern.edu/~list/">Lab for Internet and Security Technology</a> for responsible vulnerability disclosure.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-c98h-7hp9-v9hq">https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-c98h-7hp9-v9hq</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2321">https://github.com/metal3-io/baremetal-operator/pull/2321</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2322">https://github.com/metal3-io/baremetal-operator/pull/2322</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/19f8443b1fe182f76dd81b43122e8dd102f8b94c">https://github.com/metal3-io/baremetal-operator/commit/19f8443b1fe182f76dd81b43122e8dd102f8b94c</a></li>
<li><a href="https://github.com/metal3-io/metal3-docs/blob/main/design/baremetal-operator/bmc-events.md">https://github.com/metal3-io/metal3-docs/blob/main/design/baremetal-operator/bmc-events.md</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29781">https://nvd.nist.gov/vuln/detail/CVE-2025-29781</a></li>
<li><a href="https://github.com/advisories/GHSA-c98h-7hp9-v9hq">https://github.com/advisories/GHSA-c98h-7hp9-v9hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c98h-7hp9-v9hq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:26:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/metal3-io/baremetal-operator/apis] Bare Metal Operator (BMO) can expose any secret from other namespaces via BMCEventSubscription CRD]]></title>
        <id>https://github.com/advisories/GHSA-c98h-7hp9-v9hq</id>
        <link href="https://github.com/advisories/GHSA-c98h-7hp9-v9hq"/>
        <updated>2025-03-19T14:59:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. </p>
<p>Baremetal Operator enables users to load Secret from arbitrary namespaces upon deployment of the namespace scoped Custom Resource <code>BMCEventSubscription</code> (BMCES). An adversary Kubernetes account with only namespace level roles (e.g. a tenant controlling a namespace) may create a BMCES in their authorized namespace and then load Secrets from their unauthorized namespaces to their authorized namespace via the Baremetal Operator controller's cluster scoped privileges, causing Secret leakage.</p>
<h3 id="patches">Patches</h3>
<p>The patch makes BMO refuse to read Secrets from other namespace than where the corresponding Bare Metal Host (BMH) resource is. The patch does not change the <code>BMCEventSubscription</code> API in BMO, but stricter validation will deny the request at admission time. It will also prevent the controller reading such Secrets, in case the BMCES resource has already been deployed.</p>
<p>The issue exists for all versions of BMO, and is patched in BMO releases v0.9.1 and v0.8.1. Prior upgrading to patched BMO version, duplicate any existing Secret pointed to by <code>BMCEventSubscription</code>'s <code>httpHeadersRef</code> to the same namespace where the corresponding BMH exists. After upgrade, remove the old Secrets.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Operator can configure BMO RBAC to be namespace scoped, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces, and/or use <code>WATCH_NAMESPACE</code> configuration option to limit BMO to single namespace.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/19f8443b1fe182f76dd81b43122e8dd102f8b94c">patch to main</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2321">patch to release-0.9</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2322">patch to release-0.8</a></li>
<li><a href="https://github.com/metal3-io/metal3-docs/blob/main/design/baremetal-operator/bmc-events.md">BMCEventSubscription design document</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Metal3 Security Team thanks <a href="https://github.com/WHALEEYE">WHALEEYE</a> and <a href="https://github.com/debuggerchen">debuggerchen</a> of <a href="https://users.cs.northwestern.edu/~list/">Lab for Internet and Security Technology</a> for responsible vulnerability disclosure.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-c98h-7hp9-v9hq">https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-c98h-7hp9-v9hq</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2321">https://github.com/metal3-io/baremetal-operator/pull/2321</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/2322">https://github.com/metal3-io/baremetal-operator/pull/2322</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/19f8443b1fe182f76dd81b43122e8dd102f8b94c">https://github.com/metal3-io/baremetal-operator/commit/19f8443b1fe182f76dd81b43122e8dd102f8b94c</a></li>
<li><a href="https://github.com/metal3-io/metal3-docs/blob/main/design/baremetal-operator/bmc-events.md">https://github.com/metal3-io/metal3-docs/blob/main/design/baremetal-operator/bmc-events.md</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29781">https://nvd.nist.gov/vuln/detail/CVE-2025-29781</a></li>
<li><a href="https://github.com/advisories/GHSA-c98h-7hp9-v9hq">https://github.com/advisories/GHSA-c98h-7hp9-v9hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c98h-7hp9-v9hq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:26:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd] containerd has an integer overflow in User ID handling]]></title>
        <id>https://github.com/advisories/GHSA-265r-hfxg-fhmg</id>
        <link href="https://github.com/advisories/GHSA-265r-hfxg-fhmg"/>
        <updated>2025-03-19T14:59:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug was found in containerd where containers launched with a User set as a <code>UID:GID</code> larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in the following containerd versions: </p>
<ul>
<li>2.0.4 (Fixed in <a href="https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20">https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20</a>)</li>
<li>1.7.27 (Fixed in <a href="https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da">https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da</a>)</li>
<li>1.6.38 (Fixed in <a href="https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a">https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a</a>)</li>
</ul>
<p>Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images.</p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank <a href="https://github.com/p4ck3t0">Benjamin Koltermann</a> and <a href="https://github.com/emxll">emxll</a> for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg">https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg</a></li>
<li><a href="https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da">https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da</a></li>
<li><a href="https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20">https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20</a></li>
<li><a href="https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a">https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40635">https://nvd.nist.gov/vuln/detail/CVE-2024-40635</a></li>
<li><a href="https://github.com/advisories/GHSA-265r-hfxg-fhmg">https://github.com/advisories/GHSA-265r-hfxg-fhmg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-265r-hfxg-fhmg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:24:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd] containerd has an integer overflow in User ID handling]]></title>
        <id>https://github.com/advisories/GHSA-265r-hfxg-fhmg</id>
        <link href="https://github.com/advisories/GHSA-265r-hfxg-fhmg"/>
        <updated>2025-03-19T14:59:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug was found in containerd where containers launched with a User set as a <code>UID:GID</code> larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in the following containerd versions: </p>
<ul>
<li>2.0.4 (Fixed in <a href="https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20">https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20</a>)</li>
<li>1.7.27 (Fixed in <a href="https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da">https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da</a>)</li>
<li>1.6.38 (Fixed in <a href="https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a">https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a</a>)</li>
</ul>
<p>Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images.</p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank <a href="https://github.com/p4ck3t0">Benjamin Koltermann</a> and <a href="https://github.com/emxll">emxll</a> for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg">https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg</a></li>
<li><a href="https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da">https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da</a></li>
<li><a href="https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20">https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20</a></li>
<li><a href="https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a">https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40635">https://nvd.nist.gov/vuln/detail/CVE-2024-40635</a></li>
<li><a href="https://github.com/advisories/GHSA-265r-hfxg-fhmg">https://github.com/advisories/GHSA-265r-hfxg-fhmg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-265r-hfxg-fhmg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:24:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd/v2] containerd has an integer overflow in User ID handling]]></title>
        <id>https://github.com/advisories/GHSA-265r-hfxg-fhmg</id>
        <link href="https://github.com/advisories/GHSA-265r-hfxg-fhmg"/>
        <updated>2025-03-19T14:59:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug was found in containerd where containers launched with a User set as a <code>UID:GID</code> larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in the following containerd versions: </p>
<ul>
<li>2.0.4 (Fixed in <a href="https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20">https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20</a>)</li>
<li>1.7.27 (Fixed in <a href="https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da">https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da</a>)</li>
<li>1.6.38 (Fixed in <a href="https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a">https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a</a>)</li>
</ul>
<p>Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images.</p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank <a href="https://github.com/p4ck3t0">Benjamin Koltermann</a> and <a href="https://github.com/emxll">emxll</a> for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg">https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg</a></li>
<li><a href="https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da">https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da</a></li>
<li><a href="https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20">https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20</a></li>
<li><a href="https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a">https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40635">https://nvd.nist.gov/vuln/detail/CVE-2024-40635</a></li>
<li><a href="https://github.com/advisories/GHSA-265r-hfxg-fhmg">https://github.com/advisories/GHSA-265r-hfxg-fhmg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-265r-hfxg-fhmg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:24:42.000Z</published>
    </entry>
</feed>