<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-04-13T00:29:31.397Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/ClickHouse/ch-go] CVE-2025-1386- Query smuggling in ch-go library]]></title>
        <id>https://github.com/advisories/GHSA-m454-3xv7-qj85</id>
        <link href="https://github.com/advisories/GHSA-m454-3xv7-qj85"/>
        <updated>2025-04-12T03:41:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using the ch-go library, under a specific condition when the query includes a large, uncompressed malicious external data, it is possible for an attacker in control of such data to smuggle another query packet into the connection stream.</p>
<h3 id="patches">Patches</h3>
<p>If you are using ch-go library, we recommend you to update to at least version 0.65.0.</p>
<h3 id="credit">Credit</h3>
<p>This issue was found by lixts and reported through our bugcrowd program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ClickHouse/ch-go/security/advisories/GHSA-m454-3xv7-qj85">https://github.com/ClickHouse/ch-go/security/advisories/GHSA-m454-3xv7-qj85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1386">https://nvd.nist.gov/vuln/detail/CVE-2025-1386</a></li>
<li><a href="https://github.com/ClickHouse/ch-go/commit/0e835663df32b09b828528c07a5507686e6d975e">https://github.com/ClickHouse/ch-go/commit/0e835663df32b09b828528c07a5507686e6d975e</a></li>
<li><a href="https://github.com/advisories/GHSA-m454-3xv7-qj85">https://github.com/advisories/GHSA-m454-3xv7-qj85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m454-3xv7-qj85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-12T03:41:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost Fails to Enforce Proper Access Controls on `/api/v4/audits` Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-xfq9-hh5x-xfq9</id>
        <link href="https://github.com/advisories/GHSA-xfq9-hh5x-xfq9"/>
        <updated>2025-04-11T14:09:51.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost versions 9.11.x &lt;= 9.11.8&nbsp; fail to enforce proper access controls on the /api/v4/audits endpoint, allowing users with delegated granular administration roles who lack access to Compliance Monitoring to retrieve User Activity Logs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24866">https://nvd.nist.gov/vuln/detail/CVE-2025-24866</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-xfq9-hh5x-xfq9">https://github.com/advisories/GHSA-xfq9-hh5x-xfq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfq9-hh5x-xfq9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-10T18:32:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helm.sh/helm/v3] Helm Allows A Specially Crafted JSON Schema To Cause A Stack Overflow]]></title>
        <id>https://github.com/advisories/GHSA-5xqw-8hwv-wg92</id>
        <link href="https://github.com/advisories/GHSA-5xqw-8hwv-wg92"/>
        <updated>2025-04-10T13:48:32.000Z</updated>
        <content type="html"><![CDATA[<p>A Helm contributor discovered that a specially crafted JSON Schema within a chart can lead to a stack overflow.</p>
<h3 id="impact">Impact</h3>
<p>A JSON Schema file within a chart can be crafted with a deeply nested chain of references, leading to parser recursion that can exceed the stack size limit and trigger a stack overflow. </p>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in Helm v3.17.3.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that the JSON Schema within any charts loaded by Helm does not have a large number of nested references. These JSON Schema files are larger than 10 MiB.</p>
<h3 id="for-more-information">For more information</h3>
<p>Helm's security policy is spelled out in detail in our <a href="https://github.com/helm/community/blob/master/SECURITY.md">SECURITY</a> document.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Jakub Ciolek at AlphaSense.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-5xqw-8hwv-wg92">https://github.com/helm/helm/security/advisories/GHSA-5xqw-8hwv-wg92</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32387">https://nvd.nist.gov/vuln/detail/CVE-2025-32387</a></li>
<li><a href="https://github.com/helm/helm/commit/d8ca55fc669645c10c0681d49723f4bb8c0b1ce7">https://github.com/helm/helm/commit/d8ca55fc669645c10c0681d49723f4bb8c0b1ce7</a></li>
<li><a href="https://github.com/advisories/GHSA-5xqw-8hwv-wg92">https://github.com/advisories/GHSA-5xqw-8hwv-wg92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5xqw-8hwv-wg92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-10T13:48:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helm.sh/helm/v3] Helm Allows A Specially Crafted Chart Archive To Cause Out Of Memory Termination]]></title>
        <id>https://github.com/advisories/GHSA-4hfp-h4cw-hj8p</id>
        <link href="https://github.com/advisories/GHSA-4hfp-h4cw-hj8p"/>
        <updated>2025-04-10T13:48:06.000Z</updated>
        <content type="html"><![CDATA[<p>A Helm contributor discovered that a specially crafted chart archive file can cause Helm to use all available memory and have an out of memory (OOM) termination.</p>
<h3 id="impact">Impact</h3>
<p>A chart archive file can be crafted in a manner where it expands to be significantly larger uncompressed than compressed (e.g., &gt;800x difference). When Helm loads this specially crafted chart, memory can be exhausted causing the application to terminate.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in Helm v3.17.3.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that any chart archive files being loaded by Helm do not contain files that are large enough to cause the Helm Client or SDK to use up available memory leading to a termination.</p>
<h3 id="for-more-information">For more information</h3>
<p>Helm's security policy is spelled out in detail in our <a href="https://github.com/helm/community/blob/master/SECURITY.md">SECURITY</a> document.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Jakub Ciolek at AlphaSense.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-4hfp-h4cw-hj8p">https://github.com/helm/helm/security/advisories/GHSA-4hfp-h4cw-hj8p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32386">https://nvd.nist.gov/vuln/detail/CVE-2025-32386</a></li>
<li><a href="https://github.com/helm/helm/commit/d8ca55fc669645c10c0681d49723f4bb8c0b1ce7">https://github.com/helm/helm/commit/d8ca55fc669645c10c0681d49723f4bb8c0b1ce7</a></li>
<li><a href="https://github.com/advisories/GHSA-4hfp-h4cw-hj8p">https://github.com/advisories/GHSA-4hfp-h4cw-hj8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4hfp-h4cw-hj8p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-10T13:48:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/golang-jwt/jwt] jwt-go allows excessive memory allocation during header parsing]]></title>
        <id>https://github.com/advisories/GHSA-mh63-6h87-95cp</id>
        <link href="https://github.com/advisories/GHSA-mh63-6h87-95cp"/>
        <updated>2025-04-10T13:02:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Function <a href="https://github.com/golang-jwt/jwt/blob/c035977d9e11c351f4c05dfeae193923cbab49ee/parser.go#L138-L139"><code>parse.ParseUnverified</code></a> currently splits (via a call to <a href="https://pkg.go.dev/strings#Split">strings.Split</a>) its argument (which is untrusted data) on periods.</p>
<p>As a result, in the face of a malicious request whose <em>Authorization</em> header consists of <code>Bearer </code> followed by many period characters, a call to that function incurs allocations to the tune of O(n) bytes (where n stands for the length of the function's argument), with a constant factor of about 16. Relevant weakness: <a href="https://cwe.mitre.org/data/definitions/405.html">CWE-405: Asymmetric Resource Consumption (Amplification)</a></p>
<h3 id="details">Details</h3>
<p>See <a href="https://github.com/golang-jwt/jwt/blob/c035977d9e11c351f4c05dfeae193923cbab49ee/parser.go#L138-L139"><code>parse.ParseUnverified</code></a> </p>
<h3 id="impact">Impact</h3>
<p>Excessive memory allocation</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang-jwt/jwt/security/advisories/GHSA-mh63-6h87-95cp">https://github.com/golang-jwt/jwt/security/advisories/GHSA-mh63-6h87-95cp</a></li>
<li><a href="https://github.com/golang-jwt/jwt/commit/0951d184286dece21f73c85673fd308786ffe9c3">https://github.com/golang-jwt/jwt/commit/0951d184286dece21f73c85673fd308786ffe9c3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30204">https://nvd.nist.gov/vuln/detail/CVE-2025-30204</a></li>
<li><a href="https://github.com/golang-jwt/jwt/commit/bf316c48137a1212f8d0af9288cc9ce8e59f1afb">https://github.com/golang-jwt/jwt/commit/bf316c48137a1212f8d0af9288cc9ce8e59f1afb</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20250404-0002">https://security.netapp.com/advisory/ntap-20250404-0002</a></li>
<li><a href="https://github.com/advisories/GHSA-mh63-6h87-95cp">https://github.com/advisories/GHSA-mh63-6h87-95cp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh63-6h87-95cp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-21T22:04:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/bep/imagemeta] bep/imagemeta allows a potentially large memory allocation in PNG and WebP parsing]]></title>
        <id>https://github.com/advisories/GHSA-fmhh-rw3h-785m</id>
        <link href="https://github.com/advisories/GHSA-fmhh-rw3h-785m"/>
        <updated>2025-04-09T12:57:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The buffer created for parsing metadata for PNG and WebP images was only bounded by their input data type, which could lead to potentially large memory allocation, and unreasonably high for image metadata. Before <code>v0.11.0</code>, If you didn't trust the input images, this could be abused to construct denial-of-service attacks.</p>
<h3 id="patches">Patches</h3>
<p><code>v0.11.0</code> added a 10 MB upper limit.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bep/imagemeta/security/advisories/GHSA-fmhh-rw3h-785m">https://github.com/bep/imagemeta/security/advisories/GHSA-fmhh-rw3h-785m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32025">https://nvd.nist.gov/vuln/detail/CVE-2025-32025</a></li>
<li><a href="https://github.com/bep/imagemeta/commit/ee0de9b029f4e82106729f69559f27c9a404229d">https://github.com/bep/imagemeta/commit/ee0de9b029f4e82106729f69559f27c9a404229d</a></li>
<li><a href="https://github.com/advisories/GHSA-fmhh-rw3h-785m">https://github.com/advisories/GHSA-fmhh-rw3h-785m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fmhh-rw3h-785m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-09T12:57:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/bep/imagemeta] bep/imagemeta allows excessively large EXIF data structures]]></title>
        <id>https://github.com/advisories/GHSA-q7rw-w4cq-2j6w</id>
        <link href="https://github.com/advisories/GHSA-q7rw-w4cq-2j6w"/>
        <updated>2025-04-09T12:57:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The EXIF data format allows for defining excessively large data structures in relatively small payloads. Before <code>v0.10.0</code>, If you didn't trust the input images, this could be abused to construct denial-of-service attacks.</p>
<h3 id="patches">Patches</h3>
<p><code>v0.10.0</code> added LimitNumTags (default 5000) and LimitTagSize (default 10000) options.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bep/imagemeta/security/advisories/GHSA-q7rw-w4cq-2j6w">https://github.com/bep/imagemeta/security/advisories/GHSA-q7rw-w4cq-2j6w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32024">https://nvd.nist.gov/vuln/detail/CVE-2025-32024</a></li>
<li><a href="https://github.com/bep/imagemeta/commit/4fd89616d8bf7f9bb892360d3fb19080ec2b4602">https://github.com/bep/imagemeta/commit/4fd89616d8bf7f9bb892360d3fb19080ec2b4602</a></li>
<li><a href="https://github.com/advisories/GHSA-q7rw-w4cq-2j6w">https://github.com/advisories/GHSA-q7rw-w4cq-2j6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7rw-w4cq-2j6w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-09T12:57:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/moby/moby] Moby Race Condition vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gh5c-3h97-2f3q</id>
        <link href="https://github.com/advisories/GHSA-gh5c-3h97-2f3q"/>
        <updated>2025-04-04T15:19:52.000Z</updated>
        <content type="html"><![CDATA[<p>moby v25.0.3 has a Race Condition vulnerability in the streamformatter package which can be used to trigger multiple concurrent write operations resulting in data corruption or application crashes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36623">https://nvd.nist.gov/vuln/detail/CVE-2024-36623</a></li>
<li><a href="https://github.com/moby/moby/commit/5689dabfb357b673abdb4391eef426f297d7d1bb">https://github.com/moby/moby/commit/5689dabfb357b673abdb4391eef426f297d7d1bb</a></li>
<li><a href="https://gist.github.com/1047524396/c192c0159a19bf58a4373b696467dc29">https://gist.github.com/1047524396/c192c0159a19bf58a4373b696467dc29</a></li>
<li><a href="https://github.com/moby/moby/blob/v25.0.3/pkg/streamformatter/streamformatter.go#L115">https://github.com/moby/moby/blob/v25.0.3/pkg/streamformatter/streamformatter.go#L115</a></li>
<li><a href="https://github.com/moby/moby/commit/8e3bcf19748838b30e34d612832d1dc9d90363b8">https://github.com/moby/moby/commit/8e3bcf19748838b30e34d612832d1dc9d90363b8</a></li>
<li><a href="https://github.com/advisories/GHSA-gh5c-3h97-2f3q">https://github.com/advisories/GHSA-gh5c-3h97-2f3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh5c-3h97-2f3q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-29T18:34:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/minio/minio] MinIO performs incomplete signature validation for unsigned-trailer uploads]]></title>
        <id>https://github.com/advisories/GHSA-wg47-6jq2-q2hh</id>
        <link href="https://github.com/advisories/GHSA-wg47-6jq2-q2hh"/>
        <updated>2025-04-04T14:28:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a high priority vulnerability and users must upgrade ASAP.</p>
<p>The signature component of the authorization may be invalid, which would mean that as a client you can use any arbitrary secret to upload objects given the user already has prior WRITE permissions on the bucket,</p>
<p>Prior knowledge of access-key, and bucket name this user might have access to - and an access-key with a WRITE permissions is necessary.</p>
<p>However with relevant information in place, uploading random objects to buckets is trivial and easy via <code>curl</code></p>
<h3 id="patches">Patches</h3>
<p>Yes <a href="https://github.com/minio/minio/pull/21103">https://github.com/minio/minio/pull/21103</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject requests with <code>x-amz-content-sha256: STREAMING-UNSIGNED-PAYLOAD-TRAILER</code> for now at LB layer, ask application users to use <code>STREAMING-AWS4-HMAC-SHA256-PAYLOAD-TRAILER</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/minio/minio/security/advisories/GHSA-wg47-6jq2-q2hh">https://github.com/minio/minio/security/advisories/GHSA-wg47-6jq2-q2hh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31489">https://nvd.nist.gov/vuln/detail/CVE-2025-31489</a></li>
<li><a href="https://github.com/minio/minio/pull/21103">https://github.com/minio/minio/pull/21103</a></li>
<li><a href="https://github.com/minio/minio/commit/8c70975283f9f4ce80f331a25c7475a36279e519">https://github.com/minio/minio/commit/8c70975283f9f4ce80f331a25c7475a36279e519</a></li>
<li><a href="https://github.com/advisories/GHSA-wg47-6jq2-q2hh">https://github.com/advisories/GHSA-wg47-6jq2-q2hh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wg47-6jq2-q2hh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:28:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniflux.app/v2] Miniflux Media Proxy vulnerable to Stored Cross-site Scripting due to improper Content-Security-Policy configuration]]></title>
        <id>https://github.com/advisories/GHSA-cq88-842x-2jhp</id>
        <link href="https://github.com/advisories/GHSA-cq88-842x-2jhp"/>
        <updated>2025-04-07T19:52:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Due to a weak Content Security Policy on the <code>/proxy/*</code> route, an attacker can bypass the CSP of the media proxy and execute cross-site scripting when opening external images in a new tab/window.</p>
<h2 id="impact">Impact</h2>
<p>A malicious feed added to Miniflux can execute arbitrary JavaScript in the user's browser when opening external resources, such as proxified images, in a new tab or window.</p>
<h2 id="mitigation">Mitigation</h2>
<p>The CSP for the media proxy has been changed from <code>default-src 'self'</code> to <code>default-src 'none'; form-action 'none'; sandbox;</code>.</p>
<p>Upgrade to Miniflux &gt;= 2.2.7</p>
<h2 id="credit">Credit</h2>
<p><a href="https://ryotak.net">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/miniflux/v2/security/advisories/GHSA-cq88-842x-2jhp">https://github.com/miniflux/v2/security/advisories/GHSA-cq88-842x-2jhp</a></li>
<li><a href="https://github.com/miniflux/v2/commit/cb695e653a08af4cabcb277c271ce74bd0c746e6">https://github.com/miniflux/v2/commit/cb695e653a08af4cabcb277c271ce74bd0c746e6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31483">https://nvd.nist.gov/vuln/detail/CVE-2025-31483</a></li>
<li><a href="https://github.com/advisories/GHSA-cq88-842x-2jhp">https://github.com/advisories/GHSA-cq88-842x-2jhp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cq88-842x-2jhp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T14:09:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniflux.app/v2] Stored XSS in Miniflux when opening a broken image due to unescaped ServerError in proxy handler]]></title>
        <id>https://github.com/advisories/GHSA-mqqg-xjhj-wfgw</id>
        <link href="https://github.com/advisories/GHSA-mqqg-xjhj-wfgw"/>
        <updated>2025-04-02T17:25:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Since <a href="https://github.com/miniflux/v2/releases/tag/2.0.25">v2.0.25</a>, Miniflux will automatically <a href="https://miniflux.app/docs/configuration.html#proxy-images">proxy</a> images served over HTTP to prevent mixed content errors.</p>
<p>When an outbound request made by the Go HTTP client fails, the <code>html.ServerError</code> is <a href="https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L76">returned</a> unescaped without the expected Content Security Policy <a href="https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L90">header</a> added to valid responses.</p>
<p>By creating an RSS feed item with the inline description containing an <code>&lt;img&gt;</code> tag with a <code>srcset</code> attribute pointing to an invalid URL like <code>http:a&lt;script&gt;alert(1)&lt;/script&gt;</code>, we can coerce the proxy handler into an error condition where the invalid URL is returned unescaped and in full.</p>
<p>This results in JavaScript execution on the Miniflux instance as soon as the user is convinced (e.g. by a message in the alt text) to open the broken image.</p>
<p>An attacker can execute arbitrary JavaScript in the context of a victim Miniflux user when they open a broken image in a crafted RSS feed. This can be used to perform actions on the Miniflux instance as that user and gain administrative access to the Miniflux instance if it is reachable and the victim is an administrator.</p>
<h3 id="patches">Patches</h3>
<p>PR #1746 fixes the problem. Available in Miniflux &gt;= 2.0.43.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable image proxy (default value is <code>http-only</code>).</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://miniflux.app/docs/configuration.html#proxy-images">https://miniflux.app/docs/configuration.html#proxy-images</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/miniflux/v2/security/advisories/GHSA-mqqg-xjhj-wfgw">https://github.com/miniflux/v2/security/advisories/GHSA-mqqg-xjhj-wfgw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27592">https://nvd.nist.gov/vuln/detail/CVE-2023-27592</a></li>
<li><a href="https://github.com/miniflux/v2/pull/1746">https://github.com/miniflux/v2/pull/1746</a></li>
<li><a href="https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L76">https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L76</a></li>
<li><a href="https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L90">https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L90</a></li>
<li><a href="https://github.com/miniflux/v2/releases/tag/2.0.25">https://github.com/miniflux/v2/releases/tag/2.0.25</a></li>
<li><a href="https://github.com/miniflux/v2/releases/tag/2.0.43">https://github.com/miniflux/v2/releases/tag/2.0.43</a></li>
<li><a href="https://miniflux.app/docs/configuration.html#proxy-images">https://miniflux.app/docs/configuration.html#proxy-images</a></li>
<li><a href="https://github.com/advisories/GHSA-mqqg-xjhj-wfgw">https://github.com/advisories/GHSA-mqqg-xjhj-wfgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqqg-xjhj-wfgw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-02T17:25:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniflux.app] Unauthenticated Miniflux user can bypass allowed networks check to obtain Prometheus metrics]]></title>
        <id>https://github.com/advisories/GHSA-3qjf-qh38-x73v</id>
        <link href="https://github.com/advisories/GHSA-3qjf-qh38-x73v"/>
        <updated>2025-04-02T17:24:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An unauthenticated user can retrieve Prometheus metrics from a publicly reachable Miniflux instance where the <code>METRICS_COLLECTOR</code> <a href="https://miniflux.app/docs/configuration.html#metrics-collector">configuration option</a> is enabled and <code>METRICS_ALLOWED_NETWORKS</code> is set to <code>127.0.0.1/8</code> (the default).</p>
<h3 id="patches">Patches</h3>
<p>PR #1745 fixes the problem. Available in Miniflux &gt;= 2.0.43.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Set <code>METRICS_COLLECTOR</code> to <code>false</code> (default) or run Miniflux behind a trusted reverse-proxy.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://miniflux.app/docs/configuration.html#metrics-collector">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>
<li><a href="https://miniflux.app/docs/configuration.html#metrics-allowed-networks">https://miniflux.app/docs/configuration.html#metrics-allowed-networks</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v">https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27591">https://nvd.nist.gov/vuln/detail/CVE-2023-27591</a></li>
<li><a href="https://github.com/miniflux/v2/pull/1745">https://github.com/miniflux/v2/pull/1745</a></li>
<li><a href="https://github.com/miniflux/v2/releases/tag/2.0.43">https://github.com/miniflux/v2/releases/tag/2.0.43</a></li>
<li><a href="https://miniflux.app/docs/configuration.html#metrics-collector">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>
<li><a href="https://github.com/advisories/GHSA-3qjf-qh38-x73v">https://github.com/advisories/GHSA-3qjf-qh38-x73v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qjf-qh38-x73v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-02T17:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniflux.app/v2] Unauthenticated Miniflux user can bypass allowed networks check to obtain Prometheus metrics]]></title>
        <id>https://github.com/advisories/GHSA-3qjf-qh38-x73v</id>
        <link href="https://github.com/advisories/GHSA-3qjf-qh38-x73v"/>
        <updated>2025-04-02T17:24:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An unauthenticated user can retrieve Prometheus metrics from a publicly reachable Miniflux instance where the <code>METRICS_COLLECTOR</code> <a href="https://miniflux.app/docs/configuration.html#metrics-collector">configuration option</a> is enabled and <code>METRICS_ALLOWED_NETWORKS</code> is set to <code>127.0.0.1/8</code> (the default).</p>
<h3 id="patches">Patches</h3>
<p>PR #1745 fixes the problem. Available in Miniflux &gt;= 2.0.43.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Set <code>METRICS_COLLECTOR</code> to <code>false</code> (default) or run Miniflux behind a trusted reverse-proxy.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://miniflux.app/docs/configuration.html#metrics-collector">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>
<li><a href="https://miniflux.app/docs/configuration.html#metrics-allowed-networks">https://miniflux.app/docs/configuration.html#metrics-allowed-networks</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v">https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27591">https://nvd.nist.gov/vuln/detail/CVE-2023-27591</a></li>
<li><a href="https://github.com/miniflux/v2/pull/1745">https://github.com/miniflux/v2/pull/1745</a></li>
<li><a href="https://github.com/miniflux/v2/releases/tag/2.0.43">https://github.com/miniflux/v2/releases/tag/2.0.43</a></li>
<li><a href="https://miniflux.app/docs/configuration.html#metrics-collector">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>
<li><a href="https://github.com/advisories/GHSA-3qjf-qh38-x73v">https://github.com/advisories/GHSA-3qjf-qh38-x73v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qjf-qh38-x73v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-02T17:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/phires/go-guerrilla] Go-Guerrilla SMTP Daemon allows the PROXY command to be sent multiple times]]></title>
        <id>https://github.com/advisories/GHSA-c2c3-pqw5-5p7c</id>
        <link href="https://github.com/advisories/GHSA-c2c3-pqw5-5p7c"/>
        <updated>2025-04-02T00:49:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The PROXY command is accepted multiple times, allowing a client to spoof its IP address when the proxy protocol is being used.</p>
<h3 id="details">Details</h3>
<p>When ProxyOn is enabled, <a href="https://github.com/phires/go-guerrilla/blob/fca3b2d8957a746997c7e71fca39004f5c96e91f/server.go#L495">it looks like the PROXY command will be accepted multiple times</a>, with later invocations overriding earlier ones.  The proxy protocol only supports one initial PROXY header; anything after that is considered part of the exchange between client and server, so the client is free to send further PROXY commands with whatever data it pleases.  go-guerrilla will treat these as coming from the reverse proxy, allowing a client to spoof its IP address.</p>
<p>Note that the format of the PROXY header is <a href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt">well-defined</a>.  It probably shouldn't be treated as an SMTP command; parsing it the same way is likely to result in odd behavior and could lead to other vulnerabilities.</p>
<h3 id="poc">PoC</h3>
<p>I'm working on writing a PR to fix this vulnerability.  It'll include a unit test that will serve as a PoC on the current version.</p>
<h3 id="impact">Impact</h3>
<p>Any instance with <code>ProxyOn</code> enabled (<code>proxyon</code> in the JSON config) is affected.</p>
<p>As far as I'm able to tell, the impact is limited to spoofing the <code>RemoteIP</code> field.  This isn't ideal, but it probably has less practical impact on an MTA than, say, a web server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/phires/go-guerrilla/security/advisories/GHSA-c2c3-pqw5-5p7c">https://github.com/phires/go-guerrilla/security/advisories/GHSA-c2c3-pqw5-5p7c</a></li>
<li><a href="https://github.com/phires/go-guerrilla/commit/7673947f2d5204a135d7ae0b7f80759e548abee6">https://github.com/phires/go-guerrilla/commit/7673947f2d5204a135d7ae0b7f80759e548abee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31135">https://nvd.nist.gov/vuln/detail/CVE-2025-31135</a></li>
<li><a href="https://github.com/advisories/GHSA-c2c3-pqw5-5p7c">https://github.com/advisories/GHSA-c2c3-pqw5-5p7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2c3-pqw5-5p7c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-01T22:23:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/answer] Apache Answer User Using External Images Potentially Discloses User Information]]></title>
        <id>https://github.com/advisories/GHSA-wqcc-mfhw-53pc</id>
        <link href="https://github.com/advisories/GHSA-wqcc-mfhw-53pc"/>
        <updated>2025-04-10T22:59:24.000Z</updated>
        <content type="html"><![CDATA[<p>Private Data Structure Returned From A Public Method vulnerability in Apache Answer.</p>
<p>This issue affects Apache Answer: through 1.4.2.</p>
<p>If a user uses an externally referenced image, when a user accesses this image, the provider of the image may obtain private information about the ip address of that accessing user.
Users are recommended to upgrade to version 1.4.5, which fixes the issue.&nbsp;In the new version, administrators can set whether external content can be displayed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29868">https://nvd.nist.gov/vuln/detail/CVE-2025-29868</a></li>
<li><a href="https://lists.apache.org/thread/l7pohw5g03g3qsvrz8pqc9t29mdv5lhf">https://lists.apache.org/thread/l7pohw5g03g3qsvrz8pqc9t29mdv5lhf</a></li>
<li><a href="https://github.com/apache/answer/issues/1250">https://github.com/apache/answer/issues/1250</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/04/01/2">http://www.openwall.com/lists/oss-security/2025/04/01/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/04/02/1">http://www.openwall.com/lists/oss-security/2025/04/02/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/04/10/3">http://www.openwall.com/lists/oss-security/2025/04/10/3</a></li>
<li><a href="https://github.com/advisories/GHSA-wqcc-mfhw-53pc">https://github.com/advisories/GHSA-wqcc-mfhw-53pc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wqcc-mfhw-53pc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-01T09:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords]]></title>
        <id>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</id>
        <link href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g"/>
        <updated>2025-04-11T23:13:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>
<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>
<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.
Please consult the associated  <a href="https://attack.mitre.org/techniques/T1548/">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix introduces a few changes:</p>
<ol>
<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>
<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>
</ol>
<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.
If users can't upgrade, the following are recommended:</p>
<ol>
<li>Limit access to Rancher Restricted Admin only to trusted users.</li>
<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>This issue was identified and reported by Xavier Duthil from OVHcloud.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23391">https://nvd.nist.gov/vuln/detail/CVE-2025-23391</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2025-23391">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2025-23391</a></li>
<li><a href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-01T14:19:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords]]></title>
        <id>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</id>
        <link href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g"/>
        <updated>2025-04-11T23:13:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>
<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>
<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.
Please consult the associated  <a href="https://attack.mitre.org/techniques/T1548/">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix introduces a few changes:</p>
<ol>
<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>
<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>
</ol>
<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.
If users can't upgrade, the following are recommended:</p>
<ol>
<li>Limit access to Rancher Restricted Admin only to trusted users.</li>
<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>This issue was identified and reported by Xavier Duthil from OVHcloud.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23391">https://nvd.nist.gov/vuln/detail/CVE-2025-23391</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2025-23391">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2025-23391</a></li>
<li><a href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-01T14:19:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords]]></title>
        <id>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</id>
        <link href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g"/>
        <updated>2025-04-11T23:13:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>
<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>
<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.
Please consult the associated  <a href="https://attack.mitre.org/techniques/T1548/">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>
<h3 id="patches">Patches</h3>
<p>The fix introduces a few changes:</p>
<ol>
<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>
<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>
</ol>
<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.
If users can't upgrade, the following are recommended:</p>
<ol>
<li>Limit access to Rancher Restricted Admin only to trusted users.</li>
<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>This issue was identified and reported by Xavier Duthil from OVHcloud.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23391">https://nvd.nist.gov/vuln/detail/CVE-2025-23391</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2025-23391">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2025-23391</a></li>
<li><a href="https://github.com/advisories/GHSA-8p83-cpfg-fj3g">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8p83-cpfg-fj3g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-01T14:19:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/beego/beego] Beego allows Reflected/Stored XSS in Beego's RenderForm() Function Due to Unescaped User Input]]></title>
        <id>https://github.com/advisories/GHSA-2j42-h78h-q4fg</id>
        <link href="https://github.com/advisories/GHSA-2j42-h78h-q4fg"/>
        <updated>2025-03-31T23:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Cross-Site Scripting (XSS) vulnerability exists in Beego's <code>RenderForm()</code> function due to improper HTML escaping of user-controlled data. This vulnerability allows attackers to inject malicious JavaScript code that executes in victims' browsers, potentially leading to session hijacking, credential theft, or account takeover. The vulnerability affects any application using Beego's <code>RenderForm()</code> function with user-provided data. Since it is a high-level function generating an entire form markup, many developers would assume it automatically escapes attributes (the way most frameworks do).</p>
<h3 id="details">Details</h3>
<p>The vulnerability is located in the <code>renderFormField()</code> function in Beego's <code>templatefunc.go</code> file (around lines 316-356). This function directly injects user-provided values into HTML without proper escaping:</p>
<pre><code class="language-go">return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    label, id, class, name, fType, value, requiredString)
</code></pre>
<p>None of the values (label, id, class, name, value) are properly HTML-escaped before being inserted into the HTML template. This allows attackers to break out of the attribute context or inject HTML tags directly.
The vulnerability can be exploited in two main ways:</p>
<ul>
<li>Attribute Injection: By injecting code into fields like DisplayName, an attacker can break out of the attribute context and execute JavaScript.</li>
<li>Content Injection: By injecting HTML tags into textarea content, an attacker can execute JavaScript.</li>
</ul>
<p>The <code>RenderForm()</code> function returns <code>template.HTML</code>, which bypasses Go's automatic HTML escaping, making this vulnerability particularly dangerous.</p>
<h3 id="poc">PoC</h3>
<p>Retrieve the following (secret) gist: <a href="https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b">https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b</a></p>
<p>To run it:</p>
<pre><code class="language-go">go mod init beego-xss-poc
go mod tidy
go run poc.go
</code></pre>
<p>Open your browser and navigate to <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>The application demonstrates the vulnerability through several examples:</p>
<ul>
<li><code>/profile</code> - Shows a profile with malicious data in the Display Name and Bio fields</li>
<li><code>/admin</code> - Shows multiple user profiles, including one with malicious data</li>
<li><code>/submit</code> - Allows you to create your own profile with malicious data</li>
</ul>
<p>In addition, you may use this Go test in <code>templatefunc_test.go</code>. The test passes, validating the vulnerability.</p>
<pre><code class="language-go">func TestRenderFormXSSVulnerability(t *testing.T) {
    type UserProfile struct {
        DisplayName string `form:"displayName,text,Name:"`
        Bio         string `form:",textarea"`
    }

    // Test case 1: Attribute injection in input field
    maliciousUser := UserProfile{
        DisplayName: `" onmouseover="alert('XSS')" data-malicious="`,
        Bio:         "Normal bio text",
    }

    output := RenderForm(&amp;maliciousUser)

    // The vulnerable output would contain the unescaped JavaScript
    if !strings.Contains(string(output), `onmouseover="alert('XSS')"`) {
        t.Errorf("Expected XSS vulnerability in attribute, but got safe output: %v", output)
    }

    // Test case 2: Script injection in textarea
    maliciousUser2 := UserProfile{
        DisplayName: "Normal Name",
        Bio:         `&lt;/textarea&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;&lt;textarea&gt;`,
    }

    output = RenderForm(&amp;maliciousUser2)

    // The vulnerable output would contain the unescaped script tag
    if !strings.Contains(string(output), `&lt;/textarea&gt;&lt;script&gt;alert('XSS')`) {
        t.Errorf("Expected XSS vulnerability in textarea content, but got safe output: %v", output)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a high-severity vulnerability with the following impacts:</p>
<ul>
<li>Cross-Site Scripting (XSS): Allows execution of arbitrary JavaScript in the context of the victim's browser.</li>
<li>Session Hijacking: Attackers can steal session cookies and impersonate victims.</li>
<li>Credential Theft: Attackers can create fake login forms to steal credentials.</li>
<li>Account Takeover: Attackers can perform actions on behalf of the victim.</li>
<li>Data Exfiltration: Sensitive data visible in the browser can be stolen.</li>
</ul>
<p>This is particularly concerning in admin panels or user management interfaces where one user's data is displayed to another user (typically an administrator).</p>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability can be fixed by properly escaping all user-provided values before inserting them into HTML, for example:</p>
<pre><code class="language-go">// Convert value to string and escape it
valueStr := ""
if value != nil {
    valueStr = template.HTMLEscapeString(fmt.Sprintf("%v", value))
}

// Escape the name and label
escapedName := template.HTMLEscapeString(name)
escapedLabel := template.HTMLEscapeString(label)
escapedType := template.HTMLEscapeString(fType)

return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    escapedLabel, id, class, escapedName, escapedType, valueStr, requiredString)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg">https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg</a></li>
<li><a href="https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25">https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30223">https://nvd.nist.gov/vuln/detail/CVE-2025-30223</a></li>
<li><a href="https://github.com/advisories/GHSA-2j42-h78h-q4fg">https://github.com/advisories/GHSA-2j42-h78h-q4fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2j42-h78h-q4fg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-31T16:55:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/beego/beego/v2] Beego allows Reflected/Stored XSS in Beego's RenderForm() Function Due to Unescaped User Input]]></title>
        <id>https://github.com/advisories/GHSA-2j42-h78h-q4fg</id>
        <link href="https://github.com/advisories/GHSA-2j42-h78h-q4fg"/>
        <updated>2025-03-31T23:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Cross-Site Scripting (XSS) vulnerability exists in Beego's <code>RenderForm()</code> function due to improper HTML escaping of user-controlled data. This vulnerability allows attackers to inject malicious JavaScript code that executes in victims' browsers, potentially leading to session hijacking, credential theft, or account takeover. The vulnerability affects any application using Beego's <code>RenderForm()</code> function with user-provided data. Since it is a high-level function generating an entire form markup, many developers would assume it automatically escapes attributes (the way most frameworks do).</p>
<h3 id="details">Details</h3>
<p>The vulnerability is located in the <code>renderFormField()</code> function in Beego's <code>templatefunc.go</code> file (around lines 316-356). This function directly injects user-provided values into HTML without proper escaping:</p>
<pre><code class="language-go">return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    label, id, class, name, fType, value, requiredString)
</code></pre>
<p>None of the values (label, id, class, name, value) are properly HTML-escaped before being inserted into the HTML template. This allows attackers to break out of the attribute context or inject HTML tags directly.
The vulnerability can be exploited in two main ways:</p>
<ul>
<li>Attribute Injection: By injecting code into fields like DisplayName, an attacker can break out of the attribute context and execute JavaScript.</li>
<li>Content Injection: By injecting HTML tags into textarea content, an attacker can execute JavaScript.</li>
</ul>
<p>The <code>RenderForm()</code> function returns <code>template.HTML</code>, which bypasses Go's automatic HTML escaping, making this vulnerability particularly dangerous.</p>
<h3 id="poc">PoC</h3>
<p>Retrieve the following (secret) gist: <a href="https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b">https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b</a></p>
<p>To run it:</p>
<pre><code class="language-go">go mod init beego-xss-poc
go mod tidy
go run poc.go
</code></pre>
<p>Open your browser and navigate to <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>The application demonstrates the vulnerability through several examples:</p>
<ul>
<li><code>/profile</code> - Shows a profile with malicious data in the Display Name and Bio fields</li>
<li><code>/admin</code> - Shows multiple user profiles, including one with malicious data</li>
<li><code>/submit</code> - Allows you to create your own profile with malicious data</li>
</ul>
<p>In addition, you may use this Go test in <code>templatefunc_test.go</code>. The test passes, validating the vulnerability.</p>
<pre><code class="language-go">func TestRenderFormXSSVulnerability(t *testing.T) {
    type UserProfile struct {
        DisplayName string `form:"displayName,text,Name:"`
        Bio         string `form:",textarea"`
    }

    // Test case 1: Attribute injection in input field
    maliciousUser := UserProfile{
        DisplayName: `" onmouseover="alert('XSS')" data-malicious="`,
        Bio:         "Normal bio text",
    }

    output := RenderForm(&amp;maliciousUser)

    // The vulnerable output would contain the unescaped JavaScript
    if !strings.Contains(string(output), `onmouseover="alert('XSS')"`) {
        t.Errorf("Expected XSS vulnerability in attribute, but got safe output: %v", output)
    }

    // Test case 2: Script injection in textarea
    maliciousUser2 := UserProfile{
        DisplayName: "Normal Name",
        Bio:         `&lt;/textarea&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;&lt;textarea&gt;`,
    }

    output = RenderForm(&amp;maliciousUser2)

    // The vulnerable output would contain the unescaped script tag
    if !strings.Contains(string(output), `&lt;/textarea&gt;&lt;script&gt;alert('XSS')`) {
        t.Errorf("Expected XSS vulnerability in textarea content, but got safe output: %v", output)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a high-severity vulnerability with the following impacts:</p>
<ul>
<li>Cross-Site Scripting (XSS): Allows execution of arbitrary JavaScript in the context of the victim's browser.</li>
<li>Session Hijacking: Attackers can steal session cookies and impersonate victims.</li>
<li>Credential Theft: Attackers can create fake login forms to steal credentials.</li>
<li>Account Takeover: Attackers can perform actions on behalf of the victim.</li>
<li>Data Exfiltration: Sensitive data visible in the browser can be stolen.</li>
</ul>
<p>This is particularly concerning in admin panels or user management interfaces where one user's data is displayed to another user (typically an administrator).</p>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability can be fixed by properly escaping all user-provided values before inserting them into HTML, for example:</p>
<pre><code class="language-go">// Convert value to string and escape it
valueStr := ""
if value != nil {
    valueStr = template.HTMLEscapeString(fmt.Sprintf("%v", value))
}

// Escape the name and label
escapedName := template.HTMLEscapeString(name)
escapedLabel := template.HTMLEscapeString(label)
escapedType := template.HTMLEscapeString(fType)

return fmt.Sprintf(`%v&lt;input%v%v name="%v" type="%v" value="%v"%v&gt;`, 
    escapedLabel, id, class, escapedName, escapedType, valueStr, requiredString)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg">https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg</a></li>
<li><a href="https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25">https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30223">https://nvd.nist.gov/vuln/detail/CVE-2025-30223</a></li>
<li><a href="https://github.com/advisories/GHSA-2j42-h78h-q4fg">https://github.com/advisories/GHSA-2j42-h78h-q4fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2j42-h78h-q4fg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-31T16:55:22.000Z</published>
    </entry>
</feed>