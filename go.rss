<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-05-27T21:56:46.492Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/concourse/concourse] GitLab auth uses full name instead of username as user ID, allowing impersonation]]></title>
        <id>https://github.com/advisories/GHSA-627p-rr78-99rj</id>
        <link href="https://github.com/advisories/GHSA-627p-rr78-99rj"/>
        <updated>2025-05-27T15:54:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Installations which use the GitLab auth connector are vulnerable to identity spoofing by way of configuring a GitLab account with the same full name as another GitLab user who is granted access to a Concourse team by having their full name listed under <code>users</code> in the team configuration or given to the <code>--gitlab-user</code> flag.</p>
<p>See the <a href="https://concourse-ci.org/gitlab-auth.html">GitLab auth docs</a> for details.</p>
<p>Concourse installations which do not configure the GitLab auth connector are not affected.</p>
<h3 id="patches">Patches</h3>
<p>Concourse <a href="https://github.com/concourse/concourse/releases/tag/v6.3.1">v6.3.1</a> and <a href="https://github.com/concourse/concourse/releases/tag/v6.4.1">v6.4.1</a> were both released with a fix on August 4th, 2020.</p>
<p>Both versions change the GitLab connector to use the username, rather than the full name. This was always the intent, and the previous behavior was originally reported as a bug (concourse/dex#7) prior to being reported as a security issue.</p>
<p>Any Concourse teams which configure GitLab users will have to switch each user from their full name to their username upon upgrading to these versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>GitLab groups do not have this vulnerability, so GitLab users may be moved into groups which are then configured in the Concourse team.</p>
<h3 id="references">References</h3>
<ul>
<li>concourse/dex#12: PR with the fix</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, you may reach us privately at <a href="mailto:concourseteam+security@gmail.com">concourseteam+security@gmail.com</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj">https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5415">https://nvd.nist.gov/vuln/detail/CVE-2020-5415</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5415">https://tanzu.vmware.com/security/cve-2020-5415</a></li>
<li><a href="https://github.com/advisories/GHSA-627p-rr78-99rj">https://github.com/advisories/GHSA-627p-rr78-99rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-627p-rr78-99rj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-12-20T17:56:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/concourse/dex] GitLab auth uses full name instead of username as user ID, allowing impersonation]]></title>
        <id>https://github.com/advisories/GHSA-627p-rr78-99rj</id>
        <link href="https://github.com/advisories/GHSA-627p-rr78-99rj"/>
        <updated>2025-05-27T15:54:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Installations which use the GitLab auth connector are vulnerable to identity spoofing by way of configuring a GitLab account with the same full name as another GitLab user who is granted access to a Concourse team by having their full name listed under <code>users</code> in the team configuration or given to the <code>--gitlab-user</code> flag.</p>
<p>See the <a href="https://concourse-ci.org/gitlab-auth.html">GitLab auth docs</a> for details.</p>
<p>Concourse installations which do not configure the GitLab auth connector are not affected.</p>
<h3 id="patches">Patches</h3>
<p>Concourse <a href="https://github.com/concourse/concourse/releases/tag/v6.3.1">v6.3.1</a> and <a href="https://github.com/concourse/concourse/releases/tag/v6.4.1">v6.4.1</a> were both released with a fix on August 4th, 2020.</p>
<p>Both versions change the GitLab connector to use the username, rather than the full name. This was always the intent, and the previous behavior was originally reported as a bug (concourse/dex#7) prior to being reported as a security issue.</p>
<p>Any Concourse teams which configure GitLab users will have to switch each user from their full name to their username upon upgrading to these versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>GitLab groups do not have this vulnerability, so GitLab users may be moved into groups which are then configured in the Concourse team.</p>
<h3 id="references">References</h3>
<ul>
<li>concourse/dex#12: PR with the fix</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, you may reach us privately at <a href="mailto:concourseteam+security@gmail.com">concourseteam+security@gmail.com</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj">https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5415">https://nvd.nist.gov/vuln/detail/CVE-2020-5415</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5415">https://tanzu.vmware.com/security/cve-2020-5415</a></li>
<li><a href="https://github.com/advisories/GHSA-627p-rr78-99rj">https://github.com/advisories/GHSA-627p-rr78-99rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-627p-rr78-99rj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-12-20T17:56:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/dexidp/dex] Dex discarding TLSconfig and always serves deprecated TLS 1.0/1.1 and insecure ciphers]]></title>
        <id>https://github.com/advisories/GHSA-gr79-9v6v-gc9r</id>
        <link href="https://github.com/advisories/GHSA-gr79-9v6v-gc9r"/>
        <updated>2025-05-27T15:45:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Dex 2.37.0 is serving HTTPS with insecure TLS 1.0 and TLS 1.1.</p>
<h3 id="details">Details</h3>
<p>While working on <a href="https://github.com/dexidp/dex/issues/2848">https://github.com/dexidp/dex/issues/2848</a> and implementing configurable TLS support, I noticed my changes did not have any effect in TLS config, so I started investigating. </p>
<p><a href="https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a> is seemingly setting TLS 1.2 as minimum version, but the whole tlsConfig is ignored after "TLS cert reloader" was introduced in <a href="https://github.com/dexidp/dex/pull/2964">https://github.com/dexidp/dex/pull/2964</a>. Configured cipher suites are not respected either, as seen on the output.</p>
<h3 id="poc">PoC</h3>
<p>Build Dex, generate certs with <code>gencert.sh</code>, modify <code>config.dev.yaml</code> to run on https, using generated certs.</p>
<pre><code class="language-console">issuer: http://127.0.0.1:5556/dex

storage:
  type: sqlite3
  config:
    file: dex.db

web:
  https: 127.0.0.1:5556
  tlsCert: examples/k8s/ssl/cert.pem
  tlsKey: examples/k8s/ssl/key.pem

&lt;rest as default&gt;
</code></pre>
<p>Run dex <code>bin/dex serve config.dev.yaml</code>.</p>
<p>Install <code>sslyze</code>, easy to use SSL connection analyzer:</p>
<pre><code class="language-console">pip3 install sslyze
sslyze 127.0.0.1:5556
</code></pre>
<p>In Dex 2.37.0, TLS 1.0 and TLS 1.1 are enabled in addition to expected TLS 1.2 and TLS 1.3.</p>
<pre><code class="language-console"> * TLS 1.0 Cipher Suites:
     Attempted to connect using 80 cipher suites.

     The server accepted the following 6 cipher suites:
        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      
        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.1 Cipher Suites:
     Attempted to connect using 80 cipher suites.

     The server accepted the following 6 cipher suites:
        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      
        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.2 Cipher Suites:
     Attempted to connect using 156 cipher suites.

     The server accepted the following 11 cipher suites:
        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      
        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      
        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      
        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      
        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)
        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.3 Cipher Suites:
     Attempted to connect using 5 cipher suites.

     The server accepted the following 3 cipher suites:
        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)
        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)
        TLS_AES_128_GCM_SHA256                            128       ECDH: X25519 (253 bits)
</code></pre>
<p>In Dex 2.36.0, TLS 1.0 and TLS 1.1 are disabled as expected.</p>
<pre><code class="language-console"> * TLS 1.0 Cipher Suites:
     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.

 * TLS 1.1 Cipher Suites:
     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.

 * TLS 1.2 Cipher Suites:
     Attempted to connect using 156 cipher suites.

     The server accepted the following 5 cipher suites:
        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      
        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      
        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)
        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)
        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)

     The group of cipher suites supported by the server has the following properties:
       Forward Secrecy                    OK - Supported
       Legacy RC4 Algorithm               OK - Not Supported


 * TLS 1.3 Cipher Suites:
     Attempted to connect using 5 cipher suites.

     The server accepted the following 3 cipher suites:
        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)
        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)
</code></pre>
<h3 id="impact">Impact</h3>
<p>TLS 1.0 and TLS 1.1 connections can be decrypted by the attacker, and hence decrypt the traffic to Dex.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r">https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23656">https://nvd.nist.gov/vuln/detail/CVE-2024-23656</a></li>
<li><a href="https://github.com/dexidp/dex/issues/2848">https://github.com/dexidp/dex/issues/2848</a></li>
<li><a href="https://github.com/dexidp/dex/pull/2964">https://github.com/dexidp/dex/pull/2964</a></li>
<li><a href="https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17">https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17</a></li>
<li><a href="https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a></li>
<li><a href="https://github.com/advisories/GHSA-gr79-9v6v-gc9r">https://github.com/advisories/GHSA-gr79-9v6v-gc9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gr79-9v6v-gc9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-26T01:57:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission]]></title>
        <id>https://github.com/advisories/GHSA-wxcc-2f3q-4h58</id>
        <link href="https://github.com/advisories/GHSA-wxcc-2f3q-4h58"/>
        <updated>2025-05-27T15:35:54.000Z</updated>
        <content type="html"><![CDATA[<p>Grafana is an open-source platform for monitoring and observability. 
The Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. 
Fixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11741">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-11741">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3438">https://pkg.go.dev/vuln/GO-2025-3438</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20250509-0006">https://security.netapp.com/advisory/ntap-20250509-0006</a></li>
<li><a href="https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea">https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea</a></li>
<li><a href="https://github.com/advisories/GHSA-wxcc-2f3q-4h58">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxcc-2f3q-4h58</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-31T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission]]></title>
        <id>https://github.com/advisories/GHSA-wxcc-2f3q-4h58</id>
        <link href="https://github.com/advisories/GHSA-wxcc-2f3q-4h58"/>
        <updated>2025-05-27T15:35:54.000Z</updated>
        <content type="html"><![CDATA[<p>Grafana is an open-source platform for monitoring and observability. 
The Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. 
Fixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11741">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-11741">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3438">https://pkg.go.dev/vuln/GO-2025-3438</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20250509-0006">https://security.netapp.com/advisory/ntap-20250509-0006</a></li>
<li><a href="https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea">https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea</a></li>
<li><a href="https://github.com/advisories/GHSA-wxcc-2f3q-4h58">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxcc-2f3q-4h58</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-31T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL "ignoring unknown usernames" vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-567v-6hmg-6qg7</id>
        <link href="https://github.com/advisories/GHSA-567v-6hmg-6qg7"/>
        <updated>2025-05-27T15:08:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL administrators can enable a setting called "Ignoring unknown usernames" which helps mitigate attacks that try to guess/enumerate usernames. If enabled, ZITADEL will show the password prompt even if the user doesn't exist and report "Username or Password invalid".
Due to a implementation change to prevent deadlocks calling the database, the flag would not be correctly respected in all cases and an attacker would gain information if an account exist within ZITADEL, since the error message shows "object not found" instead of the generic error message.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.58.1">2.58.1</a>
2.57.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.57.1">2.57.1</a>
2.56.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.56.2">2.56.2</a>
2.55.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.5">2.55.5</a>
2.54.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.8">2.54.8</a>
2.53.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.9">2.53.9</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-567v-6hmg-6qg7">https://github.com/zitadel/zitadel/security/advisories/GHSA-567v-6hmg-6qg7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41952">https://nvd.nist.gov/vuln/detail/CVE-2024-41952</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/0ab0c645ef914298c343fa39cccb1290aba48bf6">https://github.com/zitadel/zitadel/commit/0ab0c645ef914298c343fa39cccb1290aba48bf6</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/3c7d12834e32426416235b9e3374be0f4b9380b8">https://github.com/zitadel/zitadel/commit/3c7d12834e32426416235b9e3374be0f4b9380b8</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/5c2526c98aafd1ba206be2fa4291b1d24c384f6d">https://github.com/zitadel/zitadel/commit/5c2526c98aafd1ba206be2fa4291b1d24c384f6d</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/8565d24fd8df5bd35294313cfbfcc2e15aea20e9">https://github.com/zitadel/zitadel/commit/8565d24fd8df5bd35294313cfbfcc2e15aea20e9</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/b0e71a81ef39667ce2a149ce037c1ca0edbe059d">https://github.com/zitadel/zitadel/commit/b0e71a81ef39667ce2a149ce037c1ca0edbe059d</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/fc1d415b8db5b8d481bb65206ce3fc944c0eecea">https://github.com/zitadel/zitadel/commit/fc1d415b8db5b8d481bb65206ce3fc944c0eecea</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.9">https://github.com/zitadel/zitadel/releases/tag/v2.53.9</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.8">https://github.com/zitadel/zitadel/releases/tag/v2.54.8</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.5">https://github.com/zitadel/zitadel/releases/tag/v2.55.5</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.56.2">https://github.com/zitadel/zitadel/releases/tag/v2.56.2</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.57.1">https://github.com/zitadel/zitadel/releases/tag/v2.57.1</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.58.1">https://github.com/zitadel/zitadel/releases/tag/v2.58.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3014">https://pkg.go.dev/vuln/GO-2024-3014</a></li>
<li><a href="https://github.com/advisories/GHSA-567v-6hmg-6qg7">https://github.com/advisories/GHSA-567v-6hmg-6qg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-567v-6hmg-6qg7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-31T21:02:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher Webhook is misconfigured during upgrade process]]></title>
        <id>https://github.com/advisories/GHSA-6m9f-pj6w-w87g</id>
        <link href="https://github.com/advisories/GHSA-6m9f-pj6w-w87g"/>
        <updated>2025-05-27T14:46:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A failure in the update logic of Rancher's admission Webhook may lead to the misconfiguration of the Webhook. This component enforces validation rules and security checks before resources are admitted into the Kubernetes cluster.</p>
<p>When the Webhook is operating in a degraded state, it no longer validates any resources, which may result in severe privilege escalations and data corruption.</p>
<p>The issue only affects users that upgrade from <code>2.6.x</code> or <code>2.7.x</code> to <code>2.7.2</code>. Users that did a fresh install of 2.7.2 (and did not follow an upgrade path) are not affected.</p>
<p>The command below can be executed on the <code>local</code> cluster to determine whether the cluster is affected by this issue:</p>
<pre><code class="language-sh">$ kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io

NAME                WEBHOOKS   AGE
rancher.cattle.io   0         19h
</code></pre>
<p>If the resulting webhook quantity is <code>0</code>, the Rancher instance is affected.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include release <code>2.7.3</code> and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are affected and cannot update to a patched Rancher version, the recommended workaround is to manually reconfigure the Webhook with the script below. Please note that the script must be run from inside the <code>local</code> cluster or with a kubeconfig pointing to the <code>local</code> cluster which has admin permissions.</p>
<pre><code class="language-yaml">#!/bin/bash

set -euo pipefail

function prereqs() {
    if ! [ -x "$(command -v kubectl)" ]; then
      echo "error: kubectl is not installed." &gt;&amp;2
      exit 1
    fi

    if [[ -z "$(kubectl config view -o jsonpath='{.clusters[].cluster.server}')" ]]; then
        echo "error: No kubernetes cluster found on kubeconfig." &gt;&amp;2
        exit 1
    fi
}

function restart_deployment(){
    kubectl rollout restart deployment rancher-webhook -n cattle-system
    kubectl rollout status deployment rancher-webhook -n cattle-system --timeout=30s
}

function workaround() {
    echo "Cluster: $(kubectl config view -o jsonpath='{.clusters[].cluster.server}')"

    if ! kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io &gt; /dev/null 2&gt;&amp;1; then
        echo "webhook rancher.cattle.io not found, restarting deployment:"
        restart_deployment

        echo "waiting for webhook configuration"
        sleep 15s
    fi

    local -i webhooks
    webhooks="$(kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io --no-headers | awk '{ print $2 }')"

    if [ "${webhooks}" == "0" ]; then
        echo "Webhook misconfiguration status: Cluster is affected by CVE-2023-22651"
        
        echo "Running workaround:"
        kubectl delete validatingwebhookconfiguration rancher.cattle.io
        restart_deployment

        ret=$?
        if [ $ret -eq 0 ]; then
            echo "Webhook restored, CVE-2023-22651 is fixed"
        else
            echo "error trying to restart deployment. try again in a few seconds."
        fi
    else
        echo "Webhook misconfiguration status: not present (skipping)"
    fi

    echo "Done"
}

function main() {
    prereqs
    workaround
}

main
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/webhook/pull/216/commits/a4a498613b43a3ee93c5ab06742a3bc8adace45d">https://github.com/rancher/webhook/pull/216/commits/a4a498613b43a3ee93c5ab06742a3bc8adace45d</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-6m9f-pj6w-w87g">https://github.com/rancher/rancher/security/advisories/GHSA-6m9f-pj6w-w87g</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.7.3">https://github.com/rancher/rancher/releases/tag/v2.7.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22651">https://nvd.nist.gov/vuln/detail/CVE-2023-22651</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22651">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22651</a></li>
<li><a href="https://github.com/advisories/GHSA-6m9f-pj6w-w87g">https://github.com/advisories/GHSA-6m9f-pj6w-w87g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m9f-pj6w-w87g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-04-24T22:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openfga/openfga] OpenFGA Authorization Bypass]]></title>
        <id>https://github.com/advisories/GHSA-c72g-53hw-82q7</id>
        <link href="https://github.com/advisories/GHSA-c72g-53hw-82q7"/>
        <updated>2025-05-23T18:41:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>OpenFGA v1.8.0 to v1.8.12 ( openfga-0.2.16 &lt;= Helm chart &lt;= openfga-0.2.30, v1.8.0 &lt;= docker &lt;= v.1.8.12) are vulnerable to authorization bypass when certain Check and ListObject calls are executed.</p>
<h3 id="am-i-affected">Am I Affected?</h3>
<p>If you are using OpenFGA v1.8.0 to v1.8.12, specifically under the following conditions, you are affected by this authorization bypass vulnerability:</p>
<ul>
<li>Calling Check API or ListObjects with an <a href="https://openfga.dev/docs/concepts#what-is-an-authorization-model">authorization model</a> that has a relationship directly assignable by both <a href="https://openfga.dev/docs/concepts#what-is-type-bound-public-access">type bound public access</a> and <a href="https://openfga.dev/docs/modeling/building-blocks/usersets">userset</a>, and</li>
<li>There are check or list object queries with <a href="https://openfga.dev/docs/interacting/contextual-tuples">contextual tuples</a> for the relationship that can be directly assignable by both <a href="https://openfga.dev/docs/concepts#what-is-type-bound-public-access">type bound public access</a> and <a href="https://openfga.dev/docs/modeling/building-blocks/usersets">userset</a>, and</li>
<li>Those contextual tuples’s user field is an userset, and</li>
<li>Type bound public access tuples are not assigned to the relationship</li>
</ul>
<h3 id="fix">Fix</h3>
<p>Upgrade to v1.8.13. This upgrade is backwards compatible.</p>
<h3 id="acknowledgments">Acknowledgments</h3>
<p>Okta would like to thank @udyvish for discovering this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openfga/openfga/security/advisories/GHSA-c72g-53hw-82q7">https://github.com/openfga/openfga/security/advisories/GHSA-c72g-53hw-82q7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48371">https://nvd.nist.gov/vuln/detail/CVE-2025-48371</a></li>
<li><a href="https://github.com/openfga/openfga/commit/e5960d4eba92b723de8ff3a5346a07f50c1379ca">https://github.com/openfga/openfga/commit/e5960d4eba92b723de8ff3a5346a07f50c1379ca</a></li>
<li><a href="https://github.com/advisories/GHSA-c72g-53hw-82q7">https://github.com/advisories/GHSA-c72g-53hw-82q7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c72g-53hw-82q7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-23T18:41:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost allows a remote actor to make an arbitrary local channel read-only]]></title>
        <id>https://github.com/advisories/GHSA-jr9x-3x7m-4j75</id>
        <link href="https://github.com/advisories/GHSA-jr9x-3x7m-4j75"/>
        <updated>2025-05-23T16:42:18.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost versions 9.9.x &lt;= 9.9.0, 9.5.x &lt;= 9.5.6, 9.7.x &lt;= 9.7.5 and 9.8.x &lt;= 9.8.1 fail to disallow&nbsp;the modification of local channels by a remote, when shared channels are enabled, which allows&nbsp;a malicious remote to make an arbitrary local channel read-only.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41162">https://nvd.nist.gov/vuln/detail/CVE-2024-41162</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3031">https://pkg.go.dev/vuln/GO-2024-3031</a></li>
<li><a href="https://github.com/advisories/GHSA-jr9x-3x7m-4j75">https://github.com/advisories/GHSA-jr9x-3x7m-4j75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr9x-3x7m-4j75</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-01T15:32:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zotregistry.dev/zot] zot logs secrets]]></title>
        <id>https://github.com/advisories/GHSA-c37v-3c8w-crq8</id>
        <link href="https://github.com/advisories/GHSA-c37v-3c8w-crq8"/>
        <updated>2025-05-22T21:33:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using Keycloak as an oidc provider, the clientsecret gets printed into the container stdout logs for an example at container startup.</p>
<h3 id="details">Details</h3>
<p>Container Image (15.04.2025): ghcr.io/project-zot/zot-linux-amd64:latest
Here is an example how the configuration can look which causes the above stated problem:</p>
<p><code>   http:       address: "0.0.0.0"       port: 5000       externalUrl: "https://zot.example.com"       auth: {         failDelay: 1,         openid: {           providers: {             oidc: {               name: "Keycloak",               clientid: "zot-client-id",               clientsecret: fsdfkmmiwljasdklfsjaskldjfkljewijrf234i52k3j45l,               keypath: "",               issuer: "https://keycloak.example.com/realms/example",               scopes: ["openid"]             }           }         }       }</code></p>
<h3 id="poc">PoC</h3>
<p>Set up a blank new zot k8s deployment with the code snippet above.</p>
<h3 id="impact">Impact</h3>
<p>exposure of secrets, on configuring a oidc provider</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/project-zot/zot/security/advisories/GHSA-c37v-3c8w-crq8">https://github.com/project-zot/zot/security/advisories/GHSA-c37v-3c8w-crq8</a></li>
<li><a href="https://github.com/project-zot/zot/commit/8a99a3ed231fdcd8467e986182b4705342b6a15e">https://github.com/project-zot/zot/commit/8a99a3ed231fdcd8467e986182b4705342b6a15e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48374">https://nvd.nist.gov/vuln/detail/CVE-2025-48374</a></li>
<li><a href="https://github.com/advisories/GHSA-c37v-3c8w-crq8">https://github.com/advisories/GHSA-c37v-3c8w-crq8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c37v-3c8w-crq8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-22T20:33:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gofiber/fiber/v2] Fiber panics when fiber.Ctx.BodyParser parses invalid range index]]></title>
        <id>https://github.com/advisories/GHSA-hg3g-gphw-5hhm</id>
        <link href="https://github.com/advisories/GHSA-hg3g-gphw-5hhm"/>
        <updated>2025-05-22T20:08:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using the <code>fiber.Ctx.BodyParser</code> to parse into a struct with range values, a panic occurs when trying to parse a negative range index</p>
<h3 id="details">Details</h3>
<p><code>fiber.Ctx.BodyParser</code> can map flat data to nested slices using <code>key[idx]value</code> syntax, however when idx is negative, it causes a panic instead of returning an error stating it cannot process the data. </p>
<p>Since this data is user-provided, this could lead to denial of service for anyone relying on this <code>fiber.Ctx.BodyParser</code>  functionality  </p>
<h3 id="reproducing">Reproducing</h3>
<p>Take a simple GoFiberV2 server which returns a JSON encoded version of the FormData</p>
<pre><code class="language-go">package main

import (
    "encoding/json"
    "fmt"
    "net/http"

    "github.com/gofiber/fiber/v2"
)

type RequestBody struct {
    NestedContent []*struct {
        Value string `form:"value"`
    } `form:"nested-content"`
}

func main() {
    app := fiber.New()

    app.Post("/", func(c *fiber.Ctx) error {
        formData := RequestBody{}
        if err := c.BodyParser(&amp;formData); err != nil {
            fmt.Println(err)
            return c.SendStatus(http.StatusUnprocessableEntity)
        }
                c.Set("Content-Type", "application/json")
                s, _ := json.Marshal(formData)
                return c.SendString(string(s))
    })

    fmt.Println(app.Listen(":3000"))
}
</code></pre>
<p><strong>Correct Behaviour</strong>
Send a valid request such as:</p>
<pre><code class="language-bash">curl --location 'localhost:3000' \
--form 'nested-content[0].value="Foo"' \
--form 'nested-content[1].value="Bar"'
</code></pre>
<p>You recieve valid JSON</p>
<pre><code class="language-json">{"NestedContent":[{"Value":"Foo"},{"Value":"Bar"}]}
</code></pre>
<p><strong>Crashing behaviour</strong>
Send an invalid request such as:</p>
<pre><code class="language-bash">curl --location 'localhost:3000' \
--form 'nested-content[-1].value="Foo"'
</code></pre>
<p>The server panics and crashes</p>
<pre><code>panic: reflect: slice index out of range

goroutine 8 [running]:
reflect.Value.Index({0x738000?, 0xc000010858?, 0x0?}, 0x738000?)
        /usr/lib/go-1.24/src/reflect/value.go:1418 +0x167
github.com/gofiber/fiber/v2/internal/schema.(*Decoder).decode(0xc00002c570, {0x75d420?, 0xc000010858?, 0x7ff424822108?}, {0xc00001c498, 0x17}, {0xc00014e2d0, 0x2, 0x2}, {0xc00002c710, ...})
[...]
</code></pre>
<h3 id="impact">Impact</h3>
<p>Anyone using <code>fiber.Ctx.BodyParser</code> can/will have their servers crashed when an invalid payload is sent</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gofiber/fiber/security/advisories/GHSA-hg3g-gphw-5hhm">https://github.com/gofiber/fiber/security/advisories/GHSA-hg3g-gphw-5hhm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48075">https://nvd.nist.gov/vuln/detail/CVE-2025-48075</a></li>
<li><a href="https://github.com/gofiber/fiber/commit/e115c08b8f059a4a031b492aa9eef0712411853d">https://github.com/gofiber/fiber/commit/e115c08b8f059a4a031b492aa9eef0712411853d</a></li>
<li><a href="https://github.com/advisories/GHSA-hg3g-gphw-5hhm">https://github.com/advisories/GHSA-hg3g-gphw-5hhm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg3g-gphw-5hhm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-22T20:08:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Cross-Site-Scripting (XSS) via custom loaded frontend plugin]]></title>
        <id>https://github.com/advisories/GHSA-q53q-gxq9-mgrj</id>
        <link href="https://github.com/advisories/GHSA-q53q-gxq9-mgrj"/>
        <updated>2025-05-22T18:50:44.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability exists in Grafana caused by combining a client path traversal and open redirect. This allows attackers to redirect users to a website that hosts a frontend plugin that will execute arbitrary JavaScript. This vulnerability does not require editor permissions and if anonymous access is enabled, the XSS will work. If the Grafana Image Renderer plugin is installed, it is possible to exploit the open redirect to achieve a full read SSRF.</p>
<p>The default Content-Security-Policy (CSP) in Grafana will block the XSS though the <code>connect-src</code> directive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4123">https://nvd.nist.gov/vuln/detail/CVE-2025-4123</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2025-4123">https://grafana.com/security/security-advisories/cve-2025-4123</a></li>
<li><a href="https://github.com/grafana/grafana/commit/c7a690348df761d41b659224cbc50a46a0c0e4cc">https://github.com/grafana/grafana/commit/c7a690348df761d41b659224cbc50a46a0c0e4cc</a></li>
<li><a href="https://github.com/advisories/GHSA-q53q-gxq9-mgrj">https://github.com/advisories/GHSA-q53q-gxq9-mgrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q53q-gxq9-mgrj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-22T09:33:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/babylonlabs-io/babylon] Babylon Integer Overflow in Distribution Module CumulativeRewardRatio Calculation Leading to Chain Halt]]></title>
        <id>https://github.com/advisories/GHSA-869w-47c6-fq8q</id>
        <link href="https://github.com/advisories/GHSA-869w-47c6-fq8q"/>
        <updated>2025-05-22T14:57:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Minting large amount of tokens through ibc transfer and then depositing them in validator rewards pool (via <code>DepositValidatorRewardsPool</code> message) can lead to integer overflow panic when calculating <code>cumulative_reward_ratio</code> for the validator.</p>
<p>This calculation happens in <code>x/epoching</code> module <code>EndBlocker</code>, thus the panic will halt the chain.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service - Due to panic in the <code>EndBlocker</code> Babylon Genesis will halt</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-869w-47c6-fq8q">https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-869w-47c6-fq8q</a></li>
<li><a href="https://github.com/babylonlabs-io/babylon/commit/f0a29d60f206268b56992fa50f38a48077eb4f59">https://github.com/babylonlabs-io/babylon/commit/f0a29d60f206268b56992fa50f38a48077eb4f59</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3687">https://pkg.go.dev/vuln/GO-2025-3687</a></li>
<li><a href="https://github.com/advisories/GHSA-869w-47c6-fq8q">https://github.com/advisories/GHSA-869w-47c6-fq8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-869w-47c6-fq8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T14:05:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/babylonlabs-io/babylon] Babylon Finality Provider `MsgCommitPubRandList` replay attack]]></title>
        <id>https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</id>
        <link href="https://github.com/advisories/GHSA-7mm3-vfg8-7rg6"/>
        <updated>2025-05-22T14:56:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A high vulnerability exists in the Babylon protocol's x/finality module due to a lack of domain separation in signed messages, combined with insufficient validation in the MsgCommitPubRandList handler. Specifically, the handler does not enforce that the submitted Commitment field is 32 bytes long. This allows an attacker to replay a signature originally generated for a different message (e.g., a Proof-of-Possession in MsgCreateFinalityProvider) as a MsgCommitPubRandList. By crafting the message parameters, an attacker can use the typically 20-byte address bytes (from the PoP context) to form the StartHeight, NumPubRand, and a shorter-than-expected Commitment (e.g., 4 bytes). The replayed signature will pass verification for this crafted message, leading to the injection of an invalid PubRand commitment.</p>
<h3 id="impact">Impact</h3>
<p>Successful exploitation of this vulnerability, specifically via the PoP signature replay, allows an attacker to store an invalid PubRand commitment (with a non-standard length, e.g., 4 bytes) for a targeted Finality Provider (FP). Despite the commitment itself being malformed, it's the associated StartHeight and NumPubRand (derived from the replayed address bytes and typically very large) that cause severe consequences</p>
<h3 id="future-recommendations">Future recommendations</h3>
<p>To minimize future risk of such attacks, all finality providers should:</p>
<ol>
<li>Never re-use your finality provider EOTS across the networks (e.g., the testnet) or for any other purpose. </li>
<li>Never use EOTS keys to sign any other data than relevant to in-protocol messages. Ideally EOTS key should only be used to:<ul>
<li>Sign initial proof of possession message</li>
<li>Sign periodic randomness commits</li>
<li>Sign finality votes with every block</li>
</ul>
</li>
</ol>
<h3 id="finder">Finder</h3>
<p>Vulnerability discovered by:</p>
<ul>
<li>Marco Nunes</li>
<li><a href="https://x.com/marcotnunes">https://x.com/marcotnunes</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6">https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6</a></li>
<li><a href="https://github.com/babylonlabs-io/babylon/commit/cb5d0ecae5cebc116d09296baaed25f715f904df">https://github.com/babylonlabs-io/babylon/commit/cb5d0ecae5cebc116d09296baaed25f715f904df</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3686">https://pkg.go.dev/vuln/GO-2025-3686</a></li>
<li><a href="https://github.com/advisories/GHSA-7mm3-vfg8-7rg6">https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T14:05:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/Ackites/KillWxapkg] Ackites KillWxapkg  Zip Bomb Resource Exhaustion]]></title>
        <id>https://github.com/advisories/GHSA-pqqp-7cp8-vxvf</id>
        <link href="https://github.com/advisories/GHSA-pqqp-7cp8-vxvf"/>
        <updated>2025-05-21T20:11:04.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Ackites KillWxapkg up to 2.4.1. It has been rated as problematic. This issue affects some unknown processing of the component wxapkg File Decompression Handler. The manipulation leads to resource consumption. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5031">https://nvd.nist.gov/vuln/detail/CVE-2025-5031</a></li>
<li><a href="https://github.com/Ackites/KillWxapkg/issues/86">https://github.com/Ackites/KillWxapkg/issues/86</a></li>
<li><a href="https://vuldb.com/?ctiid.309851">https://vuldb.com/?ctiid.309851</a></li>
<li><a href="https://vuldb.com/?id.309851">https://vuldb.com/?id.309851</a></li>
<li><a href="https://vuldb.com/?submit.580524">https://vuldb.com/?submit.580524</a></li>
<li><a href="https://github.com/advisories/GHSA-pqqp-7cp8-vxvf">https://github.com/advisories/GHSA-pqqp-7cp8-vxvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqqp-7cp8-vxvf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-21T18:33:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/Shopify/ejson2env] Insufficient input sanitization in ejson2env ]]></title>
        <id>https://github.com/advisories/GHSA-2c47-m757-32g6</id>
        <link href="https://github.com/advisories/GHSA-2c47-m757-32g6"/>
        <updated>2025-05-27T19:00:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>ejson2env</code> tool has a vulnerability related to how it writes to <code>stdout</code>. Specifically, the tool is intended to write an export statement for environment variables and their values. However, due to inadequate output sanitization, there is a potential risk where variable names or values may include malicious content, resulting in additional unintended commands being output to <code>stdout</code>. If this output is improperly utilized in further command execution, it could lead to command injection vulnerabilities, allowing an attacker to execute arbitrary commands on the host system.</p>
<h3 id="details">Details</h3>
<p>The vulnerability exists because environment variables are not properly sanitized during the decryption phase, which enables malicious keys or encrypted values to inject commands.</p>
<h3 id="impact">Impact</h3>
<p>An attacker with control over  <code>.ejson</code> files can inject commands in the environment where <code>source $(ejson2env)</code>  or <code>eval ejson2env</code> are executed.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Update to a version of <code>ejson2env</code> that sanitizes the output during decryption or</li>
<li>Do not use <code>ejson2env</code> to decrypt untrusted user secrets or</li>
<li>Do not evaluate or execute the direct output from <code>ejson2env</code> without removing nonprintable characters.</li>
</ul>
<h3 id="credit">Credit</h3>
<p>Thanks to security researcher <a href="https://hackerone.com/demonia?type=user">Demonia</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Shopify/ejson2env/security/advisories/GHSA-2c47-m757-32g6">https://github.com/Shopify/ejson2env/security/advisories/GHSA-2c47-m757-32g6</a></li>
<li><a href="https://github.com/Shopify/ejson2env/commit/592b3ceea967fee8b064e70983e8cec087b6d840">https://github.com/Shopify/ejson2env/commit/592b3ceea967fee8b064e70983e8cec087b6d840</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48069">https://nvd.nist.gov/vuln/detail/CVE-2025-48069</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ejson2env/CVE-2025-48069.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ejson2env/CVE-2025-48069.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2c47-m757-32g6">https://github.com/advisories/GHSA-2c47-m757-32g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2c47-m757-32g6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-21T18:32:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/Shopify/ejson2env/v2] Insufficient input sanitization in ejson2env ]]></title>
        <id>https://github.com/advisories/GHSA-2c47-m757-32g6</id>
        <link href="https://github.com/advisories/GHSA-2c47-m757-32g6"/>
        <updated>2025-05-27T19:00:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>ejson2env</code> tool has a vulnerability related to how it writes to <code>stdout</code>. Specifically, the tool is intended to write an export statement for environment variables and their values. However, due to inadequate output sanitization, there is a potential risk where variable names or values may include malicious content, resulting in additional unintended commands being output to <code>stdout</code>. If this output is improperly utilized in further command execution, it could lead to command injection vulnerabilities, allowing an attacker to execute arbitrary commands on the host system.</p>
<h3 id="details">Details</h3>
<p>The vulnerability exists because environment variables are not properly sanitized during the decryption phase, which enables malicious keys or encrypted values to inject commands.</p>
<h3 id="impact">Impact</h3>
<p>An attacker with control over  <code>.ejson</code> files can inject commands in the environment where <code>source $(ejson2env)</code>  or <code>eval ejson2env</code> are executed.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Update to a version of <code>ejson2env</code> that sanitizes the output during decryption or</li>
<li>Do not use <code>ejson2env</code> to decrypt untrusted user secrets or</li>
<li>Do not evaluate or execute the direct output from <code>ejson2env</code> without removing nonprintable characters.</li>
</ul>
<h3 id="credit">Credit</h3>
<p>Thanks to security researcher <a href="https://hackerone.com/demonia?type=user">Demonia</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Shopify/ejson2env/security/advisories/GHSA-2c47-m757-32g6">https://github.com/Shopify/ejson2env/security/advisories/GHSA-2c47-m757-32g6</a></li>
<li><a href="https://github.com/Shopify/ejson2env/commit/592b3ceea967fee8b064e70983e8cec087b6d840">https://github.com/Shopify/ejson2env/commit/592b3ceea967fee8b064e70983e8cec087b6d840</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48069">https://nvd.nist.gov/vuln/detail/CVE-2025-48069</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ejson2env/CVE-2025-48069.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ejson2env/CVE-2025-48069.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2c47-m757-32g6">https://github.com/advisories/GHSA-2c47-m757-32g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2c47-m757-32g6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-21T18:32:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd/v2] containerd CRI plugin: Incorrect cgroup hierarchy assignment for containers running in usernamespaced Kubernetes pods.]]></title>
        <id>https://github.com/advisories/GHSA-cxfp-7pvr-95ff</id>
        <link href="https://github.com/advisories/GHSA-cxfp-7pvr-95ff"/>
        <updated>2025-05-21T19:41:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>A bug was found in the containerd's CRI implementation where containerd doesn't put usernamespaced containers under the Kubernetes' cgroup hierarchy, therefore some Kubernetes limits are not honored. This may cause a denial of service of the Kubernetes node.</p>
<h1 id="patches">Patches</h1>
<p>This bug has been fixed in containerd 2.0.5+ and 2.1.0+. Users should update to these versions to resolve the issue.</p>
<h1 id="workarounds">Workarounds</h1>
<p>Disable usernamespaced pods in Kubernetes temporarily.</p>
<h1 id="credits">Credits</h1>
<p>The containerd project would like to thank Rodrigo Campos Catelin and Piotr Rogowski for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a>.</p>
<h1 id="for-more-information">For more information</h1>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-cxfp-7pvr-95ff">https://github.com/containerd/containerd/security/advisories/GHSA-cxfp-7pvr-95ff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47291">https://nvd.nist.gov/vuln/detail/CVE-2025-47291</a></li>
<li><a href="https://github.com/advisories/GHSA-cxfp-7pvr-95ff">https://github.com/advisories/GHSA-cxfp-7pvr-95ff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxfp-7pvr-95ff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-21T18:01:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cilium/hubble] Character injection in Hubble CLI]]></title>
        <id>https://github.com/advisories/GHSA-274q-79q9-52j7</id>
        <link href="https://github.com/advisories/GHSA-274q-79q9-52j7"/>
        <updated>2025-05-21T17:16:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A network attacker could inject malicious control characters into Hubble CLI terminal output, potentially leading to loss of integrity and manipulation of the output. This could be leveraged to conceal log entries, rewrite output, or even make the terminal temporarily unusable. Exploitation of this attack would require the victim to be monitoring Kafka traffic using <a href="https://docs.cilium.io/en/stable/observability/visibility/#layer-7-protocol-visibility">Layer 7 Protocol Visibility</a> at the time of the attack.</p>
<h3 id="patches">Patches</h3>
<p>This issue affects all versions of Hubble CLI before v1.17.2. The issue is patched in Hubble CLI v1.17.2, via <a href="https://github.com/cilium/cilium/pull/37401">https://github.com/cilium/cilium/pull/37401</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Hubble CLI users who are unable to upgrade can direct their Hubble flows to a log file and inspect the output within a text editor.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>The Cilium community has worked together with members of Isovalent and the Cisco ASIG team to prepare these mitigations. Special thanks to @bipierce-cisco and @kokelley-cisco for reporting the issue and to @devodev for the fix.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please reach out on <a href="https://docs.cilium.io/en/latest/community/community/#slack">Slack</a>.</p>
<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href="mailto:security@cilium.io">security@cilium.io</a>. This is a private mailing list for the Cilium security team, and your report will be treated as top priority.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cilium/hubble/security/advisories/GHSA-274q-79q9-52j7">https://github.com/cilium/hubble/security/advisories/GHSA-274q-79q9-52j7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48056">https://nvd.nist.gov/vuln/detail/CVE-2025-48056</a></li>
<li><a href="https://github.com/cilium/cilium/pull/37401">https://github.com/cilium/cilium/pull/37401</a></li>
<li><a href="https://github.com/advisories/GHSA-274q-79q9-52j7">https://github.com/advisories/GHSA-274q-79q9-52j7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-274q-79q9-52j7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-21T17:16:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd/v2] containerd allows host filesystem access on pull]]></title>
        <id>https://github.com/advisories/GHSA-cm76-qm8v-3j95</id>
        <link href="https://github.com/advisories/GHSA-cm76-qm8v-3j95"/>
        <updated>2025-05-21T16:53:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A time-of-check to time-of-use (TOCTOU) vulnerability was found in containerd v2.1.0. While unpacking an image during an image pull, specially crafted container images could arbitrarily modify the host file system. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in the following containerd versions:</p>
<ul>
<li>2.1.1</li>
</ul>
<p>The only affected version of containerd is 2.1.0.  Other versions of containerd are not affected.</p>
<p>Users should update to this version to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images.</p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank Tõnis Tiigi for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a>.</p>
<h3 id="references">References</h3>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-47290">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-47290</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-cm76-qm8v-3j95">https://github.com/containerd/containerd/security/advisories/GHSA-cm76-qm8v-3j95</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47290">https://nvd.nist.gov/vuln/detail/CVE-2025-47290</a></li>
<li><a href="https://github.com/containerd/containerd/commit/cada13298fba85493badb6fecb6ccf80e49673cc">https://github.com/containerd/containerd/commit/cada13298fba85493badb6fecb6ccf80e49673cc</a></li>
<li><a href="https://github.com/containerd/containerd/releases/tag/v2.1.1">https://github.com/containerd/containerd/releases/tag/v2.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cm76-qm8v-3j95">https://github.com/advisories/GHSA-cm76-qm8v-3j95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cm76-qm8v-3j95</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-21T16:53:09.000Z</published>
    </entry>
</feed>