<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-05-13T04:02:32.459Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[llama-index] LlamaIndex Vulnerable to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-7c85-87cp-mr6g</id>
        <link href="https://github.com/advisories/GHSA-7c85-87cp-mr6g"/>
        <updated>2025-05-12T20:16:20.000Z</updated>
        <content type="html"><![CDATA[<p>A Denial of Service (DoS) vulnerability has been identified in the KnowledgeBaseWebReader class of the run-llama/llama_index project, affecting version ~ latest(v0.12.15). The vulnerability arises due to inappropriate secure coding measures, specifically the lack of proper implementation of the max_depth parameter in the get_article_urls function. This allows an attacker to exhaust Python's recursion limit through repeated function calls, leading to resource consumption and ultimately crashing the Python process.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1752">https://nvd.nist.gov/vuln/detail/CVE-2025-1752</a></li>
<li><a href="https://github.com/run-llama/llama_index/commit/3c65db2947271de3bd1927dc66a044da385de4da">https://github.com/run-llama/llama_index/commit/3c65db2947271de3bd1927dc66a044da385de4da</a></li>
<li><a href="https://huntr.com/bounties/cd7b9082-7d75-42e4-84f5-dbee23cbc467">https://huntr.com/bounties/cd7b9082-7d75-42e4-84f5-dbee23cbc467</a></li>
<li><a href="https://github.com/advisories/GHSA-7c85-87cp-mr6g">https://github.com/advisories/GHSA-7c85-87cp-mr6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7c85-87cp-mr6g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-10T15:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ironic] OpenStack Ironic fails to restrict paths used for file:// image URLs]]></title>
        <id>https://github.com/advisories/GHSA-q3m2-crgq-5p3q</id>
        <link href="https://github.com/advisories/GHSA-q3m2-crgq-5p3q"/>
        <updated>2025-05-08T22:07:16.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Ironic before 29.0.1 can write unintended files to a target node disk during image handling (if a deployment was performed via the API). A malicious project assigned as a node owner can provide a path to any local file (readable by ironic-conductor), which may then be written to the target node disk. This is difficult to exploit in practice, because a node deployed in this manner should never reach the ACTIVE state, but it still represents a danger in environments running with non-default, insecure configurations such as with automated cleaning disabled. The fixed versions are 24.1.3, 26.1.1, and 29.0.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-44021">https://nvd.nist.gov/vuln/detail/CVE-2025-44021</a></li>
<li><a href="https://bugs.launchpad.net/ironic/+bug/2107847">https://bugs.launchpad.net/ironic/+bug/2107847</a></li>
<li><a href="https://security.openstack.org/ossa/OSSA-2025-001.html">https://security.openstack.org/ossa/OSSA-2025-001.html</a></li>
<li><a href="https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce">https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/08/1">http://www.openwall.com/lists/oss-security/2025/05/08/1</a></li>
<li><a href="https://github.com/advisories/GHSA-q3m2-crgq-5p3q">https://github.com/advisories/GHSA-q3m2-crgq-5p3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q3m2-crgq-5p3q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-08T18:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ironic] OpenStack Ironic fails to restrict paths used for file:// image URLs]]></title>
        <id>https://github.com/advisories/GHSA-q3m2-crgq-5p3q</id>
        <link href="https://github.com/advisories/GHSA-q3m2-crgq-5p3q"/>
        <updated>2025-05-08T22:07:16.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Ironic before 29.0.1 can write unintended files to a target node disk during image handling (if a deployment was performed via the API). A malicious project assigned as a node owner can provide a path to any local file (readable by ironic-conductor), which may then be written to the target node disk. This is difficult to exploit in practice, because a node deployed in this manner should never reach the ACTIVE state, but it still represents a danger in environments running with non-default, insecure configurations such as with automated cleaning disabled. The fixed versions are 24.1.3, 26.1.1, and 29.0.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-44021">https://nvd.nist.gov/vuln/detail/CVE-2025-44021</a></li>
<li><a href="https://bugs.launchpad.net/ironic/+bug/2107847">https://bugs.launchpad.net/ironic/+bug/2107847</a></li>
<li><a href="https://security.openstack.org/ossa/OSSA-2025-001.html">https://security.openstack.org/ossa/OSSA-2025-001.html</a></li>
<li><a href="https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce">https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/08/1">http://www.openwall.com/lists/oss-security/2025/05/08/1</a></li>
<li><a href="https://github.com/advisories/GHSA-q3m2-crgq-5p3q">https://github.com/advisories/GHSA-q3m2-crgq-5p3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q3m2-crgq-5p3q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-08T18:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ironic] OpenStack Ironic fails to restrict paths used for file:// image URLs]]></title>
        <id>https://github.com/advisories/GHSA-q3m2-crgq-5p3q</id>
        <link href="https://github.com/advisories/GHSA-q3m2-crgq-5p3q"/>
        <updated>2025-05-08T22:07:16.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Ironic before 29.0.1 can write unintended files to a target node disk during image handling (if a deployment was performed via the API). A malicious project assigned as a node owner can provide a path to any local file (readable by ironic-conductor), which may then be written to the target node disk. This is difficult to exploit in practice, because a node deployed in this manner should never reach the ACTIVE state, but it still represents a danger in environments running with non-default, insecure configurations such as with automated cleaning disabled. The fixed versions are 24.1.3, 26.1.1, and 29.0.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-44021">https://nvd.nist.gov/vuln/detail/CVE-2025-44021</a></li>
<li><a href="https://bugs.launchpad.net/ironic/+bug/2107847">https://bugs.launchpad.net/ironic/+bug/2107847</a></li>
<li><a href="https://security.openstack.org/ossa/OSSA-2025-001.html">https://security.openstack.org/ossa/OSSA-2025-001.html</a></li>
<li><a href="https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce">https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/08/1">http://www.openwall.com/lists/oss-security/2025/05/08/1</a></li>
<li><a href="https://github.com/advisories/GHSA-q3m2-crgq-5p3q">https://github.com/advisories/GHSA-q3m2-crgq-5p3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q3m2-crgq-5p3q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-08T18:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has a denial-of-service possibility in strip_tags()]]></title>
        <id>https://github.com/advisories/GHSA-8j24-cjrq-gr2m</id>
        <link href="https://github.com/advisories/GHSA-8j24-cjrq-gr2m"/>
        <updated>2025-05-08T14:53:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 4.2 before 4.2.21, 5.1 before 5.1.9, and 5.2 before 5.2.1. The django.utils.html.strip_tags() function is vulnerable to a potential denial-of-service (slow performance) when processing inputs containing large sequences of incomplete HTML tags. The template filter striptags is also vulnerable, because it is built on top of strip_tags().</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32873">https://nvd.nist.gov/vuln/detail/CVE-2025-32873</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2025/may/07/security-releases">https://www.djangoproject.com/weblog/2025/may/07/security-releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/07/1">http://www.openwall.com/lists/oss-security/2025/05/07/1</a></li>
<li><a href="https://github.com/django/django/commit/9f3419b519799d69f2aba70b9d25abe2e70d03e0">https://github.com/django/django/commit/9f3419b519799d69f2aba70b9d25abe2e70d03e0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-37.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-37.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8j24-cjrq-gr2m">https://github.com/advisories/GHSA-8j24-cjrq-gr2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8j24-cjrq-gr2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-08T06:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has a denial-of-service possibility in strip_tags()]]></title>
        <id>https://github.com/advisories/GHSA-8j24-cjrq-gr2m</id>
        <link href="https://github.com/advisories/GHSA-8j24-cjrq-gr2m"/>
        <updated>2025-05-08T14:53:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 4.2 before 4.2.21, 5.1 before 5.1.9, and 5.2 before 5.2.1. The django.utils.html.strip_tags() function is vulnerable to a potential denial-of-service (slow performance) when processing inputs containing large sequences of incomplete HTML tags. The template filter striptags is also vulnerable, because it is built on top of strip_tags().</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32873">https://nvd.nist.gov/vuln/detail/CVE-2025-32873</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2025/may/07/security-releases">https://www.djangoproject.com/weblog/2025/may/07/security-releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/07/1">http://www.openwall.com/lists/oss-security/2025/05/07/1</a></li>
<li><a href="https://github.com/django/django/commit/9f3419b519799d69f2aba70b9d25abe2e70d03e0">https://github.com/django/django/commit/9f3419b519799d69f2aba70b9d25abe2e70d03e0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-37.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-37.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8j24-cjrq-gr2m">https://github.com/advisories/GHSA-8j24-cjrq-gr2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8j24-cjrq-gr2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-08T06:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has a denial-of-service possibility in strip_tags()]]></title>
        <id>https://github.com/advisories/GHSA-8j24-cjrq-gr2m</id>
        <link href="https://github.com/advisories/GHSA-8j24-cjrq-gr2m"/>
        <updated>2025-05-08T14:53:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 4.2 before 4.2.21, 5.1 before 5.1.9, and 5.2 before 5.2.1. The django.utils.html.strip_tags() function is vulnerable to a potential denial-of-service (slow performance) when processing inputs containing large sequences of incomplete HTML tags. The template filter striptags is also vulnerable, because it is built on top of strip_tags().</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32873">https://nvd.nist.gov/vuln/detail/CVE-2025-32873</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2025/may/07/security-releases">https://www.djangoproject.com/weblog/2025/may/07/security-releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/07/1">http://www.openwall.com/lists/oss-security/2025/05/07/1</a></li>
<li><a href="https://github.com/django/django/commit/9f3419b519799d69f2aba70b9d25abe2e70d03e0">https://github.com/django/django/commit/9f3419b519799d69f2aba70b9d25abe2e70d03e0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-37.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-37.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8j24-cjrq-gr2m">https://github.com/advisories/GHSA-8j24-cjrq-gr2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8j24-cjrq-gr2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-08T06:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kolla] OpenStack Kolla sudo privilege escalation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rvxr-pf5f-j2qj</id>
        <link href="https://github.com/advisories/GHSA-rvxr-pf5f-j2qj"/>
        <updated>2025-05-07T17:39:22.000Z</updated>
        <content type="html"><![CDATA[<p>A privilege escalation vulnerability exists in the sudo functionality of OpenStack Kolla git master 05194e7618. A misconfiguration in /etc/sudoers within a container can lead to increased privileges.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-38060">https://nvd.nist.gov/vuln/detail/CVE-2022-38060</a></li>
<li><a href="https://talosintelligence.com/vulnerability_reports/TALOS-2022-1589">https://talosintelligence.com/vulnerability_reports/TALOS-2022-1589</a></li>
<li><a href="https://github.com/openstack/kolla/commit/2a4a8fce31c12114e8f472c24dd96864b5bd2bd2">https://github.com/openstack/kolla/commit/2a4a8fce31c12114e8f472c24dd96864b5bd2bd2</a></li>
<li><a href="https://bugs.launchpad.net/kolla/+bug/1985784">https://bugs.launchpad.net/kolla/+bug/1985784</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2124758">https://bugzilla.redhat.com/show_bug.cgi?id=2124758</a></li>
<li><a href="https://github.com/advisories/GHSA-rvxr-pf5f-j2qj">https://github.com/advisories/GHSA-rvxr-pf5f-j2qj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvxr-pf5f-j2qj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-21T12:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Mezzanine] Mezzanine CMS Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2544-hpcq-6g27</id>
        <link href="https://github.com/advisories/GHSA-2544-hpcq-6g27"/>
        <updated>2025-05-06T18:51:10.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-Site Scripting (XSS) vulnerability exists in Mezzanine CMS 6.0.0 in the "View Entries" feature within the Forms module.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29573">https://nvd.nist.gov/vuln/detail/CVE-2025-29573</a></li>
<li><a href="https://github.com/stephenmcd/mezzanine">https://github.com/stephenmcd/mezzanine</a></li>
<li><a href="https://www.squadappsec.com/post/cve-2025-29573-persistent-xss-in-mezzanine-cms-6-0-0-via-malicious-filename">https://www.squadappsec.com/post/cve-2025-29573-persistent-xss-in-mezzanine-cms-6-0-0-via-malicious-filename</a></li>
<li><a href="https://github.com/advisories/GHSA-2544-hpcq-6g27">https://github.com/advisories/GHSA-2544-hpcq-6g27</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2544-hpcq-6g27</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-05T21:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] Remote Code Execution Vulnerability in vLLM Multi-Node Cluster Configuration]]></title>
        <id>https://github.com/advisories/GHSA-9pcc-gvx5-r5wm</id>
        <link href="https://github.com/advisories/GHSA-9pcc-gvx5-r5wm"/>
        <updated>2025-05-06T19:56:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="affected-environments">Affected Environments</h3>
<p>Note that this issue only affects the V0 engine, which has been off by default since v0.8.0. Further, the issue only applies to a deployment using tensor parallelism across multiple hosts, which we do not expect to be a common deployment pattern.</p>
<p>Since V0 is has been off by default since v0.8.0 and the fix is fairly invasive, we have decided not to fix this issue. Instead we recommend that users ensure their environment is on a secure network in case this pattern is in use.</p>
<p>The V1 engine is not affected by this issue.</p>
<h3 id="impact">Impact</h3>
<p>In a multi-node vLLM deployment using the V0 engine, vLLM uses ZeroMQ for some multi-node communication purposes. The secondary vLLM hosts open a <code>SUB</code> ZeroMQ socket and connect to an <code>XPUB</code> socket on the primary vLLM host.</p>
<p><a href="https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L295-L301">https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L295-L301</a></p>
<p>When data is received on this <code>SUB</code> socket, it is deserialized with <code>pickle</code>. This is unsafe, as it can be abused to execute code on a remote machine.</p>
<p><a href="https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L468-L470">https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L468-L470</a></p>
<p>Since the vulnerability exists in a client that connects to the primary vLLM host, this vulnerability serves as an escalation point. If the primary vLLM host is compromised, this vulnerability could be used to compromise the rest of the hosts in the vLLM deployment.</p>
<p>Attackers could also use other means to exploit the vulnerability without requiring access to the primary vLLM host. One example would be the use of ARP cache poisoning to redirect traffic to a malicious endpoint used to deliver a payload with arbitrary code to execute on the target machine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-9pcc-gvx5-r5wm">https://github.com/vllm-project/vllm/security/advisories/GHSA-9pcc-gvx5-r5wm</a></li>
<li><a href="https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L295-L301">https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L295-L301</a></li>
<li><a href="https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L468-L470">https://github.com/vllm-project/vllm/blob/c21b99b91241409c2fdf9f3f8c542e8748b317be/vllm/distributed/device_communicators/shm_broadcast.py#L468-L470</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30165">https://nvd.nist.gov/vuln/detail/CVE-2025-30165</a></li>
<li><a href="https://github.com/advisories/GHSA-9pcc-gvx5-r5wm">https://github.com/advisories/GHSA-9pcc-gvx5-r5wm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9pcc-gvx5-r5wm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-06T16:38:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langroid] Langroid Allows XXE Injection via XMLToolMessage]]></title>
        <id>https://github.com/advisories/GHSA-pw95-88fg-3j6f</id>
        <link href="https://github.com/advisories/GHSA-pw95-88fg-3j6f"/>
        <updated>2025-05-05T22:07:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A LLM application leveraging <code>XMLToolMessage</code> class may be exposed to untrusted XML input that could result in DoS and/or exposing local files with sensitive information.</p>
<h3 id="details">Details</h3>
<p><code>XMLToolMessage</code> uses <code>lxml</code> without safeguards:
<a href="https://github.com/langroid/langroid/blob/df6227e6c079ec22bb2768498423148d6685acff/langroid/agent/xml_tool_message.py#L51-L52">https://github.com/langroid/langroid/blob/df6227e6c079ec22bb2768498423148d6685acff/langroid/agent/xml_tool_message.py#L51-L52</a>
<code>lxml</code> is vulnerable to quadratic blowup attacks and processes external entity declarations for local files by default. 
Check here: <a href="https://pypi.org/project/defusedxml/#python-xml-libraries">https://pypi.org/project/defusedxml/#python-xml-libraries</a></p>
<h3 id="poc">PoC</h3>
<p>A typical Quadratic blowup XML payload looks like this:</p>
<pre><code class="language-xml">&lt;!DOCTYPE bomb [
&lt;!ENTITY a "aaaaaaaaaa"&gt;
&lt;!ENTITY b "&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;"&gt;
&lt;!ENTITY c "&amp;b;&amp;b;&amp;b;&amp;b;&amp;b;&amp;b;&amp;b;&amp;b;&amp;b;&amp;b;"&gt;
]&gt;
&lt;bomb&gt;&amp;c;&lt;/bomb&gt;
</code></pre>
<p>Here, &amp;a; expands to 10 characters, &amp;b; expands to 100, and &amp;c; expands to 1000, causing exponential memory usage and potentially crashing the application.</p>
<h3 id="fix">Fix</h3>
<p>Langroid 0.53.4 initializes <code>XMLParser</code> with flags to prevent XML External Entity (XXE), billion laughs, and external DTD attacks by disabling entity resolution, DTD loading, and network access.
<a href="https://github.com/langroid/langroid/commit/36e7e7db4dd1636de225c2c66c84052b1e9ac3c3">https://github.com/langroid/langroid/commit/36e7e7db4dd1636de225c2c66c84052b1e9ac3c3</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/langroid/langroid/security/advisories/GHSA-pw95-88fg-3j6f">https://github.com/langroid/langroid/security/advisories/GHSA-pw95-88fg-3j6f</a></li>
<li><a href="https://github.com/langroid/langroid/commit/36e7e7db4dd1636de225c2c66c84052b1e9ac3c3">https://github.com/langroid/langroid/commit/36e7e7db4dd1636de225c2c66c84052b1e9ac3c3</a></li>
<li><a href="https://github.com/langroid/langroid/blob/df6227e6c079ec22bb2768498423148d6685acff/langroid/agent/xml_tool_message.py#L51-L52">https://github.com/langroid/langroid/blob/df6227e6c079ec22bb2768498423148d6685acff/langroid/agent/xml_tool_message.py#L51-L52</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46726">https://nvd.nist.gov/vuln/detail/CVE-2025-46726</a></li>
<li><a href="https://github.com/advisories/GHSA-pw95-88fg-3j6f">https://github.com/advisories/GHSA-pw95-88fg-3j6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pw95-88fg-3j6f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-05T20:40:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] Mobile Security Framework (MobSF) Allows Web Server Resource Exhaustion via ZIP of Death Attack]]></title>
        <id>https://github.com/advisories/GHSA-c5vg-26p8-q8cr</id>
        <link href="https://github.com/advisories/GHSA-c5vg-26p8-q8cr"/>
        <updated>2025-05-05T22:07:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerable MobSF Versions:</strong> &lt;= v4.3.2</p>
<p><strong>Details:</strong>
MobSF is a widely adopted mobile application security testing tool used by security teams across numerous organizations. Typically, MobSF is deployed on centralized internal or cloud-based servers that also host other security tools and web applications. Access to the MobSF web interface is often granted to internal security teams, audit teams, and external vendors. </p>
<p>MobSF provides a feature that allows users to upload ZIP files for static analysis. Upon upload, these ZIP files are automatically extracted and stored within the MobSF directory. However, this functionality lacks a check on the total uncompressed size of the ZIP file, making it vulnerable to a ZIP of Death (zip bomb) attack.</p>
<p>Due to the absence of safeguards against oversized extractions, an attacker can craft a specially prepared ZIP file that is small in compressed form but expands to a massive size upon extraction. Exploiting this, an attacker can exhaust the server's disk space, leading to a complete denial of service (DoS) not just for MobSF, but also for any other applications or websites hosted on the same server.</p>
<p><strong>Attack Scenario:</strong>
Suppose the server hosting MobSF has 5 GB of free disk space..</p>
<p>A malicious user will first create a genuine hello world application code using android studio and inside this code directory (app//src/main/java/APK_PATH/bomb.txt) he'll place a bomb.txt file. </p>
<p>This bomb.txt file will have billions of zeros to increase the file size on storage and make it to 4.99 GB. Now suppose the resultant hello world code directory including original code and bomb.txt files will be of 5GB, so the attacker will compress the entire hello world code directory to zip and resultant zip will be around 12-15 MBs only.</p>
<p>An attacker will upload this zip bomb using the MobSF web interface or API. So an attacker will spend only 12-15 MB of his bandwidth. </p>
<p>Now the MobSF tool will extract that zip file and it'll be automatically converted into its original size 5GB.</p>
<p>So now a web server will be forced to store 5GB of data and its storage will be exhausted by an attacker's single request. </p>
<p>Web server's storage and resources will not be able to handle other running websites or applications as the storage is exhausted. This way an attacker can achieve complete Web Server Resource Exhaustion. </p>
<p><strong>Impact:</strong></p>
<ol>
<li>This vulnerability can lead to complete server disruption in an organization which can affect other internal portals and tools too (which are hosted on the same server).</li>
<li>If some organization has created their customised cloud based mobile security tool using MobSF core then an attacker can exploit this vulnerability to crash their servers.</li>
</ol>
<p><strong>POC:</strong></p>
<ol>
<li>Screen Recording :<br><a href="https://drive.google.com/file/d/1x7GEPJr2T04Ij5ZFQQtGWvUWXtM4M4aw/view?usp=sharing">https://drive.google.com/file/d/1x7GEPJr2T04Ij5ZFQQtGWvUWXtM4M4aw/view?usp=sharing</a></li>
<li>POC Zip Bomb File (Upon extraction this file will consume 6GB of storage) :  <a href="https://drive.google.com/file/d/1N3apL1ySMecnt3HUQcDcuH7hsjPrdwUj/view?usp=sharing">https://drive.google.com/file/d/1N3apL1ySMecnt3HUQcDcuH7hsjPrdwUj/view?usp=sharing</a></li>
</ol>
<p><strong>Mitigation:</strong>
It is recommended to implement a safeguard that checks the total uncompressed size of any uploaded ZIP file before extraction. If the estimated uncompressed size exceeds a safe threshold (e.g., 100 MB), MobSF should reject the file and notify the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-c5vg-26p8-q8cr">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-c5vg-26p8-q8cr</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/6987a946485a795f4fd38cebdb4860b368a1995d">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/6987a946485a795f4fd38cebdb4860b368a1995d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46730">https://nvd.nist.gov/vuln/detail/CVE-2025-46730</a></li>
<li><a href="https://github.com/advisories/GHSA-c5vg-26p8-q8cr">https://github.com/advisories/GHSA-c5vg-26p8-q8cr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5vg-26p8-q8cr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-05T19:32:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[browser-use] Browser Use allows bypassing `allowed_domains` by putting a decoy domain in http auth username portion of a URL]]></title>
        <id>https://github.com/advisories/GHSA-x39x-9qw5-ghrf</id>
        <link href="https://github.com/advisories/GHSA-x39x-9qw5-ghrf"/>
        <updated>2025-05-05T18:25:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>During a manual source code review, <a href="https://arimlabs.ai"><strong>ARIMLABS.AI</strong></a> researchers identified that the <code>browser_use</code> module includes an embedded whitelist functionality to restrict URLs that can be visited. This restriction is enforced during agent initialization. However, it was discovered that these measures can be bypassed, leading to severe security implications.  </p>
<h3 id="details">Details</h3>
<p><strong>File:</strong> <code>browser_use/browser/context.py</code>  </p>
<p>The <code>BrowserContextConfig</code> class defines an <code>allowed_domains</code> list, which is intended to limit accessible domains. This list is checked in the <code>_is_url_allowed()</code> method before navigation:</p>
<pre><code class="language-python">@dataclass
class BrowserContextConfig:
    """
    [STRIPPED]
    """
    cookies_file: str | None = None
    minimum_wait_page_load_time: float = 0.5
    wait_for_network_idle_page_load_time: float = 1
    maximum_wait_page_load_time: float = 5
    wait_between_actions: float = 1

    disable_security: bool = True

    browser_window_size: BrowserContextWindowSize = field(default_factory=lambda: {'width': 1280, 'height': 1100})
    no_viewport: Optional[bool] = None

    save_recording_path: str | None = None
    save_downloads_path: str | None = None
    trace_path: str | None = None
    locale: str | None = None
    user_agent: str = (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'
    )

    highlight_elements: bool = True
    viewport_expansion: int = 500
    allowed_domains: list[str] | None = None
    include_dynamic_attributes: bool = True

    _force_keep_context_alive: bool = False
</code></pre>
<p>The _is_url_allowed() method is responsible for checking whether a given URL is permitted:</p>
<pre><code class="language-python">def _is_url_allowed(self, url: str) -&gt; bool:
    """Check if a URL is allowed based on the whitelist configuration."""
    if not self.config.allowed_domains:
        return True

    try:
        from urllib.parse import urlparse

        parsed_url = urlparse(url)
        domain = parsed_url.netloc.lower()

        # Remove port number if present
        if ':' in domain:
            domain = domain.split(':')[0]

        # Check if domain matches any allowed domain pattern
        return any(
            domain == allowed_domain.lower() or domain.endswith('.' + allowed_domain.lower())
            for allowed_domain in self.config.allowed_domains
        )
    except Exception as e:
        logger.error(f'Error checking URL allowlist: {str(e)}')
        return False
</code></pre>
<p>The core issue stems from the line <code>domain = domain.split(':')[0]</code>, which allows an attacker to manipulate basic authentication credentials by providing a username:password pair. By replacing the username with a whitelisted domain, the check can be bypassed, even though the actual domain remains different.</p>
<h3 id="proof-of-concept-poc">Proof of Concept (PoC)</h3>
<p>Set allowed_domains to ['example.com'] and use the following URL:</p>
<p><a href="https://example.com:pass@localhost:8080">https://example.com:pass@localhost:8080</a></p>
<p>This allows bypassing all whitelist controls and accessing restricted internal services.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>Affected all users relying on this functionality for security.</li>
<li>Potential for unauthorized enumeration of localhost services and internal networks.</li>
<li>Ability to bypass domain whitelisting, leading to unauthorized browsing.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/browser-use/browser-use/security/advisories/GHSA-x39x-9qw5-ghrf">https://github.com/browser-use/browser-use/security/advisories/GHSA-x39x-9qw5-ghrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47241">https://nvd.nist.gov/vuln/detail/CVE-2025-47241</a></li>
<li><a href="https://github.com/browser-use/browser-use/pull/1561">https://github.com/browser-use/browser-use/pull/1561</a></li>
<li><a href="https://github.com/browser-use/browser-use/releases/tag/0.1.45">https://github.com/browser-use/browser-use/releases/tag/0.1.45</a></li>
<li><a href="https://github.com/advisories/GHSA-x39x-9qw5-ghrf">https://github.com/advisories/GHSA-x39x-9qw5-ghrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x39x-9qw5-ghrf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-05T18:25:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[browser-use] Duplicate Advisory: `allowed_domains` can be bypassed by putting a decoy domain in http auth username portion of a URL]]></title>
        <id>https://github.com/advisories/GHSA-f54f-hr32-586f</id>
        <link href="https://github.com/advisories/GHSA-f54f-hr32-586f"/>
        <updated>2025-05-05T18:24:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-x39x-9qw5-ghrf. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>In browser-use (aka Browser Use) before 0.1.45, URL parsing of allowed_domains is mishandled because userinfo can be placed in the authority component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/browser-use/browser-use/security/advisories/GHSA-x39x-9qw5-ghrf">https://github.com/browser-use/browser-use/security/advisories/GHSA-x39x-9qw5-ghrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47241">https://nvd.nist.gov/vuln/detail/CVE-2025-47241</a></li>
<li><a href="https://github.com/browser-use/browser-use/pull/1561">https://github.com/browser-use/browser-use/pull/1561</a></li>
<li><a href="https://github.com/browser-use/browser-use/releases/tag/0.1.45">https://github.com/browser-use/browser-use/releases/tag/0.1.45</a></li>
<li><a href="https://github.com/advisories/GHSA-f54f-hr32-586f">https://github.com/advisories/GHSA-f54f-hr32-586f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f54f-hr32-586f</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-03T21:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] Mobile Security Framework (MobSF) Allows Stored Cross Site Scripting (XSS) via malicious SVG Icon Upload]]></title>
        <id>https://github.com/advisories/GHSA-mwfg-948f-2cc5</id>
        <link href="https://github.com/advisories/GHSA-mwfg-948f-2cc5"/>
        <updated>2025-05-05T22:06:28.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerable MobSF Versions:</strong>  &lt;= v4.3.2</p>
<p><strong>CVSS V4.0 Score:</strong> 8.6 (CVSS:4.0/AV:N/AC:L/AT:N/PR:L/UI:P/VC:H/VI:H/VA:L/SC:N/SI:N/SA:N)</p>
<p><strong>Details:</strong>
A Stored Cross-Site Scripting (XSS) vulnerability has been identified in MobSF versions ≤ 4.3.2. The vulnerability arises from improper sanitization of user-supplied SVG files during the Android APK analysis workflow.</p>
<p>When an Android Studio project contains a malicious SVG file as an app icon (e.g path, /app/src/main/res/mipmap-hdpi/ic_launcher.svg), and the project is zipped and uploaded to MobSF, the tool processes and extracts the contents without validating or sanitizing the SVG. </p>
<p>Upcon ZIP extraction this icon file is saved by MobSF to: user/.MobSF/downloads/.svg</p>
<p>This file becomes publicly accessible via the web interface at:</p>
<p><a href="http://127.0.0.1:8081/download/filename.svg">http://127.0.0.1:8081/download/filename.svg</a></p>
<p>If the SVG contains embedded JavaScript (e.g., an XSS payload), accessing this URL via a browser leads to the execution of the script in the context of the MobSF user session, resulting in stored XSS.</p>
<p><strong>Proof Of Concept:</strong></p>
<ol>
<li>Create a malicious SVG file (ic_launcher.svg) with an embedded XSS payload.</li>
</ol>
<p><img alt="01" src="https://github.com/user-attachments/assets/9a89dec2-0671-490d-aba6-f38470bd84ee"></p>
<ol start="2">
<li>Place the file in the Android Studio project directory: /app/src/main/res/mipmap-hdpi/ic_launcher.svg</li>
</ol>
<p><img alt="02" src="https://github.com/user-attachments/assets/fc66f659-9f90-4be8-92c3-c5f26e1e11de"></p>
<ol start="3">
<li>Zip the project directory and upload it to MobSF.</li>
</ol>
<p><img alt="03" src="https://github.com/user-attachments/assets/a8465037-3b7a-42b7-89cf-5102c27917e7"></p>
<ol start="4">
<li>After the scan, navigate to the "Recent Scans" page in the MobSF web interface and click on the scan entry and open the icon file in a new browser tab.</li>
</ol>
<p><img alt="04" src="https://github.com/user-attachments/assets/5355e4d3-89a2-403a-a1a7-f60389fdbb8d"></p>
<ol start="5">
<li>The XSS payload is executed, confirming the vulnerability.</li>
</ol>
<p><img alt="05" src="https://github.com/user-attachments/assets/bc1e3493-1ffc-4598-b122-85459a406748"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-mwfg-948f-2cc5">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-mwfg-948f-2cc5</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/6987a946485a795f4fd38cebdb4860b368a1995d">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/6987a946485a795f4fd38cebdb4860b368a1995d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46335">https://nvd.nist.gov/vuln/detail/CVE-2025-46335</a></li>
<li><a href="https://github.com/advisories/GHSA-mwfg-948f-2cc5">https://github.com/advisories/GHSA-mwfg-948f-2cc5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mwfg-948f-2cc5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-05T14:55:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flair] Flair allows arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-9rw2-jf8x-cgwm</id>
        <link href="https://github.com/advisories/GHSA-9rw2-jf8x-cgwm"/>
        <updated>2025-05-02T14:40:28.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as critical, was found in flairNLP flair 0.14.0. Affected is the function ClusteringModel of the file flair\models\clustering.py of the component Mode File Loader. The manipulation leads to code injection. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10073">https://nvd.nist.gov/vuln/detail/CVE-2024-10073</a></li>
<li><a href="https://github.com/bayuncao/vul-cve-20">https://github.com/bayuncao/vul-cve-20</a></li>
<li><a href="https://github.com/bayuncao/vul-cve-20/blob/main/PoC.py">https://github.com/bayuncao/vul-cve-20/blob/main/PoC.py</a></li>
<li><a href="https://vuldb.com/?ctiid.280722">https://vuldb.com/?ctiid.280722</a></li>
<li><a href="https://vuldb.com/?id.280722">https://vuldb.com/?id.280722</a></li>
<li><a href="https://vuldb.com/?submit.420055">https://vuldb.com/?submit.420055</a></li>
<li><a href="https://github.com/flairNLP/flair/commit/fb27c7eb1d92855c27db820a108b17883a5d6fc1">https://github.com/flairNLP/flair/commit/fb27c7eb1d92855c27db820a108b17883a5d6fc1</a></li>
<li><a href="https://github.com/flairNLP/flair/releases/tag/v0.15.0">https://github.com/flairNLP/flair/releases/tag/v0.15.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9rw2-jf8x-cgwm">https://github.com/advisories/GHSA-9rw2-jf8x-cgwm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9rw2-jf8x-cgwm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-17T18:31:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] phi4mm: Quadratic Time Complexity in Input Token Processing​ leads to denial of service]]></title>
        <id>https://github.com/advisories/GHSA-vc6m-hm49-g9qg</id>
        <link href="https://github.com/advisories/GHSA-vc6m-hm49-g9qg"/>
        <updated>2025-04-30T17:27:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A critical performance vulnerability has been identified in the input preprocessing logic of the multimodal tokenizer. The code dynamically replaces placeholder tokens (e.g., &lt;|audio_*|&gt;, &lt;|image_*|&gt;) with repeated tokens based on precomputed lengths. Due to ​​inefficient list concatenation operations​​, the algorithm exhibits ​​quadratic time complexity (O(n²))​​, allowing malicious actors to trigger resource exhaustion via specially crafted inputs.</p>
<h3 id="details">Details</h3>
<p>​​Affected Component​​: input_processor_for_phi4mm function.
<a href="https://github.com/vllm-project/vllm/blob/8cac35ba435906fb7eb07e44fe1a8c26e8744f4e/vllm/model_executor/models/phi4mm.py#L1182-L1197">https://github.com/vllm-project/vllm/blob/8cac35ba435906fb7eb07e44fe1a8c26e8744f4e/vllm/model_executor/models/phi4mm.py#L1182-L1197</a></p>
<p>The code modifies the input_ids list in-place using input_ids = input_ids[:i] + tokens + input_ids[i+1:]. Each concatenation operation copies the entire list, leading to O(n) operations per replacement. For k placeholders expanding to m tokens, total time becomes O(kmn), approximating O(n²) in worst-case scenarios.</p>
<h3 id="poc">PoC</h3>
<p>Test data demonstrates exponential time growth:</p>
<pre><code class="language-python">test_cases = [100, 200, 400, 800, 1600, 3200, 6400]
run_times = [0.002, 0.007, 0.028, 0.136, 0.616, 2.707, 11.854]  # seconds
</code></pre>
<p>Doubling input size increases runtime by ~4x (consistent with O(n²)).</p>
<h3 id="impact">Impact</h3>
<p>​​Denial-of-Service (DoS):​​ An attacker could submit inputs with many placeholders (e.g., 10,000 &lt;|audio_1|&gt; tokens), causing CPU/memory exhaustion.
Example: 10,000 placeholders → ~100 million operations.</p>
<h3 id="remediation-recommendations">Remediation Recommendations​</h3>
<p>Precompute all placeholder positions and expansion lengths upfront.
Replace dynamic list concatenation with a single preallocated array.</p>
<pre><code class="language-python"># Pseudocode for O(n) solution
new_input_ids = []
for token in input_ids:
    if token is placeholder:
        new_input_ids.extend([token] * precomputed_length)
    else:
        new_input_ids.append(token)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-vc6m-hm49-g9qg">https://github.com/vllm-project/vllm/security/advisories/GHSA-vc6m-hm49-g9qg</a></li>
<li><a href="https://github.com/vllm-project/vllm/blob/8cac35ba435906fb7eb07e44fe1a8c26e8744f4e/vllm/model_executor/models/phi4mm.py#L1182-L1197">https://github.com/vllm-project/vllm/blob/8cac35ba435906fb7eb07e44fe1a8c26e8744f4e/vllm/model_executor/models/phi4mm.py#L1182-L1197</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46560">https://nvd.nist.gov/vuln/detail/CVE-2025-46560</a></li>
<li><a href="https://github.com/advisories/GHSA-vc6m-hm49-g9qg">https://github.com/advisories/GHSA-vc6m-hm49-g9qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc6m-hm49-g9qg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-29T16:43:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[transformers] Transformers Regular Expression Denial of Service (ReDoS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fpwr-67px-3qhx</id>
        <link href="https://github.com/advisories/GHSA-fpwr-67px-3qhx"/>
        <updated>2025-04-29T15:17:04.000Z</updated>
        <content type="html"><![CDATA[<p>A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file <code>tokenization_gpt_neox_japanese.py</code> of the GPT-NeoX-Japanese model. The vulnerability occurs in the SubWordJapaneseTokenizer class, where regular expressions process specially crafted inputs. The issue stems from a regex exhibiting exponential complexity under certain conditions, leading to excessive backtracking. This can result in high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.48.1 (latest).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1194">https://nvd.nist.gov/vuln/detail/CVE-2025-1194</a></li>
<li><a href="https://github.com/huggingface/transformers/commit/92c5ca9dd70de3ade2af2eb835c96215cc50e815">https://github.com/huggingface/transformers/commit/92c5ca9dd70de3ade2af2eb835c96215cc50e815</a></li>
<li><a href="https://huntr.com/bounties/86f58dcd-683f-4adc-a735-849f51e9abb2">https://huntr.com/bounties/86f58dcd-683f-4adc-a735-849f51e9abb2</a></li>
<li><a href="https://github.com/advisories/GHSA-fpwr-67px-3qhx">https://github.com/advisories/GHSA-fpwr-67px-3qhx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fpwr-67px-3qhx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-29T12:30:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aworld] AWorld OS Command Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jmjf-mfhm-j3gf</id>
        <link href="https://github.com/advisories/GHSA-jmjf-mfhm-j3gf"/>
        <updated>2025-05-12T12:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in inclusionAI AWorld up to 8c257626e648d98d793dd9a1a950c2af4dd84c4e. It has been rated as critical. This issue affects the function subprocess.run/subprocess.Popen of the file AWorld/aworld/virtual_environments/terminals/shell_tool.py. The manipulation leads to os command injection. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. This product does not use versioning. This is why information about affected and unaffected releases are unavailable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4032">https://nvd.nist.gov/vuln/detail/CVE-2025-4032</a></li>
<li><a href="https://github.com/inclusionAI/AWorld/issues/38">https://github.com/inclusionAI/AWorld/issues/38</a></li>
<li><a href="https://github.com/inclusionAI/AWorld/issues/38#issuecomment-2806190923">https://github.com/inclusionAI/AWorld/issues/38#issuecomment-2806190923</a></li>
<li><a href="https://vuldb.com/?ctiid.306395">https://vuldb.com/?ctiid.306395</a></li>
<li><a href="https://vuldb.com/?id.306395">https://vuldb.com/?id.306395</a></li>
<li><a href="https://vuldb.com/?submit.559222">https://vuldb.com/?submit.559222</a></li>
<li><a href="https://github.com/inclusionAI/AWorld/issues/38#issue-2996574433">https://github.com/inclusionAI/AWorld/issues/38#issue-2996574433</a></li>
<li><a href="https://github.com/advisories/GHSA-jmjf-mfhm-j3gf">https://github.com/advisories/GHSA-jmjf-mfhm-j3gf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmjf-mfhm-j3gf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-28T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM Vulnerable to Remote Code Execution via Mooncake Integration]]></title>
        <id>https://github.com/advisories/GHSA-hj4w-hm2g-p6w5</id>
        <link href="https://github.com/advisories/GHSA-hj4w-hm2g-p6w5"/>
        <updated>2025-04-30T17:27:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impacted-deployments">Impacted Deployments</h2>
<p><strong>Note that vLLM instances that do NOT make use of the mooncake integration are NOT vulnerable.</strong></p>
<h2 id="description">Description</h2>
<p>vLLM integration with mooncake is vaulnerable to remote code execution due to using <code>pickle</code> based serialization over unsecured ZeroMQ sockets. The vulnerable sockets were set to listen on all network interfaces, increasing the likelihood that an attacker is able to reach the vulnerable ZeroMQ sockets to carry out an attack.</p>
<p>This is a similar to <a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-x3m8-f7g5-qhm7">GHSA - x3m8 - f7g5 - qhm7</a>, the problem is in</p>
<p><a href="https://github.com/vllm-project/vllm/blob/32b14baf8a1f7195ca09484de3008063569b43c5/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L179">https://github.com/vllm-project/vllm/blob/32b14baf8a1f7195ca09484de3008063569b43c5/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L179</a></p>
<p>Here <a href="https://github.com/zeromq/pyzmq/blob/453f00c5645a3bea40d79f53aa8c47d85038dc2d/zmq/sugar/socket.py#L961">recv_pyobj()</a> Contains implicit <code>pickle.loads()</code>, which leads to potential RCE.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-hj4w-hm2g-p6w5">https://github.com/vllm-project/vllm/security/advisories/GHSA-hj4w-hm2g-p6w5</a></li>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-x3m8-f7g5-qhm7">https://github.com/vllm-project/vllm/security/advisories/GHSA-x3m8-f7g5-qhm7</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/a5450f11c95847cf51a17207af9a3ca5ab569b2c">https://github.com/vllm-project/vllm/commit/a5450f11c95847cf51a17207af9a3ca5ab569b2c</a></li>
<li><a href="https://github.com/vllm-project/vllm/blob/32b14baf8a1f7195ca09484de3008063569b43c5/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L179">https://github.com/vllm-project/vllm/blob/32b14baf8a1f7195ca09484de3008063569b43c5/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L179</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32444">https://nvd.nist.gov/vuln/detail/CVE-2025-32444</a></li>
<li><a href="https://github.com/advisories/GHSA-hj4w-hm2g-p6w5">https://github.com/advisories/GHSA-hj4w-hm2g-p6w5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj4w-hm2g-p6w5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-29T14:52:29.000Z</published>
    </entry>
</feed>