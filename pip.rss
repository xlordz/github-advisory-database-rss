<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-01-23T09:01:35.025Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[duckdb] sniff_csv provides filesystem access even when enable_external_access is disabled in duckdb]]></title>
        <id>https://github.com/advisories/GHSA-w2gf-jxc9-pf2q</id>
        <link href="https://github.com/advisories/GHSA-w2gf-jxc9-pf2q"/>
        <updated>2025-01-21T21:07:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Content in filesystem is accessible for reading using <code>sniff_csv</code>, even with <code>enable_external_access=false</code>. </p>
<h3 id="details">Details</h3>
<p>During a pentest, a security researcher was able to access environment variable data and other system data by using the <code>sniff_csv</code> function, even though we set <code>enable_external_access</code> to false. </p>
<h3 id="poc">PoC</h3>
<pre><code class="language-SQL">SET enable_external_access=false;
SET lock_configuration=true;

SELECT Columns FROM sniff_csv('/proc/self/environ');
</code></pre>
<h3 id="impact">Impact</h3>
<p>Provides an attacker with access to filesystem even when access is expected to be disabled and other similar functions do NOT provide access. </p>
<p>For example <code>select * from read_csv('/proc/self/environ')</code> fails with a permission error. </p>
<p>There seems to be two vectors to this vulnerability: </p>
<ol>
<li>Access to files that should otherwise not be allowed. (We expect <code>Permission Error: Scanning CSV files is disabled through configuration</code> and not to provide any access to the file or even acknowledge that it exists). </li>
<li>The content from a (non-csv?) file can be read (e.g. <code>/etc/hosts</code>, <code>proc/self/environ</code>, etc) even though that doesn't seem to be the intent of the sniff_csv function (my understanding is it's intending to provide information about the shape of the data, but not provide the data itself).</li>
</ol>
<h3 id="workaround">Workaround</h3>
<p>It is possible to work around the issue by disabling the local file system using the <code>disabled_filesystems</code> setting:</p>
<pre><code class="language-SQL">SET disabled_filesystems='LocalFileSystem';
SET lock_configuration=true;

SELECT Columns FROM sniff_csv('/proc/self/environ');
</code></pre>
<p>will result in <code>Permission Error: File system LocalFileSystem has been disabled by configuration</code>.</p>
<h3 id="fix">Fix</h3>
<p>A fix has been merged into the <code>main</code> branch (<a href="https://github.com/duckdb/duckdb/pull/13133">https://github.com/duckdb/duckdb/pull/13133</a>), and will be released with the next DuckDB release.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/duckdb/duckdb/security/advisories/GHSA-w2gf-jxc9-pf2q">https://github.com/duckdb/duckdb/security/advisories/GHSA-w2gf-jxc9-pf2q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41672">https://nvd.nist.gov/vuln/detail/CVE-2024-41672</a></li>
<li><a href="https://github.com/duckdb/duckdb/pull/13133">https://github.com/duckdb/duckdb/pull/13133</a></li>
<li><a href="https://github.com/duckdb/duckdb/commit/c9b7c98aa0e1cd7363fe8bb8543a95f38e980d8a">https://github.com/duckdb/duckdb/commit/c9b7c98aa0e1cd7363fe8bb8543a95f38e980d8a</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/duckdb/PYSEC-2024-203.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/duckdb/PYSEC-2024-203.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-w2gf-jxc9-pf2q">https://github.com/advisories/GHSA-w2gf-jxc9-pf2q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w2gf-jxc9-pf2q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-21T21:07:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[codechecker] Cross-Site Request Forgery in CodeChecker API]]></title>
        <id>https://github.com/advisories/GHSA-f8c8-4pm7-w885</id>
        <link href="https://github.com/advisories/GHSA-f8c8-4pm7-w885"/>
        <updated>2025-01-21T20:25:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Cross-site request forgery allows an unauthenticated attacker to hijack the authentication of a logged in user, and use the web API with the same permissions.</p>
<h3 id="details">Details</h3>
<p>Security attributes like HttpOnly and SameSite are missing from the session cookie, allowing its use from XHR requests and form submissions.
The CodeChecker API endpoints only require the session cookie, they do not require a CSRF token, and missing HTTP headers allow the form submission to succeed (but not XHR). This means that the attacker needs to know the ID of products to edit or delete them, but it does not need knowledge to create new products with the SQLite backend.</p>
<h3 id="poc">PoC</h3>
<p>With a superuser logged into CodeChecker.</p>
<pre><code class="language-html">&lt;html&gt;&lt;body&gt;
    &lt;form action="https://codechecker.example.com/v6.58/Products" method="POST" enctype="text/plain"&gt;
        &lt;input type="text" name='[1,"getProducts",1,1,{}]' value=''&gt;
    &lt;/form&gt;
    &lt;script&gt;document.forms[0].submit()&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre>
<p>Or the same form attack on any of the applicable endpoints.</p>
<h3 id="impact">Impact</h3>
<p>The vulnerability allows an attacker to make requests to CodeChecker as the currently logged in user, including but not limited to adding, removing or editing products. The attacker needs to know the ID of the available products to modify or delete them. The attacker cannot directly exfiltrate data from CodeChecker, due to being limited to form-based CSRF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Ericsson/codechecker/security/advisories/GHSA-f8c8-4pm7-w885">https://github.com/Ericsson/codechecker/security/advisories/GHSA-f8c8-4pm7-w885</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53829">https://nvd.nist.gov/vuln/detail/CVE-2024-53829</a></li>
<li><a href="https://github.com/advisories/GHSA-f8c8-4pm7-w885">https://github.com/advisories/GHSA-f8c8-4pm7-w885</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8c8-4pm7-w885</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-21T20:25:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torchgeo] TorchGeo Remote Code Execution Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g5vp-j278-8pjh</id>
        <link href="https://github.com/advisories/GHSA-g5vp-j278-8pjh"/>
        <updated>2025-01-21T19:43:07.000Z</updated>
        <content type="html"><![CDATA[<p>TorchGeo Remote Code Execution Vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49048">https://nvd.nist.gov/vuln/detail/CVE-2024-49048</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49048">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49048</a></li>
<li><a href="https://github.com/microsoft/torchgeo/pull/2323">https://github.com/microsoft/torchgeo/pull/2323</a></li>
<li><a href="https://github.com/microsoft/torchgeo/releases/tag/v0.6.1">https://github.com/microsoft/torchgeo/releases/tag/v0.6.1</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/torchgeo/PYSEC-2024-204.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/torchgeo/PYSEC-2024-204.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-g5vp-j278-8pjh">https://github.com/advisories/GHSA-g5vp-j278-8pjh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5vp-j278-8pjh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-12T18:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[streampipes] Apache StreamPipes potentially allows creation of multiple identical accounts]]></title>
        <id>https://github.com/advisories/GHSA-2qph-v9p2-q2gv</id>
        <link href="https://github.com/advisories/GHSA-2qph-v9p2-q2gv"/>
        <updated>2025-01-21T18:27:43.000Z</updated>
        <content type="html"><![CDATA[<p>Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in Apache StreamPipes in user self-registration.
This allows an attacker to potentially request the creation of multiple accounts with the same email address until the email address is registered, creating many identical users and corrupting StreamPipe's user management.
This issue affects Apache StreamPipes: through 0.93.0.</p>
<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30471">https://nvd.nist.gov/vuln/detail/CVE-2024-30471</a></li>
<li><a href="https://lists.apache.org/thread/8yodrmohgcybq900or3d4hc1msl230fr">https://lists.apache.org/thread/8yodrmohgcybq900or3d4hc1msl230fr</a></li>
<li><a href="https://github.com/apache/streampipes/releases/tag/release%2F0.95.0">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-172.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-172.yaml</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/07/16/9">http://www.openwall.com/lists/oss-security/2024/07/16/9</a></li>
<li><a href="https://github.com/advisories/GHSA-2qph-v9p2-q2gv">https://github.com/advisories/GHSA-2qph-v9p2-q2gv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2qph-v9p2-q2gv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T09:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[streampipes] Apache StreamPipes has possibility of SSRF in pipeline element installation process]]></title>
        <id>https://github.com/advisories/GHSA-9gr7-gh74-qg9x</id>
        <link href="https://github.com/advisories/GHSA-9gr7-gh74-qg9x"/>
        <updated>2025-01-21T18:27:30.000Z</updated>
        <content type="html"><![CDATA[<p>Server-Side Request Forgery (SSRF) vulnerability in Apache StreamPipes during installation process of pipeline elements.
Previously, StreamPipes allowed users to configure custom endpoints from which to install additional pipeline elements. 
These endpoints were not properly validated, allowing an attacker to get StreamPipes to send an HTTP GET request to an arbitrary address.</p>
<p>This issue affects Apache StreamPipes: through 0.93.0.</p>
<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-31979">https://nvd.nist.gov/vuln/detail/CVE-2024-31979</a></li>
<li><a href="https://lists.apache.org/thread/8lryp3bxnby9kmk13odkz2jbfdjfvf0y">https://lists.apache.org/thread/8lryp3bxnby9kmk13odkz2jbfdjfvf0y</a></li>
<li><a href="https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f">https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f</a></li>
<li><a href="https://github.com/apache/streampipes/releases/tag/release%2F0.95.0">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-174.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-174.yaml</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/07/16/11">http://www.openwall.com/lists/oss-security/2024/07/16/11</a></li>
<li><a href="https://github.com/advisories/GHSA-9gr7-gh74-qg9x">https://github.com/advisories/GHSA-9gr7-gh74-qg9x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gr7-gh74-qg9x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T09:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[streampipes] Apache StreamPipes has potential remote code execution (RCE) via file upload]]></title>
        <id>https://github.com/advisories/GHSA-6523-jf4r-c962</id>
        <link href="https://github.com/advisories/GHSA-6523-jf4r-c962"/>
        <updated>2025-01-21T18:27:23.000Z</updated>
        <content type="html"><![CDATA[<p>Unrestricted Upload of File with dangerous type vulnerability in Apache StreamPipes.
Such a dangerous type might be an executable file that may lead to a remote code execution (RCE).
The unrestricted upload is only possible for authenticated and authorized users.</p>
<p>This issue affects Apache StreamPipes: through 0.93.0.</p>
<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-31411">https://nvd.nist.gov/vuln/detail/CVE-2024-31411</a></li>
<li><a href="https://lists.apache.org/thread/b0657okbwzg5xxs11hphvc9qrd9s70mt">https://lists.apache.org/thread/b0657okbwzg5xxs11hphvc9qrd9s70mt</a></li>
<li><a href="https://github.com/apache/streampipes/releases/tag/release%2F0.95.0">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-173.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-173.yaml</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/07/16/10">http://www.openwall.com/lists/oss-security/2024/07/16/10</a></li>
<li><a href="https://github.com/advisories/GHSA-6523-jf4r-c962">https://github.com/advisories/GHSA-6523-jf4r-c962</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6523-jf4r-c962</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-17T12:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langflow] Langflow remote code execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-qg33-x2c5-6p44</id>
        <link href="https://github.com/advisories/GHSA-qg33-x2c5-6p44"/>
        <updated>2025-01-21T18:18:12.000Z</updated>
        <content type="html"><![CDATA[<p>Langflow allows remote code execution if untrusted users are able to reach the "POST /api/v1/custom_component" endpoint and provide a Python script.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37014">https://nvd.nist.gov/vuln/detail/CVE-2024-37014</a></li>
<li><a href="https://github.com/langflow-ai/langflow/issues/1973">https://github.com/langflow-ai/langflow/issues/1973</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/langflow/PYSEC-2024-177.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/langflow/PYSEC-2024-177.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qg33-x2c5-6p44">https://github.com/advisories/GHSA-qg33-x2c5-6p44</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qg33-x2c5-6p44</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-10T21:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbgrader] nbgrader's `frame-ancestors: self` grants all users access to formgrader]]></title>
        <id>https://github.com/advisories/GHSA-fcr8-4r9f-r66m</id>
        <link href="https://github.com/advisories/GHSA-fcr8-4r9f-r66m"/>
        <updated>2025-01-17T21:56:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Enabling frame-ancestors: 'self' grants any JupyterHub user the ability to extract formgrader content by sending malicious links to users with access to formgrader, at least when using the default JupyterHub configuration of <code>enable_subdomains = False</code>.</p>
<p>#1915 disables a protection which would allow user Alice to craft a page embedding formgrader in an IFrame. If Bob visits that page, his credentials will be sent and the formgrader page loaded. Because Alice's page is on the same Origin as the formgrader iframe, Javasript on Alice's page has <em>full access</em> to the contents of the page served by formgrader using Bob's credentials.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable <code>frame-ancestors: self</code>, or</li>
<li>enable per-user and per-service subdomains with <code>JupyterHub.enable_subdomains = True</code> (then even if embedding in an IFrame is allowed, the host page does not have access to the contents of the frame).</li>
</ul>
<h3 id="references">References</h3>
<p>JupyterHub documentation on why and when <code>frame-ancestors: self</code> is insecure, and why it was disabled by default: <a href="https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html#:~:text=frame-ancestors">https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html#:~:text=frame-ancestors</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbgrader/security/advisories/GHSA-fcr8-4r9f-r66m">https://github.com/jupyter/nbgrader/security/advisories/GHSA-fcr8-4r9f-r66m</a></li>
<li><a href="https://github.com/jupyter/nbgrader/pull/1915">https://github.com/jupyter/nbgrader/pull/1915</a></li>
<li><a href="https://github.com/jupyter/nbgrader/commit/73e137511ac1dc02e95790d4fd6d4d88dab42325">https://github.com/jupyter/nbgrader/commit/73e137511ac1dc02e95790d4fd6d4d88dab42325</a></li>
<li><a href="https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html">https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23205">https://nvd.nist.gov/vuln/detail/CVE-2025-23205</a></li>
<li><a href="https://github.com/advisories/GHSA-fcr8-4r9f-r66m">https://github.com/advisories/GHSA-fcr8-4r9f-r66m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fcr8-4r9f-r66m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-17T16:29:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[indico] Indico Insecure Access]]></title>
        <id>https://github.com/advisories/GHSA-3wg7-r7q5-r2jf</id>
        <link href="https://github.com/advisories/GHSA-3wg7-r7q5-r2jf"/>
        <updated>2025-01-21T17:12:44.000Z</updated>
        <content type="html"><![CDATA[<p>A Broken Object Level Authorization (BOLA) vulnerability in Indico v3.2.9 allows attackers to access sensitive information via sending a crafted POST request to the component /api/principals.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50633">https://nvd.nist.gov/vuln/detail/CVE-2024-50633</a></li>
<li><a href="https://github.com/cetinpy/CVE-2024-50633">https://github.com/cetinpy/CVE-2024-50633</a></li>
<li><a href="https://github.com/cetinpy/CVE-2024-50633/issues/1">https://github.com/cetinpy/CVE-2024-50633/issues/1</a></li>
<li><a href="https://github.com/advisories/GHSA-3wg7-r7q5-r2jf">https://github.com/advisories/GHSA-3wg7-r7q5-r2jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wg7-r7q5-r2jf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-16T18:31:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sentry] Sentry's improper authentication on SAML SSO process allows user impersonation]]></title>
        <id>https://github.com/advisories/GHSA-7pq6-v88g-wf3w</id>
        <link href="https://github.com/advisories/GHSA-7pq6-v88g-wf3w"/>
        <updated>2025-01-15T22:01:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A critical vulnerability was discovered in the SAML SSO implementation of Sentry. It was reported to us via our private bug bounty program.</p>
<p>The vulnerability allows an attacker to take over any user account by using a malicious SAML Identity Provider and another organization on the same Sentry instance. The victim email address must be known in order to exploit this vulnerability.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://sentry.io">Sentry SaaS</a>: The fix was deployed on Jan 14, 2025.</li>
<li><a href="https://github.com/getsentry/self-hosted">Self-Hosted Sentry</a>: If only a single organization is allowed (<code>SENTRY_SINGLE_ORGANIZATION = True</code>), then no action is needed. Otherwise, users should upgrade to version 25.1.0 or higher.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry/pull/83407">https://github.com/getsentry/sentry/pull/83407</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry/security/advisories/GHSA-7pq6-v88g-wf3w">https://github.com/getsentry/sentry/security/advisories/GHSA-7pq6-v88g-wf3w</a></li>
<li><a href="https://github.com/getsentry/sentry/pull/83407">https://github.com/getsentry/sentry/pull/83407</a></li>
<li><a href="https://github.com/getsentry/sentry/commit/6db508f7949d117c7dff748a3c82c3a272bf7cfd">https://github.com/getsentry/sentry/commit/6db508f7949d117c7dff748a3c82c3a272bf7cfd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22146">https://nvd.nist.gov/vuln/detail/CVE-2025-22146</a></li>
<li><a href="https://github.com/advisories/GHSA-7pq6-v88g-wf3w">https://github.com/advisories/GHSA-7pq6-v88g-wf3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pq6-v88g-wf3w</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-15T21:25:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has a potential denial-of-service vulnerability in IPv6 validation]]></title>
        <id>https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</id>
        <link href="https://github.com/advisories/GHSA-qcgg-j2x8-h9g8"/>
        <updated>2025-01-15T15:14:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions <code>clean_ipv6_address</code> and <code>is_valid_ipv6_address</code> are vulnerable, as is the <code>django.forms.GenericIPAddressField</code> form field. (The django.db.models.GenericIPAddressField model field is not affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56374">https://nvd.nist.gov/vuln/detail/CVE-2024-56374</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2025/jan/14/security-releases">https://www.djangoproject.com/weblog/2025/jan/14/security-releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/01/14/2">http://www.openwall.com/lists/oss-security/2025/01/14/2</a></li>
<li><a href="https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf">https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qcgg-j2x8-h9g8">https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-14T21:31:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has a potential denial-of-service vulnerability in IPv6 validation]]></title>
        <id>https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</id>
        <link href="https://github.com/advisories/GHSA-qcgg-j2x8-h9g8"/>
        <updated>2025-01-15T15:14:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions <code>clean_ipv6_address</code> and <code>is_valid_ipv6_address</code> are vulnerable, as is the <code>django.forms.GenericIPAddressField</code> form field. (The django.db.models.GenericIPAddressField model field is not affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56374">https://nvd.nist.gov/vuln/detail/CVE-2024-56374</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2025/jan/14/security-releases">https://www.djangoproject.com/weblog/2025/jan/14/security-releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/01/14/2">http://www.openwall.com/lists/oss-security/2025/01/14/2</a></li>
<li><a href="https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf">https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qcgg-j2x8-h9g8">https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-14T21:31:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has a potential denial-of-service vulnerability in IPv6 validation]]></title>
        <id>https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</id>
        <link href="https://github.com/advisories/GHSA-qcgg-j2x8-h9g8"/>
        <updated>2025-01-15T15:14:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions <code>clean_ipv6_address</code> and <code>is_valid_ipv6_address</code> are vulnerable, as is the <code>django.forms.GenericIPAddressField</code> form field. (The django.db.models.GenericIPAddressField model field is not affected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56374">https://nvd.nist.gov/vuln/detail/CVE-2024-56374</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2025/jan/14/security-releases">https://www.djangoproject.com/weblog/2025/jan/14/security-releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/01/14/2">http://www.openwall.com/lists/oss-security/2025/01/14/2</a></li>
<li><a href="https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf">https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qcgg-j2x8-h9g8">https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-14T21:31:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Django SQL injection in HasKey(lhs, rhs) on Oracle]]></title>
        <id>https://github.com/advisories/GHSA-m9g8-fxxm-xg86</id>
        <link href="https://github.com/advisories/GHSA-m9g8-fxxm-xg86"/>
        <updated>2025-01-14T16:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53908">https://nvd.nist.gov/vuln/detail/CVE-2024-53908</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2024/12/04/3">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/dec/04/security-releases">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m9g8-fxxm-xg86">https://github.com/advisories/GHSA-m9g8-fxxm-xg86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m9g8-fxxm-xg86</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-06T12:30:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Django SQL injection in HasKey(lhs, rhs) on Oracle]]></title>
        <id>https://github.com/advisories/GHSA-m9g8-fxxm-xg86</id>
        <link href="https://github.com/advisories/GHSA-m9g8-fxxm-xg86"/>
        <updated>2025-01-14T16:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53908">https://nvd.nist.gov/vuln/detail/CVE-2024-53908</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2024/12/04/3">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/dec/04/security-releases">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m9g8-fxxm-xg86">https://github.com/advisories/GHSA-m9g8-fxxm-xg86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m9g8-fxxm-xg86</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-06T12:30:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Django SQL injection in HasKey(lhs, rhs) on Oracle]]></title>
        <id>https://github.com/advisories/GHSA-m9g8-fxxm-xg86</id>
        <link href="https://github.com/advisories/GHSA-m9g8-fxxm-xg86"/>
        <updated>2025-01-14T16:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53908">https://nvd.nist.gov/vuln/detail/CVE-2024-53908</a></li>
<li><a href="https://docs.djangoproject.com/en/dev/releases/security">https://docs.djangoproject.com/en/dev/releases/security</a></li>
<li><a href="https://groups.google.com/g/django-announce">https://groups.google.com/g/django-announce</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2024/12/04/3">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/dec/04/security-releases">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m9g8-fxxm-xg86">https://github.com/advisories/GHSA-m9g8-fxxm-xg86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m9g8-fxxm-xg86</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-06T12:30:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper Does Not Check the Success of Certain Precompile Calls]]></title>
        <id>https://github.com/advisories/GHSA-vgf2-gvx8-xwc3</id>
        <link href="https://github.com/advisories/GHSA-vgf2-gvx8-xwc3"/>
        <updated>2025-01-21T17:19:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When the Vyper Compiler uses the precompiles EcRecover (0x1) and Identity (0x4), the success flag of the call is not checked. As a consequence an attacker can provide a specific amount of gas to make these calls fail but let the overall execution continue. Then the execution result can be incorrect.</p>
<p>Based on EVM's rules, after the failed precompile the remaining code has only 1/64 of the pre-call-gas left (as 63/64 were forwarded and spent). Hence, only fairly simple executions can follow the failed precompile calls. Therefore, we found no significantly impacted real-world contracts.</p>
<p>The fix is tracked in <a href="https://github.com/vyperlang/vyper/pull/4451">https://github.com/vyperlang/vyper/pull/4451</a>.</p>
<h3 id="details">Details</h3>
<h4 id="the-relevant-precompiles">The relevant precompiles</h4>
<h5 id="ecrecover">EcRecover</h5>
<p>EcRecover is used in vyper's <code>ecrecover</code> built-in. As the precompile consumes 3000 gas, any execution after an out-of-gas EcRecover call has at most 47 gas left.</p>
<h5 id="identity">Identity</h5>
<ul>
<li>The Identity precompile is used in vyper to perform memory copy operations. As its cost is variable, a variable amount of gas might be left after a failed call. The bigger the copy operation, the more gas can be left. Hence, a failed call to Identity could theoretically be followed by successful storage changes or emitted events.</li>
<li>Identity is no longer used when <code>evm-version</code> <code>cancun</code> is used (because <code>MCOPY</code> is used instead). In 0.4.0 <code>cancun</code> is default, in 0.3.10 <code>cancun</code> is an option, otherwise <code>cancun</code> is not available. As only pre-<code>cancun</code> versions are relevant, we don't have to consider transient storage operations succeeding a failed call to Identity.</li>
</ul>
<h4 id="the-other-precompiles">The other precompiles</h4>
<ul>
<li>Calls to <code>Sha2</code>, <code>ecAdd</code>, and <code>ecMul</code> have success checks and have had them for a long time.</li>
<li>The precompiles <code>modexp</code>, <code>ripe</code>, <code>blake</code>, <code>ecPairing</code>, and <code>Point Evaluation</code> have no builtins in vyper.</li>
</ul>
<h3 id="poc">PoC</h3>
<p>In the following we provide concrete examples of incorrectly generated bytecode. These examples are not optimized, but rather Proof-of-Concepts. The list is also not exhaustive.</p>
<h4 id="ecrecover-use"><code>ecrecover</code> use</h4>
<ul>
<li>Affected versions: 0.2.0 - 0.4.0 </li>
<li>For older compiler versions (&lt;=0.3.9) it behaves similarly to this <a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-f5x6-7qgp-jhf3">older advisory</a>. As no data is returned, the previous value of the memory word is returned to the user. Hence, any dirty bytes might be returned. Contracts with older compiler versions and <code>ecrecover</code> were checked.</li>
<li>For new vyper versions, the output buffer is zeroed, so when the call fails zero is returned. This is an incorrect result, but developers should anyway check for 0 as a failure case. Hence, this is unlikely to result in issues. However, we did search for such cases.</li>
<li>As mentioned above at most 47 gas is left after the failed call, hence a <code>return</code> is the most realistic scenario to be attacked.</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
@view
def foo(hash: bytes32, v: uint256, r:uint256, s:uint256) -&gt; address:
    return ecrecover(hash, v, r, s)
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">print(
    c.foo(
        binascii.unhexlify(
            "6c9c5e133b8aafb2ea74f524a5263495e7ae5701c7248805f7b511d973dc7055"
        ),
        28,
        78616903610408968922803823221221116251138855211764625814919875002740131251724,
        37668412420813231458864536126575229553064045345107737433087067088194345044408,
    )
)  # Returns 0x9eE53ad38Bb67d745223a4257D7d48cE973FeB7A

print(
    c.foo(
        binascii.unhexlify(
            "6c9c5e133b8aafb2ea74f524a5263495e7ae5701c7248805f7b511d973dc7055"
        ),
        28,
        78616903610408968922803823221221116251138855211764625814919875002740131251724,
        37668412420813231458864536126575229553064045345107737433087067088194345044408,
        gas=3000,
    )
)  # Returns 0x0000000000000000000000000000000000000000
</code></pre>
<h4 id="identity-to-copy-dynamic-arrays">Identity to copy Dynamic Arrays</h4>
<ul>
<li>Affected versions: 0.3.2 - 0.3.9</li>
<li>Dynamic Arrays might be copied on different occasions</li>
<li>That copy operation can fail leading to incorrect accesses afterwards</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">
@external
def foo() -&gt; uint256:
    a: DynArray[uint256, 4000] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    b: DynArray[uint256, 4000] = a
    return b[0]
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">print(c.foo())            # Prints 2
print(c.foo(gas=170000))  # Prints 0
</code></pre>
<h4 id="identity-in-abi-encoding-of-returndata">Identity in ABI Encoding of Returndata</h4>
<ul>
<li>Affected versions: 0.3.2 - 0.4.0</li>
<li>Complex types such as Dynamic array with Strings inside need to be abi encoded before being returned</li>
<li>In that <code>return</code> there is a memory copy which can fail</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
@view
def foo(x: String[1000000], y: String[1000000]) -&gt; DynArray[String[1000000], 2]:
    z: DynArray[String[1000000], 2] = [x, y]
    # Some code
    return z
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">calldata0 = "a"*10
calldata1 = "b"*1000000
c.foo(calldata0, calldata1)                   # Returns correct data
c.foo(calldata0, calldata1, gas=48_400_000)   # Returns incorrect data (only first part)
</code></pre>
<h4 id="assertion-based-on-data-copied-through-identity">Assertion based on data copied through Identity</h4>
<ul>
<li>Affected versions: 0.2.0 - 0.4.0</li>
<li>An incomplete copy operation might falsify the result of a subsequent <code>assert</code></li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@internal
def bar() -&gt; uint256[3000]:
    a: uint256[3000] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    return a

@external
def foo():
    s: uint256[3000] = self.bar()
    assert(s[0] == 0)
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">try:
    c.foo()                     # Correctly reverts
except Exception as e:
    print("Correctly reverted")
try:
    c.foo(gas=210000)           # Incorrectly succeeds
    print("Incorrectly succeeded")
except Exception:
    pass
</code></pre>
<h4 id="identity-used-in-raw_revert">Identity used in <code>raw_revert</code></h4>
<ul>
<li>Affected versions: 0.3.8 - 0.4.0</li>
<li>A copy operation might appear as part of raw_revert</li>
<li>As a result the revert reason might be incorrect</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
def foo(_data: Bytes[10000]):
    b: Bytes[10000] = _data
    raw_revert(b)
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">calldata = binascii.unhexlify("bb" * 10_000)
c.foo(calldata)       # Has correct revert reason
c.foo(calldata, gas=4_800)       # Has empty revert reason, but not out-of-gas
</code></pre>
<h4 id="identity-to-copy-static-arrays">Identity to copy static arrays</h4>
<ul>
<li>Affected versions: 0.2.0 - 0.4.0</li>
<li>Vyper might perform a memory copy for static arrays, e.g. when moving them in and out of internal functions</li>
<li>As this access is especially cheap (due to the static checks) it can also happen for smaller sizes</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
def foo(x: uint256[2500]) -&gt; uint256:
    s: uint256[2500] = x
    t: uint256[2500] = s
    return t[0]
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">calldata = [2] + [0] * 2499
print(c.foo(calldata))              # Prints 2
print(c.foo(calldata, gas=74500))   # Prints 0
</code></pre>
<h4 id="identity-to-copy-and-return-string-or-bytes">Identity to copy and return String or Bytes</h4>
<ul>
<li>Affected versions: 0.20 - 0.4.0</li>
<li>Multiple situations in vyper might trigger a memory copy operation, e.g. moving data in and out of internal functions</li>
<li>If the target buffer is later returned, incorrect data might be returned</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
@view
def foo(x: String[1000000]) -&gt; String[1000000]:
    return x
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">calldata = "a"*1000000
x = c.foo(calldata)                 # Returns calldata
y = c.foo(calldata, gas=8_000_000)  # Returns empty data
</code></pre>
<h4 id="identity-and-accessing-the-length-of-the-target-data">Identity and accessing the length of the target data</h4>
<ul>
<li>Affected versions: 0.3.10 - 0.4.0</li>
<li>Accessing the data is fairly cheap, making it possible for smaller data copies</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
@view
def foo(x: String[1000000]) -&gt; uint256:
    y: String[1000000] = x
    return len(y)
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">calldata = "a"*1000000
x = c.foo(calldata)                 # Returns correct length
y = c.foo(calldata, gas=7_929_200)  # Returns incorrect length
</code></pre>
<h4 id="identity-to-copy-and-return-string-or-bytes-1">Identity to copy and return String or Bytes</h4>
<ul>
<li>Affected versions: 0.3.10 - 0.4.0</li>
<li>Multiple situations in vyper might trigger a memory copy operation, e.g. moving data in and out of internal functions</li>
<li>If the target buffer is later returned, incorrect data might be returned</li>
</ul>
<p>Vulnerable Code:</p>
<pre><code class="language-py">@external
@view
def foo(x: String[1000000]) -&gt; String[1000000]:
    return x
</code></pre>
<p>Problematic Call:</p>
<pre><code class="language-py">calldata = "a"*1000000
x = c.foo(calldata)                 # Returns calldata
y = c.foo(calldata, gas=8_000_000)  # Returns empty data
</code></pre>
<h3 id="impact">Impact</h3>
<p>A contract search was conducted and yielded no significant results.</p>
<p>The advisory was rated a medium because the likelihood is low, but difficult to detect by source code analysis alone, and could yield unexpected results if a contract is affected by the bug.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-vgf2-gvx8-xwc3">https://github.com/vyperlang/vyper/security/advisories/GHSA-vgf2-gvx8-xwc3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-21607">https://nvd.nist.gov/vuln/detail/CVE-2025-21607</a></li>
<li><a href="https://github.com/advisories/GHSA-vgf2-gvx8-xwc3">https://github.com/advisories/GHSA-vgf2-gvx8-xwc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vgf2-gvx8-xwc3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-14T16:34:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Gradio Blocked Path ACL Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-j2jg-fq62-7c3h</id>
        <link href="https://github.com/advisories/GHSA-j2jg-fq62-7c3h"/>
        <updated>2025-01-14T22:03:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Gradio's Access Control List (ACL) for file paths can be bypassed by altering the letter case of a blocked file or directory path. This vulnerability arises due to the lack of case normalization in the file path validation logic. On case-insensitive file systems, such as those used by Windows and macOS, this flaw enables attackers to circumvent security restrictions and access sensitive files that should be protected.</p>
<p>This issue can lead to unauthorized data access, exposing sensitive information and undermining the integrity of Gradio's security model. Given Gradio's popularity for building web applications, particularly in machine learning and AI, this vulnerability may pose a substantial threat if exploited in production environments.</p>
<h2 id="affected-version">Affected Version</h2>
<p>Gradio &lt;= 5.6.0</p>
<h2 id="impact">Impact</h2>
<ul>
<li><p><strong>Unauthorized Access</strong>: Sensitive files or directories specified in <code>blocked_paths</code> can be accessed by attackers.</p>
</li>
<li><p><strong>Data Exposure</strong>: Critical files, such as configuration files or user data, may be leaked.</p>
</li>
<li><p><strong>Security Breach</strong>: This can lead to broader application or system compromise if sensitive files contain credentials or API keys.</p>
</li>
</ul>
<h2 id="root-cause">Root Cause</h2>
<p>The <a href="https://github.com/gradio-app/gradio/blob/main/gradio/blocks.py#L2310"><code>blocked_paths</code></a> parameter in Gradio block's initial configuration is designed to restrict user access to specific files or directories in the local file system. However, it does not account for case-insensitive operating systems, such as Windows and macOS. This oversight enables attackers to bypass ACL restrictions by changing the case of file paths.</p>
<p>Vulnerable snippet: </p>
<pre><code class="language-python"># https://github.com/gradio-app/gradio/blob/main/gradio/utils.py#L1500-L1517
def is_allowed_file(
    path: Path,
    blocked_paths: Sequence[str | Path],
    allowed_paths: Sequence[str | Path],
    created_paths: Sequence[str | Path],
) -&gt; tuple[
    bool, Literal["in_blocklist", "allowed", "created", "not_created_or_allowed"]
]:
    in_blocklist = any(
        is_in_or_equal(path, blocked_path) for blocked_path in blocked_paths
    )
    if in_blocklist:
        return False, "in_blocklist"
    if any(is_in_or_equal(path, allowed_path) for allowed_path in allowed_paths):
        return True, "allowed"
    if any(is_in_or_equal(path, created_path) for created_path in created_paths):
        return True, "created"
    return False, "not_created_or_allowed"
</code></pre>
<p>Gradio relies on <code>is_in_or_equal</code> to determine if a file path is restricted. However, this logic fails to handle case variations in paths on case-insensitive file systems, leading to the bypass.</p>
<h2 id="proof-of-concept-poc">Proof of Concept (PoC)</h2>
<h3 id="steps-to-reproduce">Steps to Reproduce</h3>
<ul>
<li><p>Deploy a Gradio demo app on a case-insensitive operating system (e.g., Windows or macOS).</p>
<pre><code class="language-bash">import gradio as gr
def update(name):
    return f"Welcome to Gradio, {name}!"

with gr.Blocks() as demo:
    gr.Markdown("Start typing below and then click **Run** to see the output.")
    with gr.Row():
        inp = gr.Textbox(placeholder="What is your name?")
        out = gr.Textbox()
    btn = gr.Button("Run")
    btn.click(fn=update, inputs=inp, outputs=out)

demo.launch(blocked_paths=['resources/admin'], allowed_paths=['resources/'])
</code></pre>
</li>
<li><p>Set up the file system:</p>
<ul>
<li><p>Create a folder named <code>resources</code> in the same directory as the app, containing a file <code>1.txt</code>.</p>
</li>
<li><p>Inside the <code>resources</code> folder, create a subfolder named <code>admin</code> containing a sensitive file <code>credential.txt</code> (this file should be inaccessible due to <code>blocked_paths</code>).</p>
</li>
</ul>
</li>
<li><p>Perform the attack:</p>
<ul>
<li><p>Access the sensitive file using a case-altered path:</p>
<pre><code>http://127.0.0.1:PORT/gradio_api/file=resources/adMin/credential.txt
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="expected-result">Expected Result</h3>
<p>Access to <code>resources/admin/credential.txt</code> should be blocked.</p>
<h3 id="actual-result">Actual Result</h3>
<p>By altering the case in the path (e.g., <code>adMin</code>), the blocked ACL is bypassed, and unauthorized access to the sensitive file is granted.</p>
<p><img alt="image-20241119172439042" src="https://api.2h0ng.wiki:443/noteimages/2024/11/19/17-24-39-883969d4c31ce8a8d2a939654fab56d4.png"></p>
<p>This demonstration highlights that flipping the case of restricted paths allows attackers to bypass Gradio's ACL and access sensitive data.</p>
<h2 id="remediation-recommendations">Remediation Recommendations</h2>
<ol>
<li><p><strong>Normalize Path Case</strong>:</p>
<ul>
<li><p>Before evaluating paths against the ACL, normalize the case of both the requested path and the blocked paths (e.g., convert all paths to lowercase).</p>
</li>
<li><p>Example:</p>
<pre><code class="language-python">normalized_path = str(path).lower()
normalized_blocked_paths = [str(p).lower() for p in blocked_paths]
</code></pre>
</li>
</ul>
</li>
<li><p><strong>Update Documentation</strong>:</p>
<ul>
<li>Warn developers about potential risks when deploying Gradio on case-insensitive file systems.</li>
</ul>
</li>
<li><p><strong>Release Security Patches</strong>:</p>
<ul>
<li>Notify users of the vulnerability and release an updated version of Gradio with the fixed logic.</li>
</ul>
</li>
</ol>
<h2 id=""></h2>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gradio-app/gradio/security/advisories/GHSA-j2jg-fq62-7c3h">https://github.com/gradio-app/gradio/security/advisories/GHSA-j2jg-fq62-7c3h</a></li>
<li><a href="https://github.com/gradio-app/gradio/commit/6b63fdec441b5c9bf910f910a2505d8defbb6bf8">https://github.com/gradio-app/gradio/commit/6b63fdec441b5c9bf910f910a2505d8defbb6bf8</a></li>
<li><a href="https://github.com/gradio-app/gradio/releases/tag/gradio%405.11.0">https://github.com/gradio-app/gradio/releases/tag/gradio%405.11.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23042">https://nvd.nist.gov/vuln/detail/CVE-2025-23042</a></li>
<li><a href="https://github.com/advisories/GHSA-j2jg-fq62-7c3h">https://github.com/advisories/GHSA-j2jg-fq62-7c3h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2jg-fq62-7c3h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-14T16:32:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rasa] Rasa Allows Remote Code Execution via Remote Model Loading]]></title>
        <id>https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</id>
        <link href="https://github.com/advisories/GHSA-cpv4-ggrr-7j9v"/>
        <updated>2025-01-14T21:59:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability">Vulnerability</h2>
<p>A vulnerability has been identified in Rasa Pro and Rasa Open Source that enables an attacker who has the ability to load a maliciously crafted model remotely into a Rasa instance to achieve Remote Code Execution.</p>
<p>The prerequisites for this are:</p>
<ul>
<li>The HTTP API must be enabled on the Rasa instance eg with <code>--enable-api</code>. This is not the default configuration.</li>
<li>For unauthenticated RCE to be exploitable, the user must not have configured any authentication or other security controls recommended in our documentation.</li>
<li>For authenticated RCE, the attacker must posses a valid authentication token or JWT to interact with the Rasa API.</li>
</ul>
<h2 id="fix">Fix</h2>
<p>We encourage you to upgrade to a version of Rasa that includes a fix. These are:</p>
<ul>
<li>Rasa Pro 3.8.18, 3.9.16, 3.10.12</li>
<li>Rasa Open Source 3.6.21</li>
</ul>
<p>Once you have upgraded your Rasa Pro or Open Source installation, you will need to retrain your model using the fixed version of Rasa Pro or Open Source. If you have a custom component that inherits from one of the components listed below and modified the persist or load method, make sure to update your code. Please contact us in case you encounter any problems.</p>
<p>Affected components:</p>
<ul>
<li><code>CountVectorFeaturizer</code></li>
<li><code>LexicalSyntacticFeaturizer</code></li>
<li><code>LogisticRegressionClassifier</code></li>
<li><code>SklearnIntentClassifier</code></li>
<li><code>DIETClassifier</code></li>
<li><code>CRFEntityExtractor</code></li>
<li><code>TrackerFeaturizer</code></li>
<li><code>TEDPolicy</code></li>
<li><code>UnexpectedIntentTEDPolicy</code></li>
</ul>
<p>If you are unable to upgrade immediately, please follow our mitigation advice below.</p>
<h2 id="mitigation-advice">Mitigation Advice</h2>
<ul>
<li><p>The unauthenticated RCE can be mitigated by ensuring that you enable authentication for the Rasa HTTP API if this is enabled. This means that in addition to passing <code>--enable-api</code> to Rasa, you should also pass an authentication configuration as described in our documentation <a href="https://rasa.com/docs/rasa-pro/production/rest-api/#enabling-the-rest-api">here</a>. </p>
</li>
<li><p>The authenticated RCE can be mitigated by:</p>
<ul>
<li>Ensuring that you only load models from trusted sources such as your own CI pipelines. You can check file hashes for model archives to confirm that a model has not been tampered with between training and use.</li>
<li>Confirming that you have sufficient access controls and utilize the principle of least privilege to control who in your organization has the ability to interact with the Rasa API even with authentication enabled.</li>
</ul>
</li>
</ul>
<h2 id="future-releases">Future Releases</h2>
<p>As an additional security step, a future release of Rasa Pro will remove the ability to enable the API without any authentication method enabled.</p>
<h2 id="credit">Credit</h2>
<p>Rasa would like to thank Julian Scheid from Deutsche Telekom Security GmbH for responsible disclosure of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v</a></li>
<li><a href="https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6">https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49375">https://nvd.nist.gov/vuln/detail/CVE-2024-49375</a></li>
<li><a href="https://github.com/advisories/GHSA-cpv4-ggrr-7j9v">https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-14T16:00:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rasa-pro] Rasa Allows Remote Code Execution via Remote Model Loading]]></title>
        <id>https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</id>
        <link href="https://github.com/advisories/GHSA-cpv4-ggrr-7j9v"/>
        <updated>2025-01-14T21:59:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability">Vulnerability</h2>
<p>A vulnerability has been identified in Rasa Pro and Rasa Open Source that enables an attacker who has the ability to load a maliciously crafted model remotely into a Rasa instance to achieve Remote Code Execution.</p>
<p>The prerequisites for this are:</p>
<ul>
<li>The HTTP API must be enabled on the Rasa instance eg with <code>--enable-api</code>. This is not the default configuration.</li>
<li>For unauthenticated RCE to be exploitable, the user must not have configured any authentication or other security controls recommended in our documentation.</li>
<li>For authenticated RCE, the attacker must posses a valid authentication token or JWT to interact with the Rasa API.</li>
</ul>
<h2 id="fix">Fix</h2>
<p>We encourage you to upgrade to a version of Rasa that includes a fix. These are:</p>
<ul>
<li>Rasa Pro 3.8.18, 3.9.16, 3.10.12</li>
<li>Rasa Open Source 3.6.21</li>
</ul>
<p>Once you have upgraded your Rasa Pro or Open Source installation, you will need to retrain your model using the fixed version of Rasa Pro or Open Source. If you have a custom component that inherits from one of the components listed below and modified the persist or load method, make sure to update your code. Please contact us in case you encounter any problems.</p>
<p>Affected components:</p>
<ul>
<li><code>CountVectorFeaturizer</code></li>
<li><code>LexicalSyntacticFeaturizer</code></li>
<li><code>LogisticRegressionClassifier</code></li>
<li><code>SklearnIntentClassifier</code></li>
<li><code>DIETClassifier</code></li>
<li><code>CRFEntityExtractor</code></li>
<li><code>TrackerFeaturizer</code></li>
<li><code>TEDPolicy</code></li>
<li><code>UnexpectedIntentTEDPolicy</code></li>
</ul>
<p>If you are unable to upgrade immediately, please follow our mitigation advice below.</p>
<h2 id="mitigation-advice">Mitigation Advice</h2>
<ul>
<li><p>The unauthenticated RCE can be mitigated by ensuring that you enable authentication for the Rasa HTTP API if this is enabled. This means that in addition to passing <code>--enable-api</code> to Rasa, you should also pass an authentication configuration as described in our documentation <a href="https://rasa.com/docs/rasa-pro/production/rest-api/#enabling-the-rest-api">here</a>. </p>
</li>
<li><p>The authenticated RCE can be mitigated by:</p>
<ul>
<li>Ensuring that you only load models from trusted sources such as your own CI pipelines. You can check file hashes for model archives to confirm that a model has not been tampered with between training and use.</li>
<li>Confirming that you have sufficient access controls and utilize the principle of least privilege to control who in your organization has the ability to interact with the Rasa API even with authentication enabled.</li>
</ul>
</li>
</ul>
<h2 id="future-releases">Future Releases</h2>
<p>As an additional security step, a future release of Rasa Pro will remove the ability to enable the API without any authentication method enabled.</p>
<h2 id="credit">Credit</h2>
<p>Rasa would like to thank Julian Scheid from Deutsche Telekom Security GmbH for responsible disclosure of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v</a></li>
<li><a href="https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6">https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49375">https://nvd.nist.gov/vuln/detail/CVE-2024-49375</a></li>
<li><a href="https://github.com/advisories/GHSA-cpv4-ggrr-7j9v">https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-14T16:00:21.000Z</published>
    </entry>
</feed>