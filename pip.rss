<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-06-20T21:29:11.783Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[rfc3161-client] rfc3161-client has insufficient verification for timestamp response signatures]]></title>
        <id>https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</id>
        <link href="https://github.com/advisories/GHSA-6qhv-4h7r-2g9m"/>
        <updated>2025-06-20T18:08:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>rfc3161-client</code> 1.0.2 and earlier contain a flaw in their timestamp response signature verification logic. In particular, it performs chain verification against the TSR's embedded certificates up to the trusted root(s), but fails to verify the TSR's own signature against the timestamping leaf certificates. Consequently, vulnerable versions perform insufficient signature validation to properly consider a TSR verified, as the attacker can introduce <em>any</em> TSR signature so long as the embedded leaf chains up to some root TSA.</p>
<h3 id="patches">Patches</h3>
<p>Users should immediately upgrade to <code>rfc3161-client</code> 1.0.3 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround possible. Users should immediately upgrade to a fixed version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trailofbits/rfc3161-client/security/advisories/GHSA-6qhv-4h7r-2g9m">https://github.com/trailofbits/rfc3161-client/security/advisories/GHSA-6qhv-4h7r-2g9m</a></li>
<li><a href="https://github.com/trailofbits/rfc3161-client/commit/724a184f953e3f171f85cb223871172b41b0d0dc">https://github.com/trailofbits/rfc3161-client/commit/724a184f953e3f171f85cb223871172b41b0d0dc</a></li>
<li><a href="https://github.com/advisories/GHSA-6qhv-4h7r-2g9m">https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-20T18:08:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urllib3] urllib3 does not control redirects in browsers and Node.js]]></title>
        <id>https://github.com/advisories/GHSA-48p4-8xcf-vxj5</id>
        <link href="https://github.com/advisories/GHSA-48p4-8xcf-vxj5"/>
        <updated>2025-06-19T15:19:09.000Z</updated>
        <content type="html"><![CDATA[<p>urllib3 <a href="https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html">supports</a> being used in a Pyodide runtime utilizing the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">JavaScript Fetch API</a> or falling back on <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>. This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides <a href="https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests">a mechanism</a> to control redirects.</p>
<p>However, the <code>retries</code> and <code>redirect</code> parameters are ignored with Pyodide; the runtime itself determines redirect behavior.</p>
<h2 id="affected-usages">Affected usages</h2>
<p>Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.</p>
<h2 id="impact">Impact</h2>
<p>Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.</p>
<h2 id="remediation">Remediation</h2>
<p>If you use urllib3 in Node.js, upgrade to a patched version of urllib3.</p>
<p>Unfortunately, browsers provide no suitable way which urllib3 can use: <code>XMLHttpRequest</code> provides no control over redirects, the Fetch API returns <code>opaqueredirect</code> responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5">https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f">https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-50182">https://nvd.nist.gov/vuln/detail/CVE-2025-50182</a></li>
<li><a href="https://github.com/advisories/GHSA-48p4-8xcf-vxj5">https://github.com/advisories/GHSA-48p4-8xcf-vxj5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48p4-8xcf-vxj5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-18T17:50:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urllib3] urllib3 redirects are not disabled when retries are disabled on PoolManager instantiation]]></title>
        <id>https://github.com/advisories/GHSA-pq67-6m6q-mj2v</id>
        <link href="https://github.com/advisories/GHSA-pq67-6m6q-mj2v"/>
        <updated>2025-06-19T15:19:00.000Z</updated>
        <content type="html"><![CDATA[<p>urllib3 handles redirects and retries using the same mechanism, which is controlled by the <code>Retry</code> object. The most common way to disable redirects is at the request level, as follows:</p>
<pre><code class="language-python">resp = urllib3.request("GET", "https://httpbin.org/redirect/1", redirect=False)
print(resp.status)
# 302
</code></pre>
<p>However, it is also possible to disable redirects, for all requests, by instantiating a <code>PoolManager</code> and specifying <code>retries</code> in a way that disable redirects:</p>
<pre><code class="language-python">import urllib3

http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect
http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above
http = urllib3.PoolManager(retries=False)  # should return the first response

resp = http.request("GET", "https://httpbin.org/redirect/1")
</code></pre>
<p>However, the <code>retries</code> parameter is currently ignored, which means all the above examples don't disable redirects.</p>
<h2 id="affected-usages">Affected usages</h2>
<p>Passing <code>retries</code> on <code>PoolManager</code> instantiation to disable redirects or restrict their number.</p>
<p>By default, requests and botocore users are not affected.</p>
<h2 id="impact">Impact</h2>
<p>Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.</p>
<h2 id="remediation">Remediation</h2>
<p>You can remediate this vulnerability with the following steps:</p>
<ul>
<li>Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact <a href="mailto:sethmichaellarson@gmail.com">sethmichaellarson@gmail.com</a> to discuss sponsorship or contribution opportunities.</li>
<li>Disable redirects at the <code>request()</code> level instead of the <code>PoolManager()</code> level.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v">https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857">https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-50181">https://nvd.nist.gov/vuln/detail/CVE-2025-50181</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-6m6q-mj2v">https://github.com/advisories/GHSA-pq67-6m6q-mj2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-6m6q-mj2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-18T17:50:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper: reversed order of side effects for some operations]]></title>
        <id>https://github.com/advisories/GHSA-g2xh-c426-v8mf</id>
        <link href="https://github.com/advisories/GHSA-g2xh-c426-v8mf"/>
        <updated>2025-06-18T17:43:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right.</p>
<pre><code>- unsafe_add
- unsafe_sub
- unsafe_mul
- unsafe_div
- pow_mod256
- |, &amp;, ^ (bitwise operators)
- bitwise_or (deprecated)
- bitwise_and (deprecated)
- bitwise_xor (deprecated)
- raw_call
- &lt;, &gt;, &lt;=, &gt;=, ==, !=
- in, not in (when lhs and rhs are enums)
</code></pre>
<p>This behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect:</p>
<ul>
<li>state modifying external call </li>
<li>state modifying internal call</li>
<li><code>raw_call</code></li>
<li><code>pop()</code> when used on a Dynamic Array stored in the storage</li>
<li><code>create_minimal_proxy_to</code></li>
<li><code>create_copy_of</code></li>
<li><code>create_from_blueprint</code></li>
</ul>
<p>For example:</p>
<pre><code class="language-Vyper">f:uint256

@internal
def side_effect() -&gt; uint256:
    self.f = 12
    return 1

@external
def foo() -&gt; uint256:
    return unsafe_add(self.f,self.side_effect()) # returns 13 instead of 1
</code></pre>
<pre><code class="language-Vyper">a:DynArray[uint256, 12]
@external
def bar() -&gt; bool:
    self.a = [1,2,3]
    return len(self.a) == self.a.pop() # return false instead of true
</code></pre>
<h3 id="patches">Patches</h3>
<p>not yet patched, will address in a future release. tracking in <a href="https://github.com/vyperlang/vyper/issues/3604">https://github.com/vyperlang/vyper/issues/3604</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>When using expressions from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf">https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-40015">https://nvd.nist.gov/vuln/detail/CVE-2023-40015</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml</a></li>
<li><a href="https://github.com/vyperlang/vyper/issues/3604">https://github.com/vyperlang/vyper/issues/3604</a></li>
<li><a href="https://github.com/vyperlang/vyper/issues/4019">https://github.com/vyperlang/vyper/issues/4019</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/4157">https://github.com/vyperlang/vyper/pull/4157</a></li>
<li><a href="https://github.com/advisories/GHSA-g2xh-c426-v8mf">https://github.com/advisories/GHSA-g2xh-c426-v8mf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g2xh-c426-v8mf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-04T16:39:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Gradio allows credential leakage on Windows]]></title>
        <id>https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</id>
        <link href="https://github.com/advisories/GHSA-rvfh-h6c7-fc3c"/>
        <updated>2025-06-17T22:33:36.000Z</updated>
        <content type="html"><![CDATA[<p>Gradio before 4.20 allows credential leakage on Windows.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34510">https://nvd.nist.gov/vuln/detail/CVE-2024-34510</a></li>
<li><a href="https://github.com/gradio-app/gradio">https://github.com/gradio-app/gradio</a></li>
<li><a href="https://www.gradio.app/changelog#4-20-0">https://www.gradio.app/changelog#4-20-0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/gradio/PYSEC-2024-255.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/gradio/PYSEC-2024-255.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-rvfh-h6c7-fc3c">https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-05T21:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch Improper Resource Shutdown or Release vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-887c-mr87-cxwp</id>
        <link href="https://github.com/advisories/GHSA-887c-mr87-cxwp"/>
        <updated>2025-06-17T22:32:43.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3730">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/150835">https://github.com/pytorch/pytorch/issues/150835</a></li>
<li><a href="https://github.com/pytorch/pytorch/pull/150981">https://github.com/pytorch/pytorch/pull/150981</a></li>
<li><a href="https://vuldb.com/?ctiid.305076">https://vuldb.com/?ctiid.305076</a></li>
<li><a href="https://vuldb.com/?id.305076">https://vuldb.com/?id.305076</a></li>
<li><a href="https://vuldb.com/?submit.553645">https://vuldb.com/?submit.553645</a></li>
<li><a href="https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>
<li><a href="https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567">https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567</a></li>
<li><a href="https://github.com/advisories/GHSA-887c-mr87-cxwp">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-887c-mr87-cxwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-16T21:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langflow] Langflow Unauth RCE]]></title>
        <id>https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</id>
        <link href="https://github.com/advisories/GHSA-rvqx-wpfh-mfx7"/>
        <updated>2025-06-17T20:14:27.000Z</updated>
        <content type="html"><![CDATA[<p>Langflow versions prior to 1.3.0 are susceptible to code injection in the /api/v1/validate/code endpoint. A remote and unauthenticated attacker can send crafted HTTP requests to execute arbitrary code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/langflow-ai/langflow/security/advisories/GHSA-rvqx-wpfh-mfx7">https://github.com/langflow-ai/langflow/security/advisories/GHSA-rvqx-wpfh-mfx7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3248">https://nvd.nist.gov/vuln/detail/CVE-2025-3248</a></li>
<li><a href="https://github.com/langflow-ai/langflow/pull/6911">https://github.com/langflow-ai/langflow/pull/6911</a></li>
<li><a href="https://github.com/langflow-ai/langflow/commit/faac4db133de32fcb6d483fa9ff52f40ce42bdc0">https://github.com/langflow-ai/langflow/commit/faac4db133de32fcb6d483fa9ff52f40ce42bdc0</a></li>
<li><a href="https://github.com/langflow-ai/langflow/releases/tag/1.3.0">https://github.com/langflow-ai/langflow/releases/tag/1.3.0</a></li>
<li><a href="https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai">https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai</a></li>
<li><a href="https://github.com/advisories/GHSA-rvqx-wpfh-mfx7">https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-17T20:14:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Mezzanine] Mezzanine CMS has a Stored Cross-Site Scripting (XSS) vulnerability in the displayable_links_js function]]></title>
        <id>https://github.com/advisories/GHSA-7pr5-w74r-jjj7</id>
        <link href="https://github.com/advisories/GHSA-7pr5-w74r-jjj7"/>
        <updated>2025-06-17T15:38:12.000Z</updated>
        <content type="html"><![CDATA[<p>Mezzanine CMS, in versions prior to 6.1.1, contains a Stored Cross-Site Scripting (XSS) vulnerability in the admin interface. The vulnerability exists in the "displayable_links_js" function, which fails to properly sanitize blog post titles before including them in JSON responses served via "/admin/displayable_links.js". An authenticated admin user can create a blog post with a malicious JavaScript payload in the title field, then trick another admin user into clicking a direct link to the "/admin/displayable_links.js" endpoint, causing the malicious script to execute in their browser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6050">https://nvd.nist.gov/vuln/detail/CVE-2025-6050</a></li>
<li><a href="https://github.com/stephenmcd/mezzanine/discussions/2080">https://github.com/stephenmcd/mezzanine/discussions/2080</a></li>
<li><a href="https://https://github.com/stephenmcd/mezzanine/commit/898630d8df48cf3ddb8b9942f59168b93216e3f8">https://https://github.com/stephenmcd/mezzanine/commit/898630d8df48cf3ddb8b9942f59168b93216e3f8</a></li>
<li><a href="https://github.com/advisories/GHSA-7pr5-w74r-jjj7">https://github.com/advisories/GHSA-7pr5-w74r-jjj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pr5-w74r-jjj7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-17T12:31:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python-a2a] python-a2a has a path traversal in the create_workflow function]]></title>
        <id>https://github.com/advisories/GHSA-rp38-pj7h-r8q2</id>
        <link href="https://github.com/advisories/GHSA-rp38-pj7h-r8q2"/>
        <updated>2025-06-17T15:37:17.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability classified as critical has been found in themanojdesai python-a2a up to 0.5.5. Affected is the function create_workflow of the file python_a2a/agent_flow/server/api.py. The manipulation leads to path traversal. Upgrading to version 0.5.6 is able to address this issue. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6167">https://nvd.nist.gov/vuln/detail/CVE-2025-6167</a></li>
<li><a href="https://github.com/themanojdesai/python-a2a/issues/40">https://github.com/themanojdesai/python-a2a/issues/40</a></li>
<li><a href="https://github.com/themanojdesai/python-a2a/releases/tag/v0.5.6">https://github.com/themanojdesai/python-a2a/releases/tag/v0.5.6</a></li>
<li><a href="https://vuldb.com/?ctiid.312642">https://vuldb.com/?ctiid.312642</a></li>
<li><a href="https://vuldb.com/?id.312642">https://vuldb.com/?id.312642</a></li>
<li><a href="https://vuldb.com/?submit.593613">https://vuldb.com/?submit.593613</a></li>
<li><a href="https://github.com/advisories/GHSA-rp38-pj7h-r8q2">https://github.com/advisories/GHSA-rp38-pj7h-r8q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rp38-pj7h-r8q2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-17T09:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pycares] pycares has a Use-After-Free Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5qpg-rh4j-qp35</id>
        <link href="https://github.com/advisories/GHSA-5qpg-rh4j-qp35"/>
        <updated>2025-06-16T16:09:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>pycares is vulnerable to a use-after-free condition that occurs when a Channel object is garbage collected while DNS queries are still pending. This results in a fatal Python error and interpreter crash.</p>
<h2 id="details">Details</h2>
<h3 id="root-cause">Root Cause</h3>
<p>The vulnerability stems from improper handling of callback references when the Channel object is destroyed:</p>
<ol>
<li>When a DNS query is initiated, pycares stores a callback reference using <code>ffi.new_handle()</code></li>
<li>If the Channel object is garbage collected while queries are pending, the callback references become invalid</li>
<li>When c-ares attempts to invoke the callback, it accesses freed memory, causing a fatal error</li>
</ol>
<p>This issue was much more likely to occur when using <code>event_thread=True</code> but could happen without it under the right circumstances.</p>
<h3 id="technical-details">Technical Details</h3>
<p>The core issue is a race condition between Python's garbage collector and c-ares's callback execution:</p>
<ol>
<li>When <code>__del__</code> is called from within a c-ares callback context, we cannot immediately call <code>ares_destroy()</code> because c-ares is still executing code after the callback returns</li>
<li>c-ares needs to execute cleanup code after our Python callback returns (specifically at lines 1422-1429 in ares_process.c)</li>
<li>If we destroy the channel too quickly, c-ares accesses freed memory</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Applications using <code>pycares</code> can be crashed remotely by triggering DNS queries that result in <code>Channel</code> objects being garbage collected before query completion. This is particularly problematic in scenarios where:</p>
<ul>
<li>Channel objects are created per-request</li>
<li>Multiple failed DNS queries are processed rapidly</li>
<li>The application doesn't properly manage Channel lifecycle</li>
</ul>
<p>The error manifests as:</p>
<pre><code>Fatal Python error: b_from_handle: ffi.from_handle() detected that the address passed points to garbage
</code></pre>
<h2 id="fix">Fix</h2>
<p>The vulnerability has been fixed in pycares 4.9.0 by implementing a safe channel destruction mechanism</p>
<h2 id="mitigation">Mitigation</h2>
<h3 id="for-application-developers">For Application Developers</h3>
<ol>
<li><strong>Upgrade to pycares &gt;= 4.9.0</strong> - This version includes the fix and requires no code changes</li>
<li><strong>Best practices</strong> (optional but recommended):<pre><code class="language-python"># Explicit cleanup
channel.close()

# Or use context manager
with pycares.Channel() as channel:
    # ... use channel ...
# Automatically closed
</code></pre>
</li>
<li><strong>Avoid creating Channel objects per-request</strong> - Prefer long-lived instances for better performance and safety</li>
</ol>
<p>The fix is completely transparent - no API changes or code modifications are required.</p>
<h2 id="credit">Credit</h2>
<p>This vulnerability was reported by @vEpiphyte through the aio-libs security program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saghul/pycares/security/advisories/GHSA-5qpg-rh4j-qp35">https://github.com/saghul/pycares/security/advisories/GHSA-5qpg-rh4j-qp35</a></li>
<li><a href="https://github.com/saghul/pycares/commit/ebfd7d71eb8e74bc1057a361ea79a5906db510d4">https://github.com/saghul/pycares/commit/ebfd7d71eb8e74bc1057a361ea79a5906db510d4</a></li>
<li><a href="https://github.com/advisories/GHSA-5qpg-rh4j-qp35">https://github.com/advisories/GHSA-5qpg-rh4j-qp35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5qpg-rh4j-qp35</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-16T16:09:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[protobuf] protobuf-python has a potential Denial of Service issue]]></title>
        <id>https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</id>
        <link href="https://github.com/advisories/GHSA-8qvm-5x2c-j2w7"/>
        <updated>2025-06-16T16:03:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of <strong>recursive groups</strong>, <strong>recursive messages</strong> or <strong>a series of <a href="https://protobuf.dev/programming-guides/encoding/#groups"><code>SGROUP</code></a> tags</strong> can be corrupted by exceeding the Python recursion limit.</p>
<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team
<a href="mailto:ecosystem@trailofbits.com">ecosystem@trailofbits.com</a></p>
<p>Affected versions: This issue only affects the <a href="https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends">pure-Python implementation</a> of protobuf-python backend. This is the implementation when <code>PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python</code> environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.</p>
<p>This is a Python variant of a <a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">previous issue affecting protobuf-java</a>.</p>
<h3 id="severity">Severity</h3>
<p>This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>For reproduction details, please refer to the unit tests <a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98">decoder_test.py</a> and <a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478">message_test</a></p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<p>A mitigation is available now. Please update to the latest available versions of the following packages:</p>
<ul>
<li>protobuf-python(4.25.8, 5.29.5, 6.31.1)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4565">https://nvd.nist.gov/vuln/detail/CVE-2025-4565</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901">https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends">https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends</a></li>
<li><a href="https://github.com/advisories/GHSA-8qvm-5x2c-j2w7">https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-16T16:02:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[protobuf] protobuf-python has a potential Denial of Service issue]]></title>
        <id>https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</id>
        <link href="https://github.com/advisories/GHSA-8qvm-5x2c-j2w7"/>
        <updated>2025-06-16T16:03:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of <strong>recursive groups</strong>, <strong>recursive messages</strong> or <strong>a series of <a href="https://protobuf.dev/programming-guides/encoding/#groups"><code>SGROUP</code></a> tags</strong> can be corrupted by exceeding the Python recursion limit.</p>
<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team
<a href="mailto:ecosystem@trailofbits.com">ecosystem@trailofbits.com</a></p>
<p>Affected versions: This issue only affects the <a href="https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends">pure-Python implementation</a> of protobuf-python backend. This is the implementation when <code>PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python</code> environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.</p>
<p>This is a Python variant of a <a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">previous issue affecting protobuf-java</a>.</p>
<h3 id="severity">Severity</h3>
<p>This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>For reproduction details, please refer to the unit tests <a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98">decoder_test.py</a> and <a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478">message_test</a></p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<p>A mitigation is available now. Please update to the latest available versions of the following packages:</p>
<ul>
<li>protobuf-python(4.25.8, 5.29.5, 6.31.1)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4565">https://nvd.nist.gov/vuln/detail/CVE-2025-4565</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901">https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends">https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends</a></li>
<li><a href="https://github.com/advisories/GHSA-8qvm-5x2c-j2w7">https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-16T16:02:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[protobuf] protobuf-python has a potential Denial of Service issue]]></title>
        <id>https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</id>
        <link href="https://github.com/advisories/GHSA-8qvm-5x2c-j2w7"/>
        <updated>2025-06-16T16:03:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of <strong>recursive groups</strong>, <strong>recursive messages</strong> or <strong>a series of <a href="https://protobuf.dev/programming-guides/encoding/#groups"><code>SGROUP</code></a> tags</strong> can be corrupted by exceeding the Python recursion limit.</p>
<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team
<a href="mailto:ecosystem@trailofbits.com">ecosystem@trailofbits.com</a></p>
<p>Affected versions: This issue only affects the <a href="https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends">pure-Python implementation</a> of protobuf-python backend. This is the implementation when <code>PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python</code> environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.</p>
<p>This is a Python variant of a <a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">previous issue affecting protobuf-java</a>.</p>
<h3 id="severity">Severity</h3>
<p>This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>For reproduction details, please refer to the unit tests <a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98">decoder_test.py</a> and <a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478">message_test</a></p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<p>A mitigation is available now. Please update to the latest available versions of the following packages:</p>
<ul>
<li>protobuf-python(4.25.8, 5.29.5, 6.31.1)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4565">https://nvd.nist.gov/vuln/detail/CVE-2025-4565</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901">https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends">https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends</a></li>
<li><a href="https://github.com/advisories/GHSA-8qvm-5x2c-j2w7">https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-16T16:02:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[weblate] Weblate exposes personal IP address via e-mail]]></title>
        <id>https://github.com/advisories/GHSA-4qqf-9m5c-w2c5</id>
        <link href="https://github.com/advisories/GHSA-4qqf-9m5c-w2c5"/>
        <updated>2025-06-16T21:47:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The audit log notifications included the full IP address of the acting user. This could be obtained by third-party servers such as SMTP relays, or spam filters.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been addressed in Weblate 5.12 via <a href="https://github.com/WeblateOrg/weblate/pull/15102">https://github.com/WeblateOrg/weblate/pull/15102</a>.</p>
<h3 id="references">References</h3>
<p>Thanks to <a href="https://hackerone.com/micael1">micael1</a> for reporting this <a href="https://hackerone.com/reports/3179850">issue at HackerOne</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/WeblateOrg/weblate/security/advisories/GHSA-4qqf-9m5c-w2c5">https://github.com/WeblateOrg/weblate/security/advisories/GHSA-4qqf-9m5c-w2c5</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/pull/15102">https://github.com/WeblateOrg/weblate/pull/15102</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/commit/020b2905e4d001cff2452574d10e6cf3621b5f62">https://github.com/WeblateOrg/weblate/commit/020b2905e4d001cff2452574d10e6cf3621b5f62</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-49134">https://nvd.nist.gov/vuln/detail/CVE-2025-49134</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1">https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-4qqf-9m5c-w2c5">https://github.com/advisories/GHSA-4qqf-9m5c-w2c5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qqf-9m5c-w2c5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-16T14:52:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[weblate] Weblate lacks rate limiting when verifying second factor]]></title>
        <id>https://github.com/advisories/GHSA-57jg-m997-cx3q</id>
        <link href="https://github.com/advisories/GHSA-57jg-m997-cx3q"/>
        <updated>2025-06-17T17:16:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The verification of the second factor was not subject to rate limiting. The absence of rate limiting on the second factor endpoint allows an attacker with valid credentials to automate OTP guessing. </p>
<h3 id="patches">Patches</h3>
<p>This issue has been addressed in Weblate 5.12 via <a href="https://github.com/WeblateOrg/weblate/pull/14918">https://github.com/WeblateOrg/weblate/pull/14918</a>.</p>
<h3 id="references">References</h3>
<p>Thanks to <a href="https://hackerone.com/obscuredeer">obscuredeer</a> for reporting this <a href="https://hackerone.com/reports/3150564">issue at HackerOne</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/WeblateOrg/weblate/security/advisories/GHSA-57jg-m997-cx3q">https://github.com/WeblateOrg/weblate/security/advisories/GHSA-57jg-m997-cx3q</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/pull/14918">https://github.com/WeblateOrg/weblate/pull/14918</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/commit/f806293451248c5d95e45b3b507e9d158bc4f384">https://github.com/WeblateOrg/weblate/commit/f806293451248c5d95e45b3b507e9d158bc4f384</a></li>
<li><a href="https://hackerone.com/reports/3150564">https://hackerone.com/reports/3150564</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47951">https://nvd.nist.gov/vuln/detail/CVE-2025-47951</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1">https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-57jg-m997-cx3q">https://github.com/advisories/GHSA-57jg-m997-cx3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-57jg-m997-cx3q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-16T14:52:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[salt] Salt vulnerable to directory traversal attack in file receiving method]]></title>
        <id>https://github.com/advisories/GHSA-8pcp-r83j-fc92</id>
        <link href="https://github.com/advisories/GHSA-8pcp-r83j-fc92"/>
        <updated>2025-06-13T21:58:02.000Z</updated>
        <content type="html"><![CDATA[<p>Directory traversal vulnerability in recv_file method allows arbitrary files to be written to the master cache directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38824">https://nvd.nist.gov/vuln/detail/CVE-2024-38824</a></li>
<li><a href="https://docs.saltproject.io/en/3006/topics/releases/3006.12.html">https://docs.saltproject.io/en/3006/topics/releases/3006.12.html</a></li>
<li><a href="https://docs.saltproject.io/en/3007/topics/releases/3007.4.html">https://docs.saltproject.io/en/3007/topics/releases/3007.4.html</a></li>
<li><a href="https://github.com/saltstack/salt/commit/c4ad23f0f3132d8d8a88f19fa537dc42cf21b215">https://github.com/saltstack/salt/commit/c4ad23f0f3132d8d8a88f19fa537dc42cf21b215</a></li>
<li><a href="https://github.com/advisories/GHSA-8pcp-r83j-fc92">https://github.com/advisories/GHSA-8pcp-r83j-fc92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pcp-r83j-fc92</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-13T09:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[salt] Salt vulnerable to directory traversal attack in file receiving method]]></title>
        <id>https://github.com/advisories/GHSA-8pcp-r83j-fc92</id>
        <link href="https://github.com/advisories/GHSA-8pcp-r83j-fc92"/>
        <updated>2025-06-13T21:58:02.000Z</updated>
        <content type="html"><![CDATA[<p>Directory traversal vulnerability in recv_file method allows arbitrary files to be written to the master cache directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38824">https://nvd.nist.gov/vuln/detail/CVE-2024-38824</a></li>
<li><a href="https://docs.saltproject.io/en/3006/topics/releases/3006.12.html">https://docs.saltproject.io/en/3006/topics/releases/3006.12.html</a></li>
<li><a href="https://docs.saltproject.io/en/3007/topics/releases/3007.4.html">https://docs.saltproject.io/en/3007/topics/releases/3007.4.html</a></li>
<li><a href="https://github.com/saltstack/salt/commit/c4ad23f0f3132d8d8a88f19fa537dc42cf21b215">https://github.com/saltstack/salt/commit/c4ad23f0f3132d8d8a88f19fa537dc42cf21b215</a></li>
<li><a href="https://github.com/advisories/GHSA-8pcp-r83j-fc92">https://github.com/advisories/GHSA-8pcp-r83j-fc92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pcp-r83j-fc92</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-13T09:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[salt] Salt's worker process vulnerable to denial of service through file read operation]]></title>
        <id>https://github.com/advisories/GHSA-989c-m532-p2hv</id>
        <link href="https://github.com/advisories/GHSA-989c-m532-p2hv"/>
        <updated>2025-06-13T21:57:42.000Z</updated>
        <content type="html"><![CDATA[<p>Worker process denial of service through file read operation. .A vulnerability exists in the Master's “pub_ret” method which is exposed to all minions. The un-sanitized input value “jid” is used to construct a path which is then opened for reading. An attacker could exploit this vulnerabilities by attempting to read from a filename that will not return any data, e.g. by targeting a pipe node on the proc file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22242">https://nvd.nist.gov/vuln/detail/CVE-2025-22242</a></li>
<li><a href="https://docs.saltproject.io/en/3006/topics/releases/3006.12.html">https://docs.saltproject.io/en/3006/topics/releases/3006.12.html</a></li>
<li><a href="https://docs.saltproject.io/en/3007/topics/releases/3007.4.html">https://docs.saltproject.io/en/3007/topics/releases/3007.4.html</a></li>
<li><a href="https://github.com/saltstack/salt/commit/e39116fb87bf4db9bcb9aade8258c66df87d41fe">https://github.com/saltstack/salt/commit/e39116fb87bf4db9bcb9aade8258c66df87d41fe</a></li>
<li><a href="https://github.com/advisories/GHSA-989c-m532-p2hv">https://github.com/advisories/GHSA-989c-m532-p2hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-989c-m532-p2hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-13T09:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[salt] Salt's worker process vulnerable to denial of service through file read operation]]></title>
        <id>https://github.com/advisories/GHSA-989c-m532-p2hv</id>
        <link href="https://github.com/advisories/GHSA-989c-m532-p2hv"/>
        <updated>2025-06-13T21:57:42.000Z</updated>
        <content type="html"><![CDATA[<p>Worker process denial of service through file read operation. .A vulnerability exists in the Master's “pub_ret” method which is exposed to all minions. The un-sanitized input value “jid” is used to construct a path which is then opened for reading. An attacker could exploit this vulnerabilities by attempting to read from a filename that will not return any data, e.g. by targeting a pipe node on the proc file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22242">https://nvd.nist.gov/vuln/detail/CVE-2025-22242</a></li>
<li><a href="https://docs.saltproject.io/en/3006/topics/releases/3006.12.html">https://docs.saltproject.io/en/3006/topics/releases/3006.12.html</a></li>
<li><a href="https://docs.saltproject.io/en/3007/topics/releases/3007.4.html">https://docs.saltproject.io/en/3007/topics/releases/3007.4.html</a></li>
<li><a href="https://github.com/saltstack/salt/commit/e39116fb87bf4db9bcb9aade8258c66df87d41fe">https://github.com/saltstack/salt/commit/e39116fb87bf4db9bcb9aade8258c66df87d41fe</a></li>
<li><a href="https://github.com/advisories/GHSA-989c-m532-p2hv">https://github.com/advisories/GHSA-989c-m532-p2hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-989c-m532-p2hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-13T09:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[salt] Salt's file contents overwrite the VirtKey class]]></title>
        <id>https://github.com/advisories/GHSA-7f3f-x5f5-79gw</id>
        <link href="https://github.com/advisories/GHSA-7f3f-x5f5-79gw"/>
        <updated>2025-06-17T20:00:42.000Z</updated>
        <content type="html"><![CDATA[<p>File contents overwrite the VirtKey class is called when “on-demand pillar” data is requested and uses un-validated input to create paths to the “pki directory”. The functionality is used to auto-accept Minion authentication keys based on a pre-placed “authorization file” at a specific location and is present in the default configuration.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22241">https://nvd.nist.gov/vuln/detail/CVE-2025-22241</a></li>
<li><a href="https://docs.saltproject.io/en/3006/topics/releases/3006.12.html">https://docs.saltproject.io/en/3006/topics/releases/3006.12.html</a></li>
<li><a href="https://docs.saltproject.io/en/3007/topics/releases/3007.4.html">https://docs.saltproject.io/en/3007/topics/releases/3007.4.html</a></li>
<li><a href="https://github.com/saltstack/salt/commit/9445f496fed61b15dc4364818007e5b765b0746f">https://github.com/saltstack/salt/commit/9445f496fed61b15dc4364818007e5b765b0746f</a></li>
<li><a href="https://github.com/advisories/GHSA-7f3f-x5f5-79gw">https://github.com/advisories/GHSA-7f3f-x5f5-79gw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7f3f-x5f5-79gw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-13T09:30:33.000Z</published>
    </entry>
</feed>