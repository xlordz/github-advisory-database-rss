<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-03-20T20:01:21.430Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Vulnerable to Denial of Service (DoS) via Large GZIP Parsing]]></title>
        <id>https://github.com/advisories/GHSA-6w62-3jvj-mfj6</id>
        <link href="https://github.com/advisories/GHSA-6w62-3jvj-mfj6"/>
        <updated>2025-03-20T19:56:43.000Z</updated>
        <content type="html"><![CDATA[<p>In h2oai/h2o-3 version 3.46.0.2, a vulnerability exists where uploading and repeatedly parsing a large GZIP file can cause a denial of service. The server becomes unresponsive due to memory exhaustion and a large number of concurrent slow-running jobs. This issue arises from the improper handling of highly compressed data, leading to significant data amplification.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7765">https://nvd.nist.gov/vuln/detail/CVE-2024-7765</a></li>
<li><a href="https://huntr.com/bounties/0e58b1a5-bdca-4e60-af92-09de9c76a9ff">https://huntr.com/bounties/0e58b1a5-bdca-4e60-af92-09de9c76a9ff</a></li>
<li><a href="https://github.com/h2oai/h2o-3/blob/7d418fa19d3ab434f742818e37f891bef9102c97/h2o-core/src/main/java/water/parser/ParseDataset.java#L900">https://github.com/h2oai/h2o-3/blob/7d418fa19d3ab434f742818e37f891bef9102c97/h2o-core/src/main/java/water/parser/ParseDataset.java#L900</a></li>
<li><a href="https://github.com/advisories/GHSA-6w62-3jvj-mfj6">https://github.com/advisories/GHSA-6w62-3jvj-mfj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6w62-3jvj-mfj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[litellm] LiteLLM Vulnerable to Remote Code Execution (RCE)]]></title>
        <id>https://github.com/advisories/GHSA-53gh-p8jc-7rg8</id>
        <link href="https://github.com/advisories/GHSA-53gh-p8jc-7rg8"/>
        <updated>2025-03-20T19:55:13.000Z</updated>
        <content type="html"><![CDATA[<p>BerriAI/litellm version 1.40.12 contains a vulnerability that allows remote code execution. The issue exists in the handling of the 'post_call_rules' configuration, where a callback function can be added. The provided value is split at the final '.' mark, with the last part considered the function name and the remaining part appended with the '.py' extension and imported. This allows an attacker to set a system method, such as 'os.system', as a callback, enabling the execution of arbitrary commands when a chat response is processed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6825">https://nvd.nist.gov/vuln/detail/CVE-2024-6825</a></li>
<li><a href="https://huntr.com/bounties/1d98bebb-6cf4-46c9-87c3-d3b1972973b5">https://huntr.com/bounties/1d98bebb-6cf4-46c9-87c3-d3b1972973b5</a></li>
<li><a href="https://github.com/BerriAI/litellm/blob/056913fd7049923a106130b02d7c29e7f312beec/litellm/utils.py#L2818">https://github.com/BerriAI/litellm/blob/056913fd7049923a106130b02d7c29e7f312beec/litellm/utils.py#L2818</a></li>
<li><a href="https://github.com/advisories/GHSA-53gh-p8jc-7rg8">https://github.com/advisories/GHSA-53gh-p8jc-7rg8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-53gh-p8jc-7rg8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Vulnerable to Arbitrary File Overwrite via File Export]]></title>
        <id>https://github.com/advisories/GHSA-47f6-5p7h-5f3h</id>
        <link href="https://github.com/advisories/GHSA-47f6-5p7h-5f3h"/>
        <updated>2025-03-20T19:53:20.000Z</updated>
        <content type="html"><![CDATA[<p>In h2oai/h2o-3 version 3.46.0, the endpoint for exporting models does not restrict the export location, allowing an attacker to export a model to any file in the server's file structure, thereby overwriting it. This vulnerability can be exploited to overwrite any file on the target server with a trained model file, although the content of the overwrite is not controllable by the attacker.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6854">https://nvd.nist.gov/vuln/detail/CVE-2024-6854</a></li>
<li><a href="https://huntr.com/bounties/97d013f9-ac51-4c80-8dd7-8dfde11f33b2">https://huntr.com/bounties/97d013f9-ac51-4c80-8dd7-8dfde11f33b2</a></li>
<li><a href="https://github.com/h2oai/h2o-3/blob/a20b5b19b769866ee24b217ee78b820e64c1cd6a/h2o-core/src/main/java/hex/Model.java#L3366">https://github.com/h2oai/h2o-3/blob/a20b5b19b769866ee24b217ee78b820e64c1cd6a/h2o-core/src/main/java/hex/Model.java#L3366</a></li>
<li><a href="https://github.com/advisories/GHSA-47f6-5p7h-5f3h">https://github.com/advisories/GHSA-47f6-5p7h-5f3h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47f6-5p7h-5f3h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Vulnerable to Execution of Arbitrary Files]]></title>
        <id>https://github.com/advisories/GHSA-m37h-8r48-2cxj</id>
        <link href="https://github.com/advisories/GHSA-m37h-8r48-2cxj"/>
        <updated>2025-03-20T19:46:52.000Z</updated>
        <content type="html"><![CDATA[<p>In h2oai/h2o-3 version 3.46.0, an endpoint exposing a custom EncryptionTool allows an attacker to encrypt any files on the target server with a key of their choosing. The chosen key can also be overwritten, resulting in ransomware-like behavior. This vulnerability makes it possible for an attacker to encrypt arbitrary files with keys of their choice, making it exceedingly difficult for the target to recover the keys needed for decryption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6863">https://nvd.nist.gov/vuln/detail/CVE-2024-6863</a></li>
<li><a href="https://huntr.com/bounties/10f55937-0cba-4530-897f-2abf30ed5270">https://huntr.com/bounties/10f55937-0cba-4530-897f-2abf30ed5270</a></li>
<li><a href="https://github.com/h2oai/h2o-3/blob/a20b5b19b769866ee24b217ee78b820e64c1cd6a/h2o-core/src/main/java/water/tools/EncryptionTool.java#L49">https://github.com/h2oai/h2o-3/blob/a20b5b19b769866ee24b217ee78b820e64c1cd6a/h2o-core/src/main/java/water/tools/EncryptionTool.java#L49</a></li>
<li><a href="https://github.com/advisories/GHSA-m37h-8r48-2cxj">https://github.com/advisories/GHSA-m37h-8r48-2cxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m37h-8r48-2cxj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T12:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Vulnerable to Denial of Service (DoS) via `/3/Parse` Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-wwr9-4gmr-xvq9</id>
        <link href="https://github.com/advisories/GHSA-wwr9-4gmr-xvq9"/>
        <updated>2025-03-20T19:44:47.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in the <code>/3/Parse</code> endpoint of h2oai/h2o-3 version 3.46.0.1 allows for a denial of service (DoS) attack. The endpoint uses a user-specified string to construct a regular expression, which is then applied to another user-specified string. By sending multiple simultaneous requests, an attacker can exhaust all available threads, leading to a complete denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10549">https://nvd.nist.gov/vuln/detail/CVE-2024-10549</a></li>
<li><a href="https://huntr.com/bounties/ce7bd2d6-fd38-440d-a91a-dd8f3fc06bc2">https://huntr.com/bounties/ce7bd2d6-fd38-440d-a91a-dd8f3fc06bc2</a></li>
<li><a href="https://github.com/h2oai/h2o-3/blob/51c25940ded8b7d0acc8f3f72329fd9dedbb3a34/h2o-core/src/main/java/water/api/ParseHandler.java#L80">https://github.com/h2oai/h2o-3/blob/51c25940ded8b7d0acc8f3f72329fd9dedbb3a34/h2o-core/src/main/java/water/api/ParseHandler.java#L80</a></li>
<li><a href="https://github.com/advisories/GHSA-wwr9-4gmr-xvq9">https://github.com/advisories/GHSA-wwr9-4gmr-xvq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwr9-4gmr-xvq9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Vulnerable to Denial of Service (DoS) via `/3/ParseSetup` Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-7qq7-pvm9-x8rf</id>
        <link href="https://github.com/advisories/GHSA-7qq7-pvm9-x8rf"/>
        <updated>2025-03-20T19:32:00.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in the <code>/3/ParseSetup</code> endpoint of h2oai/h2o-3 version 3.46.0.1 allows for a denial of service (DoS) attack. The endpoint applies a user-specified regular expression to a user-controllable string. This can be exploited by an attacker to cause inefficient regular expression complexity, leading to the exhaustion of server resources and making the server unresponsive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10550">https://nvd.nist.gov/vuln/detail/CVE-2024-10550</a></li>
<li><a href="https://huntr.com/bounties/ef3f4d89-3b8b-4618-b134-cb93c1664ec6">https://huntr.com/bounties/ef3f4d89-3b8b-4618-b134-cb93c1664ec6</a></li>
<li><a href="https://github.com/h2oai/h2o-3/blob/51c25940ded8b7d0acc8f3f72329fd9dedbb3a34/h2o-core/src/main/java/water/api/ParseSetupHandler.java#L121">https://github.com/h2oai/h2o-3/blob/51c25940ded8b7d0acc8f3f72329fd9dedbb3a34/h2o-core/src/main/java/water/api/ParseSetupHandler.java#L121</a></li>
<li><a href="https://github.com/advisories/GHSA-7qq7-pvm9-x8rf">https://github.com/advisories/GHSA-7qq7-pvm9-x8rf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7qq7-pvm9-x8rf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Vulnerable to Denial of Service (DoS) and File Write]]></title>
        <id>https://github.com/advisories/GHSA-wjpv-64v2-2qpq</id>
        <link href="https://github.com/advisories/GHSA-wjpv-64v2-2qpq"/>
        <updated>2025-03-20T19:13:18.000Z</updated>
        <content type="html"><![CDATA[<p>In h2oai/h2o-3 version 3.46.0.1, the <code>run_tool</code> command exposes classes in the <code>water.tools</code> package through the <code>ast</code> parser. This includes the <code>XGBoostLibExtractTool</code> class, which can be exploited to shut down the server and write large files to arbitrary directories, leading to a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10572">https://nvd.nist.gov/vuln/detail/CVE-2024-10572</a></li>
<li><a href="https://huntr.com/bounties/db8939a0-9be8-4d0f-a8b0-1bd181666da2">https://huntr.com/bounties/db8939a0-9be8-4d0f-a8b0-1bd181666da2</a></li>
<li><a href="https://github.com/h2oai/h2o-3/blob/5e45e780f597961bda73adff765976db975f204b/h2o-extensions/xgboost/src/main/java/water/tools/XGBoostLibExtractTool.java#L12">https://github.com/h2oai/h2o-3/blob/5e45e780f597961bda73adff765976db975f204b/h2o-extensions/xgboost/src/main/java/water/tools/XGBoostLibExtractTool.java#L12</a></li>
<li><a href="https://github.com/advisories/GHSA-wjpv-64v2-2qpq">https://github.com/advisories/GHSA-wjpv-64v2-2qpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjpv-64v2-2qpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2o] H2O Deserialization of Untrusted Data Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h7xg-cmpp-48hf</id>
        <link href="https://github.com/advisories/GHSA-h7xg-cmpp-48hf"/>
        <updated>2025-03-20T19:38:41.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in the h2oai/h2o-3 REST API versions 3.46.0.4 allows unauthenticated remote attackers to execute arbitrary code via deserialization of untrusted data. The vulnerability exists in the endpoints POST /99/ImportSQLTable and POST /3/SaveToHiveTable, where user-controlled JDBC URLs are passed to DriverManager.getConnection, leading to deserialization if a MySQL or PostgreSQL driver is available in the classpath. This issue is fixed in version 3.46.0.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10553">https://nvd.nist.gov/vuln/detail/CVE-2024-10553</a></li>
<li><a href="https://github.com/h2oai/h2o-3/commit/ac1d642b4d86f10a02d75974055baf2a4b2025ac">https://github.com/h2oai/h2o-3/commit/ac1d642b4d86f10a02d75974055baf2a4b2025ac</a></li>
<li><a href="https://huntr.com/bounties/e6f550dd-eda2-428c-a740-ed8f893a084b">https://huntr.com/bounties/e6f550dd-eda2-428c-a740-ed8f893a084b</a></li>
<li><a href="https://github.com/advisories/GHSA-h7xg-cmpp-48hf">https://github.com/advisories/GHSA-h7xg-cmpp-48hf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7xg-cmpp-48hf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-20T12:32:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dask] Dask Vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-xqgj-r6xv-9cw4</id>
        <link href="https://github.com/advisories/GHSA-xqgj-r6xv-9cw4"/>
        <updated>2025-03-20T19:03:58.000Z</updated>
        <content type="html"><![CDATA[<p>Dask versions &lt;=2024.8.2 contain a vulnerability in the Dask Distributed Server where the use of pickle serialization allows attackers to craft malicious objects. These objects can be serialized on the client side and sent to the server for deserialization, leading to remote command execution and potentially granting full control over the Dask server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10096">https://nvd.nist.gov/vuln/detail/CVE-2024-10096</a></li>
<li><a href="https://huntr.com/bounties/a4be847b-a52d-42cc-9e78-3299e2d30ab2">https://huntr.com/bounties/a4be847b-a52d-42cc-9e78-3299e2d30ab2</a></li>
<li><a href="https://github.com/advisories/GHSA-xqgj-r6xv-9cw4">https://github.com/advisories/GHSA-xqgj-r6xv-9cw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xqgj-r6xv-9cw4</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-20T12:32:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM Allows Remote Code Execution via Mooncake Integration]]></title>
        <id>https://github.com/advisories/GHSA-x3m8-f7g5-qhm7</id>
        <link href="https://github.com/advisories/GHSA-x3m8-f7g5-qhm7"/>
        <updated>2025-03-20T18:58:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When vLLM is configured to use Mooncake, unsafe deserialization exposed directly over ZMQ/TCP on all network interfaces will allow attackers to execute remote code on distributed hosts.</p>
<h3 id="details">Details</h3>
<ol>
<li>Pickle deserialization vulnerabilities are <a href="https://docs.python.org/3/library/pickle.html">well documented</a>.</li>
<li>The <a href="https://github.com/vllm-project/vllm/blob/9bebc9512f9340e94579b9bd69cfdc452c4d5bb0/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L206">mooncake pipe</a> is exposed over the network (by design to enable disaggregated prefilling across distributed environments) using ZMQ over TCP, greatly increasing exploitability. Further, the mooncake integration opens these sockets listening on all interfaces on the host, meaning it can not be configured to only use a private, trusted network.</li>
<li>The root problem is <a href="https://github.com/vllm-project/vllm/blob/9bebc9512f9340e94579b9bd69cfdc452c4d5bb0/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L257"><code>recv_tensor()</code></a> calls <a href="https://github.com/vllm-project/vllm/blob/9bebc9512f9340e94579b9bd69cfdc452c4d5bb0/vllm/distributed/kv_transfer/kv_pipe/mooncake_pipe.py#L244"><code>_recv_impl</code></a> which passes the raw network bytes to <code>pickle.loads()</code>. Additionally, it does not appear that there are any controls (network, authentication, etc) to prevent arbitrary users from sending this payload to the affected service.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a remote code execution vulnerability impacting any deployments using Mooncake to distribute KV across distributed hosts.</p>
<h3 id="remediation">Remediation</h3>
<p>This issue is resolved by <a href="https://github.com/vllm-project/vllm/pull/14228">https://github.com/vllm-project/vllm/pull/14228</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-x3m8-f7g5-qhm7">https://github.com/vllm-project/vllm/security/advisories/GHSA-x3m8-f7g5-qhm7</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/14228">https://github.com/vllm-project/vllm/pull/14228</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/288ca110f68d23909728627d3100e5a8db820aa2">https://github.com/vllm-project/vllm/commit/288ca110f68d23909728627d3100e5a8db820aa2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29783">https://nvd.nist.gov/vuln/detail/CVE-2025-29783</a></li>
<li><a href="https://github.com/advisories/GHSA-x3m8-f7g5-qhm7">https://github.com/advisories/GHSA-x3m8-f7g5-qhm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3m8-f7g5-qhm7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-19T15:55:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aim] Aim Vulnerable to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-fx47-jpv9-7hxr</id>
        <link href="https://github.com/advisories/GHSA-fx47-jpv9-7hxr"/>
        <updated>2025-03-20T18:57:08.000Z</updated>
        <content type="html"><![CDATA[<p>In version 3.23.0 of aimhubio/aim, the ScheduledStatusReporter object can be instantiated to run on the main thread of the tracking server, leading to the main thread being blocked indefinitely. This results in a denial of service as the tracking server becomes unable to respond to other requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10110">https://nvd.nist.gov/vuln/detail/CVE-2024-10110</a></li>
<li><a href="https://huntr.com/bounties/5ea6cf56-7b4c-4dce-9b6c-3e910fbb1ae4">https://huntr.com/bounties/5ea6cf56-7b4c-4dce-9b6c-3e910fbb1ae4</a></li>
<li><a href="https://github.com/aimhubio/aim/blob/a566d4a2501c96a545a3c89d92af6ad7e7e0da99/aim/sdk/reporter/__init__.py#L789">https://github.com/aimhubio/aim/blob/a566d4a2501c96a545a3c89d92af6ad7e7e0da99/aim/sdk/reporter/__init__.py#L789</a></li>
<li><a href="https://github.com/advisories/GHSA-fx47-jpv9-7hxr">https://github.com/advisories/GHSA-fx47-jpv9-7hxr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fx47-jpv9-7hxr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[litellm] LiteLLM Vulnerable to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-gw2q-qw9j-rgv7</id>
        <link href="https://github.com/advisories/GHSA-gw2q-qw9j-rgv7"/>
        <updated>2025-03-20T18:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in BerriAI/litellm, as of commit 26c03c9, allows unauthenticated users to cause a Denial of Service (DoS) by exploiting the use of ast.literal_eval to parse user input. This function is not safe and is prone to DoS attacks, which can crash the litellm Python server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10188">https://nvd.nist.gov/vuln/detail/CVE-2024-10188</a></li>
<li><a href="https://github.com/berriai/litellm/commit/21156ff5d0d84a7dd93f951ca033275c77e4f73c">https://github.com/berriai/litellm/commit/21156ff5d0d84a7dd93f951ca033275c77e4f73c</a></li>
<li><a href="https://huntr.com/bounties/96a32812-213c-4819-ba4e-36143d35e95b">https://huntr.com/bounties/96a32812-213c-4819-ba4e-36143d35e95b</a></li>
<li><a href="https://github.com/advisories/GHSA-gw2q-qw9j-rgv7">https://github.com/advisories/GHSA-gw2q-qw9j-rgv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw2q-qw9j-rgv7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[horovod] Horovod Vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-mrhh-3ggq-23p2</id>
        <link href="https://github.com/advisories/GHSA-mrhh-3ggq-23p2"/>
        <updated>2025-03-20T18:53:10.000Z</updated>
        <content type="html"><![CDATA[<p>Horovod versions up to and including v0.28.1 are vulnerable to unauthenticated remote code execution. The vulnerability is due to improper handling of base64-encoded data in the <code>ElasticRendezvousHandler</code>, a subclass of <code>KVStoreHandler</code>. Specifically, the <code>_put_value</code> method in <code>ElasticRendezvousHandler</code> calls <code>codec.loads_base64(value)</code>, which eventually invokes <code>cloudpickle.loads(decoded)</code>. This allows an attacker to send a malicious pickle object via a PUT request, leading to arbitrary code execution on the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10190">https://nvd.nist.gov/vuln/detail/CVE-2024-10190</a></li>
<li><a href="https://huntr.com/bounties/3e398d1f-70c2-4e05-ae22-f5d66b19a754">https://huntr.com/bounties/3e398d1f-70c2-4e05-ae22-f5d66b19a754</a></li>
<li><a href="https://github.com/advisories/GHSA-mrhh-3ggq-23p2">https://github.com/advisories/GHSA-mrhh-3ggq-23p2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrhh-3ggq-23p2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-20T12:32:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM denial of service via outlines unbounded cache on disk]]></title>
        <id>https://github.com/advisories/GHSA-mgrm-fgjv-mhv8</id>
        <link href="https://github.com/advisories/GHSA-mgrm-fgjv-mhv8"/>
        <updated>2025-03-20T18:55:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <a href="https://dottxt-ai.github.io/outlines/latest/">outlines</a> library is one of the backends used by vLLM to support structured output (a.k.a. guided decoding). Outlines provides an optional cache for its compiled grammars on the local filesystem. This cache has been on by default in vLLM. Outlines is also available by default through the OpenAI compatible API server.</p>
<p>The affected code in vLLM is <a href="https://github.com/vllm-project/vllm/blob/53be4a863486d02bd96a59c674bbec23eec508f6/vllm/model_executor/guided_decoding/outlines_logits_processors.py">vllm/model_executor/guided_decoding/outlines_logits_processors.py</a>, which unconditionally uses the cache from outlines. vLLM should have this off by default and allow administrators to opt-in due to the potential for abuse.</p>
<p>A malicious user can send a stream of very short decoding requests with unique schemas, resulting in an addition to the cache for each request. This can result in a Denial of Service if the filesystem runs out of space.</p>
<p>Note that even if vLLM was configured to use a different backend by default, it is still possible to choose outlines on a per-request basis using the <code>guided_decoding_backend</code> key of the <code>extra_body</code> field of the request.</p>
<p>This issue applies to the V0 engine only. The V1 engine is not affected.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/14837">https://github.com/vllm-project/vllm/pull/14837</a></li>
</ul>
<p>The fix is to disable this cache by default since it does not provide an option to limit its size. If you want to use this cache anyway, you may set the <code>VLLM_V0_USE_OUTLINES_CACHE</code> environment variable to <code>1</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no way to workaround this issue in existing versions of vLLM other than preventing untrusted access to the OpenAI compatible API server.</p>
<h3 id="references">References</h3>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-mgrm-fgjv-mhv8">https://github.com/vllm-project/vllm/security/advisories/GHSA-mgrm-fgjv-mhv8</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/14837">https://github.com/vllm-project/vllm/pull/14837</a></li>
<li><a href="https://github.com/vllm-project/vllm/blob/53be4a863486d02bd96a59c674bbec23eec508f6/vllm/model_executor/guided_decoding/outlines_logits_processors.py">https://github.com/vllm-project/vllm/blob/53be4a863486d02bd96a59c674bbec23eec508f6/vllm/model_executor/guided_decoding/outlines_logits_processors.py</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29770">https://nvd.nist.gov/vuln/detail/CVE-2025-29770</a></li>
<li><a href="https://github.com/advisories/GHSA-mgrm-fgjv-mhv8">https://github.com/advisories/GHSA-mgrm-fgjv-mhv8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgrm-fgjv-mhv8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T15:52:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-mysql] Apache Airflow MySQL Provider is Vulnerable to SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-hhm6-jjf4-6pm3</id>
        <link href="https://github.com/advisories/GHSA-hhm6-jjf4-6pm3"/>
        <updated>2025-03-20T19:31:20.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in Apache Airflow MySQL Provider.</p>
<p>When user triggered a DAG with dump_sql or load_sql functions they could pass a table parameter from a UI, that could cause SQL injection by running SQL that was not intended.
It could lead to data corruption, modification and others.
This issue affects Apache Airflow MySQL Provider: before 6.2.0.</p>
<p>Users are recommended to upgrade to version 6.2.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27018">https://nvd.nist.gov/vuln/detail/CVE-2025-27018</a></li>
<li><a href="https://github.com/apache/airflow/pull/47254">https://github.com/apache/airflow/pull/47254</a></li>
<li><a href="https://github.com/apache/airflow/pull/47255">https://github.com/apache/airflow/pull/47255</a></li>
<li><a href="https://lists.apache.org/thread/m8ohgkwz4mq9njohf66sjwqjdy28gvzf">https://lists.apache.org/thread/m8ohgkwz4mq9njohf66sjwqjdy28gvzf</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/19/4">http://www.openwall.com/lists/oss-security/2025/03/19/4</a></li>
<li><a href="https://github.com/advisories/GHSA-hhm6-jjf4-6pm3">https://github.com/advisories/GHSA-hhm6-jjf4-6pm3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhm6-jjf4-6pm3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PostQuantum-Feldman-VSS] Post-Quantum Secure Feldman's Verifiable Secret Sharing has Timing Side-Channels in Matrix Operations]]></title>
        <id>https://github.com/advisories/GHSA-q65w-fg65-79f4</id>
        <link href="https://github.com/advisories/GHSA-q65w-fg65-79f4"/>
        <updated>2025-03-19T15:28:09.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Description:</strong></p>
<p>The <code>feldman_vss</code> library contains timing side-channel vulnerabilities in its matrix operations, specifically within the <code>_find_secure_pivot</code> function and potentially other parts of <code>_secure_matrix_solve</code>. These vulnerabilities are due to Python's execution model, which does not guarantee constant-time execution. An attacker with the ability to measure the execution time of these functions (e.g., through repeated calls with carefully crafted inputs) could potentially recover secret information used in the Verifiable Secret Sharing (VSS) scheme.</p>
<p>The <code>_find_secure_pivot</code> function, used during Gaussian elimination in <code>_secure_matrix_solve</code>, attempts to find a non-zero pivot element. However, the conditional statement <code>if matrix[row][col] != 0 and row_random &lt; min_value:</code> has execution time that depends on the value of <code>matrix[row][col]</code>. This timing difference can be exploited by an attacker.</p>
<p>The <code>constant_time_compare</code> function in this file also does not provide a constant-time guarantee.</p>
<p>This advisory formalizes the timing side-channel vulnerabilities already documented in the library's "Known Security Vulnerabilities" section. The Python implementation of matrix operations in the _find_secure_pivot and _secure_matrix_solve functions cannot guarantee constant-time execution, potentially leaking information about secret polynomial coefficients.</p>
<p>An attacker with the ability to make precise timing measurements of these operations could potentially extract secret information through statistical analysis of execution times, though practical exploitation would require significant expertise and controlled execution environments.</p>
<p><strong>Impact:</strong></p>
<p>Successful exploitation of these timing side-channels could allow an attacker to recover secret keys or other sensitive information protected by the VSS scheme.  This could lead to a complete compromise of the shared secret.</p>
<p><strong>References:</strong></p>
<ul>
<li>File: <code>feldman_vss.py</code></li>
<li>Function: <code>_find_secure_pivot</code></li>
<li>Function: <code>_secure_matrix_solve</code></li>
<li>Function: <code>constant_time_compare</code></li>
<li><a href="https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf">Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems (1996)</a> - A seminal paper on timing attacks.</li>
<li><a href="https://en.wikipedia.org/wiki/Side-channel_attack">Side-Channel Attacks</a> - Wikipedia article on side-channel attacks.</li>
</ul>
<p><strong>Remediation:</strong></p>
<p>As acknowledged in the library's documentation, these vulnerabilities cannot be adequately addressed in pure Python. The advisory recommends:</p>
<ol>
<li><p>SHORT TERM: Consider using this library only in environments where timing measurements by attackers are infeasible.</p>
</li>
<li><p>MEDIUM TERM: Implement your own wrappers around critical operations using constant-time libraries in languages like Rust, Go, or C.</p>
</li>
<li><p>LONG TERM: Wait for the planned Rust implementation mentioned in the library documentation that will properly address these issues.</p>
</li>
</ol>
<p>Note that the usage of random.Random() identified in the _refresh_shares_additive function is intentional and secure as documented in the "False-Positive Vulnerabilities" section of the code, and should not be considered part of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-q65w-fg65-79f4">https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-q65w-fg65-79f4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29780">https://nvd.nist.gov/vuln/detail/CVE-2025-29780</a></li>
<li><a href="https://en.wikipedia.org/wiki/Side-channel_attack">https://en.wikipedia.org/wiki/Side-channel_attack</a></li>
<li><a href="https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf">https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-q65w-fg65-79f4">https://github.com/advisories/GHSA-q65w-fg65-79f4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q65w-fg65-79f4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-14T19:55:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PostQuantum-Feldman-VSS] Post-Quantum Secure Feldman's Verifiable Secret Sharing has Inadequate Fault Injection Countermeasures in `secure_redundant_execution`]]></title>
        <id>https://github.com/advisories/GHSA-r8gc-qc2c-c7vh</id>
        <link href="https://github.com/advisories/GHSA-r8gc-qc2c-c7vh"/>
        <updated>2025-03-19T15:26:35.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Description:</strong></p>
<p>The <code>secure_redundant_execution</code> function in feldman_vss.py attempts to mitigate fault injection attacks by executing a function multiple times and comparing results. However, several critical weaknesses exist:</p>
<ol>
<li>Python's execution environment cannot guarantee true isolation between redundant executions</li>
<li>The constant-time comparison implementation in Python is subject to timing variations</li>
<li>The randomized execution order and timing provide insufficient protection against sophisticated fault attacks</li>
<li>The error handling may leak timing information about partial execution results</li>
</ol>
<p>These limitations make the protection ineffective against targeted fault injection attacks, especially from attackers with physical access to the hardware.</p>
<p><strong>Impact:</strong></p>
<p>A successful fault injection attack could allow an attacker to:</p>
<ol>
<li>Bypass the redundancy check mechanisms</li>
<li>Extract secret polynomial coefficients during share generation or verification</li>
<li>Force the acceptance of invalid shares during verification</li>
<li>Manipulate the commitment verification process to accept fraudulent commitments</li>
</ol>
<p>This undermines the core security guarantees of the Verifiable Secret Sharing scheme.</p>
<p><strong>References:</strong></p>
<ul>
<li>File: <code>feldman_vss.py</code></li>
<li>Function: <code>secure_redundant_execution</code></li>
<li><a href="https://en.wikipedia.org/wiki/Fault_attack">Fault Attacks</a> - Wikipedia article on fault attacks.</li>
<li>Bar-El, H., et al. "The Sorcerer's Apprentice Guide to Fault Attacks" - <a href="https://eprint.iacr.org/2004/100.pdf">https://eprint.iacr.org/2004/100.pdf</a></li>
<li>CWE-1279: <a href="https://cwe.mitre.org/data/definitions/1279.html">https://cwe.mitre.org/data/definitions/1279.html</a></li>
<li>NIST SP 800-90B section on implementation validation</li>
</ul>
<p><strong>Remediation:</strong></p>
<p>Long-term remediation requires reimplementing the security-critical functions in a lower-level language like Rust.</p>
<p>Short-term mitigations:</p>
<ol>
<li>Deploy the software in environments with physical security controls</li>
<li>Increase the redundancy count (from 5 to a higher number) by modifying the source code</li>
<li>Add external verification of cryptographic operations when possible</li>
<li>Consider using hardware security modules (HSMs) for key operations</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh">https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29779">https://nvd.nist.gov/vuln/detail/CVE-2025-29779</a></li>
<li><a href="https://en.wikipedia.org/wiki/Fault_attack">https://en.wikipedia.org/wiki/Fault_attack</a></li>
<li><a href="https://eprint.iacr.org/2004/100.pdf">https://eprint.iacr.org/2004/100.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-r8gc-qc2c-c7vh">https://github.com/advisories/GHSA-r8gc-qc2c-c7vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8gc-qc2c-c7vh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-14T19:55:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PostQuantum-Feldman-VSS] PostQuantum-Feldman-VSS'S Dependency Vulnerability in gmpy2 Leading to Interpreter Crash]]></title>
        <id>https://github.com/advisories/GHSA-v432-7f47-9g94</id>
        <link href="https://github.com/advisories/GHSA-v432-7f47-9g94"/>
        <updated>2025-03-19T15:25:00.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Description:</strong></p>
<p>PostQuantum-Feldman-VSS, a Python library implementing Feldman's Verifiable Secret Sharing scheme with post-quantum security, was vulnerable to denial-of-service attacks in versions up to and including 0.7.6b0.  This vulnerability stems from the library's reliance on the <code>gmpy2</code> library for arbitrary-precision arithmetic.  <code>gmpy2</code>, in turn, depends on the GNU Multiple Precision Arithmetic Library (GMP). GMP, by design, terminates the process when it cannot allocate memory.  An attacker could exploit this by providing carefully crafted inputs that cause <code>gmpy2</code> to attempt to allocate extremely large amounts of memory, leading to a crash of the Python interpreter and thus a denial of service.</p>
<p><strong>Vulnerability Details:</strong></p>
<p>The core issue lies in the behavior of GMP (and thus, <code>gmpy2</code>) when memory allocation fails.  Instead of raising a standard Python exception that could be caught and handled, GMP terminates the entire process. This behavior is documented in the GMP and gmpy2 documentation:</p>
<ul>
<li><strong>GMP Memory Management:</strong> <a href="https://gmplib.org/manual/Memory-Management">https://gmplib.org/manual/Memory-Management</a> (States that the default behavior is to terminate the program.)</li>
<li><strong>gmpy2 Overview:</strong> <a href="https://gmpy2.readthedocs.io/en/latest/overview.html">https://gmpy2.readthedocs.io/en/latest/overview.html</a> (Warns that <code>gmpy2</code> can crash the interpreter on memory allocation failure.)</li>
</ul>
<p>Specific operations within the PostQuantum-Feldman-VSS library that were particularly vulnerable include:</p>
<ul>
<li><strong>Large Exponentiation (<code>exp</code>, <code>secure_exp</code>):</strong>  Exponentiation with very large bases or exponents can lead to extremely large results, consuming excessive memory.</li>
<li><strong>Multi-exponentiation (<code>efficient_multi_exp</code>):</strong>  Similar to exponentiation, but with multiple bases and exponents, increasing the risk.</li>
<li><strong>Matrix Operations (<code>_secure_matrix_solve</code>):</strong>  Large matrices used in polynomial reconstruction could lead to significant memory usage.</li>
<li><strong>Polynomial Evaluation (<code>_evaluate_polynomial</code>):</strong> Evaluating polynomials with large coefficients or at large values of <code>x</code> could trigger excessive memory allocation.</li>
</ul>
<p><strong>Mitigations in 0.8.0b2:</strong></p>
<p>Version 0.8.0b2 implements <em>significant mitigations</em> to greatly reduce the risk of this denial-of-service vulnerability.  These mitigations <strong>do not</strong> completely eliminate the underlying issue (as that would require changes to GMP itself), but they make successful exploitation <em>far</em> more difficult.  The mitigations include:</p>
<ol>
<li><p><strong>Memory Monitoring (<code>MemoryMonitor</code> class):</strong></p>
<ul>
<li>A new <code>MemoryMonitor</code> class is introduced to track estimated memory usage throughout the library's operations.</li>
<li>This class allows setting a maximum memory limit (defaulting to 1024MB, but configurable).</li>
<li>It provides methods to <code>check_allocation</code>, <code>allocate</code>, and <code>release</code> memory, raising a <code>MemoryError</code> if an operation would exceed the configured limit.</li>
</ul>
</li>
<li><p><strong>Memory Safety Checks (<code>check_memory_safety</code> function):</strong></p>
<ul>
<li>A new <code>check_memory_safety</code> function is used to estimate the memory requirements of various <code>gmpy2</code> operations <em>before</em> they are executed.</li>
<li>This function considers the operation type (<code>exp</code>, <code>mul</code>, <code>pow</code>, <code>mod</code>, <code>polynomial</code>, <code>matrix</code>, <code>polynomial_eval</code>) and the bit lengths of the operands.</li>
<li>It uses conservative estimates and scaling factors to account for <code>gmpy2</code>'s internal overhead.</li>
<li>If the estimated memory usage exceeds the limit set by the <code>MemoryMonitor</code>, the operation is rejected <em>before</em> calling <code>gmpy2</code>, preventing the crash.</li>
</ul>
</li>
<li><p><strong>Integration into Core Classes:</strong></p>
<ul>
<li>The <code>CyclicGroup</code> and <code>FeldmanVSS</code> classes now use the <code>check_memory_safety</code> function before performing potentially memory-intensive operations like <code>exp</code>, <code>mul</code>, <code>efficient_multi_exp</code>, <code>_evaluate_polynomial</code>, and <code>_secure_matrix_solve</code>.</li>
</ul>
</li>
<li><p><strong>Enhanced Input Validation and Error Handling:</strong></p>
<ul>
<li>Added improved input validation in functions.</li>
<li>Raises custom exceptions like <code>SecurityError</code>, <code>SerializationError</code>, <code>VerificationError</code>, and <code>ParameterError</code> that include detailed information for forensics and debugging.</li>
</ul>
</li>
<li><p><strong>Safer Defaults and Configuration:</strong></p>
<ul>
<li>The library is configured to use safe primes and large bit lengths by default, reducing the likelihood of accidental misconfiguration leading to excessively large numbers.</li>
<li>The <code>VSSConfig</code> class allows users to customize the <code>prime_bits</code> and <code>cache_size</code>, enabling them to tailor the library to their specific memory constraints.</li>
</ul>
</li>
</ol>
<p><strong>Limitations of Mitigations:</strong></p>
<ul>
<li><strong>Estimation Inaccuracy:</strong> The <code>check_memory_safety</code> function relies on <em>estimations</em> of memory usage. While these estimations are conservative, they are not perfect.  It is still theoretically possible (though much less likely) for an operation to consume more memory than estimated, leading to a crash.</li>
<li><strong>GMP Behavior:</strong> The fundamental issue of GMP terminating the process on memory allocation failure remains.  The mitigations prevent most common cases, but a sufficiently determined attacker with knowledge of the estimation algorithm <em>might</em> still be able to craft an input that triggers a crash.</li>
<li><strong>Not a Complete Fix:</strong> Version 0.8.0b2 is a <em>mitigation</em>, not a complete <em>elimination</em> of the vulnerability.</li>
</ul>
<p><strong>Workarounds (for versions &lt;= 0.7.6b0):</strong></p>
<p>If upgrading to version 0.8.0b2 (or later) is not immediately possible, the following workarounds can help reduce the risk:</p>
<ul>
<li><strong>Limit Input Sizes:</strong>  Carefully restrict the size of inputs to the library, particularly the bit lengths of secrets, shares, and coefficients, and the threshold value (t).  Avoid using excessively large values.  Use the <code>check_memory_safety</code> function (available in 0.8.0b2) to manually check the memory usage.</li>
<li><strong>Resource Monitoring:</strong> Implement external monitoring of your application's memory usage.  If memory usage approaches dangerous levels, take action to prevent a crash (e.g., terminate the process, reject new requests, etc.).</li>
<li><strong>Input Validation:</strong> Thoroughly validate all inputs to the library, ensuring they are within expected ranges and of the correct types.</li>
<li><strong>Rate Limiting:</strong> Implement rate limiting to prevent an attacker from flooding your system with requests designed to consume excessive memory.</li>
<li><strong>Custom Memory Allocation</strong>:  <em>Advanced users</em> could potentially modify the GMP library to use custom allocation functions that raise Python exceptions instead of terminating the process.  This is a complex and potentially risky approach, and is <strong>not recommended</strong> for most users.  (See <a href="https://gmplib.org/manual/Custom-Allocation">GMP Custom Allocation Documentation</a>).</li>
</ul>
<p><strong>Recommendations:</strong></p>
<ul>
<li><strong>Upgrade to 0.8.0b2 (or later) as soon as possible.</strong> This is the <em>most important</em> step you can take.</li>
<li><strong>Configure Memory Limits:</strong>  Use the <code>MemoryMonitor</code> in 0.8.0b2 (or later) to set appropriate memory limits for your application.  Consider your system's available memory and the expected workload.</li>
<li><strong>Monitor Memory Usage:</strong>  Even with the mitigations, continue to monitor your application's memory usage and be prepared to handle potential memory exhaustion events.</li>
<li><strong>Follow Security Best Practices:</strong>  Implement robust input validation, rate limiting, and other security measures to protect your application from various attacks, not just this specific vulnerability.</li>
</ul>
<p><strong>Future Work:</strong></p>
<ul>
<li><strong>Rust Integration:</strong>  The long-term solution is to implement the most memory-intensive and security-critical operations in a lower-level language like Rust, which provides more control over memory management and can avoid the problematic GMP behavior. This is planned for future versions.</li>
<li><strong>More Precise Memory Estimation:</strong>  Research and improve the accuracy of the memory estimation algorithms used in <code>check_memory_safety</code>.</li>
<li><strong>Fuzz Testing:</strong>  Conduct extensive fuzz testing to identify any remaining edge cases that could trigger excessive memory allocation.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-v432-7f47-9g94">https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-v432-7f47-9g94</a></li>
<li><a href="https://github.com/advisories/GHSA-v432-7f47-9g94">https://github.com/advisories/GHSA-v432-7f47-9g94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v432-7f47-9g94</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-17T14:48:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qiskit] Qiskit allows arbitrary code execution decoding QPY format versions < 13]]></title>
        <id>https://github.com/advisories/GHSA-6m2c-76ff-6vrf</id>
        <link href="https://github.com/advisories/GHSA-6m2c-76ff-6vrf"/>
        <updated>2025-03-15T20:47:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted QPY file containing can potentially execute arbitrary-code embedded in the payload without privilege escalation when deserializing QPY formats &lt; 13. A python process calling Qiskit's <code>qiskit.qpy.load()</code> function could potentially execute any arbitrary Python code embedded in the correct place in the binary file as part of a specially constructed payload.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in Qiskit 1.4.2 and in Qiskit 2.0.0rc2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf">https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2000">https://nvd.nist.gov/vuln/detail/CVE-2025-2000</a></li>
<li><a href="https://www.ibm.com/support/pages/node/7185949">https://www.ibm.com/support/pages/node/7185949</a></li>
<li><a href="https://github.com/advisories/GHSA-6m2c-76ff-6vrf">https://github.com/advisories/GHSA-6m2c-76ff-6vrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m2c-76ff-6vrf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-14T19:56:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qiskit] Qiskit allows arbitrary code execution decoding QPY format versions < 13]]></title>
        <id>https://github.com/advisories/GHSA-6m2c-76ff-6vrf</id>
        <link href="https://github.com/advisories/GHSA-6m2c-76ff-6vrf"/>
        <updated>2025-03-15T20:47:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted QPY file containing can potentially execute arbitrary-code embedded in the payload without privilege escalation when deserializing QPY formats &lt; 13. A python process calling Qiskit's <code>qiskit.qpy.load()</code> function could potentially execute any arbitrary Python code embedded in the correct place in the binary file as part of a specially constructed payload.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in Qiskit 1.4.2 and in Qiskit 2.0.0rc2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf">https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2000">https://nvd.nist.gov/vuln/detail/CVE-2025-2000</a></li>
<li><a href="https://www.ibm.com/support/pages/node/7185949">https://www.ibm.com/support/pages/node/7185949</a></li>
<li><a href="https://github.com/advisories/GHSA-6m2c-76ff-6vrf">https://github.com/advisories/GHSA-6m2c-76ff-6vrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m2c-76ff-6vrf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-14T19:56:14.000Z</published>
    </entry>
</feed>