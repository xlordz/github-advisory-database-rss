<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2025-05-19T05:01:27.006Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[flask-cors] Flask-CORS improper regex path matching vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7rxf-gvfg-47g4</id>
        <link href="https://github.com/advisories/GHSA-7rxf-gvfg-47g4"/>
        <updated>2025-05-17T18:57:13.000Z</updated>
        <content type="html"><![CDATA[<p>corydolphin/flask-cors version 5.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6839">https://nvd.nist.gov/vuln/detail/CVE-2024-6839</a></li>
<li><a href="https://huntr.com/bounties/403eb1fc-86f4-4820-8eba-0f3dfae9f2b4">https://huntr.com/bounties/403eb1fc-86f4-4820-8eba-0f3dfae9f2b4</a></li>
<li><a href="https://github.com/corydolphin/flask-cors/commit/e970988bea563e05e8b8f53fa7bcc134b5bf5c5f">https://github.com/corydolphin/flask-cors/commit/e970988bea563e05e8b8f53fa7bcc134b5bf5c5f</a></li>
<li><a href="https://github.com/corydolphin/flask-cors/blob/4.0.1/flask_cors/core.py#L73">https://github.com/corydolphin/flask-cors/blob/4.0.1/flask_cors/core.py#L73</a></li>
<li><a href="https://github.com/advisories/GHSA-7rxf-gvfg-47g4">https://github.com/advisories/GHSA-7rxf-gvfg-47g4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rxf-gvfg-47g4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T12:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flask-cors] Flask-CORS vulnerable to Improper Handling of Case Sensitivity]]></title>
        <id>https://github.com/advisories/GHSA-43qf-4rqw-9q2g</id>
        <link href="https://github.com/advisories/GHSA-43qf-4rqw-9q2g"/>
        <updated>2025-05-17T18:55:58.000Z</updated>
        <content type="html"><![CDATA[<p>corydolphin/flask-cors version 5.0.1 contains a vulnerability where the request path matching is case-insensitive due to the use of the <code>try_match</code> function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6866">https://nvd.nist.gov/vuln/detail/CVE-2024-6866</a></li>
<li><a href="https://huntr.com/bounties/808c11af-faee-43a8-824b-b5ab4f62b9e6">https://huntr.com/bounties/808c11af-faee-43a8-824b-b5ab4f62b9e6</a></li>
<li><a href="https://github.com/corydolphin/flask-cors/blob/4.0.1/flask_cors/extension.py#L195">https://github.com/corydolphin/flask-cors/blob/4.0.1/flask_cors/extension.py#L195</a></li>
<li><a href="https://github.com/corydolphin/flask-cors/commit/eb39516a3c96b90d0ae5f51293972395ec3ef358">https://github.com/corydolphin/flask-cors/commit/eb39516a3c96b90d0ae5f51293972395ec3ef358</a></li>
<li><a href="https://github.com/advisories/GHSA-43qf-4rqw-9q2g">https://github.com/advisories/GHSA-43qf-4rqw-9q2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43qf-4rqw-9q2g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T12:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flask-cors] Flask-CORS allows for inconsistent CORS matching]]></title>
        <id>https://github.com/advisories/GHSA-8vgw-p6qm-5gr7</id>
        <link href="https://github.com/advisories/GHSA-8vgw-p6qm-5gr7"/>
        <updated>2025-05-17T18:54:45.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in corydolphin/flask-cors version 5.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6844">https://nvd.nist.gov/vuln/detail/CVE-2024-6844</a></li>
<li><a href="https://huntr.com/bounties/731a6cd4-d05f-4fe6-8f5b-fe088d7b34e0">https://huntr.com/bounties/731a6cd4-d05f-4fe6-8f5b-fe088d7b34e0</a></li>
<li><a href="https://github.com/corydolphin/flask-cors/blob/main/flask_cors/extension.py#L193">https://github.com/corydolphin/flask-cors/blob/main/flask_cors/extension.py#L193</a></li>
<li><a href="https://github.com/corydolphin/flask-cors/commit/35d875319621bd129a38b2b823abf4a2f6cda536">https://github.com/corydolphin/flask-cors/commit/35d875319621bd129a38b2b823abf4a2f6cda536</a></li>
<li><a href="https://github.com/advisories/GHSA-8vgw-p6qm-5gr7">https://github.com/advisories/GHSA-8vgw-p6qm-5gr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8vgw-p6qm-5gr7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-20T12:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flask-appbuilder] Flask-AppBuilder open redirect vulnerability using HTTP host injection]]></title>
        <id>https://github.com/advisories/GHSA-99pm-ch96-ccp2</id>
        <link href="https://github.com/advisories/GHSA-99pm-ch96-ccp2"/>
        <updated>2025-05-16T17:28:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Flask-AppBuilder prior to 4.6.2 would allow for a malicious unauthenticated actor to perform an open redirect by manipulating the Host header in HTTP requests.</p>
<h3 id="patches">Patches</h3>
<p>Flask-AppBuilder 4.6.2 introduced the <code>FAB_SAFE_REDIRECT_HOSTS</code> configuration variable, which allows administrators to explicitly define which domains are considered safe for redirection.</p>
<p>Examples:</p>
<pre><code>FAB_SAFE_REDIRECT_HOSTS = ["yourdomain.com", "sub.yourdomain.com", "*.yourcompany.com"]
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Use a Reverse Proxy to Enforce Trusted Host Headers</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-99pm-ch96-ccp2">https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-99pm-ch96-ccp2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32962">https://nvd.nist.gov/vuln/detail/CVE-2025-32962</a></li>
<li><a href="https://github.com/dpgaspar/Flask-AppBuilder/commit/32eedbbb5cb483a3e782c5f2732de4a6a650d9b6">https://github.com/dpgaspar/Flask-AppBuilder/commit/32eedbbb5cb483a3e782c5f2732de4a6a650d9b6</a></li>
<li><a href="https://github.com/advisories/GHSA-99pm-ch96-ccp2">https://github.com/advisories/GHSA-99pm-ch96-ccp2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99pm-ch96-ccp2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-16T17:28:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's `slice()` may elide side-effects when output length is 0]]></title>
        <id>https://github.com/advisories/GHSA-3vcg-j39x-cwfm</id>
        <link href="https://github.com/advisories/GHSA-3vcg-j39x-cwfm"/>
        <updated>2025-05-16T14:13:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>the <code>slice()</code> builtin can elide side effects when the output length is 0, and the source bytestring is a builtin (<code>msg.data</code> or <code>&lt;address&gt;.code</code>). the reason is that for these source locations, the check that <code>length &gt;= 1</code> is skipped:
<a href="https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L315-L319">https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L315-L319</a></p>
<p>the result is that a 0-length bytestring constructed with slice can be passed to <code>make_byte_array_copier</code>, which elides evaluation of its source argument when the max length is 0:
<a href="https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/codegen/core.py#L189-L191">https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/codegen/core.py#L189-L191</a></p>
<p>the impact is that side effects in the <code>start</code> argument may be elided when the <code>length</code> argument is 0, e.g. <code>slice(msg.data, self.do_side_effect(), 0)</code>.</p>
<p>the following example illustrates how the issue would look in user code</p>
<pre><code class="language-vyper">counter: public(uint256)

@external
def test() -&gt; Bytes[10]:
    b: Bytes[10] = slice(msg.data, self.side_effect(), 0)
    return b

def side_effect() -&gt; uint256:
    self.counter += 1
    return 0
</code></pre>
<p>the severity assigned is low, since this is not a very useful pattern and unlikely to be found in user code.</p>
<h3 id="patches">Patches</h3>
<p>the fix is tracked in <a href="https://github.com/vyperlang/vyper/pull/4645">https://github.com/vyperlang/vyper/pull/4645</a>, which disallows any invocation of <code>slice()</code> with length 0, including for the ad hoc locations discussed in this advisory.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-3vcg-j39x-cwfm">https://github.com/vyperlang/vyper/security/advisories/GHSA-3vcg-j39x-cwfm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47774">https://nvd.nist.gov/vuln/detail/CVE-2025-47774</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/4645">https://github.com/vyperlang/vyper/pull/4645</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L315-L319">https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L315-L319</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/codegen/core.py#L189-L191">https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/codegen/core.py#L189-L191</a></li>
<li><a href="https://github.com/advisories/GHSA-3vcg-j39x-cwfm">https://github.com/advisories/GHSA-3vcg-j39x-cwfm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3vcg-j39x-cwfm</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-16T14:13:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tornado] Tornado vulnerable to excessive logging caused by malformed multipart form data]]></title>
        <id>https://github.com/advisories/GHSA-7cx3-6m66-7c5m</id>
        <link href="https://github.com/advisories/GHSA-7cx3-6m66-7c5m"/>
        <updated>2025-05-16T14:12:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Tornado's <code>multipart/form-data</code> parser encounters certain errors, it logs a warning but continues trying to parse the remainder of the data. This allows remote attackers to generate an extremely high volume of logs, constituting a DoS attack. This DoS is compounded by the fact that the logging subsystem is synchronous.</p>
<h3 id="affected-versions">Affected versions</h3>
<p>All versions of Tornado prior to 6.5.0 are affected. The vulnerable parser is enabled by default.</p>
<h3 id="solution">Solution</h3>
<p>Upgrade to Tornado version 6.5. In the meantime, risk can be mitigated by blocking <code>Content-Type: multipart/form-data</code> in a proxy.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tornadoweb/tornado/security/advisories/GHSA-7cx3-6m66-7c5m">https://github.com/tornadoweb/tornado/security/advisories/GHSA-7cx3-6m66-7c5m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47287">https://nvd.nist.gov/vuln/detail/CVE-2025-47287</a></li>
<li><a href="https://github.com/tornadoweb/tornado/commit/b39b892bf78fe8fea01dd45199aa88307e7162f3">https://github.com/tornadoweb/tornado/commit/b39b892bf78fe8fea01dd45199aa88307e7162f3</a></li>
<li><a href="https://github.com/advisories/GHSA-7cx3-6m66-7c5m">https://github.com/advisories/GHSA-7cx3-6m66-7c5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cx3-6m66-7c5m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-16T14:12:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's `concat()` builtin may elide side-effects for zero-length arguments]]></title>
        <id>https://github.com/advisories/GHSA-qhr6-mgqr-mchm</id>
        <link href="https://github.com/advisories/GHSA-qhr6-mgqr-mchm"/>
        <updated>2025-05-16T14:10:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>concat()</code> may skip evaluation of side effects when the length of an argument is zero. this is due to a fastpath in the implementation which skips evaluation of argument expressions when their length is zero:
<a href="https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L560-L562">https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L560-L562</a></p>
<p>in practice, it would be very unusual in user code to construct zero-length bytestrings using an expression with side-effects, since zero-length bytestrings are typically constructed with the empty literal <code>b""</code>; the only way to construct an empty bytestring which has side effects would be with the ternary operator introduced in v0.3.8, e.g. <code>b"" if self.do_some_side_effect() else b""</code>.</p>
<p>the following example demonstrates how the issue would look in user code</p>
<pre><code class="language-vyper">counter: public(uint256)

@external
def test() -&gt; Bytes[256]:
    a: Bytes[256] = concat(b"" if self.sideeffect() else b"", b"aaaa")
    return a

def sideeffect() -&gt; bool:
    self.counter += 1
    return True
</code></pre>
<p>the severity assigned is low, since, as mentioned, this would be a very unusual pattern in user-code.</p>
<h3 id="patches">Patches</h3>
<p>fix is tracked in <a href="https://github.com/vyperlang/vyper/pull/4644">https://github.com/vyperlang/vyper/pull/4644</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>don't have side effects in expressions which construct zero-length bytestrings.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-qhr6-mgqr-mchm">https://github.com/vyperlang/vyper/security/advisories/GHSA-qhr6-mgqr-mchm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47285">https://nvd.nist.gov/vuln/detail/CVE-2025-47285</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/4644">https://github.com/vyperlang/vyper/pull/4644</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L560-L562">https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L560-L562</a></li>
<li><a href="https://github.com/advisories/GHSA-qhr6-mgqr-mchm">https://github.com/advisories/GHSA-qhr6-mgqr-mchm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qhr6-mgqr-mchm</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-16T14:10:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] label-studio vulnerable to Cross-Site Scripting (Reflected) via the label_config parameter.]]></title>
        <id>https://github.com/advisories/GHSA-8jhr-wpcm-hh4h</id>
        <link href="https://github.com/advisories/GHSA-8jhr-wpcm-hh4h"/>
        <updated>2025-05-15T16:21:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The vulnerability allows an attacker to inject a malicious script into the context of a web page, which can lead to data theft, unauthorized actions on behalf of the user, and other attacks.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is reproducible when sending a properly formatted request to the <code>POST /projects/upload-example/</code> endpoint. In the source code, the vulnerability is located at <code>label_studio/projects/views.py</code>.</p>
<pre><code class="language-python">39: @require_http_methods(['POST'])
40: def upload_example_using_config(request):
41:     """Generate upload data example by config only"""
42:     config = request.POST.get('label_config', '')
43: 
44:     org_pk = get_organization_from_request(request)
45:     secure_mode = False
46:     if org_pk is not None:
47:         org = generics.get_object_or_404(Organization, pk=org_pk)
48:         secure_mode = org.secure_mode
49: 
50:     try:
51:         Project.validate_label_config(config)
52:         task_data, _, _ = get_sample_task(config, secure_mode)
53:         task_data = playground_replacements(request, task_data)
54:     except (ValueError, ValidationError, lxml.etree.Error):
55:         response = HttpResponse('error while example generating', status=status.HTTP_400_BAD_REQUEST)
56:     else:
57:         response = HttpResponse(json.dumps(task_data))
58:     return response
</code></pre>
<p>The vulnerability is specifically located in line 57, where HttpResponse is used.</p>
<pre><code class="language-python">57:         response = HttpResponse(json.dumps(task_data))
</code></pre>
<h3 id="poc">PoC</h3>
<p>Send the following request after changing the <code>{host}</code> to your own.</p>
<pre><code class="language-css">POST /projects/upload-example/ HTTP/1.1
Host: {host}
Content-Type: application/x-www-form-urlencoded
Content-Length: 67

label_config=%3cView%3e%3cText%20name%3d%22text%22%20value%3d%22$textjmwwi%26lt%3bscript%26gt%3balert(1)%26lt%3b%2fscript%26gt%3bs8m37%22%2f%3e%3c%2fView%3e
</code></pre>
<p>Or you can create a vulnerable HTML page by changing <code>{domain}</code> beforehand, which can later be sent to the victim.</p>
<pre><code class="language-html">&lt;html&gt;
  &lt;body&gt;
    &lt;form action="http://{domain}/projects/upload-example/" method="POST"&gt;
      &lt;input type="hidden" name="label&amp;#95;config" value="&amp;lt;View&amp;gt;&amp;lt;Text&amp;#32;name&amp;#61;&amp;quot;text&amp;quot;&amp;#32;value&amp;#61;&amp;quot;&amp;#36;textjmwwi&amp;amp;lt&amp;#59;script&amp;amp;gt&amp;#59;alert&amp;#40;1&amp;#41;&amp;amp;lt&amp;#59;&amp;#47;script&amp;amp;gt&amp;#59;s8m37&amp;quot;&amp;#47;&amp;gt;&amp;lt;&amp;#47;View&amp;gt;" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<ul>
<li>Malicious code execution: The user may be forced to perform unwanted actions within their Label Studio account. This includes accessing <code>document.cookie</code>, but note that Label Studio session cookies are marked http-only, mitigating any possibility of session theft.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-8jhr-wpcm-hh4h">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-8jhr-wpcm-hh4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47783">https://nvd.nist.gov/vuln/detail/CVE-2025-47783</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/commit/97db9e7b16783e1f6052eb432a6f014f80ef268d">https://github.com/HumanSignal/label-studio/commit/97db9e7b16783e1f6052eb432a6f014f80ef268d</a></li>
<li><a href="https://github.com/advisories/GHSA-8jhr-wpcm-hh4h">https://github.com/advisories/GHSA-8jhr-wpcm-hh4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jhr-wpcm-hh4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:21:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reflex] Reflex vulnerable to private state fields modification]]></title>
        <id>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</id>
        <link href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg"/>
        <updated>2025-05-15T16:15:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user on the website can modify any private field on their own state.</p>
<h3 id="details">Details</h3>
<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>
<h3 id="impact">Impact</h3>
<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>
<li><a href="https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>
<li><a href="https://github.com/advisories/GHSA-rf8x-9mhr-49wg">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf8x-9mhr-49wg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:15:19.000Z</published>
    </entry>
</feed>