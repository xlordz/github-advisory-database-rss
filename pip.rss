<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-11-21T18:01:32.285Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[litestar] Litestar allows unbounded resource consumption (DoS vulnerability) ]]></title>
        <id>https://github.com/advisories/GHSA-gjcc-jvgw-wvwj</id>
        <link href="https://github.com/advisories/GHSA-gjcc-jvgw-wvwj"/>
        <updated>2024-11-20T21:39:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Litestar offers multiple methods to return a parsed representation of the request body, as well as extractors that rely on those parsers to map request content to structured data types. Multiple of those parsers do not have size limits when reading the request body into memory, which allows an attacker to cause excessive memory consumption on the server by sending large requests.</p>
<h3 id="details">Details</h3>
<p>The <code>Request</code> methods to parse json, msgpack or form-data all read the entire request stream into memory via <code>await self.body()</code> without a prior size check or size limit. There may be other places (e.g. extractors) where this can happen.</p>
<p>For most formats, a configurable size limit would be sufficient to mitigate this issue. The total request size can also be limited by a proxy (e.g. nginx) in front of the actual application as a workaround. However, for applications that actually want to accept large file uploads via <code>multipart/form-data</code>, a simple size limit would not be practical. The multipart parser currently used by Litestar expects a single byte string as input and does not support incremental parsing via <code>Request.stream()</code>. Applications could bypass the Litestar parser and use a <a href="https://pypi.org/project/multipart/">streaming parser</a> to read from <code>Request.stream()</code> instead, but that would not work with extractors and other features of the framework. Switching the parser for a different implementation is currently not possible via public APIs.</p>
<h3 id="poc">PoC</h3>
<p>Start an applications that accesses <code>Request.json()</code>, <code>Request.msgpack()</code> or <code>Request.form()</code> or uses an extractor that relies on those parsers internally, and send a large request with a matching content type. The actual content of the request does not matter. For example: <code>curl -F "foo=&lt;/dev/random" http://127.0.0.1:8000/</code>) for <code>multipart/form-data</code>. Server memory consumption will increase very quickly until memory (and swap) are exhausted.</p>
<h3 id="impact">Impact</h3>
<p>This is a denial of service (DoS) vulnerability affecting all Litestar applications that process json, msgpack or form-data submission requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/litestar-org/litestar/security/advisories/GHSA-gjcc-jvgw-wvwj">https://github.com/litestar-org/litestar/security/advisories/GHSA-gjcc-jvgw-wvwj</a></li>
<li><a href="https://github.com/litestar-org/litestar/security/advisories/GHSA-p24m-863f-fm6q)">https://github.com/litestar-org/litestar/security/advisories/GHSA-p24m-863f-fm6q)</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52581">https://nvd.nist.gov/vuln/detail/CVE-2024-52581</a></li>
<li><a href="https://github.com/litestar-org/litestar/commit/53c1473b5ff7502816a9a339ffc90731bb0c2138">https://github.com/litestar-org/litestar/commit/53c1473b5ff7502816a9a339ffc90731bb0c2138</a></li>
<li><a href="https://github.com/litestar-org/litestar/blob/main/litestar/_multipart.py#L97">https://github.com/litestar-org/litestar/blob/main/litestar/_multipart.py#L97</a></li>
<li><a href="https://github.com/advisories/GHSA-gjcc-jvgw-wvwj">https://github.com/advisories/GHSA-gjcc-jvgw-wvwj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gjcc-jvgw-wvwj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-20T21:38:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[djangocms-attributes-field] django CMS Attributes Field Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-vxcv-4xvf-pc22</id>
        <link href="https://github.com/advisories/GHSA-vxcv-4xvf-pc22"/>
        <updated>2024-11-20T18:29:50.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in django CMS Association django CMS Attributes Fields allows Stored XSS.This issue affects django CMS Attributes Fields: before 4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11406">https://nvd.nist.gov/vuln/detail/CVE-2024-11406</a></li>
<li><a href="https://github.com/django-cms/djangocms-attributes-field/commit/fe68d29ab78db5885bc31b67cf0537f1f02b33ad">https://github.com/django-cms/djangocms-attributes-field/commit/fe68d29ab78db5885bc31b67cf0537f1f02b33ad</a></li>
<li><a href="https://iltosec.com/blog/post/djangocms-attributes-field-300-stored-xss-vulnerability">https://iltosec.com/blog/post/djangocms-attributes-field-300-stored-xss-vulnerability</a></li>
<li><a href="https://pypi.org/project/djangocms-attributes-field/#history">https://pypi.org/project/djangocms-attributes-field/#history</a></li>
<li><a href="https://www.django-cms.org/en/blog/2024/11/19/security-updates-for-django-filer-and-django-cms-attributes-field">https://www.django-cms.org/en/blog/2024/11/19/security-updates-for-django-filer-and-django-cms-attributes-field</a></li>
<li><a href="https://www.usom.gov.tr/bildirim/tr-24-1864">https://www.usom.gov.tr/bildirim/tr-24-1864</a></li>
<li><a href="https://github.com/advisories/GHSA-vxcv-4xvf-pc22">https://github.com/advisories/GHSA-vxcv-4xvf-pc22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxcv-4xvf-pc22</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T12:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-filer] django Filer Unrestricted Upload of File with Dangerous Type]]></title>
        <id>https://github.com/advisories/GHSA-j4v3-wwwx-5gqv</id>
        <link href="https://github.com/advisories/GHSA-j4v3-wwwx-5gqv"/>
        <updated>2024-11-20T18:27:58.000Z</updated>
        <content type="html"><![CDATA[<p>Unrestricted Upload of File with Dangerous Type, Improper Input Validation, Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) vulnerability in django CMS Association django Filer allows Input Data Manipulation, Stored XSS.This issue affects django Filer: from 3 before 3.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11404">https://nvd.nist.gov/vuln/detail/CVE-2024-11404</a></li>
<li><a href="https://iltosec.com/blog/post/djangocms-attributes-field-300-stored-xss-vulnerability">https://iltosec.com/blog/post/djangocms-attributes-field-300-stored-xss-vulnerability</a></li>
<li><a href="https://pypi.org/project/django-filer">https://pypi.org/project/django-filer</a></li>
<li><a href="https://www.django-cms.org/en/blog/2024/11/19/security-updates-for-django-filer-and-django-cms-attributes-field">https://www.django-cms.org/en/blog/2024/11/19/security-updates-for-django-filer-and-django-cms-attributes-field</a></li>
<li><a href="https://www.usom.gov.tr/bildirim/tr-24-1864">https://www.usom.gov.tr/bildirim/tr-24-1864</a></li>
<li><a href="https://iltosec.com/blog/post/cve-2024-11404-medium-severity-file-upload-vulnerabilities-in-django-filer-323">https://iltosec.com/blog/post/cve-2024-11404-medium-severity-file-upload-vulnerabilities-in-django-filer-323</a></li>
<li><a href="https://github.com/django-cms/django-filer/commit/f8209a6507680661bd134cd30878993b79ef3344">https://github.com/django-cms/django-filer/commit/f8209a6507680661bd134cd30878993b79ef3344</a></li>
<li><a href="https://github.com/advisories/GHSA-j4v3-wwwx-5gqv">https://github.com/advisories/GHSA-j4v3-wwwx-5gqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j4v3-wwwx-5gqv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-20T12:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lxml-html-clean] HTML Cleaner allows crafted scripts in special contexts like svg or math to pass through]]></title>
        <id>https://github.com/advisories/GHSA-5jfw-gq64-q45f</id>
        <link href="https://github.com/advisories/GHSA-5jfw-gq64-q45f"/>
        <updated>2024-11-20T16:44:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The HTML Parser in lxml does not properly handle context-switching for special HTML tags such as <code>&lt;svg&gt;</code>, <code>&lt;math&gt;</code> and <code>&lt;noscript&gt;</code>. This behavior deviates from how web browsers parse and interpret such tags. Specifically, content in CSS comments is ignored by lxml_html_clean but may be interpreted differently by web browsers, enabling malicious scripts to bypass the cleaning process. This vulnerability could lead to Cross-Site Scripting (XSS) attacks, compromising the security of users relying on lxml_html_clean in default configuration for sanitizing untrusted HTML content.</p>
<h3 id="patches">Patches</h3>
<p>Users employing the HTML cleaner in a security-sensitive context should upgrade to lxml 0.4.0, which addresses this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As a temporary mitigation, users can configure lxml_html_clean with the following settings to prevent the exploitation of this vulnerability:</p>
<ul>
<li><code>remove_tags</code>: Specify tags to remove - their content is moved to their parents' tags.</li>
<li><code>kill_tags</code>: Specify tags to be removed completely.</li>
<li><code>allow_tags</code>: Restrict the set of permissible tags, excluding context-switching tags like <code>&lt;svg&gt;</code>, <code>&lt;math&gt;</code> and <code>&lt;noscript&gt;</code>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fedora-python/lxml_html_clean/pull/19">https://github.com/fedora-python/lxml_html_clean/pull/19</a></li>
<li><a href="https://github.com/fedora-python/lxml_html_clean/pull/19/commits/c5d816f86eb3707d72a8ecf5f3823e0daa1b3808">https://github.com/fedora-python/lxml_html_clean/pull/19/commits/c5d816f86eb3707d72a8ecf5f3823e0daa1b3808</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fedora-python/lxml_html_clean/security/advisories/GHSA-5jfw-gq64-q45f">https://github.com/fedora-python/lxml_html_clean/security/advisories/GHSA-5jfw-gq64-q45f</a></li>
<li><a href="https://github.com/fedora-python/lxml_html_clean/pull/19">https://github.com/fedora-python/lxml_html_clean/pull/19</a></li>
<li><a href="https://github.com/fedora-python/lxml_html_clean/commit/c5d816f86eb3707d72a8ecf5f3823e0daa1b3808">https://github.com/fedora-python/lxml_html_clean/commit/c5d816f86eb3707d72a8ecf5f3823e0daa1b3808</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52595">https://nvd.nist.gov/vuln/detail/CVE-2024-52595</a></li>
<li><a href="https://github.com/advisories/GHSA-5jfw-gq64-q45f">https://github.com/advisories/GHSA-5jfw-gq64-q45f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jfw-gq64-q45f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-19T21:07:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-apache-drill] apache-airflow-providers-apache-drill Improper Input Validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mq4v-6vg4-796c</id>
        <link href="https://github.com/advisories/GHSA-mq4v-6vg4-796c"/>
        <updated>2024-11-19T19:21:10.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow Drill Provider.</p>
<p>Apache Airflow Drill Provider is affected by a vulnerability that allows an attacker to pass in malicious parameters when establishing a connection with DrillHook giving an opportunity to read files on the Airflow server.
This issue affects Apache Airflow Drill Provider before 2.4.3.
It is recommended to upgrade to a version that is not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39553">https://nvd.nist.gov/vuln/detail/CVE-2023-39553</a></li>
<li><a href="https://github.com/apache/airflow/pull/33074">https://github.com/apache/airflow/pull/33074</a></li>
<li><a href="https://lists.apache.org/thread/ozpl0opmob49rkcz8svo8wkxyw1395sf">https://lists.apache.org/thread/ozpl0opmob49rkcz8svo8wkxyw1395sf</a></li>
<li><a href="https://github.com/apache/airflow/commit/394a727ac2c18d58978bf186a7a92923460ec110">https://github.com/apache/airflow/commit/394a727ac2c18d58978bf186a7a92923460ec110</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2023-136.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2023-136.yaml</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2023/08/11/1">https://www.openwall.com/lists/oss-security/2023/08/11/1</a></li>
<li><a href="https://github.com/advisories/GHSA-mq4v-6vg4-796c">https://github.com/advisories/GHSA-mq4v-6vg4-796c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq4v-6vg4-796c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-11T09:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Memory access due to code generation flaw in Cranelift module]]></title>
        <id>https://github.com/advisories/GHSA-hpqh-2wqx-7qp5</id>
        <link href="https://github.com/advisories/GHSA-hpqh-2wqx-7qp5"/>
        <updated>2024-11-19T19:18:56.000Z</updated>
        <content type="html"><![CDATA[<p>There is a bug in 0.73.0 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a WebAssembly module.  Users of versions 0.73.0 of Cranelift should upgrade to either 0.73.1 or 0.74 to remediate this vulnerability.  Users of Cranelift prior to 0.73.0 should update to 0.73.1 or 0.74 if they were not using the old default backend.</p>
<h3 id="description">Description</h3>
<p>This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73.0. The recently-released version 0.73.0 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable.  The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances.  If those circumstances occur, the bug could allow access to memory addresses up to 2GiB before the start of the heap allocated for the WebAssembly module.</p>
<p>If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heap's bound.  </p>
<p>The impact of this bug is highly dependent on heap implementation; specifically:</p>
<ul>
<li>if the heap has bounds checks, and</li>
<li>does not rely exclusively on guard pages, and </li>
<li>the heap bound is 2GiB or smaller</li>
</ul>
<p>then this bug cannot be used to reach memory from another WebAssembly module heap.</p>
<p>The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the WebAssembly module heap.</p>
<p>The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32’s MSB.</p>
<p>The issue would thus occur when:</p>
<ul>
<li>An i32 value is greater than or equal to 0x8000_0000;</li>
<li>The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value’s definition and its use;</li>
<li>The value is produced by an instruction that we know to be "special" in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or;</li>
<li>The value is then zero-extended to 64 bits;</li>
<li>The resulting 64-bit value is used.</li>
</ul>
<p>Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the WebAssembly heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the module could reach backward and access memory up to 2GiB before the start of its heap.</p>
<p>This bug was identified by developers at Fastly following a report from Javier Cabrera Arteaga, KTH Royal Institute of Technology, with support from project Trustful of Stiftelsen för Strategisk Forskning.  In addition to supporting the analysis and remediation of this vulnerability, Fastly will publish a related Fastly Security Advisory at <a href="https://www.fastly.com/security-advisories">https://www.fastly.com/security-advisories</a>.</p>
<p>In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable.</p>
<h3 id="general-impact-to-lucet">General Impact to Lucet</h3>
<p>Lucet inherits the heap address computation and bounds-checks of Cranelift, which it uses as its backend code generator. Of particular importance specifically is the address-space layout used by Lucet. In the default configuration for Lucet, only a single module is running, and therefore it is not possible to access memory from another module.</p>
<p>By default, the open source implementation of Lucet uses a maximum heap size of 4 GiB, and an instance slot size of 8 GiB, when invoking an instance from the lucet-wasi command-line tool. These settings are within the range of vulnerability described above, but only a single instance is running, so there is no other instance to read. When embedding the runtime (for example, in a long-running daemon), the default for the heap size as described in the source is 1MB; with this setting, the runtime is not vulnerable.</p>
<p>Lucet allocates its WebAssembly module instances into "instance slots", which are contiguous zones of virtual address space that contain the VM context at the bottom, the WebAssembly heap in the next page after that, a guard region in the middle, and other data at the top: the stack and the globals.</p>
<p>If the instance slot size is less than (max heap) + 2GiB, then the lowest accessible address using the bug will overlap with the prior instance’s heap. If the size of VM context + stack + globals is greater than (4GiB - heap limit), then the highest accessible address using the bug will overlap with this critical data. If neither of these conditions are true, the bug should only result in an access to the prior instance’s guard region.</p>
<p>Generally, if the limit is between 2GiB and 4GiB - ~1MB (depending on stack/global size) and the instance slot size is less than 6GiB, the configuration is vulnerable. If the limit is greater than 4GiB - ~1MB, the configuration is vulnerable regardless of instance slot size. Otherwise, the configuration is not vulnerable.</p>
<h3 id="general-impact-on-wasmtime">General Impact on Wasmtime</h3>
<p>In Wasmtime, the same Cranelift heap address computations and heap types are used as above. The memory layout, however, is slightly different, with different outcomes:</p>
<ul>
<li>With the mmap implementation impact is mitigated probabilistically if ASLR is enabled.</li>
<li>With the pooling allocator, the vulnerability only exists if a memory reservation size lower than the default of 6GB is used.</li>
</ul>
<p>With the default mmap-based instance memory implementation, Wasmtime uses mmap() to allocate a block of memory large enough for the heap and guard region, as specified in its configuration. If the underlying OS implements ASLR (modern Linux, macOS and Windows do) then this address will be randomized, and the region below it will (probabilistically) be free. Hence, the bug is mitigated probabilistically in the default configuration if ASLR is enabled.</p>
<p>If using the pooling allocator, the vulnerability exists if instance memory size (<code>memory_reservation_size</code> in InstanceLimit) is strictly less than 6GiB (4 GiB + 2 GiB of guard pages). The default is 6GiB, so the vulnerability is masked in the default pooling allocator configuration.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32629">https://nvd.nist.gov/vuln/detail/CVE-2021-32629</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/95559c01aaa7c061088a433040f31e8291fb09d0">https://github.com/bytecodealliance/wasmtime/commit/95559c01aaa7c061088a433040f31e8291fb09d0</a></li>
<li><a href="https://crates.io/crates/cranelift-codegen">https://crates.io/crates/cranelift-codegen</a></li>
<li><a href="https://www.fastly.com/security-advisories/memory-access-due-to-code-generation-flaw-in-cranelift-module">https://www.fastly.com/security-advisories/memory-access-due-to-code-generation-flaw-in-cranelift-module</a></li>
<li><a href="https://github.com/RustSec/advisory-db/blob/main/crates/cranelift-codegen/RUSTSEC-2021-0067.md">https://github.com/RustSec/advisory-db/blob/main/crates/cranelift-codegen/RUSTSEC-2021-0067.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0067.html">https://rustsec.org/advisories/RUSTSEC-2021-0067.html</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-87.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-87.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpqh-2wqx-7qp5">https://github.com/advisories/GHSA-hpqh-2wqx-7qp5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpqh-2wqx-7qp5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T21:01:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[werkzeug] Werkzeug DoS: High resource usage when parsing multipart/form-data containing a large part with CR/LF character at the beginning]]></title>
        <id>https://github.com/advisories/GHSA-hrfv-mqp8-q5rw</id>
        <link href="https://github.com/advisories/GHSA-hrfv-mqp8-q5rw"/>
        <updated>2024-11-19T19:17:44.000Z</updated>
        <content type="html"><![CDATA[<p>Werkzeug multipart data parser needs to find a boundary that may be between consecutive chunks. That's why parsing is based on looking for newline characters. Unfortunately, code looking for partial boundary in the buffer is written inefficiently, so if we upload a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer.</p>
<p>This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/werkzeug/security/advisories/GHSA-hrfv-mqp8-q5rw">https://github.com/pallets/werkzeug/security/advisories/GHSA-hrfv-mqp8-q5rw</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5c1">https://github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5c1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46136">https://nvd.nist.gov/vuln/detail/CVE-2023-46136</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/f3c803b3ade485a45f12b6d6617595350c0f03e2">https://github.com/pallets/werkzeug/commit/f3c803b3ade485a45f12b6d6617595350c0f03e2</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-221.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-221.yaml</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/f2300208d5e2a5076cbbb4c2aad71096fd040ef9">https://github.com/pallets/werkzeug/commit/f2300208d5e2a5076cbbb4c2aad71096fd040ef9</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20231124-0008">https://security.netapp.com/advisory/ntap-20231124-0008</a></li>
<li><a href="https://github.com/advisories/GHSA-hrfv-mqp8-q5rw">https://github.com/advisories/GHSA-hrfv-mqp8-q5rw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrfv-mqp8-q5rw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-25T14:22:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[werkzeug] Werkzeug DoS: High resource usage when parsing multipart/form-data containing a large part with CR/LF character at the beginning]]></title>
        <id>https://github.com/advisories/GHSA-hrfv-mqp8-q5rw</id>
        <link href="https://github.com/advisories/GHSA-hrfv-mqp8-q5rw"/>
        <updated>2024-11-19T19:17:44.000Z</updated>
        <content type="html"><![CDATA[<p>Werkzeug multipart data parser needs to find a boundary that may be between consecutive chunks. That's why parsing is based on looking for newline characters. Unfortunately, code looking for partial boundary in the buffer is written inefficiently, so if we upload a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer.</p>
<p>This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/werkzeug/security/advisories/GHSA-hrfv-mqp8-q5rw">https://github.com/pallets/werkzeug/security/advisories/GHSA-hrfv-mqp8-q5rw</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5c1">https://github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5c1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46136">https://nvd.nist.gov/vuln/detail/CVE-2023-46136</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/f3c803b3ade485a45f12b6d6617595350c0f03e2">https://github.com/pallets/werkzeug/commit/f3c803b3ade485a45f12b6d6617595350c0f03e2</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-221.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-221.yaml</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/f2300208d5e2a5076cbbb4c2aad71096fd040ef9">https://github.com/pallets/werkzeug/commit/f2300208d5e2a5076cbbb4c2aad71096fd040ef9</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20231124-0008">https://security.netapp.com/advisory/ntap-20231124-0008</a></li>
<li><a href="https://github.com/advisories/GHSA-hrfv-mqp8-q5rw">https://github.com/advisories/GHSA-hrfv-mqp8-q5rw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrfv-mqp8-q5rw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-25T14:22:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Werkzeug] High resource usage when parsing multipart form data with many fields]]></title>
        <id>https://github.com/advisories/GHSA-xg9f-g7g7-2323</id>
        <link href="https://github.com/advisories/GHSA-xg9f-g7g7-2323"/>
        <updated>2024-11-19T19:07:38.000Z</updated>
        <content type="html"><![CDATA[<p>Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses <code>request.data</code>, <code>request.form</code>, <code>request.files</code>, or <code>request.get_data(parse_form_data=False)</code>, it can cause unexpectedly high resource usage.</p>
<p>This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323">https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25577">https://nvd.nist.gov/vuln/detail/CVE-2023-25577</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/517cac5a804e8c4dc4ed038bb20dacd038e7a9f1">https://github.com/pallets/werkzeug/commit/517cac5a804e8c4dc4ed038bb20dacd038e7a9f1</a></li>
<li><a href="https://github.com/pallets/werkzeug/releases/tag/2.2.3">https://github.com/pallets/werkzeug/releases/tag/2.2.3</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5470">https://www.debian.org/security/2023/dsa-5470</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-58.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-58.yaml</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230818-0003">https://security.netapp.com/advisory/ntap-20230818-0003</a></li>
<li><a href="https://github.com/advisories/GHSA-xg9f-g7g7-2323">https://github.com/advisories/GHSA-xg9f-g7g7-2323</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg9f-g7g7-2323</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-15T15:36:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Werkzeug] Incorrect parsing of nameless cookies leads to __Host- cookies bypass]]></title>
        <id>https://github.com/advisories/GHSA-px8h-6qxv-m22q</id>
        <link href="https://github.com/advisories/GHSA-px8h-6qxv-m22q"/>
        <updated>2024-11-19T19:05:03.000Z</updated>
        <content type="html"><![CDATA[<p>Browsers may allow "nameless" cookies that look like <code>=value</code> instead of <code>key=value</code>. A vulnerable browser may allow a compromised application on an adjacent subdomain to exploit this to set a cookie like <code>=__Host-test=bad</code> for another subdomain.</p>
<p>Werkzeug &lt;= 2.2.2 will parse the cookie <code>=__Host-test=bad</code> as <code>__Host-test=bad</code>. If a Werkzeug application is running next to a vulnerable or malicious subdomain which sets such a cookie using a vulnerable browser, the Werkzeug application will see the bad cookie value but the valid cookie key.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/werkzeug/security/advisories/GHSA-px8h-6qxv-m22q">https://github.com/pallets/werkzeug/security/advisories/GHSA-px8h-6qxv-m22q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23934">https://nvd.nist.gov/vuln/detail/CVE-2023-23934</a></li>
<li><a href="https://github.com/pallets/werkzeug/commit/cf275f42acad1b5950c50ffe8ef58fe62cdce028">https://github.com/pallets/werkzeug/commit/cf275f42acad1b5950c50ffe8ef58fe62cdce028</a></li>
<li><a href="https://github.com/pallets/werkzeug/releases/tag/2.2.3">https://github.com/pallets/werkzeug/releases/tag/2.2.3</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5470">https://www.debian.org/security/2023/dsa-5470</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-57.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/werkzeug/PYSEC-2023-57.yaml</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230818-0003">https://security.netapp.com/advisory/ntap-20230818-0003</a></li>
<li><a href="https://github.com/advisories/GHSA-px8h-6qxv-m22q">https://github.com/advisories/GHSA-px8h-6qxv-m22q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-px8h-6qxv-m22q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-15T15:37:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wheel] pypa/wheel vulnerable to Regular Expression denial of service (ReDoS)]]></title>
        <id>https://github.com/advisories/GHSA-qwmp-2cf2-g9g6</id>
        <link href="https://github.com/advisories/GHSA-qwmp-2cf2-g9g6"/>
        <updated>2024-11-19T19:04:08.000Z</updated>
        <content type="html"><![CDATA[<p>Python Packaging Authority (PyPA) Wheel is a reference implementation of the Python wheel packaging standard. Wheel 0.37.1 and earlier are vulnerable to a Regular Expression denial of service via attacker controlled input to the wheel cli. The vulnerable regex is used to verify the validity of Wheel file names. This has been patched in version 0.38.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-40898">https://nvd.nist.gov/vuln/detail/CVE-2022-40898</a></li>
<li><a href="https://github.com/pypa/wheel/blob/main/src/wheel/wheelfile.py#L18">https://github.com/pypa/wheel/blob/main/src/wheel/wheelfile.py#L18</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wheel/PYSEC-2022-43017.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wheel/PYSEC-2022-43017.yaml</a></li>
<li><a href="https://pypi.org/project/wheel">https://pypi.org/project/wheel</a></li>
<li><a href="https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages">https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages</a></li>
<li><a href="https://pyup.io/vulnerabilities/CVE-2022-40898/51499">https://pyup.io/vulnerabilities/CVE-2022-40898/51499</a></li>
<li><a href="https://github.com/advisories/GHSA-qwmp-2cf2-g9g6">https://github.com/advisories/GHSA-qwmp-2cf2-g9g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwmp-2cf2-g9g6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-23T00:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Zope] Remote Code Execution via traversal in TAL expressions]]></title>
        <id>https://github.com/advisories/GHSA-rpcg-f9q6-2mq6</id>
        <link href="https://github.com/advisories/GHSA-rpcg-f9q6-2mq6"/>
        <updated>2024-11-19T18:30:42.000Z</updated>
        <content type="html"><![CDATA[<p>This advisory extends the previous advisory at <a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36">https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36</a> with additional cases of TAL expression traversal vulnerabilities.</p>
<h3 id="impact">Impact</h3>
<p>Most Python modules are not available for using in TAL expressions that you can add through-the-web, for example in Zope Page Templates. This restriction avoids file system access, for example via the 'os' module. But some of the untrusted modules are available indirectly through Python modules that are available for direct use.</p>
<p>By default, you need to have the Manager role to add or edit Zope Page Templates through the web. Only sites that allow untrusted users to add/edit Zope Page Templates through the web are at risk.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in Zope 5.21 and 4.6.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The workaround is the same as for <a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36">https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36</a>: A site administrator can restrict adding/editing Zope Page Templates through the web using the standard Zope user/role permission mechanisms. Untrusted users should not be assigned the Zope Manager role and adding/editing Zope Page Templates through the web should be restricted to trusted users only.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36">The previous advisory (GHSA-5pr9-v234-jw36)</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/zopefoundation/Zope/issues">Zope issue tracker</a></li>
<li>Email us at <a href="mailto:security@plone.org">security@plone.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-rpcg-f9q6-2mq6">https://github.com/zopefoundation/Zope/security/advisories/GHSA-rpcg-f9q6-2mq6</a></li>
<li><a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36">https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32674">https://nvd.nist.gov/vuln/detail/CVE-2021-32674</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/1d897910139e2c0b11984fc9b78c1da1365bec21">https://github.com/zopefoundation/Zope/commit/1d897910139e2c0b11984fc9b78c1da1365bec21</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/zope/PYSEC-2021-104.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/zope/PYSEC-2021-104.yaml</a></li>
<li><a href="https://pypi.org/project/Zope">https://pypi.org/project/Zope</a></li>
<li><a href="https://github.com/advisories/GHSA-rpcg-f9q6-2mq6">https://github.com/advisories/GHSA-rpcg-f9q6-2mq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rpcg-f9q6-2mq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-08T18:45:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ymlref] Code injection in ymlref]]></title>
        <id>https://github.com/advisories/GHSA-8r8j-xvfj-36f9</id>
        <link href="https://github.com/advisories/GHSA-8r8j-xvfj-36f9"/>
        <updated>2024-11-19T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>ymlref is a library that allows to load Yaml documents and resolve JSON-pointer references inside them. ymlref versions up to 0.1.1 allow code injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20133">https://nvd.nist.gov/vuln/detail/CVE-2018-20133</a></li>
<li><a href="https://github.com/dexter2206/ymlref/issues/2">https://github.com/dexter2206/ymlref/issues/2</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ymlref/PYSEC-2018-103.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ymlref/PYSEC-2018-103.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8r8j-xvfj-36f9">https://github.com/advisories/GHSA-8r8j-xvfj-36f9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r8j-xvfj-36f9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-12-19T19:25:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wrong type for `Linker`-define functions when used across two `Engine`s]]></title>
        <id>https://github.com/advisories/GHSA-q879-9g95-56mx</id>
        <link href="https://github.com/advisories/GHSA-q879-9g95-56mx"/>
        <updated>2024-11-19T18:05:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>As a Rust library the <code>wasmtime</code> crate clearly marks which functions are safe and which are <code>unsafe</code>, guaranteeing that if consumers never use <code>unsafe</code> then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of <code>Linker::func_*</code> APIs. These APIs were previously not sound when one <code>Engine</code> was used to create the <code>Linker</code> and then a different <code>Engine</code> was used to create a <code>Store</code> and then the <code>Linker</code> was used to instantiate a module into that <code>Store</code>. Cross-<code>Engine</code> usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type.</p>
<p>Triggering this bug requires using at least two <code>Engine</code> values in an embedding and then additionally using two different values with a <code>Linker</code> (one at the creation time of the <code>Linker</code> and another when instantiating a module with the <code>Linker</code>).</p>
<p>It's expected that usage of more-than-one <code>Engine</code> in an embedding is relatively rare since an <code>Engine</code> is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small.</p>
<p>The fix implemented is to change this behavior to <code>panic!()</code> in Rust instead of silently allowing it. Using different <code>Engine</code> instances with a <code>Linker</code> is a programmer bug that <code>wasmtime</code> catches at runtime.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime and are using more than one <code>Engine</code> in your embedding it's recommended to instead use only one <code>Engine</code> for the entire program if possible. An <code>Engine</code> is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple <code>Engine</code>s is required then code should be audited to ensure that <code>Linker</code> is only used with one <code>Engine</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/b39f087414f27ae40c44449ed5d1154e03449bff">https://github.com/bytecodealliance/wasmtime/commit/b39f087414f27ae40c44449ed5d1154e03449bff</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39219">https://nvd.nist.gov/vuln/detail/CVE-2021-39219</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-322.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-322.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>
<li><a href="https://github.com/advisories/GHSA-q879-9g95-56mx">https://github.com/advisories/GHSA-q879-9g95-56mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q879-9g95-56mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Out-of-bounds read/write and invalid free with `externref`s and GC safepoints in Wasmtime ]]></title>
        <id>https://github.com/advisories/GHSA-4873-36h9-wv49</id>
        <link href="https://github.com/advisories/GHSA-4873-36h9-wv49"/>
        <updated>2024-11-19T18:04:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was an invalid free and out-of-bounds read and write bug when running Wasm that uses <code>externref</code>s in Wasmtime.</p>
<p>To trigger this bug, Wasmtime needs to be running Wasm that uses <code>externref</code>s, the host creates non-null <code>externrefs</code>, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where</p>
<ul>
<li>there are no live references at this safepoint, and</li>
<li>there is a safepoint with live references earlier in this frame's function.</li>
</ul>
<p>Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as <code>externref</code>s that needed to be rooted for GC. At the <em>next</em> GC, it would be determined that nothing was referencing these bogus <code>externref</code>s (because nothing could ever reference them, because they are not really <code>externref</code>s) and then Wasmtime would deallocate them and run <code>&lt;ExternRef as Drop&gt;::drop</code> on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes.</p>
<p>Even though support for <code>externref</code>s (via the reference types proposal) is enabled by default, unless you are creating non-null <code>externref</code>s in your host code or explicitly triggering GCs, you cannot be affected by this bug.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>
<p>Additionally, we have updated <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing <code>false</code> to <a href="https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types"><code>wasmtime::Config::wasm_reference_types</code></a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WebAssembly/reference-types/">The Wasm reference types proposal, which introduces <code>externref</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c">https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39218">https://nvd.nist.gov/vuln/detail/CVE-2021-39218</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-321.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-321.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>
<li><a href="https://github.com/advisories/GHSA-4873-36h9-wv49">https://github.com/advisories/GHSA-4873-36h9-wv49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4873-36h9-wv49</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free passing `externref`s to Wasm in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-v4cp-h94r-m7xf</id>
        <link href="https://github.com/advisories/GHSA-v4cp-h94r-m7xf"/>
        <updated>2024-11-19T18:00:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was a use-after-free bug when passing <code>externref</code>s from the host to guest Wasm content.</p>
<p>To trigger the bug, you have to explicitly pass multiple <code>externref</code>s from the host to a Wasm instance at the same time, either by</p>
<ul>
<li>passing multiple <code>externref</code>s as arguments from host code to a Wasm function,</li>
<li>or returning multiple <code>externref</code>s to Wasm from a multi-value return function defined in the host.</li>
</ul>
<p>If you do not have host code that matches one of these shapes, then you are not impacted.</p>
<p>If Wasmtime's <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/crates/runtime/src/externref.rs#L493"><code>VMExternRefActivationsTable</code></a> became filled to capacity after passing the first <code>externref</code> in, then passing in the second <code>externref</code> could trigger a garbage collection. However the first <code>externref</code> is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first <code>externref</code>, which at this point has already been freed.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed, and users should upgrade to Wasmtime 0.30.0.</p>
<p>Additionally, we have updated <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing <code>false</code> to <a href="https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types"><code>wasmtime::Config::wasm_reference_types</code></a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WebAssembly/reference-types/">The reference types Wasm proposal, which introduces <code>externref</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3">https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39216">https://nvd.nist.gov/vuln/detail/CVE-2021-39216</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-320.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-320.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>
<li><a href="https://github.com/advisories/GHSA-v4cp-h94r-m7xf">https://github.com/advisories/GHSA-v4cp-h94r-m7xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4cp-h94r-m7xf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] incorrect order of evaluation of side effects for some builtins]]></title>
        <id>https://github.com/advisories/GHSA-4hg4-9mf5-wxxq</id>
        <link href="https://github.com/advisories/GHSA-4hg4-9mf5-wxxq"/>
        <updated>2024-11-19T17:22:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The order of evaluation of the arguments of the builtin functions <code>uint256_addmod</code>, <code>uint256_mulmod</code>, <code>ecadd</code> and <code>ecmul</code> does not follow source order.
• For <code>uint256_addmod(a,b,c)</code> and <code>uint256_mulmod(a,b,c)</code>, the order is <code>c,a,b</code>.
• For <code>ecadd(a,b)</code> and <code>ecmul(a,b)</code>, the order is <code>b,a</code>.</p>
<p>Note that this behaviour is problematic when the evaluation of one of the arguments produces side effects that other arguments depend on. </p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/vyperlang/vyper/pull/3583">https://github.com/vyperlang/vyper/pull/3583</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>When using builtins from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-4hg4-9mf5-wxxq">https://github.com/vyperlang/vyper/security/advisories/GHSA-4hg4-9mf5-wxxq</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/3583">https://github.com/vyperlang/vyper/pull/3583</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41052">https://nvd.nist.gov/vuln/detail/CVE-2023-41052</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-168.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-168.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4hg4-9mf5-wxxq">https://github.com/advisories/GHSA-4hg4-9mf5-wxxq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4hg4-9mf5-wxxq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-04T16:39:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Incorrect success value returned in vyper]]></title>
        <id>https://github.com/advisories/GHSA-w9g2-3w7p-72g9</id>
        <link href="https://github.com/advisories/GHSA-w9g2-3w7p-72g9"/>
        <updated>2024-11-19T16:31:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="background">Background</h3>
<p>During the audit of <a href="https://github.com/lidofinance/gate-seals">Lido's Gate Seals</a> code <a href="https://statemind.io">statemind</a> team identified a weird behavior of the code that uses <code>raw_call</code>: <a href="https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164">https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164</a> .</p>
<p>Construction like this:</p>
<pre><code class="language-vyper">success = raw_call(
    sealable,
    _abi_encode(SEAL_DURATION_SECONDS, method_id=method_id("pauseFor(uint256)")),
    revert_on_failure=False
)
</code></pre>
<p>was not fully documented: <a href="https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call">https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call</a> .</p>
<p>The documentation says that: if <code>max_outsize=0</code> it should return nothing and then it says that if <code>revert_on_failure=False</code> it should return a <code>success</code> flag in the tuple of response, but what if <code>max_outsize=0</code>  and <code>revert_on_failure=False</code>.</p>
<img src="https://user-images.githubusercontent.com/22330612/232125364-d2b3bbac-0b4f-40cb-80ff-f55d8eafef44.png" alt="image" width="715">

<p> So the team started researching what exactly happened in that case, after some research we found that the Vyper compiler generates the wrong bytecode in that case, it generates the sequence:</p>
<pre><code>CALL // call
MLOAD // MLOAD is wrong since the CALL result is already stored in the stack
</code></pre>
<h3 id="impact">Impact</h3>
<p>Example of buggy code:</p>
<pre><code class="language-vyper">@external
def returnSome(calling: address, a: uint256) -&gt; bool:
    success: bool = false
    success = raw_call(
        calling,
        _abi_encode(a, method_id=method_id("a(uint256)")),
        revert_on_failure=False
        )
</code></pre>
<p>any contract that uses the <code>raw_call</code> with <code>revert_on_failure=False</code> and <code>max_outsize=0</code> receives the wrong response from <code>raw_call</code>. Depending on the memory garbage, the result can be either <code>True</code> or <code>False</code>.</p>
<h3 id="patches">Patches</h3>
<p>Fix by @charles-cooper <a href="https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae">https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The simple workaround is always to put  <code>max_outsize&gt;0</code>.
Workaround example <a href="https://github.com/lidofinance/gate-seals/pull/5/files">https://github.com/lidofinance/gate-seals/pull/5/files</a></p>
<h3 id="references">References</h3>
<p>Lido's fix: <a href="https://github.com/lidofinance/gate-seals/pull/5/files">https://github.com/lidofinance/gate-seals/pull/5/files</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-w9g2-3w7p-72g9">https://github.com/vyperlang/vyper/security/advisories/GHSA-w9g2-3w7p-72g9</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae">https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30629">https://nvd.nist.gov/vuln/detail/CVE-2023-30629</a></li>
<li><a href="https://github.com/lidofinance/gate-seals/pull/5/files">https://github.com/lidofinance/gate-seals/pull/5/files</a></li>
<li><a href="https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call">https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call</a></li>
<li><a href="https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164">https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-131.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-131.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-w9g2-3w7p-72g9">https://github.com/advisories/GHSA-w9g2-3w7p-72g9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9g2-3w7p-72g9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-04-24T22:33:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Multiple evaluation of contract address in call in vyper]]></title>
        <id>https://github.com/advisories/GHSA-4v9q-cgpw-cf38</id>
        <link href="https://github.com/advisories/GHSA-4v9q-cgpw-cf38"/>
        <updated>2024-11-19T16:17:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>when a calling an external contract with no return value, the contract address could be evaluated twice. this is usually only an efficiency problem, but if evaluation of the contract address has side effects, it could result in double evaluation of the side effects.</p>
<p>in the following example, <code>Foo(msg.sender).bar()</code> is the contract address for the following call (to <code>.foo()</code>), and could get evaluated twice</p>
<pre><code class="language-vyper">interface Foo:
    def foo(): nonpayable
    def bar() -&gt; address: nonpayable

@external
def do_stuff():
    Foo(Foo(msg.sender).bar()).foo()
</code></pre>
<h3 id="patches">Patches</h3>
<p>6b4d8ff185de071252feaa1c319712b2d6577f8d</p>
<h3 id="workarounds">Workarounds</h3>
<p>assign contract addresses to variables. the above example would change to</p>
<pre><code class="language-vyper">@external
def do_stuff():
    t: Foo = Foo(msg.sender).bar()
    t.foo()
</code></pre>
<h3 id="references">References</h3>
<h3 id="for-more-information">For more information</h3>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38">https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d">https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29255">https://nvd.nist.gov/vuln/detail/CVE-2022-29255</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2022-43053.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2022-43053.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4v9q-cgpw-cf38">https://github.com/advisories/GHSA-4v9q-cgpw-cf38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v9q-cgpw-cf38</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-06-06T21:23:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wagtail] Improper validation of URLs ('Cross-site Scripting') in Wagtail rich text fields]]></title>
        <id>https://github.com/advisories/GHSA-wq5h-f9p5-q7fx</id>
        <link href="https://github.com/advisories/GHSA-wq5h-f9p5-q7fx"/>
        <updated>2024-11-19T16:02:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When saving the contents of a rich text field in the admin interface, Wagtail does not apply server-side checks to ensure that link URLs use a valid protocol. A malicious user with access to the admin interface could thus craft a POST request to publish content with <code>javascript:</code> URLs containing arbitrary code. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions have been released as Wagtail 2.11.7 (for the LTS 2.11 branch) and Wagtail 2.12.4 (for the current 2.12 branch).</p>
<h3 id="workarounds">Workarounds</h3>
<p>For sites that cannot easily upgrade to a current supported version, the vulnerability can be patched by adding the following code to a <code>wagtail_hooks.py</code> module in any installed app:</p>
<pre><code class="language-python">from draftjs_exporter.dom import DOM
from wagtail.admin.rich_text.converters.html_to_contentstate import ExternalLinkElementHandler, PageLinkElementHandler
from wagtail.core import hooks
from wagtail.core.whitelist import check_url


def link_entity(props):
    id_ = props.get('id')
    link_props = {}

    if id_ is not None:
        link_props['linktype'] = 'page'
        link_props['id'] = id_
    else:
        link_props['href'] = check_url(props.get('url'))

    return DOM.create_element('a', link_props, props['children'])


@hooks.register('register_rich_text_features', order=1)
def register_link(features):
    features.register_converter_rule('contentstate', 'link', {
        'from_database_format': {
            'a[href]': ExternalLinkElementHandler('LINK'),
            'a[linktype="page"]': PageLinkElementHandler('LINK'),
        },
        'to_database_format': {
            'entity_decorators': {'LINK': link_entity}
        }
    })
</code></pre>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>Many thanks to Kevin Breen for reporting this issue.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Visit Wagtail's <a href="https://docs.wagtail.io/en/stable/support.html">support channels</a></li>
<li>Email us at <a href="mailto:security@wagtail.io">security@wagtail.io</a> (if you wish to send encrypted email, the public key ID is <code>0x6ba1e1a86e0f8ce8</code>)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/wagtail/wagtail/security/advisories/GHSA-wq5h-f9p5-q7fx">https://github.com/wagtail/wagtail/security/advisories/GHSA-wq5h-f9p5-q7fx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29434">https://nvd.nist.gov/vuln/detail/CVE-2021-29434</a></li>
<li><a href="https://github.com/wagtail/wagtail/commit/5c7a60977cba478f6a35390ba98cffc2bd41c8a4">https://github.com/wagtail/wagtail/commit/5c7a60977cba478f6a35390ba98cffc2bd41c8a4</a></li>
<li><a href="https://github.com/wagtail/wagtail/commit/915f6ed2bd7d53154103cc4424a0f18695cdad6c">https://github.com/wagtail/wagtail/commit/915f6ed2bd7d53154103cc4424a0f18695cdad6c</a></li>
<li><a href="https://github.com/wagtail/wagtail/compare/v2.11.6...v2.11.7">https://github.com/wagtail/wagtail/compare/v2.11.6...v2.11.7</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2021-114.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2021-114.yaml</a></li>
<li><a href="https://pypi.org/project/wagtail">https://pypi.org/project/wagtail</a></li>
<li><a href="https://github.com/advisories/GHSA-wq5h-f9p5-q7fx">https://github.com/advisories/GHSA-wq5h-f9p5-q7fx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq5h-f9p5-q7fx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-04-20T14:02:30.000Z</published>
    </entry>
</feed>