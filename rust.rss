<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2025-05-15T22:01:19.592Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[crossbeam-channel] Duplicate Advisory: crossbeam-channel Vulnerable to Double Free on Drop]]></title>
        <id>https://github.com/advisories/GHSA-w443-5h3j-jqcp</id>
        <link href="https://github.com/advisories/GHSA-w443-5h3j-jqcp"/>
        <updated>2025-05-15T18:26:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="duplicate-advisory">Duplicate Advisory</h3>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-pg9f-39pc-qf8g. This link is maintained to preserve external references.</p>
<h3 id="original-description">Original Description</h3>
<p>In crossbeam-channel rust crate, the internal <code>Channel</code> type's <code>Drop</code> method has a race condition which could, in some circumstances, lead to a double-free that could result in memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4574">https://nvd.nist.gov/vuln/detail/CVE-2025-4574</a></li>
<li><a href="https://github.com/crossbeam-rs/crossbeam/pull/1187">https://github.com/crossbeam-rs/crossbeam/pull/1187</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-4574">https://access.redhat.com/security/cve/CVE-2025-4574</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2358890">https://bugzilla.redhat.com/show_bug.cgi?id=2358890</a></li>
<li><a href="https://github.com/advisories/GHSA-w443-5h3j-jqcp">https://github.com/advisories/GHSA-w443-5h3j-jqcp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w443-5h3j-jqcp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[macroquad] macroquad vulnerable to multiple soundness issues]]></title>
        <id>https://github.com/advisories/GHSA-gg76-hg3v-5q6c</id>
        <link href="https://github.com/advisories/GHSA-gg76-hg3v-5q6c"/>
        <updated>2025-05-15T16:22:33.000Z</updated>
        <content type="html"><![CDATA[<p>Several soundness issues have been reported. Resolving them doesn't seem to be considered a priority. In particular, unprincipled use of mutable statics is pervasive throughout the library, making it possible to cause use-after-free in safe code.</p>
<p>Currently, no fixed version is available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/not-fl3/macroquad/issues/333">https://github.com/not-fl3/macroquad/issues/333</a></li>
<li><a href="https://github.com/not-fl3/macroquad/issues/634">https://github.com/not-fl3/macroquad/issues/634</a></li>
<li><a href="https://github.com/not-fl3/macroquad/issues/723">https://github.com/not-fl3/macroquad/issues/723</a></li>
<li><a href="https://github.com/not-fl3/macroquad/issues/746">https://github.com/not-fl3/macroquad/issues/746</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0035.html">https://rustsec.org/advisories/RUSTSEC-2025-0035.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gg76-hg3v-5q6c">https://github.com/advisories/GHSA-gg76-hg3v-5q6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gg76-hg3v-5q6c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-15T16:22:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sudo-rs] sudo-rs Allows Low Privilege Users to Enumerate Privileges of Others]]></title>
        <id>https://github.com/advisories/GHSA-w9q3-g4p5-5q2r</id>
        <link href="https://github.com/advisories/GHSA-w9q3-g4p5-5q2r"/>
        <updated>2025-05-13T20:05:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Users with limited sudo privileges (e.g. execution of a single command) can list sudo privileges of other users using the <code>-U</code> flag. This doesn't happen with the original sudo.</p>
<h3 id="poc">PoC</h3>
<p>The initial test has been done in a container running Ubuntu 24.04 and installing <a href="https://github.com/jnsgruk/oxidizr">oxidizr</a>, running sudo-rs 0.2.2.</p>
<p>A user (bob) has been added with only ps command executable through sudo:</p>
<pre><code>root    ALL=(ALL:ALL) ALL
bob     ALL=(ALL:ALL) /usr/bin/ps
</code></pre>
<p>The user is not able to read the <code>/etc/sudoers</code> file and running <code>sudo -l -Uroot</code> with original sudo (version 1.9.15p5) causes the following error:</p>
<pre><code>Sorry, user bob is not allowed to execute 'list' as root on 43d4aed3cdbd.
</code></pre>
<p>The same command with sudo-rs is run without denying the execution:</p>
<pre><code>User root may run the following commands on 43d4aed3cdbd:
    (ALL : ALL) ALL
</code></pre>
<p>The same happens for other non-root users:</p>
<pre><code>bob@43d4aed3cdbd:~$ sudo -l -Ufoo
User foo may run the following commands on 43d4aed3cdbd:
    (ALL : ALL) /usr/bin/whoami
</code></pre>
<p>The behavior has been also been observed for version 0.2.5.</p>
<h3 id="impact">Impact</h3>
<p>Users with limited sudo privileges can enumerate the sudoers file, revealing sensitive information about other users' permissions. Attackers can collect information that can be used to more targeted attacks.</p>
<p>Systems where users either do not have sudo privileges or have the ability to run all commands as root through sudo (the default configuration on most systems) are not affected by this advisory.</p>
<h3 id="credits">Credits</h3>
<p>This issue was identified by <a href="https://www.zonia3000.net/">Sonia Zorba</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trifectatechfoundation/sudo-rs/security/advisories/GHSA-w9q3-g4p5-5q2r">https://github.com/trifectatechfoundation/sudo-rs/security/advisories/GHSA-w9q3-g4p5-5q2r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46718">https://nvd.nist.gov/vuln/detail/CVE-2025-46718</a></li>
<li><a href="https://github.com/trifectatechfoundation/sudo-rs/releases/tag/v0.2.6">https://github.com/trifectatechfoundation/sudo-rs/releases/tag/v0.2.6</a></li>
<li><a href="https://github.com/advisories/GHSA-w9q3-g4p5-5q2r">https://github.com/advisories/GHSA-w9q3-g4p5-5q2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9q3-g4p5-5q2r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-13T20:05:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sudo-rs] sudo-rs Allows Low Privilege Users to Discover the Existence of Files in Inaccessible Folders]]></title>
        <id>https://github.com/advisories/GHSA-98cv-wqjx-wx8f</id>
        <link href="https://github.com/advisories/GHSA-98cv-wqjx-wx8f"/>
        <updated>2025-05-13T14:08:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Users with no (or very limited) sudo privileges can determine whether files exists in folders that they otherwise cannot access using <code>sudo --list &lt;pathname&gt;</code>.</p>
<h3 id="poc">PoC</h3>
<p>As root:</p>
<pre><code># mkdir /tmp/foo
# chmod a-rwx /tmp/foo
# touch /tmp/foo/secret_file
</code></pre>
<p>As a user without any (or limited) sudo rights:</p>
<pre><code>$ sudo --list /tmp/foo/nonexistent_file
sudo-rs: '/tmp/foo/nonexistent_file': command not found
$ $ sudo --list /tmp/foo/secret_file
sudo-rs: Sorry, user eve may not run sudo on host.
</code></pre>
<p>I.e. the user can distinguish whether files exist.</p>
<h3 id="related">Related</h3>
<p>Original sudo (vulnerable version tested by us: 1.9.15p5) exhibited similar behaviour for files with the executable bit set.</p>
<h3 id="impact">Impact</h3>
<p>Users with local access to a machine can discover the existence/non-existence of certain files, revealing potentially sensitive information in the file names. This information can also be used in conjunction with other attacks.</p>
<h3 id="credits">Credits</h3>
<p>This issue was identified by sudo-rs developer Marc Schoolderman</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trifectatechfoundation/sudo-rs/security/advisories/GHSA-98cv-wqjx-wx8f">https://github.com/trifectatechfoundation/sudo-rs/security/advisories/GHSA-98cv-wqjx-wx8f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46717">https://nvd.nist.gov/vuln/detail/CVE-2025-46717</a></li>
<li><a href="https://github.com/trifectatechfoundation/sudo-rs/releases/tag/v0.2.6">https://github.com/trifectatechfoundation/sudo-rs/releases/tag/v0.2.6</a></li>
<li><a href="https://github.com/advisories/GHSA-98cv-wqjx-wx8f">https://github.com/advisories/GHSA-98cv-wqjx-wx8f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-98cv-wqjx-wx8f</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-13T14:08:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ring]  ring has some AES functions that may panic when overflow checking is enabled in]]></title>
        <id>https://github.com/advisories/GHSA-c86p-w88r-qvqr</id>
        <link href="https://github.com/advisories/GHSA-c86p-w88r-qvqr"/>
        <updated>2025-05-09T19:42:42.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Rust's Ring package. A panic may be triggered when overflow checking is enabled. In the QUIC protocol, this flaw allows an attacker to induce this panic by sending a specially crafted packet. It will likely occur unintentionally in 1 out of every 2**32 packets sent or received.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4432">https://nvd.nist.gov/vuln/detail/CVE-2025-4432</a></li>
<li><a href="https://github.com/briansmith/ring/pull/2447">https://github.com/briansmith/ring/pull/2447</a></li>
<li><a href="https://github.com/briansmith/ring/commit/ec2d3cf1d91f148c84e4806b4f0b3c98f6df3b38">https://github.com/briansmith/ring/commit/ec2d3cf1d91f148c84e4806b4f0b3c98f6df3b38</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-4432">https://access.redhat.com/security/cve/CVE-2025-4432</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2350655">https://bugzilla.redhat.com/show_bug.cgi?id=2350655</a></li>
<li><a href="https://github.com/briansmith/ring">https://github.com/briansmith/ring</a></li>
<li><a href="https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05">https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0009.html">https://rustsec.org/advisories/RUSTSEC-2025-0009.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c86p-w88r-qvqr">https://github.com/advisories/GHSA-c86p-w88r-qvqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c86p-w88r-qvqr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-09T18:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trailer] trailer mishandles allocating with a size of zero]]></title>
        <id>https://github.com/advisories/GHSA-6x45-r4pr-5362</id>
        <link href="https://github.com/advisories/GHSA-6x45-r4pr-5362"/>
        <updated>2025-05-09T15:54:06.000Z</updated>
        <content type="html"><![CDATA[<p>lib.rs in the trailer crate through 0.1.2 for Rust mishandles allocating with a size of zero.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47737">https://nvd.nist.gov/vuln/detail/CVE-2025-47737</a></li>
<li><a href="https://github.com/Geal/trailer/issues/2">https://github.com/Geal/trailer/issues/2</a></li>
<li><a href="https://crates.io/crates/trailer">https://crates.io/crates/trailer</a></li>
<li><a href="https://github.com/advisories/GHSA-6x45-r4pr-5362">https://github.com/advisories/GHSA-6x45-r4pr-5362</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6x45-r4pr-5362</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-09T06:32:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libsql-sqlite3-parser] libsql-sqlite3-parser crash due to invalid UTF-8 input]]></title>
        <id>https://github.com/advisories/GHSA-8m95-fffc-h4c5</id>
        <link href="https://github.com/advisories/GHSA-8m95-fffc-h4c5"/>
        <updated>2025-05-09T15:53:46.000Z</updated>
        <content type="html"><![CDATA[<p>dialect/mod.rs in the libsql-sqlite3-parser crate through 0.13.0 before 14f422a for Rust can crash if the input is not valid UTF-8.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47736">https://nvd.nist.gov/vuln/detail/CVE-2025-47736</a></li>
<li><a href="https://github.com/gwenn/lemon-rs/issues/86">https://github.com/gwenn/lemon-rs/issues/86</a></li>
<li><a href="https://github.com/tursodatabase/libsql/issues/2052">https://github.com/tursodatabase/libsql/issues/2052</a></li>
<li><a href="https://github.com/gwenn/lemon-rs/pull/8">https://github.com/gwenn/lemon-rs/pull/8</a></li>
<li><a href="https://crates.io/crates/libsql-sqlite3-parser">https://crates.io/crates/libsql-sqlite3-parser</a></li>
<li><a href="https://github.com/advisories/GHSA-8m95-fffc-h4c5">https://github.com/advisories/GHSA-8m95-fffc-h4c5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m95-fffc-h4c5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-09T06:32:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wgp] wgp race condition in inner::drop]]></title>
        <id>https://github.com/advisories/GHSA-2w4w-4385-vh4h</id>
        <link href="https://github.com/advisories/GHSA-2w4w-4385-vh4h"/>
        <updated>2025-05-09T15:53:26.000Z</updated>
        <content type="html"><![CDATA[<p>inner::drop in inner.rs in the wgp crate through 0.2.0 for Rust lacks drop_slow thread synchronization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47735">https://nvd.nist.gov/vuln/detail/CVE-2025-47735</a></li>
<li><a href="https://github.com/Nugine/wgp/issues/1">https://github.com/Nugine/wgp/issues/1</a></li>
<li><a href="https://github.com/advisories/GHSA-2w4w-4385-vh4h">https://github.com/advisories/GHSA-2w4w-4385-vh4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2w4w-4385-vh4h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-09T06:32:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast_id_map] fast_id_map has a soundness issue and is unmaintained]]></title>
        <id>https://github.com/advisories/GHSA-4h96-mv53-2c86</id>
        <link href="https://github.com/advisories/GHSA-4h96-mv53-2c86"/>
        <updated>2025-05-08T14:53:48.000Z</updated>
        <content type="html"><![CDATA[<p><code>FastMap::get()</code> lacks sufficient checks to its parameter index and is used to unsafely get a <code>Vec</code> element.</p>
<p><code>fast_id_map</code> is unmaintained.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Bruce0203/fast_map">https://github.com/Bruce0203/fast_map</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0034.html">https://rustsec.org/advisories/RUSTSEC-2025-0034.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4h96-mv53-2c86">https://github.com/advisories/GHSA-4h96-mv53-2c86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4h96-mv53-2c86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-08T14:53:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scanner] scanner has a Public API without sufficient bounds checking]]></title>
        <id>https://github.com/advisories/GHSA-79m9-55jc-p6mw</id>
        <link href="https://github.com/advisories/GHSA-79m9-55jc-p6mw"/>
        <updated>2025-05-07T15:26:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>Match::get()</code> and <code>Match::ptr()</code> lack sufficient bounds checks, leading to potential out of bounds reads.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pombredanne/scanner-rs/pull/1">https://github.com/pombredanne/scanner-rs/pull/1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0033.html">https://rustsec.org/advisories/RUSTSEC-2025-0033.html</a></li>
<li><a href="https://github.com/advisories/GHSA-79m9-55jc-p6mw">https://github.com/advisories/GHSA-79m9-55jc-p6mw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79m9-55jc-p6mw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-07T15:26:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mithril-client] Mithril snapshots for Cardano database could be compromised by an adversary]]></title>
        <id>https://github.com/advisories/GHSA-qv97-5qr8-2266</id>
        <link href="https://github.com/advisories/GHSA-qv97-5qr8-2266"/>
        <updated>2025-05-07T15:25:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<h4 id="mithril-certification-of-cardano-database">Mithril certification of Cardano database</h4>
<p>The Mithril network provides certification for snapshots of the Cardano database, enabling users to quickly bootstrap a Cardano node without relying on the slower peer-to-peer synchronization process.</p>
<p>To generate a multi-signature, a minimum threshold of Cardano stake registered in the protocol must agree on signing the same message. In this context, a digest is computed from the internal files of the Cardano node's database. However, this mechanism has certain limitations. Specifically, some files are not identically generated across all Cardano nodes, and there is no API to provide consistent snapshots at a specific beacon on the Cardano chain:</p>
<ul>
<li>All immutable files, except the last one (which is still being created), are used to compute the message</li>
<li>The last immutable file is excluded from the signature</li>
<li>The ledger state files are also excluded from the signature.</li>
</ul>
<h4 id="cardano-node-startup-sequence">Cardano node startup sequence</h4>
<p>A Cardano node can only perform a fast bootstrap if a pre-computed ledger state is loaded into its database; otherwise, a full re-computation is required, which is time-consuming. During the startup phase with a pre-computed ledger state, the node performs structural verification of the ledger state and lightweight conformity checks which may not be enough to systematically detect invalid ledger state.</p>
<h4 id="attack-scenarios">Attack scenarios</h4>
<p>Inconsistencies could be introduced into a tampered ledger state distributed through Mithril snapshots, either by an unknown source or by a compromised IOG-operated aggregator. These inconsistencies would not be immediately detected by Cardano nodes started with such snapshots, potentially enabling long-range attacks that might not be corrected by honest nodes, even if they sync from genesis.</p>
<p>Currently, a Mithril network has only one aggregator, which serves snapshots from a secure cloud location operated by IOG and is therefore assumed to be trustworthy. In the future, as Mithril networks become more decentralized, multiple aggregators will operate independently. This increased decentralization could raise the risk of a malicious aggregator distributing a tampered ledger state.</p>
<h3 id="patches">Patches</h3>
<p>As a mitigation, the Mithril aggregator now signs the ledger state snapshot and the latest immutable file using an IOG-owned key, and the client library and CLI validate the signature of these files upon download.</p>
<ul>
<li>The <strong>Mithril client library</strong> has been fixed with version <code>0.12.2</code>, <strong>previous versions must not be used anymore</strong>.</li>
<li>The <strong>Mithril client CLI</strong> has been fixed with version <code>0.12.1</code>, <strong>previous versions must not be used anymore</strong>.</li>
<li>The <strong>Mithril aggregator</strong> has been fixed with version <code>0.7.44</code>, <strong>previous versions must not be used anymore</strong>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><em>Mithril protocol in depth</em>: <a href="https://mithril.network/doc/next/mithril/mithril-protocol/protocol">https://mithril.network/doc/next/mithril/mithril-protocol/protocol</a></li>
<li><em>Bootstrap a Cardano node</em>: <a href="https://mithril.network/doc/manual/getting-started/bootstrap-cardano-node">https://mithril.network/doc/manual/getting-started/bootstrap-cardano-node</a></li>
<li><em>Mithril certification of the Cardano node database</em>: <a href="https://mithril.network/doc/mithril/advanced/mithril-certification/cardano-node-database">https://mithril.network/doc/mithril/advanced/mithril-certification/cardano-node-database</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/input-output-hk/mithril/security/advisories/GHSA-qv97-5qr8-2266">https://github.com/input-output-hk/mithril/security/advisories/GHSA-qv97-5qr8-2266</a></li>
<li><a href="https://github.com/advisories/GHSA-qv97-5qr8-2266">https://github.com/advisories/GHSA-qv97-5qr8-2266</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qv97-5qr8-2266</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-07T15:25:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redox_uefi_std] Redox UEFI Safe API can cause heap-buffer-overflow]]></title>
        <id>https://github.com/advisories/GHSA-58xc-hpvq-8473</id>
        <link href="https://github.com/advisories/GHSA-58xc-hpvq-8473"/>
        <updated>2025-05-06T20:00:19.000Z</updated>
        <content type="html"><![CDATA[<p>ffi::nstr() should be marked unsafe, since a pointer to a buffer without a trailing 0 value will cause a heap buffer overflow.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://gitlab.redox-os.org/redox-os/uefi/-/commit/b711d47e815665b0ec8949e39292ad8e3fdd0756">https://gitlab.redox-os.org/redox-os/uefi/-/commit/b711d47e815665b0ec8949e39292ad8e3fdd0756</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0032.html">https://rustsec.org/advisories/RUSTSEC-2025-0032.html</a></li>
<li><a href="https://github.com/advisories/GHSA-58xc-hpvq-8473">https://github.com/advisories/GHSA-58xc-hpvq-8473</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-58xc-hpvq-8473</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-06T20:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tanton_engine] tanton_engine has unsound public API]]></title>
        <id>https://github.com/advisories/GHSA-m2xr-2vj4-wh94</id>
        <link href="https://github.com/advisories/GHSA-m2xr-2vj4-wh94"/>
        <updated>2025-05-06T16:44:31.000Z</updated>
        <content type="html"><![CDATA[<p>The following functions in the <code>tanton_engine</code> crate are unsound due to lack of sufficient boundary
checks in public API:</p>
<ul>
<li><code>Stack::offset()</code></li>
<li><code>ThreadStack::get()</code></li>
<li><code>RootMoveList::insert_score_depth()</code></li>
<li><code>RootMoveList::insert_score()</code></li>
</ul>
<p>The tanton_engine crate is no longer maintained, so there are no plans to fix this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0031.html">https://rustsec.org/advisories/RUSTSEC-2025-0031.html</a></li>
<li><a href="https://github.com/advisories/GHSA-m2xr-2vj4-wh94">https://github.com/advisories/GHSA-m2xr-2vj4-wh94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2xr-2vj4-wh94</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-06T16:44:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openvm] OpenVM allows the byte decomposition of pc in AUIPC chip to overflow]]></title>
        <id>https://github.com/advisories/GHSA-jf2r-x3j4-23m7</id>
        <link href="https://github.com/advisories/GHSA-jf2r-x3j4-23m7"/>
        <updated>2025-05-05T19:57:10.000Z</updated>
        <content type="html"><![CDATA[<p>The fix to <a href="https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21">https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21</a> has a typo that still results in the highest limb of <code>pc</code> being range checked to 8-bits instead of 6-bits.</p>
<p>In the AIR, we do <a href="https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135">https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135</a></p>
<pre><code>        for (i, limb) in pc_limbs.iter().skip(1).enumerate() {
            if i == pc_limbs.len() - 1 {
</code></pre>
<p>It should be</p>
<pre><code>        for (i, limb) in pc_limbs.iter().enumerate().skip(1) {
</code></pre>
<p>Right now the if statement is never triggered because the enumeration gives <code>i=0,1,2</code> when we instead want <code>i=1,2,3</code>. What this means is that <code>pc_limbs[3]</code> is range checked to 8-bits instead of 6-bits.</p>
<p>This leads to a vulnerability where the <code>pc_limbs</code> decomposition differs from the true <code>pc</code>, which means a malicious prover can make the destination register take a different value than the AUIPC instruction dictates, by making the decomposition overflow the BabyBear field.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openvm-org/openvm/security/advisories/GHSA-jf2r-x3j4-23m7">https://github.com/openvm-org/openvm/security/advisories/GHSA-jf2r-x3j4-23m7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46723">https://nvd.nist.gov/vuln/detail/CVE-2025-46723</a></li>
<li><a href="https://github.com/openvm-org/openvm/commit/68da4b50c033da5603517064aa0a08e1bbf70a01">https://github.com/openvm-org/openvm/commit/68da4b50c033da5603517064aa0a08e1bbf70a01</a></li>
<li><a href="https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21">https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21</a></li>
<li><a href="https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135">https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135</a></li>
<li><a href="https://github.com/openvm-org/openvm/releases/tag/v1.1.0">https://github.com/openvm-org/openvm/releases/tag/v1.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-jf2r-x3j4-23m7">https://github.com/advisories/GHSA-jf2r-x3j4-23m7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jf2r-x3j4-23m7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-05T19:57:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[obfstr] obfstr Type Confusion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v2p5-q653-9j99</id>
        <link href="https://github.com/advisories/GHSA-v2p5-q653-9j99"/>
        <updated>2025-05-05T17:25:10.000Z</updated>
        <content type="html"><![CDATA[<p>In the obfstr crate before 0.4.4 for Rust, the obfstr! argument type is not restricted to string slices, leading to invalid UTF-8 conversion that produces an invalid value.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-58253">https://nvd.nist.gov/vuln/detail/CVE-2024-58253</a></li>
<li><a href="https://github.com/CasualX/obfstr/issues/60">https://github.com/CasualX/obfstr/issues/60</a></li>
<li><a href="https://github.com/CasualX/obfstr/compare/v0.4.3...v0.4.4">https://github.com/CasualX/obfstr/compare/v0.4.3...v0.4.4</a></li>
<li><a href="https://github.com/advisories/GHSA-v2p5-q653-9j99">https://github.com/advisories/GHSA-v2p5-q653-9j99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v2p5-q653-9j99</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-02T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime may have data leakage between instances in the pooling allocator]]></title>
        <id>https://github.com/advisories/GHSA-wh6w-3828-g9qf</id>
        <link href="https://github.com/advisories/GHSA-wh6w-3828-g9qf"/>
        <updated>2025-05-02T12:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of it's pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. The pooling instance allocator in Wasmtime works by preallocating virtual memory for a fixed number of instances to reside in and then new instantiations pick a slot to use. Most conventional modules additionally have an initial copy-on-write "heap image" which is mapped in Wasmtime into the linear memory slot. When a heap slot is deallocated Wasmtime resets all of its contents back to the initial state but it does not unmap the image in case the next instance is an instantiation of the same module.</p>
<p>The bug in Wasmtime occurs when a slot in the pooling allocator previously was used for a module with a heap image, meaning that its current state of memory contains the initial heap contents of that module. If the next instantiation within that slot does not itself contain a heap image then Wasmtime would leave the old heap image in place erroneously and continue with instantiation. This means that instantiations of modules without a heap image can see the initial heap image of the prior instantiation within that slot.</p>
<p>Heap images in Wasmtime are created by precomputing WebAssembly <code>data</code> segments into one large mapping to be placed into linear memory at a particular offset. Most modules produced by toolchains today will have a heap image and an initialization snapshot. Creating a module without a heap image would require a hand-crafted <code>*.wat</code> file or a specially crafted source program. This consequence means that this bug is highly unlikely to be accidentally triggered and would otherwise require an intentional trigger with a hand-crafted module.</p>
<p>One important part of this vulnerability is Wasmtime is highly likely to segfault when the slot is reused again with a module that itself has an initialization image. For example if module A has a heap initialization image and module B does not have a heap initialization image, then the following sequence of events could happen if they all are instantiated into the same instance slot:</p>
<ul>
<li>Module A is instantiated, and then deallocated. This leaves A's heap image in place, reset to its initial contents.</li>
<li>Module B is instantiated and erroneously can see the initial heap contents of A. Module B is then deallocated and the entire heap is unmapped and reset back to zero.</li>
<li>Module A is instantiated again, but the state tracking the slot did not account for module B so it thinks the module image is still mapped and proceeds with instantiation. Any action on A's part to access linear memory will then trap and if the host accesses A's memory it will segfault because the data that's supposed to be mapped is all unmapped.</li>
</ul>
<p>Adding this all together this means that in practice modules must be deliberately crafted to not have an initial heap image to view the contents of a prior image. If this module is instantiated though then when the slot is reused the next, likely image-using, module will believe its memory is mapped when it isn't, causing the host to segfault on unmapped memory it believed was mapped. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Trigging this bug requires the pooling allocator to be configured and for copy-on-write heap images to also be enabled. Pooling allocation is not enabled by default but copy-on-write heap images are. Mitigations for this bug include:</p>
<ul>
<li>Disabling the pooling allocator - note that pooling allocation is not enabled by default in Wasmtime</li>
<li>Disabling the <code>memory-init-cow</code> feature or with <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a> - configuration required to enable or disable copy-on-write (this is enabled by default).</li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">Patch for <code>release-2.0.0</code> branch</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">Patch for <code>main</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39393">https://nvd.nist.gov/vuln/detail/CVE-2022-39393</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0075.html">https://rustsec.org/advisories/RUSTSEC-2022-0075.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0098.html">https://rustsec.org/advisories/RUSTSEC-2022-0098.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wh6w-3828-g9qf">https://github.com/advisories/GHSA-wh6w-3828-g9qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh6w-3828-g9qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T21:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime may have data leakage between instances in the pooling allocator]]></title>
        <id>https://github.com/advisories/GHSA-wh6w-3828-g9qf</id>
        <link href="https://github.com/advisories/GHSA-wh6w-3828-g9qf"/>
        <updated>2025-05-02T12:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of it's pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. The pooling instance allocator in Wasmtime works by preallocating virtual memory for a fixed number of instances to reside in and then new instantiations pick a slot to use. Most conventional modules additionally have an initial copy-on-write "heap image" which is mapped in Wasmtime into the linear memory slot. When a heap slot is deallocated Wasmtime resets all of its contents back to the initial state but it does not unmap the image in case the next instance is an instantiation of the same module.</p>
<p>The bug in Wasmtime occurs when a slot in the pooling allocator previously was used for a module with a heap image, meaning that its current state of memory contains the initial heap contents of that module. If the next instantiation within that slot does not itself contain a heap image then Wasmtime would leave the old heap image in place erroneously and continue with instantiation. This means that instantiations of modules without a heap image can see the initial heap image of the prior instantiation within that slot.</p>
<p>Heap images in Wasmtime are created by precomputing WebAssembly <code>data</code> segments into one large mapping to be placed into linear memory at a particular offset. Most modules produced by toolchains today will have a heap image and an initialization snapshot. Creating a module without a heap image would require a hand-crafted <code>*.wat</code> file or a specially crafted source program. This consequence means that this bug is highly unlikely to be accidentally triggered and would otherwise require an intentional trigger with a hand-crafted module.</p>
<p>One important part of this vulnerability is Wasmtime is highly likely to segfault when the slot is reused again with a module that itself has an initialization image. For example if module A has a heap initialization image and module B does not have a heap initialization image, then the following sequence of events could happen if they all are instantiated into the same instance slot:</p>
<ul>
<li>Module A is instantiated, and then deallocated. This leaves A's heap image in place, reset to its initial contents.</li>
<li>Module B is instantiated and erroneously can see the initial heap contents of A. Module B is then deallocated and the entire heap is unmapped and reset back to zero.</li>
<li>Module A is instantiated again, but the state tracking the slot did not account for module B so it thinks the module image is still mapped and proceeds with instantiation. Any action on A's part to access linear memory will then trap and if the host accesses A's memory it will segfault because the data that's supposed to be mapped is all unmapped.</li>
</ul>
<p>Adding this all together this means that in practice modules must be deliberately crafted to not have an initial heap image to view the contents of a prior image. If this module is instantiated though then when the slot is reused the next, likely image-using, module will believe its memory is mapped when it isn't, causing the host to segfault on unmapped memory it believed was mapped. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Trigging this bug requires the pooling allocator to be configured and for copy-on-write heap images to also be enabled. Pooling allocation is not enabled by default but copy-on-write heap images are. Mitigations for this bug include:</p>
<ul>
<li>Disabling the pooling allocator - note that pooling allocation is not enabled by default in Wasmtime</li>
<li>Disabling the <code>memory-init-cow</code> feature or with <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a> - configuration required to enable or disable copy-on-write (this is enabled by default).</li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">Patch for <code>release-2.0.0</code> branch</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">Patch for <code>main</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39393">https://nvd.nist.gov/vuln/detail/CVE-2022-39393</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0075.html">https://rustsec.org/advisories/RUSTSEC-2022-0075.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0098.html">https://rustsec.org/advisories/RUSTSEC-2022-0098.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wh6w-3828-g9qf">https://github.com/advisories/GHSA-wh6w-3828-g9qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh6w-3828-g9qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T21:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mp3-metadata] Panic in mp3-metadata due to the lack of bounds checking]]></title>
        <id>https://github.com/advisories/GHSA-927q-g9w9-pm54</id>
        <link href="https://github.com/advisories/GHSA-927q-g9w9-pm54"/>
        <updated>2025-04-30T17:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>get_id3()</code> methods used by <code>mp3_metadata::read_from_slice()</code> does not perform adequate bounds checking when recreating the tag due to the use of desynchronization.</p>
<p>Fixed in <a href="https://github.com/GuillaumeGomez/mp3-metadata/pull/37">Fix index error</a>, released as part of 0.4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GuillaumeGomez/mp3-metadata/issues/36">https://github.com/GuillaumeGomez/mp3-metadata/issues/36</a></li>
<li><a href="https://github.com/GuillaumeGomez/mp3-metadata/pull/37">https://github.com/GuillaumeGomez/mp3-metadata/pull/37</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0027.html">https://rustsec.org/advisories/RUSTSEC-2025-0027.html</a></li>
<li><a href="https://github.com/advisories/GHSA-927q-g9w9-pm54">https://github.com/advisories/GHSA-927q-g9w9-pm54</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-927q-g9w9-pm54</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:41:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pleezer] Pleezer resource exhaustion through uncollected hook script processes]]></title>
        <id>https://github.com/advisories/GHSA-472w-7w45-g3w5</id>
        <link href="https://github.com/advisories/GHSA-472w-7w45-g3w5"/>
        <updated>2025-04-15T21:41:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Hook scripts in pleezer can be triggered by various events like track changes and playback state changes. In affected versions, these scripts were spawned without proper process cleanup, leaving zombie processes in the system's process table.</p>
<p>Even during normal usage, every track change and playback event would leave behind zombie processes. This leads to inevitable resource exhaustion over time as the system's process table fills up, eventually preventing new processes from being created. The issue is exacerbated if events occur rapidly, whether through normal use (e.g., skipping through a playlist) or potential manipulation of the Deezer Connect protocol traffic.</p>
<p>This vulnerability affects all users who have configured hook scripts using the <code>--hook</code> option.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been fixed in version 0.16.0. Users should upgrade to this version, which properly manages child processes using asynchronous process handling and cleanup.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users who cannot upgrade immediately can:</p>
<ul>
<li>Disable hook scripts by removing the <code>--hook</code> option</li>
<li>Ensure hook scripts handle their own child process cleanup</li>
<li>Regularly restart pleezer to clear accumulated zombie processes</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li>Initial report: <a href="https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199">https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199</a></li>
<li>Fix commit: 436a5f1e4c08989b58dbba2b0ffa423458016c2d</li>
<li>Fixed release: <a href="https://github.com/roderickvd/pleezer/releases/tag/v0.16.0">https://github.com/roderickvd/pleezer/releases/tag/v0.16.0</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/roderickvd/pleezer/security/advisories/GHSA-472w-7w45-g3w5">https://github.com/roderickvd/pleezer/security/advisories/GHSA-472w-7w45-g3w5</a></li>
<li><a href="https://github.com/roderickvd/pleezer/commit/436a5f1e4c08989b58dbba2b0ffa423458016c2d">https://github.com/roderickvd/pleezer/commit/436a5f1e4c08989b58dbba2b0ffa423458016c2d</a></li>
<li><a href="https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199">https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199</a></li>
<li><a href="https://github.com/roderickvd/pleezer/releases/tag/v0.16.0">https://github.com/roderickvd/pleezer/releases/tag/v0.16.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32439">https://nvd.nist.gov/vuln/detail/CVE-2025-32439</a></li>
<li><a href="https://github.com/advisories/GHSA-472w-7w45-g3w5">https://github.com/advisories/GHSA-472w-7w45-g3w5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-472w-7w45-g3w5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-14T17:49:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
</feed>