<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2025-02-08T12:01:41.011Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] wasmvm: Malicious smart contract can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-mx2j-7cmv-353c</id>
        <link href="https://github.com/advisories/GHSA-mx2j-7cmv-353c"/>
        <updated>2025-02-06T18:03:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2025-002">CWA-2025-002</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.2.0, &lt; 2.2.2</li>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.5</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.6</li>
<li>wasmvm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.8, 2.0.6, 2.1.5, 2.2.2</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>The vulnerability can be used to slow down block production. The attack requires a malicious contract,
so permissioned chains are unlikely to be affected.</p>
<p>(We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li>2.2: <a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to one of the patched version
depending on which minor version you are on; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.8, 2.0.6, 2.1.5 or 2.2.2.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-11-24: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-12-20: Confio security contributors confirm the report.</li>
<li>2024-01-27: Confio developed the patch internally.</li>
<li>2025-02-04: Patch gets released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1.2: <a href="https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/0295254e8645301ccb606d46108a45cede0a73e0/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-mx2j-7cmv-353c</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27">https://github.com/CosmWasm/cosmwasm/commit/2b7f2faa57a1efc8207455c37f87f1eee6035a27</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0">https://github.com/CosmWasm/cosmwasm/commit/a5d62f65b5eb947ebe40e2085b1c48a9d0a244d0</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b">https://github.com/CosmWasm/cosmwasm/commit/d6143b0aff16a39bbea4be37597d8e9d9b213d3b</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58">https://github.com/CosmWasm/cosmwasm/commit/f0c04c03cbe2557634c1bbcdc2ce203fe7caca58</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2025-002.md</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2025-3449">https://pkg.go.dev/vuln/GO-2025-3449</a></li>
<li><a href="https://github.com/advisories/GHSA-mx2j-7cmv-353c">https://github.com/advisories/GHSA-mx2j-7cmv-353c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx2j-7cmv-353c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T18:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] rust-openssl ssl::select_next_proto use after free]]></title>
        <id>https://github.com/advisories/GHSA-rpmj-rpgj-qmpm</id>
        <link href="https://github.com/advisories/GHSA-rpmj-rpgj-qmpm"/>
        <updated>2025-02-04T17:17:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>ssl::select_next_proto</code> can return a slice pointing into the <code>server</code> argument's buffer but with a lifetime bound to the <code>client</code> argument. In situations where the <code>server</code> buffer's lifetime is shorter than the <code>client</code> buffer's, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.</p>
<h3 id="patches">Patches</h3>
<p><code>openssl</code> 0.10.70 fixes the signature of <code>ssl::select_next_proto</code> to properly constrain the output buffer's lifetime to that of both input buffers.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In standard usage of <code>ssl::select_next_proto</code> in the callback passed to <code>SslContextBuilder::set_alpn_select_callback</code>, code is only affected if the <code>server</code> buffer is constructed <em>within</em> the callback. For example:</p>
<p>Not vulnerable - the server buffer has a <code>'static</code> lifetime:</p>
<pre><code class="language-rust">builder.set_alpn_select_callback(|_, client_protos| {
    ssl::select_next_proto(b"\x02h2", client_protos).ok_or_else(AlpnError::NOACK)
});
</code></pre>
<p>Not vulnerable - the server buffer outlives the handshake:</p>
<pre><code class="language-rust">let server_protos = b"\x02h2".to_vec();
builder.set_alpn_select_callback(|_, client_protos| {
    ssl::select_next_proto(&amp;server_protos, client_protos).ok_or_else(AlpnError::NOACK)
});
</code></pre>
<p>Vulnerable - the server buffer is freed when the callback returns:</p>
<pre><code class="language-rust">builder.set_alpn_select_callback(|_, client_protos| {
    let server_protos = b"\x02h2".to_vec();
    ssl::select_next_proto(&amp;server_protos, client_protos).ok_or_else(AlpnError::NOACK)
});
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/sfackler/rust-openssl/pull/2360">https://github.com/sfackler/rust-openssl/pull/2360</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm">https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/pull/2360">https://github.com/sfackler/rust-openssl/pull/2360</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/commit/f014afb230de4d77bc79dea60e7e58c2f47b60f2">https://github.com/sfackler/rust-openssl/commit/f014afb230de4d77bc79dea60e7e58c2f47b60f2</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0004.html">https://rustsec.org/advisories/RUSTSEC-2025-0004.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24898">https://nvd.nist.gov/vuln/detail/CVE-2025-24898</a></li>
<li><a href="https://crates.io/crates/openssl">https://crates.io/crates/openssl</a></li>
<li><a href="https://github.com/advisories/GHSA-rpmj-rpgj-qmpm">https://github.com/advisories/GHSA-rpmj-rpgj-qmpm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rpmj-rpgj-qmpm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-03T17:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plonky2] Soundness issue with Plonky2 look up tables]]></title>
        <id>https://github.com/advisories/GHSA-hj49-h7fq-px5h</id>
        <link href="https://github.com/advisories/GHSA-hj49-h7fq-px5h"/>
        <updated>2025-01-30T21:36:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Lookup tables, whose length is not divisible by <code>26 = floor(num_routed_wires / 3)</code> always include the <code>0 -&gt; 0</code> input-output pair. Thus a malicious prover can always prove that <code>f(0) = 0</code> for any lookup table f (unless its length happens to be divisible by 26).</p>
<p>The cause of problem is that the <code>LookupTableGate</code>-s are <a href="https://github.com/0xPolygonZero/plonky2/blob/main/plonky2/src/plonk/prover.rs#L97">padded with zeros</a>.</p>
<p>The fix is done by padding with an existing table pair, similarly to <code>LookupGate</code>.</p>
<p>A workaround from the user side is to extend the table (by repeating some entries) so that its length becomes divisible by 26.</p>
<p>Fortunately, the seemingly most common use case, namely, hash functions with table-based sbox-es, are not vulnerable:</p>
<ul>
<li>both Monolith's and Tip5/Tip4's s-box tables already map 0 to 0;</li>
<li>more generally, forcing several (0,0) pairs inside such a hash function appears to be a too strong restriction to find an otherwise valid trace.</li>
</ul>
<p>A malicious prover exploiting this could cheat a circuit which statement is the following:</p>
<ul>
<li>output <code>x + f(x)</code> for some private input <code>x</code>, where <code>f(x) := 100 - x</code> is implemented by a lookup table.</li>
</ul>
<p>A malicious prover would be able to convince an honest verifier that they know an <code>0 &lt;= x &lt; 64</code> such that <code>x + (100 - x) = 0</code>.</p>
<h3 id="patches">Patches</h3>
<p>Yes, upgrade to v1.0.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>No</p>
<h3 id="references">References</h3>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/0xPolygonZero/plonky2/security/advisories/GHSA-hj49-h7fq-px5h">https://github.com/0xPolygonZero/plonky2/security/advisories/GHSA-hj49-h7fq-px5h</a></li>
<li><a href="https://github.com/0xPolygonZero/plonky2/commit/091047f7f10cae082716f3738ad59a583835f7b6">https://github.com/0xPolygonZero/plonky2/commit/091047f7f10cae082716f3738ad59a583835f7b6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24802">https://nvd.nist.gov/vuln/detail/CVE-2025-24802</a></li>
<li><a href="https://github.com/0xPolygonZero/plonky2/blob/main/plonky2/src/plonk/prover.rs#L97">https://github.com/0xPolygonZero/plonky2/blob/main/plonky2/src/plonk/prover.rs#L97</a></li>
<li><a href="https://github.com/advisories/GHSA-hj49-h7fq-px5h">https://github.com/advisories/GHSA-hj49-h7fq-px5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj49-h7fq-px5h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-30T19:28:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-float] fast-fault has a segmentation fault due to lack of bound check]]></title>
        <id>https://github.com/advisories/GHSA-8655-xgh5-5vvq</id>
        <link href="https://github.com/advisories/GHSA-8655-xgh5-5vvq"/>
        <updated>2025-01-29T22:21:18.000Z</updated>
        <content type="html"><![CDATA[<p>In this case, the "fast_float::common::AsciiStr::first" method within the "AsciiStr" struct 
uses the unsafe keyword to reading from memory without performing bounds checking. 
Specifically, it directly dereferences a pointer offset by "self.ptr".
Because of the above reason, the method accesses invalid memory address when it takes an empty string as its input.
This approach violates Rust’s memory safety guarantees, as it can lead to invalid memory access if empty buffer is provided.</p>
<p>No patched version for fast-float crate has been released, but a patch is available in the fast-float2 fork.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aldanor/fast-float-rust/issues/38">https://github.com/aldanor/fast-float-rust/issues/38</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0003.html">https://rustsec.org/advisories/RUSTSEC-2025-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8655-xgh5-5vvq">https://github.com/advisories/GHSA-8655-xgh5-5vvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8655-xgh5-5vvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-29T22:21:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-float2] fast-float2 has a segmentation fault due to lack of bound check]]></title>
        <id>https://github.com/advisories/GHSA-jqcp-xc3v-f446</id>
        <link href="https://github.com/advisories/GHSA-jqcp-xc3v-f446"/>
        <updated>2025-01-29T22:21:13.000Z</updated>
        <content type="html"><![CDATA[<p>In this case, the "fast_float2::common::AsciiStr::first" method within the "AsciiStr" struct 
uses the unsafe keyword to reading from memory without performing bounds checking. 
Specifically, it directly dereferences a pointer offset by "self.ptr".
Because of the above reason, the method accesses invalid memory address when it takes an empty string as its input.
This approach violates Rust’s memory safety guarantees, as it can lead to invalid memory access if empty buffer is provided.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aldanor/fast-float-rust/issues/38">https://github.com/aldanor/fast-float-rust/issues/38</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0002.html">https://rustsec.org/advisories/RUSTSEC-2025-0002.html</a></li>
<li><a href="https://github.com/Alexhuszagh/fast-float-rust/pull/7">https://github.com/Alexhuszagh/fast-float-rust/pull/7</a></li>
<li><a href="https://github.com/advisories/GHSA-jqcp-xc3v-f446">https://github.com/advisories/GHSA-jqcp-xc3v-f446</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqcp-xc3v-f446</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-29T22:19:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[grandpa-verifier] ismp-grandpa crate accepted incorrect signatures]]></title>
        <id>https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</id>
        <link href="https://github.com/advisories/GHSA-wwx5-gpgr-vxr7"/>
        <updated>2025-01-28T20:15:50.000Z</updated>
        <content type="html"><![CDATA[<p>A critical vulnerability was discovered in the <code>ismp-grandpa</code> crate, that allowed a malicious prover easily convince the verifier of the finality of arbitrary headers.</p>
<h3 id="description">Description</h3>
<p>The vulnerability manifests as a verifer that only accepts incorrect signatures of Grandpa precommits and was introduced in this <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262">specific commit</a>. Perhaps due to unfamiliarity with core substrate APIs.  The <code>if</code> statement should have included a negation check, similar to the previous code, but this was omitted. Causing the verifier to <strong>only</strong> accept invalid signatures.</p>
<p>This vulnerability remained undetected even with <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160">integration tests</a>, as the prover was also <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159">misconfigured</a> to initialize the Grandpa verifier with the incorrect authority <code>set_id</code>. This causes verification of honest precommit signatures to fail as the message is now malformed, but  the verifier indeed only accepts signatures or messages that fail the verification check.</p>
<p>But even more devastatingly, the verifier will also accept malicious GRANDPA signatures for any precommit message.</p>
<p>This vulnerability has been fixed in this <a href="https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea">commit</a> and a patch release has been published.</p>
<h3 id="impact">Impact</h3>
<p>This could be used to steal funds or compromise other kinds of cross-chain applications.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in the latest version of <code>ismp-granpda</code> <code>v15.0.1</code></p>
<h3 id="recommendations">Recommendations</h3>
<p>Users who rely on the compromised versions must upgrade immediately, as all vulnerable versions of the crate has been yanked.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/polytope-labs/hyperbridge/security/advisories/GHSA-wwx5-gpgr-vxr7">https://github.com/polytope-labs/hyperbridge/security/advisories/GHSA-wwx5-gpgr-vxr7</a></li>
<li><a href="https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea">https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24800">https://nvd.nist.gov/vuln/detail/CVE-2025-24800</a></li>
<li><a href="https://github.com/advisories/GHSA-wwx5-gpgr-vxr7">https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-28T17:29:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[grandpa-verifier-primitives] ismp-grandpa crate accepted incorrect signatures]]></title>
        <id>https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</id>
        <link href="https://github.com/advisories/GHSA-wwx5-gpgr-vxr7"/>
        <updated>2025-01-28T20:15:50.000Z</updated>
        <content type="html"><![CDATA[<p>A critical vulnerability was discovered in the <code>ismp-grandpa</code> crate, that allowed a malicious prover easily convince the verifier of the finality of arbitrary headers.</p>
<h3 id="description">Description</h3>
<p>The vulnerability manifests as a verifer that only accepts incorrect signatures of Grandpa precommits and was introduced in this <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262">specific commit</a>. Perhaps due to unfamiliarity with core substrate APIs.  The <code>if</code> statement should have included a negation check, similar to the previous code, but this was omitted. Causing the verifier to <strong>only</strong> accept invalid signatures.</p>
<p>This vulnerability remained undetected even with <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160">integration tests</a>, as the prover was also <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159">misconfigured</a> to initialize the Grandpa verifier with the incorrect authority <code>set_id</code>. This causes verification of honest precommit signatures to fail as the message is now malformed, but  the verifier indeed only accepts signatures or messages that fail the verification check.</p>
<p>But even more devastatingly, the verifier will also accept malicious GRANDPA signatures for any precommit message.</p>
<p>This vulnerability has been fixed in this <a href="https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea">commit</a> and a patch release has been published.</p>
<h3 id="impact">Impact</h3>
<p>This could be used to steal funds or compromise other kinds of cross-chain applications.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in the latest version of <code>ismp-granpda</code> <code>v15.0.1</code></p>
<h3 id="recommendations">Recommendations</h3>
<p>Users who rely on the compromised versions must upgrade immediately, as all vulnerable versions of the crate has been yanked.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/polytope-labs/hyperbridge/security/advisories/GHSA-wwx5-gpgr-vxr7">https://github.com/polytope-labs/hyperbridge/security/advisories/GHSA-wwx5-gpgr-vxr7</a></li>
<li><a href="https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea">https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24800">https://nvd.nist.gov/vuln/detail/CVE-2025-24800</a></li>
<li><a href="https://github.com/advisories/GHSA-wwx5-gpgr-vxr7">https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-28T17:29:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ismp-grandpa] ismp-grandpa crate accepted incorrect signatures]]></title>
        <id>https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</id>
        <link href="https://github.com/advisories/GHSA-wwx5-gpgr-vxr7"/>
        <updated>2025-01-28T20:15:50.000Z</updated>
        <content type="html"><![CDATA[<p>A critical vulnerability was discovered in the <code>ismp-grandpa</code> crate, that allowed a malicious prover easily convince the verifier of the finality of arbitrary headers.</p>
<h3 id="description">Description</h3>
<p>The vulnerability manifests as a verifer that only accepts incorrect signatures of Grandpa precommits and was introduced in this <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262">specific commit</a>. Perhaps due to unfamiliarity with core substrate APIs.  The <code>if</code> statement should have included a negation check, similar to the previous code, but this was omitted. Causing the verifier to <strong>only</strong> accept invalid signatures.</p>
<p>This vulnerability remained undetected even with <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160">integration tests</a>, as the prover was also <a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159">misconfigured</a> to initialize the Grandpa verifier with the incorrect authority <code>set_id</code>. This causes verification of honest precommit signatures to fail as the message is now malformed, but  the verifier indeed only accepts signatures or messages that fail the verification check.</p>
<p>But even more devastatingly, the verifier will also accept malicious GRANDPA signatures for any precommit message.</p>
<p>This vulnerability has been fixed in this <a href="https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea">commit</a> and a patch release has been published.</p>
<h3 id="impact">Impact</h3>
<p>This could be used to steal funds or compromise other kinds of cross-chain applications.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in the latest version of <code>ismp-granpda</code> <code>v15.0.1</code></p>
<h3 id="recommendations">Recommendations</h3>
<p>Users who rely on the compromised versions must upgrade immediately, as all vulnerable versions of the crate has been yanked.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/polytope-labs/hyperbridge/security/advisories/GHSA-wwx5-gpgr-vxr7">https://github.com/polytope-labs/hyperbridge/security/advisories/GHSA-wwx5-gpgr-vxr7</a></li>
<li><a href="https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea">https://github.com/polytope-labs/hyperbridge/pull/372/commits/f0e85db718f5165b06585a49b14a66f8ad643aea</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/04d5be207b082eb61d586d52e1685e2e060347e6#diff-4aedbca82d26bebc03f274e23fd5697c3346ffff54405c87af9018f3aef708b2R1-R160</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/5ca3351a19151f1a439c30d5cbdbfdc72a11f1a8#diff-3835cc24fb2011b3e8246036059acd8c2c2a9a869eedf7a210d18edb6543318dL262</a></li>
<li><a href="https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159">https://github.com/polytope-labs/ismp-substrate/pull/64/commits/b26894913b301061b07db61af841ca2586415f08#diff-493a6129d75fe31185e28695a4d2adc1582fe9df12462e380fe994f170fc1e70L159</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24800">https://nvd.nist.gov/vuln/detail/CVE-2025-24800</a></li>
<li><a href="https://github.com/advisories/GHSA-wwx5-gpgr-vxr7">https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwx5-gpgr-vxr7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-28T17:29:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-worktree-state] gix-worktree-state nonexclusive checkout sets executable files world-writable]]></title>
        <id>https://github.com/advisories/GHSA-fqmf-w4xh-33rh</id>
        <link href="https://github.com/advisories/GHSA-fqmf-w4xh-33rh"/>
        <updated>2025-01-21T21:13:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-worktree-state</code> specifies 0777 permissions when checking out executable files, intending that the umask will restrict them appropriately. But one of the strategies it uses to set permissions is not subject to the umask. This causes files in a repository to be world-writable in some situations.</p>
<h3 id="details">Details</h3>
<p>Git repositories track executable bits for regular files. In tree objects and the index, regular file modes are stored as 0644 if not executable, or 0755 if executable. But this is independent of how the permissions are set in the filesystem (where supported).</p>
<p><a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/function.rs#L8-L35"><code>gix_worktree_state::checkout</code></a> has two strategies for checking out a file and marking it executable on a Unix-like operating system, one of which is vulnerable:</p>
<ul>
<li>If the file is created by assuming it does not already exist, correct permissions are applied, because permissions specified when opening a file are subject to the umask.</li>
<li>If the file is considered possibly already to exist—even in a clean checkout if the application does not specify the option to treat the destination directory as empty—then permissions conferring unrestricted access to any user account on the system are wrongly applied, because permissions specified when calling chmod on an existing file are not subject to the umask.</li>
</ul>
<p>&nbsp;</p>
<p>Specifically, <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L56-L191"><code>checkout::entry::checkout</code></a> chooses the strategy for each file. The same strategy is usually chosen for each executable file, if no <a href="https://github.com/git/git/blob/a60673e9252b08d4eca90543b3729f4798b9aafd/Documentation/RelNotes/2.11.0.txt#L149-L154">process</a> (i.e. <a href="https://github.com/GitoxideLabs/gitoxide/discussions/996">long running</a>) smudge filter is in use. The strategy depends on the <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/mod.rs#L50-L53"><code>checkout::Options::destination_is_initially_empty</code></a> value, which is passed along to <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L253-L277"><code>checkout::entry::open_file</code></a>, whose return value includes a flag indicating whether permissions still need to be set:</p>
<ul>
<li><p>With <code>destination_is_initially_empty: true</code>, executable permissions are specified when opening the file, via <a href="https://doc.rust-lang.org/std/os/unix/fs/trait.OpenOptionsExt.html#tymethod.mode"><code>OpenOptionsEx::mode</code></a>, by its effect on the behavior of <a href="https://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.open"><code>OpenOptions::open</code></a>. A mode of 0777 is safe here, for the same reason the default mode of 0666 is safe. When creating a file, the applied mode is the specified mode with any bits unset from it that are set in the umask.</p>
<p> <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L265-L268">https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L265-L268</a></p>
<p>The <code>set_executable_after_creation</code> flag in the <code>open_file</code> return value is then <code>false</code>.</p>
</li>
<li><p>With <code>destination_is_initially_empty: false</code>, executable permissions are set in a separate step, via <a href="https://doc.rust-lang.org/beta/std/os/unix/fs/trait.PermissionsExt.html#tymethod.set_mode"><code>PermissionsExt::set_mode</code></a> and <a href="https://doc.rust-lang.org/beta/std/fs/fn.set_permissions.html"><code>set_permissions</code></a>. A mode of 0777 is not safe here, because the umask is not applied. The vulnerable code appears in <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L279-L299"><code>checkout::entry::finalize_entry</code></a>, which receives the <code>set_executable_after_creation</code> flag originally from <code>open_file</code>:</p>
<p><a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L288-L293">https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L288-L293</a></p>
<p>The file has unrestricted permissions.</p>
</li>
</ul>
<p><code>finalize_entry</code> is <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/chunk.rs#L229-L236">likewise called</a> from <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/chunk.rs#L157-L259"><code>checkout::chunk::process_delayed_filter_results</code></a>.</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>On a Unix-like system such as GNU/Linux or macOS, create a new project and define its dependencies. While the vulnerability is in <code>gix-worktree-state</code>, this example will use vulnerable code through the <code>gix</code> crate, which exposes it. Run:</p>
<pre><code class="language-sh">cargo new checkout-index
cd checkout-index
cargo add gix gix-object
</code></pre>
</li>
<li><p>In the <code>checkout-index</code> directory, edit <code>src/main.rs</code> so that its entire contents are:</p>
<pre><code class="language-rust">fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let repo = gix::discover("has-executable")?;
    let mut index = repo.open_index()?;
    gix::worktree::state::checkout(
        &amp;mut index,
        repo.work_dir().ok_or("need non-bare repo")?,
        gix_object::find::Never, // Can also use: repo.objects.clone()
        &amp;gix::progress::Discard,
        &amp;gix::progress::Discard,
        &amp;Default::default(),
        Default::default(),
    )?;
    Ok(())
}
</code></pre>
</li>
<li><p>Create the test repository that the vulnerable program will operate on. Still in the <code>checkout-index</code> directory, run:</p>
<pre><code class="language-sh">git init has-executable
touch has-executable/a has-executable/b
chmod +x has-executable/b
git -C has-executable add .
</code></pre>
<p>It is not necessary to commit the changes, only to stage them, since the test program will check  out the index.</p>
</li>
<li><p><em>Optionally</em>, run <code>rm has-executable/[ab]</code> to remove the staged files from disk.</p>
</li>
<li><p>Run the program by issuing <code>cargo run</code>. The program uses <code>gix-worktree-state</code> to check out the index. It should terminate successfully and not issue any errors.</p>
</li>
<li><p>Run <code>ls -l has-executable</code> to inspect the permissions of the checked out files. Observe that owner, group, and other all have read, write, and execute permissions on <code>b</code>.</p>
<pre><code class="language-text">-rw-r--r-- 1 ek ek 0 Jan  9 03:38 a
-rwxrwxrwx 1 ek ek 0 Jan  9 03:38 b
</code></pre>
<p>With affected versions of <code>gix-worktree-state</code>, the output shows <code>-rwxrwxrwx</code> for <code>b</code>, whether the files were removed in step 4 or not.</p>
</li>
<li><p>It was not necessary to set <code>destination_is_initially_empty</code> to <code>false</code> explicitly to trigger the bug, because that is its default value. If desired, modify the program to pass <code>true</code> and rerun the experiment to verify that <code>b</code> is no longer created with excessive permissions. The modified program would change the last <code>checkout</code> argument from <code>Default::default(),</code> to:</p>
<pre><code class="language-rust">        gix::worktree::state::checkout::Options {
            destination_is_initially_empty: true,
            ..Default::default()
        },
</code></pre>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Setting unlimited file permissions is a problem on systems where a user account exists on the system that should not have the ability to access and modify the files. That applies to multi-user systems, or when an account is used to run software with reduced abilities. (Some programs may also treat broad write permissions to mean less validation is required.)</p>
<p>This bug affects Unix-like systems but not Windows. The <code>gix clone</code> command is not believed to be affected, due to <a href="https://github.com/GitoxideLabs/gitoxide/blob/af704f57bb9480c47cdd393465264d586f1d4562/gitoxide-core/src/index/checkout.rs#L14-L172"><code>checkout_exclusive</code></a>'s <a href="https://github.com/GitoxideLabs/gitoxide/blob/af704f57bb9480c47cdd393465264d586f1d4562/gitoxide-core/src/index/checkout.rs#L61">use</a> of <code>destination_is_initially_empty: true</code>. Specialized uses in which repositories are known never to have any files marked executable are unaffected. Repositories that no untrusted users can access, due to not having the ability to traverse the directories to them or due to sufficiently restrictive ACLs, are likewise unaffected.</p>
<p>The default value of <code>destination_is_initially_empty</code> is <code>false</code>, so some applications may be affected even if they don't attempt checkouts in nonempty directories. The 0777 permissions are applied to files that are created earlier in the same checkout, as well as those that already existed, regardless of their prior permissions. On preexisting files, 0777 is set <em>even if <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/mod.rs#L54-L58"><code>overwrite_existing</code></a> is <code>false</code></em>, as that prevents the checkout from changing file contents but not permissions.</p>
<p>Files not tracked/staged as executable are not checked out with insecure permissions. Such a file that previously existed keeps its old permissions. However, this may include executable permissions that no longer match repository metadata, as well as undesired write permissions acquired from a previous vulnerable checkout. <code>set_mode(0o777)</code> clears other bits, so the bug is not exacerbated by the presence of setuid/setgid bits. In some applications, the vulnerable strategy may be used only for files rewritten by a <a href="https://git-scm.com/docs/gitattributes/2.40.0#_long_running_filter_process">long running</a> smudge filter or only in the presence of <a href="https://git-scm.com/docs/gitattributes/2.40.0#_delay">delays</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-fqmf-w4xh-33rh">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-fqmf-w4xh-33rh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22620">https://nvd.nist.gov/vuln/detail/CVE-2025-22620</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0001.html">https://rustsec.org/advisories/RUSTSEC-2025-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fqmf-w4xh-33rh">https://github.com/advisories/GHSA-fqmf-w4xh-33rh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqmf-w4xh-33rh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:13:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2025-01-21T18:31:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.
Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide-core] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2025-01-21T18:31:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.
Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sp1-stark]  SP1 has missing verifier checks and fiat-shamir observations]]></title>
        <id>https://github.com/advisories/GHSA-c873-wfhp-wx5m</id>
        <link href="https://github.com/advisories/GHSA-c873-wfhp-wx5m"/>
        <updated>2025-01-28T02:03:05.000Z</updated>
        <content type="html"><![CDATA[<p>In SP1’s STARK verifier, the prover provided <code>chip_ordering</code> is used to fetch the index of the chips that have preprocessed columns. Prior to v4.0.0, the validation that this <code>chip_ordering</code> correctly provides these indexes was missing. In v4.0.0, this was fixed by adding a check that the indexed chip’s name is equal to the name stored in the verifying key’s chip information. </p>
<p>In the recursive verifier, every verifier program is generated beforehand and later checked for correctness by requiring a merkle proof to the precomputed merkle root of valid verifier keys. Therefore, the recursive verifier and the on-chain verifier were not affected by this vulnerability. </p>
<p>This code was audited twice, once as a part of the audit by KALOS and once by Cantina for v1.0.0. This bug was found by the Succinct team during preparation of v4.0.0. Out of abundance of caution, we will be deprecating all previous versions and freeze the corresponding verifiers.</p>
<p>Furthermore, in the recursive verifier, the <code>is_complete</code> boolean flag is used to flag a proof of complete execution. Prior to v4.0.0, this flag was underconstrained in parts of our recursive verifier, such as the first layer of the recursion. In v4.0.0, this bug was fixed by adding appropriate calls to the <code>assert_complete</code> function, which constrains the correctness of the <code>is_complete</code> flag. This code was a part of the audit for v3.0.0. This bug affects the soundness of the Rust SDK for verifying compressed proofs, and the soundness of on-chain verifier for deferred proofs. </p>
<p>This issue was found by a combined effort from Aligned, LambdaClass and 3MI Labs, and was also independently found by Succinct during the preparation of v4.0.0. </p>
<p>Lastly, SP1’s STARK verifier relied on logic inside Plonky3, one SP1's core dependencies, to check that the polynomial evaluation claims are correct using a FRI-based polynomial commitment scheme. To batch this check, multiple polynomial evaluation claims are combined using a random linear combination. Prior to v4.0.0, the individual evaluation claims were not observed into the challenger before sampling the coefficient for the random linear combination. In v4.0.0, this was fixed by observing all the evaluation claims into the challenger correctly inside of Plonky3.</p>
<p>This bug was found by Lev Soukhanov and Onur Kilic, and we have worked closely with the Plonky3 team to mitigate this vulnerability. We will be deprecating all previous versions and freezing their verifiers to ensure that versions with the vulnerability will not be used in production.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/succinctlabs/sp1/security/advisories/GHSA-c873-wfhp-wx5m">https://github.com/succinctlabs/sp1/security/advisories/GHSA-c873-wfhp-wx5m</a></li>
<li><a href="https://github.com/advisories/GHSA-c873-wfhp-wx5m">https://github.com/advisories/GHSA-c873-wfhp-wx5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c873-wfhp-wx5m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-15T21:25:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vaultwarden] Vaultwarden authenticated reflected cross-site scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vprm-27pv-jp3w</id>
        <link href="https://github.com/advisories/GHSA-vprm-27pv-jp3w"/>
        <updated>2025-01-09T23:14:11.000Z</updated>
        <content type="html"><![CDATA[<p>Vaultwarden v1.32.5 was discovered to contain an authenticated reflected cross-site scripting (XSS) vulnerability via the component /api/core/mod.rs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55226">https://nvd.nist.gov/vuln/detail/CVE-2024-55226</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5</a></li>
<li><a href="https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5">https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5</a></li>
<li><a href="https://github.com/advisories/GHSA-vprm-27pv-jp3w">https://github.com/advisories/GHSA-vprm-27pv-jp3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vprm-27pv-jp3w</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-09T21:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vaultwarden] Vaultwarden vulnerable to user impersonation]]></title>
        <id>https://github.com/advisories/GHSA-x7m9-mv49-fv73</id>
        <link href="https://github.com/advisories/GHSA-x7m9-mv49-fv73"/>
        <updated>2025-01-10T18:38:02.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in the component src/api/identity.rs of Vaultwarden prior to v1.32.5 allows attackers to impersonate users, including Administrators, via a crafted authorization request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55225">https://nvd.nist.gov/vuln/detail/CVE-2024-55225</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5</a></li>
<li><a href="https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5">https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/commit/20d9e885bfcd7df7828d92c6e59ed5fe7b40a879">https://github.com/dani-garcia/vaultwarden/commit/20d9e885bfcd7df7828d92c6e59ed5fe7b40a879</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/commit/37c14c3c69b244ec50f5c62b4c9260171607c1d8">https://github.com/dani-garcia/vaultwarden/commit/37c14c3c69b244ec50f5c62b4c9260171607c1d8</a></li>
<li><a href="https://github.com/advisories/GHSA-x7m9-mv49-fv73">https://github.com/advisories/GHSA-x7m9-mv49-fv73</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x7m9-mv49-fv73</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-09T21:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vaultwarden] Vaultwarden HTML injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g5x8-v2ch-gj2g</id>
        <link href="https://github.com/advisories/GHSA-g5x8-v2ch-gj2g"/>
        <updated>2025-01-09T23:13:15.000Z</updated>
        <content type="html"><![CDATA[<p>An HTML injection vulnerability in Vaultwarden prior to v1.32.5 allows attackers to execute arbitrary code via injecting a crafted payload into the username field of an e-mail message.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55224">https://nvd.nist.gov/vuln/detail/CVE-2024-55224</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5</a></li>
<li><a href="https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5">https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5</a></li>
<li><a href="https://github.com/advisories/GHSA-g5x8-v2ch-gj2g">https://github.com/advisories/GHSA-g5x8-v2ch-gj2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5x8-v2ch-gj2g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-09T21:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto missing facility to signal rotation of a verified cryptographic identity]]></title>
        <id>https://github.com/advisories/GHSA-r5vf-wf4h-82gg</id>
        <link href="https://github.com/advisories/GHSA-r5vf-wf4h-82gg"/>
        <updated>2025-01-22T17:37:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of the matrix-sdk-crypto Rust crate before 0.8.0 lack a dedicated mechanism to notify that a user's cryptographic identity has changed from a verified to an unverified one, which could cause client applications relying on the SDK to overlook such changes.</p>
<h3 id="patches">Patches</h3>
<p>matrix-sdk-crypto 0.8.0 adds a new <code>VerificationLevel::VerificationViolation</code> enum variant which indicates that a previously verified identity has been changed.</p>
<h3 id="references">References</h3>
<ul>
<li>Patch: <a href="https://github.com/matrix-org/matrix-rust-sdk/pull/3795">https://github.com/matrix-org/matrix-rust-sdk/pull/3795</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-r5vf-wf4h-82gg">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-r5vf-wf4h-82gg</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/pull/3795">https://github.com/matrix-org/matrix-rust-sdk/pull/3795</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52813">https://nvd.nist.gov/vuln/detail/CVE-2024-52813</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0434.html">https://rustsec.org/advisories/RUSTSEC-2024-0434.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r5vf-wf4h-82gg">https://github.com/advisories/GHSA-r5vf-wf4h-82gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r5vf-wf4h-82gg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-07T15:25:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] fetch: Authorization headers not dropped when redirecting cross-origin]]></title>
        <id>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</id>
        <link href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6"/>
        <updated>2025-01-07T02:52:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Deno's<code>fetch()</code> redirect handling creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario. The same is generally applied to <code>Cookie</code> and <code>Proxy-Authorization</code> headers, and is done for not only host changes, but also protocol/port changes. Generally referred to as "origin".</p>
<p>The <a href="https://docs.deno.com/runtime/reference/web_platform_apis/#:~:text=Deno%20does%20not%20follow%20the,leaking%20authenticated%20data%20cross%20origin.">documentation</a> states: </p>
<blockquote>
<p>Deno does not follow the same-origin policy, because the Deno user agent currently does not have the concept of origins, and it does not have a cookie jar. This means Deno <strong>does not need</strong> to protect against leaking authenticated data cross origin </p>
</blockquote>
<h3 id="reproduction">Reproduction</h3>
<pre><code class="language-ts">const ac = new AbortController()

const server1 = Deno.serve({ port: 3001, signal: ac.signal }, (req) =&gt; {
  return new Response(null, {
    status: 302,
    headers: {
      'location': 'http://localhost:3002/redirected'
    },
  })
})

const server2 = Deno.serve({ port: 3002, signal: ac.signal }, (req) =&gt; {
  const body = JSON.stringify({
    url: req.url,
    hasAuth: req.headers.has('authorization'),
  })
  return new Response(body, {
    status: 200,
    headers: {'content-type': 'application/json'},
  })
})

async function main() {
  const response = await fetch("http://localhost:3001/", {
    headers: {authorization: 'Bearer foo'}
  })
  const body = await response.json()
  
  ac.abort()
  
  if (body.hasAuth) {
    console.error('ERROR: Authorization header should not be present after cross-origin redirect')
  } else {
    console.log('SUCCESS: Authorization header is not present after cross-origin redirect')
  }
}

setTimeout(main, 500)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-21620">https://nvd.nist.gov/vuln/detail/CVE-2025-21620</a></li>
<li><a href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/advisories/GHSA-f27p-cmv8-xhm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-06T22:27:09.000Z</published>
    </entry>
</feed>