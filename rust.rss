<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2025-05-06T07:01:25.814Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[openvm] OpenVM allows the byte decomposition of pc in AUIPC chip to overflow]]></title>
        <id>https://github.com/advisories/GHSA-jf2r-x3j4-23m7</id>
        <link href="https://github.com/advisories/GHSA-jf2r-x3j4-23m7"/>
        <updated>2025-05-05T19:57:10.000Z</updated>
        <content type="html"><![CDATA[<p>The fix to <a href="https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21">https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21</a> has a typo that still results in the highest limb of <code>pc</code> being range checked to 8-bits instead of 6-bits.</p>
<p>In the AIR, we do <a href="https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135">https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135</a></p>
<pre><code>        for (i, limb) in pc_limbs.iter().skip(1).enumerate() {
            if i == pc_limbs.len() - 1 {
</code></pre>
<p>It should be</p>
<pre><code>        for (i, limb) in pc_limbs.iter().enumerate().skip(1) {
</code></pre>
<p>Right now the if statement is never triggered because the enumeration gives <code>i=0,1,2</code> when we instead want <code>i=1,2,3</code>. What this means is that <code>pc_limbs[3]</code> is range checked to 8-bits instead of 6-bits.</p>
<p>This leads to a vulnerability where the <code>pc_limbs</code> decomposition differs from the true <code>pc</code>, which means a malicious prover can make the destination register take a different value than the AUIPC instruction dictates, by making the decomposition overflow the BabyBear field.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openvm-org/openvm/security/advisories/GHSA-jf2r-x3j4-23m7">https://github.com/openvm-org/openvm/security/advisories/GHSA-jf2r-x3j4-23m7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46723">https://nvd.nist.gov/vuln/detail/CVE-2025-46723</a></li>
<li><a href="https://github.com/openvm-org/openvm/commit/68da4b50c033da5603517064aa0a08e1bbf70a01">https://github.com/openvm-org/openvm/commit/68da4b50c033da5603517064aa0a08e1bbf70a01</a></li>
<li><a href="https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21">https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21</a></li>
<li><a href="https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135">https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135</a></li>
<li><a href="https://github.com/openvm-org/openvm/releases/tag/v1.1.0">https://github.com/openvm-org/openvm/releases/tag/v1.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-jf2r-x3j4-23m7">https://github.com/advisories/GHSA-jf2r-x3j4-23m7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jf2r-x3j4-23m7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-05T19:57:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[obfstr] obfstr Type Confusion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v2p5-q653-9j99</id>
        <link href="https://github.com/advisories/GHSA-v2p5-q653-9j99"/>
        <updated>2025-05-05T17:25:10.000Z</updated>
        <content type="html"><![CDATA[<p>In the obfstr crate before 0.4.4 for Rust, the obfstr! argument type is not restricted to string slices, leading to invalid UTF-8 conversion that produces an invalid value.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-58253">https://nvd.nist.gov/vuln/detail/CVE-2024-58253</a></li>
<li><a href="https://github.com/CasualX/obfstr/issues/60">https://github.com/CasualX/obfstr/issues/60</a></li>
<li><a href="https://github.com/CasualX/obfstr/compare/v0.4.3...v0.4.4">https://github.com/CasualX/obfstr/compare/v0.4.3...v0.4.4</a></li>
<li><a href="https://github.com/advisories/GHSA-v2p5-q653-9j99">https://github.com/advisories/GHSA-v2p5-q653-9j99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v2p5-q653-9j99</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-02T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime may have data leakage between instances in the pooling allocator]]></title>
        <id>https://github.com/advisories/GHSA-wh6w-3828-g9qf</id>
        <link href="https://github.com/advisories/GHSA-wh6w-3828-g9qf"/>
        <updated>2025-05-02T12:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of it's pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. The pooling instance allocator in Wasmtime works by preallocating virtual memory for a fixed number of instances to reside in and then new instantiations pick a slot to use. Most conventional modules additionally have an initial copy-on-write "heap image" which is mapped in Wasmtime into the linear memory slot. When a heap slot is deallocated Wasmtime resets all of its contents back to the initial state but it does not unmap the image in case the next instance is an instantiation of the same module.</p>
<p>The bug in Wasmtime occurs when a slot in the pooling allocator previously was used for a module with a heap image, meaning that its current state of memory contains the initial heap contents of that module. If the next instantiation within that slot does not itself contain a heap image then Wasmtime would leave the old heap image in place erroneously and continue with instantiation. This means that instantiations of modules without a heap image can see the initial heap image of the prior instantiation within that slot.</p>
<p>Heap images in Wasmtime are created by precomputing WebAssembly <code>data</code> segments into one large mapping to be placed into linear memory at a particular offset. Most modules produced by toolchains today will have a heap image and an initialization snapshot. Creating a module without a heap image would require a hand-crafted <code>*.wat</code> file or a specially crafted source program. This consequence means that this bug is highly unlikely to be accidentally triggered and would otherwise require an intentional trigger with a hand-crafted module.</p>
<p>One important part of this vulnerability is Wasmtime is highly likely to segfault when the slot is reused again with a module that itself has an initialization image. For example if module A has a heap initialization image and module B does not have a heap initialization image, then the following sequence of events could happen if they all are instantiated into the same instance slot:</p>
<ul>
<li>Module A is instantiated, and then deallocated. This leaves A's heap image in place, reset to its initial contents.</li>
<li>Module B is instantiated and erroneously can see the initial heap contents of A. Module B is then deallocated and the entire heap is unmapped and reset back to zero.</li>
<li>Module A is instantiated again, but the state tracking the slot did not account for module B so it thinks the module image is still mapped and proceeds with instantiation. Any action on A's part to access linear memory will then trap and if the host accesses A's memory it will segfault because the data that's supposed to be mapped is all unmapped.</li>
</ul>
<p>Adding this all together this means that in practice modules must be deliberately crafted to not have an initial heap image to view the contents of a prior image. If this module is instantiated though then when the slot is reused the next, likely image-using, module will believe its memory is mapped when it isn't, causing the host to segfault on unmapped memory it believed was mapped. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Trigging this bug requires the pooling allocator to be configured and for copy-on-write heap images to also be enabled. Pooling allocation is not enabled by default but copy-on-write heap images are. Mitigations for this bug include:</p>
<ul>
<li>Disabling the pooling allocator - note that pooling allocation is not enabled by default in Wasmtime</li>
<li>Disabling the <code>memory-init-cow</code> feature or with <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a> - configuration required to enable or disable copy-on-write (this is enabled by default).</li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">Patch for <code>release-2.0.0</code> branch</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">Patch for <code>main</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39393">https://nvd.nist.gov/vuln/detail/CVE-2022-39393</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0075.html">https://rustsec.org/advisories/RUSTSEC-2022-0075.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0098.html">https://rustsec.org/advisories/RUSTSEC-2022-0098.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wh6w-3828-g9qf">https://github.com/advisories/GHSA-wh6w-3828-g9qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh6w-3828-g9qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T21:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime may have data leakage between instances in the pooling allocator]]></title>
        <id>https://github.com/advisories/GHSA-wh6w-3828-g9qf</id>
        <link href="https://github.com/advisories/GHSA-wh6w-3828-g9qf"/>
        <updated>2025-05-02T12:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of it's pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. The pooling instance allocator in Wasmtime works by preallocating virtual memory for a fixed number of instances to reside in and then new instantiations pick a slot to use. Most conventional modules additionally have an initial copy-on-write "heap image" which is mapped in Wasmtime into the linear memory slot. When a heap slot is deallocated Wasmtime resets all of its contents back to the initial state but it does not unmap the image in case the next instance is an instantiation of the same module.</p>
<p>The bug in Wasmtime occurs when a slot in the pooling allocator previously was used for a module with a heap image, meaning that its current state of memory contains the initial heap contents of that module. If the next instantiation within that slot does not itself contain a heap image then Wasmtime would leave the old heap image in place erroneously and continue with instantiation. This means that instantiations of modules without a heap image can see the initial heap image of the prior instantiation within that slot.</p>
<p>Heap images in Wasmtime are created by precomputing WebAssembly <code>data</code> segments into one large mapping to be placed into linear memory at a particular offset. Most modules produced by toolchains today will have a heap image and an initialization snapshot. Creating a module without a heap image would require a hand-crafted <code>*.wat</code> file or a specially crafted source program. This consequence means that this bug is highly unlikely to be accidentally triggered and would otherwise require an intentional trigger with a hand-crafted module.</p>
<p>One important part of this vulnerability is Wasmtime is highly likely to segfault when the slot is reused again with a module that itself has an initialization image. For example if module A has a heap initialization image and module B does not have a heap initialization image, then the following sequence of events could happen if they all are instantiated into the same instance slot:</p>
<ul>
<li>Module A is instantiated, and then deallocated. This leaves A's heap image in place, reset to its initial contents.</li>
<li>Module B is instantiated and erroneously can see the initial heap contents of A. Module B is then deallocated and the entire heap is unmapped and reset back to zero.</li>
<li>Module A is instantiated again, but the state tracking the slot did not account for module B so it thinks the module image is still mapped and proceeds with instantiation. Any action on A's part to access linear memory will then trap and if the host accesses A's memory it will segfault because the data that's supposed to be mapped is all unmapped.</li>
</ul>
<p>Adding this all together this means that in practice modules must be deliberately crafted to not have an initial heap image to view the contents of a prior image. If this module is instantiated though then when the slot is reused the next, likely image-using, module will believe its memory is mapped when it isn't, causing the host to segfault on unmapped memory it believed was mapped. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Trigging this bug requires the pooling allocator to be configured and for copy-on-write heap images to also be enabled. Pooling allocation is not enabled by default but copy-on-write heap images are. Mitigations for this bug include:</p>
<ul>
<li>Disabling the pooling allocator - note that pooling allocation is not enabled by default in Wasmtime</li>
<li>Disabling the <code>memory-init-cow</code> feature or with <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a> - configuration required to enable or disable copy-on-write (this is enabled by default).</li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">Patch for <code>release-2.0.0</code> branch</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">Patch for <code>main</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39393">https://nvd.nist.gov/vuln/detail/CVE-2022-39393</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0075.html">https://rustsec.org/advisories/RUSTSEC-2022-0075.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0098.html">https://rustsec.org/advisories/RUSTSEC-2022-0098.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wh6w-3828-g9qf">https://github.com/advisories/GHSA-wh6w-3828-g9qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh6w-3828-g9qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T21:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mp3-metadata] Panic in mp3-metadata due to the lack of bounds checking]]></title>
        <id>https://github.com/advisories/GHSA-927q-g9w9-pm54</id>
        <link href="https://github.com/advisories/GHSA-927q-g9w9-pm54"/>
        <updated>2025-04-30T17:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>get_id3()</code> methods used by <code>mp3_metadata::read_from_slice()</code> does not perform adequate bounds checking when recreating the tag due to the use of desynchronization.</p>
<p>Fixed in <a href="https://github.com/GuillaumeGomez/mp3-metadata/pull/37">Fix index error</a>, released as part of 0.4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GuillaumeGomez/mp3-metadata/issues/36">https://github.com/GuillaumeGomez/mp3-metadata/issues/36</a></li>
<li><a href="https://github.com/GuillaumeGomez/mp3-metadata/pull/37">https://github.com/GuillaumeGomez/mp3-metadata/pull/37</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0027.html">https://rustsec.org/advisories/RUSTSEC-2025-0027.html</a></li>
<li><a href="https://github.com/advisories/GHSA-927q-g9w9-pm54">https://github.com/advisories/GHSA-927q-g9w9-pm54</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-927q-g9w9-pm54</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:41:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pleezer] Pleezer resource exhaustion through uncollected hook script processes]]></title>
        <id>https://github.com/advisories/GHSA-472w-7w45-g3w5</id>
        <link href="https://github.com/advisories/GHSA-472w-7w45-g3w5"/>
        <updated>2025-04-15T21:41:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Hook scripts in pleezer can be triggered by various events like track changes and playback state changes. In affected versions, these scripts were spawned without proper process cleanup, leaving zombie processes in the system's process table.</p>
<p>Even during normal usage, every track change and playback event would leave behind zombie processes. This leads to inevitable resource exhaustion over time as the system's process table fills up, eventually preventing new processes from being created. The issue is exacerbated if events occur rapidly, whether through normal use (e.g., skipping through a playlist) or potential manipulation of the Deezer Connect protocol traffic.</p>
<p>This vulnerability affects all users who have configured hook scripts using the <code>--hook</code> option.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been fixed in version 0.16.0. Users should upgrade to this version, which properly manages child processes using asynchronous process handling and cleanup.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users who cannot upgrade immediately can:</p>
<ul>
<li>Disable hook scripts by removing the <code>--hook</code> option</li>
<li>Ensure hook scripts handle their own child process cleanup</li>
<li>Regularly restart pleezer to clear accumulated zombie processes</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li>Initial report: <a href="https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199">https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199</a></li>
<li>Fix commit: 436a5f1e4c08989b58dbba2b0ffa423458016c2d</li>
<li>Fixed release: <a href="https://github.com/roderickvd/pleezer/releases/tag/v0.16.0">https://github.com/roderickvd/pleezer/releases/tag/v0.16.0</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/roderickvd/pleezer/security/advisories/GHSA-472w-7w45-g3w5">https://github.com/roderickvd/pleezer/security/advisories/GHSA-472w-7w45-g3w5</a></li>
<li><a href="https://github.com/roderickvd/pleezer/commit/436a5f1e4c08989b58dbba2b0ffa423458016c2d">https://github.com/roderickvd/pleezer/commit/436a5f1e4c08989b58dbba2b0ffa423458016c2d</a></li>
<li><a href="https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199">https://github.com/roderickvd/pleezer/discussions/83#discussioncomment-12818199</a></li>
<li><a href="https://github.com/roderickvd/pleezer/releases/tag/v0.16.0">https://github.com/roderickvd/pleezer/releases/tag/v0.16.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32439">https://nvd.nist.gov/vuln/detail/CVE-2025-32439</a></li>
<li><a href="https://github.com/advisories/GHSA-472w-7w45-g3w5">https://github.com/advisories/GHSA-472w-7w45-g3w5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-472w-7w45-g3w5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-14T17:49:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB CPU exhaustion via custom functions result in total DoS]]></title>
        <id>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</id>
        <link href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf"/>
        <updated>2025-04-11T14:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB allows authenticated users with <code>OWNER</code> or <code>EDITOR</code> permissions at the root, database or namespace levels to define their own database functions using the <code>DEFINE FUNCTION</code> statement</p>
<p>A custom database function comprises a name together with a function body. In the function body, the user programs the functionality of the function in terms of SurrealQL. The language includes a <code>FOR</code> keyword, used to implement for-loops.</p>
<p>Whilst the parser and interpreter constrain the number of iterations for a single for-loop, nesting several for-loops with a large number of iterations is possible. Thus, an attacker could define a function that comprises several nested for-loops with an iteration count of 1.000.000 each. </p>
<p>Executing the function will consume all the CPU time of the server, timeouts configured will not break the CPU consumption, and the function execution monopolizes all CPU time of the SurrealDB server, effectively preventing the server from executing functions, queries, commands of other users, or allowing further connections being established to the server.</p>
<p>Terminating the stuck server requires manual intervention which forces a quit on the server process, as the server application is not responsive any longer.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is high, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service vulnerability resulting in a stuck SurrealDB server requiring manual restart.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced that adds a check in the <code>ForEachStatement</code> that checks if the context has been cancelled or timed out for every iteration.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, consider setting the <code>--allow-functions</code> and/or <code>--deny-functions</code> options or corresponding <code>SURREAL_CAPS_ALLOW_FUNC</code> and/or <code>SURREAL_CAPS_DENY_FUNC</code> environment variables, documented within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">capabilities</a>, to either block all custom functions, or only allow trusted functions to execute. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/function">SurrealQL Documentation - DEFINE FUNCTION Statement</a>
<a href="https://surrealdb.com/docs/surrealql/statements/for">SurrealQL Documentation - FOR Statement</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env#command-environment-variables">SurrealDB Documentation - Environment variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/advisories/GHSA-pxw4-94j3-v9pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:09:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB CPU exhaustion via custom functions result in total DoS]]></title>
        <id>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</id>
        <link href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf"/>
        <updated>2025-04-11T14:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB allows authenticated users with <code>OWNER</code> or <code>EDITOR</code> permissions at the root, database or namespace levels to define their own database functions using the <code>DEFINE FUNCTION</code> statement</p>
<p>A custom database function comprises a name together with a function body. In the function body, the user programs the functionality of the function in terms of SurrealQL. The language includes a <code>FOR</code> keyword, used to implement for-loops.</p>
<p>Whilst the parser and interpreter constrain the number of iterations for a single for-loop, nesting several for-loops with a large number of iterations is possible. Thus, an attacker could define a function that comprises several nested for-loops with an iteration count of 1.000.000 each. </p>
<p>Executing the function will consume all the CPU time of the server, timeouts configured will not break the CPU consumption, and the function execution monopolizes all CPU time of the SurrealDB server, effectively preventing the server from executing functions, queries, commands of other users, or allowing further connections being established to the server.</p>
<p>Terminating the stuck server requires manual intervention which forces a quit on the server process, as the server application is not responsive any longer.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is high, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service vulnerability resulting in a stuck SurrealDB server requiring manual restart.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced that adds a check in the <code>ForEachStatement</code> that checks if the context has been cancelled or timed out for every iteration.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, consider setting the <code>--allow-functions</code> and/or <code>--deny-functions</code> options or corresponding <code>SURREAL_CAPS_ALLOW_FUNC</code> and/or <code>SURREAL_CAPS_DENY_FUNC</code> environment variables, documented within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">capabilities</a>, to either block all custom functions, or only allow trusted functions to execute. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/function">SurrealQL Documentation - DEFINE FUNCTION Statement</a>
<a href="https://surrealdb.com/docs/surrealql/statements/for">SurrealQL Documentation - FOR Statement</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env#command-environment-variables">SurrealDB Documentation - Environment variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/advisories/GHSA-pxw4-94j3-v9pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:09:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB CPU exhaustion via custom functions result in total DoS]]></title>
        <id>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</id>
        <link href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf"/>
        <updated>2025-04-11T14:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB allows authenticated users with <code>OWNER</code> or <code>EDITOR</code> permissions at the root, database or namespace levels to define their own database functions using the <code>DEFINE FUNCTION</code> statement</p>
<p>A custom database function comprises a name together with a function body. In the function body, the user programs the functionality of the function in terms of SurrealQL. The language includes a <code>FOR</code> keyword, used to implement for-loops.</p>
<p>Whilst the parser and interpreter constrain the number of iterations for a single for-loop, nesting several for-loops with a large number of iterations is possible. Thus, an attacker could define a function that comprises several nested for-loops with an iteration count of 1.000.000 each. </p>
<p>Executing the function will consume all the CPU time of the server, timeouts configured will not break the CPU consumption, and the function execution monopolizes all CPU time of the SurrealDB server, effectively preventing the server from executing functions, queries, commands of other users, or allowing further connections being established to the server.</p>
<p>Terminating the stuck server requires manual intervention which forces a quit on the server process, as the server application is not responsive any longer.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is high, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service vulnerability resulting in a stuck SurrealDB server requiring manual restart.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced that adds a check in the <code>ForEachStatement</code> that checks if the context has been cancelled or timed out for every iteration.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, consider setting the <code>--allow-functions</code> and/or <code>--deny-functions</code> options or corresponding <code>SURREAL_CAPS_ALLOW_FUNC</code> and/or <code>SURREAL_CAPS_DENY_FUNC</code> environment variables, documented within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">capabilities</a>, to either block all custom functions, or only allow trusted functions to execute. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/function">SurrealQL Documentation - DEFINE FUNCTION Statement</a>
<a href="https://surrealdb.com/docs/surrealql/statements/for">SurrealQL Documentation - FOR Statement</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env#command-environment-variables">SurrealDB Documentation - Environment variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/advisories/GHSA-pxw4-94j3-v9pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:09:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB no JavaScript script function default timeout could facilitate DoS]]></title>
        <id>https://github.com/advisories/GHSA-3824-qmfq-2qv7</id>
        <link href="https://github.com/advisories/GHSA-3824-qmfq-2qv7"/>
        <updated>2025-04-11T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>Through enabling the scripting capability. SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript.</p>
<p>These functions are bounded for memory and stack size, but not in time. An attacker could launch a number of long running functions that could potentially facilitate a Denial Of Service attack.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can use the scripting capabilities of SurrealDB to run a series of long running functions to facilitate a Denial Of Service attack.</p>
<h3 id="patches">Patches</h3>
<p>A default timeout for the scripting functions has been implemented with a configurable <code>SURREAL_SCRIPTING_MAX_TIME_LIMIT</code> environment variable</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For users that cannot upgrade. Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">5597</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-3824-qmfq-2qv7">https://github.com/advisories/GHSA-3824-qmfq-2qv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3824-qmfq-2qv7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-11T14:08:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB no JavaScript script function default timeout could facilitate DoS]]></title>
        <id>https://github.com/advisories/GHSA-3824-qmfq-2qv7</id>
        <link href="https://github.com/advisories/GHSA-3824-qmfq-2qv7"/>
        <updated>2025-04-11T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>Through enabling the scripting capability. SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript.</p>
<p>These functions are bounded for memory and stack size, but not in time. An attacker could launch a number of long running functions that could potentially facilitate a Denial Of Service attack.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can use the scripting capabilities of SurrealDB to run a series of long running functions to facilitate a Denial Of Service attack.</p>
<h3 id="patches">Patches</h3>
<p>A default timeout for the scripting functions has been implemented with a configurable <code>SURREAL_SCRIPTING_MAX_TIME_LIMIT</code> environment variable</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For users that cannot upgrade. Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">5597</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-3824-qmfq-2qv7">https://github.com/advisories/GHSA-3824-qmfq-2qv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3824-qmfq-2qv7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-11T14:08:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB no JavaScript script function default timeout could facilitate DoS]]></title>
        <id>https://github.com/advisories/GHSA-3824-qmfq-2qv7</id>
        <link href="https://github.com/advisories/GHSA-3824-qmfq-2qv7"/>
        <updated>2025-04-11T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>Through enabling the scripting capability. SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript.</p>
<p>These functions are bounded for memory and stack size, but not in time. An attacker could launch a number of long running functions that could potentially facilitate a Denial Of Service attack.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can use the scripting capabilities of SurrealDB to run a series of long running functions to facilitate a Denial Of Service attack.</p>
<h3 id="patches">Patches</h3>
<p>A default timeout for the scripting functions has been implemented with a configurable <code>SURREAL_SCRIPTING_MAX_TIME_LIMIT</code> environment variable</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For users that cannot upgrade. Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">5597</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-3824-qmfq-2qv7">https://github.com/advisories/GHSA-3824-qmfq-2qv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3824-qmfq-2qv7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-11T14:08:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB memory exhaustion via string::replace using regex ]]></title>
        <id>https://github.com/advisories/GHSA-3633-g6mg-p6qq</id>
        <link href="https://github.com/advisories/GHSA-3633-g6mg-p6qq"/>
        <updated>2025-04-11T14:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated user can craft a query using the <code>string::replace</code> function that uses a Regex to perform a string replacement. As there is a failure to restrict the resulting string length, this enables an attacker to send a <code>string::replace</code> function to the SurrealDB server exhausting all the memory of the server due to string allocations. This eventually results in a Denial-of-Service situation for the SurrealDB server.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53. Using CVSSv4 definitions, the severity is High. </p>
<h3 id="impact">Impact</h3>
<p>An authenticated user can crash the SurrealDB instance through memory exhaustion</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that enforces a limit on string length  <code>SURREAL_GENERATION_ALLOCATION_LIMIT</code></p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>string::replace</code> function in the affected versions of SurrealDB using the <code>--deny-functions</code> flag described within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">Capabilities</a> or the equivalent <code>SURREAL_CAPS_DENY_FUNC</code> environment variable.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/functions/database/string#stringreplace">SurrealQL Documentation - DB Functions (string::replace)</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5619">#5619 </a>
<a href="https://github.com/surrealdb/surrealdb/pull/5638">#5638 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5619">https://github.com/surrealdb/surrealdb/pull/5619</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5638">https://github.com/surrealdb/surrealdb/pull/5638</a></li>
<li><a href="https://github.com/advisories/GHSA-3633-g6mg-p6qq">https://github.com/advisories/GHSA-3633-g6mg-p6qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3633-g6mg-p6qq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:08:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB memory exhaustion via string::replace using regex ]]></title>
        <id>https://github.com/advisories/GHSA-3633-g6mg-p6qq</id>
        <link href="https://github.com/advisories/GHSA-3633-g6mg-p6qq"/>
        <updated>2025-04-11T14:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated user can craft a query using the <code>string::replace</code> function that uses a Regex to perform a string replacement. As there is a failure to restrict the resulting string length, this enables an attacker to send a <code>string::replace</code> function to the SurrealDB server exhausting all the memory of the server due to string allocations. This eventually results in a Denial-of-Service situation for the SurrealDB server.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53. Using CVSSv4 definitions, the severity is High. </p>
<h3 id="impact">Impact</h3>
<p>An authenticated user can crash the SurrealDB instance through memory exhaustion</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that enforces a limit on string length  <code>SURREAL_GENERATION_ALLOCATION_LIMIT</code></p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>string::replace</code> function in the affected versions of SurrealDB using the <code>--deny-functions</code> flag described within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">Capabilities</a> or the equivalent <code>SURREAL_CAPS_DENY_FUNC</code> environment variable.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/functions/database/string#stringreplace">SurrealQL Documentation - DB Functions (string::replace)</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5619">#5619 </a>
<a href="https://github.com/surrealdb/surrealdb/pull/5638">#5638 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5619">https://github.com/surrealdb/surrealdb/pull/5619</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5638">https://github.com/surrealdb/surrealdb/pull/5638</a></li>
<li><a href="https://github.com/advisories/GHSA-3633-g6mg-p6qq">https://github.com/advisories/GHSA-3633-g6mg-p6qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3633-g6mg-p6qq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:08:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB memory exhaustion via string::replace using regex ]]></title>
        <id>https://github.com/advisories/GHSA-3633-g6mg-p6qq</id>
        <link href="https://github.com/advisories/GHSA-3633-g6mg-p6qq"/>
        <updated>2025-04-11T14:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated user can craft a query using the <code>string::replace</code> function that uses a Regex to perform a string replacement. As there is a failure to restrict the resulting string length, this enables an attacker to send a <code>string::replace</code> function to the SurrealDB server exhausting all the memory of the server due to string allocations. This eventually results in a Denial-of-Service situation for the SurrealDB server.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53. Using CVSSv4 definitions, the severity is High. </p>
<h3 id="impact">Impact</h3>
<p>An authenticated user can crash the SurrealDB instance through memory exhaustion</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that enforces a limit on string length  <code>SURREAL_GENERATION_ALLOCATION_LIMIT</code></p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>string::replace</code> function in the affected versions of SurrealDB using the <code>--deny-functions</code> flag described within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">Capabilities</a> or the equivalent <code>SURREAL_CAPS_DENY_FUNC</code> environment variable.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/functions/database/string#stringreplace">SurrealQL Documentation - DB Functions (string::replace)</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5619">#5619 </a>
<a href="https://github.com/surrealdb/surrealdb/pull/5638">#5638 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5619">https://github.com/surrealdb/surrealdb/pull/5619</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5638">https://github.com/surrealdb/surrealdb/pull/5638</a></li>
<li><a href="https://github.com/advisories/GHSA-3633-g6mg-p6qq">https://github.com/advisories/GHSA-3633-g6mg-p6qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3633-g6mg-p6qq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:08:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB server-takeover via SurrealQL injection on backup import]]></title>
        <id>https://github.com/advisories/GHSA-ccj3-5p93-8p42</id>
        <link href="https://github.com/advisories/GHSA-ccj3-5p93-8p42"/>
        <updated>2025-04-11T14:07:36.000Z</updated>
        <content type="html"><![CDATA[<p>The SurrealDB command-line tool allows exporting databases through the <code>export</code> command. It was discovered that table or field names are not properly sanitized in exports, leading to a SurrealQL injection when the backup is reimported.</p>
<p>For the injection to occur, an authenticated System User with <code>OWNER</code> or <code>EDITOR</code> roles needs to create tables or fields with malicious names containing SurrealQL, subsequently exported using the <code>export</code> operation</p>
<p>The attacker could achieve a privilege escalation and root level access to the SurrealDB instance if a higher privileged user subsequently performs the <code>import</code> operation. </p>
<p>Furthermore, applications using SurrealDB that allow its users to define custom fields or tables are at risk of a universal second order SurrealQL injection, even if query parameters are properly sanitized. </p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Critical, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>This attack can be used to perform privilege escalation and complete takeover (root access) of the SurrealDB instance, as well as being able to perform SurrealQL injection attacks against co-tenanted applications where SurrealDB is used as a shared backend for multiple applications.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that addresses the issue by fixing the bugs in the exporter which failed to escape some characters properly.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, users that are looking to perform <code>import</code> operations must manually inspect the exported data for injected statements, prior to importing. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/cli/export">SurrealDB Documentation - Export</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/import">SurrealDB Documentation - Import</a>
<a href="https://surrealdb.com/docs/surrealdb/security/authentication">SurrealDB Documentation - Authentication</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42</a></li>
<li><a href="https://github.com/advisories/GHSA-ccj3-5p93-8p42">https://github.com/advisories/GHSA-ccj3-5p93-8p42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccj3-5p93-8p42</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-11T14:07:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB server-takeover via SurrealQL injection on backup import]]></title>
        <id>https://github.com/advisories/GHSA-ccj3-5p93-8p42</id>
        <link href="https://github.com/advisories/GHSA-ccj3-5p93-8p42"/>
        <updated>2025-04-11T14:07:36.000Z</updated>
        <content type="html"><![CDATA[<p>The SurrealDB command-line tool allows exporting databases through the <code>export</code> command. It was discovered that table or field names are not properly sanitized in exports, leading to a SurrealQL injection when the backup is reimported.</p>
<p>For the injection to occur, an authenticated System User with <code>OWNER</code> or <code>EDITOR</code> roles needs to create tables or fields with malicious names containing SurrealQL, subsequently exported using the <code>export</code> operation</p>
<p>The attacker could achieve a privilege escalation and root level access to the SurrealDB instance if a higher privileged user subsequently performs the <code>import</code> operation. </p>
<p>Furthermore, applications using SurrealDB that allow its users to define custom fields or tables are at risk of a universal second order SurrealQL injection, even if query parameters are properly sanitized. </p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Critical, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>This attack can be used to perform privilege escalation and complete takeover (root access) of the SurrealDB instance, as well as being able to perform SurrealQL injection attacks against co-tenanted applications where SurrealDB is used as a shared backend for multiple applications.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that addresses the issue by fixing the bugs in the exporter which failed to escape some characters properly.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, users that are looking to perform <code>import</code> operations must manually inspect the exported data for injected statements, prior to importing. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/cli/export">SurrealDB Documentation - Export</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/import">SurrealDB Documentation - Import</a>
<a href="https://surrealdb.com/docs/surrealdb/security/authentication">SurrealDB Documentation - Authentication</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42</a></li>
<li><a href="https://github.com/advisories/GHSA-ccj3-5p93-8p42">https://github.com/advisories/GHSA-ccj3-5p93-8p42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccj3-5p93-8p42</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-11T14:07:34.000Z</published>
    </entry>
</feed>