<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-12-18T03:10:06.563Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB has Silent Failure to Overwrite Table Definition of Relation Type]]></title>
        <id>https://github.com/advisories/GHSA-27vq-hv74-7cqp</id>
        <link href="https://github.com/advisories/GHSA-27vq-hv74-7cqp"/>
        <updated>2024-12-16T17:38:55.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>OVERWRITE</code> clause of the <code>DEFINE TABLE</code> statement would fail to overwrite data for tables that were defined with <code>TYPE RELATION</code>. Since table definitions include the <code>PERMISSIONS</code> clause, this failure would result in permissions not being overwritten as a result, which may potentially lead users to believe they have changed the table permissions when they have not.</p>
<h3 id="impact">Impact</h3>
<p>If a user attempted to update table permissions of a table defined with <code>TYPE RELATION</code> using <code>DEFINE TABLE ... OVERWRITE</code>, permissions for the table would not be changed. This may allow a client that is authorized to run queries in a SurrealDB server to access certain data in that specific table that they were not intended to be able to access after the specified change in permissions.</p>
<h3 id="patches">Patches</h3>
<p>The <code>DEFINE TABLE</code> statement has been updated to appropriately overwrite data for tables defined with <code>TYPE RELATION</code>.</p>
<ul>
<li>Version 2.1.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users of tables with <code>TYPE RELATION</code> that may have been modified using the <code>OVERWRITE</code> clause in order to update permissions are advised to verify that the intended permissions are in place using the <code>INFO FOR DB</code> statement. Affected users who are unable to update and require updating permissions in a table with <code>TYPE RELATION</code> will be required to remove the table and define it from scratch with the intended permissions. Data can be preserved by backing it up to a temporary table.</p>
<h3 id="references">References</h3>
<ul>
<li>#5260</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5260">https://github.com/surrealdb/surrealdb/pull/5260</a></li>
<li><a href="https://github.com/advisories/GHSA-27vq-hv74-7cqp">https://github.com/advisories/GHSA-27vq-hv74-7cqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vq-hv74-7cqp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-16T17:38:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has Silent Failure to Overwrite Table Definition of Relation Type]]></title>
        <id>https://github.com/advisories/GHSA-27vq-hv74-7cqp</id>
        <link href="https://github.com/advisories/GHSA-27vq-hv74-7cqp"/>
        <updated>2024-12-16T17:38:55.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>OVERWRITE</code> clause of the <code>DEFINE TABLE</code> statement would fail to overwrite data for tables that were defined with <code>TYPE RELATION</code>. Since table definitions include the <code>PERMISSIONS</code> clause, this failure would result in permissions not being overwritten as a result, which may potentially lead users to believe they have changed the table permissions when they have not.</p>
<h3 id="impact">Impact</h3>
<p>If a user attempted to update table permissions of a table defined with <code>TYPE RELATION</code> using <code>DEFINE TABLE ... OVERWRITE</code>, permissions for the table would not be changed. This may allow a client that is authorized to run queries in a SurrealDB server to access certain data in that specific table that they were not intended to be able to access after the specified change in permissions.</p>
<h3 id="patches">Patches</h3>
<p>The <code>DEFINE TABLE</code> statement has been updated to appropriately overwrite data for tables defined with <code>TYPE RELATION</code>.</p>
<ul>
<li>Version 2.1.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users of tables with <code>TYPE RELATION</code> that may have been modified using the <code>OVERWRITE</code> clause in order to update permissions are advised to verify that the intended permissions are in place using the <code>INFO FOR DB</code> statement. Affected users who are unable to update and require updating permissions in a table with <code>TYPE RELATION</code> will be required to remove the table and define it from scratch with the intended permissions. Data can be preserved by backing it up to a temporary table.</p>
<h3 id="references">References</h3>
<ul>
<li>#5260</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5260">https://github.com/surrealdb/surrealdb/pull/5260</a></li>
<li><a href="https://github.com/advisories/GHSA-27vq-hv74-7cqp">https://github.com/advisories/GHSA-27vq-hv74-7cqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vq-hv74-7cqp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-16T17:38:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pqcrypto-hqc] PQClean has a correctness error in HQC decapsulation]]></title>
        <id>https://github.com/advisories/GHSA-753p-wrj5-g8fj</id>
        <link href="https://github.com/advisories/GHSA-753p-wrj5-g8fj"/>
        <updated>2024-12-11T21:48:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A correctness error has been identified in the reference implementation of the HQC key encapsulation mechanism. Due to an indexing error, part of the secret key is incorrectly treated as non-secret data. This results in an incorrect shared secret value being returned when the decapsulation function is called with a malformed ciphertext.</p>
<p>No concrete attack exploiting the error has been identified at this point. However, the error involves mishandling of the secret key, and in principle this presents a security vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>PQClean does not have a release process, as it is a collection of implementations. If you obtained a HQC implementation from PQClean, please update to a version that includes the fixes proposed in <a href="https://github.com/PQClean/PQClean/pull/578">https://github.com/PQClean/PQClean/pull/578</a>. </p>
<p>Please also <a href="https://github.com/PQClean/PQClean/blob/master/SECURITY.md">refer to our security policy</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Manually patching is always possible</p>
<h3 id="further-details">Further details</h3>
<p>In the 2023/04/30 version of the HQC specification and reference implementation, an extra field (sigma) was added to the secret key structure to enable implicit rejection of malformed ciphertexts. The logic to retrieve the public key from the secret key in the decapsulation function was not updated accordingly. As a result, sigma is treated as part of the public key. Later in the decapsulation call, a incorrectly constructed comparison check allows this error to go through undetected. Due to how these two bugs interfere with each other, the decapsulation function never uses sigma to perform implicit rejection; instead, it accepts malformed ciphertexts and returns shared secrets based on their decryptions.</p>
<h3 id="references">References</h3>
<p>This issue was first reported in OQS <a href="https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7">https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7</a>. The vulnerability was identified by Célian Glénaz and Dahmun Goudarzi (Quarkslab).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/PQClean/PQClean/security/advisories/GHSA-753p-wrj5-g8fj">https://github.com/PQClean/PQClean/security/advisories/GHSA-753p-wrj5-g8fj</a></li>
<li><a href="https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7">https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7</a></li>
<li><a href="https://github.com/PQClean/PQClean/pull/578">https://github.com/PQClean/PQClean/pull/578</a></li>
<li><a href="https://github.com/rustpq/pqcrypto/commit/0c07fa8badbf44f67d3ff1571df31ca54e5228c0">https://github.com/rustpq/pqcrypto/commit/0c07fa8badbf44f67d3ff1571df31ca54e5228c0</a></li>
<li><a href="https://github.com/advisories/GHSA-753p-wrj5-g8fj">https://github.com/advisories/GHSA-753p-wrj5-g8fj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-753p-wrj5-g8fj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-11T21:47:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CosmWasm VM Incorrect metering]]></title>
        <id>https://github.com/advisories/GHSA-2q97-m5rc-p3gp</id>
        <link href="https://github.com/advisories/GHSA-2q97-m5rc-p3gp"/>
        <updated>2024-12-10T16:55:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2024-007">CWA-2024-007</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>
<li>wasmvm &lt; 1.5.5</li>
<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>
<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>
<li>cosmwasm-vm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>
<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>To double check if the correct library version is loaded at runtime, use this query:
<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-08-30: Confio security contributors confirm the report.</li>
<li>2024-09-02: Confio developed the patch internally.</li>
<li>2024-09-23: Patch is released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href="https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>
<li><a href="https://github.com/advisories/GHSA-2q97-m5rc-p3gp">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q97-m5rc-p3gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-10T16:55:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CosmWasm VM Incorrect metering]]></title>
        <id>https://github.com/advisories/GHSA-2q97-m5rc-p3gp</id>
        <link href="https://github.com/advisories/GHSA-2q97-m5rc-p3gp"/>
        <updated>2024-12-10T16:55:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2024-007">CWA-2024-007</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>
<li>wasmvm &lt; 1.5.5</li>
<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>
<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>
<li>cosmwasm-vm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>
<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>To double check if the correct library version is loaded at runtime, use this query:
<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-08-30: Confio security contributors confirm the report.</li>
<li>2024-09-02: Confio developed the patch internally.</li>
<li>2024-09-23: Patch is released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href="https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>
<li><a href="https://github.com/advisories/GHSA-2q97-m5rc-p3gp">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q97-m5rc-p3gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-10T16:55:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CosmWasm VM Incorrect metering]]></title>
        <id>https://github.com/advisories/GHSA-2q97-m5rc-p3gp</id>
        <link href="https://github.com/advisories/GHSA-2q97-m5rc-p3gp"/>
        <updated>2024-12-10T16:55:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2024-007">CWA-2024-007</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>
<li>wasmvm &lt; 1.5.5</li>
<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>
<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>
<li>cosmwasm-vm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>
<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>To double check if the correct library version is loaded at runtime, use this query:
<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-08-30: Confio security contributors confirm the report.</li>
<li>2024-09-02: Confio developed the patch internally.</li>
<li>2024-09-23: Patch is released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href="https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>
<li><a href="https://github.com/advisories/GHSA-2q97-m5rc-p3gp">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q97-m5rc-p3gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-10T16:55:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Panic in wasmvm can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-vmqh-5232-v43r</id>
        <link href="https://github.com/advisories/GHSA-vmqh-5232-v43r"/>
        <updated>2024-12-10T16:55:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2024-008">CWA-2024-008</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>
<li>wasmvm &lt; 1.5.5</li>
<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>
<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>
<li>cosmwasm-vm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>
<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>To double check if the correct library version is loaded at runtime, use this query:
<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-08-22: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-08-23: Confio security contributors confirm the report.</li>
<li>2024-09-09: Confio developed the patch internally.</li>
<li>2024-09-23: Patch is released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href="https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md</a></li>
<li><a href="https://github.com/advisories/GHSA-vmqh-5232-v43r">https://github.com/advisories/GHSA-vmqh-5232-v43r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmqh-5232-v43r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-10T16:55:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Panic in wasmvm can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-vmqh-5232-v43r</id>
        <link href="https://github.com/advisories/GHSA-vmqh-5232-v43r"/>
        <updated>2024-12-10T16:55:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2024-008">CWA-2024-008</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>
<li>wasmvm &lt; 1.5.5</li>
<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>
<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>
<li>cosmwasm-vm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>
<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>To double check if the correct library version is loaded at runtime, use this query:
<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-08-22: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-08-23: Confio security contributors confirm the report.</li>
<li>2024-09-09: Confio developed the patch internally.</li>
<li>2024-09-23: Patch is released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href="https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md</a></li>
<li><a href="https://github.com/advisories/GHSA-vmqh-5232-v43r">https://github.com/advisories/GHSA-vmqh-5232-v43r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmqh-5232-v43r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-10T16:55:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Panic in wasmvm can slow down block production]]></title>
        <id>https://github.com/advisories/GHSA-vmqh-5232-v43r</id>
        <link href="https://github.com/advisories/GHSA-vmqh-5232-v43r"/>
        <updated>2024-12-10T16:55:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cwa-2024-008">CWA-2024-008</h1>
<p><strong>Severity</strong></p>
<p>Medium (Moderate + Likely)[^1]</p>
<p><strong>Affected versions:</strong></p>
<ul>
<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>
<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>
<li>wasmvm &lt; 1.5.5</li>
<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>
<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>
<li>cosmwasm-vm &lt; 1.5.8</li>
</ul>
<p><strong>Patched versions:</strong></p>
<ul>
<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>
<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>
</ul>
<h2 id="description-of-the-bug">Description of the bug</h2>
<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>
<h2 id="patch">Patch</h2>
<ul>
<li>1.5: <a href="https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>
<li>2.0: <a href="https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>
<li>2.1: <a href="https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>
</ul>
<h2 id="applying-the-patch">Applying the patch</h2>
<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>
<ol>
<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>
<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>
<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>
<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>
<li>Follow your regular practices to deploy chain upgrades.</li>
</ol>
<p>To double check if the correct library version is loaded at runtime, use this query:
<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>
<p>The patch is consensus breaking and requires a coordinated upgrade.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>
<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the
program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>2024-08-22: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>
<li>2024-08-23: Confio security contributors confirm the report.</li>
<li>2024-09-09: Confio developed the patch internally.</li>
<li>2024-09-23: Patch is released.</li>
</ul>
<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href="https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md</a></li>
<li><a href="https://github.com/advisories/GHSA-vmqh-5232-v43r">https://github.com/advisories/GHSA-vmqh-5232-v43r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmqh-5232-v43r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-10T16:55:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[idna] `idna` accepts Punycode labels that do not produce any non-ASCII when decoded]]></title>
        <id>https://github.com/advisories/GHSA-h97m-ww89-6jmq</id>
        <link href="https://github.com/advisories/GHSA-h97m-ww89-6jmq"/>
        <updated>2024-12-09T20:41:10.000Z</updated>
        <content type="html"><![CDATA[<p><code>idna</code> 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with <code>idna</code> 0.5.0 or earlier.</p>
<p>Concretely, <code>example.org</code> and <code>xn--example-.org</code> become equal after processing by <code>idna</code> 0.5.0 or earlier. Also, <code>example.org.xn--</code> and <code>example.org.</code> become equal after processing by <code>idna</code> 0.5.0 or earlier.</p>
<p>In applications using <code>idna</code> (but not in <code>idna</code> itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an <code>xn--</code>-masked name that turns into the name of the target when processed by <code>idna</code> 0.5.0 or earlier.</p>
<h2 id="remedy">Remedy</h2>
<p>Upgrade to <code>idna</code> 1.0.3 or later, if depending on <code>idna</code> directly, or to <code>url</code> 2.5.4 or later, if depending on <code>idna</code> via <code>url</code>. (This issue was fixed in <code>idna</code> 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)</p>
<p>When upgrading, please take a moment to read about <a href="https://docs.rs/crate/idna_adapter/latest">alternative Unicode back ends for <code>idna</code></a>.</p>
<p>If you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an <a href="https://github.com/servo/rust-url/issues/992">issue</a> about combining them with <code>url</code> 2.5.4 and <code>idna</code> 1.0.3.</p>
<h2 id="additional-information">Additional information</h2>
<p>This issue resulted from <code>idna</code> 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in <a href="https://www.unicode.org/reports/tr46/tr46-33.html#Modifications">revision 33 of UTS 46</a>.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Thanks to kageshiron for recognizing the security implications of this behavior.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1887898">https://bugzilla.mozilla.org/show_bug.cgi?id=1887898</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0421.html">https://rustsec.org/advisories/RUSTSEC-2024-0421.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h97m-ww89-6jmq">https://github.com/advisories/GHSA-h97m-ww89-6jmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h97m-ww89-6jmq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-09T20:41:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyo3] Build corruption when using `PYO3_CONFIG_FILE` environment variable]]></title>
        <id>https://github.com/advisories/GHSA-vxcf-c7mx-pg53</id>
        <link href="https://github.com/advisories/GHSA-vxcf-c7mx-pg53"/>
        <updated>2024-12-05T19:06:21.000Z</updated>
        <content type="html"><![CDATA[<p>In PyO3 0.23.0 the <code>PYO3_CONFIG_FILE</code> environment variable used to configure builds regressed such that changing the environment variable would no longer trigger PyO3 to reconfigure and recompile. In combination with workflows using tools such as <code>maturin</code> to build for multiple versions in a single build, this leads to Python wheels being compiled against the wrong Python API version.</p>
<p>All users who distribute artefacts for multiple Python versions are encouraged to update and rebuild with PyO3 0.23.3. Affected wheels produced from PyO3 0.23.0 through 0.23.2 are highly unstable and will crash the Python interpreter in unpredictable ways.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PyO3/pyo3/issues/4757">https://github.com/PyO3/pyo3/issues/4757</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0409.html">https://rustsec.org/advisories/RUSTSEC-2024-0409.html</a></li>
<li><a href="https://github.com/advisories/GHSA-vxcf-c7mx-pg53">https://github.com/advisories/GHSA-vxcf-c7mx-pg53</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxcf-c7mx-pg53</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-05T19:06:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pprof] Unsound usages of `std::slice::from_raw_parts` ]]></title>
        <id>https://github.com/advisories/GHSA-gw5w-5j7f-jmjj</id>
        <link href="https://github.com/advisories/GHSA-gw5w-5j7f-jmjj"/>
        <updated>2024-12-05T19:06:00.000Z</updated>
        <content type="html"><![CDATA[<p>The library breaks the safety assumptions when using unsafe API <code>std::slice::from_raw_parts</code>. First, when using the API in iterator implementation (<code>TempFdArrayIterator.next</code>), generic type could be any type, which would create and pass a misaligned pointer to the unsafe API. Second, when validating the address, the code passed the type <code>c_void</code>, which could also be any type, leading to potential uninitialized memory exposure.  </p>
<p>Two unsound usages here highlight the necessity for developers to perform type checks before doing type conversion with unsafe API.  </p>
<p>The panic caused by the misalignment causes several downstream applications (e.g., <code>greptimedb</code>) to crash when using <code>pprof::report::ReportBuilder::build</code>.  </p>
<p>This was patched in 0.14.0.  </p>
<p>The developer also suggested moving to <a href="https://crates.io/crates/pprof2">pprof2</a>.  </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tikv/pprof-rs/issues/232">https://github.com/tikv/pprof-rs/issues/232</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0408.html">https://rustsec.org/advisories/RUSTSEC-2024-0408.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gw5w-5j7f-jmjj">https://github.com/advisories/GHSA-gw5w-5j7f-jmjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw5w-5j7f-jmjj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-05T19:05:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pgp] rPGP Potential Resource Exhaustion when handling Untrusted Messages]]></title>
        <id>https://github.com/advisories/GHSA-4grw-m28r-q285</id>
        <link href="https://github.com/advisories/GHSA-4grw-m28r-q285"/>
        <updated>2024-12-05T19:05:50.000Z</updated>
        <content type="html"><![CDATA[<p>During a security audit, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> discovered two vulnerabilities which allow attackers to trigger resource exhaustion vulnerabilities in <code>rpgp</code> by providing crafted messages. This affects general message parsing and decryption with symmetric keys.</p>
<h3 id="impact">Impact</h3>
<p>Affected <code>rpgp</code> versions do not correctly set upper limits on the total reserved amount of memory when parsing long sequences of partial OpenPGP packets, which can grow to to several GiB in size. Additionally, up to 4GiB of memory is reserved for OpenPGP packets of fixed size with large length fields, even if less data is received. 
Depending on existing message size restrictions and available system resources, this can cause out-of-memory conditions and crash the <code>rpgp</code> process or cause other system instability through memory resource exhaustion when parsing crafted messages.</p>
<p>Affected <code>rpgp</code> versions are susceptible to excessive memory allocation with values of up to 2TiB or long processing times for some decryption operations which involve the <a href="https://datatracker.ietf.org/doc/html/rfc9580.html#name-argon2">Argon2 function</a>. An attacker can provide a valid <code>Symmetric Key Encrypted Session Key</code> packet (SKESK) which uses <code>Argon2</code> for String-to-Key hashing with parameters that are excessive, but within specification limits of the RFC9580 OpenPGP standard. Since <code>rpgp</code> did not further restrict the Argon2 parameters, this can cause out-of-memory conditions and crash the <code>rpgp</code> process. Under some conditions,   the memory resource exhaustion may trigger other system instability. Alternatively, this can make the program unresponsive via long computations. The attacker needs to trick a victim into attempting decryption, but does not require knowledge of the symmetric secret used by the victim.</p>
<p>There is no impact to confidentiality or integrity security properties.</p>
<h3 id="versions-and-patches">Versions and Patches</h3>
<p>The impact details on the message parsing component varies with different versions. We've confirmed some of the problematic behavior on older versions such as <code>v0.10.0</code> and see all recent versions as affected in some form.  </p>
<p>The affected <code>Argon2</code> functionality was introduced with <code>v0.12.0-alpha.1</code>, earlier versions are not vulnerable.</p>
<p>The vulnerabilities have been fixed with version <code>0.14.2</code>. We recommend all users to upgrade to this version.</p>
<h3 id="references">References</h3>
<p>The security audit was made possible by the <a href="https://nlnet.nl/core/">NLnet Foundation NGI Zero Core</a> grant program <a href="https://nlnet.nl/project/rPGP-cryptorefresh/">for rpgp</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rpgp/rpgp/security/advisories/GHSA-4grw-m28r-q285">https://github.com/rpgp/rpgp/security/advisories/GHSA-4grw-m28r-q285</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53857">https://nvd.nist.gov/vuln/detail/CVE-2024-53857</a></li>
<li><a href="https://github.com/advisories/GHSA-4grw-m28r-q285">https://github.com/advisories/GHSA-4grw-m28r-q285</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4grw-m28r-q285</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-05T17:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pgp] rPGP Panics on Malformed Untrusted Input]]></title>
        <id>https://github.com/advisories/GHSA-9rmp-2568-59rv</id>
        <link href="https://github.com/advisories/GHSA-9rmp-2568-59rv"/>
        <updated>2024-12-05T19:05:49.000Z</updated>
        <content type="html"><![CDATA[<p>During a security audit, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> discovered several reachable edge cases which allow an attacker to trigger <code>rpgp</code> crashes by providing crafted data.</p>
<h3 id="impact">Impact</h3>
<p>When processing malformed input, <code>rpgp</code> can run into Rust panics which halt the program.</p>
<p>This can happen in the following scenarios:</p>
<ul>
<li>Parsing OpenPGP messages from binary or armor format</li>
<li>Decrypting OpenPGP messages via <code>decrypt_with_password()</code></li>
<li>Parsing or converting public keys</li>
<li>Parsing signed cleartext messages from armor format</li>
<li>Using malformed private keys to sign or encrypt</li>
</ul>
<p>Given the affected components, we consider most attack vectors to be reachable by remote attackers during typical use cases of the <code>rpgp</code> library. The attack complexity is low since the malformed messages are generic, short, and require no victim-specific knowledge.</p>
<p>The result is a denial-of-service impact via program termination. There is no impact to confidentiality or integrity security properties.</p>
<h3 id="versions-and-patches">Versions and Patches</h3>
<p>All recent versions are affected by at least some of the above mentioned issues. </p>
<p>The vulnerabilities have been fixed with version <code>0.14.1</code>. We recommend all users to upgrade to this version.</p>
<h3 id="references">References</h3>
<p>The security audit was made possible by the <a href="https://nlnet.nl/core/">NLnet Foundation NGI Zero Core</a> grant program <a href="https://nlnet.nl/project/rPGP-cryptorefresh/">for rpgp</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rpgp/rpgp/security/advisories/GHSA-9rmp-2568-59rv">https://github.com/rpgp/rpgp/security/advisories/GHSA-9rmp-2568-59rv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53856">https://nvd.nist.gov/vuln/detail/CVE-2024-53856</a></li>
<li><a href="https://github.com/advisories/GHSA-9rmp-2568-59rv">https://github.com/advisories/GHSA-9rmp-2568-59rv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9rmp-2568-59rv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-05T17:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rustyscript] op_panic in the base runtime can force a panic in the runtime's containing thread]]></title>
        <id>https://github.com/advisories/GHSA-fwfx-rrv8-crpf</id>
        <link href="https://github.com/advisories/GHSA-fwfx-rrv8-crpf"/>
        <updated>2024-12-04T18:37:40.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions use deno_core releases that expose <code>Deno.core.ops.op_panic</code> to the JS runtime in the base core</p>
<p>This function when called triggers a manual panic in the thread containing the runtime.</p>
<p>It can be fixed by stubbing out the exposed op:</p>
<pre><code class="language-javascript">Deno.core.ops.op_panic = (msg) =&gt; { throw new Error(msg) };
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rscarson/rustyscript/issues/174">https://github.com/rscarson/rustyscript/issues/174</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0405.html">https://rustsec.org/advisories/RUSTSEC-2024-0405.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fwfx-rrv8-crpf">https://github.com/advisories/GHSA-fwfx-rrv8-crpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fwfx-rrv8-crpf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-04T18:37:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[js-sandbox] op_panic in the base runtime can force a panic in the runtime's containing thread]]></title>
        <id>https://github.com/advisories/GHSA-4mw5-2636-4535</id>
        <link href="https://github.com/advisories/GHSA-4mw5-2636-4535"/>
        <updated>2024-12-04T18:36:39.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions use deno_core releases that expose <code>Deno.core.ops.op_panic</code> to the JS runtime in the base core</p>
<p>This function when called triggers a manual panic in the thread containing the runtime, breaking sandboxing</p>
<p>It can be fixed by stubbing out the exposed op:</p>
<pre><code class="language-javascript">Deno.core.ops.op_panic = (msg) =&gt; { throw new Error(msg) };
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Bromeon/js-sandbox/issues/31">https://github.com/Bromeon/js-sandbox/issues/31</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0403.html">https://rustsec.org/advisories/RUSTSEC-2024-0403.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4mw5-2636-4535">https://github.com/advisories/GHSA-4mw5-2636-4535</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mw5-2636-4535</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-04T18:36:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anstream] Unsoundness in anstream]]></title>
        <id>https://github.com/advisories/GHSA-2rxc-gjrp-vjhx</id>
        <link href="https://github.com/advisories/GHSA-2rxc-gjrp-vjhx"/>
        <updated>2024-12-04T18:31:33.000Z</updated>
        <content type="html"><![CDATA[<p>When given a valid UTF8 string "ö\x1b😀", the function in crates/anstream/src/adapter/strip.rs will be confused. The UTF8 bytes are \xc3\xb6 then \x1b then \xf0\x9f\x98\x80.</p>
<p>When looping over "non-printable bytes" \x1b\xf0 will be considered as some non-printable sequence.</p>
<p>This will produce a broken str from the incorrectly segmented bytes via str::from_utf8_unchecked, and that should never happen.</p>
<p>Full credit goes to @Ralith who reviewed this code and asked @burakemir to follow up.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-cli/anstyle/issues/156">https://github.com/rust-cli/anstyle/issues/156</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0404.html">https://rustsec.org/advisories/RUSTSEC-2024-0404.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2rxc-gjrp-vjhx">https://github.com/advisories/GHSA-2rxc-gjrp-vjhx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2rxc-gjrp-vjhx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-04T18:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hashbrown] Borsh serialization of HashMap is non-canonical]]></title>
        <id>https://github.com/advisories/GHSA-wwq9-3cpr-mm53</id>
        <link href="https://github.com/advisories/GHSA-wwq9-3cpr-mm53"/>
        <updated>2024-12-04T18:29:17.000Z</updated>
        <content type="html"><![CDATA[<p>The borsh serialization of the HashMap did not follow the borsh specification. It potentially produced non-canonical encodings dependent on insertion order. It also did not perform canonicty checks on decoding.</p>
<p>This can result in consensus splits and cause equivalent objects to be considered distinct.</p>
<p>This was patched in 0.15.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/hashbrown/issues/576">https://github.com/rust-lang/hashbrown/issues/576</a></li>
<li><a href="https://github.com/kayabaNerve/hashbrown-borsh-poc">https://github.com/kayabaNerve/hashbrown-borsh-poc</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0402.html">https://rustsec.org/advisories/RUSTSEC-2024-0402.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wwq9-3cpr-mm53">https://github.com/advisories/GHSA-wwq9-3cpr-mm53</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwq9-3cpr-mm53</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-04T18:29:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[linkme] linkme fails to ensure slice elements match the slice's declared type]]></title>
        <id>https://github.com/advisories/GHSA-f95p-4cv5-8w8x</id>
        <link href="https://github.com/advisories/GHSA-f95p-4cv5-8w8x"/>
        <updated>2024-12-04T18:26:13.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions allow populating a DistributedSlice of T with elements of an arbitrary other type that coerces to T. For example, elements of type <code>&amp;&amp;str</code> could end up in a slice of type <code>[&amp;str]</code>, since <code>&amp;&amp;str</code> coerces to <code>&amp;str</code> via a deref coercion.</p>
<p>The flaw was corrected by implementing typechecking for distributed slice elements in such a way that coercion no longer occurs. The element's type must be a subtype of the slice's declared element type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dtolnay/linkme/issues/82">https://github.com/dtolnay/linkme/issues/82</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0407.html">https://rustsec.org/advisories/RUSTSEC-2024-0407.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f95p-4cv5-8w8x">https://github.com/advisories/GHSA-f95p-4cv5-8w8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f95p-4cv5-8w8x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-04T18:26:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ruzstd] `ruzstd` uninit and out-of-bounds memory reads]]></title>
        <id>https://github.com/advisories/GHSA-x3f4-45xf-rjm7</id>
        <link href="https://github.com/advisories/GHSA-x3f4-45xf-rjm7"/>
        <updated>2024-12-02T21:34:27.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>ruzstd</code> miscalculate the length of the allocated and init section of its internal <code>RingBuffer</code>, leading to uninitialized or out-of-bounds reads in <code>copy_bytes_overshooting</code> of up to 15 bytes.</p>
<p>This may result in up to 15 bytes of memory contents being written into the decoded data when decompressing a crafted archive. This may occur multiple times per archive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KillingSpark/zstd-rs/issues/75">https://github.com/KillingSpark/zstd-rs/issues/75</a></li>
<li><a href="https://github.com/KillingSpark/zstd-rs/pull/76">https://github.com/KillingSpark/zstd-rs/pull/76</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0400.html">https://rustsec.org/advisories/RUSTSEC-2024-0400.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x3f4-45xf-rjm7">https://github.com/advisories/GHSA-x3f4-45xf-rjm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3f4-45xf-rjm7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:34:27.000Z</published>
    </entry>
</feed>