<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2025-04-11T17:01:23.284Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB bypass of deny-net flags via redirect results in server-side request forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5q9x-554g-9jgg</id>
        <link href="https://github.com/advisories/GHSA-5q9x-554g-9jgg"/>
        <updated>2025-04-11T14:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB offers http functions that can access external network endpoints. A typical, albeit <a href="https://surrealdb.com/docs/surrealdb/reference-guide/security-best-practices#example-deny-all-capabilities-with-some-exceptions">not recommended </a> configuration would be to start SurrealDB with all network connections allowed with the exception of a deny list. For example, <code>surreal start --allow-net --deny-net 10.0.0.0/8</code> will allow all network connections except to the 10.0.0.0/8 block.</p>
<p>An authenticated user of SurrealDB can use redirects to bypass this restriction. For example by hosting a server on the public internet which redirects to the IP addresses blocked by the administrator of the SurrealDB server via HTTP 301 or 307 response codes. </p>
<p>When sending SurrealDB statements containing the <code>http::*</code> functions to the attacker controlled host, the SurrealDB server will follow the redirects to the blocked IP address. Because the statements also return the responses to the attacker, this issue constitutes a full SSRF vulnerability.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity as defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability is circumvention of the <code>--deny-net</code> capability and resulting impact on systems external to SurrealDB. The ultimate impact is dependent on the deployment scenario. </p>
<p>For example, if the SurrealDB server blocks requests to internal and private IP addresses because they run services which don't require authentication, such as AWS deployments using IMDSv1, the attacker can access these internal endpoints directly, and potentially retrieve or even alter sensitive information and credentials.</p>
<p>The circumvention could also be used to redirect traffic to the SurrealDB port, providing a low level of impact to availability. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that adds an HTTP redirect limit, and checks HTTP redirects against allowed network targets, preventing redirections to disallowed uri's.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The possibility of this vulnerability being exploited can be reduced by following an allowlist approach to enabling the http capability <code>surreal start --allow-net 10.0.0.0/8 </code> or using the equivalent <code>SURREAL_CAPS_ALLOW_NET</code> environment variable,  where endpoints allowed are fully trusted and are not controlled by regular users.</p>
<p>The network access capability can be disabled, using <code>--deny-net</code> or the equivalent <code>SURREAL_CAPS_DENY_NET</code> environment variable without specifying targets, with impact to SurrealDB functionality.</p>
<p>As the impact of this vulnerability depends on the security of the deployment environment of SurrealDB, best practices should be followed within that environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#network">SurrealDB Documentation - Network Access Capability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-5q9x-554g-9jgg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-5q9x-554g-9jgg">https://github.com/advisories/GHSA-5q9x-554g-9jgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q9x-554g-9jgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:09:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB CPU exhaustion via custom functions result in total DoS]]></title>
        <id>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</id>
        <link href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf"/>
        <updated>2025-04-11T14:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB allows authenticated users with <code>OWNER</code> or <code>EDITOR</code> permissions at the root, database or namespace levels to define their own database functions using the <code>DEFINE FUNCTION</code> statement</p>
<p>A custom database function comprises a name together with a function body. In the function body, the user programs the functionality of the function in terms of SurrealQL. The language includes a <code>FOR</code> keyword, used to implement for-loops.</p>
<p>Whilst the parser and interpreter constrain the number of iterations for a single for-loop, nesting several for-loops with a large number of iterations is possible. Thus, an attacker could define a function that comprises several nested for-loops with an iteration count of 1.000.000 each. </p>
<p>Executing the function will consume all the CPU time of the server, timeouts configured will not break the CPU consumption, and the function execution monopolizes all CPU time of the SurrealDB server, effectively preventing the server from executing functions, queries, commands of other users, or allowing further connections being established to the server.</p>
<p>Terminating the stuck server requires manual intervention which forces a quit on the server process, as the server application is not responsive any longer.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is high, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service vulnerability resulting in a stuck SurrealDB server requiring manual restart.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced that adds a check in the <code>ForEachStatement</code> that checks if the context has been cancelled or timed out for every iteration.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, consider setting the <code>--allow-functions</code> and/or <code>--deny-functions</code> options or corresponding <code>SURREAL_CAPS_ALLOW_FUNC</code> and/or <code>SURREAL_CAPS_DENY_FUNC</code> environment variables, documented within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">capabilities</a>, to either block all custom functions, or only allow trusted functions to execute. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/function">SurrealQL Documentation - DEFINE FUNCTION Statement</a>
<a href="https://surrealdb.com/docs/surrealql/statements/for">SurrealQL Documentation - FOR Statement</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env#command-environment-variables">SurrealDB Documentation - Environment variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/advisories/GHSA-pxw4-94j3-v9pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:09:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB CPU exhaustion via custom functions result in total DoS]]></title>
        <id>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</id>
        <link href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf"/>
        <updated>2025-04-11T14:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB allows authenticated users with <code>OWNER</code> or <code>EDITOR</code> permissions at the root, database or namespace levels to define their own database functions using the <code>DEFINE FUNCTION</code> statement</p>
<p>A custom database function comprises a name together with a function body. In the function body, the user programs the functionality of the function in terms of SurrealQL. The language includes a <code>FOR</code> keyword, used to implement for-loops.</p>
<p>Whilst the parser and interpreter constrain the number of iterations for a single for-loop, nesting several for-loops with a large number of iterations is possible. Thus, an attacker could define a function that comprises several nested for-loops with an iteration count of 1.000.000 each. </p>
<p>Executing the function will consume all the CPU time of the server, timeouts configured will not break the CPU consumption, and the function execution monopolizes all CPU time of the SurrealDB server, effectively preventing the server from executing functions, queries, commands of other users, or allowing further connections being established to the server.</p>
<p>Terminating the stuck server requires manual intervention which forces a quit on the server process, as the server application is not responsive any longer.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is high, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service vulnerability resulting in a stuck SurrealDB server requiring manual restart.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced that adds a check in the <code>ForEachStatement</code> that checks if the context has been cancelled or timed out for every iteration.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, consider setting the <code>--allow-functions</code> and/or <code>--deny-functions</code> options or corresponding <code>SURREAL_CAPS_ALLOW_FUNC</code> and/or <code>SURREAL_CAPS_DENY_FUNC</code> environment variables, documented within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">capabilities</a>, to either block all custom functions, or only allow trusted functions to execute. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/function">SurrealQL Documentation - DEFINE FUNCTION Statement</a>
<a href="https://surrealdb.com/docs/surrealql/statements/for">SurrealQL Documentation - FOR Statement</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env#command-environment-variables">SurrealDB Documentation - Environment variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/advisories/GHSA-pxw4-94j3-v9pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:09:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB CPU exhaustion via custom functions result in total DoS]]></title>
        <id>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</id>
        <link href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf"/>
        <updated>2025-04-11T14:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB allows authenticated users with <code>OWNER</code> or <code>EDITOR</code> permissions at the root, database or namespace levels to define their own database functions using the <code>DEFINE FUNCTION</code> statement</p>
<p>A custom database function comprises a name together with a function body. In the function body, the user programs the functionality of the function in terms of SurrealQL. The language includes a <code>FOR</code> keyword, used to implement for-loops.</p>
<p>Whilst the parser and interpreter constrain the number of iterations for a single for-loop, nesting several for-loops with a large number of iterations is possible. Thus, an attacker could define a function that comprises several nested for-loops with an iteration count of 1.000.000 each. </p>
<p>Executing the function will consume all the CPU time of the server, timeouts configured will not break the CPU consumption, and the function execution monopolizes all CPU time of the SurrealDB server, effectively preventing the server from executing functions, queries, commands of other users, or allowing further connections being established to the server.</p>
<p>Terminating the stuck server requires manual intervention which forces a quit on the server process, as the server application is not responsive any longer.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is high, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Denial of Service vulnerability resulting in a stuck SurrealDB server requiring manual restart.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced that adds a check in the <code>ForEachStatement</code> that checks if the context has been cancelled or timed out for every iteration.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, consider setting the <code>--allow-functions</code> and/or <code>--deny-functions</code> options or corresponding <code>SURREAL_CAPS_ALLOW_FUNC</code> and/or <code>SURREAL_CAPS_DENY_FUNC</code> environment variables, documented within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">capabilities</a>, to either block all custom functions, or only allow trusted functions to execute. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/function">SurrealQL Documentation - DEFINE FUNCTION Statement</a>
<a href="https://surrealdb.com/docs/surrealql/statements/for">SurrealQL Documentation - FOR Statement</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env#command-environment-variables">SurrealDB Documentation - Environment variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5597">#5597</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-pxw4-94j3-v9pf</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-pxw4-94j3-v9pf">https://github.com/advisories/GHSA-pxw4-94j3-v9pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxw4-94j3-v9pf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:09:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB no JavaScript script function default timeout could facilitate DoS]]></title>
        <id>https://github.com/advisories/GHSA-3824-qmfq-2qv7</id>
        <link href="https://github.com/advisories/GHSA-3824-qmfq-2qv7"/>
        <updated>2025-04-11T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>Through enabling the scripting capability. SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript.</p>
<p>These functions are bounded for memory and stack size, but not in time. An attacker could launch a number of long running functions that could potentially facilitate a Denial Of Service attack.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can use the scripting capabilities of SurrealDB to run a series of long running functions to facilitate a Denial Of Service attack.</p>
<h3 id="patches">Patches</h3>
<p>A default timeout for the scripting functions has been implemented with a configurable <code>SURREAL_SCRIPTING_MAX_TIME_LIMIT</code> environment variable</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For users that cannot upgrade. Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">5597</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-3824-qmfq-2qv7">https://github.com/advisories/GHSA-3824-qmfq-2qv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3824-qmfq-2qv7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-11T14:08:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB no JavaScript script function default timeout could facilitate DoS]]></title>
        <id>https://github.com/advisories/GHSA-3824-qmfq-2qv7</id>
        <link href="https://github.com/advisories/GHSA-3824-qmfq-2qv7"/>
        <updated>2025-04-11T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>Through enabling the scripting capability. SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript.</p>
<p>These functions are bounded for memory and stack size, but not in time. An attacker could launch a number of long running functions that could potentially facilitate a Denial Of Service attack.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can use the scripting capabilities of SurrealDB to run a series of long running functions to facilitate a Denial Of Service attack.</p>
<h3 id="patches">Patches</h3>
<p>A default timeout for the scripting functions has been implemented with a configurable <code>SURREAL_SCRIPTING_MAX_TIME_LIMIT</code> environment variable</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For users that cannot upgrade. Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">5597</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-3824-qmfq-2qv7">https://github.com/advisories/GHSA-3824-qmfq-2qv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3824-qmfq-2qv7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-11T14:08:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB no JavaScript script function default timeout could facilitate DoS]]></title>
        <id>https://github.com/advisories/GHSA-3824-qmfq-2qv7</id>
        <link href="https://github.com/advisories/GHSA-3824-qmfq-2qv7"/>
        <updated>2025-04-11T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>Through enabling the scripting capability. SurrealDB allows for advanced functions with complicated logic, by allowing embedded functions to be written in JavaScript.</p>
<p>These functions are bounded for memory and stack size, but not in time. An attacker could launch a number of long running functions that could potentially facilitate a Denial Of Service attack.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can use the scripting capabilities of SurrealDB to run a series of long running functions to facilitate a Denial Of Service attack.</p>
<h3 id="patches">Patches</h3>
<p>A default timeout for the scripting functions has been implemented with a configurable <code>SURREAL_SCRIPTING_MAX_TIME_LIMIT</code> environment variable</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For users that cannot upgrade. Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/surrealdb/surrealdb/pull/5597">5597</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3824-qmfq-2qv7</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5597">https://github.com/surrealdb/surrealdb/pull/5597</a></li>
<li><a href="https://github.com/advisories/GHSA-3824-qmfq-2qv7">https://github.com/advisories/GHSA-3824-qmfq-2qv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3824-qmfq-2qv7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-11T14:08:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB memory exhaustion via string::replace using regex ]]></title>
        <id>https://github.com/advisories/GHSA-3633-g6mg-p6qq</id>
        <link href="https://github.com/advisories/GHSA-3633-g6mg-p6qq"/>
        <updated>2025-04-11T14:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated user can craft a query using the <code>string::replace</code> function that uses a Regex to perform a string replacement. As there is a failure to restrict the resulting string length, this enables an attacker to send a <code>string::replace</code> function to the SurrealDB server exhausting all the memory of the server due to string allocations. This eventually results in a Denial-of-Service situation for the SurrealDB server.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53. Using CVSSv4 definitions, the severity is High. </p>
<h3 id="impact">Impact</h3>
<p>An authenticated user can crash the SurrealDB instance through memory exhaustion</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that enforces a limit on string length  <code>SURREAL_GENERATION_ALLOCATION_LIMIT</code></p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>string::replace</code> function in the affected versions of SurrealDB using the <code>--deny-functions</code> flag described within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">Capabilities</a> or the equivalent <code>SURREAL_CAPS_DENY_FUNC</code> environment variable.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/functions/database/string#stringreplace">SurrealQL Documentation - DB Functions (string::replace)</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5619">#5619 </a>
<a href="https://github.com/surrealdb/surrealdb/pull/5638">#5638 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5619">https://github.com/surrealdb/surrealdb/pull/5619</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5638">https://github.com/surrealdb/surrealdb/pull/5638</a></li>
<li><a href="https://github.com/advisories/GHSA-3633-g6mg-p6qq">https://github.com/advisories/GHSA-3633-g6mg-p6qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3633-g6mg-p6qq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:08:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB memory exhaustion via string::replace using regex ]]></title>
        <id>https://github.com/advisories/GHSA-3633-g6mg-p6qq</id>
        <link href="https://github.com/advisories/GHSA-3633-g6mg-p6qq"/>
        <updated>2025-04-11T14:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated user can craft a query using the <code>string::replace</code> function that uses a Regex to perform a string replacement. As there is a failure to restrict the resulting string length, this enables an attacker to send a <code>string::replace</code> function to the SurrealDB server exhausting all the memory of the server due to string allocations. This eventually results in a Denial-of-Service situation for the SurrealDB server.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53. Using CVSSv4 definitions, the severity is High. </p>
<h3 id="impact">Impact</h3>
<p>An authenticated user can crash the SurrealDB instance through memory exhaustion</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that enforces a limit on string length  <code>SURREAL_GENERATION_ALLOCATION_LIMIT</code></p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>string::replace</code> function in the affected versions of SurrealDB using the <code>--deny-functions</code> flag described within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">Capabilities</a> or the equivalent <code>SURREAL_CAPS_DENY_FUNC</code> environment variable.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/functions/database/string#stringreplace">SurrealQL Documentation - DB Functions (string::replace)</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5619">#5619 </a>
<a href="https://github.com/surrealdb/surrealdb/pull/5638">#5638 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5619">https://github.com/surrealdb/surrealdb/pull/5619</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5638">https://github.com/surrealdb/surrealdb/pull/5638</a></li>
<li><a href="https://github.com/advisories/GHSA-3633-g6mg-p6qq">https://github.com/advisories/GHSA-3633-g6mg-p6qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3633-g6mg-p6qq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:08:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB memory exhaustion via string::replace using regex ]]></title>
        <id>https://github.com/advisories/GHSA-3633-g6mg-p6qq</id>
        <link href="https://github.com/advisories/GHSA-3633-g6mg-p6qq"/>
        <updated>2025-04-11T14:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated user can craft a query using the <code>string::replace</code> function that uses a Regex to perform a string replacement. As there is a failure to restrict the resulting string length, this enables an attacker to send a <code>string::replace</code> function to the SurrealDB server exhausting all the memory of the server due to string allocations. This eventually results in a Denial-of-Service situation for the SurrealDB server.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53. Using CVSSv4 definitions, the severity is High. </p>
<h3 id="impact">Impact</h3>
<p>An authenticated user can crash the SurrealDB instance through memory exhaustion</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that enforces a limit on string length  <code>SURREAL_GENERATION_ALLOCATION_LIMIT</code></p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2, and later are not affected by this issue</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>string::replace</code> function in the affected versions of SurrealDB using the <code>--deny-functions</code> flag described within <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">Capabilities</a> or the equivalent <code>SURREAL_CAPS_DENY_FUNC</code> environment variable.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/functions/database/string#stringreplace">SurrealQL Documentation - DB Functions (string::replace)</a>
<a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/env">SurrealDB Documentation - Environment Variables</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5619">#5619 </a>
<a href="https://github.com/surrealdb/surrealdb/pull/5638">#5638 </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-3633-g6mg-p6qq</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5619">https://github.com/surrealdb/surrealdb/pull/5619</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5638">https://github.com/surrealdb/surrealdb/pull/5638</a></li>
<li><a href="https://github.com/advisories/GHSA-3633-g6mg-p6qq">https://github.com/advisories/GHSA-3633-g6mg-p6qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3633-g6mg-p6qq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-11T14:08:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB server-takeover via SurrealQL injection on backup import]]></title>
        <id>https://github.com/advisories/GHSA-ccj3-5p93-8p42</id>
        <link href="https://github.com/advisories/GHSA-ccj3-5p93-8p42"/>
        <updated>2025-04-11T14:07:36.000Z</updated>
        <content type="html"><![CDATA[<p>The SurrealDB command-line tool allows exporting databases through the <code>export</code> command. It was discovered that table or field names are not properly sanitized in exports, leading to a SurrealQL injection when the backup is reimported.</p>
<p>For the injection to occur, an authenticated System User with <code>OWNER</code> or <code>EDITOR</code> roles needs to create tables or fields with malicious names containing SurrealQL, subsequently exported using the <code>export</code> operation</p>
<p>The attacker could achieve a privilege escalation and root level access to the SurrealDB instance if a higher privileged user subsequently performs the <code>import</code> operation. </p>
<p>Furthermore, applications using SurrealDB that allow its users to define custom fields or tables are at risk of a universal second order SurrealQL injection, even if query parameters are properly sanitized. </p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Critical, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>This attack can be used to perform privilege escalation and complete takeover (root access) of the SurrealDB instance, as well as being able to perform SurrealQL injection attacks against co-tenanted applications where SurrealDB is used as a shared backend for multiple applications.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that addresses the issue by fixing the bugs in the exporter which failed to escape some characters properly.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, users that are looking to perform <code>import</code> operations must manually inspect the exported data for injected statements, prior to importing. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/cli/export">SurrealDB Documentation - Export</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/import">SurrealDB Documentation - Import</a>
<a href="https://surrealdb.com/docs/surrealdb/security/authentication">SurrealDB Documentation - Authentication</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42</a></li>
<li><a href="https://github.com/advisories/GHSA-ccj3-5p93-8p42">https://github.com/advisories/GHSA-ccj3-5p93-8p42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccj3-5p93-8p42</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-11T14:07:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB server-takeover via SurrealQL injection on backup import]]></title>
        <id>https://github.com/advisories/GHSA-ccj3-5p93-8p42</id>
        <link href="https://github.com/advisories/GHSA-ccj3-5p93-8p42"/>
        <updated>2025-04-11T14:07:36.000Z</updated>
        <content type="html"><![CDATA[<p>The SurrealDB command-line tool allows exporting databases through the <code>export</code> command. It was discovered that table or field names are not properly sanitized in exports, leading to a SurrealQL injection when the backup is reimported.</p>
<p>For the injection to occur, an authenticated System User with <code>OWNER</code> or <code>EDITOR</code> roles needs to create tables or fields with malicious names containing SurrealQL, subsequently exported using the <code>export</code> operation</p>
<p>The attacker could achieve a privilege escalation and root level access to the SurrealDB instance if a higher privileged user subsequently performs the <code>import</code> operation. </p>
<p>Furthermore, applications using SurrealDB that allow its users to define custom fields or tables are at risk of a universal second order SurrealQL injection, even if query parameters are properly sanitized. </p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Critical, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>This attack can be used to perform privilege escalation and complete takeover (root access) of the SurrealDB instance, as well as being able to perform SurrealQL injection attacks against co-tenanted applications where SurrealDB is used as a shared backend for multiple applications.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that addresses the issue by fixing the bugs in the exporter which failed to escape some characters properly.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, users that are looking to perform <code>import</code> operations must manually inspect the exported data for injected statements, prior to importing. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/cli/export">SurrealDB Documentation - Export</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/import">SurrealDB Documentation - Import</a>
<a href="https://surrealdb.com/docs/surrealdb/security/authentication">SurrealDB Documentation - Authentication</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42</a></li>
<li><a href="https://github.com/advisories/GHSA-ccj3-5p93-8p42">https://github.com/advisories/GHSA-ccj3-5p93-8p42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccj3-5p93-8p42</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-11T14:07:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB server-takeover via SurrealQL injection on backup import]]></title>
        <id>https://github.com/advisories/GHSA-ccj3-5p93-8p42</id>
        <link href="https://github.com/advisories/GHSA-ccj3-5p93-8p42"/>
        <updated>2025-04-11T14:07:36.000Z</updated>
        <content type="html"><![CDATA[<p>The SurrealDB command-line tool allows exporting databases through the <code>export</code> command. It was discovered that table or field names are not properly sanitized in exports, leading to a SurrealQL injection when the backup is reimported.</p>
<p>For the injection to occur, an authenticated System User with <code>OWNER</code> or <code>EDITOR</code> roles needs to create tables or fields with malicious names containing SurrealQL, subsequently exported using the <code>export</code> operation</p>
<p>The attacker could achieve a privilege escalation and root level access to the SurrealDB instance if a higher privileged user subsequently performs the <code>import</code> operation. </p>
<p>Furthermore, applications using SurrealDB that allow its users to define custom fields or tables are at risk of a universal second order SurrealQL injection, even if query parameters are properly sanitized. </p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Critical, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>This attack can be used to perform privilege escalation and complete takeover (root access) of the SurrealDB instance, as well as being able to perform SurrealQL injection attacks against co-tenanted applications where SurrealDB is used as a shared backend for multiple applications.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that addresses the issue by fixing the bugs in the exporter which failed to escape some characters properly.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>For SurrealDB users that are unable to upgrade, users that are looking to perform <code>import</code> operations must manually inspect the exported data for injected statements, prior to importing. </p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/cli/export">SurrealDB Documentation - Export</a>
<a href="https://surrealdb.com/docs/surrealdb/cli/import">SurrealDB Documentation - Import</a>
<a href="https://surrealdb.com/docs/surrealdb/security/authentication">SurrealDB Documentation - Authentication</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-ccj3-5p93-8p42</a></li>
<li><a href="https://github.com/advisories/GHSA-ccj3-5p93-8p42">https://github.com/advisories/GHSA-ccj3-5p93-8p42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccj3-5p93-8p42</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-11T14:07:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has local file read of 2-column TSV files via analyzers ]]></title>
        <id>https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</id>
        <link href="https://github.com/advisories/GHSA-2cvj-g5r5-jrrg"/>
        <updated>2025-04-10T21:08:51.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated system user at the root, namespace, or database levels can use the <code>DEFINE ANALYZER</code> statement to point to arbitrary file locations on the file system, and should the file be tab separated with two columns, the analyzer can be leveraged to exfiltrate the content.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Limited to unauthorised access to 2 column TSV files on the file system</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that introduces a new environment variable, <code>SURREAL_FILE_ALLOWLIST</code> , which contains a list of allowed file paths. When a mapping file is processed, the mapper checks if the file’s path is within one of the allowed paths.</p>
<ul>
<li>Versions 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to limit those with root, namespace, or database level users to trusted parties only.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/analyzer#define-analyzer-statement">SurrealQL Documentation - DEFINE ANALYZER</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5600">#5600</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5600">https://github.com/surrealdb/surrealdb/pull/5600</a></li>
<li><a href="https://github.com/advisories/GHSA-2cvj-g5r5-jrrg">https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-10T21:08:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has local file read of 2-column TSV files via analyzers ]]></title>
        <id>https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</id>
        <link href="https://github.com/advisories/GHSA-2cvj-g5r5-jrrg"/>
        <updated>2025-04-10T21:08:51.000Z</updated>
        <content type="html"><![CDATA[<p>An authenticated system user at the root, namespace, or database levels can use the <code>DEFINE ANALYZER</code> statement to point to arbitrary file locations on the file system, and should the file be tab separated with two columns, the analyzer can be leveraged to exfiltrate the content.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>Limited to unauthorised access to 2 column TSV files on the file system</p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that introduces a new environment variable, <code>SURREAL_FILE_ALLOWLIST</code> , which contains a list of allowed file paths. When a mapping file is processed, the mapper checks if the file’s path is within one of the allowed paths.</p>
<ul>
<li>Versions 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to limit those with root, namespace, or database level users to trusted parties only.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealql/statements/define/analyzer#define-analyzer-statement">SurrealQL Documentation - DEFINE ANALYZER</a>
<a href="https://github.com/surrealdb/surrealdb/pull/5600">#5600</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5600">https://github.com/surrealdb/surrealdb/pull/5600</a></li>
<li><a href="https://github.com/advisories/GHSA-2cvj-g5r5-jrrg">https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-10T21:08:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to memory exhaustion via nested functions and scripts]]></title>
        <id>https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</id>
        <link href="https://github.com/advisories/GHSA-m7rc-8w7m-r9qr"/>
        <updated>2025-04-10T21:08:01.000Z</updated>
        <content type="html"><![CDATA[<p>In order to prevent DoS situations due to infinite recursions, SurrealDB implements a limit of nested calls for both native functions and embedded JavaScript functions.</p>
<p>However, in SurrealDB instances with embedded scripting functions enabled, it was found that this limit can be circumvented by utilizing both at the same time. If a native function contains JavaScript which issues a new query that calls that function, the recursion limit is not triggered.</p>
<p>Once executed, SurrealDB will follow the path of infinite recursions until the system runs out of memory, prior to the recursion limit being triggered.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or 
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>For SurrealDB instances with embedded scripting functions enabled, this attack could be used to perform a DoS attack on the server by an authenticated user. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that further limits scripting function call limit recursion depth and disallows multiple calls to <code>surreadb.query()</code> to run in parallel in a scripting function.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr</a></li>
<li><a href="https://github.com/advisories/GHSA-m7rc-8w7m-r9qr">https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-10T21:07:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to memory exhaustion via nested functions and scripts]]></title>
        <id>https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</id>
        <link href="https://github.com/advisories/GHSA-m7rc-8w7m-r9qr"/>
        <updated>2025-04-10T21:08:01.000Z</updated>
        <content type="html"><![CDATA[<p>In order to prevent DoS situations due to infinite recursions, SurrealDB implements a limit of nested calls for both native functions and embedded JavaScript functions.</p>
<p>However, in SurrealDB instances with embedded scripting functions enabled, it was found that this limit can be circumvented by utilizing both at the same time. If a native function contains JavaScript which issues a new query that calls that function, the recursion limit is not triggered.</p>
<p>Once executed, SurrealDB will follow the path of infinite recursions until the system runs out of memory, prior to the recursion limit being triggered.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or 
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>For SurrealDB instances with embedded scripting functions enabled, this attack could be used to perform a DoS attack on the server by an authenticated user. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that further limits scripting function call limit recursion depth and disallows multiple calls to <code>surreadb.query()</code> to run in parallel in a scripting function.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr</a></li>
<li><a href="https://github.com/advisories/GHSA-m7rc-8w7m-r9qr">https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-10T21:07:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to memory exhaustion via nested functions and scripts]]></title>
        <id>https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</id>
        <link href="https://github.com/advisories/GHSA-m7rc-8w7m-r9qr"/>
        <updated>2025-04-10T21:08:01.000Z</updated>
        <content type="html"><![CDATA[<p>In order to prevent DoS situations due to infinite recursions, SurrealDB implements a limit of nested calls for both native functions and embedded JavaScript functions.</p>
<p>However, in SurrealDB instances with embedded scripting functions enabled, it was found that this limit can be circumvented by utilizing both at the same time. If a native function contains JavaScript which issues a new query that calls that function, the recursion limit is not triggered.</p>
<p>Once executed, SurrealDB will follow the path of infinite recursions until the system runs out of memory, prior to the recursion limit being triggered.</p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or 
<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>
<h3 id="impact">Impact</h3>
<p>For SurrealDB instances with embedded scripting functions enabled, this attack could be used to perform a DoS attack on the server by an authenticated user. </p>
<h3 id="patches">Patches</h3>
<p>A patch has been created that further limits scripting function call limit recursion depth and disallows multiple calls to <code>surreadb.query()</code> to run in parallel in a scripting function.</p>
<ul>
<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Deny execution of embedded scripting functions through the configuration of <a href="https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>
<h3 id="references">References</h3>
<p><a href="https://surrealdb.com/docs/surrealdb/security/capabilities">SurrealDB Documentation - Capabilities</a>
<a href="https://surrealdb.com/docs/surrealql/functions/script">SurrealQL Documentation - Scripting Functions</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr</a></li>
<li><a href="https://github.com/advisories/GHSA-m7rc-8w7m-r9qr">https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-10T21:07:44.000Z</published>
    </entry>
</feed>