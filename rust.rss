<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-12-04T00:05:04.946Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[ruzstd] `ruzstd` uninit and out-of-bounds memory reads]]></title>
        <id>https://github.com/advisories/GHSA-x3f4-45xf-rjm7</id>
        <link href="https://github.com/advisories/GHSA-x3f4-45xf-rjm7"/>
        <updated>2024-12-02T21:34:27.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>ruzstd</code> miscalculate the length of the allocated and init section of its internal <code>RingBuffer</code>, leading to uninitialized or out-of-bounds reads in <code>copy_bytes_overshooting</code> of up to 15 bytes.</p>
<p>This may result in up to 15 bytes of memory contents being written into the decoded data when decompressing a crafted archive. This may occur multiple times per archive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KillingSpark/zstd-rs/issues/75">https://github.com/KillingSpark/zstd-rs/issues/75</a></li>
<li><a href="https://github.com/KillingSpark/zstd-rs/pull/76">https://github.com/KillingSpark/zstd-rs/pull/76</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0400.html">https://rustsec.org/advisories/RUSTSEC-2024-0400.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x3f4-45xf-rjm7">https://github.com/advisories/GHSA-x3f4-45xf-rjm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3f4-45xf-rjm7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:34:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_doc] deno_doc's HTML generator vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-qqwr-j9mm-fhw6</id>
        <link href="https://github.com/advisories/GHSA-qqwr-j9mm-fhw6"/>
        <updated>2024-11-25T21:46:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Several cross-site scripting vulnerabilities existed in the <code>deno_doc</code> crate which lead to Self-XSS with <code>deno doc --html</code>.</p>
<h3 id="details--poc">Details &amp; PoC</h3>
<p>1.) XSS in generated <code>search_index.js</code></p>
<p><code>deno_doc</code> outputed a JavaScript file for searching. However, the generated file used <code>innerHTML</code> on unsanitzed HTML input.</p>
<p><a href="https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144">https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144</a></p>
<p>2.) XSS via property, method and enum names</p>
<p><code>deno_doc</code> did not sanitize property names, method names and enum names.</p>
<h3 id="impact">Impact</h3>
<p>The first XSS most likely didn't have an impact since <code>deno doc --html</code> is expected to be used locally with own packages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-qqwr-j9mm-fhw6">https://github.com/denoland/deno/security/advisories/GHSA-qqwr-j9mm-fhw6</a></li>
<li><a href="https://github.com/denoland/deno_doc/commit/0f1ef3efbf16194730a29d93dcb9c02f6c490942">https://github.com/denoland/deno_doc/commit/0f1ef3efbf16194730a29d93dcb9c02f6c490942</a></li>
<li><a href="https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144">https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32468">https://nvd.nist.gov/vuln/detail/CVE-2024-32468</a></li>
<li><a href="https://github.com/advisories/GHSA-qqwr-j9mm-fhw6">https://github.com/advisories/GHSA-qqwr-j9mm-fhw6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qqwr-j9mm-fhw6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-25T19:34:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rustls] rustls network-reachable panic in `Acceptor::accept`]]></title>
        <id>https://github.com/advisories/GHSA-qg5g-gv98-5ffh</id>
        <link href="https://github.com/advisories/GHSA-qg5g-gv98-5ffh"/>
        <updated>2024-11-25T16:57:36.000Z</updated>
        <content type="html"><![CDATA[<p>A bug introduced in rustls 0.23.13 leads to a panic if the received TLS ClientHello is fragmented.  Only servers that use <code>rustls::server::Acceptor::accept()</code> are affected.</p>
<p>Servers that use <code>tokio-rustls</code>'s <code>LazyConfigAcceptor</code> API are affected.</p>
<p>Servers that use <code>tokio-rustls</code>'s <code>TlsAcceptor</code> API are not affected.</p>
<p>Servers that use <code>rustls-ffi</code>'s <code>rustls_acceptor_accept</code> API are affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustls/rustls/issues/2227">https://github.com/rustls/rustls/issues/2227</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0399.html">https://rustsec.org/advisories/RUSTSEC-2024-0399.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qg5g-gv98-5ffh">https://github.com/advisories/GHSA-qg5g-gv98-5ffh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qg5g-gv98-5ffh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-25T16:57:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2024-11-25T13:49:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>
<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide-core] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2024-11-25T13:49:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>
<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB has an Uncaught Exception Sorting Tables by Random Order]]></title>
        <id>https://github.com/advisories/GHSA-m52v-24p8-654f</id>
        <link href="https://github.com/advisories/GHSA-m52v-24p8-654f"/>
        <updated>2024-11-22T20:11:49.000Z</updated>
        <content type="html"><![CDATA[<p>Sorting table records using an <code>ORDER BY</code> clause with the <code>rand()</code> function as sorting mechanism could cause a panic due to relying on a comparison function that did not implement total order. This event resulted in a panic due to a recent <a href="https://blog.rust-lang.org/2024/09/05/Rust-1.81.0.html#new-sort-implementations">change in Rust 1.81</a>.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server would be able to query a table with <code>ORDER BY rand()</code> in order to potentially cause a panic in the sorting function. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<p>The sorting algorithm has been updated to guarantee total order when shuffling records.</p>
<ul>
<li>Version 2.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/issues/4969">https://github.com/surrealdb/surrealdb/issues/4969</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4989">https://github.com/surrealdb/surrealdb/pull/4989</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4805">https://github.com/surrealdb/surrealdb/pull/4805</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4906">https://github.com/surrealdb/surrealdb/pull/4906</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/4969">https://github.com/surrealdb/surrealdb/issues/4969</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4805">https://github.com/surrealdb/surrealdb/pull/4805</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4906">https://github.com/surrealdb/surrealdb/pull/4906</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4989">https://github.com/surrealdb/surrealdb/pull/4989</a></li>
<li><a href="https://github.com/advisories/GHSA-m52v-24p8-654f">https://github.com/advisories/GHSA-m52v-24p8-654f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m52v-24p8-654f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-22T20:11:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has an Uncaught Exception Sorting Tables by Random Order]]></title>
        <id>https://github.com/advisories/GHSA-m52v-24p8-654f</id>
        <link href="https://github.com/advisories/GHSA-m52v-24p8-654f"/>
        <updated>2024-11-22T20:11:49.000Z</updated>
        <content type="html"><![CDATA[<p>Sorting table records using an <code>ORDER BY</code> clause with the <code>rand()</code> function as sorting mechanism could cause a panic due to relying on a comparison function that did not implement total order. This event resulted in a panic due to a recent <a href="https://blog.rust-lang.org/2024/09/05/Rust-1.81.0.html#new-sort-implementations">change in Rust 1.81</a>.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server would be able to query a table with <code>ORDER BY rand()</code> in order to potentially cause a panic in the sorting function. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<p>The sorting algorithm has been updated to guarantee total order when shuffling records.</p>
<ul>
<li>Version 2.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/issues/4969">https://github.com/surrealdb/surrealdb/issues/4969</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4989">https://github.com/surrealdb/surrealdb/pull/4989</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4805">https://github.com/surrealdb/surrealdb/pull/4805</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4906">https://github.com/surrealdb/surrealdb/pull/4906</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/4969">https://github.com/surrealdb/surrealdb/issues/4969</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4805">https://github.com/surrealdb/surrealdb/pull/4805</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4906">https://github.com/surrealdb/surrealdb/pull/4906</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4989">https://github.com/surrealdb/surrealdb/pull/4989</a></li>
<li><a href="https://github.com/advisories/GHSA-m52v-24p8-654f">https://github.com/advisories/GHSA-m52v-24p8-654f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m52v-24p8-654f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-22T20:11:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB has an Uncaught Exception Handling Nonexistent Role]]></title>
        <id>https://github.com/advisories/GHSA-jc55-246c-r88f</id>
        <link href="https://github.com/advisories/GHSA-jc55-246c-r88f"/>
        <updated>2024-11-22T20:11:45.000Z</updated>
        <content type="html"><![CDATA[<p>Roles for system users are stored as generic <code>Ident</code> values and converted as strings and into the <code>Role</code> enum whenever IAM operations are to be performed that require processing the user roles. This conversion expects those identifiers to only contain the values <code>owner</code>, <code>editor</code> and <code>viewer</code> and will return an error otherwise. However, the <code>unwrap()</code> method would be called on this result when implementing <code>std::convert::From&lt;&amp;Ident&gt; for Role</code>, which would result in a panic where a nonexistent role was used.</p>
<h3 id="impact">Impact</h3>
<p>A privileged user with the <code>owner</code> role at any level in SurrealDB would be able to define a user with <code>DEFINE USER</code> with an nonexistent role, which would panic when being converted to a <code>Role</code> enum in order to perform certain IAM operations with that user. These operations included signing in with the user. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<p>Unexistent roles are no longer accepted during parsing when defining a user. Even when successfully associated with a user, referencing unexistent roles will no longer result in a panic and will instead throw an <code>InvalidRole</code> error.</p>
<ul>
<li>Version 2.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit access to users with the <code>owner</code> role at any level to trusted parties only. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#5079</li>
<li>#5092</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5079">https://github.com/surrealdb/surrealdb/pull/5079</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5092">https://github.com/surrealdb/surrealdb/pull/5092</a></li>
<li><a href="https://github.com/advisories/GHSA-jc55-246c-r88f">https://github.com/advisories/GHSA-jc55-246c-r88f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jc55-246c-r88f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-22T20:11:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has an Uncaught Exception Handling Nonexistent Role]]></title>
        <id>https://github.com/advisories/GHSA-jc55-246c-r88f</id>
        <link href="https://github.com/advisories/GHSA-jc55-246c-r88f"/>
        <updated>2024-11-22T20:11:45.000Z</updated>
        <content type="html"><![CDATA[<p>Roles for system users are stored as generic <code>Ident</code> values and converted as strings and into the <code>Role</code> enum whenever IAM operations are to be performed that require processing the user roles. This conversion expects those identifiers to only contain the values <code>owner</code>, <code>editor</code> and <code>viewer</code> and will return an error otherwise. However, the <code>unwrap()</code> method would be called on this result when implementing <code>std::convert::From&lt;&amp;Ident&gt; for Role</code>, which would result in a panic where a nonexistent role was used.</p>
<h3 id="impact">Impact</h3>
<p>A privileged user with the <code>owner</code> role at any level in SurrealDB would be able to define a user with <code>DEFINE USER</code> with an nonexistent role, which would panic when being converted to a <code>Role</code> enum in order to perform certain IAM operations with that user. These operations included signing in with the user. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<p>Unexistent roles are no longer accepted during parsing when defining a user. Even when successfully associated with a user, referencing unexistent roles will no longer result in a panic and will instead throw an <code>InvalidRole</code> error.</p>
<ul>
<li>Version 2.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit access to users with the <code>owner</code> role at any level to trusted parties only. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#5079</li>
<li>#5092</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5079">https://github.com/surrealdb/surrealdb/pull/5079</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5092">https://github.com/surrealdb/surrealdb/pull/5092</a></li>
<li><a href="https://github.com/advisories/GHSA-jc55-246c-r88f">https://github.com/advisories/GHSA-jc55-246c-r88f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jc55-246c-r88f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-22T20:11:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB has an Uncaught Exception in Function Generating Random Time]]></title>
        <id>https://github.com/advisories/GHSA-h4f5-h82v-5w4r</id>
        <link href="https://github.com/advisories/GHSA-h4f5-h82v-5w4r"/>
        <updated>2024-11-22T20:11:39.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>rand::time()</code> function in SurrealQL generates a random time from an optional range of two Unix timestamps. Due to the underlying use of <code>timestamp_opt</code> from the <code>chrono</code> crate, this function could potentially return <code>None</code> in some instances, leading to a panic when <code>unwrap</code> was called on its result in order to return a SurrealQL <code>datetime</code> type to the caller of the function.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server would be able to make repeated (in the order of millions) calls to <code>rand::time()</code> in order to reliably trigger a panic. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<p>The function has been updated in to guarantee that some <code>datetime</code> is returned or that an error is otherwise gracefully handled.</p>
<ul>
<li>Version 2.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>rand::time()</code> function in the affected versions of SurrealDB using security capabilities. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#5126</li>
<li><a href="https://surrealdb.com/docs/surrealql/functions/database/rand#randtime">SurrealQL Documentation - Database Functions (<code>rand::time</code>)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Security Capabilities (Functions)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5126">https://github.com/surrealdb/surrealdb/pull/5126</a></li>
<li><a href="https://github.com/advisories/GHSA-h4f5-h82v-5w4r">https://github.com/advisories/GHSA-h4f5-h82v-5w4r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4f5-h82v-5w4r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-22T20:11:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has an Uncaught Exception in Function Generating Random Time]]></title>
        <id>https://github.com/advisories/GHSA-h4f5-h82v-5w4r</id>
        <link href="https://github.com/advisories/GHSA-h4f5-h82v-5w4r"/>
        <updated>2024-11-22T20:11:39.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>rand::time()</code> function in SurrealQL generates a random time from an optional range of two Unix timestamps. Due to the underlying use of <code>timestamp_opt</code> from the <code>chrono</code> crate, this function could potentially return <code>None</code> in some instances, leading to a panic when <code>unwrap</code> was called on its result in order to return a SurrealQL <code>datetime</code> type to the caller of the function.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server would be able to make repeated (in the order of millions) calls to <code>rand::time()</code> in order to reliably trigger a panic. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<p>The function has been updated in to guarantee that some <code>datetime</code> is returned or that an error is otherwise gracefully handled.</p>
<ul>
<li>Version 2.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>rand::time()</code> function in the affected versions of SurrealDB using security capabilities. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#5126</li>
<li><a href="https://surrealdb.com/docs/surrealql/functions/database/rand#randtime">SurrealQL Documentation - Database Functions (<code>rand::time</code>)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/capabilities#functions">SurrealDB Documentation - Security Capabilities (Functions)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5126">https://github.com/surrealdb/surrealdb/pull/5126</a></li>
<li><a href="https://github.com/advisories/GHSA-h4f5-h82v-5w4r">https://github.com/advisories/GHSA-h4f5-h82v-5w4r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4f5-h82v-5w4r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-22T20:11:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wrong type for `Linker`-define functions when used across two `Engine`s]]></title>
        <id>https://github.com/advisories/GHSA-q879-9g95-56mx</id>
        <link href="https://github.com/advisories/GHSA-q879-9g95-56mx"/>
        <updated>2024-11-19T18:05:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>As a Rust library the <code>wasmtime</code> crate clearly marks which functions are safe and which are <code>unsafe</code>, guaranteeing that if consumers never use <code>unsafe</code> then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of <code>Linker::func_*</code> APIs. These APIs were previously not sound when one <code>Engine</code> was used to create the <code>Linker</code> and then a different <code>Engine</code> was used to create a <code>Store</code> and then the <code>Linker</code> was used to instantiate a module into that <code>Store</code>. Cross-<code>Engine</code> usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type.</p>
<p>Triggering this bug requires using at least two <code>Engine</code> values in an embedding and then additionally using two different values with a <code>Linker</code> (one at the creation time of the <code>Linker</code> and another when instantiating a module with the <code>Linker</code>).</p>
<p>It's expected that usage of more-than-one <code>Engine</code> in an embedding is relatively rare since an <code>Engine</code> is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small.</p>
<p>The fix implemented is to change this behavior to <code>panic!()</code> in Rust instead of silently allowing it. Using different <code>Engine</code> instances with a <code>Linker</code> is a programmer bug that <code>wasmtime</code> catches at runtime.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime and are using more than one <code>Engine</code> in your embedding it's recommended to instead use only one <code>Engine</code> for the entire program if possible. An <code>Engine</code> is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple <code>Engine</code>s is required then code should be audited to ensure that <code>Linker</code> is only used with one <code>Engine</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/b39f087414f27ae40c44449ed5d1154e03449bff">https://github.com/bytecodealliance/wasmtime/commit/b39f087414f27ae40c44449ed5d1154e03449bff</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39219">https://nvd.nist.gov/vuln/detail/CVE-2021-39219</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-322.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-322.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>
<li><a href="https://github.com/advisories/GHSA-q879-9g95-56mx">https://github.com/advisories/GHSA-q879-9g95-56mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q879-9g95-56mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Out-of-bounds read/write and invalid free with `externref`s and GC safepoints in Wasmtime ]]></title>
        <id>https://github.com/advisories/GHSA-4873-36h9-wv49</id>
        <link href="https://github.com/advisories/GHSA-4873-36h9-wv49"/>
        <updated>2024-11-19T18:04:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was an invalid free and out-of-bounds read and write bug when running Wasm that uses <code>externref</code>s in Wasmtime.</p>
<p>To trigger this bug, Wasmtime needs to be running Wasm that uses <code>externref</code>s, the host creates non-null <code>externrefs</code>, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where</p>
<ul>
<li>there are no live references at this safepoint, and</li>
<li>there is a safepoint with live references earlier in this frame's function.</li>
</ul>
<p>Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as <code>externref</code>s that needed to be rooted for GC. At the <em>next</em> GC, it would be determined that nothing was referencing these bogus <code>externref</code>s (because nothing could ever reference them, because they are not really <code>externref</code>s) and then Wasmtime would deallocate them and run <code>&lt;ExternRef as Drop&gt;::drop</code> on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes.</p>
<p>Even though support for <code>externref</code>s (via the reference types proposal) is enabled by default, unless you are creating non-null <code>externref</code>s in your host code or explicitly triggering GCs, you cannot be affected by this bug.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>
<p>Additionally, we have updated <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing <code>false</code> to <a href="https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types"><code>wasmtime::Config::wasm_reference_types</code></a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WebAssembly/reference-types/">The Wasm reference types proposal, which introduces <code>externref</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c">https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39218">https://nvd.nist.gov/vuln/detail/CVE-2021-39218</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-321.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-321.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>
<li><a href="https://github.com/advisories/GHSA-4873-36h9-wv49">https://github.com/advisories/GHSA-4873-36h9-wv49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4873-36h9-wv49</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free passing `externref`s to Wasm in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-v4cp-h94r-m7xf</id>
        <link href="https://github.com/advisories/GHSA-v4cp-h94r-m7xf"/>
        <updated>2024-11-19T18:00:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was a use-after-free bug when passing <code>externref</code>s from the host to guest Wasm content.</p>
<p>To trigger the bug, you have to explicitly pass multiple <code>externref</code>s from the host to a Wasm instance at the same time, either by</p>
<ul>
<li>passing multiple <code>externref</code>s as arguments from host code to a Wasm function,</li>
<li>or returning multiple <code>externref</code>s to Wasm from a multi-value return function defined in the host.</li>
</ul>
<p>If you do not have host code that matches one of these shapes, then you are not impacted.</p>
<p>If Wasmtime's <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/crates/runtime/src/externref.rs#L493"><code>VMExternRefActivationsTable</code></a> became filled to capacity after passing the first <code>externref</code> in, then passing in the second <code>externref</code> could trigger a garbage collection. However the first <code>externref</code> is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first <code>externref</code>, which at this point has already been freed.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed, and users should upgrade to Wasmtime 0.30.0.</p>
<p>Additionally, we have updated <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing <code>false</code> to <a href="https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types"><code>wasmtime::Config::wasm_reference_types</code></a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WebAssembly/reference-types/">The reference types Wasm proposal, which introduces <code>externref</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3">https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39216">https://nvd.nist.gov/vuln/detail/CVE-2021-39216</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-320.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-320.yaml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>
<li><a href="https://github.com/advisories/GHSA-v4cp-h94r-m7xf">https://github.com/advisories/GHSA-v4cp-h94r-m7xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4cp-h94r-m7xf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sharks] Sharks has a Bias of Polynomial Coefficients in Secret Sharing]]></title>
        <id>https://github.com/advisories/GHSA-jp37-5qhw-mffw</id>
        <link href="https://github.com/advisories/GHSA-jp37-5qhw-mffw"/>
        <updated>2024-11-18T20:03:26.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate allowed for a bias when generating random polynomials for Shamir Secret Sharing, where instead of being within the range <code>[0, 255]</code> they were instead in the range <code>[1, 255]</code>. A description from Cure53, who originally found the issue, is available:</p>
<blockquote>
<p>The correct method to select a random polynomial would be to select all coefficients (including the most significant coefficient) uniformly in the range 0..255 (inclusive). Otherwise, knowledge that a coefficient in a polynomial cannot be 0 permits the exclusion of single byte values for the shared secret given one share less than required. [...] Exploiting this weakness necessitates sharing the same secret multiple times. In this scenario, an attacker could exclude an exponential number of values for each of the shared bytes until sufficiently few values remain for brute forcing.  Cure53 estimates that under ideal circumstances (e.g., a 2-out-of-N scheme) a shared secret can be reconstructed if the same secret has been distributed 500-1500 times.</p>
</blockquote>
<p>Secrets that have been shared a low amount of times (ideally, once) would not be impacted. However, secrets that are repeatedly shared may be vulnerable, especially if the shares are still available, and should be rotated.</p>
<p>The vulnerability does not impact reconstitution of secrets: secrets that have already been split can be recombined without issue.</p>
<p>The flaw can be corrected by changing the lower bound of the polynomial coefficient range in the <code>sharks::math::random_polynomial</code> function to <code>0</code>. The <code>blahaj</code> crate has been made available with a fixed version of the code, after attempts to reach the maintainer of the <code>sharks</code> crate were unsuccessful.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://git.distrust.co/public/blahaj/commit/4faab1cd33d455f0ca2ccc7208093fd6c18e0767">https://git.distrust.co/public/blahaj/commit/4faab1cd33d455f0ca2ccc7208093fd6c18e0767</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0398.html">https://rustsec.org/advisories/RUSTSEC-2024-0398.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jp37-5qhw-mffw">https://github.com/advisories/GHSA-jp37-5qhw-mffw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jp37-5qhw-mffw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-18T20:03:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libz-rs-sys-cdylib] zlib-rs stack overflow during decompression with malicious input]]></title>
        <id>https://github.com/advisories/GHSA-j3px-q95c-9683</id>
        <link href="https://github.com/advisories/GHSA-j3px-q95c-9683"/>
        <updated>2024-11-14T18:09:34.000Z</updated>
        <content type="html"><![CDATA[<p>A denial of service vulnerability was found in zlib-rs, triggered by specially constructed input. This input causes a stack overflow, resulting in the process using zlib-rs to crash.</p>
<h3 id="impact">Impact</h3>
<p>Due to the way LLVM handles the zlib-rs codebase, tail calls were not guaranteed. This caused certain input patterns to result in a large number of stack frames being required, quickly resulting in a stack overflow. These are unlikely to occur in practice, but a dedicated attacker can construct malicious input files.</p>
<p>After stack overflows were found by @inahga with a fuzzer, we dove into the assembly, and found some cases where the stack grew</p>
<pre><code class="language-asm">.LBB109_326:
    mov rdi, rbx
    call zlib_rs::inflate::State::type_do
    jmp .LBB109_311

.LBB109_311:
    lea rsp, [rbp - 40]
    pop rbx
    pop r12
    pop r13
    pop r14
    pop r15
    pop rbp
    .cfi_def_cfa rsp, 8
    ret
</code></pre>
<p>LLVM wants to centralize the cleanup before the return (many other blocks jump to <code>LBB109_311</code>), thereby invalidating a tail call to <code>type_do</code>. We were not able to get rid of this call without introducing one elsewhere: we just don't currently have the power to tell LLVM what we want it to do.</p>
<p>So, we switch back to loop+match waiting for changes to rust to make a more efficient implementation possible. Performance-wise, the damage is relatively minimal: we're just slower in cases where we already were slower than C. We are faster in cases where the relevant code is barely touched (in these cases the logic quickly moves into a hot inner loop and just spends most of its time there).</p>
<h3 id="patches">Patches</h3>
<p>Version 0.4.0 patches the problem and is no longer vulnerable.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users of zlib-rs should upgrade to the latest version. Users could alternatively run zlib-rs in a separate process to prevent a stack overflow crashing the entire program. In some situations a signal handler can be used to catch a stack overflow happening.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trifectatechfoundation/zlib-rs/security/advisories/GHSA-j3px-q95c-9683">https://github.com/trifectatechfoundation/zlib-rs/security/advisories/GHSA-j3px-q95c-9683</a></li>
<li><a href="https://github.com/advisories/GHSA-j3px-q95c-9683">https://github.com/advisories/GHSA-j3px-q95c-9683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3px-q95c-9683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-14T18:09:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libz-rs-sys] zlib-rs stack overflow during decompression with malicious input]]></title>
        <id>https://github.com/advisories/GHSA-j3px-q95c-9683</id>
        <link href="https://github.com/advisories/GHSA-j3px-q95c-9683"/>
        <updated>2024-11-14T18:09:34.000Z</updated>
        <content type="html"><![CDATA[<p>A denial of service vulnerability was found in zlib-rs, triggered by specially constructed input. This input causes a stack overflow, resulting in the process using zlib-rs to crash.</p>
<h3 id="impact">Impact</h3>
<p>Due to the way LLVM handles the zlib-rs codebase, tail calls were not guaranteed. This caused certain input patterns to result in a large number of stack frames being required, quickly resulting in a stack overflow. These are unlikely to occur in practice, but a dedicated attacker can construct malicious input files.</p>
<p>After stack overflows were found by @inahga with a fuzzer, we dove into the assembly, and found some cases where the stack grew</p>
<pre><code class="language-asm">.LBB109_326:
    mov rdi, rbx
    call zlib_rs::inflate::State::type_do
    jmp .LBB109_311

.LBB109_311:
    lea rsp, [rbp - 40]
    pop rbx
    pop r12
    pop r13
    pop r14
    pop r15
    pop rbp
    .cfi_def_cfa rsp, 8
    ret
</code></pre>
<p>LLVM wants to centralize the cleanup before the return (many other blocks jump to <code>LBB109_311</code>), thereby invalidating a tail call to <code>type_do</code>. We were not able to get rid of this call without introducing one elsewhere: we just don't currently have the power to tell LLVM what we want it to do.</p>
<p>So, we switch back to loop+match waiting for changes to rust to make a more efficient implementation possible. Performance-wise, the damage is relatively minimal: we're just slower in cases where we already were slower than C. We are faster in cases where the relevant code is barely touched (in these cases the logic quickly moves into a hot inner loop and just spends most of its time there).</p>
<h3 id="patches">Patches</h3>
<p>Version 0.4.0 patches the problem and is no longer vulnerable.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users of zlib-rs should upgrade to the latest version. Users could alternatively run zlib-rs in a separate process to prevent a stack overflow crashing the entire program. In some situations a signal handler can be used to catch a stack overflow happening.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trifectatechfoundation/zlib-rs/security/advisories/GHSA-j3px-q95c-9683">https://github.com/trifectatechfoundation/zlib-rs/security/advisories/GHSA-j3px-q95c-9683</a></li>
<li><a href="https://github.com/advisories/GHSA-j3px-q95c-9683">https://github.com/advisories/GHSA-j3px-q95c-9683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3px-q95c-9683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-14T18:09:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zlib-rs] zlib-rs stack overflow during decompression with malicious input]]></title>
        <id>https://github.com/advisories/GHSA-j3px-q95c-9683</id>
        <link href="https://github.com/advisories/GHSA-j3px-q95c-9683"/>
        <updated>2024-11-14T18:09:34.000Z</updated>
        <content type="html"><![CDATA[<p>A denial of service vulnerability was found in zlib-rs, triggered by specially constructed input. This input causes a stack overflow, resulting in the process using zlib-rs to crash.</p>
<h3 id="impact">Impact</h3>
<p>Due to the way LLVM handles the zlib-rs codebase, tail calls were not guaranteed. This caused certain input patterns to result in a large number of stack frames being required, quickly resulting in a stack overflow. These are unlikely to occur in practice, but a dedicated attacker can construct malicious input files.</p>
<p>After stack overflows were found by @inahga with a fuzzer, we dove into the assembly, and found some cases where the stack grew</p>
<pre><code class="language-asm">.LBB109_326:
    mov rdi, rbx
    call zlib_rs::inflate::State::type_do
    jmp .LBB109_311

.LBB109_311:
    lea rsp, [rbp - 40]
    pop rbx
    pop r12
    pop r13
    pop r14
    pop r15
    pop rbp
    .cfi_def_cfa rsp, 8
    ret
</code></pre>
<p>LLVM wants to centralize the cleanup before the return (many other blocks jump to <code>LBB109_311</code>), thereby invalidating a tail call to <code>type_do</code>. We were not able to get rid of this call without introducing one elsewhere: we just don't currently have the power to tell LLVM what we want it to do.</p>
<p>So, we switch back to loop+match waiting for changes to rust to make a more efficient implementation possible. Performance-wise, the damage is relatively minimal: we're just slower in cases where we already were slower than C. We are faster in cases where the relevant code is barely touched (in these cases the logic quickly moves into a hot inner loop and just spends most of its time there).</p>
<h3 id="patches">Patches</h3>
<p>Version 0.4.0 patches the problem and is no longer vulnerable.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users of zlib-rs should upgrade to the latest version. Users could alternatively run zlib-rs in a separate process to prevent a stack overflow crashing the entire program. In some situations a signal handler can be used to catch a stack overflow happening.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trifectatechfoundation/zlib-rs/security/advisories/GHSA-j3px-q95c-9683">https://github.com/trifectatechfoundation/zlib-rs/security/advisories/GHSA-j3px-q95c-9683</a></li>
<li><a href="https://github.com/advisories/GHSA-j3px-q95c-9683">https://github.com/advisories/GHSA-j3px-q95c-9683</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3px-q95c-9683</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-14T18:09:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-tls] s2n-tls has undefined behavior at process exit]]></title>
        <id>https://github.com/advisories/GHSA-rp9h-rf7g-hwgr</id>
        <link href="https://github.com/advisories/GHSA-rp9h-rf7g-hwgr"/>
        <updated>2024-11-14T15:45:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>s2n-tls uses the Linux atexit function to register functions that clean up the global state when the process exits. In multi-threaded environments, the atexit handler may clean up state which is still in use by other threads. When this occurs, the exiting process may experience a segmentation fault or other undefined behavior. </p>
<p>Customers of AWS services do not need to take action. Applications using s2n-tls should upgrade to the most recent release of s2n-tls.</p>
<p><strong>Impacted versions</strong>: &lt; v1.5.9.</p>
<h3 id="patches">Patches</h3>
<p>The patch commit <a href="https://github.com/aws/s2n-tls/commit/493b77167dc367c394de23cfe78a029298e2a254">493b771</a> is included in s2n-tls v1.5.9 [1]</p>
<h3 id="workarounds">Workarounds</h3>
<p>The atexit handler may be disabled by calling <code>s2n_disable_atexit()</code> prior to initializing s2n-tls. The atexit handler is off by default in the patched versions. For further details, refer to <a href="https://github.com/aws/s2n-tls/blob/main/docs/usage-guide/topics/ch02-initialization.md">s2n-tls Usage Guide: Initialization and Teardown</a>.</p>
<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our vulnerability reporting page [2] or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<p>[1] <a href="https://github.com/aws/s2n-tls/releases/tag/v1.5.9">https://github.com/aws/s2n-tls/releases/tag/v1.5.9</a>
[2] Vulnerability reporting page: <a href="https://aws.amazon.com/security/vulnerability-reporting">https://aws.amazon.com/security/vulnerability-reporting</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-tls/security/advisories/GHSA-rp9h-rf7g-hwgr">https://github.com/aws/s2n-tls/security/advisories/GHSA-rp9h-rf7g-hwgr</a></li>
<li><a href="https://github.com/aws/s2n-tls/commit/493b77167dc367c394de23cfe78a029298e2a254">https://github.com/aws/s2n-tls/commit/493b77167dc367c394de23cfe78a029298e2a254</a></li>
<li><a href="https://github.com/aws/s2n-tls/releases/tag/v1.5.9">https://github.com/aws/s2n-tls/releases/tag/v1.5.9</a></li>
<li><a href="https://github.com/advisories/GHSA-rp9h-rf7g-hwgr">https://github.com/advisories/GHSA-rp9h-rf7g-hwgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rp9h-rf7g-hwgr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-14T15:45:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mimalloc] Mimalloc Can Allocate Memory with Bad Alignment]]></title>
        <id>https://github.com/advisories/GHSA-g23h-7vf9-xc25</id>
        <link href="https://github.com/advisories/GHSA-g23h-7vf9-xc25"/>
        <updated>2024-11-12T21:21:37.000Z</updated>
        <content type="html"><![CDATA[<p>This crate depended on a promise regarding alignments made by the author of the mimalloc allocator to avoid using aligned allocation functions where possible for performance reasons.
Since then, the mimalloc allocator's logic changed, making it break this promise.
This caused this crate to return memory with an incorrect alignment for some allocations, particularly those with large alignments.
The flaw was fixed by always using the aligned allocation functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/purpleprotocol/mimalloc_rust/issues/87">https://github.com/purpleprotocol/mimalloc_rust/issues/87</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0094.html">https://rustsec.org/advisories/RUSTSEC-2022-0094.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g23h-7vf9-xc25">https://github.com/advisories/GHSA-g23h-7vf9-xc25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g23h-7vf9-xc25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-12T21:21:36.000Z</published>
    </entry>
</feed>