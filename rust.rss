<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-12-25T11:01:15.683Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[glib] Unsoundness in `Iterator` and `DoubleEndedIterator` impls for `glib::VariantStrIter`]]></title>
        <id>https://github.com/advisories/GHSA-wrw7-89jp-8q8g</id>
        <link href="https://github.com/advisories/GHSA-wrw7-89jp-8q8g"/>
        <updated>2024-12-23T20:19:26.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>VariantStrIter::impl_get</code> function (called internally by implementations of the <code>Iterator</code> and <code>DoubleEndedIterator</code> traits for this type) was unsound, resulting in undefined behaviour.</p>
<p>An immutable reference <code>&amp;p</code> to a <code>*mut libc::c_char</code> pointer initialized to <code>NULL</code> was passed as an argument to a C function that that mutates the pointer behind <code>&amp;p</code> in-place (i.e. as an out-argument), which was unsound. After changes in recent versions of the Rust compiler, these unsound writes through <code>&amp;p</code> now seem to be completely disregarded when building the <code>glib</code> crate with optimizations.</p>
<p>This subsequently caused all calls of <code>VariantStrIter::impl_get</code> to violate the safety requirements of the <code>std::ffi::CStr::from_ptr</code> function - which requires its argument to be a valid pointer to a C-style string - resulting in crashes due to <code>NULL</code> pointer dereferences.</p>
<p>This was fixed by passing the out-argument pointer explitly as <code>&amp;mut p</code> instead of <code>&amp;p</code>.</p>
<p>This issue has been present since this code was initially added in <code>glib</code> v0.15.0. The mismatch in mutability was likely missed (and not raised as an error by the compiler) because the C function wrapped by <code>VariantStrIter::impl_get</code> is variadic (<code>glib_sys::g_variant_get_child</code>), and the pointer in question is one of the variadic arguments.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gtk-rs/gtk-rs-core/pull/1343">https://github.com/gtk-rs/gtk-rs-core/pull/1343</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0429.html">https://rustsec.org/advisories/RUSTSEC-2024-0429.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wrw7-89jp-8q8g">https://github.com/advisories/GHSA-wrw7-89jp-8q8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wrw7-89jp-8q8g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T20:19:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[spl-token-swap] Unsound usages of `u8` type casting in spl-token-swap]]></title>
        <id>https://github.com/advisories/GHSA-h6xm-c6r4-vmwf</id>
        <link href="https://github.com/advisories/GHSA-h6xm-c6r4-vmwf"/>
        <updated>2024-12-23T19:29:46.000Z</updated>
        <content type="html"><![CDATA[<p>The library provides a safe public API <code>unpack</code> to cast <code>u8</code> array to arbitrary types, which can cause to undefined behaviors. The length check of array can only prevent out-of-bound access on the return type. However, it can't prevent misaligned pointer when casting <code>u8</code> pointer to a type aligned to larger bytes. For example, if we assign <code>u16</code> to <code>T</code>, <strong>misaligned raw pointer dereference</strong> could happen and cause to panic. Even if we pass the type aligned to same byte as <code>u8</code> (e.g., <code>bool</code>), it could construct a illegal type since <code>bool</code> can only have 0 or 1 as bit patterns, which is also an undefined behavior. The further exploits of the bug here are still not clear, so we would report this issue as unsound.  </p>
<p>The details of PoC to reproduce undefined behavior are provided in the <a href="https://github.com/solana-labs/solana-program-library/issues/5243">issue</a>.  </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-program-library/issues/5243">https://github.com/solana-labs/solana-program-library/issues/5243</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0426.html">https://rustsec.org/advisories/RUSTSEC-2024-0426.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xm-c6r4-vmwf">https://github.com/advisories/GHSA-h6xm-c6r4-vmwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xm-c6r4-vmwf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T19:29:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libafl] libafl has unsound usages of `core::slice::from_raw_parts_mut` ]]></title>
        <id>https://github.com/advisories/GHSA-f7qj-v3vp-4856</id>
        <link href="https://github.com/advisories/GHSA-f7qj-v3vp-4856"/>
        <updated>2024-12-23T19:30:20.000Z</updated>
        <content type="html"><![CDATA[<p>The library breaks the safety assumptions when using unsafe API <code>slice::from_raw_parts_mut</code>. The pointer passed to <code>from_raw_parts_mut</code> is misaligned by casting <code>u8</code> to <code>u16</code> raw pointer directly, which is unsound. The bug is patched by using <code>align_offset</code>, which could make sure the memory address is aligned to 2 bytes for <code>u16</code>.  </p>
<p>This was patched in 0.11.2 in the <a href="https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d">commit</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AFLplusplus/LibAFL/issues/1526">https://github.com/AFLplusplus/LibAFL/issues/1526</a></li>
<li><a href="https://github.com/AFLplusplus/LibAFL/pull/1530">https://github.com/AFLplusplus/LibAFL/pull/1530</a></li>
<li><a href="https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d">https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d</a></li>
<li><a href="https://github.com/AFLplusplus/LibAFL/commit/f70a16a09a8096d3c50159dd8a912a75c2af157c">https://github.com/AFLplusplus/LibAFL/commit/f70a16a09a8096d3c50159dd8a912a75c2af157c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0424.html">https://rustsec.org/advisories/RUSTSEC-2024-0424.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f7qj-v3vp-4856">https://github.com/advisories/GHSA-f7qj-v3vp-4856</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f7qj-v3vp-4856</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T19:28:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kvm-ioctls] Undefined behaviour in `kvm_ioctls::ioctls::vm::VmFd::create_device`]]></title>
        <id>https://github.com/advisories/GHSA-3qx8-rv27-j6gp</id>
        <link href="https://github.com/advisories/GHSA-3qx8-rv27-j6gp"/>
        <updated>2024-12-23T19:26:38.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was identified in the <code>VmFd::create_device function</code>, leading to undefined behavior and miscompilations on rustc 1.82.0 and newer due to the function's violation of Rust's pointer safety rules.</p>
<p>The function downcasted a mutable reference to its <code>struct kvm_create_device</code> argument to an immutable pointer, and then proceeded to pass this pointer to a mutating system call. Rustc 1.82.0 and newer elides subsequent reads of this structure's fields, meaning code will not see the value written by the kernel into the <code>fd</code> member. Instead, the code will observe the value that this field was initialized to prior to calling <code>VmFd::create_device</code> (usually, 0).</p>
<p>The issue started in kvm-ioctls 0.1.0 and was fixed in 0.19.1 by correctly using
a mutable pointer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-vmm/kvm/pull/298">https://github.com/rust-vmm/kvm/pull/298</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0428.html">https://rustsec.org/advisories/RUSTSEC-2024-0428.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3qx8-rv27-j6gp">https://github.com/advisories/GHSA-3qx8-rv27-j6gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qx8-rv27-j6gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T19:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2024-12-18T18:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB has Silent Failure to Overwrite Table Definition of Relation Type]]></title>
        <id>https://github.com/advisories/GHSA-27vq-hv74-7cqp</id>
        <link href="https://github.com/advisories/GHSA-27vq-hv74-7cqp"/>
        <updated>2024-12-18T17:18:20.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>OVERWRITE</code> clause of the <code>DEFINE TABLE</code> statement would fail to overwrite data for tables that were defined with <code>TYPE RELATION</code>. Since table definitions include the <code>PERMISSIONS</code> clause, this failure would result in permissions not being overwritten as a result, which may potentially lead users to believe they have changed the table permissions when they have not.</p>
<h3 id="impact">Impact</h3>
<p>If a user attempted to update table permissions of a table defined with <code>TYPE RELATION</code> using <code>DEFINE TABLE ... OVERWRITE</code>, permissions for the table would not be changed. This may allow a client that is authorized to run queries in a SurrealDB server to access certain data in that specific table that they were not intended to be able to access after the specified change in permissions.</p>
<h3 id="patches">Patches</h3>
<p>The <code>DEFINE TABLE</code> statement has been updated to appropriately overwrite data for tables defined with <code>TYPE RELATION</code>.</p>
<ul>
<li>Version 2.1.4 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users of tables with <code>TYPE RELATION</code> that may have been modified using the <code>OVERWRITE</code> clause in order to update permissions are advised to verify that the intended permissions are in place using the <code>INFO FOR DB</code> statement. Affected users who are unable to update and require updating permissions in a table with <code>TYPE RELATION</code> will be required to remove the table and define it from scratch with the intended permissions. Data can be preserved by backing it up to a temporary table.</p>
<h3 id="references">References</h3>
<ul>
<li>#5260</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5260">https://github.com/surrealdb/surrealdb/pull/5260</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734">https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734</a></li>
<li><a href="https://github.com/advisories/GHSA-27vq-hv74-7cqp">https://github.com/advisories/GHSA-27vq-hv74-7cqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vq-hv74-7cqp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-16T17:38:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has Silent Failure to Overwrite Table Definition of Relation Type]]></title>
        <id>https://github.com/advisories/GHSA-27vq-hv74-7cqp</id>
        <link href="https://github.com/advisories/GHSA-27vq-hv74-7cqp"/>
        <updated>2024-12-18T17:18:20.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>OVERWRITE</code> clause of the <code>DEFINE TABLE</code> statement would fail to overwrite data for tables that were defined with <code>TYPE RELATION</code>. Since table definitions include the <code>PERMISSIONS</code> clause, this failure would result in permissions not being overwritten as a result, which may potentially lead users to believe they have changed the table permissions when they have not.</p>
<h3 id="impact">Impact</h3>
<p>If a user attempted to update table permissions of a table defined with <code>TYPE RELATION</code> using <code>DEFINE TABLE ... OVERWRITE</code>, permissions for the table would not be changed. This may allow a client that is authorized to run queries in a SurrealDB server to access certain data in that specific table that they were not intended to be able to access after the specified change in permissions.</p>
<h3 id="patches">Patches</h3>
<p>The <code>DEFINE TABLE</code> statement has been updated to appropriately overwrite data for tables defined with <code>TYPE RELATION</code>.</p>
<ul>
<li>Version 2.1.4 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users of tables with <code>TYPE RELATION</code> that may have been modified using the <code>OVERWRITE</code> clause in order to update permissions are advised to verify that the intended permissions are in place using the <code>INFO FOR DB</code> statement. Affected users who are unable to update and require updating permissions in a table with <code>TYPE RELATION</code> will be required to remove the table and define it from scratch with the intended permissions. Data can be preserved by backing it up to a temporary table.</p>
<h3 id="references">References</h3>
<ul>
<li>#5260</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/5260">https://github.com/surrealdb/surrealdb/pull/5260</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734">https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734</a></li>
<li><a href="https://github.com/advisories/GHSA-27vq-hv74-7cqp">https://github.com/advisories/GHSA-27vq-hv74-7cqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vq-hv74-7cqp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-16T17:38:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[slip-10] `Slip10Like` derivation method instantiated with certain curves may allow attacker to find derivation path which results into very long derivation (possible DoS)]]></title>
        <id>https://github.com/advisories/GHSA-2ff4-xfpr-m32r</id>
        <link href="https://github.com/advisories/GHSA-2ff4-xfpr-m32r"/>
        <updated>2024-12-18T15:51:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>


<p><strong>Impacted are the only ones who use <a href="https://docs.rs/hd-wallet/0.5.1/hd_wallet/struct.Slip10Like.html"><code>hd_wallet::Slip10Like</code></a> or <a href="https://docs.rs/slip-10/latest/slip_10/"><code>slip_10</code></a> derivation method instantiated with curves other than secp256k1 and secp256r1.</strong></p>
<p><code>hd_wallet</code> crate used to provide <code>Slip10Like</code> derivation method, which is also provided in <code>slip-10</code> crate as a default derivation method. It's based on <a href="https://github.com/satoshilabs/slips/blob/master/slip-0010.md">slip10</a> method that searches for a valid child key in an infinite loop until it's found.</p>
<p>Theoretically, this could be exploited by an attacker by finding a derivation path that would force someone to execute a lot of iterations of this loop to find a valid child key. This attack, however, requires the probability of getting an invalid scalar from random 32 bytes to be high. Slip10 is protected from this attack as it's only defined on secp256k1 and secp256r1 curves, for which such probability is very low:</p>
<ul>
<li>For secp256k1, probability is $&lt; 2^{-127}$. This means that a loop with 2 or more iterations is vanishingly impossible.</li>
<li>For secp256r1, probability is $&lt; 2^{-32}$. This means that a loop with 5 or more iterations is vanishingly impossible.</li>
</ul>
<p>While standard curves are safe to use with slip10, we used to allow slip10-like derivation which can be instantiated with any curve. For instance, one could instantiate it with ed25519 or stark curves, for which probability of getting invalid scalar from random 32 bytes is &gt;90%, so theoretically, attacker could try to DoS such construction.</p>
<h3 id="patches">Patches</h3>


<p><code>hd_wallet v0.6.0</code> has been patched by removing slip10-like derivation from public API.</p>
<p>If you need HD derivation on other curves than secp256k1 and secp256r1, we suggest you to use:</p>
<ul>
<li><a href="https://docs.rs/hd-wallet/latest/hd_wallet/edwards/struct.Edwards.html"><code>hd_wallet::Edwards</code></a> derivation method available for ed25519 curve</li>
<li><a href="https://docs.rs/hd-wallet/latest/hd_wallet/stark/struct.Stark.html"><code>hd_wallet::Stark</code></a> derivation method available for stark curve</li>
</ul>
<p>Both derivation methods are non-standard, but secure and efficient.</p>
<p><strong>If you're still using <code>slip_10</code></strong> and would like to migrate to patched version, please migrate to <code>hd_wallet v0.6</code>. You may first migrate from <code>slip_10 v0.4</code> to <code>hd_wallet v0.5</code> by following migration instructions available <a href="https://docs.rs/slip-10/latest/slip_10/">in the docs</a>, and then upgrade from <code>hd_wallet v0.5</code> to <code>hd_wallet v0.6</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Technically, you don't need to upgrade if you don't use slip10-like derivation instantiated with other curves than secp256k1 or secp256r1.</p>
<p>However, if you do, migrating to other derivation method might be required.</p>
<h3 id="reach-out-to-us-in-discord">Reach out to us in Discord</h3>
<p>If you want to reach out to us, feel free to write to <a href="https://discordapp.com/channels/905194001349627914/1294284489635139585"><code>#lockness</code> room in Discord</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Alessio Marziali <a href="mailto:alessio.marziali@metaco.com">alessio.marziali@metaco.com</a> for discovering and flagging this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r">https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r</a></li>
<li><a href="https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d">https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d</a></li>
<li><a href="https://github.com/advisories/GHSA-2ff4-xfpr-m32r">https://github.com/advisories/GHSA-2ff4-xfpr-m32r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2ff4-xfpr-m32r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T15:51:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hd-wallet] `Slip10Like` derivation method instantiated with certain curves may allow attacker to find derivation path which results into very long derivation (possible DoS)]]></title>
        <id>https://github.com/advisories/GHSA-2ff4-xfpr-m32r</id>
        <link href="https://github.com/advisories/GHSA-2ff4-xfpr-m32r"/>
        <updated>2024-12-18T15:51:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>


<p><strong>Impacted are the only ones who use <a href="https://docs.rs/hd-wallet/0.5.1/hd_wallet/struct.Slip10Like.html"><code>hd_wallet::Slip10Like</code></a> or <a href="https://docs.rs/slip-10/latest/slip_10/"><code>slip_10</code></a> derivation method instantiated with curves other than secp256k1 and secp256r1.</strong></p>
<p><code>hd_wallet</code> crate used to provide <code>Slip10Like</code> derivation method, which is also provided in <code>slip-10</code> crate as a default derivation method. It's based on <a href="https://github.com/satoshilabs/slips/blob/master/slip-0010.md">slip10</a> method that searches for a valid child key in an infinite loop until it's found.</p>
<p>Theoretically, this could be exploited by an attacker by finding a derivation path that would force someone to execute a lot of iterations of this loop to find a valid child key. This attack, however, requires the probability of getting an invalid scalar from random 32 bytes to be high. Slip10 is protected from this attack as it's only defined on secp256k1 and secp256r1 curves, for which such probability is very low:</p>
<ul>
<li>For secp256k1, probability is $&lt; 2^{-127}$. This means that a loop with 2 or more iterations is vanishingly impossible.</li>
<li>For secp256r1, probability is $&lt; 2^{-32}$. This means that a loop with 5 or more iterations is vanishingly impossible.</li>
</ul>
<p>While standard curves are safe to use with slip10, we used to allow slip10-like derivation which can be instantiated with any curve. For instance, one could instantiate it with ed25519 or stark curves, for which probability of getting invalid scalar from random 32 bytes is &gt;90%, so theoretically, attacker could try to DoS such construction.</p>
<h3 id="patches">Patches</h3>


<p><code>hd_wallet v0.6.0</code> has been patched by removing slip10-like derivation from public API.</p>
<p>If you need HD derivation on other curves than secp256k1 and secp256r1, we suggest you to use:</p>
<ul>
<li><a href="https://docs.rs/hd-wallet/latest/hd_wallet/edwards/struct.Edwards.html"><code>hd_wallet::Edwards</code></a> derivation method available for ed25519 curve</li>
<li><a href="https://docs.rs/hd-wallet/latest/hd_wallet/stark/struct.Stark.html"><code>hd_wallet::Stark</code></a> derivation method available for stark curve</li>
</ul>
<p>Both derivation methods are non-standard, but secure and efficient.</p>
<p><strong>If you're still using <code>slip_10</code></strong> and would like to migrate to patched version, please migrate to <code>hd_wallet v0.6</code>. You may first migrate from <code>slip_10 v0.4</code> to <code>hd_wallet v0.5</code> by following migration instructions available <a href="https://docs.rs/slip-10/latest/slip_10/">in the docs</a>, and then upgrade from <code>hd_wallet v0.5</code> to <code>hd_wallet v0.6</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Technically, you don't need to upgrade if you don't use slip10-like derivation instantiated with other curves than secp256k1 or secp256r1.</p>
<p>However, if you do, migrating to other derivation method might be required.</p>
<h3 id="reach-out-to-us-in-discord">Reach out to us in Discord</h3>
<p>If you want to reach out to us, feel free to write to <a href="https://discordapp.com/channels/905194001349627914/1294284489635139585"><code>#lockness</code> room in Discord</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Alessio Marziali <a href="mailto:alessio.marziali@metaco.com">alessio.marziali@metaco.com</a> for discovering and flagging this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r">https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r</a></li>
<li><a href="https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d">https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d</a></li>
<li><a href="https://github.com/advisories/GHSA-2ff4-xfpr-m32r">https://github.com/advisories/GHSA-2ff4-xfpr-m32r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2ff4-xfpr-m32r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T15:51:24.000Z</published>
    </entry>
</feed>