<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2025-01-24T13:04:34.646Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[gix-worktree-state] gix-worktree-state nonexclusive checkout sets executable files world-writable]]></title>
        <id>https://github.com/advisories/GHSA-fqmf-w4xh-33rh</id>
        <link href="https://github.com/advisories/GHSA-fqmf-w4xh-33rh"/>
        <updated>2025-01-21T21:13:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-worktree-state</code> specifies 0777 permissions when checking out executable files, intending that the umask will restrict them appropriately. But one of the strategies it uses to set permissions is not subject to the umask. This causes files in a repository to be world-writable in some situations.</p>
<h3 id="details">Details</h3>
<p>Git repositories track executable bits for regular files. In tree objects and the index, regular file modes are stored as 0644 if not executable, or 0755 if executable. But this is independent of how the permissions are set in the filesystem (where supported).</p>
<p><a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/function.rs#L8-L35"><code>gix_worktree_state::checkout</code></a> has two strategies for checking out a file and marking it executable on a Unix-like operating system, one of which is vulnerable:</p>
<ul>
<li>If the file is created by assuming it does not already exist, correct permissions are applied, because permissions specified when opening a file are subject to the umask.</li>
<li>If the file is considered possibly already to exist—even in a clean checkout if the application does not specify the option to treat the destination directory as empty—then permissions conferring unrestricted access to any user account on the system are wrongly applied, because permissions specified when calling chmod on an existing file are not subject to the umask.</li>
</ul>
<p>&nbsp;</p>
<p>Specifically, <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L56-L191"><code>checkout::entry::checkout</code></a> chooses the strategy for each file. The same strategy is usually chosen for each executable file, if no <a href="https://github.com/git/git/blob/a60673e9252b08d4eca90543b3729f4798b9aafd/Documentation/RelNotes/2.11.0.txt#L149-L154">process</a> (i.e. <a href="https://github.com/GitoxideLabs/gitoxide/discussions/996">long running</a>) smudge filter is in use. The strategy depends on the <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/mod.rs#L50-L53"><code>checkout::Options::destination_is_initially_empty</code></a> value, which is passed along to <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L253-L277"><code>checkout::entry::open_file</code></a>, whose return value includes a flag indicating whether permissions still need to be set:</p>
<ul>
<li><p>With <code>destination_is_initially_empty: true</code>, executable permissions are specified when opening the file, via <a href="https://doc.rust-lang.org/std/os/unix/fs/trait.OpenOptionsExt.html#tymethod.mode"><code>OpenOptionsEx::mode</code></a>, by its effect on the behavior of <a href="https://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.open"><code>OpenOptions::open</code></a>. A mode of 0777 is safe here, for the same reason the default mode of 0666 is safe. When creating a file, the applied mode is the specified mode with any bits unset from it that are set in the umask.</p>
<p> <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L265-L268">https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L265-L268</a></p>
<p>The <code>set_executable_after_creation</code> flag in the <code>open_file</code> return value is then <code>false</code>.</p>
</li>
<li><p>With <code>destination_is_initially_empty: false</code>, executable permissions are set in a separate step, via <a href="https://doc.rust-lang.org/beta/std/os/unix/fs/trait.PermissionsExt.html#tymethod.set_mode"><code>PermissionsExt::set_mode</code></a> and <a href="https://doc.rust-lang.org/beta/std/fs/fn.set_permissions.html"><code>set_permissions</code></a>. A mode of 0777 is not safe here, because the umask is not applied. The vulnerable code appears in <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L279-L299"><code>checkout::entry::finalize_entry</code></a>, which receives the <code>set_executable_after_creation</code> flag originally from <code>open_file</code>:</p>
<p><a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L288-L293">https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L288-L293</a></p>
<p>The file has unrestricted permissions.</p>
</li>
</ul>
<p><code>finalize_entry</code> is <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/chunk.rs#L229-L236">likewise called</a> from <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/chunk.rs#L157-L259"><code>checkout::chunk::process_delayed_filter_results</code></a>.</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>On a Unix-like system such as GNU/Linux or macOS, create a new project and define its dependencies. While the vulnerability is in <code>gix-worktree-state</code>, this example will use vulnerable code through the <code>gix</code> crate, which exposes it. Run:</p>
<pre><code class="language-sh">cargo new checkout-index
cd checkout-index
cargo add gix gix-object
</code></pre>
</li>
<li><p>In the <code>checkout-index</code> directory, edit <code>src/main.rs</code> so that its entire contents are:</p>
<pre><code class="language-rust">fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let repo = gix::discover("has-executable")?;
    let mut index = repo.open_index()?;
    gix::worktree::state::checkout(
        &amp;mut index,
        repo.work_dir().ok_or("need non-bare repo")?,
        gix_object::find::Never, // Can also use: repo.objects.clone()
        &amp;gix::progress::Discard,
        &amp;gix::progress::Discard,
        &amp;Default::default(),
        Default::default(),
    )?;
    Ok(())
}
</code></pre>
</li>
<li><p>Create the test repository that the vulnerable program will operate on. Still in the <code>checkout-index</code> directory, run:</p>
<pre><code class="language-sh">git init has-executable
touch has-executable/a has-executable/b
chmod +x has-executable/b
git -C has-executable add .
</code></pre>
<p>It is not necessary to commit the changes, only to stage them, since the test program will check  out the index.</p>
</li>
<li><p><em>Optionally</em>, run <code>rm has-executable/[ab]</code> to remove the staged files from disk.</p>
</li>
<li><p>Run the program by issuing <code>cargo run</code>. The program uses <code>gix-worktree-state</code> to check out the index. It should terminate successfully and not issue any errors.</p>
</li>
<li><p>Run <code>ls -l has-executable</code> to inspect the permissions of the checked out files. Observe that owner, group, and other all have read, write, and execute permissions on <code>b</code>.</p>
<pre><code class="language-text">-rw-r--r-- 1 ek ek 0 Jan  9 03:38 a
-rwxrwxrwx 1 ek ek 0 Jan  9 03:38 b
</code></pre>
<p>With affected versions of <code>gix-worktree-state</code>, the output shows <code>-rwxrwxrwx</code> for <code>b</code>, whether the files were removed in step 4 or not.</p>
</li>
<li><p>It was not necessary to set <code>destination_is_initially_empty</code> to <code>false</code> explicitly to trigger the bug, because that is its default value. If desired, modify the program to pass <code>true</code> and rerun the experiment to verify that <code>b</code> is no longer created with excessive permissions. The modified program would change the last <code>checkout</code> argument from <code>Default::default(),</code> to:</p>
<pre><code class="language-rust">        gix::worktree::state::checkout::Options {
            destination_is_initially_empty: true,
            ..Default::default()
        },
</code></pre>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Setting unlimited file permissions is a problem on systems where a user account exists on the system that should not have the ability to access and modify the files. That applies to multi-user systems, or when an account is used to run software with reduced abilities. (Some programs may also treat broad write permissions to mean less validation is required.)</p>
<p>This bug affects Unix-like systems but not Windows. The <code>gix clone</code> command is not believed to be affected, due to <a href="https://github.com/GitoxideLabs/gitoxide/blob/af704f57bb9480c47cdd393465264d586f1d4562/gitoxide-core/src/index/checkout.rs#L14-L172"><code>checkout_exclusive</code></a>'s <a href="https://github.com/GitoxideLabs/gitoxide/blob/af704f57bb9480c47cdd393465264d586f1d4562/gitoxide-core/src/index/checkout.rs#L61">use</a> of <code>destination_is_initially_empty: true</code>. Specialized uses in which repositories are known never to have any files marked executable are unaffected. Repositories that no untrusted users can access, due to not having the ability to traverse the directories to them or due to sufficiently restrictive ACLs, are likewise unaffected.</p>
<p>The default value of <code>destination_is_initially_empty</code> is <code>false</code>, so some applications may be affected even if they don't attempt checkouts in nonempty directories. The 0777 permissions are applied to files that are created earlier in the same checkout, as well as those that already existed, regardless of their prior permissions. On preexisting files, 0777 is set <em>even if <a href="https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/mod.rs#L54-L58"><code>overwrite_existing</code></a> is <code>false</code></em>, as that prevents the checkout from changing file contents but not permissions.</p>
<p>Files not tracked/staged as executable are not checked out with insecure permissions. Such a file that previously existed keeps its old permissions. However, this may include executable permissions that no longer match repository metadata, as well as undesired write permissions acquired from a previous vulnerable checkout. <code>set_mode(0o777)</code> clears other bits, so the bug is not exacerbated by the presence of setuid/setgid bits. In some applications, the vulnerable strategy may be used only for files rewritten by a <a href="https://git-scm.com/docs/gitattributes/2.40.0#_long_running_filter_process">long running</a> smudge filter or only in the presence of <a href="https://git-scm.com/docs/gitattributes/2.40.0#_delay">delays</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-fqmf-w4xh-33rh">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-fqmf-w4xh-33rh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22620">https://nvd.nist.gov/vuln/detail/CVE-2025-22620</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2025-0001.html">https://rustsec.org/advisories/RUSTSEC-2025-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fqmf-w4xh-33rh">https://github.com/advisories/GHSA-fqmf-w4xh-33rh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqmf-w4xh-33rh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:13:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2025-01-21T18:31:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.
Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide-core] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2025-01-21T18:31:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.
Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sp1-stark]  SP1 has missing verifier checks and fiat-shamir observations]]></title>
        <id>https://github.com/advisories/GHSA-c873-wfhp-wx5m</id>
        <link href="https://github.com/advisories/GHSA-c873-wfhp-wx5m"/>
        <updated>2025-01-15T21:25:58.000Z</updated>
        <content type="html"><![CDATA[<p>In SP1’s STARK verifier, the prover provided <code>chip_ordering</code> is used to fetch the index of the chips that have preprocessed columns. Prior to v4.0.0, the validation that this <code>chip_ordering</code> correctly provides these indexes was missing. In v4.0.0, this was fixed by adding a check that the indexed chip’s name is equal to the name stored in the verifying key’s chip information. </p>
<p>In the recursive verifier, every verifier program is generated beforehand and later checked for correctness by requiring a merkle proof to the precomputed merkle root of valid verifier keys. Therefore, the recursive verifier and the on-chain verifier were not affected by this vulnerability. </p>
<p>This code was audited twice, once as a part of the audit by KALOS and once by Cantina for v1.0.0. This bug was found by the Succinct team during preparation of v4.0.0. Out of abundance of caution, we will be deprecating all previous versions and freeze the corresponding verifiers.</p>
<p>Furthermore, in the recursive verifier, the <code>is_complete</code> boolean flag is used to flag a proof of complete execution. Prior to v4.0.0, this flag was underconstrained in parts of our recursive verifier, such as the first layer of the recursion. In v4.0.0, this bug was fixed by adding appropriate calls to the <code>assert_complete</code> function, which constrains the correctness of the <code>is_complete</code> flag. This code was a part of the audit for v3.0.0. This bug affects the soundness of the Rust SDK for verifying compressed proofs, and the soundness of on-chain verifier for deferred proofs. </p>
<p>This issue was found by a combined effort from Aligned, LambdaClass and 3MI Labs, and was also independently found by Succinct during the preparation of v4.0.0. </p>
<p>Lastly, SP1’s STARK verifier relied on logic inside Plonky3, one SP1's core dependencies, to check that the polynomial evaluation claims are correct using a FRI-based polynomial commitment scheme. To batch this check, multiple polynomial evaluation claims are combined using a random linear combination. Prior to v4.0.0, the individual evaluation claims were not observed into the challenger before sampling the coefficient for the random linear combination.In v4.0.0, this was fixed by observing all the evaluation claims into the challenger correctly inside of Plonky3.</p>
<p>This bug was found by external researchers, and we have worked closely with the Plonky3 team to mitigate this vulnerability. We will be deprecating all previous versions and freezing their verifiers to ensure that versions with the vulnerability will not be used in production.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/succinctlabs/sp1/security/advisories/GHSA-c873-wfhp-wx5m">https://github.com/succinctlabs/sp1/security/advisories/GHSA-c873-wfhp-wx5m</a></li>
<li><a href="https://github.com/advisories/GHSA-c873-wfhp-wx5m">https://github.com/advisories/GHSA-c873-wfhp-wx5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c873-wfhp-wx5m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-15T21:25:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vaultwarden] Vaultwarden authenticated reflected cross-site scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vprm-27pv-jp3w</id>
        <link href="https://github.com/advisories/GHSA-vprm-27pv-jp3w"/>
        <updated>2025-01-09T23:14:11.000Z</updated>
        <content type="html"><![CDATA[<p>Vaultwarden v1.32.5 was discovered to contain an authenticated reflected cross-site scripting (XSS) vulnerability via the component /api/core/mod.rs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55226">https://nvd.nist.gov/vuln/detail/CVE-2024-55226</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5</a></li>
<li><a href="https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5">https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5</a></li>
<li><a href="https://github.com/advisories/GHSA-vprm-27pv-jp3w">https://github.com/advisories/GHSA-vprm-27pv-jp3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vprm-27pv-jp3w</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-09T21:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vaultwarden] Vaultwarden vulnerable to user impersonation]]></title>
        <id>https://github.com/advisories/GHSA-x7m9-mv49-fv73</id>
        <link href="https://github.com/advisories/GHSA-x7m9-mv49-fv73"/>
        <updated>2025-01-10T18:38:02.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in the component src/api/identity.rs of Vaultwarden prior to v1.32.5 allows attackers to impersonate users, including Administrators, via a crafted authorization request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55225">https://nvd.nist.gov/vuln/detail/CVE-2024-55225</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5</a></li>
<li><a href="https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5">https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/commit/20d9e885bfcd7df7828d92c6e59ed5fe7b40a879">https://github.com/dani-garcia/vaultwarden/commit/20d9e885bfcd7df7828d92c6e59ed5fe7b40a879</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/commit/37c14c3c69b244ec50f5c62b4c9260171607c1d8">https://github.com/dani-garcia/vaultwarden/commit/37c14c3c69b244ec50f5c62b4c9260171607c1d8</a></li>
<li><a href="https://github.com/advisories/GHSA-x7m9-mv49-fv73">https://github.com/advisories/GHSA-x7m9-mv49-fv73</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x7m9-mv49-fv73</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-09T21:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vaultwarden] Vaultwarden HTML injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g5x8-v2ch-gj2g</id>
        <link href="https://github.com/advisories/GHSA-g5x8-v2ch-gj2g"/>
        <updated>2025-01-09T23:13:15.000Z</updated>
        <content type="html"><![CDATA[<p>An HTML injection vulnerability in Vaultwarden prior to v1.32.5 allows attackers to execute arbitrary code via injecting a crafted payload into the username field of an e-mail message.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55224">https://nvd.nist.gov/vuln/detail/CVE-2024-55224</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.4</a></li>
<li><a href="https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5">https://github.com/dani-garcia/vaultwarden/releases/tag/1.32.5</a></li>
<li><a href="https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5">https://insinuator.net/2024/11/vulnerability-disclosure-authentication-bypass-in-vaultwarden-versions-1-32-5</a></li>
<li><a href="https://github.com/advisories/GHSA-g5x8-v2ch-gj2g">https://github.com/advisories/GHSA-g5x8-v2ch-gj2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5x8-v2ch-gj2g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-09T21:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto missing facility to signal rotation of a verified cryptographic identity]]></title>
        <id>https://github.com/advisories/GHSA-r5vf-wf4h-82gg</id>
        <link href="https://github.com/advisories/GHSA-r5vf-wf4h-82gg"/>
        <updated>2025-01-22T17:37:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of the matrix-sdk-crypto Rust crate before 0.8.0 lack a dedicated mechanism to notify that a user's cryptographic identity has changed from a verified to an unverified one, which could cause client applications relying on the SDK to overlook such changes.</p>
<h3 id="patches">Patches</h3>
<p>matrix-sdk-crypto 0.8.0 adds a new <code>VerificationLevel::VerificationViolation</code> enum variant which indicates that a previously verified identity has been changed.</p>
<h3 id="references">References</h3>
<ul>
<li>Patch: <a href="https://github.com/matrix-org/matrix-rust-sdk/pull/3795">https://github.com/matrix-org/matrix-rust-sdk/pull/3795</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-r5vf-wf4h-82gg">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-r5vf-wf4h-82gg</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/pull/3795">https://github.com/matrix-org/matrix-rust-sdk/pull/3795</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52813">https://nvd.nist.gov/vuln/detail/CVE-2024-52813</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0434.html">https://rustsec.org/advisories/RUSTSEC-2024-0434.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r5vf-wf4h-82gg">https://github.com/advisories/GHSA-r5vf-wf4h-82gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r5vf-wf4h-82gg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-07T15:25:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] fetch: Authorization headers not dropped when redirecting cross-origin]]></title>
        <id>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</id>
        <link href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6"/>
        <updated>2025-01-07T02:52:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Deno's<code>fetch()</code> redirect handling creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario. The same is generally applied to <code>Cookie</code> and <code>Proxy-Authorization</code> headers, and is done for not only host changes, but also protocol/port changes. Generally referred to as "origin".</p>
<p>The <a href="https://docs.deno.com/runtime/reference/web_platform_apis/#:~:text=Deno%20does%20not%20follow%20the,leaking%20authenticated%20data%20cross%20origin.">documentation</a> states: </p>
<blockquote>
<p>Deno does not follow the same-origin policy, because the Deno user agent currently does not have the concept of origins, and it does not have a cookie jar. This means Deno <strong>does not need</strong> to protect against leaking authenticated data cross origin </p>
</blockquote>
<h3 id="reproduction">Reproduction</h3>
<pre><code class="language-ts">const ac = new AbortController()

const server1 = Deno.serve({ port: 3001, signal: ac.signal }, (req) =&gt; {
  return new Response(null, {
    status: 302,
    headers: {
      'location': 'http://localhost:3002/redirected'
    },
  })
})

const server2 = Deno.serve({ port: 3002, signal: ac.signal }, (req) =&gt; {
  const body = JSON.stringify({
    url: req.url,
    hasAuth: req.headers.has('authorization'),
  })
  return new Response(body, {
    status: 200,
    headers: {'content-type': 'application/json'},
  })
})

async function main() {
  const response = await fetch("http://localhost:3001/", {
    headers: {authorization: 'Bearer foo'}
  })
  const body = await response.json()
  
  ac.abort()
  
  if (body.hasAuth) {
    console.error('ERROR: Authorization header should not be present after cross-origin redirect')
  } else {
    console.log('SUCCESS: Authorization header is not present after cross-origin redirect')
  }
}

setTimeout(main, 500)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-21620">https://nvd.nist.gov/vuln/detail/CVE-2025-21620</a></li>
<li><a href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/advisories/GHSA-f27p-cmv8-xhm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-06T22:27:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] fetch: Authorization headers not dropped when redirecting cross-origin]]></title>
        <id>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</id>
        <link href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6"/>
        <updated>2025-01-07T02:52:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Deno's<code>fetch()</code> redirect handling creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario. The same is generally applied to <code>Cookie</code> and <code>Proxy-Authorization</code> headers, and is done for not only host changes, but also protocol/port changes. Generally referred to as "origin".</p>
<p>The <a href="https://docs.deno.com/runtime/reference/web_platform_apis/#:~:text=Deno%20does%20not%20follow%20the,leaking%20authenticated%20data%20cross%20origin.">documentation</a> states: </p>
<blockquote>
<p>Deno does not follow the same-origin policy, because the Deno user agent currently does not have the concept of origins, and it does not have a cookie jar. This means Deno <strong>does not need</strong> to protect against leaking authenticated data cross origin </p>
</blockquote>
<h3 id="reproduction">Reproduction</h3>
<pre><code class="language-ts">const ac = new AbortController()

const server1 = Deno.serve({ port: 3001, signal: ac.signal }, (req) =&gt; {
  return new Response(null, {
    status: 302,
    headers: {
      'location': 'http://localhost:3002/redirected'
    },
  })
})

const server2 = Deno.serve({ port: 3002, signal: ac.signal }, (req) =&gt; {
  const body = JSON.stringify({
    url: req.url,
    hasAuth: req.headers.has('authorization'),
  })
  return new Response(body, {
    status: 200,
    headers: {'content-type': 'application/json'},
  })
})

async function main() {
  const response = await fetch("http://localhost:3001/", {
    headers: {authorization: 'Bearer foo'}
  })
  const body = await response.json()
  
  ac.abort()
  
  if (body.hasAuth) {
    console.error('ERROR: Authorization header should not be present after cross-origin redirect')
  } else {
    console.log('SUCCESS: Authorization header is not present after cross-origin redirect')
  }
}

setTimeout(main, 500)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-21620">https://nvd.nist.gov/vuln/detail/CVE-2025-21620</a></li>
<li><a href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/advisories/GHSA-f27p-cmv8-xhm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-06T22:27:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_fetch] fetch: Authorization headers not dropped when redirecting cross-origin]]></title>
        <id>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</id>
        <link href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6"/>
        <updated>2025-01-07T02:52:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Deno's<code>fetch()</code> redirect handling creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario. The same is generally applied to <code>Cookie</code> and <code>Proxy-Authorization</code> headers, and is done for not only host changes, but also protocol/port changes. Generally referred to as "origin".</p>
<p>The <a href="https://docs.deno.com/runtime/reference/web_platform_apis/#:~:text=Deno%20does%20not%20follow%20the,leaking%20authenticated%20data%20cross%20origin.">documentation</a> states: </p>
<blockquote>
<p>Deno does not follow the same-origin policy, because the Deno user agent currently does not have the concept of origins, and it does not have a cookie jar. This means Deno <strong>does not need</strong> to protect against leaking authenticated data cross origin </p>
</blockquote>
<h3 id="reproduction">Reproduction</h3>
<pre><code class="language-ts">const ac = new AbortController()

const server1 = Deno.serve({ port: 3001, signal: ac.signal }, (req) =&gt; {
  return new Response(null, {
    status: 302,
    headers: {
      'location': 'http://localhost:3002/redirected'
    },
  })
})

const server2 = Deno.serve({ port: 3002, signal: ac.signal }, (req) =&gt; {
  const body = JSON.stringify({
    url: req.url,
    hasAuth: req.headers.has('authorization'),
  })
  return new Response(body, {
    status: 200,
    headers: {'content-type': 'application/json'},
  })
})

async function main() {
  const response = await fetch("http://localhost:3001/", {
    headers: {authorization: 'Bearer foo'}
  })
  const body = await response.json()
  
  ac.abort()
  
  if (body.hasAuth) {
    console.error('ERROR: Authorization header should not be present after cross-origin redirect')
  } else {
    console.log('SUCCESS: Authorization header is not present after cross-origin redirect')
  }
}

setTimeout(main, 500)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-21620">https://nvd.nist.gov/vuln/detail/CVE-2025-21620</a></li>
<li><a href="https://github.com/advisories/GHSA-f27p-cmv8-xhm6">https://github.com/advisories/GHSA-f27p-cmv8-xhm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f27p-cmv8-xhm6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-06T22:27:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[magic-crypt] magic-crypt uses insecure cryptographic algorithms]]></title>
        <id>https://github.com/advisories/GHSA-gmx7-gr5q-85w5</id>
        <link href="https://github.com/advisories/GHSA-gmx7-gr5q-85w5"/>
        <updated>2024-12-30T16:53:25.000Z</updated>
        <content type="html"><![CDATA[<p>This crate uses a number of cryptographic algorithms that are no longer considered secure and it uses them in ways that do not guarantee the integrity of the encrypted data.</p>
<p><code>MagicCrypt64</code> uses the insecure DES block cipher in CBC mode without authentication. This allows for practical brute force and padding oracle attacks and does not protect the integrity of the encrypted data. Key and IV are generated from user input using CRC64, which is not at all a key derivation function.</p>
<p><code>MagicCrypt64</code>, <code>MagicCrypt128</code>, <code>MagicCrypt192</code>, and <code>MagicCrypt256</code> are all vulnerable to padding-oracle attacks. None of them protect the integrity of the ciphertext. Furthermore, none use password-based key derivation functions, even though the key is intended to be generated from a password.</p>
<p>Each of the implementations are unsound in that they use uninitialized memory without <code>MaybeUninit</code> or equivalent structures.</p>
<p>For more information, visit the <a href="https://github.com/magiclen/rust-magiccrypt/issues/17">issue</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/magiclen/rust-magiccrypt/issues/17">https://github.com/magiclen/rust-magiccrypt/issues/17</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0430.html">https://rustsec.org/advisories/RUSTSEC-2024-0430.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gmx7-gr5q-85w5">https://github.com/advisories/GHSA-gmx7-gr5q-85w5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gmx7-gr5q-85w5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-30T16:53:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xous] xous has unsound usages of `core::slice::from_raw_parts` ]]></title>
        <id>https://github.com/advisories/GHSA-gv7f-5qqh-vxfx</id>
        <link href="https://github.com/advisories/GHSA-gv7f-5qqh-vxfx"/>
        <updated>2024-12-30T16:52:49.000Z</updated>
        <content type="html"><![CDATA[<p>We consider <code>as_slice</code> and <code>as_slice_mut</code> unsound because: the pointer with any bit patterns could be cast to the slice of arbitrary types. The pointer could be created by unsafe new and deprecated <code>from_parts</code>. We consider that <code>from_parts</code> should be removed in latest version because it will help trigger unsoundness in <code>as_slice</code>. With new declared as unsafe, <code>as_slice</code> should also declared as unsafe.  </p>
<p>This was patched in by marking two functions as <code>unsafe</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/betrusted-io/xous-core/issues/410">https://github.com/betrusted-io/xous-core/issues/410</a></li>
<li><a href="https://github.com/betrusted-io/xous-core/pull/411">https://github.com/betrusted-io/xous-core/pull/411</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0431.html">https://rustsec.org/advisories/RUSTSEC-2024-0431.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gv7f-5qqh-vxfx">https://github.com/advisories/GHSA-gv7f-5qqh-vxfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gv7f-5qqh-vxfx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-30T16:52:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[quincy] TunnelVision - decloaking VPNs using DHCP]]></title>
        <id>https://github.com/advisories/GHSA-hqmp-g7ph-x543</id>
        <link href="https://github.com/advisories/GHSA-hqmp-g7ph-x543"/>
        <updated>2024-12-27T18:12:48.000Z</updated>
        <content type="html"><![CDATA[<p>A new decloaking technique for nearly all VPN implementations has been found, which allows attackers to inject entries into the routing tables of unsuspecting victims using DHCP option 121. This allows attackers to redirect traffic, which is supposed to be sent encrypted over the VPN, through the physical interface handling DHCP for the network the victim's computer is connected to, effectively bypassing the VPN connection.</p>
<h3 id="impact">Impact</h3>
<p>All users are potentially affected, as this attack vector can be used against <em>any</em> VPN implementation without mitigations in place.</p>
<h3 id="patches">Patches</h3>
<p>Currently, there are no existing mitigations employed by Quincy.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disabling DHCP option 121 in the DHCP client is a potential workaround, as it prevents this kind of attack.</p>
<h3 id="references">References</h3>
<p><a href="https://www.leviathansecurity.com/blog/tunnelvision">https://www.leviathansecurity.com/blog/tunnelvision</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/M0dEx/quincy/security/advisories/GHSA-hqmp-g7ph-x543">https://github.com/M0dEx/quincy/security/advisories/GHSA-hqmp-g7ph-x543</a></li>
<li><a href="https://www.leviathansecurity.com/blog/tunnelvision">https://www.leviathansecurity.com/blog/tunnelvision</a></li>
<li><a href="https://github.com/advisories/GHSA-hqmp-g7ph-x543">https://github.com/advisories/GHSA-hqmp-g7ph-x543</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hqmp-g7ph-x543</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-27T18:12:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[glib] Unsoundness in `Iterator` and `DoubleEndedIterator` impls for `glib::VariantStrIter`]]></title>
        <id>https://github.com/advisories/GHSA-wrw7-89jp-8q8g</id>
        <link href="https://github.com/advisories/GHSA-wrw7-89jp-8q8g"/>
        <updated>2024-12-23T20:19:26.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>VariantStrIter::impl_get</code> function (called internally by implementations of the <code>Iterator</code> and <code>DoubleEndedIterator</code> traits for this type) was unsound, resulting in undefined behaviour.</p>
<p>An immutable reference <code>&amp;p</code> to a <code>*mut libc::c_char</code> pointer initialized to <code>NULL</code> was passed as an argument to a C function that that mutates the pointer behind <code>&amp;p</code> in-place (i.e. as an out-argument), which was unsound. After changes in recent versions of the Rust compiler, these unsound writes through <code>&amp;p</code> now seem to be completely disregarded when building the <code>glib</code> crate with optimizations.</p>
<p>This subsequently caused all calls of <code>VariantStrIter::impl_get</code> to violate the safety requirements of the <code>std::ffi::CStr::from_ptr</code> function - which requires its argument to be a valid pointer to a C-style string - resulting in crashes due to <code>NULL</code> pointer dereferences.</p>
<p>This was fixed by passing the out-argument pointer explitly as <code>&amp;mut p</code> instead of <code>&amp;p</code>.</p>
<p>This issue has been present since this code was initially added in <code>glib</code> v0.15.0. The mismatch in mutability was likely missed (and not raised as an error by the compiler) because the C function wrapped by <code>VariantStrIter::impl_get</code> is variadic (<code>glib_sys::g_variant_get_child</code>), and the pointer in question is one of the variadic arguments.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gtk-rs/gtk-rs-core/pull/1343">https://github.com/gtk-rs/gtk-rs-core/pull/1343</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0429.html">https://rustsec.org/advisories/RUSTSEC-2024-0429.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wrw7-89jp-8q8g">https://github.com/advisories/GHSA-wrw7-89jp-8q8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wrw7-89jp-8q8g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T20:19:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[spl-token-swap] Unsound usages of `u8` type casting in spl-token-swap]]></title>
        <id>https://github.com/advisories/GHSA-h6xm-c6r4-vmwf</id>
        <link href="https://github.com/advisories/GHSA-h6xm-c6r4-vmwf"/>
        <updated>2024-12-23T19:29:46.000Z</updated>
        <content type="html"><![CDATA[<p>The library provides a safe public API <code>unpack</code> to cast <code>u8</code> array to arbitrary types, which can cause to undefined behaviors. The length check of array can only prevent out-of-bound access on the return type. However, it can't prevent misaligned pointer when casting <code>u8</code> pointer to a type aligned to larger bytes. For example, if we assign <code>u16</code> to <code>T</code>, <strong>misaligned raw pointer dereference</strong> could happen and cause to panic. Even if we pass the type aligned to same byte as <code>u8</code> (e.g., <code>bool</code>), it could construct a illegal type since <code>bool</code> can only have 0 or 1 as bit patterns, which is also an undefined behavior. The further exploits of the bug here are still not clear, so we would report this issue as unsound.  </p>
<p>The details of PoC to reproduce undefined behavior are provided in the <a href="https://github.com/solana-labs/solana-program-library/issues/5243">issue</a>.  </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-program-library/issues/5243">https://github.com/solana-labs/solana-program-library/issues/5243</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0426.html">https://rustsec.org/advisories/RUSTSEC-2024-0426.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xm-c6r4-vmwf">https://github.com/advisories/GHSA-h6xm-c6r4-vmwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xm-c6r4-vmwf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T19:29:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libafl] libafl has unsound usages of `core::slice::from_raw_parts_mut` ]]></title>
        <id>https://github.com/advisories/GHSA-f7qj-v3vp-4856</id>
        <link href="https://github.com/advisories/GHSA-f7qj-v3vp-4856"/>
        <updated>2024-12-23T19:30:20.000Z</updated>
        <content type="html"><![CDATA[<p>The library breaks the safety assumptions when using unsafe API <code>slice::from_raw_parts_mut</code>. The pointer passed to <code>from_raw_parts_mut</code> is misaligned by casting <code>u8</code> to <code>u16</code> raw pointer directly, which is unsound. The bug is patched by using <code>align_offset</code>, which could make sure the memory address is aligned to 2 bytes for <code>u16</code>.  </p>
<p>This was patched in 0.11.2 in the <a href="https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d">commit</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AFLplusplus/LibAFL/issues/1526">https://github.com/AFLplusplus/LibAFL/issues/1526</a></li>
<li><a href="https://github.com/AFLplusplus/LibAFL/pull/1530">https://github.com/AFLplusplus/LibAFL/pull/1530</a></li>
<li><a href="https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d">https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d</a></li>
<li><a href="https://github.com/AFLplusplus/LibAFL/commit/f70a16a09a8096d3c50159dd8a912a75c2af157c">https://github.com/AFLplusplus/LibAFL/commit/f70a16a09a8096d3c50159dd8a912a75c2af157c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0424.html">https://rustsec.org/advisories/RUSTSEC-2024-0424.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f7qj-v3vp-4856">https://github.com/advisories/GHSA-f7qj-v3vp-4856</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f7qj-v3vp-4856</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T19:28:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kvm-ioctls] Undefined behaviour in `kvm_ioctls::ioctls::vm::VmFd::create_device`]]></title>
        <id>https://github.com/advisories/GHSA-3qx8-rv27-j6gp</id>
        <link href="https://github.com/advisories/GHSA-3qx8-rv27-j6gp"/>
        <updated>2024-12-23T19:26:38.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was identified in the <code>VmFd::create_device function</code>, leading to undefined behavior and miscompilations on rustc 1.82.0 and newer due to the function's violation of Rust's pointer safety rules.</p>
<p>The function downcasted a mutable reference to its <code>struct kvm_create_device</code> argument to an immutable pointer, and then proceeded to pass this pointer to a mutating system call. Rustc 1.82.0 and newer elides subsequent reads of this structure's fields, meaning code will not see the value written by the kernel into the <code>fd</code> member. Instead, the code will observe the value that this field was initialized to prior to calling <code>VmFd::create_device</code> (usually, 0).</p>
<p>The issue started in kvm-ioctls 0.1.0 and was fixed in 0.19.1 by correctly using
a mutable pointer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-vmm/kvm/pull/298">https://github.com/rust-vmm/kvm/pull/298</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0428.html">https://rustsec.org/advisories/RUSTSEC-2024-0428.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3qx8-rv27-j6gp">https://github.com/advisories/GHSA-3qx8-rv27-j6gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qx8-rv27-j6gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-23T19:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2025-01-03T19:29:42.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0432.html">https://rustsec.org/advisories/RUSTSEC-2024-0432.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0433.html">https://rustsec.org/advisories/RUSTSEC-2024-0433.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution]]></title>
        <id>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</id>
        <link href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"/>
        <updated>2025-01-03T19:29:42.000Z</updated>
        <content type="html"><![CDATA[<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>
<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>
<ul>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin"><code>age::plugin::Identity::default_for_plugin</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new"><code>age::plugin::IdentityPluginV1::new</code></a></li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href="https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>
<li><a href="https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new"><code>age::plugin::RecipientPluginV1::new</code></a></li>
</ul>
<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>
<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href="https://c2sp.org/age-plugin">age-plugin</a> protocol.</p>
<p>An equivalent issue was fixed in <a href="https://github.com/FiloSottile/age">the reference Go implementation of age</a>, see advisory <a href="https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c">GHSA-32gq-x56h-299c</a>.</p>
<p>Thanks to ⬡-49016 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
<li><a href="https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0432.html">https://rustsec.org/advisories/RUSTSEC-2024-0432.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0433.html">https://rustsec.org/advisories/RUSTSEC-2024-0433.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4fg7-vxc8-qx5w">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-18T18:21:55.000Z</published>
    </entry>
</feed>