{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>With older versions  of jackson-core, if you parse an input file and it has deeply nested data, Jackson could end up throwing a StackoverflowError if the depth is particularly large.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>jackson-core 2.15.0 contains a configurable limit for how deep Jackson will traverse in an input document, defaulting to an allowable depth of 1000. Change is in <a href=\"https://github.com/FasterXML/jackson-core/pull/943\">https://github.com/FasterXML/jackson-core/pull/943</a>. jackson-core will throw a StreamConstraintsException if the limit is reached.\njackson-databind also benefits from this change because it uses jackson-core to parse JSON inputs.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users should avoid parsing input files from untrusted sources.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FasterXML/jackson-core/security/advisories/GHSA-h46c-h94j-95f3\">https://github.com/FasterXML/jackson-core/security/advisories/GHSA-h46c-h94j-95f3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52999\">https://nvd.nist.gov/vuln/detail/CVE-2025-52999</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-core/pull/943\">https://github.com/FasterXML/jackson-core/pull/943</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h46c-h94j-95f3\">https://github.com/advisories/GHSA-h46c-h94j-95f3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h46c-h94j-95f3",
            "title": "[com.fasterxml.jackson.core:jackson-core] jackson-core can throw a StackoverflowError when processing deeply nested data",
            "date_modified": "2025-06-27T15:22:22.000Z",
            "date_published": "2025-06-27T15:22:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h46c-h94j-95f3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A critical XML External Entity (XXE) vulnerability exists in the xunit-xml-plugin used by Allure 2. The plugin fails to securely configure the XML parser (<code>DocumentBuilderFactory</code>) and allows external entity expansion when processing test result .xml files. This allows attackers to read arbitrary files from the file system and potentially trigger server-side request forgery (SSRF).</p>\n<h3 id=\"details\">Details</h3>\n<p>In <code>\\allure2-main\\plugins\\xunit-xml-plugin\\src\\main\\java\\io\\qameta\\allure\\xunitxml\\XunitXmlPlugin.java</code> the application uses <code>DocumentBuilderFactory</code> without disabling DTDs or external entities. By generating a report with a malicious xml file within it, an attacker can perform XXE to leverage SSRF, or to read system files.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To recreate this vulnerability, you need to install allure for command-line (In my POC I used a Windows 11 Machine). </p>\n<ol>\n<li>Create a folder called <code>allure</code>, and within it, create a malicious XML file. I will attach my SSRF and file reading payloads, however, for the rest of the POC, I will focus on reading system files for better screenshots.</li>\n</ol>\n<p>##SSRF (replace webhook link with your own)\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/a1a9a438-b6f1-4675-973f-a43847a84519\"></p>\n<p>##Reading System Files\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/eb0e1e60-1f76-42e7-b68d-2137bed62fe9\"></p>\n<ol start=\"2\">\n<li>Put the malicious .xml file into the <code>allure</code> directory created previously</li>\n<li>Run the following command to run the report <code>allure generate C:\\path\\to\\directory\\allure -o report --clean</code></li>\n<li>To view and confirm the executed payload, run <code>allure open report</code></li>\n<li>When the report opens, confirm the payload executedby going to <code>Categories &gt; Product defects &gt; &lt;payload response&gt;</code>\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/e7244550-2e9f-4066-b282-86f1eb8cf5e4\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>The explained XXE vulnerability can lead to Arbitrary File Disclosure and Server-Side Request Forgery. This exploitation can also be carried out silently, meaning it can be carried out without user interaction if the tool is automated within an application, and can go undetected with a carefully crafted payload. This could allow a malicious actor to view other source codes which may contain API or product keys, internal application URLs, or other secret items. This makes it an especially high risk when ran within a CI/CD platform.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/allure-framework/allure2/security/advisories/GHSA-h7qf-qmf3-85qg\">https://github.com/allure-framework/allure2/security/advisories/GHSA-h7qf-qmf3-85qg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52888\">https://nvd.nist.gov/vuln/detail/CVE-2025-52888</a></li>\n<li><a href=\"https://github.com/allure-framework/allure2/commit/cbcb33719851ff70adce85d38e15d20fc58d4eb7\">https://github.com/allure-framework/allure2/commit/cbcb33719851ff70adce85d38e15d20fc58d4eb7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7qf-qmf3-85qg\">https://github.com/advisories/GHSA-h7qf-qmf3-85qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7qf-qmf3-85qg",
            "title": "[io.qameta.allure.plugins:trx-plugin] Allure Report allows Improper XXE Restriction via DocumentBuilderFactory",
            "date_modified": "2025-06-25T14:14:13.000Z",
            "date_published": "2025-06-25T14:14:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7qf-qmf3-85qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A critical XML External Entity (XXE) vulnerability exists in the xunit-xml-plugin used by Allure 2. The plugin fails to securely configure the XML parser (<code>DocumentBuilderFactory</code>) and allows external entity expansion when processing test result .xml files. This allows attackers to read arbitrary files from the file system and potentially trigger server-side request forgery (SSRF).</p>\n<h3 id=\"details\">Details</h3>\n<p>In <code>\\allure2-main\\plugins\\xunit-xml-plugin\\src\\main\\java\\io\\qameta\\allure\\xunitxml\\XunitXmlPlugin.java</code> the application uses <code>DocumentBuilderFactory</code> without disabling DTDs or external entities. By generating a report with a malicious xml file within it, an attacker can perform XXE to leverage SSRF, or to read system files.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To recreate this vulnerability, you need to install allure for command-line (In my POC I used a Windows 11 Machine). </p>\n<ol>\n<li>Create a folder called <code>allure</code>, and within it, create a malicious XML file. I will attach my SSRF and file reading payloads, however, for the rest of the POC, I will focus on reading system files for better screenshots.</li>\n</ol>\n<p>##SSRF (replace webhook link with your own)\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/a1a9a438-b6f1-4675-973f-a43847a84519\"></p>\n<p>##Reading System Files\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/eb0e1e60-1f76-42e7-b68d-2137bed62fe9\"></p>\n<ol start=\"2\">\n<li>Put the malicious .xml file into the <code>allure</code> directory created previously</li>\n<li>Run the following command to run the report <code>allure generate C:\\path\\to\\directory\\allure -o report --clean</code></li>\n<li>To view and confirm the executed payload, run <code>allure open report</code></li>\n<li>When the report opens, confirm the payload executedby going to <code>Categories &gt; Product defects &gt; &lt;payload response&gt;</code>\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/e7244550-2e9f-4066-b282-86f1eb8cf5e4\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>The explained XXE vulnerability can lead to Arbitrary File Disclosure and Server-Side Request Forgery. This exploitation can also be carried out silently, meaning it can be carried out without user interaction if the tool is automated within an application, and can go undetected with a carefully crafted payload. This could allow a malicious actor to view other source codes which may contain API or product keys, internal application URLs, or other secret items. This makes it an especially high risk when ran within a CI/CD platform.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/allure-framework/allure2/security/advisories/GHSA-h7qf-qmf3-85qg\">https://github.com/allure-framework/allure2/security/advisories/GHSA-h7qf-qmf3-85qg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52888\">https://nvd.nist.gov/vuln/detail/CVE-2025-52888</a></li>\n<li><a href=\"https://github.com/allure-framework/allure2/commit/cbcb33719851ff70adce85d38e15d20fc58d4eb7\">https://github.com/allure-framework/allure2/commit/cbcb33719851ff70adce85d38e15d20fc58d4eb7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7qf-qmf3-85qg\">https://github.com/advisories/GHSA-h7qf-qmf3-85qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7qf-qmf3-85qg",
            "title": "[io.qameta.allure.plugins:junit-xml-plugin] Allure Report allows Improper XXE Restriction via DocumentBuilderFactory",
            "date_modified": "2025-06-25T14:14:13.000Z",
            "date_published": "2025-06-25T14:14:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7qf-qmf3-85qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A critical XML External Entity (XXE) vulnerability exists in the xunit-xml-plugin used by Allure 2. The plugin fails to securely configure the XML parser (<code>DocumentBuilderFactory</code>) and allows external entity expansion when processing test result .xml files. This allows attackers to read arbitrary files from the file system and potentially trigger server-side request forgery (SSRF).</p>\n<h3 id=\"details\">Details</h3>\n<p>In <code>\\allure2-main\\plugins\\xunit-xml-plugin\\src\\main\\java\\io\\qameta\\allure\\xunitxml\\XunitXmlPlugin.java</code> the application uses <code>DocumentBuilderFactory</code> without disabling DTDs or external entities. By generating a report with a malicious xml file within it, an attacker can perform XXE to leverage SSRF, or to read system files.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To recreate this vulnerability, you need to install allure for command-line (In my POC I used a Windows 11 Machine). </p>\n<ol>\n<li>Create a folder called <code>allure</code>, and within it, create a malicious XML file. I will attach my SSRF and file reading payloads, however, for the rest of the POC, I will focus on reading system files for better screenshots.</li>\n</ol>\n<p>##SSRF (replace webhook link with your own)\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/a1a9a438-b6f1-4675-973f-a43847a84519\"></p>\n<p>##Reading System Files\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/eb0e1e60-1f76-42e7-b68d-2137bed62fe9\"></p>\n<ol start=\"2\">\n<li>Put the malicious .xml file into the <code>allure</code> directory created previously</li>\n<li>Run the following command to run the report <code>allure generate C:\\path\\to\\directory\\allure -o report --clean</code></li>\n<li>To view and confirm the executed payload, run <code>allure open report</code></li>\n<li>When the report opens, confirm the payload executedby going to <code>Categories &gt; Product defects &gt; &lt;payload response&gt;</code>\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/e7244550-2e9f-4066-b282-86f1eb8cf5e4\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>The explained XXE vulnerability can lead to Arbitrary File Disclosure and Server-Side Request Forgery. This exploitation can also be carried out silently, meaning it can be carried out without user interaction if the tool is automated within an application, and can go undetected with a carefully crafted payload. This could allow a malicious actor to view other source codes which may contain API or product keys, internal application URLs, or other secret items. This makes it an especially high risk when ran within a CI/CD platform.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/allure-framework/allure2/security/advisories/GHSA-h7qf-qmf3-85qg\">https://github.com/allure-framework/allure2/security/advisories/GHSA-h7qf-qmf3-85qg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52888\">https://nvd.nist.gov/vuln/detail/CVE-2025-52888</a></li>\n<li><a href=\"https://github.com/allure-framework/allure2/commit/cbcb33719851ff70adce85d38e15d20fc58d4eb7\">https://github.com/allure-framework/allure2/commit/cbcb33719851ff70adce85d38e15d20fc58d4eb7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7qf-qmf3-85qg\">https://github.com/advisories/GHSA-h7qf-qmf3-85qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7qf-qmf3-85qg",
            "title": "[io.qameta.allure.plugins:xunit-xml-plugin] Allure Report allows Improper XXE Restriction via DocumentBuilderFactory",
            "date_modified": "2025-06-25T14:14:13.000Z",
            "date_published": "2025-06-25T14:14:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7qf-qmf3-85qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the Bouncy Castle Crypto Package For Java before BC TLS Java 1.0.19 (ships with BC Java 1.78, BC Java (LTS) 2.73.6) and before BC FIPS TLS Java 1.0.19. When endpoint identification is enabled in the BCJSSE and an SSL socket is created without an explicit hostname (as happens with HttpsURLConnection), hostname verification could be performed against a DNS-resolved IP address in some situations, opening up a possibility of DNS poisoning.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34447\">https://nvd.nist.gov/vuln/detail/CVE-2024-34447</a></li>\n<li><a href=\"https://www.bouncycastle.org/latest_releases.html\">https://www.bouncycastle.org/latest_releases.html</a></li>\n<li><a href=\"https://github.com/bcgit/bc-java/issues/1656\">https://github.com/bcgit/bc-java/issues/1656</a></li>\n<li><a href=\"https://github.com/bcgit/bc-java/wiki/CVE%E2%80%902024%E2%80%9034447\">https://github.com/bcgit/bc-java/wiki/CVE%E2%80%902024%E2%80%9034447</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20240614-0007\">https://security.netapp.com/advisory/ntap-20240614-0007</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4h8f-2wvx-gg5w\">https://github.com/advisories/GHSA-4h8f-2wvx-gg5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4h8f-2wvx-gg5w",
            "title": "[org.bouncycastle:bcprov-lts8on] Bouncy Castle Java Cryptography API vulnerable to DNS poisoning",
            "date_modified": "2025-06-24T18:29:02.000Z",
            "date_published": "2024-05-03T18:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4h8f-2wvx-gg5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the Bouncy Castle Crypto Package For Java before BC TLS Java 1.0.19 (ships with BC Java 1.78, BC Java (LTS) 2.73.6) and before BC FIPS TLS Java 1.0.19. When endpoint identification is enabled in the BCJSSE and an SSL socket is created without an explicit hostname (as happens with HttpsURLConnection), hostname verification could be performed against a DNS-resolved IP address in some situations, opening up a possibility of DNS poisoning.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34447\">https://nvd.nist.gov/vuln/detail/CVE-2024-34447</a></li>\n<li><a href=\"https://www.bouncycastle.org/latest_releases.html\">https://www.bouncycastle.org/latest_releases.html</a></li>\n<li><a href=\"https://github.com/bcgit/bc-java/issues/1656\">https://github.com/bcgit/bc-java/issues/1656</a></li>\n<li><a href=\"https://github.com/bcgit/bc-java/wiki/CVE%E2%80%902024%E2%80%9034447\">https://github.com/bcgit/bc-java/wiki/CVE%E2%80%902024%E2%80%9034447</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20240614-0007\">https://security.netapp.com/advisory/ntap-20240614-0007</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4h8f-2wvx-gg5w\">https://github.com/advisories/GHSA-4h8f-2wvx-gg5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4h8f-2wvx-gg5w",
            "title": "[org.bouncycastle:bctls-fips] Bouncy Castle Java Cryptography API vulnerable to DNS poisoning",
            "date_modified": "2025-06-24T18:29:02.000Z",
            "date_published": "2024-05-03T18:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4h8f-2wvx-gg5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Vert.x 4.5.12 has changed the semantics of the duplication of duplicated context.</p>\n<p>Duplicated context is an object used to propagate data through a processing (synchronous or asynchronous). Each \"transaction\" or \"processing\" runs on its own isolated duplicated context.</p>\n<p>Initially, duplicating a duplicated context was creating a fresh (empty) new context, meaning that the new duplicated context can be used to managed a separated transaction.</p>\n<p>In Vert.x 4.5.12, this semantics has changed, and since the content of the parent duplicated context is copied into the new one, potentially leaking data. </p>\n<p>This CVE is especially for Quarkus as Quarkus extensively uses the Vert.x duplicated context to implement context propagation. With the new semantic data from one transaction can leak to the data from another transaction. From a Vert.x point of view, this new semantic clarifies the behavior. </p>\n<p>A significant amount of data is stored in the duplicated context, including request scope, security details, and metadata. Duplicating a duplicated context is rather rare and is only done in a few places:</p>\n<ul>\n<li>Quarkus REST Client when using OTel (but it's the same transaction, so no leak)</li>\n<li>Quarkus Messaging connectors</li>\n<li>Quarkus SmallRye Health (same transaction, so no leak)</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>After discussion with the Vert.x team, the change will be rolled back in Vert.x 4.x. A new API will be added to Vert.x 5 do distinguish the 2 cases.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When duplicating a duplicated context, the following code can be done to avoid the potential leak:</p>\n<pre><code class=\"language-java\">((ContextInternal) VertxContext.getRootContext(ctx)).duplicate()\n</code></pre>\n<p>This workaround would not be required once the Vert.x version containing the fix will be included. Note that the workaround would still work. </p>\n<h3 id=\"references\">References</h3>\n<p>This issue have been reported in <a href=\"https://github.com/quarkusio/quarkus/issues/48227\">https://github.com/quarkusio/quarkus/issues/48227</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quarkusio/quarkus/security/advisories/GHSA-9623-mj7j-p9v4\">https://github.com/quarkusio/quarkus/security/advisories/GHSA-9623-mj7j-p9v4</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/issues/48227\">https://github.com/quarkusio/quarkus/issues/48227</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/2b58f59f4bf0bae7d35b1abb585b65f2a66787d1\">https://github.com/quarkusio/quarkus/commit/2b58f59f4bf0bae7d35b1abb585b65f2a66787d1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9623-mj7j-p9v4\">https://github.com/advisories/GHSA-9623-mj7j-p9v4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9623-mj7j-p9v4",
            "title": "[io.quarkus:quarkus-vertx] Quarkus potentially leaks data when duplicating a duplicated context",
            "date_modified": "2025-06-23T18:53:23.000Z",
            "date_published": "2025-06-23T18:53:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9623-mj7j-p9v4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Vert.x 4.5.12 has changed the semantics of the duplication of duplicated context.</p>\n<p>Duplicated context is an object used to propagate data through a processing (synchronous or asynchronous). Each \"transaction\" or \"processing\" runs on its own isolated duplicated context.</p>\n<p>Initially, duplicating a duplicated context was creating a fresh (empty) new context, meaning that the new duplicated context can be used to managed a separated transaction.</p>\n<p>In Vert.x 4.5.12, this semantics has changed, and since the content of the parent duplicated context is copied into the new one, potentially leaking data. </p>\n<p>This CVE is especially for Quarkus as Quarkus extensively uses the Vert.x duplicated context to implement context propagation. With the new semantic data from one transaction can leak to the data from another transaction. From a Vert.x point of view, this new semantic clarifies the behavior. </p>\n<p>A significant amount of data is stored in the duplicated context, including request scope, security details, and metadata. Duplicating a duplicated context is rather rare and is only done in a few places:</p>\n<ul>\n<li>Quarkus REST Client when using OTel (but it's the same transaction, so no leak)</li>\n<li>Quarkus Messaging connectors</li>\n<li>Quarkus SmallRye Health (same transaction, so no leak)</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>After discussion with the Vert.x team, the change will be rolled back in Vert.x 4.x. A new API will be added to Vert.x 5 do distinguish the 2 cases.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When duplicating a duplicated context, the following code can be done to avoid the potential leak:</p>\n<pre><code class=\"language-java\">((ContextInternal) VertxContext.getRootContext(ctx)).duplicate()\n</code></pre>\n<p>This workaround would not be required once the Vert.x version containing the fix will be included. Note that the workaround would still work. </p>\n<h3 id=\"references\">References</h3>\n<p>This issue have been reported in <a href=\"https://github.com/quarkusio/quarkus/issues/48227\">https://github.com/quarkusio/quarkus/issues/48227</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quarkusio/quarkus/security/advisories/GHSA-9623-mj7j-p9v4\">https://github.com/quarkusio/quarkus/security/advisories/GHSA-9623-mj7j-p9v4</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/issues/48227\">https://github.com/quarkusio/quarkus/issues/48227</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/2b58f59f4bf0bae7d35b1abb585b65f2a66787d1\">https://github.com/quarkusio/quarkus/commit/2b58f59f4bf0bae7d35b1abb585b65f2a66787d1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9623-mj7j-p9v4\">https://github.com/advisories/GHSA-9623-mj7j-p9v4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9623-mj7j-p9v4",
            "title": "[io.quarkus:quarkus-vertx] Quarkus potentially leaks data when duplicating a duplicated context",
            "date_modified": "2025-06-23T18:53:23.000Z",
            "date_published": "2025-06-23T18:53:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9623-mj7j-p9v4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Vert.x 4.5.12 has changed the semantics of the duplication of duplicated context.</p>\n<p>Duplicated context is an object used to propagate data through a processing (synchronous or asynchronous). Each \"transaction\" or \"processing\" runs on its own isolated duplicated context.</p>\n<p>Initially, duplicating a duplicated context was creating a fresh (empty) new context, meaning that the new duplicated context can be used to managed a separated transaction.</p>\n<p>In Vert.x 4.5.12, this semantics has changed, and since the content of the parent duplicated context is copied into the new one, potentially leaking data. </p>\n<p>This CVE is especially for Quarkus as Quarkus extensively uses the Vert.x duplicated context to implement context propagation. With the new semantic data from one transaction can leak to the data from another transaction. From a Vert.x point of view, this new semantic clarifies the behavior. </p>\n<p>A significant amount of data is stored in the duplicated context, including request scope, security details, and metadata. Duplicating a duplicated context is rather rare and is only done in a few places:</p>\n<ul>\n<li>Quarkus REST Client when using OTel (but it's the same transaction, so no leak)</li>\n<li>Quarkus Messaging connectors</li>\n<li>Quarkus SmallRye Health (same transaction, so no leak)</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>After discussion with the Vert.x team, the change will be rolled back in Vert.x 4.x. A new API will be added to Vert.x 5 do distinguish the 2 cases.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When duplicating a duplicated context, the following code can be done to avoid the potential leak:</p>\n<pre><code class=\"language-java\">((ContextInternal) VertxContext.getRootContext(ctx)).duplicate()\n</code></pre>\n<p>This workaround would not be required once the Vert.x version containing the fix will be included. Note that the workaround would still work. </p>\n<h3 id=\"references\">References</h3>\n<p>This issue have been reported in <a href=\"https://github.com/quarkusio/quarkus/issues/48227\">https://github.com/quarkusio/quarkus/issues/48227</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quarkusio/quarkus/security/advisories/GHSA-9623-mj7j-p9v4\">https://github.com/quarkusio/quarkus/security/advisories/GHSA-9623-mj7j-p9v4</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/issues/48227\">https://github.com/quarkusio/quarkus/issues/48227</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/2b58f59f4bf0bae7d35b1abb585b65f2a66787d1\">https://github.com/quarkusio/quarkus/commit/2b58f59f4bf0bae7d35b1abb585b65f2a66787d1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9623-mj7j-p9v4\">https://github.com/advisories/GHSA-9623-mj7j-p9v4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9623-mj7j-p9v4",
            "title": "[io.quarkus:quarkus-vertx] Quarkus potentially leaks data when duplicating a duplicated context",
            "date_modified": "2025-06-23T18:53:23.000Z",
            "date_published": "2025-06-23T18:53:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9623-mj7j-p9v4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Alkacon OpenCMS v10.5.4 and before is affected by stored cross site scripting (XSS) in the module New User (/opencms/system/workplace/admin/accounts/user_new.jsp). This allows an attacker to insert arbitrary JavaScript as user input (First Name or Last Name), which will be executed whenever the affected snippet is loaded.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11818\">https://nvd.nist.gov/vuln/detail/CVE-2019-11818</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/issues/635\">https://github.com/alkacon/opencms-core/issues/635</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2019/04/30/3\">https://www.openwall.com/lists/oss-security/2019/04/30/3</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/b20c293aac133e110a053f1e6665a9ae82cfdeb3\">https://github.com/alkacon/opencms-core/commit/b20c293aac133e110a053f1e6665a9ae82cfdeb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c8j6-gqq8-4prj\">https://github.com/advisories/GHSA-c8j6-gqq8-4prj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c8j6-gqq8-4prj",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via New User module",
            "date_modified": "2025-06-20T16:05:37.000Z",
            "date_published": "2022-05-24T21:59:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c8j6-gqq8-4prj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in Alkacon Software Open CMS, affecting versions 14 and 15 of the 'Mercury' template. This vulnerability could allow a remote attacker to send a specially crafted JavaScript payload to a victim and partially take control of their browsing session.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6379\">https://nvd.nist.gov/vuln/detail/CVE-2023-6379</a></li>\n<li><a href=\"https://www.incibe.es/en/incibe-cert/notices/aviso/multiple-vulnerabilities-alkacon-software-opencms\">https://www.incibe.es/en/incibe-cert/notices/aviso/multiple-vulnerabilities-alkacon-software-opencms</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/d965c18ac6d24ad75bfea272edb8b2efd4290afa\">https://github.com/alkacon/opencms-core/commit/d965c18ac6d24ad75bfea272edb8b2efd4290afa</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w62v-q77r-66cc\">https://github.com/advisories/GHSA-w62v-q77r-66cc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w62v-q77r-66cc",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via Mercury template",
            "date_modified": "2025-06-20T16:04:53.000Z",
            "date_published": "2023-12-13T12:30:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w62v-q77r-66cc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple cross-site scripting (XSS) vulnerabilities in Alkacon OpenCms before 8.5.2 allow remote attackers to inject arbitrary web script or HTML via the (1) title parameter to system/workplace/views/admin/admin-main.jsp or the (2) requestedResource parameter to system/login/index.html.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4600\">https://nvd.nist.gov/vuln/detail/CVE-2013-4600</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/issues/173\">https://github.com/alkacon/opencms-core/issues/173</a></li>\n<li><a href=\"http://www.opencms.org/en/news/130710-opencms-v852-releasenotes.html\">http://www.opencms.org/en/news/130710-opencms-v852-releasenotes.html</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/72a05e3ea1cf692e2efce002687272e63f98c14a\">https://github.com/alkacon/opencms-core/commit/72a05e3ea1cf692e2efce002687272e63f98c14a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4gfx-p2j4-w2vh\">https://github.com/advisories/GHSA-4gfx-p2j4-w2vh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4gfx-p2j4-w2vh",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via title and requestedResource parameters",
            "date_modified": "2025-06-20T16:03:48.000Z",
            "date_published": "2022-05-17T05:07:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4gfx-p2j4-w2vh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple cross-site scripting (XSS) vulnerabilities in Alkacon OpenCms 9.5.1 and earlier allow remote attackers to inject arbitrary web script or HTML via the (1) homelink parameter to system/modules/org.opencms.workplace.help/jsptemplates/help_head.jsp, (2) workplaceresource parameter to system/workplace/locales/en/help/index.html, (3) path parameter to system/workplace/views/admin/admin-main.jsp, (4) mode parameter to system/workplace/views/explorer/explorer_files.jsp, or (5) query parameter in a search action to system/modules/org.opencms.workplace.help/elements/search.jsp.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-2351\">https://nvd.nist.gov/vuln/detail/CVE-2015-2351</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/issues/304\">https://github.com/alkacon/opencms-core/issues/304</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/130812/Alkacon-OpenCms-9.5.1-Cross-Site-Scripting.html\">http://packetstormsecurity.com/files/130812/Alkacon-OpenCms-9.5.1-Cross-Site-Scripting.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2015/Mar/75\">http://seclists.org/fulldisclosure/2015/Mar/75</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/a2e5cba0adc345943a07d1aacb6adf1a1b20c6fc\">https://github.com/alkacon/opencms-core/commit/a2e5cba0adc345943a07d1aacb6adf1a1b20c6fc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6c8c-f2w2-jvjr\">https://github.com/advisories/GHSA-6c8c-f2w2-jvjr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6c8c-f2w2-jvjr",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via homelink, workplaceresource, mode and query parameters",
            "date_modified": "2025-06-20T16:00:16.000Z",
            "date_published": "2022-05-14T02:49:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6c8c-f2w2-jvjr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in system/workplace/admin/workplace/sessions.jsp in Alkacon OpenCMS 7.0.3 allows remote attackers to inject arbitrary web script or HTML via the searchfilter parameter, a different vector than CVE-2008-1510.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-1753\">https://nvd.nist.gov/vuln/detail/CVE-2008-1753</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/41675\">https://exchange.xforce.ibmcloud.com/vulnerabilities/41675</a></li>\n<li><a href=\"http://securityreason.com/securityalert/3808\">http://securityreason.com/securityalert/3808</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4r3g-w24c-gpr6\">https://github.com/advisories/GHSA-4r3g-w24c-gpr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4r3g-w24c-gpr6",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via searchfilter parameter in system/workplace/admin/workplace/sessions.jsp",
            "date_modified": "2025-06-20T15:59:41.000Z",
            "date_published": "2022-05-01T23:43:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4r3g-w24c-gpr6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in system/workplace/admin/accounts/users_list.jsp in Alkacon OpenCMS 7.0.3 allows remote attackers to inject arbitrary web script or HTML via the (1) searchfilter or (2) listSearchFilter parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-1510\">https://nvd.nist.gov/vuln/detail/CVE-2008-1510</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/41390\">https://exchange.xforce.ibmcloud.com/vulnerabilities/41390</a></li>\n<li><a href=\"http://securityreason.com/securityalert/3777\">http://securityreason.com/securityalert/3777</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/49c5beded65bf0232cab61b1299b85dee9ae2014\">https://github.com/alkacon/opencms-core/commit/49c5beded65bf0232cab61b1299b85dee9ae2014</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg8-5hwc-wg5v\">https://github.com/advisories/GHSA-4fg8-5hwc-wg5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg8-5hwc-wg5v",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via searchfilter or listSearchFilter parameter",
            "date_modified": "2025-06-20T15:57:41.000Z",
            "date_published": "2022-05-01T23:40:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg8-5hwc-wg5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Absolute path traversal vulnerability in system/workplace/admin/workplace/logfileview/logfileViewSettings.jsp in Alkacon OpenCms 7.0.3 and 7.0.4 allows remote authenticated administrators to read arbitrary files via a full pathname in the filePath.0 parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-1301\">https://nvd.nist.gov/vuln/detail/CVE-2008-1301</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/41096\">https://exchange.xforce.ibmcloud.com/vulnerabilities/41096</a></li>\n<li><a href=\"http://securityreason.com/securityalert/3731\">http://securityreason.com/securityalert/3731</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/7b73b5559c1b025dfe0f7b38ed4119c25b9df409\">https://github.com/alkacon/opencms-core/commit/7b73b5559c1b025dfe0f7b38ed4119c25b9df409</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xxjj-jhgc-r68f\">https://github.com/advisories/GHSA-xxjj-jhgc-r68f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xxjj-jhgc-r68f",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS Absolute Path Traversal via pathname in filePath.0 parameter",
            "date_modified": "2025-06-20T15:49:30.000Z",
            "date_published": "2022-05-01T23:38:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xxjj-jhgc-r68f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in the Logfile Viewer Settings function in system/workplace/admin/workplace/logfileview/logfileViewSettings.jsp in Alkacon OpenCms 7.0.3 and 7.0.4 allows remote attackers to inject arbitrary web script or HTML via the filePath.0 parameter in a save action, a different vector than CVE-2008-1045.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-1300\">https://nvd.nist.gov/vuln/detail/CVE-2008-1300</a></li>\n<li><a href=\"http://securityreason.com/securityalert/3731\">http://securityreason.com/securityalert/3731</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/7b73b5559c1b025dfe0f7b38ed4119c25b9df409\">https://github.com/alkacon/opencms-core/commit/7b73b5559c1b025dfe0f7b38ed4119c25b9df409</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w3v2-vfrj-j9g8\">https://github.com/advisories/GHSA-w3v2-vfrj-j9g8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w3v2-vfrj-j9g8",
            "title": "[org.opencms:opencms-core] Alkacon Open CMS XSS via Logfile Viewer Settings function",
            "date_modified": "2025-06-20T15:47:40.000Z",
            "date_published": "2022-05-01T23:38:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w3v2-vfrj-j9g8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in the file tree navigation function in system/workplace/views/explorer/tree_files.jsp in Alkacon OpenCMS 7.0.3 allows remote attackers to inject arbitrary web script or HTML via the resource parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-1045\">https://nvd.nist.gov/vuln/detail/CVE-2008-1045</a></li>\n<li><a href=\"http://securityreason.com/securityalert/3702\">http://securityreason.com/securityalert/3702</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/49c5beded65bf0232cab61b1299b85dee9ae2014\">https://github.com/alkacon/opencms-core/commit/49c5beded65bf0232cab61b1299b85dee9ae2014</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v965-wwrq-gxfg\">https://github.com/advisories/GHSA-v965-wwrq-gxfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v965-wwrq-gxfg",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS XSS via file tree navigation in system/workplace/views/explorer/tree_files.jsp",
            "date_modified": "2025-06-20T15:37:34.000Z",
            "date_published": "2022-05-01T23:36:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v965-wwrq-gxfg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>system/workplace/views/admin/admin-main.jsp in Alkacon OpenCms before 6.2.2 does not restrict access to administrator functions, which allows remote authenticated users to (1) send broadcast messages to all users (/workplace/broadcast), (2) list all users (/accounts/users), (3) add webusers (/accounts/webusers/new), (4) upload database import and export files (/database/importhttp), (5) upload arbitrary program modules (/modules/modules_import), and (6) read the log file (/workplace/logfileview) by setting the appropriate value for the path parameter in a direct request to admin-main.jsp.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2006-3935\">https://nvd.nist.gov/vuln/detail/CVE-2006-3935</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/27996\">https://exchange.xforce.ibmcloud.com/vulnerabilities/27996</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/28003\">https://exchange.xforce.ibmcloud.com/vulnerabilities/28003</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/28010\">https://exchange.xforce.ibmcloud.com/vulnerabilities/28010</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/28026\">https://exchange.xforce.ibmcloud.com/vulnerabilities/28026</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/28031\">https://exchange.xforce.ibmcloud.com/vulnerabilities/28031</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/28036\">https://exchange.xforce.ibmcloud.com/vulnerabilities/28036</a></li>\n<li><a href=\"http://www.opencms.org/export/download/opencms/opencms_6.2.2_src.zip\">http://www.opencms.org/export/download/opencms/opencms_6.2.2_src.zip</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/8f1c04c5a16fe8d0bdbd13b65bf2a7b5cf100ff9\">https://github.com/alkacon/opencms-core/commit/8f1c04c5a16fe8d0bdbd13b65bf2a7b5cf100ff9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v3c3-qr6m-8m7m\">https://github.com/advisories/GHSA-v3c3-qr6m-8m7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v3c3-qr6m-8m7m",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS Improper Access Control via system/workplace/views/admin/admin-main.jsp",
            "date_modified": "2025-06-20T15:33:39.000Z",
            "date_published": "2022-05-01T07:13:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v3c3-qr6m-8m7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Absolute path traversal vulnerability in downloadTrigger.jsp in Alkacon OpenCms before 6.2.2 allows remote authenticated users to download arbitrary files via an absolute pathname in the filePath parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2006-3934\">https://nvd.nist.gov/vuln/detail/CVE-2006-3934</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/28000\">https://exchange.xforce.ibmcloud.com/vulnerabilities/28000</a></li>\n<li><a href=\"http://securityreason.com/securityalert/1302\">http://securityreason.com/securityalert/1302</a></li>\n<li><a href=\"http://www.opencms.org/export/download/opencms/opencms_6.2.2_src.zip\">http://www.opencms.org/export/download/opencms/opencms_6.2.2_src.zip</a></li>\n<li><a href=\"http://www.opencms.org/opencms/en/shownews.html?id=1002\">http://www.opencms.org/opencms/en/shownews.html?id=1002</a></li>\n<li><a href=\"https://github.com/alkacon/opencms-core/commit/8f1c04c5a16fe8d0bdbd13b65bf2a7b5cf100ff9\">https://github.com/alkacon/opencms-core/commit/8f1c04c5a16fe8d0bdbd13b65bf2a7b5cf100ff9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64hc-4jx3-62jp\">https://github.com/advisories/GHSA-64hc-4jx3-62jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64hc-4jx3-62jp",
            "title": "[org.opencms:opencms-core] Alkacon OpenCMS Absolute Path Traversal via pathname in filePath parameter",
            "date_modified": "2025-06-20T15:23:27.000Z",
            "date_published": "2022-05-01T07:13:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64hc-4jx3-62jp"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}