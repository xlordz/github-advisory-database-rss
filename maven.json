{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href=\"https://github.com/querydsl/querydsl\">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Vulnerable code may look as follows:</p>\n<pre><code>@GetMapping\npublic List&lt;Test&gt; getProducts(@RequestParam(\"orderBy\") String orderBy) {\n    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\n\n    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\n    return orderedQuery.fetch();\n}\n</code></pre>\n<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Full POC code is available in repository:\n<a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203/\">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>\nWhen we take a look at source code shown in Details section the functionality is as follows:</p>\n<ol>\n<li>Create JPAQuery object instance:</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n</code></pre>\n<ol start=\"2\">\n<li>Create OrderSpecifier object instance:</li>\n</ol>\n<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\nOrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n</code></pre>\n<p>Where orderBy variable is user provided input.</p>\n<ol start=\"3\">\n<li>order and run the query</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\norderedQuery.fetch();\n</code></pre>\n<p>When user goes to URL \n<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>\nThe generated query will look something like this:</p>\n<pre><code>select test                                                                                                                                     \nfrom Test test\norder by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc\n</code></pre>\n<h4 id=\"environment\">Environment</h4>\n<p>Library versions used in proof of concept to reproduce the vulnerability:</p>\n<pre><code>querydsl-jpa: 6.8.0\nquerydsl-apt: 6.8.0\nhibernate-core: 6.1.1.Final\njakarta.persistence-api: 3.1.0\npostgresql: 42.7.4\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49203\">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/issues/3757\">https://github.com/querydsl/querydsl/issues/3757</a></li>\n<li><a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203\">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0\">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>\n<li><a href=\"https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html\">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg",
            "title": "[com.querydsl:querydsl-apt] Querydsl vulnerable to HQL injection trough orderBy",
            "date_modified": "2024-11-27T19:00:54.000Z",
            "date_published": "2024-11-27T19:00:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href=\"https://github.com/querydsl/querydsl\">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Vulnerable code may look as follows:</p>\n<pre><code>@GetMapping\npublic List&lt;Test&gt; getProducts(@RequestParam(\"orderBy\") String orderBy) {\n    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\n\n    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\n    return orderedQuery.fetch();\n}\n</code></pre>\n<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Full POC code is available in repository:\n<a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203/\">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>\nWhen we take a look at source code shown in Details section the functionality is as follows:</p>\n<ol>\n<li>Create JPAQuery object instance:</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n</code></pre>\n<ol start=\"2\">\n<li>Create OrderSpecifier object instance:</li>\n</ol>\n<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\nOrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n</code></pre>\n<p>Where orderBy variable is user provided input.</p>\n<ol start=\"3\">\n<li>order and run the query</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\norderedQuery.fetch();\n</code></pre>\n<p>When user goes to URL \n<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>\nThe generated query will look something like this:</p>\n<pre><code>select test                                                                                                                                     \nfrom Test test\norder by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc\n</code></pre>\n<h4 id=\"environment\">Environment</h4>\n<p>Library versions used in proof of concept to reproduce the vulnerability:</p>\n<pre><code>querydsl-jpa: 6.8.0\nquerydsl-apt: 6.8.0\nhibernate-core: 6.1.1.Final\njakarta.persistence-api: 3.1.0\npostgresql: 42.7.4\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49203\">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/issues/3757\">https://github.com/querydsl/querydsl/issues/3757</a></li>\n<li><a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203\">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0\">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>\n<li><a href=\"https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html\">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg",
            "title": "[com.querydsl:querydsl-jpa] Querydsl vulnerable to HQL injection trough orderBy",
            "date_modified": "2024-11-27T19:00:54.000Z",
            "date_published": "2024-11-27T19:00:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href=\"https://github.com/querydsl/querydsl\">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Vulnerable code may look as follows:</p>\n<pre><code>@GetMapping\npublic List&lt;Test&gt; getProducts(@RequestParam(\"orderBy\") String orderBy) {\n    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\n\n    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\n    return orderedQuery.fetch();\n}\n</code></pre>\n<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Full POC code is available in repository:\n<a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203/\">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>\nWhen we take a look at source code shown in Details section the functionality is as follows:</p>\n<ol>\n<li>Create JPAQuery object instance:</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n</code></pre>\n<ol start=\"2\">\n<li>Create OrderSpecifier object instance:</li>\n</ol>\n<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\nOrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n</code></pre>\n<p>Where orderBy variable is user provided input.</p>\n<ol start=\"3\">\n<li>order and run the query</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\norderedQuery.fetch();\n</code></pre>\n<p>When user goes to URL \n<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>\nThe generated query will look something like this:</p>\n<pre><code>select test                                                                                                                                     \nfrom Test test\norder by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc\n</code></pre>\n<h4 id=\"environment\">Environment</h4>\n<p>Library versions used in proof of concept to reproduce the vulnerability:</p>\n<pre><code>querydsl-jpa: 6.8.0\nquerydsl-apt: 6.8.0\nhibernate-core: 6.1.1.Final\njakarta.persistence-api: 3.1.0\npostgresql: 42.7.4\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49203\">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/issues/3757\">https://github.com/querydsl/querydsl/issues/3757</a></li>\n<li><a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203\">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0\">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>\n<li><a href=\"https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html\">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg",
            "title": "[io.github.openfeign.querydsl:querydsl-apt] Querydsl vulnerable to HQL injection trough orderBy",
            "date_modified": "2024-11-27T19:00:54.000Z",
            "date_published": "2024-11-27T19:00:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href=\"https://github.com/querydsl/querydsl\">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Vulnerable code may look as follows:</p>\n<pre><code>@GetMapping\npublic List&lt;Test&gt; getProducts(@RequestParam(\"orderBy\") String orderBy) {\n    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\n\n    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\n    return orderedQuery.fetch();\n}\n</code></pre>\n<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Full POC code is available in repository:\n<a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203/\">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>\nWhen we take a look at source code shown in Details section the functionality is as follows:</p>\n<ol>\n<li>Create JPAQuery object instance:</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);\n</code></pre>\n<ol start=\"2\">\n<li>Create OrderSpecifier object instance:</li>\n</ol>\n<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, \"test\");\nOrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));\n</code></pre>\n<p>Where orderBy variable is user provided input.</p>\n<ol start=\"3\">\n<li>order and run the query</li>\n</ol>\n<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);\norderedQuery.fetch();\n</code></pre>\n<p>When user goes to URL \n<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>\nThe generated query will look something like this:</p>\n<pre><code>select test                                                                                                                                     \nfrom Test test\norder by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc\n</code></pre>\n<h4 id=\"environment\">Environment</h4>\n<p>Library versions used in proof of concept to reproduce the vulnerability:</p>\n<pre><code>querydsl-jpa: 6.8.0\nquerydsl-apt: 6.8.0\nhibernate-core: 6.1.1.Final\njakarta.persistence-api: 3.1.0\npostgresql: 42.7.4\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49203\">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/issues/3757\">https://github.com/querydsl/querydsl/issues/3757</a></li>\n<li><a href=\"https://github.com/CSIRTTrizna/CVE-2024-49203\">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>\n<li><a href=\"https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0\">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>\n<li><a href=\"https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html\">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q3q-6v5j-h6vg\">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg",
            "title": "[io.github.openfeign.querydsl:querydsl-jpa] Querydsl vulnerable to HQL injection trough orderBy",
            "date_modified": "2024-11-27T19:00:54.000Z",
            "date_published": "2024-11-27T19:00:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Validator.isValidSafeHTML</code> method can result in false negatives where it reports some input as safe (i.e., returns true), but really isn't, and using that same input as-is can in certain circumstances result in XSS vulnerabilities. Because this method cannot be fixed, it is being deprecated and will be removed in one years time from when this advisory is published. Full details may be found in <a href=\"https://github.com/ESAPI/esapi-java-legacy/blob/develop/documentation/ESAPI-security-bulletin12.pdf\">ESAPI Security Bulletin #12</a>.</p>\n<p>Note that all versions of ESAPI, that have this method (which dates back to at least the ESAPI 1.3 release more than 15 years ago) have this issue and it will continue to exist until we remove these two methods in a future ESAPI release.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>There is no patch. We do not believe that it is possible to patch this pretentiously named method other then perhaps renaming it to something like Validator.mightThisBeValidSafeHTML to dissuade developers from using it.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Stop using this method. Note that <code>Validator.getValidSafeHTML</code> is believed to be safe to use with the default <strong>antisamy-esapi.xml</strong> AntiSamy policy file.</p>\n<h3 id=\"why-is-no-cve-being-filed\">Why is no CVE being filed?</h3>\n<p>We outline the reasons in the section \"Why no CVE for this issue?\" in <a href=\"https://github.com/ESAPI/esapi-java-legacy/blob/develop/documentation/ESAPI-security-bulletin12.pdf\">ESAPI Security Bulletin #12</a>. If after reading that, if <em>you</em> still want to file a CVE or this, knock yourself out.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79</a>\n<a href=\"https://cwe.mitre.org/data/definitions/80.html\">CWE-80</a>\n<a href=\"https://github.com/ESAPI/esapi-java-legacy/blob/develop/documentation/ESAPI-security-bulletin12.pdf\">ESAPI Security Bulletin #12</a></p>\n<h3 id=\"final-resolution\">Final resolution</h3>\n<p>This GitHub Security Advisory should now be considered remediated in <a href=\"https://github.com/ESAPI/esapi-java-legacy/releases/tag/esapi-2.6.0.0\">ESAPI versions 2.6.0.0</a> and later as the deprecated methods have been removed from the ESAPI jar.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ESAPI/esapi-java-legacy/security/advisories/GHSA-r68h-jhhj-9jvm\">https://github.com/ESAPI/esapi-java-legacy/security/advisories/GHSA-r68h-jhhj-9jvm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r68h-jhhj-9jvm\">https://github.com/advisories/GHSA-r68h-jhhj-9jvm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r68h-jhhj-9jvm",
            "title": "[org.owasp.esapi:esapi] Validator.isValidSafeHTML is being deprecated and will be deleted from org.owasp.esapi:esapi in 1 year",
            "date_modified": "2024-11-26T18:53:54.000Z",
            "date_published": "2023-11-27T17:25:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r68h-jhhj-9jvm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>sigstore-java has insufficient verification for a situation where a validly-signed but \"mismatched\" bundle is presented as proof of inclusion into a transparency log</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This bug impacts clients using any variation of KeylessVerifier.verify()</p>\n<p>The verifier may accept a bundle with an unrelated log entry, cryptographically verifying everything but fails to ensure the log entry applies to the artifact in question, thereby \"verifying\" a bundle without any proof the signing event was logged.</p>\n<p>This allows the creation of a bundle without fulcio certificate and private key combined with an unrelated but time-correct log entry to fake logging of a signing event. A malicious actor using a compromised identity may want to do this to prevent discovery via rekor's log monitors.</p>\n<p>The signer's identity will still be available to the verifier. The signature on the bundle must still be on the correct artifact for the verifier to pass.</p>\n<p>sigstore-gradle-plugin and sigstore-maven-plugin are not affected by this as they only provide signing functionality.</p>\n<h3 id=\"steps-to-reproduce\">Steps To Reproduce</h3>\n<p>Build the java sigstore-cli at v1.0.0</p>\n<pre><code class=\"language-shell\">git clone --branch v1.0.0 git@github.com:sigstore/sigstore-java\ncd sigstore-java\n./gradlew :sigstore-cli:build\ntar -xf sigstore-cli/build/distributions/sigstore-cli-1.0.0-SNAPSHOT.tar --strip-components 1\n</code></pre>\n<p>Create two random blobs</p>\n<pre><code class=\"language-shell\">dd bs=1 count=50 &lt;/dev/urandom &gt; blob1\ndd bs=1 count=50 &lt;/dev/urandom &gt; blob2\n</code></pre>\n<p>Sign each blob using the cli</p>\n<pre><code class=\"language-shell\">./bin/sigstore-cli sign --bundle=blob1.sigstore.json blob1\n./bin/sigstore-cli sign --bundle=blob2.sigstore.json blob2\n</code></pre>\n<p>Create a falsified bundle including the base64Signature and cert fields from blob1's bundle and the rekorBundle from blob2's bundle</p>\n<pre><code class=\"language-shell\">jq --slurpfile bundle2 blob2.sigstore.json '.verificationMaterial.tlogEntries = $bundle2[0].verificationMaterial.tlogEntries' blob1.sigstore.json &gt; invalidBundle.sigstore.json\n</code></pre>\n<p>Find the embedded artifact hash in the bundle, and compare to the sha256 sums of blob1 and blob2. See that the bundle tlog entry matches blob2.</p>\n<pre><code class=\"language-shell\">cat invalidBundle.sigstore.json | jq -r '.verificationMaterial.tlogEntries[0].canonicalizedBody' | base64 -d | jq -r '.spec.data.hash.value'\n\nsha256sum blob1 blob2\n</code></pre>\n<p>Verify the bundle against blob1</p>\n<pre><code class=\"language-shell\">./bin/sigstore-cli verify --bundle=invalidBundle.sigstore.json blob1\n# no errors???!\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in v1.1.0 release with <a href=\"https://github.com/sigstore/sigstore-java/pull/856\">https://github.com/sigstore/sigstore-java/pull/856</a>\nAdded conformance test for all clients in: <a href=\"https://github.com/sigstore/sigstore-conformance/pull/166\">https://github.com/sigstore/sigstore-conformance/pull/166</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ol>\n<li>Verifiers can recreate the log entry and compare it to the provided log entry.</li>\n</ol>\n<pre><code>var bundle = Bundle.from(bundleFile, StandardCharsets.UTF);\nvar rekorEntry = bundle.getEntries().get(0)\nvar calculatedHashedRekord =\n    Base64.toBase64String(\n        HashedRekordRequest.newHashedRekordRequest(\n               artifactDigest, Certificates.toPemBytes(leafCert), signature)\n            .toJsonPayload()\n            .getBytes(StandardCharsets.UTF_8));\nif (!Objects.equals(calculatedHashedRekord, rekorEntry.getBody())) {\n  throw new Exception(\"Provided verification materials are inconsistent with log entry\");\n}\n</code></pre>\n<ol start=\"2\">\n<li>Verifiers can contact the log and discover if the artifact signing event has indeed been added to the log</li>\n</ol>\n<pre><code class=\"language-java\">var bundle = Bundle.from(bundleFile, StandardCharsets.UTF);\nvar artifactDigest = Files.asByteSource(Path.of(artifact).toFile()).hash(Hashing.sha256()).asBytes();\nvar sigstoreTufClientBuilder = SigstoreTufClient.builder().usePublicGoodInstance();\nvar trustedRootProvider = TrustedRootProvider.from(sigstoreTufClientBuilder);\nvar entry = RekorEntryFetcher.fromTrustedRoot(trustedRootProvider).getEntryFromRekor(artifactDigest, Certificates.getLeaf(bundle.getCertPath()), bundle.getMessageSignature().get().getSignature());\nRekorVerifier.newRekorVerifier(trustedRootProvider.get()).verifyEntry(entry);\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/sigstore-java/security/advisories/GHSA-q4xm-6fjc-5f6w\">https://github.com/sigstore/sigstore-java/security/advisories/GHSA-q4xm-6fjc-5f6w</a></li>\n<li><a href=\"https://github.com/sigstore/sigstore-conformance/pull/166\">https://github.com/sigstore/sigstore-conformance/pull/166</a></li>\n<li><a href=\"https://github.com/sigstore/sigstore-java/pull/856\">https://github.com/sigstore/sigstore-java/pull/856</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53267\">https://nvd.nist.gov/vuln/detail/CVE-2024-53267</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q4xm-6fjc-5f6w\">https://github.com/advisories/GHSA-q4xm-6fjc-5f6w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q4xm-6fjc-5f6w",
            "title": "[dev.sigstore:sigstore-java] sigstore-java has vulnerability with bundle verification",
            "date_modified": "2024-11-26T21:43:37.000Z",
            "date_published": "2024-11-26T16:38:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q4xm-6fjc-5f6w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Keycloak. Deployments of Keycloak with a reverse proxy not using pass-through termination of TLS, with mTLS enabled, are affected. This issue may allow an attacker on the local network to authenticate as any user or client that leverages mTLS as the authentication mechanism.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-93ww-43rr-79v3\">https://github.com/keycloak/keycloak/security/advisories/GHSA-93ww-43rr-79v3</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/35217\">https://github.com/keycloak/keycloak/issues/35217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-93ww-43rr-79v3\">https://github.com/advisories/GHSA-93ww-43rr-79v3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-93ww-43rr-79v3",
            "title": "[org.keycloak:keycloak-core] Keycloak mTLS Authentication Bypass via Reverse Proxy TLS Termination ",
            "date_modified": "2024-11-25T19:40:46.000Z",
            "date_published": "2024-11-25T19:40:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-93ww-43rr-79v3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Keycloak. Deployments of Keycloak with a reverse proxy not using pass-through termination of TLS, with mTLS enabled, are affected. This issue may allow an attacker on the local network to authenticate as any user or client that leverages mTLS as the authentication mechanism.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-93ww-43rr-79v3\">https://github.com/keycloak/keycloak/security/advisories/GHSA-93ww-43rr-79v3</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/35217\">https://github.com/keycloak/keycloak/issues/35217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-93ww-43rr-79v3\">https://github.com/advisories/GHSA-93ww-43rr-79v3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-93ww-43rr-79v3",
            "title": "[org.keycloak:keycloak-core] Keycloak mTLS Authentication Bypass via Reverse Proxy TLS Termination ",
            "date_modified": "2024-11-25T19:40:46.000Z",
            "date_published": "2024-11-25T19:40:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-93ww-43rr-79v3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Keycloak versions 26 and earlier are vulnerable to a denial-of-service (DoS) attack through improper handling of proxy headers. When Keycloak is configured to accept incoming proxy headers, it may accept non-IP values, such as obfuscated identifiers, without proper validation. This can lead to costly DNS resolution operations, which an attacker could exploit to tie up IO threads and potentially cause a denial of service.</p>\n<p>The attacker must have access to send requests to a Keycloak instance that is configured to accept proxy headers, specifically when reverse proxies do not overwrite incoming headers, and Keycloak is configured to trust these headers.</p>\n<p>For Keycloak version 26, for successful exploitation includes: the realm must have SslRequired=EXTERNAL (the default), HTTP must be enabled, the instance must not be using a full hostname URL, access must come from behind a proxy (assuming the proxy overwrites the X-Forwarded-For header), and trusted proxies must not be set or must incorrectly trust the client from which the request is originating.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-jgwc-jh89-rpgq\">https://github.com/keycloak/keycloak/security/advisories/GHSA-jgwc-jh89-rpgq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9666\">https://nvd.nist.gov/vuln/detail/CVE-2024-9666</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/35216\">https://github.com/keycloak/keycloak/issues/35216</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-9666\">https://access.redhat.com/security/cve/CVE-2024-9666</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2317440\">https://bugzilla.redhat.com/show_bug.cgi?id=2317440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgwc-jh89-rpgq\">https://github.com/advisories/GHSA-jgwc-jh89-rpgq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgwc-jh89-rpgq",
            "title": "[org.keycloak:keycloak-quarkus-server] Keycloak proxy header handling Denial-of-Service (DoS) vulnerability",
            "date_modified": "2024-11-25T19:39:12.000Z",
            "date_published": "2024-11-25T19:39:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgwc-jh89-rpgq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Keycloak versions 26 and earlier are vulnerable to a denial-of-service (DoS) attack through improper handling of proxy headers. When Keycloak is configured to accept incoming proxy headers, it may accept non-IP values, such as obfuscated identifiers, without proper validation. This can lead to costly DNS resolution operations, which an attacker could exploit to tie up IO threads and potentially cause a denial of service.</p>\n<p>The attacker must have access to send requests to a Keycloak instance that is configured to accept proxy headers, specifically when reverse proxies do not overwrite incoming headers, and Keycloak is configured to trust these headers.</p>\n<p>For Keycloak version 26, for successful exploitation includes: the realm must have SslRequired=EXTERNAL (the default), HTTP must be enabled, the instance must not be using a full hostname URL, access must come from behind a proxy (assuming the proxy overwrites the X-Forwarded-For header), and trusted proxies must not be set or must incorrectly trust the client from which the request is originating.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-jgwc-jh89-rpgq\">https://github.com/keycloak/keycloak/security/advisories/GHSA-jgwc-jh89-rpgq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9666\">https://nvd.nist.gov/vuln/detail/CVE-2024-9666</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/35216\">https://github.com/keycloak/keycloak/issues/35216</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-9666\">https://access.redhat.com/security/cve/CVE-2024-9666</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2317440\">https://bugzilla.redhat.com/show_bug.cgi?id=2317440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgwc-jh89-rpgq\">https://github.com/advisories/GHSA-jgwc-jh89-rpgq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgwc-jh89-rpgq",
            "title": "[org.keycloak:keycloak-quarkus-server] Keycloak proxy header handling Denial-of-Service (DoS) vulnerability",
            "date_modified": "2024-11-25T19:39:12.000Z",
            "date_published": "2024-11-25T19:39:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgwc-jh89-rpgq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-jgwc-jh89-rpgq. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A vulnerability was found in the Keycloak Server. The Keycloak Server is vulnerable to a denial of service (DoS) attack due to improper handling of proxy headers. When Keycloak is configured to accept incoming proxy headers, it may accept non-IP values, such as obfuscated identifiers, without proper validation. This issue can lead to costly DNS resolution operations, which an attacker could exploit to tie up IO threads and potentially cause a denial of service.\nThe attacker must have access to send requests to a Keycloak instance that is configured to accept proxy headers, specifically when reverse proxies do not overwrite incoming headers, and Keycloak is configured to trust these headers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9666\">https://nvd.nist.gov/vuln/detail/CVE-2024-9666</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-9666\">https://access.redhat.com/security/cve/CVE-2024-9666</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2317440\">https://bugzilla.redhat.com/show_bug.cgi?id=2317440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pcx7-8hxg-j823\">https://github.com/advisories/GHSA-pcx7-8hxg-j823</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pcx7-8hxg-j823",
            "title": "[org.keycloak:keycloak-quarkus-server] Duplicate Advisory: Keycloak proxy header handling Denial-of-Service (DoS) vulnerability",
            "date_modified": "2024-11-25T19:35:57.000Z",
            "date_published": "2024-11-25T09:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pcx7-8hxg-j823"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-jgwc-jh89-rpgq. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A vulnerability was found in the Keycloak Server. The Keycloak Server is vulnerable to a denial of service (DoS) attack due to improper handling of proxy headers. When Keycloak is configured to accept incoming proxy headers, it may accept non-IP values, such as obfuscated identifiers, without proper validation. This issue can lead to costly DNS resolution operations, which an attacker could exploit to tie up IO threads and potentially cause a denial of service.\nThe attacker must have access to send requests to a Keycloak instance that is configured to accept proxy headers, specifically when reverse proxies do not overwrite incoming headers, and Keycloak is configured to trust these headers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9666\">https://nvd.nist.gov/vuln/detail/CVE-2024-9666</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-9666\">https://access.redhat.com/security/cve/CVE-2024-9666</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2317440\">https://bugzilla.redhat.com/show_bug.cgi?id=2317440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pcx7-8hxg-j823\">https://github.com/advisories/GHSA-pcx7-8hxg-j823</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pcx7-8hxg-j823",
            "title": "[org.keycloak:keycloak-quarkus-server] Duplicate Advisory: Keycloak proxy header handling Denial-of-Service (DoS) vulnerability",
            "date_modified": "2024-11-25T19:35:57.000Z",
            "date_published": "2024-11-25T09:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pcx7-8hxg-j823"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Keycloak. This issue occurs because sensitive runtime values, such as passwords, may be captured during the Keycloak build process and embedded as default values in bytecode, leading to unintended information disclosure. In Keycloak 26, sensitive data specified directly in environment variables during the build process is also stored as a default values, making it accessible during runtime. Indirect usage of environment variables for SPI options and Quarkus properties is also vulnerable due to unconditional expansion by PropertyMapper logic, capturing sensitive data as default values in all Keycloak versions up to 26.0.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-v7gv-xpgf-6395\">https://github.com/keycloak/keycloak/security/advisories/GHSA-v7gv-xpgf-6395</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10451\">https://nvd.nist.gov/vuln/detail/CVE-2024-10451</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/198214310eb45b86707f823ccb5a2d65c814b528\">https://github.com/keycloak/keycloak/commit/198214310eb45b86707f823ccb5a2d65c814b528</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10451\">https://access.redhat.com/security/cve/CVE-2024-10451</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322096\">https://bugzilla.redhat.com/show_bug.cgi?id=2322096</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v7gv-xpgf-6395\">https://github.com/advisories/GHSA-v7gv-xpgf-6395</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v7gv-xpgf-6395",
            "title": "[org.keycloak:keycloak-quarkus-server] Keycloak Build Process Exposes Sensitive Data",
            "date_modified": "2024-11-26T16:29:03.000Z",
            "date_published": "2024-11-25T18:41:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v7gv-xpgf-6395"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Keycloak. This issue occurs because sensitive runtime values, such as passwords, may be captured during the Keycloak build process and embedded as default values in bytecode, leading to unintended information disclosure. In Keycloak 26, sensitive data specified directly in environment variables during the build process is also stored as a default values, making it accessible during runtime. Indirect usage of environment variables for SPI options and Quarkus properties is also vulnerable due to unconditional expansion by PropertyMapper logic, capturing sensitive data as default values in all Keycloak versions up to 26.0.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-v7gv-xpgf-6395\">https://github.com/keycloak/keycloak/security/advisories/GHSA-v7gv-xpgf-6395</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10451\">https://nvd.nist.gov/vuln/detail/CVE-2024-10451</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/198214310eb45b86707f823ccb5a2d65c814b528\">https://github.com/keycloak/keycloak/commit/198214310eb45b86707f823ccb5a2d65c814b528</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10451\">https://access.redhat.com/security/cve/CVE-2024-10451</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322096\">https://bugzilla.redhat.com/show_bug.cgi?id=2322096</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v7gv-xpgf-6395\">https://github.com/advisories/GHSA-v7gv-xpgf-6395</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v7gv-xpgf-6395",
            "title": "[org.keycloak:keycloak-quarkus-server] Keycloak Build Process Exposes Sensitive Data",
            "date_modified": "2024-11-26T16:29:03.000Z",
            "date_published": "2024-11-25T18:41:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v7gv-xpgf-6395"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-v7gv-xpgf-6395. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A flaw was found in Keycloak. This issue occurs because sensitive runtime values, such as passwords, may be captured during the Keycloak build process and embedded as default values in bytecode, leading to unintended information disclosure. In Keycloak 26, sensitive data specified directly in environment variables during the build process is also stored as a default values, making it accessible during runtime. Indirect usage of environment variables for SPI options and Quarkus properties is also vulnerable due to unconditional expansion by PropertyMapper logic, capturing sensitive data as default values in all Keycloak versions up to 26.0.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10451\">https://nvd.nist.gov/vuln/detail/CVE-2024-10451</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10451\">https://access.redhat.com/security/cve/CVE-2024-10451</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322096\">https://bugzilla.redhat.com/show_bug.cgi?id=2322096</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jcgg-mg9g-p9wf\">https://github.com/advisories/GHSA-jcgg-mg9g-p9wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jcgg-mg9g-p9wf",
            "title": "[org.keycloak:keycloak-quarkus-server] Duplicate Advisory: Keycloak Build Process Exposes Sensitive Data",
            "date_modified": "2024-11-25T18:38:23.000Z",
            "date_published": "2024-11-25T09:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jcgg-mg9g-p9wf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-v7gv-xpgf-6395. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A flaw was found in Keycloak. This issue occurs because sensitive runtime values, such as passwords, may be captured during the Keycloak build process and embedded as default values in bytecode, leading to unintended information disclosure. In Keycloak 26, sensitive data specified directly in environment variables during the build process is also stored as a default values, making it accessible during runtime. Indirect usage of environment variables for SPI options and Quarkus properties is also vulnerable due to unconditional expansion by PropertyMapper logic, capturing sensitive data as default values in all Keycloak versions up to 26.0.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10451\">https://nvd.nist.gov/vuln/detail/CVE-2024-10451</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10451\">https://access.redhat.com/security/cve/CVE-2024-10451</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322096\">https://bugzilla.redhat.com/show_bug.cgi?id=2322096</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jcgg-mg9g-p9wf\">https://github.com/advisories/GHSA-jcgg-mg9g-p9wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jcgg-mg9g-p9wf",
            "title": "[org.keycloak:keycloak-quarkus-server] Duplicate Advisory: Keycloak Build Process Exposes Sensitive Data",
            "date_modified": "2024-11-25T18:38:23.000Z",
            "date_published": "2024-11-25T09:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jcgg-mg9g-p9wf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Keycloak. A user with high privileges could read sensitive information from a Vault file that is not within the expected context. This attacker must have previous high access to the Keycloak server in order to perform resource creation, for example, an LDAP provider configuration and set up a Vault read file, which will only inform whether that file exists or not.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-5545-r4hg-rj4m\">https://github.com/keycloak/keycloak/security/advisories/GHSA-5545-r4hg-rj4m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10492\">https://nvd.nist.gov/vuln/detail/CVE-2024-10492</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/35215\">https://github.com/keycloak/keycloak/issues/35215</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/d60cb9aaefc4035d322862edd8f9f252af6da951\">https://github.com/keycloak/keycloak/commit/d60cb9aaefc4035d322862edd8f9f252af6da951</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10492\">https://access.redhat.com/security/cve/CVE-2024-10492</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322447\">https://bugzilla.redhat.com/show_bug.cgi?id=2322447</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5545-r4hg-rj4m\">https://github.com/advisories/GHSA-5545-r4hg-rj4m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5545-r4hg-rj4m",
            "title": "[org.keycloak:keycloak-quarkus-server] Keycloak Path Traversal Vulnerability Due to External Control of File Name or Path",
            "date_modified": "2024-11-25T18:37:15.000Z",
            "date_published": "2024-11-25T18:37:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5545-r4hg-rj4m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Keycloak. A user with high privileges could read sensitive information from a Vault file that is not within the expected context. This attacker must have previous high access to the Keycloak server in order to perform resource creation, for example, an LDAP provider configuration and set up a Vault read file, which will only inform whether that file exists or not.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keycloak/keycloak/security/advisories/GHSA-5545-r4hg-rj4m\">https://github.com/keycloak/keycloak/security/advisories/GHSA-5545-r4hg-rj4m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10492\">https://nvd.nist.gov/vuln/detail/CVE-2024-10492</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/35215\">https://github.com/keycloak/keycloak/issues/35215</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/d60cb9aaefc4035d322862edd8f9f252af6da951\">https://github.com/keycloak/keycloak/commit/d60cb9aaefc4035d322862edd8f9f252af6da951</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10492\">https://access.redhat.com/security/cve/CVE-2024-10492</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322447\">https://bugzilla.redhat.com/show_bug.cgi?id=2322447</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5545-r4hg-rj4m\">https://github.com/advisories/GHSA-5545-r4hg-rj4m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5545-r4hg-rj4m",
            "title": "[org.keycloak:keycloak-quarkus-server] Keycloak Path Traversal Vulnerability Due to External Control of File Name or Path",
            "date_modified": "2024-11-25T18:37:15.000Z",
            "date_published": "2024-11-25T18:37:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5545-r4hg-rj4m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-5545-r4hg-rj4m. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A vulnerability was found in Keycloak. A user with high privileges could read sensitive information from a Vault file that is not within the expected context. This attacker must have previous high access to the Keycloak server in order to perform resource creation, for example, an LDAP provider configuration and set up a Vault read file, which will only inform whether that file exists or not.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10492\">https://nvd.nist.gov/vuln/detail/CVE-2024-10492</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10492\">https://access.redhat.com/security/cve/CVE-2024-10492</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322447\">https://bugzilla.redhat.com/show_bug.cgi?id=2322447</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6vrw-mpj8-3j59\">https://github.com/advisories/GHSA-6vrw-mpj8-3j59</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6vrw-mpj8-3j59",
            "title": "[org.keycloak:keycloak-quarkus-server] Duplicate Advisory: Keycloak Path Traversal Vulnerability Due to External Control of File Name or Path",
            "date_modified": "2024-11-25T18:32:50.000Z",
            "date_published": "2024-11-25T09:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6vrw-mpj8-3j59"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-5545-r4hg-rj4m. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A vulnerability was found in Keycloak. A user with high privileges could read sensitive information from a Vault file that is not within the expected context. This attacker must have previous high access to the Keycloak server in order to perform resource creation, for example, an LDAP provider configuration and set up a Vault read file, which will only inform whether that file exists or not.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10492\">https://nvd.nist.gov/vuln/detail/CVE-2024-10492</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10175\">https://access.redhat.com/errata/RHSA-2024:10175</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10176\">https://access.redhat.com/errata/RHSA-2024:10176</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10177\">https://access.redhat.com/errata/RHSA-2024:10177</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:10178\">https://access.redhat.com/errata/RHSA-2024:10178</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-10492\">https://access.redhat.com/security/cve/CVE-2024-10492</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2322447\">https://bugzilla.redhat.com/show_bug.cgi?id=2322447</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6vrw-mpj8-3j59\">https://github.com/advisories/GHSA-6vrw-mpj8-3j59</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6vrw-mpj8-3j59",
            "title": "[org.keycloak:keycloak-quarkus-server] Duplicate Advisory: Keycloak Path Traversal Vulnerability Due to External Control of File Name or Path",
            "date_modified": "2024-11-25T18:32:50.000Z",
            "date_published": "2024-11-25T09:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6vrw-mpj8-3j59"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}