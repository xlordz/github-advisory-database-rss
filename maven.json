{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>Improper caching in JetBrains Ktor before 3.0.0 in the <code>HttpCache</code> Plugin could lead to response information disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49580\">https://nvd.nist.gov/vuln/detail/CVE-2024-49580</a></li>\n<li><a href=\"https://www.jetbrains.com/privacy-security/issues-fixed\">https://www.jetbrains.com/privacy-security/issues-fixed</a></li>\n<li><a href=\"https://github.com/ktorio/ktor/pull/4337\">https://github.com/ktorio/ktor/pull/4337</a></li>\n<li><a href=\"https://github.com/ktorio/ktor/pull/4368\">https://github.com/ktorio/ktor/pull/4368</a></li>\n<li><a href=\"https://github.com/ktorio/ktor/commit/0665736fc35c8ab5525241e975f36819b67f9d3e\">https://github.com/ktorio/ktor/commit/0665736fc35c8ab5525241e975f36819b67f9d3e</a></li>\n<li><a href=\"https://github.com/ktorio/ktor/commit/d6c3a51df169c163e8f0b9ce77bbe543c70116ac\">https://github.com/ktorio/ktor/commit/d6c3a51df169c163e8f0b9ce77bbe543c70116ac</a></li>\n<li><a href=\"https://youtrack.jetbrains.com/issue/KTOR-7483\">https://youtrack.jetbrains.com/issue/KTOR-7483</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8qv4-773j-c979\">https://github.com/advisories/GHSA-8qv4-773j-c979</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8qv4-773j-c979",
            "title": "[io.ktor:ktor-client-core-jvm] JetBrains Ktor information disclosure",
            "date_modified": "2024-11-05T17:56:53.000Z",
            "date_published": "2024-10-17T15:31:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8qv4-773j-c979"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Spring for Apache Kafka 3.0.9 and earlier and versions 2.9.10 and earlier, a possible deserialization attack vector existed, but only if unusual configuration was applied. An attacker would have to construct a malicious serialized object in one of the deserialization exception record headers.</p>\n<p>Specifically, an application is vulnerable when all of the following are true:</p>\n<ul>\n<li>The user does not&nbsp;configure an ErrorHandlingDeserializer for the key and/or value of the record</li>\n<li>The user explicitly sets container properties checkDeserExWhenKeyNull and/or checkDeserExWhenValueNull container properties to true.</li>\n<li>The user allows untrusted sources to publish to a Kafka topic</li>\n</ul>\n<p>By default, these properties are false, and the container only attempts to deserialize the headers if an ErrorHandlingDeserializer is configured. The ErrorHandlingDeserializer prevents the vulnerability by removing any such malicious headers before processing the record.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34040\">https://nvd.nist.gov/vuln/detail/CVE-2023-34040</a></li>\n<li><a href=\"https://spring.io/security/cve-2023-34040\">https://spring.io/security/cve-2023-34040</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-kafka/commit/25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d\">https://github.com/spring-projects/spring-kafka/commit/25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-kafka/commit/eb779679812f61a8553ced3d0e4069dca65560ed\">https://github.com/spring-projects/spring-kafka/commit/eb779679812f61a8553ced3d0e4069dca65560ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-crqf-q9fp-hwjw\">https://github.com/advisories/GHSA-crqf-q9fp-hwjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-crqf-q9fp-hwjw",
            "title": "[org.springframework.kafka:spring-kafka] Spring-Kafka has Java Deserialization vulnerability When Improperly Configured",
            "date_modified": "2024-11-05T17:40:35.000Z",
            "date_published": "2023-08-24T15:31:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-crqf-q9fp-hwjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.</p>\n<p>Specifically, an application is vulnerable when both of the following are true:</p>\n<ul>\n<li>the web application uses RouterFunctions&nbsp;to serve static resources</li>\n<li>resource handling is explicitly configured with a FileSystemResource&nbsp;location</li>\n</ul>\n<p>However, malicious requests are blocked and rejected when any of the following is true:</p>\n<ul>\n<li>the  Spring Security HTTP Firewall <a href=\"https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html\">https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html</a> &nbsp;is in use</li>\n<li>the application runs on Tomcat or Jetty</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38816\">https://nvd.nist.gov/vuln/detail/CVE-2024-38816</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38816\">https://spring.io/security/cve-2024-38816</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49\">https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cx7f-g6mp-7hqm\">https://github.com/advisories/GHSA-cx7f-g6mp-7hqm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm",
            "title": "[org.springframework:spring-webflux] Path traversal vulnerability in functional web frameworks",
            "date_modified": "2024-11-05T17:06:54.000Z",
            "date_published": "2024-09-13T06:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.</p>\n<p>Specifically, an application is vulnerable when both of the following are true:</p>\n<ul>\n<li>the web application uses RouterFunctions&nbsp;to serve static resources</li>\n<li>resource handling is explicitly configured with a FileSystemResource&nbsp;location</li>\n</ul>\n<p>However, malicious requests are blocked and rejected when any of the following is true:</p>\n<ul>\n<li>the  Spring Security HTTP Firewall <a href=\"https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html\">https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html</a> &nbsp;is in use</li>\n<li>the application runs on Tomcat or Jetty</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38816\">https://nvd.nist.gov/vuln/detail/CVE-2024-38816</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38816\">https://spring.io/security/cve-2024-38816</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49\">https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cx7f-g6mp-7hqm\">https://github.com/advisories/GHSA-cx7f-g6mp-7hqm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm",
            "title": "[org.springframework:spring-webflux] Path traversal vulnerability in functional web frameworks",
            "date_modified": "2024-11-05T17:06:54.000Z",
            "date_published": "2024-09-13T06:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.</p>\n<p>Specifically, an application is vulnerable when both of the following are true:</p>\n<ul>\n<li>the web application uses RouterFunctions&nbsp;to serve static resources</li>\n<li>resource handling is explicitly configured with a FileSystemResource&nbsp;location</li>\n</ul>\n<p>However, malicious requests are blocked and rejected when any of the following is true:</p>\n<ul>\n<li>the  Spring Security HTTP Firewall <a href=\"https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html\">https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html</a> &nbsp;is in use</li>\n<li>the application runs on Tomcat or Jetty</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38816\">https://nvd.nist.gov/vuln/detail/CVE-2024-38816</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38816\">https://spring.io/security/cve-2024-38816</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49\">https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cx7f-g6mp-7hqm\">https://github.com/advisories/GHSA-cx7f-g6mp-7hqm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm",
            "title": "[org.springframework:spring-webflux] Path traversal vulnerability in functional web frameworks",
            "date_modified": "2024-11-05T17:06:54.000Z",
            "date_published": "2024-09-13T06:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in the <code>createTempFile</code> method of hornetq v2.4.9 allows attackers to arbitrarily overwrite files or access sensitive information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51127\">https://nvd.nist.gov/vuln/detail/CVE-2024-51127</a></li>\n<li><a href=\"https://github.com/JAckLosingHeart/CWE-378/blob/main/CVE-2024-51127.md\">https://github.com/JAckLosingHeart/CWE-378/blob/main/CVE-2024-51127.md</a></li>\n<li><a href=\"http://hornetq.com\">http://hornetq.com</a></li>\n<li><a href=\"https://github.com/hornetq/hornetq/blob/HornetQ_2_4_9_Final/hornetq-core-client/src/main/java/org/hornetq/core/client/impl/ClientConsumerImpl.java#L665C35-L665C49\">https://github.com/hornetq/hornetq/blob/HornetQ_2_4_9_Final/hornetq-core-client/src/main/java/org/hornetq/core/client/impl/ClientConsumerImpl.java#L665C35-L665C49</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7mv-mv7m-pjw3\">https://github.com/advisories/GHSA-r7mv-mv7m-pjw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7mv-mv7m-pjw3",
            "title": "[org.hornetq:hornetq-core-client] hornetq vulnerable to file overwrite, sensitive information disclosure",
            "date_modified": "2024-11-04T23:23:42.000Z",
            "date_published": "2024-11-04T18:31:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7mv-mv7m-pjw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Session Fixation vulnerability in Apache Kylin.</p>\n<p>This issue affects Apache Kylin: from 2.0.0 through 4.x.</p>\n<p>Users are recommended to upgrade to version 5.0.0 or above, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23590\">https://nvd.nist.gov/vuln/detail/CVE-2024-23590</a></li>\n<li><a href=\"https://lists.apache.org/thread/7161154h0k6zygr9917qq0g95p39szml\">https://lists.apache.org/thread/7161154h0k6zygr9917qq0g95p39szml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-752q-72qc-rc66\">https://github.com/advisories/GHSA-752q-72qc-rc66</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-752q-72qc-rc66",
            "title": "[org.apache.kylin:kylin] Apache Kylin Session Fixation vulnerability",
            "date_modified": "2024-11-04T23:23:24.000Z",
            "date_published": "2024-11-04T12:32:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-752q-72qc-rc66"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Reposilite v3.5.10 is affected by an Arbitrary File Read vulnerability via path traversal while serving expanded javadoc files.</p>\n<h3 id=\"details\">Details</h3>\n<p>The problem lies in the way how the expanded javadoc files are served. The <code>GET /javadoc/{repository}/&lt;gav&gt;/raw/&lt;resource&gt;</code> route uses the <code>&lt;resource&gt;</code> path parameter to find the file in the <code>javadocUnpackPath</code> directory and returns it's content to the user.</p>\n<p><a href=\"https://github.com/dzikoysk/reposilite/blob/68b73f19dc9811ccf10936430cf17f7b0e622bd6/reposilite-backend/src/main/kotlin/com/reposilite/javadocs/JavadocFacade.kt#L77\">JavadocFacade.kt#L77</a>:</p>\n<pre><code class=\"language-kotlin\">fun findRawJavadocResource(request: JavadocRawRequest): Result&lt;JavadocRawResponse, ErrorResponse&gt; =\n   with (request) {\n       mavenFacade.canAccessResource(accessToken, repository, gav)\n           .flatMap { javadocContainerService.loadContainer(accessToken, repository, gav) }\n           .filter({ Files.exists(it.javadocUnpackPath.resolve(resource.toString())) }, { notFound(\"Resource $resource not found\") })\n           .map {\n               JavadocRawResponse(\n                   contentType = supportedExtensions[resource.getExtension()] ?: ContentType.APPLICATION_OCTET_STREAM,\n                   content = Files.newInputStream(it.javadocUnpackPath.resolve(resource.toString()))\n               )\n           }\n   }\n</code></pre>\n<p>In this case, the <code>&lt;resource&gt;</code> path parameter can contain path traversal characters such as <code>/../../</code>. Since the path is concatenated with the main directory, it opens the possibility to read files outside the <code>javadocUnpackPath</code> directory.</p>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue may lead to Arbitrary File Read on the server. A potential attacker can read some sensitive file, such as <code>reposilite.db</code>, that contains the sqlite database used by Reposilite. This database contains the sensitive information used by Reposilite, including passwords and hashes of issued tokens. Also, the <code>configuration.cdn</code> file can be read, which contains other sensitive properties.</p>\n<h3 id=\"steps-to-reproduce\">Steps to reproduce</h3>\n<ol>\n<li>Start the Reposilite instance on <a href=\"http://localhost:8080/\">http://localhost:8080/</a></li>\n<li>Find at least one javadoc file in the hosted repositories. For example, the default test workspace contains the <code>/releases/javadoc/1.0.0/javadoc-1.0.0-javadoc.jar</code> archive that is suitable for our attack.</li>\n<li>Send a GET request to <a href=\"http://127.0.0.1:8080/javadoc/releases/javadoc/1.0.0/raw/%2e%2e%5c%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2freposilite.db\">http://127.0.0.1:8080/javadoc/releases/javadoc/1.0.0/raw/%2e%2e%5c%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2freposilite.db</a>\nWhen this request is processed on the server, Reposilite tries to unpack the <code>/repositories/releases/javadoc/1.0.0/javadoc-1.0.0-javadoc.jar</code> file into the <code>/javadocs/releases/javadoc/1.0.0/.cache/unpack</code> folder. Then, it tries to read the <code>../../../../../../reposilite.db</code> file from this folder, which triggers the path traversal attack.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/dzikoysk/reposilite/assets/44605151/2f2638e2-2b6a-498d-9ca3-bacc84041d8a\"></p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>Normalize (remove all occurrences of <code>/../</code>) the <code>&lt;resource&gt;</code> path parameter before using it when reading the file. For example:</p>\n<pre><code class=\"language-kotlin\">content = Files.newInputStream(it.javadocUnpackPath.resolve(resource.toPath()))\n</code></pre>\n<p>Changing <code>resource.toString()</code> to <code>resource.toPath()</code> is enough here as the <code>com.reposilite.storage.api.Location#toPath</code> method normalizes the string internally.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dzikoysk/reposilite/security/advisories/GHSA-82j3-hf72-7x93\">https://github.com/dzikoysk/reposilite/security/advisories/GHSA-82j3-hf72-7x93</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36117\">https://nvd.nist.gov/vuln/detail/CVE-2024-36117</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/commit/e172ae4b539c822d0d6e04cf090713c7202a79d6\">https://github.com/dzikoysk/reposilite/commit/e172ae4b539c822d0d6e04cf090713c7202a79d6</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/releases/tag/3.5.12\">https://github.com/dzikoysk/reposilite/releases/tag/3.5.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-82j3-hf72-7x93\">https://github.com/advisories/GHSA-82j3-hf72-7x93</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-82j3-hf72-7x93",
            "title": "[com.reposilite:reposilite-backend] Reposilite vulnerable to path traversal while serving javadoc expanded files (arbitrary file read) (`GHSL-2024-074`)",
            "date_modified": "2024-11-04T23:23:09.000Z",
            "date_published": "2024-11-04T23:23:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-82j3-hf72-7x93"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Undertow. This issue requires enabling the learning-push handler in the server's config, which is disabled by default, leaving the maxAge config in the handler unconfigured. The default is -1, which makes the handler vulnerable. If someone overwrites that config, the server is not subject to the attack. The attacker needs to be able to reach the server with a normal HTTP request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3653\">https://nvd.nist.gov/vuln/detail/CVE-2024-3653</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-3653\">https://access.redhat.com/security/cve/CVE-2024-3653</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2274437\">https://bugzilla.redhat.com/show_bug.cgi?id=2274437</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:4392\">https://access.redhat.com/errata/RHSA-2024:4392</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5143\">https://access.redhat.com/errata/RHSA-2024:5143</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5144\">https://access.redhat.com/errata/RHSA-2024:5144</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5145\">https://access.redhat.com/errata/RHSA-2024:5145</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5147\">https://access.redhat.com/errata/RHSA-2024:5147</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:6437\">https://access.redhat.com/errata/RHSA-2024:6437</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1639\">https://github.com/undertow-io/undertow/pull/1639</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1640\">https://github.com/undertow-io/undertow/pull/1640</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1641\">https://github.com/undertow-io/undertow/pull/1641</a></li>\n<li><a href=\"https://issues.redhat.com/browse/UNDERTOW-2382\">https://issues.redhat.com/browse/UNDERTOW-2382</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ch7q-gpff-h9hp\">https://github.com/advisories/GHSA-ch7q-gpff-h9hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp",
            "title": "[io.undertow:undertow-core] Undertow Missing Release of Memory after Effective Lifetime vulnerability",
            "date_modified": "2024-11-04T22:22:13.000Z",
            "date_published": "2024-07-09T00:31:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Undertow. This issue requires enabling the learning-push handler in the server's config, which is disabled by default, leaving the maxAge config in the handler unconfigured. The default is -1, which makes the handler vulnerable. If someone overwrites that config, the server is not subject to the attack. The attacker needs to be able to reach the server with a normal HTTP request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3653\">https://nvd.nist.gov/vuln/detail/CVE-2024-3653</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-3653\">https://access.redhat.com/security/cve/CVE-2024-3653</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2274437\">https://bugzilla.redhat.com/show_bug.cgi?id=2274437</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:4392\">https://access.redhat.com/errata/RHSA-2024:4392</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5143\">https://access.redhat.com/errata/RHSA-2024:5143</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5144\">https://access.redhat.com/errata/RHSA-2024:5144</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5145\">https://access.redhat.com/errata/RHSA-2024:5145</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5147\">https://access.redhat.com/errata/RHSA-2024:5147</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:6437\">https://access.redhat.com/errata/RHSA-2024:6437</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1639\">https://github.com/undertow-io/undertow/pull/1639</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1640\">https://github.com/undertow-io/undertow/pull/1640</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1641\">https://github.com/undertow-io/undertow/pull/1641</a></li>\n<li><a href=\"https://issues.redhat.com/browse/UNDERTOW-2382\">https://issues.redhat.com/browse/UNDERTOW-2382</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ch7q-gpff-h9hp\">https://github.com/advisories/GHSA-ch7q-gpff-h9hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp",
            "title": "[io.undertow:undertow-core] Undertow Missing Release of Memory after Effective Lifetime vulnerability",
            "date_modified": "2024-11-04T22:22:13.000Z",
            "date_published": "2024-07-09T00:31:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>JeecgBoot v3.7.1 was discovered to contain a SQL injection vulnerability via the component <code>/onlDragDatasetHead/getTotalData</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48307\">https://nvd.nist.gov/vuln/detail/CVE-2024-48307</a></li>\n<li><a href=\"https://github.com/jeecgboot/JeecgBoot/issues/7237\">https://github.com/jeecgboot/JeecgBoot/issues/7237</a></li>\n<li><a href=\"https://github.com/jeecgboot\">https://github.com/jeecgboot</a></li>\n<li><a href=\"https://github.com/jeecgboot/JeecgBoot\">https://github.com/jeecgboot/JeecgBoot</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcw3-h5xg-r95m\">https://github.com/advisories/GHSA-mcw3-h5xg-r95m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcw3-h5xg-r95m",
            "title": "[org.jeecgframework.boot:jeecg-boot-parent] JeecgBoot SQL Injection vulnerability",
            "date_modified": "2024-11-01T21:38:11.000Z",
            "date_published": "2024-10-31T03:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcw3-h5xg-r95m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impacted-products\">Impacted Products</h3>\n<p>Snowflake JDBC driver versions &gt;= 3.2.6 &amp; &lt;= 3.19.1 are affected.</p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>Snowflake recently identified an issue affecting JDBC drivers that can result in data being uploaded to an encrypted stage without the additional layer of protection provided by client side encryption. The issue, which affects only a subset of accounts hosted on Azure and GCP deployments (AWS deployments are not affected), manifests in instances where customers create a stage using a JDBC driver with the CLIENT_ENCRYPTION_KEY_SIZE account parameter set to 256-bit rather than the default 128-bit. The data is still protected by TLS in transit and server side encryption at rest. This missed layer of the additional protection is not visible to the affected customers.</p>\n<h3 id=\"incorrect-security-setting-vulnerability\">Incorrect Security Setting Vulnerability</h3>\n<h4 id=\"description\">Description</h4>\n<p>Snowflake identified an incorrect security setting in Snowflake JDBC drivers. Snowflake has evaluated the severity of the issue and determined it was in medium range with a maximum CVSSv3 base score of 5.9. </p>\n<h4 id=\"scenarios-and-attack-vectors\">Scenarios and attack vector(s)</h4>\n<p>Users of Snowflake JDBC drivers with accounts on Azure and GCP deployments who set the parameter CLIENT_ENCRYPTION_KEY_SIZE = 256 were subject to this incorrect security setting vulnerability as it could result in data being uploaded to a stage without an additional layer for encryption. </p>\n<h4 id=\"our-response\">Our response</h4>\n<p>On July 23, 2024, Snowflake discovered this vulnerability. On 10/28/2024, Snowflake released a patch in Snowflake JDBC driver Version 3.20.0. The patch fixes the incorrect security setting. </p>\n<h4 id=\"resolution\">Resolution</h4>\n<p>We strongly recommend users to upgrade to 3.20.0 or later versions as soon as possible. </p>\n<h3 id=\"contact\">Contact</h3>\n<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/snowflakedb/snowflake-jdbc/security/advisories/GHSA-f686-hw9c-xw9c\">https://github.com/snowflakedb/snowflake-jdbc/security/advisories/GHSA-f686-hw9c-xw9c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43382\">https://nvd.nist.gov/vuln/detail/CVE-2024-43382</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f686-hw9c-xw9c\">https://github.com/advisories/GHSA-f686-hw9c-xw9c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f686-hw9c-xw9c",
            "title": "[net.snowflake:snowflake-jdbc] Snowflake JDBC Security Advisory",
            "date_modified": "2024-10-31T19:36:19.000Z",
            "date_published": "2024-10-30T14:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f686-hw9c-xw9c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache NiFi 1.10.0 through 1.27.0 and 2.0.0-M1 through 2.0.0-M3 support a description field for Parameters in a Parameter Context configuration that is vulnerable to cross-site scripting. An authenticated user, authorized to configure a Parameter Context, can enter arbitrary JavaScript code, which the client browser will execute within the session context of the authenticated user. Upgrading to Apache NiFi 1.28.0 or 2.0.0-M4 is the recommended mitigation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45477\">https://nvd.nist.gov/vuln/detail/CVE-2024-45477</a></li>\n<li><a href=\"https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9\">https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9</a></li>\n<li><a href=\"https://github.com/apache/nifi/pull/9195\">https://github.com/apache/nifi/pull/9195</a></li>\n<li><a href=\"https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09\">https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09</a></li>\n<li><a href=\"https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197\">https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/NIFI-13675\">https://issues.apache.org/jira/browse/NIFI-13675</a></li>\n<li><a href=\"https://nifi.apache.org/documentation/security/#CVE-2024-45477\">https://nifi.apache.org/documentation/security/#CVE-2024-45477</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mqj-xgf8-p59v\">https://github.com/advisories/GHSA-7mqj-xgf8-p59v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v",
            "title": "[org.apache.nifi:nifi-web-ui] Apache NiFi Cross-site Scripting vulnerability",
            "date_modified": "2024-10-29T21:33:11.000Z",
            "date_published": "2024-10-29T09:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache NiFi 1.10.0 through 1.27.0 and 2.0.0-M1 through 2.0.0-M3 support a description field for Parameters in a Parameter Context configuration that is vulnerable to cross-site scripting. An authenticated user, authorized to configure a Parameter Context, can enter arbitrary JavaScript code, which the client browser will execute within the session context of the authenticated user. Upgrading to Apache NiFi 1.28.0 or 2.0.0-M4 is the recommended mitigation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45477\">https://nvd.nist.gov/vuln/detail/CVE-2024-45477</a></li>\n<li><a href=\"https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9\">https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9</a></li>\n<li><a href=\"https://github.com/apache/nifi/pull/9195\">https://github.com/apache/nifi/pull/9195</a></li>\n<li><a href=\"https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09\">https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09</a></li>\n<li><a href=\"https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197\">https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/NIFI-13675\">https://issues.apache.org/jira/browse/NIFI-13675</a></li>\n<li><a href=\"https://nifi.apache.org/documentation/security/#CVE-2024-45477\">https://nifi.apache.org/documentation/security/#CVE-2024-45477</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mqj-xgf8-p59v\">https://github.com/advisories/GHSA-7mqj-xgf8-p59v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v",
            "title": "[org.apache.nifi:nifi-web-ui] Apache NiFi Cross-site Scripting vulnerability",
            "date_modified": "2024-10-29T21:33:11.000Z",
            "date_published": "2024-10-29T09:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The fix for CVE-2022-22968 made disallowedFields&nbsp;patterns in DataBinder&nbsp;case insensitive. However, String.toLowerCase()&nbsp;has some Locale dependent exceptions that could potentially result in fields not protected as expected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38820\">https://nvd.nist.gov/vuln/detail/CVE-2024-38820</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38820\">https://spring.io/security/cve-2024-38820</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c\">https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commits/v6.2.0-RC2\">https://github.com/spring-projects/spring-framework/commits/v6.2.0-RC2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4gc7-5j7h-4qph\">https://github.com/advisories/GHSA-4gc7-5j7h-4qph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4gc7-5j7h-4qph",
            "title": "[org.springframework:spring-context] Spring Framework DataBinder Case Sensitive Match Exception",
            "date_modified": "2024-10-29T21:02:23.000Z",
            "date_published": "2024-10-18T06:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4gc7-5j7h-4qph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The patch for the historical vulnerability CVE-2020-35460 in MPXJ is incomplete as there is still a possibility that a malicious path could be constructed which would not be picked up by the original fix and allow files to be written to arbitrary locations.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is addressed in MPXJ version 13.5.1</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not pass zip files to MPXJ.</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Issue report and patch provided by yyjLF and sprinkle</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joniles/mpxj/security/advisories/GHSA-j945-c44v-97g6\">https://github.com/joniles/mpxj/security/advisories/GHSA-j945-c44v-97g6</a></li>\n<li><a href=\"https://github.com/joniles/mpxj/commit/8002802890dfdc8bc74259f37e053e15b827eea0\">https://github.com/joniles/mpxj/commit/8002802890dfdc8bc74259f37e053e15b827eea0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49771\">https://nvd.nist.gov/vuln/detail/CVE-2024-49771</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/mpxj/CVE-2024-49771.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/mpxj/CVE-2024-49771.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j945-c44v-97g6\">https://github.com/advisories/GHSA-j945-c44v-97g6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j945-c44v-97g6",
            "title": "[net.sf.mpxj:mpxj] MPXJ has a Potential Path Traversal Vulnerability",
            "date_modified": "2024-10-30T14:35:24.000Z",
            "date_published": "2024-10-28T18:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j945-c44v-97g6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}