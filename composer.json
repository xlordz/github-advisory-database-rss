{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>A discovered vulnerability allows users to modify their shopping cart after completing the PayPal Checkout process and payment authorization. If a user initiates a PayPal transaction from a product page or the cart page and then returns to the order summary page, they can still manipulate the cart contents before finalizing the order. As a result, the order amount in Sylius may be higher than the amount actually captured by PayPal, leading to a scenario where merchants deliver products or services without full payment.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Users can exploit this flaw to receive products/services without paying the full amount.</li>\n<li>Merchants may suffer financial losses due to underpaid orders.</li>\n<li>Trust in the integrity of the payment process is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.2, 1.7.2, 2.0.2 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>PayPalOrderCompleteProcessor</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Processor;\n\nuse Sylius\\Bundle\\PayumBundle\\Model\\GatewayConfigInterface;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\n\nfinal class PayPalOrderCompleteProcessor\n{\n    public function __construct(private readonly PaymentStateManagerInterface $paymentStateManager) {\n    }\n\n    public function completePayPalOrder(OrderInterface $order): void\n    {\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n        if ($payment === null) {\n            return;\n        }\n\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        /** @var GatewayConfigInterface $gatewayConfig */\n        $gatewayConfig = $paymentMethod-&gt;getGatewayConfig();\n\n        if ($gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal') {\n            return;\n        }\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return;\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<h3 id=\"important\">IMPORTANT</h3>\n<p>For <code>PayPalPlugin 2.x</code> change:</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal'\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== SyliusPayPalExtension::PAYPAL_FACTORY_NAME\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderListener</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\EventListener\\Workflow;\n\nuse App\\Processor\\PayPalOrderCompleteProcessor;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class CompletePayPalOrderListener\n{\n    public function __construct(private readonly PayPalOrderCompleteProcessor $completeProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event-&gt;getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this-&gt;completeProcessor-&gt;completePayPalOrder($order);\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic (if you didn't have it already):</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">Sylius\\PayPalPlugin\\EventListener\\Workflow\\CompletePayPalOrderListener:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nSylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n\nSylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n        - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n        - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">sylius_paypal.listener.workflow.complete_paypal_order:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@sylius_paypal.processor.paypal_order_complete'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nsylius_paypal.processor.paypal_order_complete:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@sylius_paypal.manager.payment_state'\n\nsylius_paypal.payum.action.capture:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@sylius_paypal.api.cache_authorize_client'\n        - '@sylius_paypal.api.create_order'\n        - '@sylius_paypal.provider.uuid'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa\">https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30152\">https://nvd.nist.gov/vuln/detail/CVE-2025-30152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/advisories/GHSA-hxg4-65p5-9w37</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin has an Order Manipulation Vulnerability after PayPal Checkout",
            "date_modified": "2025-03-20T18:59:45.000Z",
            "date_published": "2025-03-19T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A discovered vulnerability allows users to modify their shopping cart after completing the PayPal Checkout process and payment authorization. If a user initiates a PayPal transaction from a product page or the cart page and then returns to the order summary page, they can still manipulate the cart contents before finalizing the order. As a result, the order amount in Sylius may be higher than the amount actually captured by PayPal, leading to a scenario where merchants deliver products or services without full payment.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Users can exploit this flaw to receive products/services without paying the full amount.</li>\n<li>Merchants may suffer financial losses due to underpaid orders.</li>\n<li>Trust in the integrity of the payment process is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.2, 1.7.2, 2.0.2 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>PayPalOrderCompleteProcessor</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Processor;\n\nuse Sylius\\Bundle\\PayumBundle\\Model\\GatewayConfigInterface;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\n\nfinal class PayPalOrderCompleteProcessor\n{\n    public function __construct(private readonly PaymentStateManagerInterface $paymentStateManager) {\n    }\n\n    public function completePayPalOrder(OrderInterface $order): void\n    {\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n        if ($payment === null) {\n            return;\n        }\n\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        /** @var GatewayConfigInterface $gatewayConfig */\n        $gatewayConfig = $paymentMethod-&gt;getGatewayConfig();\n\n        if ($gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal') {\n            return;\n        }\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return;\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<h3 id=\"important\">IMPORTANT</h3>\n<p>For <code>PayPalPlugin 2.x</code> change:</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal'\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== SyliusPayPalExtension::PAYPAL_FACTORY_NAME\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderListener</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\EventListener\\Workflow;\n\nuse App\\Processor\\PayPalOrderCompleteProcessor;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class CompletePayPalOrderListener\n{\n    public function __construct(private readonly PayPalOrderCompleteProcessor $completeProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event-&gt;getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this-&gt;completeProcessor-&gt;completePayPalOrder($order);\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic (if you didn't have it already):</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">Sylius\\PayPalPlugin\\EventListener\\Workflow\\CompletePayPalOrderListener:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nSylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n\nSylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n        - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n        - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">sylius_paypal.listener.workflow.complete_paypal_order:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@sylius_paypal.processor.paypal_order_complete'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nsylius_paypal.processor.paypal_order_complete:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@sylius_paypal.manager.payment_state'\n\nsylius_paypal.payum.action.capture:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@sylius_paypal.api.cache_authorize_client'\n        - '@sylius_paypal.api.create_order'\n        - '@sylius_paypal.provider.uuid'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa\">https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30152\">https://nvd.nist.gov/vuln/detail/CVE-2025-30152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/advisories/GHSA-hxg4-65p5-9w37</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin has an Order Manipulation Vulnerability after PayPal Checkout",
            "date_modified": "2025-03-20T18:59:45.000Z",
            "date_published": "2025-03-19T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A discovered vulnerability allows users to modify their shopping cart after completing the PayPal Checkout process and payment authorization. If a user initiates a PayPal transaction from a product page or the cart page and then returns to the order summary page, they can still manipulate the cart contents before finalizing the order. As a result, the order amount in Sylius may be higher than the amount actually captured by PayPal, leading to a scenario where merchants deliver products or services without full payment.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Users can exploit this flaw to receive products/services without paying the full amount.</li>\n<li>Merchants may suffer financial losses due to underpaid orders.</li>\n<li>Trust in the integrity of the payment process is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.2, 1.7.2, 2.0.2 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>PayPalOrderCompleteProcessor</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Processor;\n\nuse Sylius\\Bundle\\PayumBundle\\Model\\GatewayConfigInterface;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\n\nfinal class PayPalOrderCompleteProcessor\n{\n    public function __construct(private readonly PaymentStateManagerInterface $paymentStateManager) {\n    }\n\n    public function completePayPalOrder(OrderInterface $order): void\n    {\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n        if ($payment === null) {\n            return;\n        }\n\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        /** @var GatewayConfigInterface $gatewayConfig */\n        $gatewayConfig = $paymentMethod-&gt;getGatewayConfig();\n\n        if ($gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal') {\n            return;\n        }\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return;\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<h3 id=\"important\">IMPORTANT</h3>\n<p>For <code>PayPalPlugin 2.x</code> change:</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal'\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== SyliusPayPalExtension::PAYPAL_FACTORY_NAME\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderListener</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\EventListener\\Workflow;\n\nuse App\\Processor\\PayPalOrderCompleteProcessor;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class CompletePayPalOrderListener\n{\n    public function __construct(private readonly PayPalOrderCompleteProcessor $completeProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event-&gt;getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this-&gt;completeProcessor-&gt;completePayPalOrder($order);\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic (if you didn't have it already):</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">Sylius\\PayPalPlugin\\EventListener\\Workflow\\CompletePayPalOrderListener:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nSylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n\nSylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n        - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n        - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">sylius_paypal.listener.workflow.complete_paypal_order:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@sylius_paypal.processor.paypal_order_complete'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nsylius_paypal.processor.paypal_order_complete:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@sylius_paypal.manager.payment_state'\n\nsylius_paypal.payum.action.capture:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@sylius_paypal.api.cache_authorize_client'\n        - '@sylius_paypal.api.create_order'\n        - '@sylius_paypal.provider.uuid'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa\">https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30152\">https://nvd.nist.gov/vuln/detail/CVE-2025-30152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/advisories/GHSA-hxg4-65p5-9w37</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin has an Order Manipulation Vulnerability after PayPal Checkout",
            "date_modified": "2025-03-20T18:59:45.000Z",
            "date_published": "2025-03-19T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Regardless of the role or privileges, no user should be able to inject malicious JavaScript (JS) scripts into the body HTML. an XSS (Cross-Site Scripting) vulnerability, specifically a Stored XSS, which affects all pages of the website. Once the JS script is embedded in the body HTML, the XSS will trigger on any page a victim visits, such as the about, blog, contact, or any other pages, except for the panel.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers to inject malicious JS or HTML through a crafted payload into the vulnerable spot, achieving persistence and attacking numerous visitors or anyone accessing the website. The attack can be widespread and affect many users because the malicious JS will execute on every page, unlike an injection on a specific page (e.g., injecting on the About page would only affect that page). In this case, a single injection point leads to the execution of the malicious JS on all pages.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/releases/tag/1.13.1\"><strong>Formwork 1.13.1</strong></a> has been released with a patch that solves this vulnerability by escaping all metadata attributes.</li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/f5312015a5a5e89b95ef2bd07e496f8474d579c5\"><strong>Formwork 2.x</strong> (f531201)</a> also escapes metadata attributes.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>An attackers (requires administrator privilege) to execute arbitrary web scripts by modifying site options via /panel/options/site. This type of attack is suitable for persistence, affecting visitors across all pages (except the dashboard).</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Log in with an Administrator user account.</li>\n<li>Navigate to /panel/options/site/.</li>\n<li>Inject the JS script by adding to the description field.</li>\n<li>Simulate a victim who is not a site member visiting the website. You will notice that the JS script executes on every page they vis</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/1c40be24-3367-4c80-bb44-9db64ef88970\">\n<img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/68dd5bff-9db1-441b-a3b3-a0c014565f59\">\n<img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/3cd84c39-9b44-49d0-8b6a-6c8aeda7e49f\">\n<img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/f45afd87-80e9-4cf1-8121-bb4e121849c9\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/security/advisories/GHSA-5pxr-7m4j-jjc6\">https://github.com/getformwork/formwork/security/advisories/GHSA-5pxr-7m4j-jjc6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37160\">https://nvd.nist.gov/vuln/detail/CVE-2024-37160</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/9d471204f7ebb51c3c27131581c2b834315b5e0b\">https://github.com/getformwork/formwork/commit/9d471204f7ebb51c3c27131581c2b834315b5e0b</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/f5312015a5a5e89b95ef2bd07e496f8474d579c5\">https://github.com/getformwork/formwork/commit/f5312015a5a5e89b95ef2bd07e496f8474d579c5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5pxr-7m4j-jjc6\">https://github.com/advisories/GHSA-5pxr-7m4j-jjc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5pxr-7m4j-jjc6",
            "title": "[getformwork/formwork] Cross-site scripting (XSS) vulnerability in Description metadata",
            "date_modified": "2025-03-19T14:49:47.000Z",
            "date_published": "2024-06-07T19:37:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5pxr-7m4j-jjc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f\">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-003\">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmgw-24w6-9v82\">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82",
            "title": "[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T02:15:30.000Z",
            "date_published": "2025-03-19T02:15:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f\">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-003\">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmgw-24w6-9v82\">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82",
            "title": "[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T02:15:30.000Z",
            "date_published": "2025-03-19T02:15:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f\">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-003\">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmgw-24w6-9v82\">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82",
            "title": "[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T02:15:30.000Z",
            "date_published": "2025-03-19T02:15:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f\">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-003\">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmgw-24w6-9v82\">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82",
            "title": "[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T02:15:30.000Z",
            "date_published": "2025-03-19T02:15:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Additional TCA extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 1.15.17 and 1.16.9 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml</a></li>\n<li><a href=\"https://gitlab.com/codingms/typo3-public/additional_tca\">https://gitlab.com/codingms/typo3-public/additional_tca</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-002\">https://typo3.org/security/advisory/typo3-ext-sa-2025-002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrh3-cgmx-w62f\">https://github.com/advisories/GHSA-rrh3-cgmx-w62f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrh3-cgmx-w62f",
            "title": "[codingms/additional-tca] Additional TCA Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T01:37:07.000Z",
            "date_published": "2025-03-19T01:37:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrh3-cgmx-w62f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Additional TCA extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 1.15.17 and 1.16.9 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml</a></li>\n<li><a href=\"https://gitlab.com/codingms/typo3-public/additional_tca\">https://gitlab.com/codingms/typo3-public/additional_tca</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-002\">https://typo3.org/security/advisory/typo3-ext-sa-2025-002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrh3-cgmx-w62f\">https://github.com/advisories/GHSA-rrh3-cgmx-w62f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrh3-cgmx-w62f",
            "title": "[codingms/additional-tca] Additional TCA Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T01:37:07.000Z",
            "date_published": "2025-03-19T01:37:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrh3-cgmx-w62f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users can upload SVG files with malicious code, which is then executed in the back end and/or front end.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to Contao 4.13.54, 5.3.30 or 5.5.6.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Remove <code>svg,svgz</code> from the allowed upload file types in the system settings and from <code>contao.editable_files</code> in the <code>config.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads\">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/contao/contao/issues/new/choose\">contao/contao</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626\">https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626</a></li>\n<li><a href=\"https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads\">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29790\">https://nvd.nist.gov/vuln/detail/CVE-2025-29790</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqqr-fgmh-f626\">https://github.com/advisories/GHSA-vqqr-fgmh-f626</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqqr-fgmh-f626",
            "title": "[contao/core-bundle] Contao Vulnerable to Cross-Site Scripting (XSS) through SVG uploads",
            "date_modified": "2025-03-19T15:41:48.000Z",
            "date_published": "2025-03-18T21:07:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqqr-fgmh-f626"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users can upload SVG files with malicious code, which is then executed in the back end and/or front end.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to Contao 4.13.54, 5.3.30 or 5.5.6.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Remove <code>svg,svgz</code> from the allowed upload file types in the system settings and from <code>contao.editable_files</code> in the <code>config.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads\">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/contao/contao/issues/new/choose\">contao/contao</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626\">https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626</a></li>\n<li><a href=\"https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads\">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29790\">https://nvd.nist.gov/vuln/detail/CVE-2025-29790</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqqr-fgmh-f626\">https://github.com/advisories/GHSA-vqqr-fgmh-f626</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqqr-fgmh-f626",
            "title": "[contao/core-bundle] Contao Vulnerable to Cross-Site Scripting (XSS) through SVG uploads",
            "date_modified": "2025-03-19T15:41:48.000Z",
            "date_published": "2025-03-18T21:07:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqqr-fgmh-f626"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users can upload SVG files with malicious code, which is then executed in the back end and/or front end.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to Contao 4.13.54, 5.3.30 or 5.5.6.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Remove <code>svg,svgz</code> from the allowed upload file types in the system settings and from <code>contao.editable_files</code> in the <code>config.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads\">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/contao/contao/issues/new/choose\">contao/contao</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626\">https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626</a></li>\n<li><a href=\"https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads\">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29790\">https://nvd.nist.gov/vuln/detail/CVE-2025-29790</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqqr-fgmh-f626\">https://github.com/advisories/GHSA-vqqr-fgmh-f626</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqqr-fgmh-f626",
            "title": "[contao/core-bundle] Contao Vulnerable to Cross-Site Scripting (XSS) through SVG uploads",
            "date_modified": "2025-03-19T15:41:48.000Z",
            "date_published": "2025-03-18T21:07:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqqr-fgmh-f626"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability allows users to manipulate the final payment amount processed by PayPal. If a user modifies the item quantity in their shopping cart after initiating the PayPal Checkout process, PayPal will not receive the updated total amount. As a result, PayPal captures only the initially transmitted amount, while Sylius incorrectly considers the order fully paid based on the modified total. This flaw can be exploited both accidentally and intentionally, potentially enabling fraud by allowing customers to pay less than the actual order value.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Attackers can intentionally pay less than the actual total order amount.</li>\n<li>Business owners may suffer financial losses due to underpaid orders.</li>\n<li>Integrity of payment processing is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.1, 1.7.1, 2.0.1 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>ProcessPayPalOrderAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse SM\\Factory\\FactoryInterface as StateMachineFactoryInterface;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Abstraction\\StateMachine\\WinzouStateMachineAdapter;\nuse Sylius\\Component\\Core\\Factory\\AddressFactoryInterface;\nuse Sylius\\Component\\Core\\Model\\CustomerInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\Component\\Core\\OrderCheckoutTransitions;\nuse Sylius\\Component\\Core\\Repository\\CustomerRepositoryInterface;\nuse Sylius\\Component\\Resource\\Factory\\FactoryInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\OrderDetailsApiInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\nuse Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface;\nuse Sylius\\PayPalPlugin\\Verifier\\PaymentAmountVerifierInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class ProcessPayPalOrderAction\n{\n    public function __construct(\n        private readonly CustomerRepositoryInterface $customerRepository,\n        private readonly FactoryInterface $customerFactory,\n        private readonly AddressFactoryInterface $addressFactory,\n        private readonly ObjectManager $orderManager,\n        private readonly StateMachineFactoryInterface|StateMachineInterface $stateMachineFactory,\n        private readonly PaymentStateManagerInterface $paymentStateManager,\n        private readonly CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private readonly OrderDetailsApiInterface $orderDetailsApi,\n        private readonly OrderProviderInterface $orderProvider,\n    ) {\n    }\n\n    public function __invoke(Request $request): Response\n    {\n        $orderId = $request-&gt;request-&gt;getInt('orderId');\n        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);\n        /** @var PaymentInterface $payment */\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_CART);\n\n        $data = $this-&gt;getOrderDetails((string) $request-&gt;request-&gt;get('payPalOrderId'), $payment);\n\n        /** @var CustomerInterface|null $customer */\n        $customer = $order-&gt;getCustomer();\n        if ($customer === null) {\n            $customer = $this-&gt;getOrderCustomer($data['payer']);\n            $order-&gt;setCustomer($customer);\n        }\n\n        $purchaseUnit = (array) $data['purchase_units'][0];\n\n        $address = $this-&gt;addressFactory-&gt;createNew();\n\n        if ($order-&gt;isShippingRequired()) {\n            $name = explode(' ', $purchaseUnit['shipping']['name']['full_name']);\n            $address-&gt;setLastName(array_pop($name) ?? '');\n            $address-&gt;setFirstName(implode(' ', $name));\n            $address-&gt;setStreet($purchaseUnit['shipping']['address']['address_line_1']);\n            $address-&gt;setCity($purchaseUnit['shipping']['address']['admin_area_2']);\n            $address-&gt;setPostcode($purchaseUnit['shipping']['address']['postal_code']);\n            $address-&gt;setCountryCode($purchaseUnit['shipping']['address']['country_code']);\n\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_SHIPPING);\n        } else {\n            $address-&gt;setFirstName($customer-&gt;getFirstName());\n            $address-&gt;setLastName($customer-&gt;getLastName());\n\n            $defaultAddress = $customer-&gt;getDefaultAddress();\n\n            $address-&gt;setStreet($defaultAddress ? $defaultAddress-&gt;getStreet() : '');\n            $address-&gt;setCity($defaultAddress ? $defaultAddress-&gt;getCity() : '');\n            $address-&gt;setPostcode($defaultAddress ? $defaultAddress-&gt;getPostcode() : '');\n            $address-&gt;setCountryCode($data['payer']['address']['country_code']);\n\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);\n        }\n\n        $order-&gt;setShippingAddress(clone $address);\n        $order-&gt;setBillingAddress(clone $address);\n\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);\n\n        $this-&gt;orderManager-&gt;flush();\n\n        try {\n            $this-&gt;verify($payment, $data);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);\n        }\n\n        $this-&gt;paymentStateManager-&gt;create($payment);\n        $this-&gt;paymentStateManager-&gt;process($payment);\n\n        return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);\n    }\n\n    private function getOrderCustomer(array $customerData): CustomerInterface\n    {\n        /** @var CustomerInterface|null $existingCustomer */\n        $existingCustomer = $this-&gt;customerRepository-&gt;findOneBy(['email' =&gt; $customerData['email_address']]);\n        if ($existingCustomer !== null) {\n            return $existingCustomer;\n        }\n\n        /** @var CustomerInterface $customer */\n        $customer = $this-&gt;customerFactory-&gt;createNew();\n        $customer-&gt;setEmail($customerData['email_address']);\n        $customer-&gt;setFirstName($customerData['name']['given_name']);\n        $customer-&gt;setLastName($customerData['name']['surname']);\n\n        return $customer;\n    }\n\n    private function getOrderDetails(string $id, PaymentInterface $payment): array\n    {\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        return $this-&gt;orderDetailsApi-&gt;get($token, $id);\n    }\n\n    private function getStateMachine(): StateMachineInterface\n    {\n        if ($this-&gt;stateMachineFactory instanceof StateMachineFactoryInterface) {\n            return new WinzouStateMachineAdapter($this-&gt;stateMachineFactory);\n        }\n\n        return $this-&gt;stateMachineFactory;\n    }\n\n    private function verify(PaymentInterface $payment, array $paypalOrderDetails): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($paypalOrderDetails);\n\n        if ($payment-&gt;getAmount() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(array $paypalOrderDetails): int\n    {\n        if (!isset($paypalOrderDetails['purchase_units']) || !is_array($paypalOrderDetails['purchase_units'])) {\n            return 0;\n        }\n\n        $totalAmount = 0;\n\n        foreach ($paypalOrderDetails['purchase_units'] as $unit) {\n            $stringAmount = $unit['amount']['value'] ?? '0';\n\n            $totalAmount += (int) ($stringAmount * 100);\n        }\n\n        return $totalAmount;\n    }\n}\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderFromPaymentPageAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse SM\\Factory\\FactoryInterface;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Abstraction\\StateMachine\\WinzouStateMachineAdapter;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\OrderCheckoutTransitions;\nuse Sylius\\Component\\Order\\Processor\\OrderProcessorInterface;\nuse Sylius\\PayPalPlugin\\Exception\\PaymentAmountMismatchException;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\nuse Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface;\nuse Sylius\\PayPalPlugin\\Verifier\\PaymentAmountVerifierInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nfinal class CompletePayPalOrderFromPaymentPageAction\n{\n    public function __construct(\n        private readonly PaymentStateManagerInterface $paymentStateManager,\n        private readonly UrlGeneratorInterface $router,\n        private readonly OrderProviderInterface $orderProvider,\n        private readonly FactoryInterface|StateMachineInterface $stateMachine,\n        private readonly ObjectManager $orderManager,\n        private readonly OrderProcessorInterface $orderProcessor,\n    ) {\n    }\n\n    public function __invoke(Request $request): Response\n    {\n        $orderId = $request-&gt;attributes-&gt;getInt('id');\n\n        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);\n        /** @var PaymentInterface $payment */\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n            $order-&gt;removePayment($payment);\n\n            $this-&gt;orderProcessor-&gt;process($order);\n\n            return new JsonResponse([\n                'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_checkout_complete', [], UrlGeneratorInterface::ABSOLUTE_URL),\n            ]);\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_COMPLETE);\n\n        $this-&gt;orderManager-&gt;flush();\n\n        $request-&gt;getSession()-&gt;set('sylius_order_id', $order-&gt;getId());\n\n        return new JsonResponse([\n            'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_order_thank_you', [], UrlGeneratorInterface::ABSOLUTE_URL),\n        ]);\n    }\n\n    private function getStateMachine(): StateMachineInterface\n    {\n        if ($this-&gt;stateMachine instanceof FactoryInterface) {\n            return new WinzouStateMachineAdapter($this-&gt;stateMachine);\n        }\n\n        return $this-&gt;stateMachine;\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">services:\n    App\\Controller\\ProcessPayPalOrderAction:\n        class: App\\Controller\\ProcessPayPalOrderAction\n        public: true\n        arguments:\n            - '@sylius.repository.customer'\n            - '@sylius.factory.customer'\n            - '@sylius.factory.address'\n            - '@sylius.manager.order'\n            - '@sylius_abstraction.state_machine'\n            - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\OrderDetailsApiInterface'\n            - '@Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface'\n\n    Sylius\\PayPalPlugin\\Controller\\ProcessPayPalOrderAction:\n        alias: App\\Controller\\ProcessPayPalOrderAction\n\n    App\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        class: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n        public: true\n        arguments:\n            - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n            - '@router'\n            - '@Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius.manager.order'\n            - '@sylius.order_processing.order_processor'\n\n    Sylius\\PayPalPlugin\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        alias: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n\n    Sylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n        class: App\\Payum\\Action\\CaptureAction\n        public: true\n        arguments:\n            - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n            - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n        tags:\n            - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">services:\n    App\\Controller\\ProcessPayPalOrderAction:\n        class: App\\Controller\\ProcessPayPalOrderAction\n        public: true\n        arguments:\n            - '@sylius.repository.customer'\n            - '@sylius.factory.customer'\n            - '@sylius.factory.address'\n            - '@sylius.manager.order'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius_paypal.manager.payment_state'\n            - '@sylius_paypal.api.cache_authorize_client'\n            - '@sylius_paypal.api.order_details'\n            - '@sylius_paypal.provider.order'\n\n    sylius_paypal.controller.process_paypal_order:\n        alias: App\\Controller\\ProcessPayPalOrderAction\n\n    App\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        class: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n        public: true\n        arguments:\n            - '@sylius_paypal.manager.payment_state'\n            - '@router'\n            - '@sylius_paypal.provider.order'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius.manager.order'\n            - '@sylius.order_processing.order_processor'\n\n    sylius_paypal.controller.complete_paypal_order_from_payment_page:\n        alias: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n\n    sylius_paypal.payum.action.capture:\n        class: App\\Payum\\Action\\CaptureAction\n        public: true\n        arguments:\n            - '@sylius_paypal.api.cache_authorize_client'\n            - '@sylius_paypal.api.create_order'\n            - '@sylius_paypal.provider.uuid'\n        tags:\n            - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29788\">https://nvd.nist.gov/vuln/detail/CVE-2025-29788</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406\">https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d\">https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pqq3-q84h-pj6x\">https://github.com/advisories/GHSA-pqq3-q84h-pj6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pqq3-q84h-pj6x",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin Payment Amount Manipulation Vulnerability",
            "date_modified": "2025-03-17T21:26:51.000Z",
            "date_published": "2025-03-17T21:26:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pqq3-q84h-pj6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability allows users to manipulate the final payment amount processed by PayPal. If a user modifies the item quantity in their shopping cart after initiating the PayPal Checkout process, PayPal will not receive the updated total amount. As a result, PayPal captures only the initially transmitted amount, while Sylius incorrectly considers the order fully paid based on the modified total. This flaw can be exploited both accidentally and intentionally, potentially enabling fraud by allowing customers to pay less than the actual order value.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Attackers can intentionally pay less than the actual total order amount.</li>\n<li>Business owners may suffer financial losses due to underpaid orders.</li>\n<li>Integrity of payment processing is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.1, 1.7.1, 2.0.1 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>ProcessPayPalOrderAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse SM\\Factory\\FactoryInterface as StateMachineFactoryInterface;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Abstraction\\StateMachine\\WinzouStateMachineAdapter;\nuse Sylius\\Component\\Core\\Factory\\AddressFactoryInterface;\nuse Sylius\\Component\\Core\\Model\\CustomerInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\Component\\Core\\OrderCheckoutTransitions;\nuse Sylius\\Component\\Core\\Repository\\CustomerRepositoryInterface;\nuse Sylius\\Component\\Resource\\Factory\\FactoryInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\OrderDetailsApiInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\nuse Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface;\nuse Sylius\\PayPalPlugin\\Verifier\\PaymentAmountVerifierInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class ProcessPayPalOrderAction\n{\n    public function __construct(\n        private readonly CustomerRepositoryInterface $customerRepository,\n        private readonly FactoryInterface $customerFactory,\n        private readonly AddressFactoryInterface $addressFactory,\n        private readonly ObjectManager $orderManager,\n        private readonly StateMachineFactoryInterface|StateMachineInterface $stateMachineFactory,\n        private readonly PaymentStateManagerInterface $paymentStateManager,\n        private readonly CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private readonly OrderDetailsApiInterface $orderDetailsApi,\n        private readonly OrderProviderInterface $orderProvider,\n    ) {\n    }\n\n    public function __invoke(Request $request): Response\n    {\n        $orderId = $request-&gt;request-&gt;getInt('orderId');\n        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);\n        /** @var PaymentInterface $payment */\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_CART);\n\n        $data = $this-&gt;getOrderDetails((string) $request-&gt;request-&gt;get('payPalOrderId'), $payment);\n\n        /** @var CustomerInterface|null $customer */\n        $customer = $order-&gt;getCustomer();\n        if ($customer === null) {\n            $customer = $this-&gt;getOrderCustomer($data['payer']);\n            $order-&gt;setCustomer($customer);\n        }\n\n        $purchaseUnit = (array) $data['purchase_units'][0];\n\n        $address = $this-&gt;addressFactory-&gt;createNew();\n\n        if ($order-&gt;isShippingRequired()) {\n            $name = explode(' ', $purchaseUnit['shipping']['name']['full_name']);\n            $address-&gt;setLastName(array_pop($name) ?? '');\n            $address-&gt;setFirstName(implode(' ', $name));\n            $address-&gt;setStreet($purchaseUnit['shipping']['address']['address_line_1']);\n            $address-&gt;setCity($purchaseUnit['shipping']['address']['admin_area_2']);\n            $address-&gt;setPostcode($purchaseUnit['shipping']['address']['postal_code']);\n            $address-&gt;setCountryCode($purchaseUnit['shipping']['address']['country_code']);\n\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_SHIPPING);\n        } else {\n            $address-&gt;setFirstName($customer-&gt;getFirstName());\n            $address-&gt;setLastName($customer-&gt;getLastName());\n\n            $defaultAddress = $customer-&gt;getDefaultAddress();\n\n            $address-&gt;setStreet($defaultAddress ? $defaultAddress-&gt;getStreet() : '');\n            $address-&gt;setCity($defaultAddress ? $defaultAddress-&gt;getCity() : '');\n            $address-&gt;setPostcode($defaultAddress ? $defaultAddress-&gt;getPostcode() : '');\n            $address-&gt;setCountryCode($data['payer']['address']['country_code']);\n\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);\n        }\n\n        $order-&gt;setShippingAddress(clone $address);\n        $order-&gt;setBillingAddress(clone $address);\n\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);\n\n        $this-&gt;orderManager-&gt;flush();\n\n        try {\n            $this-&gt;verify($payment, $data);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);\n        }\n\n        $this-&gt;paymentStateManager-&gt;create($payment);\n        $this-&gt;paymentStateManager-&gt;process($payment);\n\n        return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);\n    }\n\n    private function getOrderCustomer(array $customerData): CustomerInterface\n    {\n        /** @var CustomerInterface|null $existingCustomer */\n        $existingCustomer = $this-&gt;customerRepository-&gt;findOneBy(['email' =&gt; $customerData['email_address']]);\n        if ($existingCustomer !== null) {\n            return $existingCustomer;\n        }\n\n        /** @var CustomerInterface $customer */\n        $customer = $this-&gt;customerFactory-&gt;createNew();\n        $customer-&gt;setEmail($customerData['email_address']);\n        $customer-&gt;setFirstName($customerData['name']['given_name']);\n        $customer-&gt;setLastName($customerData['name']['surname']);\n\n        return $customer;\n    }\n\n    private function getOrderDetails(string $id, PaymentInterface $payment): array\n    {\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        return $this-&gt;orderDetailsApi-&gt;get($token, $id);\n    }\n\n    private function getStateMachine(): StateMachineInterface\n    {\n        if ($this-&gt;stateMachineFactory instanceof StateMachineFactoryInterface) {\n            return new WinzouStateMachineAdapter($this-&gt;stateMachineFactory);\n        }\n\n        return $this-&gt;stateMachineFactory;\n    }\n\n    private function verify(PaymentInterface $payment, array $paypalOrderDetails): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($paypalOrderDetails);\n\n        if ($payment-&gt;getAmount() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(array $paypalOrderDetails): int\n    {\n        if (!isset($paypalOrderDetails['purchase_units']) || !is_array($paypalOrderDetails['purchase_units'])) {\n            return 0;\n        }\n\n        $totalAmount = 0;\n\n        foreach ($paypalOrderDetails['purchase_units'] as $unit) {\n            $stringAmount = $unit['amount']['value'] ?? '0';\n\n            $totalAmount += (int) ($stringAmount * 100);\n        }\n\n        return $totalAmount;\n    }\n}\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderFromPaymentPageAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse SM\\Factory\\FactoryInterface;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Abstraction\\StateMachine\\WinzouStateMachineAdapter;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\OrderCheckoutTransitions;\nuse Sylius\\Component\\Order\\Processor\\OrderProcessorInterface;\nuse Sylius\\PayPalPlugin\\Exception\\PaymentAmountMismatchException;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\nuse Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface;\nuse Sylius\\PayPalPlugin\\Verifier\\PaymentAmountVerifierInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nfinal class CompletePayPalOrderFromPaymentPageAction\n{\n    public function __construct(\n        private readonly PaymentStateManagerInterface $paymentStateManager,\n        private readonly UrlGeneratorInterface $router,\n        private readonly OrderProviderInterface $orderProvider,\n        private readonly FactoryInterface|StateMachineInterface $stateMachine,\n        private readonly ObjectManager $orderManager,\n        private readonly OrderProcessorInterface $orderProcessor,\n    ) {\n    }\n\n    public function __invoke(Request $request): Response\n    {\n        $orderId = $request-&gt;attributes-&gt;getInt('id');\n\n        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);\n        /** @var PaymentInterface $payment */\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n            $order-&gt;removePayment($payment);\n\n            $this-&gt;orderProcessor-&gt;process($order);\n\n            return new JsonResponse([\n                'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_checkout_complete', [], UrlGeneratorInterface::ABSOLUTE_URL),\n            ]);\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_COMPLETE);\n\n        $this-&gt;orderManager-&gt;flush();\n\n        $request-&gt;getSession()-&gt;set('sylius_order_id', $order-&gt;getId());\n\n        return new JsonResponse([\n            'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_order_thank_you', [], UrlGeneratorInterface::ABSOLUTE_URL),\n        ]);\n    }\n\n    private function getStateMachine(): StateMachineInterface\n    {\n        if ($this-&gt;stateMachine instanceof FactoryInterface) {\n            return new WinzouStateMachineAdapter($this-&gt;stateMachine);\n        }\n\n        return $this-&gt;stateMachine;\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">services:\n    App\\Controller\\ProcessPayPalOrderAction:\n        class: App\\Controller\\ProcessPayPalOrderAction\n        public: true\n        arguments:\n            - '@sylius.repository.customer'\n            - '@sylius.factory.customer'\n            - '@sylius.factory.address'\n            - '@sylius.manager.order'\n            - '@sylius_abstraction.state_machine'\n            - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\OrderDetailsApiInterface'\n            - '@Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface'\n\n    Sylius\\PayPalPlugin\\Controller\\ProcessPayPalOrderAction:\n        alias: App\\Controller\\ProcessPayPalOrderAction\n\n    App\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        class: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n        public: true\n        arguments:\n            - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n            - '@router'\n            - '@Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius.manager.order'\n            - '@sylius.order_processing.order_processor'\n\n    Sylius\\PayPalPlugin\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        alias: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n\n    Sylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n        class: App\\Payum\\Action\\CaptureAction\n        public: true\n        arguments:\n            - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n            - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n        tags:\n            - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">services:\n    App\\Controller\\ProcessPayPalOrderAction:\n        class: App\\Controller\\ProcessPayPalOrderAction\n        public: true\n        arguments:\n            - '@sylius.repository.customer'\n            - '@sylius.factory.customer'\n            - '@sylius.factory.address'\n            - '@sylius.manager.order'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius_paypal.manager.payment_state'\n            - '@sylius_paypal.api.cache_authorize_client'\n            - '@sylius_paypal.api.order_details'\n            - '@sylius_paypal.provider.order'\n\n    sylius_paypal.controller.process_paypal_order:\n        alias: App\\Controller\\ProcessPayPalOrderAction\n\n    App\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        class: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n        public: true\n        arguments:\n            - '@sylius_paypal.manager.payment_state'\n            - '@router'\n            - '@sylius_paypal.provider.order'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius.manager.order'\n            - '@sylius.order_processing.order_processor'\n\n    sylius_paypal.controller.complete_paypal_order_from_payment_page:\n        alias: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n\n    sylius_paypal.payum.action.capture:\n        class: App\\Payum\\Action\\CaptureAction\n        public: true\n        arguments:\n            - '@sylius_paypal.api.cache_authorize_client'\n            - '@sylius_paypal.api.create_order'\n            - '@sylius_paypal.provider.uuid'\n        tags:\n            - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29788\">https://nvd.nist.gov/vuln/detail/CVE-2025-29788</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406\">https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d\">https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pqq3-q84h-pj6x\">https://github.com/advisories/GHSA-pqq3-q84h-pj6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pqq3-q84h-pj6x",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin Payment Amount Manipulation Vulnerability",
            "date_modified": "2025-03-17T21:26:51.000Z",
            "date_published": "2025-03-17T21:26:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pqq3-q84h-pj6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability allows users to manipulate the final payment amount processed by PayPal. If a user modifies the item quantity in their shopping cart after initiating the PayPal Checkout process, PayPal will not receive the updated total amount. As a result, PayPal captures only the initially transmitted amount, while Sylius incorrectly considers the order fully paid based on the modified total. This flaw can be exploited both accidentally and intentionally, potentially enabling fraud by allowing customers to pay less than the actual order value.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Attackers can intentionally pay less than the actual total order amount.</li>\n<li>Business owners may suffer financial losses due to underpaid orders.</li>\n<li>Integrity of payment processing is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.1, 1.7.1, 2.0.1 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>ProcessPayPalOrderAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse SM\\Factory\\FactoryInterface as StateMachineFactoryInterface;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Abstraction\\StateMachine\\WinzouStateMachineAdapter;\nuse Sylius\\Component\\Core\\Factory\\AddressFactoryInterface;\nuse Sylius\\Component\\Core\\Model\\CustomerInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\Component\\Core\\OrderCheckoutTransitions;\nuse Sylius\\Component\\Core\\Repository\\CustomerRepositoryInterface;\nuse Sylius\\Component\\Resource\\Factory\\FactoryInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\OrderDetailsApiInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\nuse Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface;\nuse Sylius\\PayPalPlugin\\Verifier\\PaymentAmountVerifierInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class ProcessPayPalOrderAction\n{\n    public function __construct(\n        private readonly CustomerRepositoryInterface $customerRepository,\n        private readonly FactoryInterface $customerFactory,\n        private readonly AddressFactoryInterface $addressFactory,\n        private readonly ObjectManager $orderManager,\n        private readonly StateMachineFactoryInterface|StateMachineInterface $stateMachineFactory,\n        private readonly PaymentStateManagerInterface $paymentStateManager,\n        private readonly CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private readonly OrderDetailsApiInterface $orderDetailsApi,\n        private readonly OrderProviderInterface $orderProvider,\n    ) {\n    }\n\n    public function __invoke(Request $request): Response\n    {\n        $orderId = $request-&gt;request-&gt;getInt('orderId');\n        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);\n        /** @var PaymentInterface $payment */\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_CART);\n\n        $data = $this-&gt;getOrderDetails((string) $request-&gt;request-&gt;get('payPalOrderId'), $payment);\n\n        /** @var CustomerInterface|null $customer */\n        $customer = $order-&gt;getCustomer();\n        if ($customer === null) {\n            $customer = $this-&gt;getOrderCustomer($data['payer']);\n            $order-&gt;setCustomer($customer);\n        }\n\n        $purchaseUnit = (array) $data['purchase_units'][0];\n\n        $address = $this-&gt;addressFactory-&gt;createNew();\n\n        if ($order-&gt;isShippingRequired()) {\n            $name = explode(' ', $purchaseUnit['shipping']['name']['full_name']);\n            $address-&gt;setLastName(array_pop($name) ?? '');\n            $address-&gt;setFirstName(implode(' ', $name));\n            $address-&gt;setStreet($purchaseUnit['shipping']['address']['address_line_1']);\n            $address-&gt;setCity($purchaseUnit['shipping']['address']['admin_area_2']);\n            $address-&gt;setPostcode($purchaseUnit['shipping']['address']['postal_code']);\n            $address-&gt;setCountryCode($purchaseUnit['shipping']['address']['country_code']);\n\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_SHIPPING);\n        } else {\n            $address-&gt;setFirstName($customer-&gt;getFirstName());\n            $address-&gt;setLastName($customer-&gt;getLastName());\n\n            $defaultAddress = $customer-&gt;getDefaultAddress();\n\n            $address-&gt;setStreet($defaultAddress ? $defaultAddress-&gt;getStreet() : '');\n            $address-&gt;setCity($defaultAddress ? $defaultAddress-&gt;getCity() : '');\n            $address-&gt;setPostcode($defaultAddress ? $defaultAddress-&gt;getPostcode() : '');\n            $address-&gt;setCountryCode($data['payer']['address']['country_code']);\n\n            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);\n        }\n\n        $order-&gt;setShippingAddress(clone $address);\n        $order-&gt;setBillingAddress(clone $address);\n\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);\n\n        $this-&gt;orderManager-&gt;flush();\n\n        try {\n            $this-&gt;verify($payment, $data);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);\n        }\n\n        $this-&gt;paymentStateManager-&gt;create($payment);\n        $this-&gt;paymentStateManager-&gt;process($payment);\n\n        return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);\n    }\n\n    private function getOrderCustomer(array $customerData): CustomerInterface\n    {\n        /** @var CustomerInterface|null $existingCustomer */\n        $existingCustomer = $this-&gt;customerRepository-&gt;findOneBy(['email' =&gt; $customerData['email_address']]);\n        if ($existingCustomer !== null) {\n            return $existingCustomer;\n        }\n\n        /** @var CustomerInterface $customer */\n        $customer = $this-&gt;customerFactory-&gt;createNew();\n        $customer-&gt;setEmail($customerData['email_address']);\n        $customer-&gt;setFirstName($customerData['name']['given_name']);\n        $customer-&gt;setLastName($customerData['name']['surname']);\n\n        return $customer;\n    }\n\n    private function getOrderDetails(string $id, PaymentInterface $payment): array\n    {\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        return $this-&gt;orderDetailsApi-&gt;get($token, $id);\n    }\n\n    private function getStateMachine(): StateMachineInterface\n    {\n        if ($this-&gt;stateMachineFactory instanceof StateMachineFactoryInterface) {\n            return new WinzouStateMachineAdapter($this-&gt;stateMachineFactory);\n        }\n\n        return $this-&gt;stateMachineFactory;\n    }\n\n    private function verify(PaymentInterface $payment, array $paypalOrderDetails): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($paypalOrderDetails);\n\n        if ($payment-&gt;getAmount() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(array $paypalOrderDetails): int\n    {\n        if (!isset($paypalOrderDetails['purchase_units']) || !is_array($paypalOrderDetails['purchase_units'])) {\n            return 0;\n        }\n\n        $totalAmount = 0;\n\n        foreach ($paypalOrderDetails['purchase_units'] as $unit) {\n            $stringAmount = $unit['amount']['value'] ?? '0';\n\n            $totalAmount += (int) ($stringAmount * 100);\n        }\n\n        return $totalAmount;\n    }\n}\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderFromPaymentPageAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse SM\\Factory\\FactoryInterface;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Abstraction\\StateMachine\\WinzouStateMachineAdapter;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\OrderCheckoutTransitions;\nuse Sylius\\Component\\Order\\Processor\\OrderProcessorInterface;\nuse Sylius\\PayPalPlugin\\Exception\\PaymentAmountMismatchException;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\nuse Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface;\nuse Sylius\\PayPalPlugin\\Verifier\\PaymentAmountVerifierInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nfinal class CompletePayPalOrderFromPaymentPageAction\n{\n    public function __construct(\n        private readonly PaymentStateManagerInterface $paymentStateManager,\n        private readonly UrlGeneratorInterface $router,\n        private readonly OrderProviderInterface $orderProvider,\n        private readonly FactoryInterface|StateMachineInterface $stateMachine,\n        private readonly ObjectManager $orderManager,\n        private readonly OrderProcessorInterface $orderProcessor,\n    ) {\n    }\n\n    public function __invoke(Request $request): Response\n    {\n        $orderId = $request-&gt;attributes-&gt;getInt('id');\n\n        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);\n        /** @var PaymentInterface $payment */\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n            $order-&gt;removePayment($payment);\n\n            $this-&gt;orderProcessor-&gt;process($order);\n\n            return new JsonResponse([\n                'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_checkout_complete', [], UrlGeneratorInterface::ABSOLUTE_URL),\n            ]);\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);\n        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_COMPLETE);\n\n        $this-&gt;orderManager-&gt;flush();\n\n        $request-&gt;getSession()-&gt;set('sylius_order_id', $order-&gt;getId());\n\n        return new JsonResponse([\n            'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_order_thank_you', [], UrlGeneratorInterface::ABSOLUTE_URL),\n        ]);\n    }\n\n    private function getStateMachine(): StateMachineInterface\n    {\n        if ($this-&gt;stateMachine instanceof FactoryInterface) {\n            return new WinzouStateMachineAdapter($this-&gt;stateMachine);\n        }\n\n        return $this-&gt;stateMachine;\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">services:\n    App\\Controller\\ProcessPayPalOrderAction:\n        class: App\\Controller\\ProcessPayPalOrderAction\n        public: true\n        arguments:\n            - '@sylius.repository.customer'\n            - '@sylius.factory.customer'\n            - '@sylius.factory.address'\n            - '@sylius.manager.order'\n            - '@sylius_abstraction.state_machine'\n            - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\OrderDetailsApiInterface'\n            - '@Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface'\n\n    Sylius\\PayPalPlugin\\Controller\\ProcessPayPalOrderAction:\n        alias: App\\Controller\\ProcessPayPalOrderAction\n\n    App\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        class: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n        public: true\n        arguments:\n            - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n            - '@router'\n            - '@Sylius\\PayPalPlugin\\Provider\\OrderProviderInterface'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius.manager.order'\n            - '@sylius.order_processing.order_processor'\n\n    Sylius\\PayPalPlugin\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        alias: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n\n    Sylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n        class: App\\Payum\\Action\\CaptureAction\n        public: true\n        arguments:\n            - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n            - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n            - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n        tags:\n            - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">services:\n    App\\Controller\\ProcessPayPalOrderAction:\n        class: App\\Controller\\ProcessPayPalOrderAction\n        public: true\n        arguments:\n            - '@sylius.repository.customer'\n            - '@sylius.factory.customer'\n            - '@sylius.factory.address'\n            - '@sylius.manager.order'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius_paypal.manager.payment_state'\n            - '@sylius_paypal.api.cache_authorize_client'\n            - '@sylius_paypal.api.order_details'\n            - '@sylius_paypal.provider.order'\n\n    sylius_paypal.controller.process_paypal_order:\n        alias: App\\Controller\\ProcessPayPalOrderAction\n\n    App\\Controller\\CompletePayPalOrderFromPaymentPageAction:\n        class: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n        public: true\n        arguments:\n            - '@sylius_paypal.manager.payment_state'\n            - '@router'\n            - '@sylius_paypal.provider.order'\n            - '@sylius_abstraction.state_machine'\n            - '@sylius.manager.order'\n            - '@sylius.order_processing.order_processor'\n\n    sylius_paypal.controller.complete_paypal_order_from_payment_page:\n        alias: App\\Controller\\CompletePayPalOrderFromPaymentPageAction\n\n    sylius_paypal.payum.action.capture:\n        class: App\\Payum\\Action\\CaptureAction\n        public: true\n        arguments:\n            - '@sylius_paypal.api.cache_authorize_client'\n            - '@sylius_paypal.api.create_order'\n            - '@sylius_paypal.provider.uuid'\n        tags:\n            - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29788\">https://nvd.nist.gov/vuln/detail/CVE-2025-29788</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406\">https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d\">https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1\">https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pqq3-q84h-pj6x\">https://github.com/advisories/GHSA-pqq3-q84h-pj6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pqq3-q84h-pj6x",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin Payment Amount Manipulation Vulnerability",
            "date_modified": "2025-03-17T21:26:51.000Z",
            "date_published": "2025-03-17T21:26:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pqq3-q84h-pj6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The site title field at /panel/options/site/allows embedding JS tags, which can be used to attack all members of the system. This is a widespread attack and can cause significant damage if there is a considerable number of users.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attack is widespread, leveraging what XSS can do. This will undoubtedly impact system availability.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/commit/aa3e9c684035d9e8495169fde7c57d97faa3f9a2\"><strong>Formwork 2.x</strong> (aa3e9c6)</a> escapes site title from panel header navigation.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>By embedding \"&lt;!--\", the source code can be rendered non-functional, significantly impacting system availability. However, the attacker would need admin privileges, making the attack more difficult to execute.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/8fc68f6f-8bc4-4b97-8b93-dee5b88a3fcf\"></p>\n<ol>\n<li><p>The page where the vulnerability was found, and the attack surface is the Title field.\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/dbf94354-7115-4d3b-81ba-6b6aff561b81\"></p>\n</li>\n<li><p>I tested accessing the Dashboard page using a regular user account with Firefox, a different browser, and found that it was also affected.\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/0e72129a-7f2d-4f0e-b85e-0b1cedfd377e\"></p>\n</li>\n<li><p>Additionally, the remaining code was commented out to disrupt the UX/UI, making it difficult to revert the settings.</p>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/security/advisories/GHSA-vf6x-59hh-332f\">https://github.com/getformwork/formwork/security/advisories/GHSA-vf6x-59hh-332f</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/aa3e9c684035d9e8495169fde7c57d97faa3f9a2\">https://github.com/getformwork/formwork/commit/aa3e9c684035d9e8495169fde7c57d97faa3f9a2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vf6x-59hh-332f\">https://github.com/advisories/GHSA-vf6x-59hh-332f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vf6x-59hh-332f",
            "title": "[getformwork/formwork]  Formwork has a cross-site scripting (XSS) vulnerability in Site title",
            "date_modified": "2025-03-17T20:27:04.000Z",
            "date_published": "2025-03-01T00:11:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vf6x-59hh-332f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Improper validation of select fields allows attackers to craft an input that crashes the system, resulting in a 500 status and making the entire site and administration panel unavailable.\nThis clearly impacts the Availability aspect of the CIA triad (confidentiality, integrity, and availability), although the attack still has certain limitations.</p>\n<h3 id=\"details\">Details</h3>\n<p>The attack involves injecting any invalid user role value (e.g. \"&gt;\") into the Role=User parameter in the /panel/users/{name}/profile page, which is the user profile update page.\nDoing this will change the users data in a way that prevents users and then the entire site from loading. Even though the actual data change is minimal, the error is unrecoverable until a valid role parameter is restored by direct modification of the user account file.\nProper validation of select fields will prevent extraneous valid from being accepted and making the entire site and administration panel unavailable.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/commit/d9f0c1feb3b9855d5bdc8bb189c0aaab2792e7ca\"><strong>Formwork 2.x</strong> (d9f0c1f)</a> adds proper validation to select fields.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>The condition for this attack is having high privileges or Admin access, which means it could be exploited by an Insider Threat. Alternatively, if an attacker gains access to a privileged user account, they can execute the attack as well.\nOverall, the attack is relatively difficult to carry out, but if successful, the impact and damage would be significant.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><img alt=\"2025-02-27_10-25\" src=\"https://github.com/user-attachments/assets/4b5a2d71-3397-4a5b-8464-35752376115a\"></p>\n<ol>\n<li>Intercept the request and inject an input that will trigger an error.</li>\n</ol>\n<p><img alt=\"2025-02-27_10-25_1\" src=\"https://github.com/user-attachments/assets/a888c109-a724-4478-ae80-d9e8b05ef1aa\"></p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/e81bb9fc-8c92-413c-8cc0-0bcffd2e2922\"></p>\n<p>2.After that, it will be observed that the system is shut down or completely broken. Even changing the browser or resetting the server will not be able to restore it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/security/advisories/GHSA-c85w-x26q-ch87\">https://github.com/getformwork/formwork/security/advisories/GHSA-c85w-x26q-ch87</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/d9f0c1feb3b9855d5bdc8bb189c0aaab2792e7ca\">https://github.com/getformwork/formwork/commit/d9f0c1feb3b9855d5bdc8bb189c0aaab2792e7ca</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c85w-x26q-ch87\">https://github.com/advisories/GHSA-c85w-x26q-ch87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c85w-x26q-ch87",
            "title": "[getformwork/formwork] Formwork improperly validates input of User role preventing site and panel availability",
            "date_modified": "2025-03-16T17:19:26.000Z",
            "date_published": "2025-03-01T00:11:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c85w-x26q-ch87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Inconsistent </p>",
            "url": "https://github.com/advisories/GHSA-549p-5c7f-c5p4",
            "title": "[froala/wysiwyg-editor] Froala WYSIWYG editor allows cross-site scripting (XSS)",
            "date_modified": "2025-03-14T18:51:50.000Z",
            "date_published": "2024-11-08T00:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-549p-5c7f-c5p4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been identified in MODX prior to 3.1.0. The vulnerability allows authenticated users to upload SVG files containing malicious JavaScript code as profile images, which gets executed in victims' browsers when viewing the profile image.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-28010\">https://nvd.nist.gov/vuln/detail/CVE-2025-28010</a></li>\n<li><a href=\"https://github.com/rtnthakur/CVE/blob/main/MODX/README.md\">https://github.com/rtnthakur/CVE/blob/main/MODX/README.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hm54-fg2w-2g6j\">https://github.com/advisories/GHSA-hm54-fg2w-2g6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hm54-fg2w-2g6j",
            "title": "[modx/revolution] MODX allows cross-site scripting (XSS) via an SVG file",
            "date_modified": "2025-03-19T15:45:59.000Z",
            "date_published": "2025-03-13T18:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hm54-fg2w-2g6j"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}