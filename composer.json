{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>squelette</code> parameter is vulnerable to path traversal attacks, enabling read access to arbitrary files on the server. The payload <code>../../../../../../etc/passwd</code> was submitted in the <code>squelette</code> parameter. The requested file was returned in the application's response.</p>\n<h3 id=\"details\">Details</h3>\n<p>File path traversal vulnerabilities arise when user-controllable data is used within a filesystem operation in an unsafe manner. Typically, a user-supplied filename is appended to a directory prefix in order to read or write the contents of a file. If vulnerable, an attacker can supply path traversal sequences (using dot-dot-slash characters) to break out of the intended directory and read or write files elsewhere on the filesystem.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li><p>Access the below URL to see the contents of <code>/etc/passwd</code>:\n<strong>URL with payload:</strong> <code>https://yeswiki.net/?UrkCEO/edit&amp;theme=margot&amp;squelette=..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd&amp;style=margot.css</code></p>\n<p>Similarly, contents of <code>wakka.config.php</code> can be read (which contains database password) using <code>..%2f..%2f..%2fwakka.config.php</code> as payload. Thus showing the severity of this issue.</p>\n</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a very serious vulnerability, allowing an attacker to access sensitive files containing configuration data, passwords, database records, log data, source code, and program scripts and binaries. Thus, leading to complete loss of confidentiality.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/YesWiki/yeswiki/security/advisories/GHSA-w34w-fvp3-68xm\">https://github.com/YesWiki/yeswiki/security/advisories/GHSA-w34w-fvp3-68xm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31131\">https://nvd.nist.gov/vuln/detail/CVE-2025-31131</a></li>\n<li><a href=\"https://github.com/YesWiki/yeswiki/commit/f78c915369a60c74ab8f38561ae93a4aaca9b989\">https://github.com/YesWiki/yeswiki/commit/f78c915369a60c74ab8f38561ae93a4aaca9b989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w34w-fvp3-68xm\">https://github.com/advisories/GHSA-w34w-fvp3-68xm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w34w-fvp3-68xm",
            "title": "[yeswiki/yeswiki] Yeswiki Path Traversal vulnerability allows arbitrary read of files",
            "date_modified": "2025-04-01T18:31:51.000Z",
            "date_published": "2025-04-01T18:31:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w34w-fvp3-68xm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incorrect Authorization vulnerability in Drupal core allows Forceful Browsing.This issue affects Drupal core: from 8.0.0 before 10.3.13, from 10.4.0 before 10.4.3, from 11.0.0 before 11.0.12, from 11.1.0 before 11.1.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31673\">https://nvd.nist.gov/vuln/detail/CVE-2025-31673</a></li>\n<li><a href=\"https://www.drupal.org/sa-core-2025-002\">https://www.drupal.org/sa-core-2025-002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wpp8-fjgf-pwc7\">https://github.com/advisories/GHSA-wpp8-fjgf-pwc7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7",
            "title": "[drupal/core] Drupal Core Vulnerable to Forceful Browsing",
            "date_modified": "2025-04-01T18:03:52.000Z",
            "date_published": "2025-04-01T00:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incorrect Authorization vulnerability in Drupal core allows Forceful Browsing.This issue affects Drupal core: from 8.0.0 before 10.3.13, from 10.4.0 before 10.4.3, from 11.0.0 before 11.0.12, from 11.1.0 before 11.1.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31673\">https://nvd.nist.gov/vuln/detail/CVE-2025-31673</a></li>\n<li><a href=\"https://www.drupal.org/sa-core-2025-002\">https://www.drupal.org/sa-core-2025-002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wpp8-fjgf-pwc7\">https://github.com/advisories/GHSA-wpp8-fjgf-pwc7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7",
            "title": "[drupal/core] Drupal Core Vulnerable to Forceful Browsing",
            "date_modified": "2025-04-01T18:03:52.000Z",
            "date_published": "2025-04-01T00:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incorrect Authorization vulnerability in Drupal core allows Forceful Browsing.This issue affects Drupal core: from 8.0.0 before 10.3.13, from 10.4.0 before 10.4.3, from 11.0.0 before 11.0.12, from 11.1.0 before 11.1.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31673\">https://nvd.nist.gov/vuln/detail/CVE-2025-31673</a></li>\n<li><a href=\"https://www.drupal.org/sa-core-2025-002\">https://www.drupal.org/sa-core-2025-002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wpp8-fjgf-pwc7\">https://github.com/advisories/GHSA-wpp8-fjgf-pwc7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7",
            "title": "[drupal/core] Drupal Core Vulnerable to Forceful Browsing",
            "date_modified": "2025-04-01T18:03:52.000Z",
            "date_published": "2025-04-01T00:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incorrect Authorization vulnerability in Drupal core allows Forceful Browsing.This issue affects Drupal core: from 8.0.0 before 10.3.13, from 10.4.0 before 10.4.3, from 11.0.0 before 11.0.12, from 11.1.0 before 11.1.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31673\">https://nvd.nist.gov/vuln/detail/CVE-2025-31673</a></li>\n<li><a href=\"https://www.drupal.org/sa-core-2025-002\">https://www.drupal.org/sa-core-2025-002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wpp8-fjgf-pwc7\">https://github.com/advisories/GHSA-wpp8-fjgf-pwc7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7",
            "title": "[drupal/core] Drupal Core Vulnerable to Forceful Browsing",
            "date_modified": "2025-04-01T18:03:52.000Z",
            "date_published": "2025-04-01T00:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wpp8-fjgf-pwc7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>shopxo v6.4.0 has a ssrf/xss vulnerability in multiple places.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-28094\">https://nvd.nist.gov/vuln/detail/CVE-2025-28094</a></li>\n<li><a href=\"https://www.yuque.com/morysummer/vx41bz/echzollcdlmllgqo\">https://www.yuque.com/morysummer/vx41bz/echzollcdlmllgqo</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-24cf-848g-762c\">https://github.com/advisories/GHSA-24cf-848g-762c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-24cf-848g-762c",
            "title": "[shopxo/shopxo] ShopXO Vulnerable to Server-Side Request Forgery (SSRF) and Cross-Site Scripting (XSS)",
            "date_modified": "2025-04-01T14:20:28.000Z",
            "date_published": "2025-03-29T00:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-24cf-848g-762c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ShopXO v6.4.0 is vulnerable to Server-Side Request Forgery (SSRF) in Email Settings.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-28093\">https://nvd.nist.gov/vuln/detail/CVE-2025-28093</a></li>\n<li><a href=\"https://www.yuque.com/morysummer/vx41bz/he2hb8ic8an8h07f\">https://www.yuque.com/morysummer/vx41bz/he2hb8ic8an8h07f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gfhv-5rqh-7qx3\">https://github.com/advisories/GHSA-gfhv-5rqh-7qx3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gfhv-5rqh-7qx3",
            "title": "[shopxo/shopxo] ShopXO Vulnerable to Server-Side Request Forgery (SSRF) via Email Settings",
            "date_modified": "2025-04-01T14:20:21.000Z",
            "date_published": "2025-03-29T00:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gfhv-5rqh-7qx3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ShopXO v6.4.0 is vulnerable to Server-Side Request Forgery (SSRF) via image upload function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-28092\">https://nvd.nist.gov/vuln/detail/CVE-2025-28092</a></li>\n<li><a href=\"https://www.yuque.com/morysummer/vx41bz/stggvmlxs9ewqlvu\">https://www.yuque.com/morysummer/vx41bz/stggvmlxs9ewqlvu</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p736-g6pg-hjhw\">https://github.com/advisories/GHSA-p736-g6pg-hjhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p736-g6pg-hjhw",
            "title": "[shopxo/shopxo] ShopXO Vulnerable to Server-Side Request Forgery (SSRF) via Image Upload",
            "date_modified": "2025-04-01T14:20:11.000Z",
            "date_published": "2025-03-29T00:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p736-g6pg-hjhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in ConcreteCMS up to 9.3.9. It has been classified as problematic. This affects the function Save of the component HTML Block Handler. The manipulation of the argument content leads to HTML injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2967\">https://nvd.nist.gov/vuln/detail/CVE-2025-2967</a></li>\n<li><a href=\"https://github.com/yaowenxiao721/Poc/blob/main/Concretecms/Concretecms-poc5.md\">https://github.com/yaowenxiao721/Poc/blob/main/Concretecms/Concretecms-poc5.md</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.302019\">https://vuldb.com/?ctiid.302019</a></li>\n<li><a href=\"https://vuldb.com/?id.302019\">https://vuldb.com/?id.302019</a></li>\n<li><a href=\"https://vuldb.com/?submit.522417\">https://vuldb.com/?submit.522417</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfqf-5rhg-5c73\">https://github.com/advisories/GHSA-xfqf-5rhg-5c73</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfqf-5rhg-5c73",
            "title": "[concrete5/concrete5] ConcreteCMS Cross-Site Scripting (XSS) via HTML Block Text Field",
            "date_modified": "2025-03-31T16:55:47.000Z",
            "date_published": "2025-03-31T03:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfqf-5rhg-5c73"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"duplicate-advisory\">Duplicate Advisory</h3>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-95j3-435g-vjcp. This link is maintained to preserve external references.</p>\n<h3 id=\"original-description\">Original Description</h3>\n<p>Cross Site Scripting vulnerability in Leantime v3.2.1 and before allows an authenticated attacker to execute arbitrary code and obtain sensitive information via the first name field in processMentions().</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Leantime/leantime/security/advisories/GHSA-95j3-435g-vjcp\">https://github.com/Leantime/leantime/security/advisories/GHSA-95j3-435g-vjcp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-28254\">https://nvd.nist.gov/vuln/detail/CVE-2025-28254</a></li>\n<li><a href=\"https://github.com/Leantime/leantime/commit/ce1d2073e4601183e1bdd90f4b433d16aee46a50\">https://github.com/Leantime/leantime/commit/ce1d2073e4601183e1bdd90f4b433d16aee46a50</a></li>\n<li><a href=\"https://github.com/Leantime/leantime/blob/0e7ddbbe3d582f657a1dddfef7b3419ae588cbf7/app/Domain/Notifications/Services/Notifications.php#L128\">https://github.com/Leantime/leantime/blob/0e7ddbbe3d582f657a1dddfef7b3419ae588cbf7/app/Domain/Notifications/Services/Notifications.php#L128</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jf6p-4hgv-v6qh\">https://github.com/advisories/GHSA-jf6p-4hgv-v6qh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jf6p-4hgv-v6qh",
            "title": "[leantime/leantime] Duplicate Advisory: Leantime affected by Improper Neutralization of HTML Tags",
            "date_modified": "2025-03-31T15:57:42.000Z",
            "date_published": "2025-03-28T21:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jf6p-4hgv-v6qh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Pixelfed before 0.12.5 allows anyone to follow private accounts and see private posts on other Fediverse servers. This affects users elsewhere in the Fediverse, if they otherwise have any followers from a Pixelfed instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30741\">https://nvd.nist.gov/vuln/detail/CVE-2025-30741</a></li>\n<li><a href=\"https://fokus.cool/2025/03/25/pixelfed-vulnerability.html\">https://fokus.cool/2025/03/25/pixelfed-vulnerability.html</a></li>\n<li><a href=\"https://github.com/pixelfed/pixelfed/releases/tag/v0.12.5\">https://github.com/pixelfed/pixelfed/releases/tag/v0.12.5</a></li>\n<li><a href=\"https://mastodon.social/@pixelfed/114215925957179498\">https://mastodon.social/@pixelfed/114215925957179498</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=43474425\">https://news.ycombinator.com/item?id=43474425</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7287-grhx-542x\">https://github.com/advisories/GHSA-7287-grhx-542x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7287-grhx-542x",
            "title": "[pixelfed/pixelfed] Pixelfed may allow unauthorized actor to view private posts and private users",
            "date_modified": "2025-03-26T14:53:16.000Z",
            "date_published": "2025-03-25T21:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7287-grhx-542x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TastyIgniter 3.7.6 contains an Incorrect Access Control vulnerability in the invoice() function within Orders.php which allows unauthorized users to access and generate invoices due to missing permission checks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-44313\">https://nvd.nist.gov/vuln/detail/CVE-2024-44313</a></li>\n<li><a href=\"https://github.com/tastyigniter/TastyIgniter/blob/3.x/app/admin/controllers/Orders.php\">https://github.com/tastyigniter/TastyIgniter/blob/3.x/app/admin/controllers/Orders.php</a></li>\n<li><a href=\"https://medium.com/@cnetsec/cve-2024-44313-incorrect-access-control-in-tastyigniter-3-7-6-01a73c548b74\">https://medium.com/@cnetsec/cve-2024-44313-incorrect-access-control-in-tastyigniter-3-7-6-01a73c548b74</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gg2f-r4jh-vpmh\">https://github.com/advisories/GHSA-gg2f-r4jh-vpmh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gg2f-r4jh-vpmh",
            "title": "[tastyigniter/tastyigniter] TastyIgniter Has an Incorrect Access Control Vulnerability via `invoice()` Function",
            "date_modified": "2025-03-26T14:41:44.000Z",
            "date_published": "2025-03-18T15:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gg2f-r4jh-vpmh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as critical, has been found in yiisoft Yii2 up to 2.0.45. Affected by this issue is the function getIterator of the file symfony\\finder\\Iterator\\SortableIterator.php. The manipulation leads to deserialization. The attack may be launched remotely. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2689\">https://nvd.nist.gov/vuln/detail/CVE-2025-2689</a></li>\n<li><a href=\"https://github.com/gaorenyusi/gaorenyusi/blob/main/Yii2.md\">https://github.com/gaorenyusi/gaorenyusi/blob/main/Yii2.md</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.300710\">https://vuldb.com/?ctiid.300710</a></li>\n<li><a href=\"https://vuldb.com/?id.300710\">https://vuldb.com/?id.300710</a></li>\n<li><a href=\"https://vuldb.com/?submit.521709\">https://vuldb.com/?submit.521709</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88m2-j94x-v4fx\">https://github.com/advisories/GHSA-88m2-j94x-v4fx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88m2-j94x-v4fx",
            "title": "[yiisoft/yii2-dev] yiisoft Yii2 Deserialization of Untrusted Data",
            "date_modified": "2025-03-24T21:31:20.000Z",
            "date_published": "2025-03-24T09:34:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88m2-j94x-v4fx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A security check that gets called after GraphQl resolvers is always replaced by another one as there's no break in this clause: <a href=\"https://github.com/api-platform/core/pull/6444/files#diff-09e3c2cfe12a2ce65bd6c983c7ca6bfcf783f852b8d0554bb938e8ebf5e5fa65R56\">https://github.com/api-platform/core/pull/6444/files#diff-09e3c2cfe12a2ce65bd6c983c7ca6bfcf783f852b8d0554bb938e8ebf5e5fa65R56</a></p>\n<p><a href=\"https://github.com/soyuka/core/blob/7e2e8f9ff322ac5f6eb5f65baf432bffdca0fd51/src/Symfony/Security/State/AccessCheckerProvider.php#L49-L57\">https://github.com/soyuka/core/blob/7e2e8f9ff322ac5f6eb5f65baf432bffdca0fd51/src/Symfony/Security/State/AccessCheckerProvider.php#L49-L57</a> </p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a graphql endpoint with a security after resolver.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>As this fallsback to <code>security</code>, the impact is there only when there's only a security after resolver and none inside security. The test at <a href=\"https://github.com/api-platform/core/pull/6444\">https://github.com/api-platform/core/pull/6444</a> is probably broken.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/api-platform/core/security/advisories/GHSA-7mxx-3cgm-xxv3\">https://github.com/api-platform/core/security/advisories/GHSA-7mxx-3cgm-xxv3</a></li>\n<li><a href=\"https://github.com/api-platform/core/pull/6444\">https://github.com/api-platform/core/pull/6444</a></li>\n<li><a href=\"https://github.com/api-platform/core/pull/6444/files#diff-09e3c2cfe12a2ce65bd6c983c7ca6bfcf783f852b8d0554bb938e8ebf5e5fa65R56\">https://github.com/api-platform/core/pull/6444/files#diff-09e3c2cfe12a2ce65bd6c983c7ca6bfcf783f852b8d0554bb938e8ebf5e5fa65R56</a></li>\n<li><a href=\"https://github.com/api-platform/core/commit/dc4fc84ba93e22b4f44a37e90a93c6d079c1c620\">https://github.com/api-platform/core/commit/dc4fc84ba93e22b4f44a37e90a93c6d079c1c620</a></li>\n<li><a href=\"https://github.com/soyuka/core/blob/7e2e8f9ff322ac5f6eb5f65baf432bffdca0fd51/src/Symfony/Security/State/AccessCheckerProvider.php#L49-L57\">https://github.com/soyuka/core/blob/7e2e8f9ff322ac5f6eb5f65baf432bffdca0fd51/src/Symfony/Security/State/AccessCheckerProvider.php#L49-L57</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23204\">https://nvd.nist.gov/vuln/detail/CVE-2025-23204</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mxx-3cgm-xxv3\">https://github.com/advisories/GHSA-7mxx-3cgm-xxv3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mxx-3cgm-xxv3",
            "title": "[api-platform/core] API Platform Core does not call GraphQl securityAfterResolver",
            "date_modified": "2025-03-24T18:41:26.000Z",
            "date_published": "2025-03-24T16:31:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mxx-3cgm-xxv3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TastyIgniter 3.7.6 contains an Incorrect Access Control vulnerability in the Orders Management System, allowing unauthorized users to update order statuses. The issue occurs in the index_onUpdateStatus() function within Orders.php, which fails to verify if the user has permission to modify an order's status. This flaw can be exploited remotely, leading to unauthorized order manipulation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-44314\">https://nvd.nist.gov/vuln/detail/CVE-2024-44314</a></li>\n<li><a href=\"https://github.com/tastyigniter/TastyIgniter/blob/3.x/app/admin/controllers/Orders.php\">https://github.com/tastyigniter/TastyIgniter/blob/3.x/app/admin/controllers/Orders.php</a></li>\n<li><a href=\"https://medium.com/@cnetsec/cve-2024-44314-incorrect-access-control-in-function-updateorder-fc5f2b1b0467\">https://medium.com/@cnetsec/cve-2024-44314-incorrect-access-control-in-function-updateorder-fc5f2b1b0467</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w5h7-mw56-4v7x\">https://github.com/advisories/GHSA-w5h7-mw56-4v7x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w5h7-mw56-4v7x",
            "title": "[tastyigniter/tastyigniter] TastyIgniter Has an Incorrect Access Control Vulnerability",
            "date_modified": "2025-03-21T17:44:55.000Z",
            "date_published": "2025-03-18T15:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w5h7-mw56-4v7x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A discovered vulnerability allows users to modify their shopping cart after completing the PayPal Checkout process and payment authorization. If a user initiates a PayPal transaction from a product page or the cart page and then returns to the order summary page, they can still manipulate the cart contents before finalizing the order. As a result, the order amount in Sylius may be higher than the amount actually captured by PayPal, leading to a scenario where merchants deliver products or services without full payment.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Users can exploit this flaw to receive products/services without paying the full amount.</li>\n<li>Merchants may suffer financial losses due to underpaid orders.</li>\n<li>Trust in the integrity of the payment process is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.2, 1.7.2, 2.0.2 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>PayPalOrderCompleteProcessor</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Processor;\n\nuse Sylius\\Bundle\\PayumBundle\\Model\\GatewayConfigInterface;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\n\nfinal class PayPalOrderCompleteProcessor\n{\n    public function __construct(private readonly PaymentStateManagerInterface $paymentStateManager) {\n    }\n\n    public function completePayPalOrder(OrderInterface $order): void\n    {\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n        if ($payment === null) {\n            return;\n        }\n\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        /** @var GatewayConfigInterface $gatewayConfig */\n        $gatewayConfig = $paymentMethod-&gt;getGatewayConfig();\n\n        if ($gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal') {\n            return;\n        }\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return;\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<h3 id=\"important\">IMPORTANT</h3>\n<p>For <code>PayPalPlugin 2.x</code> change:</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal'\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== SyliusPayPalExtension::PAYPAL_FACTORY_NAME\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderListener</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\EventListener\\Workflow;\n\nuse App\\Processor\\PayPalOrderCompleteProcessor;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class CompletePayPalOrderListener\n{\n    public function __construct(private readonly PayPalOrderCompleteProcessor $completeProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event-&gt;getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this-&gt;completeProcessor-&gt;completePayPalOrder($order);\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic (if you didn't have it already):</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">Sylius\\PayPalPlugin\\EventListener\\Workflow\\CompletePayPalOrderListener:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nSylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n\nSylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n        - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n        - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">sylius_paypal.listener.workflow.complete_paypal_order:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@sylius_paypal.processor.paypal_order_complete'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nsylius_paypal.processor.paypal_order_complete:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@sylius_paypal.manager.payment_state'\n\nsylius_paypal.payum.action.capture:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@sylius_paypal.api.cache_authorize_client'\n        - '@sylius_paypal.api.create_order'\n        - '@sylius_paypal.provider.uuid'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa\">https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30152\">https://nvd.nist.gov/vuln/detail/CVE-2025-30152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/advisories/GHSA-hxg4-65p5-9w37</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin has an Order Manipulation Vulnerability after PayPal Checkout",
            "date_modified": "2025-03-20T18:59:45.000Z",
            "date_published": "2025-03-19T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A discovered vulnerability allows users to modify their shopping cart after completing the PayPal Checkout process and payment authorization. If a user initiates a PayPal transaction from a product page or the cart page and then returns to the order summary page, they can still manipulate the cart contents before finalizing the order. As a result, the order amount in Sylius may be higher than the amount actually captured by PayPal, leading to a scenario where merchants deliver products or services without full payment.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Users can exploit this flaw to receive products/services without paying the full amount.</li>\n<li>Merchants may suffer financial losses due to underpaid orders.</li>\n<li>Trust in the integrity of the payment process is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.2, 1.7.2, 2.0.2 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>PayPalOrderCompleteProcessor</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Processor;\n\nuse Sylius\\Bundle\\PayumBundle\\Model\\GatewayConfigInterface;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\n\nfinal class PayPalOrderCompleteProcessor\n{\n    public function __construct(private readonly PaymentStateManagerInterface $paymentStateManager) {\n    }\n\n    public function completePayPalOrder(OrderInterface $order): void\n    {\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n        if ($payment === null) {\n            return;\n        }\n\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        /** @var GatewayConfigInterface $gatewayConfig */\n        $gatewayConfig = $paymentMethod-&gt;getGatewayConfig();\n\n        if ($gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal') {\n            return;\n        }\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return;\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<h3 id=\"important\">IMPORTANT</h3>\n<p>For <code>PayPalPlugin 2.x</code> change:</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal'\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== SyliusPayPalExtension::PAYPAL_FACTORY_NAME\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderListener</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\EventListener\\Workflow;\n\nuse App\\Processor\\PayPalOrderCompleteProcessor;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class CompletePayPalOrderListener\n{\n    public function __construct(private readonly PayPalOrderCompleteProcessor $completeProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event-&gt;getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this-&gt;completeProcessor-&gt;completePayPalOrder($order);\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic (if you didn't have it already):</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">Sylius\\PayPalPlugin\\EventListener\\Workflow\\CompletePayPalOrderListener:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nSylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n\nSylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n        - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n        - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">sylius_paypal.listener.workflow.complete_paypal_order:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@sylius_paypal.processor.paypal_order_complete'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nsylius_paypal.processor.paypal_order_complete:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@sylius_paypal.manager.payment_state'\n\nsylius_paypal.payum.action.capture:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@sylius_paypal.api.cache_authorize_client'\n        - '@sylius_paypal.api.create_order'\n        - '@sylius_paypal.provider.uuid'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa\">https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30152\">https://nvd.nist.gov/vuln/detail/CVE-2025-30152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/advisories/GHSA-hxg4-65p5-9w37</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin has an Order Manipulation Vulnerability after PayPal Checkout",
            "date_modified": "2025-03-20T18:59:45.000Z",
            "date_published": "2025-03-19T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A discovered vulnerability allows users to modify their shopping cart after completing the PayPal Checkout process and payment authorization. If a user initiates a PayPal transaction from a product page or the cart page and then returns to the order summary page, they can still manipulate the cart contents before finalizing the order. As a result, the order amount in Sylius may be higher than the amount actually captured by PayPal, leading to a scenario where merchants deliver products or services without full payment.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Users can exploit this flaw to receive products/services without paying the full amount.</li>\n<li>Merchants may suffer financial losses due to underpaid orders.</li>\n<li>Trust in the integrity of the payment process is compromised.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in versions: 1.6.2, 1.7.2, 2.0.2 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>PayPalOrderCompleteProcessor</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Processor;\n\nuse Sylius\\Bundle\\PayumBundle\\Model\\GatewayConfigInterface;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface;\n\nfinal class PayPalOrderCompleteProcessor\n{\n    public function __construct(private readonly PaymentStateManagerInterface $paymentStateManager) {\n    }\n\n    public function completePayPalOrder(OrderInterface $order): void\n    {\n        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);\n        if ($payment === null) {\n            return;\n        }\n\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n        /** @var GatewayConfigInterface $gatewayConfig */\n        $gatewayConfig = $paymentMethod-&gt;getGatewayConfig();\n\n        if ($gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal') {\n            return;\n        }\n\n        try {\n            $this-&gt;verify($payment);\n        } catch (\\Exception) {\n            $this-&gt;paymentStateManager-&gt;cancel($payment);\n\n            return;\n        }\n\n        $this-&gt;paymentStateManager-&gt;complete($payment);\n    }\n\n    private function verify(PaymentInterface $payment): void\n    {\n        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);\n\n        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {\n            throw new \\Exception();\n        }\n    }\n\n    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int\n    {\n        $details = $payment-&gt;getDetails();\n\n        return $details['payment_amount'] ?? 0;\n    }\n}\n</code></pre>\n<h3 id=\"important\">IMPORTANT</h3>\n<p>For <code>PayPalPlugin 2.x</code> change:</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== 'sylius.pay_pal'\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-php\">$gatewayConfig-&gt;getFactoryName() !== SyliusPayPalExtension::PAYPAL_FACTORY_NAME\n</code></pre>\n<p>Also there is a need to overwrite <code>CompletePayPalOrderListener</code> with modified logic:</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\EventListener\\Workflow;\n\nuse App\\Processor\\PayPalOrderCompleteProcessor;\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class CompletePayPalOrderListener\n{\n    public function __construct(private readonly PayPalOrderCompleteProcessor $completeProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event-&gt;getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this-&gt;completeProcessor-&gt;completePayPalOrder($order);\n    }\n}\n</code></pre>\n<p>And to overwrite <code>CaptureAction</code> with modified logic (if you didn't have it already):</p>\n<pre><code class=\"language-php\">&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Payum\\Action;\n\nuse Payum\\Core\\Action\\ActionInterface;\nuse Payum\\Core\\Exception\\RequestNotSupportedException;\nuse Payum\\Core\\Request\\Capture;\nuse Sylius\\Component\\Core\\Model\\PaymentInterface;\nuse Sylius\\Component\\Core\\Model\\PaymentMethodInterface;\nuse Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface;\nuse Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface;\nuse Sylius\\PayPalPlugin\\Payum\\Action\\StatusAction;\nuse Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface;\n\nfinal class CaptureAction implements ActionInterface\n{\n    public function __construct(\n        private CacheAuthorizeClientApiInterface $authorizeClientApi,\n        private CreateOrderApiInterface $createOrderApi,\n        private UuidProviderInterface $uuidProvider,\n    ) {\n    }\n\n    /** @param Capture $request */\n    public function execute($request): void\n    {\n        RequestNotSupportedException::assertSupports($this, $request);\n\n        /** @var PaymentInterface $payment */\n        $payment = $request-&gt;getModel();\n        /** @var PaymentMethodInterface $paymentMethod */\n        $paymentMethod = $payment-&gt;getMethod();\n\n        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);\n\n        $referenceId = $this-&gt;uuidProvider-&gt;provide();\n        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);\n\n        if ($content['status'] === 'CREATED') {\n            $payment-&gt;setDetails([\n                'status' =&gt; StatusAction::STATUS_CAPTURED,\n                'paypal_order_id' =&gt; $content['id'],\n                'reference_id' =&gt; $referenceId,\n                'payment_amount' =&gt; $payment-&gt;getAmount(),\n            ]);\n        }\n    }\n\n    public function supports($request): bool\n    {\n        return\n            $request instanceof Capture &amp;&amp;\n            $request-&gt;getModel() instanceof PaymentInterface\n        ;\n    }\n}\n</code></pre>\n<p>After that, register services in the container when using PayPal 1.x:</p>\n<pre><code class=\"language-yaml\">Sylius\\PayPalPlugin\\EventListener\\Workflow\\CompletePayPalOrderListener:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nSylius\\PayPalPlugin\\Processor\\PayPalOrderCompleteProcessor:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Manager\\PaymentStateManagerInterface'\n\nSylius\\PayPalPlugin\\Payum\\Action\\CaptureAction:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@Sylius\\PayPalPlugin\\Api\\CacheAuthorizeClientApiInterface'\n        - '@Sylius\\PayPalPlugin\\Api\\CreateOrderApiInterface'\n        - '@Sylius\\PayPalPlugin\\Provider\\UuidProviderInterface'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }\n</code></pre>\n<p>or when using PayPal 2.x:</p>\n<pre><code class=\"language-yaml\">sylius_paypal.listener.workflow.complete_paypal_order:\n    class: App\\EventListener\\Workflow\\CompletePayPalOrderListener\n    public: true\n    arguments:\n        - '@sylius_paypal.processor.paypal_order_complete'\n    tags: \n        - { name: 'kernel.event_listener', event: 'workflow.sylius_order_checkout.completed.complete', priority: 100 }\n    \nsylius_paypal.processor.paypal_order_complete:\n    class: App\\Processor\\PayPalOrderCompleteProcessor\n    public: true\n    arguments:\n        - '@sylius_paypal.manager.payment_state'\n\nsylius_paypal.payum.action.capture:\n    class: App\\Payum\\Action\\CaptureAction\n    public: true\n    arguments:\n        - '@sylius_paypal.api.cache_authorize_client'\n        - '@sylius_paypal.api.create_order'\n        - '@sylius_paypal.provider.uuid'\n    tags:\n        - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/Sylius/Sylius/issues\">Sylius issues</a></li>\n<li>Email us at <a href=\"mailto:security@sylius.com\">security@sylius.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-hxg4-65p5-9w37</a></li>\n<li><a href=\"https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa\">https://github.com/Sylius/PayPalPlugin/commit/5613df827a6d4fc50862229295976200a68e97aa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30152\">https://nvd.nist.gov/vuln/detail/CVE-2025-30152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxg4-65p5-9w37\">https://github.com/advisories/GHSA-hxg4-65p5-9w37</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37",
            "title": "[sylius/paypal-plugin] Sylius PayPal Plugin has an Order Manipulation Vulnerability after PayPal Checkout",
            "date_modified": "2025-03-20T18:59:45.000Z",
            "date_published": "2025-03-19T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxg4-65p5-9w37"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Regardless of the role or privileges, no user should be able to inject malicious JavaScript (JS) scripts into the body HTML. an XSS (Cross-Site Scripting) vulnerability, specifically a Stored XSS, which affects all pages of the website. Once the JS script is embedded in the body HTML, the XSS will trigger on any page a victim visits, such as the about, blog, contact, or any other pages, except for the panel.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers to inject malicious JS or HTML through a crafted payload into the vulnerable spot, achieving persistence and attacking numerous visitors or anyone accessing the website. The attack can be widespread and affect many users because the malicious JS will execute on every page, unlike an injection on a specific page (e.g., injecting on the About page would only affect that page). In this case, a single injection point leads to the execution of the malicious JS on all pages.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/releases/tag/1.13.1\"><strong>Formwork 1.13.1</strong></a> has been released with a patch that solves this vulnerability by escaping all metadata attributes.</li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/f5312015a5a5e89b95ef2bd07e496f8474d579c5\"><strong>Formwork 2.x</strong> (f531201)</a> also escapes metadata attributes.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>An attackers (requires administrator privilege) to execute arbitrary web scripts by modifying site options via /panel/options/site. This type of attack is suitable for persistence, affecting visitors across all pages (except the dashboard).</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Log in with an Administrator user account.</li>\n<li>Navigate to /panel/options/site/.</li>\n<li>Inject the JS script by adding to the description field.</li>\n<li>Simulate a victim who is not a site member visiting the website. You will notice that the JS script executes on every page they vis</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/1c40be24-3367-4c80-bb44-9db64ef88970\">\n<img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/68dd5bff-9db1-441b-a3b3-a0c014565f59\">\n<img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/3cd84c39-9b44-49d0-8b6a-6c8aeda7e49f\">\n<img alt=\"image\" src=\"https://github.com/getformwork/formwork/assets/170840940/f45afd87-80e9-4cf1-8121-bb4e121849c9\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/security/advisories/GHSA-5pxr-7m4j-jjc6\">https://github.com/getformwork/formwork/security/advisories/GHSA-5pxr-7m4j-jjc6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37160\">https://nvd.nist.gov/vuln/detail/CVE-2024-37160</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/9d471204f7ebb51c3c27131581c2b834315b5e0b\">https://github.com/getformwork/formwork/commit/9d471204f7ebb51c3c27131581c2b834315b5e0b</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/f5312015a5a5e89b95ef2bd07e496f8474d579c5\">https://github.com/getformwork/formwork/commit/f5312015a5a5e89b95ef2bd07e496f8474d579c5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5pxr-7m4j-jjc6\">https://github.com/advisories/GHSA-5pxr-7m4j-jjc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5pxr-7m4j-jjc6",
            "title": "[getformwork/formwork] Cross-site scripting (XSS) vulnerability in Description metadata",
            "date_modified": "2025-03-19T14:49:47.000Z",
            "date_published": "2024-06-07T19:37:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5pxr-7m4j-jjc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f\">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>\n<li><a href=\"https://typo3.org/security/advisory/typo3-ext-sa-2025-003\">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmgw-24w6-9v82\">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82",
            "title": "[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-19T02:15:30.000Z",
            "date_published": "2025-03-19T02:15:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmgw-24w6-9v82"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}