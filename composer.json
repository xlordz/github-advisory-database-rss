{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/symfony] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/symfony] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/symfony] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Deserialization of untrusted data from the <code>mimes</code> parameter could lead to remote code execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in 3.0.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Not needed, a <code>composer update</code> will solve it in a non-breaking way.</p>\n<h3 id=\"references\">References</h3>\n<p>Reported responsibly Vladislav Gladkiy at <a href=\"https://www.ptsecurity.com/ww-en/\">Positive Technologies</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2\">https://github.com/Laravel-Backpack/FileManager/security/advisories/GHSA-8237-957h-h2c2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52306\">https://nvd.nist.gov/vuln/detail/CVE-2024-52306</a></li>\n<li><a href=\"https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b\">https://github.com/Laravel-Backpack/FileManager/commit/2830498b85e05fb3c92179053b4d7c4a0fdb880b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8237-957h-h2c2\">https://github.com/advisories/GHSA-8237-957h-h2c2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8237-957h-h2c2",
            "title": "[backpack/filemanager] FileManager Deserialization of Untrusted Data vulnerability",
            "date_modified": "2024-11-13T18:43:03.000Z",
            "date_published": "2024-11-13T18:43:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8237-957h-h2c2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Moodle. Additional checks are required to ensure users with permission to view badge recipients can only access lists of those they are intended to have access to.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48900\">https://nvd.nist.gov/vuln/detail/CVE-2024-48900</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2318818\">https://bugzilla.redhat.com/show_bug.cgi?id=2318818</a></li>\n<li><a href=\"https://moodle.org/mod/forum/discuss.php?d=462879\">https://moodle.org/mod/forum/discuss.php?d=462879</a></li>\n<li><a href=\"http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-83178\">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-83178</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8r3-2v89-j6r5\">https://github.com/advisories/GHSA-g8r3-2v89-j6r5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8r3-2v89-j6r5",
            "title": "[moodle/moodle] Moodle IDOR when accessing list of badge recipients",
            "date_modified": "2024-11-13T18:38:38.000Z",
            "date_published": "2024-11-13T15:31:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8r3-2v89-j6r5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A vulnerability exists in the Create User process, allowing the creation of a new admin account with an option to upload a profile image. An attacker can upload a malicious SVG file containing an embedded script. When the profile image is accessed, the embedded script executes, leading to the potential theft of session cookies.</p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Login as admin</li>\n<li>Go to Create User</li>\n<li>Fill up everything in the registration form then upload SVG image as a profile picture</li>\n<li>In SVG image, add script tag to prepare for XSS attack</li>\n<li>Complete the Create User process</li>\n<li>Right click at the image to obtain image URL address</li>\n<li>XSS triggered</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p>The below link is a private YouTube video for PoC. \n<a href=\"https://youtu.be/5j8owD0--1A\">https://youtu.be/5j8owD0--1A</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>The stored XSS can lead to session hijacking and privilege escalation, effectively bypassing any CSRF protections in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/unopim/unopim/security/advisories/GHSA-cgr4-c233-h733\">https://github.com/unopim/unopim/security/advisories/GHSA-cgr4-c233-h733</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52305\">https://nvd.nist.gov/vuln/detail/CVE-2024-52305</a></li>\n<li><a href=\"https://github.com/unopim/unopim/commit/9a0da7a0892c60f58df2351b5a9498dcb4cb8b7a\">https://github.com/unopim/unopim/commit/9a0da7a0892c60f58df2351b5a9498dcb4cb8b7a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cgr4-c233-h733\">https://github.com/advisories/GHSA-cgr4-c233-h733</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cgr4-c233-h733",
            "title": "[unopim/unopim] UnoPim Stored XSS : Cookie hijacking through Create User function",
            "date_modified": "2024-11-13T18:37:16.000Z",
            "date_published": "2024-11-13T18:37:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cgr4-c233-h733"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When consuming a persisted remember-me cookie, Symfony does not check if the username persisted in the database matches the username attached with the cookie, leading to authentication bypass.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>PersistentRememberMeHandler</code> class now ensures the submitted username is the cookie owner.</p>\n<p>The patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">here</a> for branch 5.4.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Moritz Rauch - Pentryx AG for reporting the issue and Jérémy Derussé for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-51996\">https://symfony.com/cve-2024-51996</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51996\">https://nvd.nist.gov/vuln/detail/CVE-2024-51996</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/advisories/GHSA-cg23-qf8f-62rr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr",
            "title": "[symfony/security-http] Symfony has an Authentication Bypass via RememberMe",
            "date_modified": "2024-11-14T23:55:43.000Z",
            "date_published": "2024-11-13T18:29:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When consuming a persisted remember-me cookie, Symfony does not check if the username persisted in the database matches the username attached with the cookie, leading to authentication bypass.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>PersistentRememberMeHandler</code> class now ensures the submitted username is the cookie owner.</p>\n<p>The patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">here</a> for branch 5.4.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Moritz Rauch - Pentryx AG for reporting the issue and Jérémy Derussé for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-51996\">https://symfony.com/cve-2024-51996</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51996\">https://nvd.nist.gov/vuln/detail/CVE-2024-51996</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/advisories/GHSA-cg23-qf8f-62rr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr",
            "title": "[symfony/security-http] Symfony has an Authentication Bypass via RememberMe",
            "date_modified": "2024-11-14T23:55:43.000Z",
            "date_published": "2024-11-13T18:29:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When consuming a persisted remember-me cookie, Symfony does not check if the username persisted in the database matches the username attached with the cookie, leading to authentication bypass.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>PersistentRememberMeHandler</code> class now ensures the submitted username is the cookie owner.</p>\n<p>The patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">here</a> for branch 5.4.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Moritz Rauch - Pentryx AG for reporting the issue and Jérémy Derussé for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/symfony/symfony/security/advisories/GHSA-cg23-qf8f-62rr</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a\">https://github.com/symfony/symfony/commit/81354d392c5f0b7a52bcbd729d6f82501e94135a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-http/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51996.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-51996\">https://symfony.com/cve-2024-51996</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51996\">https://nvd.nist.gov/vuln/detail/CVE-2024-51996</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cg23-qf8f-62rr\">https://github.com/advisories/GHSA-cg23-qf8f-62rr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr",
            "title": "[symfony/security-http] Symfony has an Authentication Bypass via RememberMe",
            "date_modified": "2024-11-14T23:55:43.000Z",
            "date_published": "2024-11-13T18:29:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cg23-qf8f-62rr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/http-client] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/http-client] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>When using the <code>NoPrivateNetworkHttpClient</code>, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The <code>NoPrivateNetworkHttpClient</code> now filters blocked IPs earlier to prevent such leaks.</p>\n<p>The fisrt patch for this issue is available <a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">here</a> for branch 5.4.</p>\n<p>The second one is available <a href=\"https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa\">here</a> for branch 5.4 also.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Linus Karlsson and Chris Smith for reporting the issue and Nicolas Grekas for providing the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/symfony/symfony/security/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n<li><a href=\"https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b\">https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-client/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50342.yaml</a></li>\n<li><a href=\"https://symfony.com/cve-2024-50342\">https://symfony.com/cve-2024-50342</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50342\">https://nvd.nist.gov/vuln/detail/CVE-2024-50342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c3x-r3wp-mgxm\">https://github.com/advisories/GHSA-9c3x-r3wp-mgxm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm",
            "title": "[symfony/http-client] Symfony allows internal address and port enumeration by NoPrivateNetworkHttpClient",
            "date_modified": "2024-11-13T18:51:05.000Z",
            "date_published": "2024-11-06T15:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c3x-r3wp-mgxm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Missing <code>normalizePath</code> in the function <code>FileHelper::absolutePath</code> could lead to Remote Code Execution on the server via twig SSTI.</p>\n<p><code>(Post-authentication, ALLOW_ADMIN_CHANGES=true)</code></p>\n<h3 id=\"details\">Details</h3>\n<p>Note: This is a sequel to <a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-44wr-rmwq-3phw\">CVE-2023-40035</a></p>\n<p>In <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/helpers/FileHelper.php#L106-L137\"><code>src/helpers/FileHelper.php#L106-L137</code></a>, the function <code>absolutePath</code> returned <code>$from . $ds . $to</code> without path normalization:</p>\n<pre><code class=\"language-php\">/**\n * Returns an absolute path based on a source location or the current working directory.\n *\n * @param string $to The target path.\n * @param string|null $from The source location. Defaults to the current working directory.\n * @param string $ds the directory separator to be used in the normalized result. Defaults to `DIRECTORY_SEPARATOR`.\n * @return string\n * @since 4.3.5\n */\npublic static function absolutePath(\n    string $to,\n    ?string $from = null,\n    string $ds = DIRECTORY_SEPARATOR,\n): string {\n    $to = static::normalizePath($to, $ds);\n\n    // Already absolute?\n    if (\n        str_starts_with($to, $ds) ||\n        preg_match(sprintf('/^[A-Z]:%s/', preg_quote($ds, '/')), $to)\n    ) {\n        return $to;\n    }\n\n    if ($from === null) {\n        $from = FileHelper::normalizePath(getcwd(), $ds);\n    } else {\n        $from = static::absolutePath($from, ds: $ds);\n    }\n\n    return $from . $ds . $to;\n}\n</code></pre>\n<p>This could leads to multiple security risks, one of them is in <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/services/Security.php#L201-L220\"><code>src/services/Security.php#L201-L220</code></a> where <code>../templates/poc</code> is not considered a system dir.</p>\n<p>Let's see what happens after calling <code>isSystemDir(\"../templates/poc\")</code>:</p>\n<pre><code class=\"language-php\">/**\n * Returns whether the given file path is located within or above any system directories.\n *\n * @param string $path\n * @return bool\n * @since 5.4.2\n */\npublic function isSystemDir(string $path): bool // $path = \"../templates/poc\"\n{\n    $path = FileHelper::absolutePath($path, '/'); // $path = \"/var/www/html/web//../templates/poc\"\n\n    foreach (Craft::$app-&gt;getPath()-&gt;getSystemPaths() as $dir) {\n        $dir = FileHelper::absolutePath($dir, '/'); // $dir = \"/var/www/html/templates\"\n        if (str_starts_with(\"$path/\", \"$dir/\") || str_starts_with(\"$dir/\", \"$path/\")) { // if (false || false)\n            return true;\n        }\n    }\n\n    return false; // We're here!\n}\n</code></pre>\n<p>Now that the path <code>../templates/poc</code> can bypass <code>isSystemDir</code>, it will also bypass the function <code>validatePath</code> in <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/fs/Local.php#L124-L136\"><code>src/fs/Local.php#L124-L136</code></a>:</p>\n<pre><code class=\"language-php\">/**\n * @param string $attribute\n * @param array|null $params\n * @param InlineValidator $validator\n * @return void\n * @since 4.4.6\n */\npublic function validatePath(string $attribute, ?array $params, InlineValidator $validator): void\n{\n    if (Craft::$app-&gt;getSecurity()-&gt;isSystemDir($this-&gt;getRootPath())) {\n        $validator-&gt;addError($this, $attribute, Craft::t('app', 'Local filesystems cannot be located within or above system directories.'));\n    }\n}\n</code></pre>\n<p>We can now create a Local filesystem within the system directories, particularly in <code>/var/www/html/templates/poc</code></p>\n<p>Then create a new asset volume with that filesystem, upload a <code>poc.ttml</code> file with twig code and execute using a new route with template path <code>poc/poc.ttml</code></p>\n<p>Although craftcms does sandbox twig ssti, the list in <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/web/twig/Extension.php#L180-L268\">src/web/twig/Extension.php#L180-L268</a> is still incomplete.</p>\n<pre><code class=\"language-js\">{{['id'] has some 'system'}}\n{{['ls'] has every 'passthru'}}\n{{['cat /etc/passwd']|find('system')}}\n{{['id;pwd;ls -altr /']|find('passthru')}}\n</code></pre>\n<p>These payloads still work, see <a href=\"https://github.com/twigphp/Twig/blob/a3496d148b75e270065ed8f03758f7b09b3a9793/src/Extension/CoreExtension.php#L196-L247\">twigphp/Twig/src/Extension/CoreExtension.php#getFilters()</a> and <a href=\"https://github.com/twigphp/Twig/blob/a3496d148b75e270065ed8f03758f7b09b3a9793/src/Extension/CoreExtension.php#L291-L333\">twigphp/Twig/src/Extension/CoreExtension.php#getOperators()</a> for more informations.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Craft CMS was installed using <a href=\"https://craftcms.com/docs/4.x/installation.html#quick-start\">https://craftcms.com/docs/4.x/installation.html#quick-start</a></li>\n</ol>\n<pre><code class=\"language-sh\">mkdir craftcms &amp;&amp; cd craftcms\nddev config --project-type=craftcms --docroot=web --create-docroot\nddev composer create -y --no-scripts \"craftcms/craft\"\nddev craft install\nphp craft setup/security-key\nddev start\n</code></pre>\n<img src=\"https://github.com/user-attachments/assets/f8bcc22a-6ffd-40a5-81c6-c077fa4ce1d3\" alt=\"start\" width=\"1280\">\n\n<ol start=\"2\">\n<li>Create a new filesystem with base path <code>../templates/poc</code></li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/fe78e023-bd51-4fc1-a22e-dcfa5baf266b\" alt=\"filesystem\" width=\"1280\">\n\n<p>Notice that the <code>poc</code> directory was created</p>\n<img src=\"https://github.com/user-attachments/assets/ccc45ce8-8555-4aae-ae48-320a630e7d79\" alt=\"dir\" width=\"167\">\n\n<ol start=\"3\">\n<li>Create a new asset volume using the <code>poc</code> filesystem</li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/b5530766-11b4-4e45-ae58-82f81fc2db00\" alt=\"asset\" width=\"1280\">\n\n<p>Upload a <code>poc.ttml</code> file with RCE template code</p>\n<pre><code class=\"language-js\">{{'&lt;pre&gt;'}}\n{{ 8*8 }}\n{{['id'] has some 'system'}}\n{{['ls'] has every 'passthru'}}\n{{['cat /etc/passwd']|find('system')}}\n{{['id;pwd;ls -altr /']|find('passthru')}}\n</code></pre>\n<p>Note: <code>find</code> was added to twig <a href=\"https://github.com/twigphp/Twig/commit/4e262511930e408e4c7eda07b1c977f2ea98575c\">last month</a>. If you're running this poc on an older version of twig try removing the last 2 lines.</p>\n<img src=\"https://github.com/user-attachments/assets/63e65beb-2ede-4141-85d2-e7d21cd4b8ad\" alt=\"upload\" width=\"1280\">\n\n<p><img alt=\"ttml\" src=\"https://github.com/user-attachments/assets/9db8ca9b-25eb-4014-a7f5-4ece895b106d\"></p>\n<ol start=\"4\">\n<li>Create a new route <code>*</code> with template <code>poc/poc.ttml</code></li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/b92d9340-b6a5-40d8-a8e8-ddab5cfc9f21\" alt=\"route\" width=\"1280\">\n\n<ol start=\"5\">\n<li>This leads to Remote Code Execution on arbitrary route <code>/*</code></li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/19765f6c-1c28-4a0b-a89c-25f6f05ceca6\" alt=\"rce\" width=\"454\">\n\n<h3 id=\"remediation\">Remediation</h3>\n<pre><code class=\"language-diff\">diff --git a/src/helpers/FileHelper.php b/src/helpers/FileHelper.php\nindex 0c2da884a7..ac23ce556a 100644\n--- a/src/helpers/FileHelper.php\n+++ b/src/helpers/FileHelper.php\n@@ -133,7 +133,7 @@ class FileHelper extends \\yii\\helpers\\FileHelper\n             $from = static::absolutePath($from, ds: $ds);\n         }\n\n-        return $from . $ds . $to;\n+        return FileHelper::normalizePath($from . $ds . $to);\n     }\n\n     /**\n</code></pre>\n<p><img alt=\"fix_norm\" src=\"https://github.com/user-attachments/assets/4c8e5b4f-6216-416c-87a1-9b9fae033971\"></p>\n<p>See <a href=\"https://github.com/twigphp/Twig/blob/a3496d148b75e270065ed8f03758f7b09b3a9793/src/Extension/CoreExtension.php\">twigphp/Twig/src/Extension/CoreExtension.php</a> for updated filters and operators, a possible fix could look like:</p>\n<pre><code class=\"language-diff\">diff --git a/src/web/twig/Extension.php b/src/web/twig/Extension.php\nindex efff2d2412..756f452f8b 100644\n--- a/src/web/twig/Extension.php\n+++ b/src/web/twig/Extension.php\n@@ -225,6 +225,9 @@ class Extension extends AbstractExtension implements GlobalsInterface\n             new TwigFilter('lcfirst', [$this, 'lcfirstFilter']),\n             new TwigFilter('literal', [$this, 'literalFilter']),\n             new TwigFilter('map', [$this, 'mapFilter'], ['needs_environment' =&gt; true]),\n+            new TwigFilter('find', [$this, 'find'], ['needs_environment' =&gt; true]),\n+            new TwigFilter('has some' =&gt; ['precedence' =&gt; 20, 'class' =&gt; HasSomeBinary::class, 'associativity' =&gt; ExpressionParser::OPERATOR_LEFT]),\n+            new TwigFilter('has every' =&gt; ['precedence' =&gt; 20, 'class' =&gt; HasEveryBinary::class, 'associativity' =&gt; ExpressionParser::OPERATOR_LEFT]),\n             new TwigFilter('markdown', [$this, 'markdownFilter'], ['is_safe' =&gt; ['html']]),\n             new TwigFilter('md', [$this, 'markdownFilter'], ['is_safe' =&gt; ['html']]),\n             new TwigFilter('merge', [$this, 'mergeFilter']),\n</code></pre>\n<p><img alt=\"fix_ssti\" src=\"https://github.com/user-attachments/assets/5d9ce9be-022b-4853-a5f9-688b247cc27c\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Take control of vulnerable systems, Data exfiltrations, Malware execution, Pivoting, etc.</p>\n<p>Although the vulnerability is exploitable only in the authenticated users, configuration with <code>ALLOW_ADMIN_CHANGES=true</code>, there is still a potential security threat (Remote Code Execution)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-f3cw-hg6r-chfv\">https://github.com/craftcms/cms/security/advisories/GHSA-f3cw-hg6r-chfv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52293\">https://nvd.nist.gov/vuln/detail/CVE-2024-52293</a></li>\n<li><a href=\"https://github.com/craftcms/cms/commit/123e48a696de1e2f63ab519d4730eb3b87beaa58\">https://github.com/craftcms/cms/commit/123e48a696de1e2f63ab519d4730eb3b87beaa58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f3cw-hg6r-chfv\">https://github.com/advisories/GHSA-f3cw-hg6r-chfv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f3cw-hg6r-chfv",
            "title": "[craftcms/cms] Craft CMS vulnerable to Potential Remote Code Execution via missing path normalization & Twig SSTI",
            "date_modified": "2024-11-13T18:58:28.000Z",
            "date_published": "2024-11-13T14:16:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f3cw-hg6r-chfv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Missing <code>normalizePath</code> in the function <code>FileHelper::absolutePath</code> could lead to Remote Code Execution on the server via twig SSTI.</p>\n<p><code>(Post-authentication, ALLOW_ADMIN_CHANGES=true)</code></p>\n<h3 id=\"details\">Details</h3>\n<p>Note: This is a sequel to <a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-44wr-rmwq-3phw\">CVE-2023-40035</a></p>\n<p>In <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/helpers/FileHelper.php#L106-L137\"><code>src/helpers/FileHelper.php#L106-L137</code></a>, the function <code>absolutePath</code> returned <code>$from . $ds . $to</code> without path normalization:</p>\n<pre><code class=\"language-php\">/**\n * Returns an absolute path based on a source location or the current working directory.\n *\n * @param string $to The target path.\n * @param string|null $from The source location. Defaults to the current working directory.\n * @param string $ds the directory separator to be used in the normalized result. Defaults to `DIRECTORY_SEPARATOR`.\n * @return string\n * @since 4.3.5\n */\npublic static function absolutePath(\n    string $to,\n    ?string $from = null,\n    string $ds = DIRECTORY_SEPARATOR,\n): string {\n    $to = static::normalizePath($to, $ds);\n\n    // Already absolute?\n    if (\n        str_starts_with($to, $ds) ||\n        preg_match(sprintf('/^[A-Z]:%s/', preg_quote($ds, '/')), $to)\n    ) {\n        return $to;\n    }\n\n    if ($from === null) {\n        $from = FileHelper::normalizePath(getcwd(), $ds);\n    } else {\n        $from = static::absolutePath($from, ds: $ds);\n    }\n\n    return $from . $ds . $to;\n}\n</code></pre>\n<p>This could leads to multiple security risks, one of them is in <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/services/Security.php#L201-L220\"><code>src/services/Security.php#L201-L220</code></a> where <code>../templates/poc</code> is not considered a system dir.</p>\n<p>Let's see what happens after calling <code>isSystemDir(\"../templates/poc\")</code>:</p>\n<pre><code class=\"language-php\">/**\n * Returns whether the given file path is located within or above any system directories.\n *\n * @param string $path\n * @return bool\n * @since 5.4.2\n */\npublic function isSystemDir(string $path): bool // $path = \"../templates/poc\"\n{\n    $path = FileHelper::absolutePath($path, '/'); // $path = \"/var/www/html/web//../templates/poc\"\n\n    foreach (Craft::$app-&gt;getPath()-&gt;getSystemPaths() as $dir) {\n        $dir = FileHelper::absolutePath($dir, '/'); // $dir = \"/var/www/html/templates\"\n        if (str_starts_with(\"$path/\", \"$dir/\") || str_starts_with(\"$dir/\", \"$path/\")) { // if (false || false)\n            return true;\n        }\n    }\n\n    return false; // We're here!\n}\n</code></pre>\n<p>Now that the path <code>../templates/poc</code> can bypass <code>isSystemDir</code>, it will also bypass the function <code>validatePath</code> in <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/fs/Local.php#L124-L136\"><code>src/fs/Local.php#L124-L136</code></a>:</p>\n<pre><code class=\"language-php\">/**\n * @param string $attribute\n * @param array|null $params\n * @param InlineValidator $validator\n * @return void\n * @since 4.4.6\n */\npublic function validatePath(string $attribute, ?array $params, InlineValidator $validator): void\n{\n    if (Craft::$app-&gt;getSecurity()-&gt;isSystemDir($this-&gt;getRootPath())) {\n        $validator-&gt;addError($this, $attribute, Craft::t('app', 'Local filesystems cannot be located within or above system directories.'));\n    }\n}\n</code></pre>\n<p>We can now create a Local filesystem within the system directories, particularly in <code>/var/www/html/templates/poc</code></p>\n<p>Then create a new asset volume with that filesystem, upload a <code>poc.ttml</code> file with twig code and execute using a new route with template path <code>poc/poc.ttml</code></p>\n<p>Although craftcms does sandbox twig ssti, the list in <a href=\"https://github.com/craftcms/cms/blob/5e56c6d168524ed02f0620c9bc1c9750f5b94e3b/src/web/twig/Extension.php#L180-L268\">src/web/twig/Extension.php#L180-L268</a> is still incomplete.</p>\n<pre><code class=\"language-js\">{{['id'] has some 'system'}}\n{{['ls'] has every 'passthru'}}\n{{['cat /etc/passwd']|find('system')}}\n{{['id;pwd;ls -altr /']|find('passthru')}}\n</code></pre>\n<p>These payloads still work, see <a href=\"https://github.com/twigphp/Twig/blob/a3496d148b75e270065ed8f03758f7b09b3a9793/src/Extension/CoreExtension.php#L196-L247\">twigphp/Twig/src/Extension/CoreExtension.php#getFilters()</a> and <a href=\"https://github.com/twigphp/Twig/blob/a3496d148b75e270065ed8f03758f7b09b3a9793/src/Extension/CoreExtension.php#L291-L333\">twigphp/Twig/src/Extension/CoreExtension.php#getOperators()</a> for more informations.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Craft CMS was installed using <a href=\"https://craftcms.com/docs/4.x/installation.html#quick-start\">https://craftcms.com/docs/4.x/installation.html#quick-start</a></li>\n</ol>\n<pre><code class=\"language-sh\">mkdir craftcms &amp;&amp; cd craftcms\nddev config --project-type=craftcms --docroot=web --create-docroot\nddev composer create -y --no-scripts \"craftcms/craft\"\nddev craft install\nphp craft setup/security-key\nddev start\n</code></pre>\n<img src=\"https://github.com/user-attachments/assets/f8bcc22a-6ffd-40a5-81c6-c077fa4ce1d3\" alt=\"start\" width=\"1280\">\n\n<ol start=\"2\">\n<li>Create a new filesystem with base path <code>../templates/poc</code></li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/fe78e023-bd51-4fc1-a22e-dcfa5baf266b\" alt=\"filesystem\" width=\"1280\">\n\n<p>Notice that the <code>poc</code> directory was created</p>\n<img src=\"https://github.com/user-attachments/assets/ccc45ce8-8555-4aae-ae48-320a630e7d79\" alt=\"dir\" width=\"167\">\n\n<ol start=\"3\">\n<li>Create a new asset volume using the <code>poc</code> filesystem</li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/b5530766-11b4-4e45-ae58-82f81fc2db00\" alt=\"asset\" width=\"1280\">\n\n<p>Upload a <code>poc.ttml</code> file with RCE template code</p>\n<pre><code class=\"language-js\">{{'&lt;pre&gt;'}}\n{{ 8*8 }}\n{{['id'] has some 'system'}}\n{{['ls'] has every 'passthru'}}\n{{['cat /etc/passwd']|find('system')}}\n{{['id;pwd;ls -altr /']|find('passthru')}}\n</code></pre>\n<p>Note: <code>find</code> was added to twig <a href=\"https://github.com/twigphp/Twig/commit/4e262511930e408e4c7eda07b1c977f2ea98575c\">last month</a>. If you're running this poc on an older version of twig try removing the last 2 lines.</p>\n<img src=\"https://github.com/user-attachments/assets/63e65beb-2ede-4141-85d2-e7d21cd4b8ad\" alt=\"upload\" width=\"1280\">\n\n<p><img alt=\"ttml\" src=\"https://github.com/user-attachments/assets/9db8ca9b-25eb-4014-a7f5-4ece895b106d\"></p>\n<ol start=\"4\">\n<li>Create a new route <code>*</code> with template <code>poc/poc.ttml</code></li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/b92d9340-b6a5-40d8-a8e8-ddab5cfc9f21\" alt=\"route\" width=\"1280\">\n\n<ol start=\"5\">\n<li>This leads to Remote Code Execution on arbitrary route <code>/*</code></li>\n</ol>\n<img src=\"https://github.com/user-attachments/assets/19765f6c-1c28-4a0b-a89c-25f6f05ceca6\" alt=\"rce\" width=\"454\">\n\n<h3 id=\"remediation\">Remediation</h3>\n<pre><code class=\"language-diff\">diff --git a/src/helpers/FileHelper.php b/src/helpers/FileHelper.php\nindex 0c2da884a7..ac23ce556a 100644\n--- a/src/helpers/FileHelper.php\n+++ b/src/helpers/FileHelper.php\n@@ -133,7 +133,7 @@ class FileHelper extends \\yii\\helpers\\FileHelper\n             $from = static::absolutePath($from, ds: $ds);\n         }\n\n-        return $from . $ds . $to;\n+        return FileHelper::normalizePath($from . $ds . $to);\n     }\n\n     /**\n</code></pre>\n<p><img alt=\"fix_norm\" src=\"https://github.com/user-attachments/assets/4c8e5b4f-6216-416c-87a1-9b9fae033971\"></p>\n<p>See <a href=\"https://github.com/twigphp/Twig/blob/a3496d148b75e270065ed8f03758f7b09b3a9793/src/Extension/CoreExtension.php\">twigphp/Twig/src/Extension/CoreExtension.php</a> for updated filters and operators, a possible fix could look like:</p>\n<pre><code class=\"language-diff\">diff --git a/src/web/twig/Extension.php b/src/web/twig/Extension.php\nindex efff2d2412..756f452f8b 100644\n--- a/src/web/twig/Extension.php\n+++ b/src/web/twig/Extension.php\n@@ -225,6 +225,9 @@ class Extension extends AbstractExtension implements GlobalsInterface\n             new TwigFilter('lcfirst', [$this, 'lcfirstFilter']),\n             new TwigFilter('literal', [$this, 'literalFilter']),\n             new TwigFilter('map', [$this, 'mapFilter'], ['needs_environment' =&gt; true]),\n+            new TwigFilter('find', [$this, 'find'], ['needs_environment' =&gt; true]),\n+            new TwigFilter('has some' =&gt; ['precedence' =&gt; 20, 'class' =&gt; HasSomeBinary::class, 'associativity' =&gt; ExpressionParser::OPERATOR_LEFT]),\n+            new TwigFilter('has every' =&gt; ['precedence' =&gt; 20, 'class' =&gt; HasEveryBinary::class, 'associativity' =&gt; ExpressionParser::OPERATOR_LEFT]),\n             new TwigFilter('markdown', [$this, 'markdownFilter'], ['is_safe' =&gt; ['html']]),\n             new TwigFilter('md', [$this, 'markdownFilter'], ['is_safe' =&gt; ['html']]),\n             new TwigFilter('merge', [$this, 'mergeFilter']),\n</code></pre>\n<p><img alt=\"fix_ssti\" src=\"https://github.com/user-attachments/assets/5d9ce9be-022b-4853-a5f9-688b247cc27c\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Take control of vulnerable systems, Data exfiltrations, Malware execution, Pivoting, etc.</p>\n<p>Although the vulnerability is exploitable only in the authenticated users, configuration with <code>ALLOW_ADMIN_CHANGES=true</code>, there is still a potential security threat (Remote Code Execution)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-f3cw-hg6r-chfv\">https://github.com/craftcms/cms/security/advisories/GHSA-f3cw-hg6r-chfv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52293\">https://nvd.nist.gov/vuln/detail/CVE-2024-52293</a></li>\n<li><a href=\"https://github.com/craftcms/cms/commit/123e48a696de1e2f63ab519d4730eb3b87beaa58\">https://github.com/craftcms/cms/commit/123e48a696de1e2f63ab519d4730eb3b87beaa58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f3cw-hg6r-chfv\">https://github.com/advisories/GHSA-f3cw-hg6r-chfv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f3cw-hg6r-chfv",
            "title": "[craftcms/cms] Craft CMS vulnerable to Potential Remote Code Execution via missing path normalization & Twig SSTI",
            "date_modified": "2024-11-13T18:58:28.000Z",
            "date_published": "2024-11-13T14:16:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f3cw-hg6r-chfv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By abusing the mail notification template it is possible to read arbitrary operating system files. </p>\n<h3 id=\"details\">Details</h3>\n<p>The <a href=\"https://craftcms.com/docs/3.x/dev/functions.html#dataurl\">dataUrl</a> function can be exploited if an attacker has write permissions on system notification templates. This function accepts an absolute file path, reads the file's content, and converts it into a Base64-encoded string. By embedding this function within a system notification template, the attacker can exfiltrate the Base64-encoded file content through a triggered system email notification. Once the email is received, the Base64 payload can be decoded, allowing the attacker to read arbitrary files on the server.</p>\n<p>Requirements:</p>\n<ul>\n<li>write permissions to system notification templates</li>\n<li>ability to trigger a corresponding system email</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Modify a template to contain the following twig template string:</li>\n</ol>\n<pre><code class=\"language-twig\">{{ dataUrl('/var/www/web/.env') }}\n</code></pre>\n<ol start=\"2\">\n<li>Trigger the corresponding notification email (e.g. by resetting a password)</li>\n<li>Receive the email and decode the base64 string</li>\n</ol>\n<p>Mail received:\n<img alt=\"Bildschirmfoto 2024-09-05 um 16 20 41\" src=\"https://github.com/user-attachments/assets/24dc5196-6847-4006-b7ef-8cd10d659c30\"></p>\n<p>Decoded string:\n<img alt=\"Bildschirmfoto 2024-09-05 um 16 28 24\" src=\"https://github.com/user-attachments/assets/1913a475-5277-49b9-9210-2f3fcd3b9bf1\"></p>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li><p>Exposure of Sensitive Information: Arbitrary file read can lead to the exposure of sensitive data such as configuration files (e.g., /etc/passwd, .env, config.php), which may contain credentials, API keys, or database passwords. This can provide the attacker with further access to the system or connected services.</p>\n</li>\n<li><p>Privilege Escalation: If the attacker is able to read files that contain privileged information, such as credentials for other systems or applications, they may be able to escalate their privileges beyond what the web admin role originally allowed, potentially gaining full control over the server or other related systems.</p>\n</li>\n<li><p>Server Compromise: Access to files like SSH keys, private certificates, or system configuration files can lead to the complete compromise of the underlying server. With this information, an attacker could remotely log in to the server or impersonate it in secure communications.</p>\n</li>\n<li><p>Exfiltration of User Data: The ability to read arbitrary files may allow an attacker to access user data, such as stored passwords, session tokens, or private information (like uploaded files or logs), leading to a breach of confidentiality and violating privacy regulations (e.g., GDPR).</p>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-cw6g-qmjq-6w2w\">https://github.com/craftcms/cms/security/advisories/GHSA-cw6g-qmjq-6w2w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52292\">https://nvd.nist.gov/vuln/detail/CVE-2024-52292</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cw6g-qmjq-6w2w\">https://github.com/advisories/GHSA-cw6g-qmjq-6w2w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cw6g-qmjq-6w2w",
            "title": "[craftcms/cms] Craft CMS Arbitrary System File Read",
            "date_modified": "2024-11-13T18:58:36.000Z",
            "date_published": "2024-11-13T14:15:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cw6g-qmjq-6w2w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By abusing the mail notification template it is possible to read arbitrary operating system files. </p>\n<h3 id=\"details\">Details</h3>\n<p>The <a href=\"https://craftcms.com/docs/3.x/dev/functions.html#dataurl\">dataUrl</a> function can be exploited if an attacker has write permissions on system notification templates. This function accepts an absolute file path, reads the file's content, and converts it into a Base64-encoded string. By embedding this function within a system notification template, the attacker can exfiltrate the Base64-encoded file content through a triggered system email notification. Once the email is received, the Base64 payload can be decoded, allowing the attacker to read arbitrary files on the server.</p>\n<p>Requirements:</p>\n<ul>\n<li>write permissions to system notification templates</li>\n<li>ability to trigger a corresponding system email</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Modify a template to contain the following twig template string:</li>\n</ol>\n<pre><code class=\"language-twig\">{{ dataUrl('/var/www/web/.env') }}\n</code></pre>\n<ol start=\"2\">\n<li>Trigger the corresponding notification email (e.g. by resetting a password)</li>\n<li>Receive the email and decode the base64 string</li>\n</ol>\n<p>Mail received:\n<img alt=\"Bildschirmfoto 2024-09-05 um 16 20 41\" src=\"https://github.com/user-attachments/assets/24dc5196-6847-4006-b7ef-8cd10d659c30\"></p>\n<p>Decoded string:\n<img alt=\"Bildschirmfoto 2024-09-05 um 16 28 24\" src=\"https://github.com/user-attachments/assets/1913a475-5277-49b9-9210-2f3fcd3b9bf1\"></p>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li><p>Exposure of Sensitive Information: Arbitrary file read can lead to the exposure of sensitive data such as configuration files (e.g., /etc/passwd, .env, config.php), which may contain credentials, API keys, or database passwords. This can provide the attacker with further access to the system or connected services.</p>\n</li>\n<li><p>Privilege Escalation: If the attacker is able to read files that contain privileged information, such as credentials for other systems or applications, they may be able to escalate their privileges beyond what the web admin role originally allowed, potentially gaining full control over the server or other related systems.</p>\n</li>\n<li><p>Server Compromise: Access to files like SSH keys, private certificates, or system configuration files can lead to the complete compromise of the underlying server. With this information, an attacker could remotely log in to the server or impersonate it in secure communications.</p>\n</li>\n<li><p>Exfiltration of User Data: The ability to read arbitrary files may allow an attacker to access user data, such as stored passwords, session tokens, or private information (like uploaded files or logs), leading to a breach of confidentiality and violating privacy regulations (e.g., GDPR).</p>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-cw6g-qmjq-6w2w\">https://github.com/craftcms/cms/security/advisories/GHSA-cw6g-qmjq-6w2w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52292\">https://nvd.nist.gov/vuln/detail/CVE-2024-52292</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cw6g-qmjq-6w2w\">https://github.com/advisories/GHSA-cw6g-qmjq-6w2w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cw6g-qmjq-6w2w",
            "title": "[craftcms/cms] Craft CMS Arbitrary System File Read",
            "date_modified": "2024-11-13T18:58:36.000Z",
            "date_published": "2024-11-13T14:15:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cw6g-qmjq-6w2w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A vulnerability in CraftCMS allows an attacker to bypass local file system validation by utilizing a double <code>file://</code> scheme (e.g., <code>file://file:////</code>). This enables the attacker to specify sensitive folders as the file system, leading to potential file overwriting through malicious uploads, unauthorized access to sensitive files, and, under certain conditions, remote code execution (RCE) via Server-Side Template Injection (SSTI) payloads.</p>\n<p>Note that this will only work if you have an authenticated administrator account with <a href=\"https://craftcms.com/docs/5.x/reference/config/general.html#allowadminchanges\">allowAdminChanges enabled</a>.</p>\n<p><a href=\"https://craftcms.com/knowledge-base/securing-craft#set-allowAdminChanges-to-false-in-production\">https://craftcms.com/knowledge-base/securing-craft#set-allowAdminChanges-to-false-in-production</a></p>\n<h3 id=\"details\">Details</h3>\n<p>The issue lies in line 57 of <code>cms/src/helpers/FileHelper.php</code>, it only removes <code>file://</code> on the most left. It is trivial to bypass this sanitization by adding 2 <code>file://</code>, e.g. <code>file://file:////</code>.</p>\n<pre><code class=\"language-php\">    public static function normalizePath($path, $ds = DIRECTORY_SEPARATOR): string\n    {\n        // Remove any file protocol wrappers\n        $path = StringHelper::removeLeft($path, 'file://');\n\n        // Is this a UNC network share path?\n        $isUnc = (str_starts_with($path, '//') || str_starts_with($path, '\\\\\\\\'));\n\n        // Normalize the path\n        $path = parent::normalizePath($path, $ds);\n\n        // If it is UNC, add those slashes back in front\n        if ($isUnc) {\n            $path = $ds . $ds . ltrim($path, $ds);\n        }\n\n        return $path;\n    }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Sign in with an admin account and navigate to <code>Settings → Assets</code>, then create a new volume.</li>\n<li>n the Asset Filesystem section, create a new file system and set the Base Path to <code>file://file:////vendor</code>.\nWithout the prefix, the selection fails.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/1.png\">\nWith the double <code>file://</code> prefix, the selection succeeds.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/2.png\"></li>\n<li>Access Assets from the left navigation bar, then upload a file into this volume.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/3.png\"></li>\n<li>The file is successfully uploaded and stored in the sensitive folder specified (e.g., <code>/vendor</code>).\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/4.png\"></li>\n<li>SSTI payloads can be uploaded to <code>/templates</code> folder, though full code execution was not achieved during testing, some payloads were still successful, leading to sensitive information disclosure, among other potential impacts.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/7306f23f208e8e8dff48d65a0dc02dc.png\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>Attackers who compromise an admin account(The admin user is not equal to the server owner) can exploit this flaw to assign sensitive folders as the base path of the filesystem. For instance, if the path <code>/templates</code> is specified (e.g., <code>file://file:////var/www/html/templates</code>), the attacker could upload SSTI payloads. While CraftCMS includes strict SSTI input sanitization, RCE may still be possible if the attacker can craft a valid payload, as seen in similar vulnerabilities (e.g., <a href=\"https://github.com/advisories/GHSA-44wr-rmwq-3phw\">GHSA-44wr-rmwq-3phw</a>).</p>\n<p>Additionally, attackers can upload tampered files to overwrite critical web application files. By enabling public URLs for files in the specified filesystem, they can also retrieve sensitive files (e.g., configuration files from the local file system).</p>\n<p>Although the vulnerability is exploitable only in the authenticated users, configuration with <code>ALLOW_ADMIN_CHANGES=true</code>, there is still a potential security threat.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-jrh5-vhr9-qh7q\">https://github.com/craftcms/cms/security/advisories/GHSA-jrh5-vhr9-qh7q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52291\">https://nvd.nist.gov/vuln/detail/CVE-2024-52291</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jrh5-vhr9-qh7q\">https://github.com/advisories/GHSA-jrh5-vhr9-qh7q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jrh5-vhr9-qh7q",
            "title": "[craftcms/cms] Local File System Validation Bypass Leading to File Overwrite, Sensitive File Access, and Potential Code Execution",
            "date_modified": "2024-11-13T18:58:33.000Z",
            "date_published": "2024-11-13T14:12:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jrh5-vhr9-qh7q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A vulnerability in CraftCMS allows an attacker to bypass local file system validation by utilizing a double <code>file://</code> scheme (e.g., <code>file://file:////</code>). This enables the attacker to specify sensitive folders as the file system, leading to potential file overwriting through malicious uploads, unauthorized access to sensitive files, and, under certain conditions, remote code execution (RCE) via Server-Side Template Injection (SSTI) payloads.</p>\n<p>Note that this will only work if you have an authenticated administrator account with <a href=\"https://craftcms.com/docs/5.x/reference/config/general.html#allowadminchanges\">allowAdminChanges enabled</a>.</p>\n<p><a href=\"https://craftcms.com/knowledge-base/securing-craft#set-allowAdminChanges-to-false-in-production\">https://craftcms.com/knowledge-base/securing-craft#set-allowAdminChanges-to-false-in-production</a></p>\n<h3 id=\"details\">Details</h3>\n<p>The issue lies in line 57 of <code>cms/src/helpers/FileHelper.php</code>, it only removes <code>file://</code> on the most left. It is trivial to bypass this sanitization by adding 2 <code>file://</code>, e.g. <code>file://file:////</code>.</p>\n<pre><code class=\"language-php\">    public static function normalizePath($path, $ds = DIRECTORY_SEPARATOR): string\n    {\n        // Remove any file protocol wrappers\n        $path = StringHelper::removeLeft($path, 'file://');\n\n        // Is this a UNC network share path?\n        $isUnc = (str_starts_with($path, '//') || str_starts_with($path, '\\\\\\\\'));\n\n        // Normalize the path\n        $path = parent::normalizePath($path, $ds);\n\n        // If it is UNC, add those slashes back in front\n        if ($isUnc) {\n            $path = $ds . $ds . ltrim($path, $ds);\n        }\n\n        return $path;\n    }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Sign in with an admin account and navigate to <code>Settings → Assets</code>, then create a new volume.</li>\n<li>n the Asset Filesystem section, create a new file system and set the Base Path to <code>file://file:////vendor</code>.\nWithout the prefix, the selection fails.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/1.png\">\nWith the double <code>file://</code> prefix, the selection succeeds.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/2.png\"></li>\n<li>Access Assets from the left navigation bar, then upload a file into this volume.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/3.png\"></li>\n<li>The file is successfully uploaded and stored in the sensitive folder specified (e.g., <code>/vendor</code>).\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/4.png\"></li>\n<li>SSTI payloads can be uploaded to <code>/templates</code> folder, though full code execution was not achieved during testing, some payloads were still successful, leading to sensitive information disclosure, among other potential impacts.\n <img alt=\"alt text\" src=\"https://winslow1984.com/uploads/images/gallery/2024-09/7306f23f208e8e8dff48d65a0dc02dc.png\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>Attackers who compromise an admin account(The admin user is not equal to the server owner) can exploit this flaw to assign sensitive folders as the base path of the filesystem. For instance, if the path <code>/templates</code> is specified (e.g., <code>file://file:////var/www/html/templates</code>), the attacker could upload SSTI payloads. While CraftCMS includes strict SSTI input sanitization, RCE may still be possible if the attacker can craft a valid payload, as seen in similar vulnerabilities (e.g., <a href=\"https://github.com/advisories/GHSA-44wr-rmwq-3phw\">GHSA-44wr-rmwq-3phw</a>).</p>\n<p>Additionally, attackers can upload tampered files to overwrite critical web application files. By enabling public URLs for files in the specified filesystem, they can also retrieve sensitive files (e.g., configuration files from the local file system).</p>\n<p>Although the vulnerability is exploitable only in the authenticated users, configuration with <code>ALLOW_ADMIN_CHANGES=true</code>, there is still a potential security threat.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/craftcms/cms/security/advisories/GHSA-jrh5-vhr9-qh7q\">https://github.com/craftcms/cms/security/advisories/GHSA-jrh5-vhr9-qh7q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52291\">https://nvd.nist.gov/vuln/detail/CVE-2024-52291</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jrh5-vhr9-qh7q\">https://github.com/advisories/GHSA-jrh5-vhr9-qh7q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jrh5-vhr9-qh7q",
            "title": "[craftcms/cms] Local File System Validation Bypass Leading to File Overwrite, Sensitive File Access, and Potential Code Execution",
            "date_modified": "2024-11-13T18:58:33.000Z",
            "date_published": "2024-11-13T14:12:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jrh5-vhr9-qh7q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"description\">Description</h2>\n<p>When the <code>register_argc_argv php</code> directive is set to <code>on</code> , and users call any URL with a special crafted query string, they are able to change the environment used by the framework when handling the request.</p>\n<h2 id=\"resolution\">Resolution</h2>\n<p>The framework now ignores argv values for environment detection on non-cli SAPIs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/laravel/framework/security/advisories/GHSA-gv7v-rgg6-548h\">https://github.com/laravel/framework/security/advisories/GHSA-gv7v-rgg6-548h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52301\">https://nvd.nist.gov/vuln/detail/CVE-2024-52301</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/laravel/framework/CVE-2024-52301.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/laravel/framework/CVE-2024-52301.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gv7v-rgg6-548h\">https://github.com/advisories/GHSA-gv7v-rgg6-548h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gv7v-rgg6-548h",
            "title": "[laravel/framework] Laravel environment manipulation via query string",
            "date_modified": "2024-11-15T01:00:35.000Z",
            "date_published": "2024-11-12T22:08:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gv7v-rgg6-548h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"description\">Description</h2>\n<p>When the <code>register_argc_argv php</code> directive is set to <code>on</code> , and users call any URL with a special crafted query string, they are able to change the environment used by the framework when handling the request.</p>\n<h2 id=\"resolution\">Resolution</h2>\n<p>The framework now ignores argv values for environment detection on non-cli SAPIs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/laravel/framework/security/advisories/GHSA-gv7v-rgg6-548h\">https://github.com/laravel/framework/security/advisories/GHSA-gv7v-rgg6-548h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52301\">https://nvd.nist.gov/vuln/detail/CVE-2024-52301</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/laravel/framework/CVE-2024-52301.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/laravel/framework/CVE-2024-52301.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gv7v-rgg6-548h\">https://github.com/advisories/GHSA-gv7v-rgg6-548h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gv7v-rgg6-548h",
            "title": "[laravel/framework] Laravel environment manipulation via query string",
            "date_modified": "2024-11-15T01:00:35.000Z",
            "date_published": "2024-11-12T22:08:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gv7v-rgg6-548h"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}