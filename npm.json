{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Improper sanitization of the value of the 'href' and 'xlink:href' attributes in '<img>' SVG elements in AngularJS allows attackers to bypass common image source restrictions. This can lead to a form of  Content Spoofing <a href=\"https://owasp.org/www-community/attacks/Content_Spoofing\">https://owasp.org/www-community/attacks/Content_Spoofing</a> &nbsp;and also negatively affect the application's performance and behavior by using too large or slow-to-load images.</p>\n<p>This issue affects all versions of AngularJS.</p>\n<p>Note:\nThe AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href=\"https://docs.angularjs.org/misc/version-support-status\">https://docs.angularjs.org/misc/version-support-status</a> .</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0716\">https://nvd.nist.gov/vuln/detail/CVE-2025-0716</a></li>\n<li><a href=\"https://codepen.io/herodevs/pen/qEWQmpd/a86a0d29310e12c7a3756768e6c7b915\">https://codepen.io/herodevs/pen/qEWQmpd/a86a0d29310e12c7a3756768e6c7b915</a></li>\n<li><a href=\"https://www.herodevs.com/vulnerability-directory/cve-2025-0716\">https://www.herodevs.com/vulnerability-directory/cve-2025-0716</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j58c-ww9w-pwp5\">https://github.com/advisories/GHSA-j58c-ww9w-pwp5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j58c-ww9w-pwp5",
            "title": "[angular] AngularJS improperly sanitizes SVG elements",
            "date_modified": "2025-04-30T14:18:12.000Z",
            "date_published": "2025-04-29T18:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j58c-ww9w-pwp5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>Auth0 NextJS <code>v4.0.1</code> to <code>v4.5.0</code> does not invoke <code>.setExpirationTime</code> when generating a JWE token for the session. As a result, the JWE does not contain an internal expiration claim. While the session cookie may expire or be cleared, the JWE remains valid.</p>\n<h3 id=\"am-i-affected\">Am I Affected?</h3>\n<p>You are affected if you are using Auth0 NextJS SDK v4.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>Upgrade to <code>v4.5.1</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-pjr6-jx7r-j4r6\">https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-pjr6-jx7r-j4r6</a></li>\n<li><a href=\"https://github.com/auth0/nextjs-auth0/commit/a4f061aed02ffa132feca8adfbd11704df17e1c3\">https://github.com/auth0/nextjs-auth0/commit/a4f061aed02ffa132feca8adfbd11704df17e1c3</a></li>\n<li><a href=\"https://github.com/auth0/nextjs-auth0/releases/tag/v4.5.1\">https://github.com/auth0/nextjs-auth0/releases/tag/v4.5.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pjr6-jx7r-j4r6\">https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pjr6-jx7r-j4r6",
            "title": "[@auth0/nextjs-auth0] Auth0 NextJS SDK v4 Missing Session Invalidation",
            "date_modified": "2025-04-29T18:54:51.000Z",
            "date_published": "2025-04-29T18:54:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pjr6-jx7r-j4r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A query cost restriction using the <code>cost-limit</code> can be bypassed if <code>ignoreIntrospection</code> is enabled (which is the default configuration) by naming your query/fragment <code>__schema</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>At the start of the <code>computeComplexity</code> function, we have the following check for <code>ignoreIntrospection</code> option:</p>\n<pre><code class=\"language-ts\">    if (this.config.ignoreIntrospection &amp;&amp; 'name' in node &amp;&amp; node.name?.value === '__schema') {\n      return 0;\n    }\n</code></pre>\n<p>However, the <code>node</code> can be <code>FieldNode | FragmentDefinitionNode | InlineFragmentNode | OperationDefinitionNode | FragmentSpreadNode</code></p>\n<p>So, for example, sending the following query</p>\n<pre><code class=\"language-gql\">query hello {\n  books {\n    title\n  }\n}\n</code></pre>\n<p>would create an <code>OperationDefinitionNode</code> with <code>node.name.value == 'hello'</code></p>\n<p>The proper way to handle this would be to check for the <code>__schema</code> field, which would create a <code>FieldNode</code>.</p>\n<p>The fix is</p>\n<pre><code class=\"language-ts\">    if (\n      this.config.ignoreIntrospection &amp;&amp;\n      'name' in node &amp;&amp;\n      node.name?.value === '__schema' &amp;&amp;\n      node.kind === Kind.FIELD\n    ) {\n      return 0;\n    }\n</code></pre>\n<p>to assert that the node must be a <code>FieldNode</code></p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-gql\">query  {\n  ...__schema\n}\n\nfragment __schema on Query {\n  books {\n    title\n    author\n  }\n}\n</code></pre>\n<pre><code class=\"language-gql\">query __schema {\n  books {\n    title\n    author\n  }\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications using GraphQL Armor Cost Limit plugin with <code>ignoreIntrospection</code> enabled.</p>\n<h3 id=\"fix\">Fix:</h3>\n<p>Fixed on <a href=\"https://github.com/Escape-Technologies/graphql-armor/pull/772\">772</a>. A quick patch would be to set <code>ignoreIntrospection</code> to false.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7\">https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7</a></li>\n<li><a href=\"https://github.com/Escape-Technologies/graphql-armor/pull/772\">https://github.com/Escape-Technologies/graphql-armor/pull/772</a></li>\n<li><a href=\"https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba\">https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-733v-p3h5-qpq7\">https://github.com/advisories/GHSA-733v-p3h5-qpq7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-733v-p3h5-qpq7",
            "title": "[@escape.tech/graphql-armor-cost-limit] GraphQL Armor Cost-Limit Plugin Bypass via Introspection Query Obfuscation",
            "date_modified": "2025-04-29T16:45:59.000Z",
            "date_published": "2025-04-25T15:14:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-733v-p3h5-qpq7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Allowlist module contains a bypass vulnerability</p>\n<h3 id=\"details\">Details</h3>\n<p>The logic for using an allowlist on a Modular Account V2 contained a bug that allowed session keys to bypass any allowlist configuration</p>\n<h3>Action</h3>\n<p>If you are using @aa-sdk and/or @account-kit/smart-contracts between the versions of &gt;=4.8.0 and &lt;4.28.1, please upgrade to 4.28.2</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/alchemyplatform/aa-sdk/security/advisories/GHSA-wfm2-rq5g-f8v5\">https://github.com/alchemyplatform/aa-sdk/security/advisories/GHSA-wfm2-rq5g-f8v5</a></li>\n<li><a href=\"https://github.com/alchemyplatform/aa-sdk/commit/b65bafdb9eec3a009df2cbabf09a35a76550e9d0\">https://github.com/alchemyplatform/aa-sdk/commit/b65bafdb9eec3a009df2cbabf09a35a76550e9d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wfm2-rq5g-f8v5\">https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wfm2-rq5g-f8v5",
            "title": "[@account-kit/smart-contracts] @account-kit/smart-contracts Allowlist Module Bypass Vulnerability",
            "date_modified": "2025-04-29T15:11:41.000Z",
            "date_published": "2025-04-29T15:11:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wfm2-rq5g-f8v5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not \"cryptographically secure.\" (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46653\">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>\n<li><a href=\"https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5\">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>\n<li><a href=\"https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10\">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>\n<li><a href=\"https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md\">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-75v8-2h7p-7m2m\">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-75v8-2h7p-7m2m",
            "title": "[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content",
            "date_modified": "2025-04-29T14:07:18.000Z",
            "date_published": "2025-04-26T21:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-75v8-2h7p-7m2m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>n8n workflows can store and serve binary files, which are accessible to authenticated users. However, there was no restriction on the MIME type of uploaded files, and the MIME type could be controlled via a GET parameter. This allowed the server to respond with any MIME type, potentially enabling malicious content to be interpreted and executed by the browser.</p>\n<p>An authenticated attacker with member-level permissions could exploit this by uploading a crafted HTML file containing malicious JavaScript. When another user visits the binary data endpoint with the MIME type set to text/html, the script executes in the context of the user’s session. This script could, for example, send a request to change the user’s email address in their account settings, effectively enabling account takeover.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0\">n8n@1.90.0</a></li>\n</ul>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank @Mahmoud0x00 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/n8n-io/n8n/security/advisories/GHSA-c8hm-hr8h-5xjw\">https://github.com/n8n-io/n8n/security/advisories/GHSA-c8hm-hr8h-5xjw</a></li>\n<li><a href=\"https://github.com/n8n-io/n8n/pull/14350\">https://github.com/n8n-io/n8n/pull/14350</a></li>\n<li><a href=\"https://github.com/n8n-io/n8n/pull/14685\">https://github.com/n8n-io/n8n/pull/14685</a></li>\n<li><a href=\"https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0\">https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46343\">https://nvd.nist.gov/vuln/detail/CVE-2025-46343</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c8hm-hr8h-5xjw\">https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c8hm-hr8h-5xjw",
            "title": "[n8n] n8n Vulnerable to Stored XSS through Attachments View Endpoint",
            "date_modified": "2025-04-29T13:15:17.000Z",
            "date_published": "2025-04-28T21:02:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c8hm-hr8h-5xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"issue\">Issue</h1>\n<p>Snowflake discovered and remediated a vulnerability in the NodeJS Driver for Snowflake (“Driver”). When using the Easy Logging feature on Linux and macOS the Driver didn’t correctly verify the permissions of the logging configuration file, potentially allowing an attacker with local access to overwrite the configuration and gain control over logging level and output location.</p>\n<p>This vulnerability affects Driver versions 1.10.0 through 2.0.3. Snowflake fixed the issue in version 2.0.4.</p>\n<h1 id=\"vulnerability-details\">Vulnerability Details</h1>\n<p>When using the Easy Logging feature on Linux and macOS the Driver reads logging configuration from a user-provided file. On Linux and macOS the Driver verifies that the configuration file can be written to only by its owner. That check was vulnerable to a Time-of-Check to Time-of-Use (TOCTOU) race condition and failed to verify that the file owner matches the user running the Driver. This could allow a local attacker with write access to the configuration file or the directory containing it to overwrite the configuration and gain control over logging level and output location.</p>\n<h1 id=\"solution\">Solution</h1>\n<p>Snowflake released version 2.0.4 of the NodeJS Driver for Snowflake, which fixes this issue. We recommend users upgrade to version 2.0.4.</p>\n<h1 id=\"additional-information\">Additional Information</h1>\n<p>If you discover a security vulnerability in one of our products or websites, please report the issue to Snowflake through our Vulnerability Disclosure Program hosted at HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-wmjq-jrm2-9wfr\">https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-wmjq-jrm2-9wfr</a></li>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-nodejs/commit/e94c24112271e1f44c271634bf29a3188acc68d0\">https://github.com/snowflakedb/snowflake-connector-nodejs/commit/e94c24112271e1f44c271634bf29a3188acc68d0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46328\">https://nvd.nist.gov/vuln/detail/CVE-2025-46328</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wmjq-jrm2-9wfr\">https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wmjq-jrm2-9wfr",
            "title": "[snowflake-sdk] NodeJS Driver for Snowflake has race condition when checking access to Easy Logging configuration file",
            "date_modified": "2025-04-29T13:10:47.000Z",
            "date_published": "2025-04-28T20:31:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wmjq-jrm2-9wfr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>\n<p>Users using the the following pattern are affected:</p>\n<pre><code class=\"language-js\">fastify.post('/', {\n  handler(request, reply) {\n    reply.code(200).send(request.body)\n  },\n  schema: {\n    body: {\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              'foo': {\n                type: 'string',\n              }\n            },\n            required: ['foo']\n          }\n        },\n      }\n    }\n  }\n})\n</code></pre>\n<p>User using the following pattern are <strong>not</strong> affected:</p>\n<pre><code class=\"language-js\">fastify.post('/', {\n  handler(request, reply) {\n    reply.code(200).send(request.body)\n  },\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        'foo': {\n          type: 'string',\n        }\n      },\n      required: ['foo']\n    }\n  }\n})\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.\nVersion v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not specify multiple content types in the schema.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<p><a href=\"https://hackerone.com/reports/3087928\">https://hackerone.com/reports/3087928</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc\">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>\n<li><a href=\"https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418\">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32442\">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>\n<li><a href=\"https://hackerone.com/reports/3087928\">https://hackerone.com/reports/3087928</a></li>\n<li><a href=\"https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4\">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg2h-6x62-wpwc\">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg2h-6x62-wpwc",
            "title": "[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass",
            "date_modified": "2025-04-28T17:39:15.000Z",
            "date_published": "2025-04-18T15:02:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg2h-6x62-wpwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32997\">https://nvd.nist.gov/vuln/detail/CVE-2025-32997</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/pull/1096\">https://github.com/chimurai/http-proxy-middleware/pull/1096</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e\">https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gqv-wp59-fq42\">https://github.com/advisories/GHSA-9gqv-wp59-fq42</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42",
            "title": "[http-proxy-middleware] http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed",
            "date_modified": "2025-04-28T14:28:54.000Z",
            "date_published": "2025-04-15T03:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32996\">https://nvd.nist.gov/vuln/detail/CVE-2025-32996</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/pull/1089\">https://github.com/chimurai/http-proxy-middleware/pull/1089</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145\">https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4www-5p9h-95mh\">https://github.com/advisories/GHSA-4www-5p9h-95mh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh",
            "title": "[http-proxy-middleware] http-proxy-middleware can call writeBody twice because \"else if\" is not used",
            "date_modified": "2025-04-28T14:27:15.000Z",
            "date_published": "2025-04-15T03:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the <code>compileClient</code>, <code>compileFileClient</code>, or <code>compileClientWithDependenciesTracked</code> function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36361\">https://nvd.nist.gov/vuln/detail/CVE-2024-36361</a></li>\n<li><a href=\"https://github.com/pugjs/pug/pull/3428\">https://github.com/pugjs/pug/pull/3428</a></li>\n<li><a href=\"https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug\">https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug</a></li>\n<li><a href=\"https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328\">https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328</a></li>\n<li><a href=\"https://pugjs.org/api/reference.html\">https://pugjs.org/api/reference.html</a></li>\n<li><a href=\"https://www.npmjs.com/package/pug-code-gen\">https://www.npmjs.com/package/pug-code-gen</a></li>\n<li><a href=\"https://github.com/pugjs/pug/pull/3438\">https://github.com/pugjs/pug/pull/3438</a></li>\n<li><a href=\"https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb\">https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb</a></li>\n<li><a href=\"https://github.com/pugjs/pug/releases/tag/pug%403.0.3\">https://github.com/pugjs/pug/releases/tag/pug%403.0.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3965-hpx2-q597\">https://github.com/advisories/GHSA-3965-hpx2-q597</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3965-hpx2-q597",
            "title": "[pug-code-gen] Pug allows JavaScript code execution if an application accepts untrusted input",
            "date_modified": "2025-04-28T14:20:51.000Z",
            "date_published": "2024-05-24T14:45:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3965-hpx2-q597"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>After some research, it turns out that it's possible to modify pre-rendered data by adding a header to the request. This allows to completely spoof its contents and modify all the values ​​of the data object passed to the HTML. Latest versions are impacted.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerable header is <code>X-React-Router-Prerender-Data</code>, a specific JSON object must be passed to it in order for the spoofing to be successful as we will see shortly. Here is <a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87\">the vulnerable code</a> :</p>\n<img src=\"https://github.com/user-attachments/assets/c95b0b33-15ce-4d30-9f5e-b10525dd6ab4\" alt=\"Capture d’écran 2025-04-07 à 05 36 58\" width=\"776\">\n\n<p>To use the header, React-router must be used in Framework mode, and for the attack to be possible the target page must use a loader.</p>\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n<p>Versions used for our PoC: </p>\n<ul>\n<li>\"@react-router/node\": \"^7.5.0\",</li>\n<li>\"@react-router/serve\": \"^7.5.0\",</li>\n<li>\"react\": \"^19.0.0\"</li>\n<li>\"react-dom\": \"^19.0.0\"</li>\n<li>\"react-router\": \"^7.5.0\"</li>\n</ul>\n<ol>\n<li>Install React-Router with its default configuration in Framework mode (<a href=\"https://reactrouter.com/start/framework/installation\">https://reactrouter.com/start/framework/installation</a>)</li>\n<li>Add a simple page using a loader (example: <code>routes/ssr</code>)</li>\n<li>Access your page (<em>which uses the loader</em>) by suffixing it with <code>.data</code>. In our case the page is called <code>/ssr</code>:</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/d7d04e86-c549-4f4a-9200-2d1b6ac96aad\"></p>\n<p>We access it by adding the suffix <code>.data</code> and retrieve the data object, needed for the header:</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/ea0ca23e-6ba5-49c1-980d-1b04a05acf56\"></p>\n<ol start=\"4\">\n<li>Send your request by adding the <code>X-React-Router-Prerender-Data</code> header with the previously retrieved object as its value. You can change any value of your <code>data</code> object (do not touch the other values, the latter being necessary for the object to be processed correctly and not throw an error):</li>\n</ol>\n<p><img alt=\"Capture d’écran 2025-04-07 à 05 56 10\" src=\"https://github.com/user-attachments/assets/42ca7c9e-5cd3-4eff-9711-1e78755c9046\"></p>\n<p>As you can see, all values ​​have been changed/overwritten by the values ​​provided via the header. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>The impact is significant, if a cache system is in place, it is possible to poison a response in which all of the data transmitted via a loader would be altered by an attacker allowing him to take control of the content of the page and modify it as he wishes via a cache-poisoning attack. This can lead to several types of attacks including potential stored XSS depending on the context in which the data is injected and/or how the data is used on the client-side.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Rachid Allam (zhero;)</li>\n<li>Yasser Allam (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/remix-run/react-router/security/advisories/GHSA-cpj6-fhp6-mr6j\">https://github.com/remix-run/react-router/security/advisories/GHSA-cpj6-fhp6-mr6j</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111\">https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87\">https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43865\">https://nvd.nist.gov/vuln/detail/CVE-2025-43865</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpj6-fhp6-mr6j\">https://github.com/advisories/GHSA-cpj6-fhp6-mr6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpj6-fhp6-mr6j",
            "title": "[react-router] React Router allows pre-render data spoofing on React-Router framework mode",
            "date_modified": "2025-04-25T14:34:18.000Z",
            "date_published": "2025-04-24T16:31:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpj6-fhp6-mr6j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>After some research, it turns out that it is possible to force an application to switch to SPA mode by adding a header to the request. If the application uses SSR and is forced to switch to SPA, this causes an error that completely corrupts the page. If a cache system is in place, this allows the response containing the error to be cached, resulting in a cache poisoning that strongly impacts the availability of the application.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerable header is <code>X-React-Router-SPA-Mode</code>; adding it to a request sent to a page/endpoint using a loader throws an error. Here is <a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407\">the vulnerable code</a> :</p>\n<img src=\"https://github.com/user-attachments/assets/0a0e9c41-70fd-4dba-9061-892dd6797291\" alt=\"Capture d’écran 2025-04-07 à 08 28 20\" width=\"672\">\n\n<p>To use the header, React-router must be used in Framework mode, and for the attack to be possible the target page must use a loader.</p>\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n<p>Versions used for our PoC: </p>\n<ul>\n<li>\"@react-router/node\": \"^7.5.0\",</li>\n<li>\"@react-router/serve\": \"^7.5.0\",</li>\n<li>\"react\": \"^19.0.0\"</li>\n<li>\"react-dom\": \"^19.0.0\"</li>\n<li>\"react-router\": \"^7.5.0\"</li>\n</ul>\n<ol>\n<li>Install React-Router with its default configuration in Framework mode (<a href=\"https://reactrouter.com/start/framework/installation\">https://reactrouter.com/start/framework/installation</a>)</li>\n<li>Add a simple page using a loader (example: <code>routes/ssr</code>)</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/d7d04e86-c549-4f4a-9200-2d1b6ac96aad\"></p>\n<ol start=\"3\">\n<li>Send a request to the endpoint using the loader (<code>/ssr</code> in our case) adding the following header:</li>\n</ol>\n<pre><code>X-React-Router-SPA-Mode: yes\n</code></pre>\n<p>Notice the difference between a request with and without the header;</p>\n<p><strong>Normal request</strong>\n<img alt=\"Capture d’écran 2025-04-07 à 08 36 27\" src=\"https://github.com/user-attachments/assets/da372b70-7c68-41c1-aac1-e5be94f22526\"></p>\n<p><strong>With the header</strong>\n<img alt=\"Capture d’écran 2025-04-07 à 08 37 01\" src=\"https://github.com/user-attachments/assets/98101720-cb5b-44e9-bff5-463c0b4dab2a\">\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/c16a101e-688c-4757-9e05-61308ed8a2de\"></p>\n<h2 id=\"impact\">Impact</h2>\n<p>If a system cache is in place, it is possible to poison the response by completely altering its content (<em>by an error message</em>), strongly impacting its availability, making the latter impractical via a cache-poisoning attack.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Rachid Allam (zhero;)</li>\n<li>Yasser Allam (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/remix-run/react-router/security/advisories/GHSA-f46r-rw29-r322\">https://github.com/remix-run/react-router/security/advisories/GHSA-f46r-rw29-r322</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111\">https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407\">https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43864\">https://nvd.nist.gov/vuln/detail/CVE-2025-43864</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f46r-rw29-r322\">https://github.com/advisories/GHSA-f46r-rw29-r322</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f46r-rw29-r322",
            "title": "[react-router] React Router allows a DoS via cache poisoning by forcing SPA mode",
            "date_modified": "2025-04-25T14:32:58.000Z",
            "date_published": "2025-04-24T16:31:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f46r-rw29-r322"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An unhandled error is thrown when validating invalid connectionParams which crashes a tRPC WebSocket server. This allows any unauthenticated user to crash a tRPC 11 WebSocket server.</p>\n<h3 id=\"details\">Details</h3>\n<p>Any tRPC 11 server with WebSocket enabled with a <code>createContext</code> method set is vulnerable. Here is an example:</p>\n<p><a href=\"https://github.com/user-attachments/assets/ce1b2d32-6103-4e54-8446-51535b293b05\">https://github.com/user-attachments/assets/ce1b2d32-6103-4e54-8446-51535b293b05</a></p>\n<p>I have a working reproduction here if you would like to test: <a href=\"https://github.com/lukechilds/trpc-vuln-reproduction\">https://github.com/lukechilds/trpc-vuln-reproduction</a></p>\n<p>The connectionParams logic introduced in <a href=\"https://github.com/trpc/trpc/pull/5839\">https://github.com/trpc/trpc/pull/5839</a> does not safely handle invalid connectionParams objects. During validation if the object does not match an expected shape an error will be thrown:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/unstable-core-do-not-import/http/parseConnectionParams.ts#L27-L33\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/unstable-core-do-not-import/http/parseConnectionParams.ts#L27-L33</a></p>\n<p>This is called during WebSocket connection setup inside <code>createCtxPromise()</code> here:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L435\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L435</a></p>\n<p><code>createCtxPromise</code> has handling to catch any errors and pass them up to the <code>opts.onError</code> handler:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L144-L173\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L144-L173</a></p>\n<p>However the error handler then rethrows the error:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171</a></p>\n<p>Since this is all triggered from the WebSocket <code>message</code> event there is no higher level error handling so this causes an uncaught exception and crashes the server process.</p>\n<p>This means any tRPC 11 server with WebSockets enabled can be crashed by an attacker sending an invalid connectionParams object. It doesn't matter if the server doesn't make user of connectionParams, the connectionParams logic can be initiated by the client.</p>\n<p>To fix this vulnerability tRPC should not rethrow the error after it's be handled. This patch fixes the vulnerability:</p>\n<pre><code class=\"language-patch\">From 5747b1d11946f60268eb86c59784bd6f7eb50abd Mon Sep 17 00:00:00 2001\nFrom: Luke Childs &lt;lukechilds123@gmail.com&gt;\nDate: Sun, 20 Apr 2025 13:27:10 +0700\nSubject: [PATCH] Don't throw already handled error\n\nThis error has already been handled so no need to re-throw. If we re-throw it will not be caught and will trigger an uncaught exception causing the entire server process to crash.\n---\n packages/server/src/adapters/ws.ts | 2 --\n 1 file changed, 2 deletions(-)\n\ndiff --git a/packages/server/src/adapters/ws.ts b/packages/server/src/adapters/ws.ts\nindex ad869affd..5a578b5cb 100644\n--- a/packages/server/src/adapters/ws.ts\n+++ b/packages/server/src/adapters/ws.ts\n@@ -167,8 +167,6 @@ export function getWSConnectionHandler&lt;TRouter extends AnyRouter&gt;(\n         (globalThis.setImmediate ?? globalThis.setTimeout)(() =&gt; {\n           client.close();\n         });\n-\n-        throw error;\n       });\n     }\n\n--\n2.48.1\n</code></pre>\n<h2 id=\"poc\">PoC</h2>\n<p>This script will crash the target tRPC 11 server if WebSockets are enabled:</p>\n<pre><code class=\"language-js\">#!/usr/bin/env node\n\nconst TARGET = 'ws://localhost:3000'\n\n// These malicious connection params will crash any tRPC v11.1.0 WebSocket server on validation\nconst MALICIOUS_CONNECTION_PARAMS = JSON.stringify({\n  method: \"connectionParams\",\n  data: { invalidConnectionParams: null },\n});\n\n// Open a connection to the target\nconst target = `${TARGET}?connectionParams=1`;\nconsole.log(`Opening a WebSocket to ${target}`);\nconst socket = new WebSocket(target);\n\n// Wait for the connection to be established\nsocket.addEventListener(\"open\", () =&gt; {\n  console.log(\"WebSocket established!\");\n\n  // Sends a message to the WebSocket server.\n  console.log(`Sending malicious connectionParams`);\n  socket.send(MALICIOUS_CONNECTION_PARAMS);\n  console.log(`Done!`);\n});\n\n// Handle errors\nsocket.addEventListener(\"error\", () =&gt; console.log(\"Error opening WebSocket\"));\n</code></pre>\n<p>Complete PoC with vulnerable WebSocket server here: <a href=\"https://github.com/lukechilds/trpc-vuln-reproduction\">https://github.com/lukechilds/trpc-vuln-reproduction</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/trpc/trpc/security/advisories/GHSA-pj3v-9cm8-gvj8\">https://github.com/trpc/trpc/security/advisories/GHSA-pj3v-9cm8-gvj8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43855\">https://nvd.nist.gov/vuln/detail/CVE-2025-43855</a></li>\n<li><a href=\"https://github.com/trpc/trpc/pull/5839\">https://github.com/trpc/trpc/pull/5839</a></li>\n<li><a href=\"https://github.com/trpc/trpc/commit/9beb26c636d44852e0f407f3d7a82ad54df65b4d\">https://github.com/trpc/trpc/commit/9beb26c636d44852e0f407f3d7a82ad54df65b4d</a></li>\n<li><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pj3v-9cm8-gvj8\">https://github.com/advisories/GHSA-pj3v-9cm8-gvj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pj3v-9cm8-gvj8",
            "title": "[@trpc/server] tRPC 11 WebSocket DoS Vulnerability",
            "date_modified": "2025-04-24T16:03:58.000Z",
            "date_published": "2025-04-24T16:03:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pj3v-9cm8-gvj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>PostHog ClickHouse Table Functions SQL Injection Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of PostHog. Authentication is required to exploit this vulnerability.</p>\n<p>The specific flaw exists within the implementation of the SQL parser. The issue results from the lack of proper validation of a user-supplied string before using it to construct SQL queries. An attacker can leverage this vulnerability to execute code in the context of the database account. Was ZDI-CAN-25350.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1520\">https://nvd.nist.gov/vuln/detail/CVE-2025-1520</a></li>\n<li><a href=\"https://github.com/PostHog/posthog/commit/6e8f035f9acd339c5ba87ba6ea40fc1ab3053d42\">https://github.com/PostHog/posthog/commit/6e8f035f9acd339c5ba87ba6ea40fc1ab3053d42</a></li>\n<li><a href=\"https://www.zerodayinitiative.com/advisories/ZDI-25-099\">https://www.zerodayinitiative.com/advisories/ZDI-25-099</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v64v-fq96-c5wv\">https://github.com/advisories/GHSA-v64v-fq96-c5wv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v64v-fq96-c5wv",
            "title": "[@posthog/plugin-server] PostHog Plugin Server SQL Injection Vulnerability",
            "date_modified": "2025-04-23T19:38:44.000Z",
            "date_published": "2025-04-23T18:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v64v-fq96-c5wv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The path shortening function is used in pnpm：</p>\n<pre><code>export function depPathToFilename (depPath: string, maxLengthWithoutHash: number): string {\n  let filename = depPathToFilenameUnescaped(depPath).replace(/[\\\\/:*?\"&lt;&gt;|]/g, '+')\n  if (filename.includes('(')) {\n    filename = filename\n      .replace(/\\)$/, '')\n      .replace(/(\\)\\()|\\(|\\)/g, '_')\n  }\n  if (filename.length &gt; maxLengthWithoutHash || filename !== filename.toLowerCase() &amp;&amp; !filename.startsWith('file+')) {\n    return `${filename.substring(0, maxLengthWithoutHash - 27)}_${createBase32Hash(filename)}`\n  }\n  return filename\n}\n</code></pre>\n<p>However, it uses the md5 function as a path shortening compression function, and if a collision occurs, it will result in the same storage path for two different libraries. Although the real names are under the package name /node_modoules/, there are no version numbers for the libraries they refer to.\n<img alt=\"Schematic picture\" src=\"https://github.com/user-attachments/assets/7b8b87ab-f297-47bd-a9dd-43be86e36ed2\">\nIn the diagram, we assume that two packages are called packageA and packageB, and that the first 90 digits of their package names must be the same, and that the hash value of the package names with versions must be the same.  Then C is the package that they both reference, but with a different version number.  (npm allows package names up to 214 bytes, so constructing such a collision package name is obvious.)</p>\n<p>Then hash(<a href=\"mailto:packageA@1.2.3\">packageA@1.2.3</a>)=hash(<a href=\"mailto:packageB@3.4.5\">packageB@3.4.5</a>).  This results in the same path for the installation, and thus under the same directory.  Although the package names under node_modoules are the full paths again, they are shared with C.\nWhat is the exact version number of C?\nIn our local tests, it depends on which one is installed later.  If packageB is installed later, the C version number will change to 2.0.0.  At this time, although package A requires the <a href=\"mailto:C@1.0.0\">C@1.0.0</a> version, package. json will only work during installation, and will not affect the actual operation.\nWe did not receive any installation error issues from pnpm during our local testing, nor did we use force, which is clearly a case that can be triggered.</p>\n<p>For a package with a package name + version number longer than 120, another package can be constructed to introduce an indirect reference to a lower version, such as one with some known vulnerability.\nAlternatively, it is possible to construct two packages with more than 120 package names + version numbers.\nThis is clearly an advantage for those intent on carrying out supply chain attacks.</p>\n<p>The solution:\nThe repair cost is also very low, just need to upgrade the md5 function to sha256.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4\">https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47829\">https://nvd.nist.gov/vuln/detail/CVE-2024-47829</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cc4-rfj6-fhg4\">https://github.com/advisories/GHSA-8cc4-rfj6-fhg4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cc4-rfj6-fhg4",
            "title": "[pnpm] pnpm uses the md5 path shortening function causes packet paths to coincide, which causes indirect packet overwriting",
            "date_modified": "2025-04-23T19:16:02.000Z",
            "date_published": "2025-04-23T14:05:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cc4-rfj6-fhg4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions 4.2.1, 4.2.2, 4.2.3, and 4.2.4 of xrpl.js were compromised and contained malicious code designed to exfiltrate private keys. If you are using one of these versions, stop immediately and rotate any private keys or secrets used with affected systems.</p>\n<p>Version 2.14.2 is also malicious, though it is less likely to lead to exploitation as it is not compatible with other 2.x versions.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to version 4.2.5 or 2.14.3.</p>\n<h3 id=\"required-actions\">Required Actions</h3>\n<p>To secure funds, think carefully about whether any keys may have been compromised by this supply chain attack, and mitigate by sending funds to secure wallets, and/or rotating keys:</p>\n<p>The XRP Ledger supports key rotation: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></p>\n<p>If any account's master key is potentially compromised, you should disable it: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx</a></li>\n<li><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32965\">https://nvd.nist.gov/vuln/detail/CVE-2025-32965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/advisories/GHSA-33qr-m49q-rxfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx",
            "title": "[xrpl] Compromised xrpl.js versions 4.2.1, 4.2.2, 4.2.3, 4.2.4, and 2.14.2",
            "date_modified": "2025-04-22T23:53:56.000Z",
            "date_published": "2025-04-22T18:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions 4.2.1, 4.2.2, 4.2.3, and 4.2.4 of xrpl.js were compromised and contained malicious code designed to exfiltrate private keys. If you are using one of these versions, stop immediately and rotate any private keys or secrets used with affected systems.</p>\n<p>Version 2.14.2 is also malicious, though it is less likely to lead to exploitation as it is not compatible with other 2.x versions.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to version 4.2.5 or 2.14.3.</p>\n<h3 id=\"required-actions\">Required Actions</h3>\n<p>To secure funds, think carefully about whether any keys may have been compromised by this supply chain attack, and mitigate by sending funds to secure wallets, and/or rotating keys:</p>\n<p>The XRP Ledger supports key rotation: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></p>\n<p>If any account's master key is potentially compromised, you should disable it: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx</a></li>\n<li><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32965\">https://nvd.nist.gov/vuln/detail/CVE-2025-32965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/advisories/GHSA-33qr-m49q-rxfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx",
            "title": "[xrpl] Compromised xrpl.js versions 4.2.1, 4.2.2, 4.2.3, 4.2.4, and 2.14.2",
            "date_modified": "2025-04-22T23:53:56.000Z",
            "date_published": "2025-04-22T18:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>QMarkdown (aka quasar-ui-qmarkdown) before 2.0.5 allows XSS via headers even when when no-html is set.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43954\">https://nvd.nist.gov/vuln/detail/CVE-2025-43954</a></li>\n<li><a href=\"https://github.com/quasarframework/quasar-ui-qmarkdown/commit/b61dff84851c45369cf931db5bd93db177c657f6\">https://github.com/quasarframework/quasar-ui-qmarkdown/commit/b61dff84851c45369cf931db5bd93db177c657f6</a></li>\n<li><a href=\"https://github.com/quasarframework/quasar-ui-qmarkdown/compare/v2.0.4...v2.0.5\">https://github.com/quasarframework/quasar-ui-qmarkdown/compare/v2.0.4...v2.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wm65-ph3w-587c\">https://github.com/advisories/GHSA-wm65-ph3w-587c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wm65-ph3w-587c",
            "title": "[@quasar/quasar-ui-qmarkdown] QMarkdown Cross-Site Scripting (XSS) vulnerability",
            "date_modified": "2025-04-21T16:18:47.000Z",
            "date_published": "2025-04-20T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wm65-ph3w-587c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>\n<p>Users using the the following pattern are affected:</p>\n<pre><code class=\"language-js\">fastify.post('/', {\n  handler(request, reply) {\n    reply.code(200).send(request.body)\n  },\n  schema: {\n    body: {\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              'foo': {\n                type: 'string',\n              }\n            },\n            required: ['foo']\n          }\n        },\n      }\n    }\n  }\n})\n</code></pre>\n<p>User using the following pattern are <strong>not</strong> affected:</p>\n<pre><code class=\"language-js\">fastify.post('/', {\n  handler(request, reply) {\n    reply.code(200).send(request.body)\n  },\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        'foo': {\n          type: 'string',\n        }\n      },\n      required: ['foo']\n    }\n  }\n})\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.\nVersion v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not specify multiple content types in the schema.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<p><a href=\"https://hackerone.com/reports/3087928\">https://hackerone.com/reports/3087928</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc\">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>\n<li><a href=\"https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418\">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32442\">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>\n<li><a href=\"https://hackerone.com/reports/3087928\">https://hackerone.com/reports/3087928</a></li>\n<li><a href=\"https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4\">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg2h-6x62-wpwc\">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg2h-6x62-wpwc",
            "title": "[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass",
            "date_modified": "2025-04-28T17:39:15.000Z",
            "date_published": "2025-04-18T15:02:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg2h-6x62-wpwc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}