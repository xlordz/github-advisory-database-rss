{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a> is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. In the CDK, developers organize their applications into reusable components called \"<a href=\"https://docs.aws.amazon.com/cdk/v2/guide/constructs.html\">constructs</a>,\" which are organized into a hierarchical tree structure. One of the features of this framework is the ability to call \"<a href=\"https://docs.aws.amazon.com/cdk/v2/guide/aspects.html\">Aspects</a>,\" which are mechanisms to set configuration options for all AWS Resources in a particular part of the hierarchy at once. Aspect execution happens in a specific order, and the last Aspect to execute controls the final values in the template.</p>\n<p>AWS CDK version <a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.172.0\">2.172.0</a> introduced a new priority system for Aspects. Prior to this version, CDK would run Aspects based on hierarchical location. The new priority system takes precedence over hierarchical location, altering the invocation order of Aspects. Different priority classes were introduced: Aspects added by CDK APIs were classified as MUTATING (priority 200), while Aspects added directly by the user were classified as DEFAULT (priority 500) unless the user specified otherwise. As a result of this change, CDK apps that use a custom Aspect to assign a default permissions boundary and then use a built-in CDK method to override it on select resources could have unexpected permissions boundaries assigned. </p>\n<p>The following is an affected code sample:</p>\n<pre><code class=\"language-ts\">Aspects.of(stack).add(new CustomAspectThatAssignsDefaultPermissionsBoundaries());   // {1}\n\nPermissionsBoundary.of(lambdaFunc).apply(...);  // {2} -- uses Aspects internally\n</code></pre>\n<p>In versions prior to 2.172.0, the Aspect added by {2} would invoke last and assign its permissions boundary to the Lambda function role.</p>\n<p>In versions 2.172.0 and after, the Aspect added by {2} would have priority 200 while the Aspect added by {1} would have priority 500 and therefore be invoked last. The Lambda function role would get the permissions boundary of {1} assigned, which may not be what users expect. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>If an unexpected permissions boundary is selected for a role, it could lead to that role having insufficient permissions. Alternatively, this could lead to a role having wider permissions than intended; however, this could happen only in combination with an overly permissive role policy, as permissions boundaries do not grant permissions by themselves.</p>\n<p>Impacted versions: versions 2.172.0 up until 2.189.1</p>\n<h3 id=\"patches\">Patches</h3>\n<p>In version 2.189.1, the behavior has been reverted to the behavior of pre-2.172.0. The new behavior is available through a feature flag:</p>\n<pre><code class=\"language-json\">{\n  \"context\": {\n    \"@aws-cdk/core:aspectPrioritiesMutating\": true\n  }\n}\n</code></pre>\n<p>The patches are included in AWS CDK Library version 2.189.1 and after. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a workaround, users can use the location hierarchy to order the invocation of Aspects. To do this, users can assign the custom Aspect a priority of MUTATING to ensure it has the same priority as the Aspect added by the CDK API, and that the location hierarchy is used for the order of invocation Aspects.</p>\n<p>The following code is an example:</p>\n<pre><code class=\"language-ts\">Aspects.of(stack).add(new CustomAspectThatAssignsDefaultPermissionsBoundaries(), {\n  priority: AspectPriority.MUTATING,\n});\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank GoDaddy for collaborating on this issue through the coordinated vulnerability disclosure process.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-cdk/security/advisories/GHSA-qc59-cxj2-c2w4\">https://github.com/aws/aws-cdk/security/advisories/GHSA-qc59-cxj2-c2w4</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/commit/b7f4bc7aee1d99b70e4d9d3cedea53e910ee37ef\">https://github.com/aws/aws-cdk/commit/b7f4bc7aee1d99b70e4d9d3cedea53e910ee37ef</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.189.1\">https://github.com/aws/aws-cdk/releases/tag/v2.189.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qc59-cxj2-c2w4\">https://github.com/advisories/GHSA-qc59-cxj2-c2w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qc59-cxj2-c2w4",
            "title": "[aws-cdk-lib] aws-cdk-lib's aspect order change causes different Permissions Boundary assigned to Role",
            "date_modified": "2025-04-15T14:48:50.000Z",
            "date_published": "2025-04-15T14:48:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qc59-cxj2-c2w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package jquery-validation before 1.20.0 are vulnerable to Cross-site Scripting (XSS) in the showLabel() function, which may take input from a user-controlled placeholder value. This value will populate a message via $.validator.messages in a user localizable dictionary.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3573\">https://nvd.nist.gov/vuln/detail/CVE-2025-3573</a></li>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/pull/2462\">https://github.com/jquery-validation/jquery-validation/pull/2462</a></li>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/commit/7a490d8f39bd988027568ddcf51755e1f4688902\">https://github.com/jquery-validation/jquery-validation/commit/7a490d8f39bd988027568ddcf51755e1f4688902</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-JQUERYVALIDATION-5952285\">https://security.snyk.io/vuln/SNYK-JS-JQUERYVALIDATION-5952285</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrj2-ph5q-jxw2\">https://github.com/advisories/GHSA-rrj2-ph5q-jxw2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrj2-ph5q-jxw2",
            "title": "[jquery-validation] jquery-validation vulnerable to Cross-site Scripting",
            "date_modified": "2025-04-15T14:24:22.000Z",
            "date_published": "2025-04-15T06:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrj2-ph5q-jxw2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>File Upload vulnerability in nestjs nest prior to v.11.0.16 allows a remote attacker to execute arbitrary code via the Content-Type header.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29409\">https://nvd.nist.gov/vuln/detail/CVE-2024-29409</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495\">https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495</a></li>\n<li><a href=\"https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f\">https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f</a></li>\n<li><a href=\"https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19\">https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/14876\">https://github.com/nestjs/nest/issues/14876</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038\">https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038</a></li>\n<li><a href=\"https://github.com/nestjs/nest/pull/14881\">https://github.com/nestjs/nest/pull/14881</a></li>\n<li><a href=\"https://github.com/nestjs/nest/releases/tag/v11.0.16\">https://github.com/nestjs/nest/releases/tag/v11.0.16</a></li>\n<li><a href=\"https://github.com/nestjs/nest/releases/tag/v10.4.16\">https://github.com/nestjs/nest/releases/tag/v10.4.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj7v-w2c7-cp7c\">https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c",
            "title": "[@nestjs/common] nest allows a remote attacker to execute arbitrary code via the Content-Type header",
            "date_modified": "2025-04-14T22:25:20.000Z",
            "date_published": "2025-03-14T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>File Upload vulnerability in nestjs nest prior to v.11.0.16 allows a remote attacker to execute arbitrary code via the Content-Type header.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29409\">https://nvd.nist.gov/vuln/detail/CVE-2024-29409</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495\">https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495</a></li>\n<li><a href=\"https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f\">https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f</a></li>\n<li><a href=\"https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19\">https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/14876\">https://github.com/nestjs/nest/issues/14876</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038\">https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038</a></li>\n<li><a href=\"https://github.com/nestjs/nest/pull/14881\">https://github.com/nestjs/nest/pull/14881</a></li>\n<li><a href=\"https://github.com/nestjs/nest/releases/tag/v11.0.16\">https://github.com/nestjs/nest/releases/tag/v11.0.16</a></li>\n<li><a href=\"https://github.com/nestjs/nest/releases/tag/v10.4.16\">https://github.com/nestjs/nest/releases/tag/v10.4.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj7v-w2c7-cp7c\">https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c",
            "title": "[@nestjs/common] nest allows a remote attacker to execute arbitrary code via the Content-Type header",
            "date_modified": "2025-04-14T22:25:20.000Z",
            "date_published": "2025-03-14T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Unsanitized search param names cause XSS vulnerability. You are affected if you iterate over all entries of <code>event.url.searchParams</code> inside a server <code>load</code> function. Attackers can exploit it by crafting a malicious URL and getting a user to click a link with said URL.</p>\n<h3 id=\"details\">Details</h3>\n<p>SvelteKit tracks which parameters in <code>event.url.searchParams</code> are read inside server <code>load</code> functions. If the application iterates over the these parameters, the <code>uses.search_params</code> array included in the boot script (embedded in the server-rendered HTML) will have any search param name included in unsanitized form.</p>\n<p><code>packages/kit/src/runtime/server/utils.js:150</code> has the <code>stringify_uses(node)</code> function which prints these out.</p>\n<h3 id=\"reproduction\">Reproduction</h3>\n<p>In a <code>+page.server.js</code> or <code>+layout.server.js</code>:</p>\n<pre><code class=\"language-js\">/** @type {import('@sveltejs/kit').Load} */\nexport function load(event) {\n  const values = {};\n\n  for (const key of event.url.searchParams.keys()) {\n    values[key] = event.url.searchParams.get(key);\n  }\n}\n</code></pre>\n<p>If a user visits the page in question via a link containing <code>?&lt;/script/&gt;&lt;script&gt;window.pwned%3D1&lt;/script/&gt;</code>, the <code>&lt;/script&gt;</code> will be included verbatim in the payload, causing the embedded script to be executed.</p>\n<p>It is not necessary to return the parameter value from <code>load</code> or render it in the page, only to read it (which causes it to be tracked as a dependency) while <code>load</code> is running.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any application that iterates over all values in <code>event.url.searchParams</code> in a <code>load</code> function in <code>+page.server.js</code> or <code>+layout.server.js</code> (directly or indirectly) is vulnerable to XSS.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sveltejs/kit/security/advisories/GHSA-6q87-84jw-cjhp\">https://github.com/sveltejs/kit/security/advisories/GHSA-6q87-84jw-cjhp</a></li>\n<li><a href=\"https://github.com/sveltejs/kit/commit/d3300c6a67908590266c363dba7b0835d9a194cf\">https://github.com/sveltejs/kit/commit/d3300c6a67908590266c363dba7b0835d9a194cf</a></li>\n<li><a href=\"https://github.com/sveltejs/kit/releases/tag/%40sveltejs%2Fkit%402.20.6\">https://github.com/sveltejs/kit/releases/tag/%40sveltejs%2Fkit%402.20.6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32388\">https://nvd.nist.gov/vuln/detail/CVE-2025-32388</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6q87-84jw-cjhp\">https://github.com/advisories/GHSA-6q87-84jw-cjhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6q87-84jw-cjhp",
            "title": "[@sveltejs/kit] @sveltejs/kit vulnerable to Cross-site Scripting via tracked search_params",
            "date_modified": "2025-04-16T00:40:51.000Z",
            "date_published": "2025-04-14T19:10:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6q87-84jw-cjhp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Access token from query string is not redacted and is potentially exposed in system logs which may be persisted.</p>\n<h3 id=\"details\">Details</h3>\n<p>The access token in <code>req.query</code> is not redacted when the <code>LOG_STYLE</code> is set to <code>raw</code>. If these logs are not properly sanitized or protected, an attacker with access to it can potentially gain administrative control, leading to unauthorized data access and manipulation.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Set <code>LOG_LEVEL=\"raw\"</code> in the environment.</li>\n<li>Send a request with the <code>access_token</code> in the query string.</li>\n<li>Notice that the <code>access_token</code> in <code>req.query</code> is not redacted.</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>It impacts systems where the <code>LOG_STYLE</code> is set to <code>raw</code>. The <code>access_token</code> in the query could potentially be a long-lived static token. Users with impacted systems should rotate their static tokens if they were provided using query string.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-vw58-ph65-6rxp\">https://github.com/directus/directus/security/advisories/GHSA-vw58-ph65-6rxp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47822\">https://nvd.nist.gov/vuln/detail/CVE-2024-47822</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/2e893f9c576d5a02506272fe2c0bcc12e6c58768\">https://github.com/directus/directus/commit/2e893f9c576d5a02506272fe2c0bcc12e6c58768</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vw58-ph65-6rxp\">https://github.com/advisories/GHSA-vw58-ph65-6rxp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vw58-ph65-6rxp",
            "title": "[@directus/api] Directus inserts access token from query string into logs",
            "date_modified": "2025-04-14T15:20:42.000Z",
            "date_published": "2025-04-14T15:20:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vw58-ph65-6rxp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in flashuploader.swf in the Uploader component in Yahoo! YUI 3.5.0 through 3.9.1, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4942\">https://nvd.nist.gov/vuln/detail/CVE-2013-4942</a></li>\n<li><a href=\"https://moodle.org/mod/forum/discuss.php?d=232496\">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>\n<li><a href=\"http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678\">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>\n<li><a href=\"https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability\">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9ww8-j8j2-3788\">https://github.com/advisories/GHSA-9ww8-j8j2-3788</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9ww8-j8j2-3788",
            "title": "[yui] YUI Cross-site Scripting (XSS) vulnerability",
            "date_modified": "2025-04-12T03:26:54.000Z",
            "date_published": "2022-05-13T01:12:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9ww8-j8j2-3788"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in uploader.swf in the Uploader component in Yahoo! YUI 3.2.0 through 3.9.1, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4941\">https://nvd.nist.gov/vuln/detail/CVE-2013-4941</a></li>\n<li><a href=\"https://moodle.org/mod/forum/discuss.php?d=232496\">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>\n<li><a href=\"http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678\">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>\n<li><a href=\"https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability\">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64r3-582j-frqm\">https://github.com/advisories/GHSA-64r3-582j-frqm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64r3-582j-frqm",
            "title": "[yui] YUI Cross-site Scripting (XSS) vulnerability",
            "date_modified": "2025-04-12T03:25:18.000Z",
            "date_published": "2022-05-13T01:12:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64r3-582j-frqm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in io.swf in the IO Utility component in Yahoo! YUI 3.10.2, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.  NOTE: this vulnerability exists because of a CVE-2013-4939 regression.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4940\">https://nvd.nist.gov/vuln/detail/CVE-2013-4940</a></li>\n<li><a href=\"https://moodle.org/mod/forum/discuss.php?d=232496\">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>\n<li><a href=\"http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678\">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>\n<li><a href=\"https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability\">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x5hj-47vv-53p8\">https://github.com/advisories/GHSA-x5hj-47vv-53p8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x5hj-47vv-53p8",
            "title": "[yui] YUI Cross-site Scripting (XSS) vulnerability",
            "date_modified": "2025-04-12T03:24:29.000Z",
            "date_published": "2022-05-13T01:12:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x5hj-47vv-53p8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in io.swf in the IO Utility component in Yahoo! YUI 3.10.2, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.  NOTE: this vulnerability exists because of a CVE-2013-4939 regression.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4940\">https://nvd.nist.gov/vuln/detail/CVE-2013-4940</a></li>\n<li><a href=\"https://moodle.org/mod/forum/discuss.php?d=232496\">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>\n<li><a href=\"http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678\">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>\n<li><a href=\"https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability\">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x5hj-47vv-53p8\">https://github.com/advisories/GHSA-x5hj-47vv-53p8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x5hj-47vv-53p8",
            "title": "[yui] YUI Cross-site Scripting (XSS) vulnerability",
            "date_modified": "2025-04-12T03:24:29.000Z",
            "date_published": "2022-05-13T01:12:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x5hj-47vv-53p8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps with the following conditions are affected.</p>\n<ul>\n<li>explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>)</li>\n<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2\">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4\">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1\">ref1</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3\">ref2</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3\">ref3</a>).</p>\n<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href=\"https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl\"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>\n<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>/etc/passwd</code></p>\n<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32395\">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-356w-63v5-8wf4\">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4",
            "title": "[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`",
            "date_modified": "2025-04-11T14:06:06.000Z",
            "date_published": "2025-04-11T14:06:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps with the following conditions are affected.</p>\n<ul>\n<li>explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>)</li>\n<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2\">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4\">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1\">ref1</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3\">ref2</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3\">ref3</a>).</p>\n<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href=\"https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl\"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>\n<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>/etc/passwd</code></p>\n<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32395\">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-356w-63v5-8wf4\">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4",
            "title": "[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`",
            "date_modified": "2025-04-11T14:06:06.000Z",
            "date_published": "2025-04-11T14:06:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps with the following conditions are affected.</p>\n<ul>\n<li>explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>)</li>\n<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2\">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4\">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1\">ref1</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3\">ref2</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3\">ref3</a>).</p>\n<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href=\"https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl\"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>\n<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>/etc/passwd</code></p>\n<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32395\">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-356w-63v5-8wf4\">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4",
            "title": "[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`",
            "date_modified": "2025-04-11T14:06:06.000Z",
            "date_published": "2025-04-11T14:06:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps with the following conditions are affected.</p>\n<ul>\n<li>explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>)</li>\n<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2\">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4\">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1\">ref1</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3\">ref2</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3\">ref3</a>).</p>\n<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href=\"https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl\"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>\n<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>/etc/passwd</code></p>\n<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32395\">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-356w-63v5-8wf4\">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4",
            "title": "[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`",
            "date_modified": "2025-04-11T14:06:06.000Z",
            "date_published": "2025-04-11T14:06:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps with the following conditions are affected.</p>\n<ul>\n<li>explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>)</li>\n<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2\">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href=\"https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4\">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1\">ref1</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3\">ref2</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3\">ref3</a>).</p>\n<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href=\"https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl\"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>\n<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>/etc/passwd</code></p>\n<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32395\">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-356w-63v5-8wf4\">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4",
            "title": "[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`",
            "date_modified": "2025-04-11T14:06:06.000Z",
            "date_published": "2025-04-11T14:06:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Flowise &lt;= 2.2.3 is vulnerable to SQL Injection. via tableName parameter at Postgres_VectorStores.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29189\">https://nvd.nist.gov/vuln/detail/CVE-2025-29189</a></li>\n<li><a href=\"https://drive.google.com/file/d/1WHPslTmQmAM9xPJifULS2qAo7hcidB4L/view?usp=sharing\">https://drive.google.com/file/d/1WHPslTmQmAM9xPJifULS2qAo7hcidB4L/view?usp=sharing</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/pull/3818\">https://github.com/FlowiseAI/Flowise/pull/3818</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/commit/9a417bdc95f58d6dd92cbf60dad42414aba34754\">https://github.com/FlowiseAI/Flowise/commit/9a417bdc95f58d6dd92cbf60dad42414aba34754</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gjx9-wg9x-7gvp\">https://github.com/advisories/GHSA-gjx9-wg9x-7gvp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gjx9-wg9x-7gvp",
            "title": "[flowise-components] Flowise Vulnerable to SQL Injection via `tableName` Parameter",
            "date_modified": "2025-04-10T14:18:52.000Z",
            "date_published": "2025-04-09T12:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gjx9-wg9x-7gvp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the function fieldsToJson of node-opcua-alarm-condition v2.134.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57086\">https://nvd.nist.gov/vuln/detail/CVE-2024-57086</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/30acc3632cf595ca5825b7ec2b2f795a\">https://gist.github.com/tariqhawis/30acc3632cf595ca5825b7ec2b2f795a</a></li>\n<li><a href=\"https://github.com/node-opcua/node-opcua/issues/1433#issuecomment-2791824350\">https://github.com/node-opcua/node-opcua/issues/1433#issuecomment-2791824350</a></li>\n<li><a href=\"https://github.com/node-opcua/node-opcua/blob/330db56bb62bce9fff80382daee1fac94311978d/packages/node-opcua-alarm-condition/test/test_cve_polution_attack.ts\">https://github.com/node-opcua/node-opcua/blob/330db56bb62bce9fff80382daee1fac94311978d/packages/node-opcua-alarm-condition/test/test_cve_polution_attack.ts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gvwq-6fmx-28xm\">https://github.com/advisories/GHSA-gvwq-6fmx-28xm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gvwq-6fmx-28xm",
            "title": "[node-opcua-alarm-condition] node-opcua-alarm-condition prototype pollution vulnerability",
            "date_modified": "2025-04-10T12:50:03.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gvwq-6fmx-28xm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (CDK)</a> is an open-source framework for defining cloud infrastructure using code. Users use it to create their own applications, which are converted to AWS CloudFormation templates during deployment to a user's AWS account. AWS CDK contains pre-built components called \"constructs,\" which are higher-level abstractions providing defaults and best practices. This approach enables developers to use familiar programming languages to define complex cloud infrastructure more efficiently than writing raw CloudFormation templates.</p>\n<p>The <a href=\"https://aws.amazon.com/codepipeline/\">AWS CodePipeline</a> construct deploys CodePipeline, a managed service that orchestrates software release processes through a series of stages, each comprising one or more actions executed by CodePipeline. To perform these actions, CodePipeline assumes IAM roles with permissions necessary for each step, allowing it to interact with AWS services and resources on behalf of the user.</p>\n<p>An issue exists where, when using CDK to create a CodePipeline with the CDK Construct Library, CDK creates an AWS Identity and Access Management (AWS IAM) trust policy with overly broad permissions. Any user with unrestricted sts:AssumeRole permissions could assume that trust policy. This issue does not affect users who supply their own role for CodePipeline.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>To leverage the issue, an actor has to be authenticated in the account and have an unrestricted sts:AssumeRole permission. The permissions an actor could leverage depend on the actions added to the pipeline. Possible permissions include actions on services such as CloudFormation, CodeCommit, Lambda, and ECS, as well as access to the S3 bucket holding pipeline build artifacts (<a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline_actions-readme.html\">see documentation</a>). </p>\n<p>Users can review their AWS CloudTrail logs for when the role was assumed to determine if this was expected. </p>\n<h4 id=\"impacted-versions-v21890\">Impacted versions: &lt;v2.189.0</h4>\n<h3 id=\"patches\">Patches</h3>\n<p>The patches are included in the CDK Construct Library release <a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.189.0\">v2.189.0</a>. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>\n<p>When new CDK applications using the latest version are initialized, they will use the new behavior with more restrictive permissions.</p>\n<p>Existing applications must upgrade to the latest version, change the <a href=\"https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/cx-api/FEATURE_FLAGS.md\">feature flag</a> (@aws-cdk/pipelines:reduceStageRoleTrustScope)  and (@aws-cdk/pipelines:reduceCrossAccountActionRoleTrustScope) to true and redeploy the application to apply this fix and use the new behavior with more restrictive permissions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You can explicitly supply the role for your <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline-readme.html#cross-account-codepipelines\">CodePipeline</a> and follow the policy recommendations detailed in <a href=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-create-cross-account.html\">CodePipeline documentation</a>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/aws/aws-cdk/issues/33709\">Original reporting issue.</a></p>\n<p>If you have any questions or comments about this advisory please contact AWS/Amazon Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr\">https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/issues/33709\">https://github.com/aws/aws-cdk/issues/33709</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf\">https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.184.0\">https://github.com/aws/aws-cdk/releases/tag/v2.184.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5pq3-h73f-66hr\">https://github.com/advisories/GHSA-5pq3-h73f-66hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5pq3-h73f-66hr",
            "title": "[aws-cdk-lib] AWS CDK CodePipeline: trusted entities are too broad",
            "date_modified": "2025-04-10T02:03:01.000Z",
            "date_published": "2025-03-24T15:45:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5pq3-h73f-66hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In koa &lt; 2.16.1 and &lt; 3.0.0-alpha.5, passing untrusted user input to ctx.redirect() even after sanitizing it, may execute javascript code on the user who use the app.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is patched in  2.16.1 and 3.0.0-alpha.5.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Coming soon...</p>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li>Redirect user to another phishing site</li>\n<li>Make request to another endpoint of the application based on user's cookie</li>\n<li>Steal user's cookie</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v</a></li>\n<li><a href=\"https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312\">https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32379\">https://nvd.nist.gov/vuln/detail/CVE-2025-32379</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/advisories/GHSA-x2rg-q646-7m2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v",
            "title": "[koa] Koajs vulnerable to Cross-Site Scripting (XSS) at ctx.redirect() function",
            "date_modified": "2025-04-09T20:29:45.000Z",
            "date_published": "2025-04-09T13:00:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In koa &lt; 2.16.1 and &lt; 3.0.0-alpha.5, passing untrusted user input to ctx.redirect() even after sanitizing it, may execute javascript code on the user who use the app.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is patched in  2.16.1 and 3.0.0-alpha.5.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Coming soon...</p>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li>Redirect user to another phishing site</li>\n<li>Make request to another endpoint of the application based on user's cookie</li>\n<li>Steal user's cookie</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v</a></li>\n<li><a href=\"https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312\">https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32379\">https://nvd.nist.gov/vuln/detail/CVE-2025-32379</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/advisories/GHSA-x2rg-q646-7m2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v",
            "title": "[koa] Koajs vulnerable to Cross-Site Scripting (XSS) at ctx.redirect() function",
            "date_modified": "2025-04-09T20:29:45.000Z",
            "date_published": "2025-04-09T13:00:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}