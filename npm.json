{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32997\">https://nvd.nist.gov/vuln/detail/CVE-2025-32997</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/pull/1096\">https://github.com/chimurai/http-proxy-middleware/pull/1096</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e\">https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gqv-wp59-fq42\">https://github.com/advisories/GHSA-9gqv-wp59-fq42</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42",
            "title": "[http-proxy-middleware] http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed",
            "date_modified": "2025-04-28T14:28:54.000Z",
            "date_published": "2025-04-15T03:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32996\">https://nvd.nist.gov/vuln/detail/CVE-2025-32996</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/pull/1089\">https://github.com/chimurai/http-proxy-middleware/pull/1089</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145\">https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4www-5p9h-95mh\">https://github.com/advisories/GHSA-4www-5p9h-95mh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh",
            "title": "[http-proxy-middleware] http-proxy-middleware can call writeBody twice because \"else if\" is not used",
            "date_modified": "2025-04-28T14:27:15.000Z",
            "date_published": "2025-04-15T03:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the <code>compileClient</code>, <code>compileFileClient</code>, or <code>compileClientWithDependenciesTracked</code> function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36361\">https://nvd.nist.gov/vuln/detail/CVE-2024-36361</a></li>\n<li><a href=\"https://github.com/pugjs/pug/pull/3428\">https://github.com/pugjs/pug/pull/3428</a></li>\n<li><a href=\"https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug\">https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug</a></li>\n<li><a href=\"https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328\">https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328</a></li>\n<li><a href=\"https://pugjs.org/api/reference.html\">https://pugjs.org/api/reference.html</a></li>\n<li><a href=\"https://www.npmjs.com/package/pug-code-gen\">https://www.npmjs.com/package/pug-code-gen</a></li>\n<li><a href=\"https://github.com/pugjs/pug/pull/3438\">https://github.com/pugjs/pug/pull/3438</a></li>\n<li><a href=\"https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb\">https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb</a></li>\n<li><a href=\"https://github.com/pugjs/pug/releases/tag/pug%403.0.3\">https://github.com/pugjs/pug/releases/tag/pug%403.0.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3965-hpx2-q597\">https://github.com/advisories/GHSA-3965-hpx2-q597</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3965-hpx2-q597",
            "title": "[pug-code-gen] Pug allows JavaScript code execution if an application accepts untrusted input",
            "date_modified": "2025-04-28T14:20:51.000Z",
            "date_published": "2024-05-24T14:45:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3965-hpx2-q597"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A query cost restriction using the <code>cost-limit</code> can be bypassed if <code>ignoreIntrospection</code> is enabled (which is the default configuration) by naming your query/fragment <code>__schema</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>At the start of the <code>computeComplexity</code> function, we have the following check for <code>ignoreIntrospection</code> option:</p>\n<pre><code class=\"language-ts\">    if (this.config.ignoreIntrospection &amp;&amp; 'name' in node &amp;&amp; node.name?.value === '__schema') {\n      return 0;\n    }\n</code></pre>\n<p>However, the <code>node</code> can be <code>FieldNode | FragmentDefinitionNode | InlineFragmentNode | OperationDefinitionNode | FragmentSpreadNode</code></p>\n<p>So, for example, sending the following query</p>\n<pre><code class=\"language-gql\">query hello {\n  books {\n    title\n  }\n}\n</code></pre>\n<p>would create an <code>OperationDefinitionNode</code> with <code>node.name.value == 'hello'</code></p>\n<p>The proper way to handle this would be to check for the <code>__schema</code> field, which would create a <code>FieldNode</code>.</p>\n<p>The fix is</p>\n<pre><code class=\"language-ts\">    if (\n      this.config.ignoreIntrospection &amp;&amp;\n      'name' in node &amp;&amp;\n      node.name?.value === '__schema' &amp;&amp;\n      node.kind === Kind.FIELD\n    ) {\n      return 0;\n    }\n</code></pre>\n<p>to assert that the node must be a <code>FieldNode</code></p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-gql\">query  {\n  ...__schema\n}\n\nfragment __schema on Query {\n  books {\n    title\n    author\n  }\n}\n</code></pre>\n<pre><code class=\"language-gql\">query __schema {\n  books {\n    title\n    author\n  }\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications using GraphQL Armor Cost Limit plugin with <code>ignoreIntrospection</code> enabled.</p>\n<h3 id=\"fix\">Fix:</h3>\n<p>Fixed on <a href=\"https://github.com/Escape-Technologies/graphql-armor/pull/772\">772</a>. A quick patch would be to set <code>ignoreIntrospection</code> to false.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7\">https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7</a></li>\n<li><a href=\"https://github.com/Escape-Technologies/graphql-armor/pull/772\">https://github.com/Escape-Technologies/graphql-armor/pull/772</a></li>\n<li><a href=\"https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba\">https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-733v-p3h5-qpq7\">https://github.com/advisories/GHSA-733v-p3h5-qpq7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-733v-p3h5-qpq7",
            "title": "[@escape.tech/graphql-armor-cost-limit] GraphQL Armor Cost-Limit Plugin Bypass via Introspection Query Obfuscation",
            "date_modified": "2025-04-25T15:14:37.000Z",
            "date_published": "2025-04-25T15:14:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-733v-p3h5-qpq7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>After some research, it turns out that it's possible to modify pre-rendered data by adding a header to the request. This allows to completely spoof its contents and modify all the values ​​of the data object passed to the HTML. Latest versions are impacted.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerable header is <code>X-React-Router-Prerender-Data</code>, a specific JSON object must be passed to it in order for the spoofing to be successful as we will see shortly. Here is <a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87\">the vulnerable code</a> :</p>\n<img src=\"https://github.com/user-attachments/assets/c95b0b33-15ce-4d30-9f5e-b10525dd6ab4\" alt=\"Capture d’écran 2025-04-07 à 05 36 58\" width=\"776\">\n\n<p>To use the header, React-router must be used in Framework mode, and for the attack to be possible the target page must use a loader.</p>\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n<p>Versions used for our PoC: </p>\n<ul>\n<li>\"@react-router/node\": \"^7.5.0\",</li>\n<li>\"@react-router/serve\": \"^7.5.0\",</li>\n<li>\"react\": \"^19.0.0\"</li>\n<li>\"react-dom\": \"^19.0.0\"</li>\n<li>\"react-router\": \"^7.5.0\"</li>\n</ul>\n<ol>\n<li>Install React-Router with its default configuration in Framework mode (<a href=\"https://reactrouter.com/start/framework/installation\">https://reactrouter.com/start/framework/installation</a>)</li>\n<li>Add a simple page using a loader (example: <code>routes/ssr</code>)</li>\n<li>Access your page (<em>which uses the loader</em>) by suffixing it with <code>.data</code>. In our case the page is called <code>/ssr</code>:</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/d7d04e86-c549-4f4a-9200-2d1b6ac96aad\"></p>\n<p>We access it by adding the suffix <code>.data</code> and retrieve the data object, needed for the header:</p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/ea0ca23e-6ba5-49c1-980d-1b04a05acf56\"></p>\n<ol start=\"4\">\n<li>Send your request by adding the <code>X-React-Router-Prerender-Data</code> header with the previously retrieved object as its value. You can change any value of your <code>data</code> object (do not touch the other values, the latter being necessary for the object to be processed correctly and not throw an error):</li>\n</ol>\n<p><img alt=\"Capture d’écran 2025-04-07 à 05 56 10\" src=\"https://github.com/user-attachments/assets/42ca7c9e-5cd3-4eff-9711-1e78755c9046\"></p>\n<p>As you can see, all values ​​have been changed/overwritten by the values ​​provided via the header. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>The impact is significant, if a cache system is in place, it is possible to poison a response in which all of the data transmitted via a loader would be altered by an attacker allowing him to take control of the content of the page and modify it as he wishes via a cache-poisoning attack. This can lead to several types of attacks including potential stored XSS depending on the context in which the data is injected and/or how the data is used on the client-side.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Rachid Allam (zhero;)</li>\n<li>Yasser Allam (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/remix-run/react-router/security/advisories/GHSA-cpj6-fhp6-mr6j\">https://github.com/remix-run/react-router/security/advisories/GHSA-cpj6-fhp6-mr6j</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111\">https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87\">https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43865\">https://nvd.nist.gov/vuln/detail/CVE-2025-43865</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpj6-fhp6-mr6j\">https://github.com/advisories/GHSA-cpj6-fhp6-mr6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpj6-fhp6-mr6j",
            "title": "[react-router] React Router allows pre-render data spoofing on React-Router framework mode",
            "date_modified": "2025-04-25T14:34:18.000Z",
            "date_published": "2025-04-24T16:31:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpj6-fhp6-mr6j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>After some research, it turns out that it is possible to force an application to switch to SPA mode by adding a header to the request. If the application uses SSR and is forced to switch to SPA, this causes an error that completely corrupts the page. If a cache system is in place, this allows the response containing the error to be cached, resulting in a cache poisoning that strongly impacts the availability of the application.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerable header is <code>X-React-Router-SPA-Mode</code>; adding it to a request sent to a page/endpoint using a loader throws an error. Here is <a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407\">the vulnerable code</a> :</p>\n<img src=\"https://github.com/user-attachments/assets/0a0e9c41-70fd-4dba-9061-892dd6797291\" alt=\"Capture d’écran 2025-04-07 à 08 28 20\" width=\"672\">\n\n<p>To use the header, React-router must be used in Framework mode, and for the attack to be possible the target page must use a loader.</p>\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n<p>Versions used for our PoC: </p>\n<ul>\n<li>\"@react-router/node\": \"^7.5.0\",</li>\n<li>\"@react-router/serve\": \"^7.5.0\",</li>\n<li>\"react\": \"^19.0.0\"</li>\n<li>\"react-dom\": \"^19.0.0\"</li>\n<li>\"react-router\": \"^7.5.0\"</li>\n</ul>\n<ol>\n<li>Install React-Router with its default configuration in Framework mode (<a href=\"https://reactrouter.com/start/framework/installation\">https://reactrouter.com/start/framework/installation</a>)</li>\n<li>Add a simple page using a loader (example: <code>routes/ssr</code>)</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/d7d04e86-c549-4f4a-9200-2d1b6ac96aad\"></p>\n<ol start=\"3\">\n<li>Send a request to the endpoint using the loader (<code>/ssr</code> in our case) adding the following header:</li>\n</ol>\n<pre><code>X-React-Router-SPA-Mode: yes\n</code></pre>\n<p>Notice the difference between a request with and without the header;</p>\n<p><strong>Normal request</strong>\n<img alt=\"Capture d’écran 2025-04-07 à 08 36 27\" src=\"https://github.com/user-attachments/assets/da372b70-7c68-41c1-aac1-e5be94f22526\"></p>\n<p><strong>With the header</strong>\n<img alt=\"Capture d’écran 2025-04-07 à 08 37 01\" src=\"https://github.com/user-attachments/assets/98101720-cb5b-44e9-bff5-463c0b4dab2a\">\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/c16a101e-688c-4757-9e05-61308ed8a2de\"></p>\n<h2 id=\"impact\">Impact</h2>\n<p>If a system cache is in place, it is possible to poison the response by completely altering its content (<em>by an error message</em>), strongly impacting its availability, making the latter impractical via a cache-poisoning attack.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Rachid Allam (zhero;)</li>\n<li>Yasser Allam (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/remix-run/react-router/security/advisories/GHSA-f46r-rw29-r322\">https://github.com/remix-run/react-router/security/advisories/GHSA-f46r-rw29-r322</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111\">https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111</a></li>\n<li><a href=\"https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407\">https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43864\">https://nvd.nist.gov/vuln/detail/CVE-2025-43864</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f46r-rw29-r322\">https://github.com/advisories/GHSA-f46r-rw29-r322</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f46r-rw29-r322",
            "title": "[react-router] React Router allows a DoS via cache poisoning by forcing SPA mode",
            "date_modified": "2025-04-25T14:32:58.000Z",
            "date_published": "2025-04-24T16:31:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f46r-rw29-r322"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An unhandled error is thrown when validating invalid connectionParams which crashes a tRPC WebSocket server. This allows any unauthenticated user to crash a tRPC 11 WebSocket server.</p>\n<h3 id=\"details\">Details</h3>\n<p>Any tRPC 11 server with WebSocket enabled with a <code>createContext</code> method set is vulnerable. Here is an example:</p>\n<p><a href=\"https://github.com/user-attachments/assets/ce1b2d32-6103-4e54-8446-51535b293b05\">https://github.com/user-attachments/assets/ce1b2d32-6103-4e54-8446-51535b293b05</a></p>\n<p>I have a working reproduction here if you would like to test: <a href=\"https://github.com/lukechilds/trpc-vuln-reproduction\">https://github.com/lukechilds/trpc-vuln-reproduction</a></p>\n<p>The connectionParams logic introduced in <a href=\"https://github.com/trpc/trpc/pull/5839\">https://github.com/trpc/trpc/pull/5839</a> does not safely handle invalid connectionParams objects. During validation if the object does not match an expected shape an error will be thrown:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/unstable-core-do-not-import/http/parseConnectionParams.ts#L27-L33\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/unstable-core-do-not-import/http/parseConnectionParams.ts#L27-L33</a></p>\n<p>This is called during WebSocket connection setup inside <code>createCtxPromise()</code> here:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L435\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L435</a></p>\n<p><code>createCtxPromise</code> has handling to catch any errors and pass them up to the <code>opts.onError</code> handler:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L144-L173\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L144-L173</a></p>\n<p>However the error handler then rethrows the error:</p>\n<p><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171</a></p>\n<p>Since this is all triggered from the WebSocket <code>message</code> event there is no higher level error handling so this causes an uncaught exception and crashes the server process.</p>\n<p>This means any tRPC 11 server with WebSockets enabled can be crashed by an attacker sending an invalid connectionParams object. It doesn't matter if the server doesn't make user of connectionParams, the connectionParams logic can be initiated by the client.</p>\n<p>To fix this vulnerability tRPC should not rethrow the error after it's be handled. This patch fixes the vulnerability:</p>\n<pre><code class=\"language-patch\">From 5747b1d11946f60268eb86c59784bd6f7eb50abd Mon Sep 17 00:00:00 2001\nFrom: Luke Childs &lt;lukechilds123@gmail.com&gt;\nDate: Sun, 20 Apr 2025 13:27:10 +0700\nSubject: [PATCH] Don't throw already handled error\n\nThis error has already been handled so no need to re-throw. If we re-throw it will not be caught and will trigger an uncaught exception causing the entire server process to crash.\n---\n packages/server/src/adapters/ws.ts | 2 --\n 1 file changed, 2 deletions(-)\n\ndiff --git a/packages/server/src/adapters/ws.ts b/packages/server/src/adapters/ws.ts\nindex ad869affd..5a578b5cb 100644\n--- a/packages/server/src/adapters/ws.ts\n+++ b/packages/server/src/adapters/ws.ts\n@@ -167,8 +167,6 @@ export function getWSConnectionHandler&lt;TRouter extends AnyRouter&gt;(\n         (globalThis.setImmediate ?? globalThis.setTimeout)(() =&gt; {\n           client.close();\n         });\n-\n-        throw error;\n       });\n     }\n\n--\n2.48.1\n</code></pre>\n<h2 id=\"poc\">PoC</h2>\n<p>This script will crash the target tRPC 11 server if WebSockets are enabled:</p>\n<pre><code class=\"language-js\">#!/usr/bin/env node\n\nconst TARGET = 'ws://localhost:3000'\n\n// These malicious connection params will crash any tRPC v11.1.0 WebSocket server on validation\nconst MALICIOUS_CONNECTION_PARAMS = JSON.stringify({\n  method: \"connectionParams\",\n  data: { invalidConnectionParams: null },\n});\n\n// Open a connection to the target\nconst target = `${TARGET}?connectionParams=1`;\nconsole.log(`Opening a WebSocket to ${target}`);\nconst socket = new WebSocket(target);\n\n// Wait for the connection to be established\nsocket.addEventListener(\"open\", () =&gt; {\n  console.log(\"WebSocket established!\");\n\n  // Sends a message to the WebSocket server.\n  console.log(`Sending malicious connectionParams`);\n  socket.send(MALICIOUS_CONNECTION_PARAMS);\n  console.log(`Done!`);\n});\n\n// Handle errors\nsocket.addEventListener(\"error\", () =&gt; console.log(\"Error opening WebSocket\"));\n</code></pre>\n<p>Complete PoC with vulnerable WebSocket server here: <a href=\"https://github.com/lukechilds/trpc-vuln-reproduction\">https://github.com/lukechilds/trpc-vuln-reproduction</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/trpc/trpc/security/advisories/GHSA-pj3v-9cm8-gvj8\">https://github.com/trpc/trpc/security/advisories/GHSA-pj3v-9cm8-gvj8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43855\">https://nvd.nist.gov/vuln/detail/CVE-2025-43855</a></li>\n<li><a href=\"https://github.com/trpc/trpc/pull/5839\">https://github.com/trpc/trpc/pull/5839</a></li>\n<li><a href=\"https://github.com/trpc/trpc/commit/9beb26c636d44852e0f407f3d7a82ad54df65b4d\">https://github.com/trpc/trpc/commit/9beb26c636d44852e0f407f3d7a82ad54df65b4d</a></li>\n<li><a href=\"https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171\">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pj3v-9cm8-gvj8\">https://github.com/advisories/GHSA-pj3v-9cm8-gvj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pj3v-9cm8-gvj8",
            "title": "[@trpc/server] tRPC 11 WebSocket DoS Vulnerability",
            "date_modified": "2025-04-24T16:03:58.000Z",
            "date_published": "2025-04-24T16:03:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pj3v-9cm8-gvj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>PostHog ClickHouse Table Functions SQL Injection Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of PostHog. Authentication is required to exploit this vulnerability.</p>\n<p>The specific flaw exists within the implementation of the SQL parser. The issue results from the lack of proper validation of a user-supplied string before using it to construct SQL queries. An attacker can leverage this vulnerability to execute code in the context of the database account. Was ZDI-CAN-25350.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1520\">https://nvd.nist.gov/vuln/detail/CVE-2025-1520</a></li>\n<li><a href=\"https://github.com/PostHog/posthog/commit/6e8f035f9acd339c5ba87ba6ea40fc1ab3053d42\">https://github.com/PostHog/posthog/commit/6e8f035f9acd339c5ba87ba6ea40fc1ab3053d42</a></li>\n<li><a href=\"https://www.zerodayinitiative.com/advisories/ZDI-25-099\">https://www.zerodayinitiative.com/advisories/ZDI-25-099</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v64v-fq96-c5wv\">https://github.com/advisories/GHSA-v64v-fq96-c5wv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v64v-fq96-c5wv",
            "title": "[@posthog/plugin-server] PostHog Plugin Server SQL Injection Vulnerability",
            "date_modified": "2025-04-23T19:38:44.000Z",
            "date_published": "2025-04-23T18:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v64v-fq96-c5wv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The path shortening function is used in pnpm：</p>\n<pre><code>export function depPathToFilename (depPath: string, maxLengthWithoutHash: number): string {\n  let filename = depPathToFilenameUnescaped(depPath).replace(/[\\\\/:*?\"&lt;&gt;|]/g, '+')\n  if (filename.includes('(')) {\n    filename = filename\n      .replace(/\\)$/, '')\n      .replace(/(\\)\\()|\\(|\\)/g, '_')\n  }\n  if (filename.length &gt; maxLengthWithoutHash || filename !== filename.toLowerCase() &amp;&amp; !filename.startsWith('file+')) {\n    return `${filename.substring(0, maxLengthWithoutHash - 27)}_${createBase32Hash(filename)}`\n  }\n  return filename\n}\n</code></pre>\n<p>However, it uses the md5 function as a path shortening compression function, and if a collision occurs, it will result in the same storage path for two different libraries. Although the real names are under the package name /node_modoules/, there are no version numbers for the libraries they refer to.\n<img alt=\"Schematic picture\" src=\"https://github.com/user-attachments/assets/7b8b87ab-f297-47bd-a9dd-43be86e36ed2\">\nIn the diagram, we assume that two packages are called packageA and packageB, and that the first 90 digits of their package names must be the same, and that the hash value of the package names with versions must be the same.  Then C is the package that they both reference, but with a different version number.  (npm allows package names up to 214 bytes, so constructing such a collision package name is obvious.)</p>\n<p>Then hash(<a href=\"mailto:packageA@1.2.3\">packageA@1.2.3</a>)=hash(<a href=\"mailto:packageB@3.4.5\">packageB@3.4.5</a>).  This results in the same path for the installation, and thus under the same directory.  Although the package names under node_modoules are the full paths again, they are shared with C.\nWhat is the exact version number of C?\nIn our local tests, it depends on which one is installed later.  If packageB is installed later, the C version number will change to 2.0.0.  At this time, although package A requires the <a href=\"mailto:C@1.0.0\">C@1.0.0</a> version, package. json will only work during installation, and will not affect the actual operation.\nWe did not receive any installation error issues from pnpm during our local testing, nor did we use force, which is clearly a case that can be triggered.</p>\n<p>For a package with a package name + version number longer than 120, another package can be constructed to introduce an indirect reference to a lower version, such as one with some known vulnerability.\nAlternatively, it is possible to construct two packages with more than 120 package names + version numbers.\nThis is clearly an advantage for those intent on carrying out supply chain attacks.</p>\n<p>The solution:\nThe repair cost is also very low, just need to upgrade the md5 function to sha256.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4\">https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47829\">https://nvd.nist.gov/vuln/detail/CVE-2024-47829</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cc4-rfj6-fhg4\">https://github.com/advisories/GHSA-8cc4-rfj6-fhg4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cc4-rfj6-fhg4",
            "title": "[pnpm] pnpm uses the md5 path shortening function causes packet paths to coincide, which causes indirect packet overwriting",
            "date_modified": "2025-04-23T19:16:02.000Z",
            "date_published": "2025-04-23T14:05:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cc4-rfj6-fhg4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions 4.2.1, 4.2.2, 4.2.3, and 4.2.4 of xrpl.js were compromised and contained malicious code designed to exfiltrate private keys. If you are using one of these versions, stop immediately and rotate any private keys or secrets used with affected systems.</p>\n<p>Version 2.14.2 is also malicious, though it is less likely to lead to exploitation as it is not compatible with other 2.x versions.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to version 4.2.5 or 2.14.3.</p>\n<h3 id=\"required-actions\">Required Actions</h3>\n<p>To secure funds, think carefully about whether any keys may have been compromised by this supply chain attack, and mitigate by sending funds to secure wallets, and/or rotating keys:</p>\n<p>The XRP Ledger supports key rotation: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></p>\n<p>If any account's master key is potentially compromised, you should disable it: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx</a></li>\n<li><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32965\">https://nvd.nist.gov/vuln/detail/CVE-2025-32965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/advisories/GHSA-33qr-m49q-rxfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx",
            "title": "[xrpl] Compromised xrpl.js versions 4.2.1, 4.2.2, 4.2.3, 4.2.4, and 2.14.2",
            "date_modified": "2025-04-22T23:53:56.000Z",
            "date_published": "2025-04-22T18:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions 4.2.1, 4.2.2, 4.2.3, and 4.2.4 of xrpl.js were compromised and contained malicious code designed to exfiltrate private keys. If you are using one of these versions, stop immediately and rotate any private keys or secrets used with affected systems.</p>\n<p>Version 2.14.2 is also malicious, though it is less likely to lead to exploitation as it is not compatible with other 2.x versions.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to version 4.2.5 or 2.14.3.</p>\n<h3 id=\"required-actions\">Required Actions</h3>\n<p>To secure funds, think carefully about whether any keys may have been compromised by this supply chain attack, and mitigate by sending funds to secure wallets, and/or rotating keys:</p>\n<p>The XRP Ledger supports key rotation: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></p>\n<p>If any account's master key is potentially compromised, you should disable it: <a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx</a></li>\n<li><a href=\"https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor\">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></li>\n<li><a href=\"https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair\">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32965\">https://nvd.nist.gov/vuln/detail/CVE-2025-32965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33qr-m49q-rxfx\">https://github.com/advisories/GHSA-33qr-m49q-rxfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx",
            "title": "[xrpl] Compromised xrpl.js versions 4.2.1, 4.2.2, 4.2.3, 4.2.4, and 2.14.2",
            "date_modified": "2025-04-22T23:53:56.000Z",
            "date_published": "2025-04-22T18:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33qr-m49q-rxfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>QMarkdown (aka quasar-ui-qmarkdown) before 2.0.5 allows XSS via headers even when when no-html is set.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43954\">https://nvd.nist.gov/vuln/detail/CVE-2025-43954</a></li>\n<li><a href=\"https://github.com/quasarframework/quasar-ui-qmarkdown/commit/b61dff84851c45369cf931db5bd93db177c657f6\">https://github.com/quasarframework/quasar-ui-qmarkdown/commit/b61dff84851c45369cf931db5bd93db177c657f6</a></li>\n<li><a href=\"https://github.com/quasarframework/quasar-ui-qmarkdown/compare/v2.0.4...v2.0.5\">https://github.com/quasarframework/quasar-ui-qmarkdown/compare/v2.0.4...v2.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wm65-ph3w-587c\">https://github.com/advisories/GHSA-wm65-ph3w-587c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wm65-ph3w-587c",
            "title": "[@quasar/quasar-ui-qmarkdown] QMarkdown Cross-Site Scripting (XSS) vulnerability",
            "date_modified": "2025-04-21T16:18:47.000Z",
            "date_published": "2025-04-20T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wm65-ph3w-587c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>\n<p>Users using the the following pattern are affected:</p>\n<pre><code class=\"language-js\">fastify.post('/', {\n  handler(request, reply) {\n    reply.code(200).send(request.body)\n  },\n  schema: {\n    body: {\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              'foo': {\n                type: 'string',\n              }\n            },\n            required: ['foo']\n          }\n        },\n      }\n    }\n  }\n})\n</code></pre>\n<p>User using the following pattern are <strong>not</strong> affected:</p>\n<pre><code class=\"language-js\">fastify.post('/', {\n  handler(request, reply) {\n    reply.code(200).send(request.body)\n  },\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        'foo': {\n          type: 'string',\n        }\n      },\n      required: ['foo']\n    }\n  }\n})\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not specify multiple content types in the schema.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<p><a href=\"https://hackerone.com/reports/3087928\">https://hackerone.com/reports/3087928</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc\">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>\n<li><a href=\"https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418\">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32442\">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>\n<li><a href=\"https://hackerone.com/reports/3087928\">https://hackerone.com/reports/3087928</a></li>\n<li><a href=\"https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4\">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg2h-6x62-wpwc\">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg2h-6x62-wpwc",
            "title": "[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass",
            "date_modified": "2025-04-20T04:40:55.000Z",
            "date_published": "2025-04-18T15:02:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg2h-6x62-wpwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Web pages and web extensions using <code>ses</code> and the <code>Compartment</code> API to evaluate third-party code in an isolated execution environment that have also elsewhere used <code>const</code>, <code>let</code>, and <code>class</code> bindings in the top-level scope of a <code>&lt;script&gt;</code> tag will have inadvertently revealed these bindings in the lexical scope of third-party code.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This compromise is addressed in <code>ses</code> version <code>1.12.0</code>. The mechanism for confining third-party code involves a <code>with</code> block and a semi-opaque scope <code>Proxy</code>. The proxy previously revealed any named property to the surrounding lexical scope if it were absent on <code>globalThis</code>, so that the third-party code would receive an informative <code>ReferenceError</code>, relying on the invalid assumption that only properties of <code>globalThis</code> are in the top-level lexical scope. The solution makes the scope proxy fully opaque. Consequently, accessing an unbound free lexical name will produce <code>undefined</code> instead of throwing <code>ReferenceError</code>.\nAssigning to an unbound free lexical name will continue to throw a <code>ReferenceError</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This problem can be mitigated either by avoiding top-level <code>let</code>, <code>const</code>, or <code>class</code> bindings in <code>&lt;script&gt;</code> tags, which is an existing industry best-practice, or change these to <code>var</code> bindings to be reflected on <code>globalThis</code>, or upgrade <code>ses</code> to version <code>1.12.0</code> or greater.</p>\n<p>Some bundlers by default transform top-level <code>let</code>, <code>const</code>, and <code>class</code> bindings to <code>var</code>.</p>\n<h3 id=\"disclosure\">Disclosure</h3>\n<p>This vulnerability was disclosed by @mingijunggrape in the course of their studies at UNIST (Ulsan National Institute of Science and Technology) as a member of the Web Security Lab (<a href=\"https://websec-lab.github.io/\">https://websec-lab.github.io/</a>).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-h9w6-f932-gq62\">https://github.com/endojs/endo/security/advisories/GHSA-h9w6-f932-gq62</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32792\">https://nvd.nist.gov/vuln/detail/CVE-2025-32792</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h9w6-f932-gq62\">https://github.com/advisories/GHSA-h9w6-f932-gq62</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h9w6-f932-gq62",
            "title": "[ses] ses's global contour bindings leak into Compartment lexical scope",
            "date_modified": "2025-04-22T01:49:47.000Z",
            "date_published": "2025-04-18T15:10:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h9w6-f932-gq62"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability in the Backstage permission plugin backend allows callers to extract some information about the conditional decisions returned by the permission policy installed in the permission backend. If the permission system is not in use or if the installed permission policy does not use conditional decisions, there is no impact.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been resolved in version <code>0.6.0</code> of the permissions backend.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Administrators of the permission policies can ensure that they are crafted in such a way that conditional decisions do not contain any sensitive information.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a>\nVisit our Discord, linked to in <a href=\"https://github.com/backstage/backstage\">Backstage README</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-f8j4-p5cr-p777\">https://github.com/backstage/backstage/security/advisories/GHSA-f8j4-p5cr-p777</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32791\">https://nvd.nist.gov/vuln/detail/CVE-2025-32791</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f8j4-p5cr-p777\">https://github.com/advisories/GHSA-f8j4-p5cr-p777</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f8j4-p5cr-p777",
            "title": "[@backstage/plugin-permission-backend] Permission policy information leakage in Backstage permission system",
            "date_modified": "2025-04-17T12:39:25.000Z",
            "date_published": "2025-04-16T15:34:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f8j4-p5cr-p777"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32997\">https://nvd.nist.gov/vuln/detail/CVE-2025-32997</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/pull/1096\">https://github.com/chimurai/http-proxy-middleware/pull/1096</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e\">https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gqv-wp59-fq42\">https://github.com/advisories/GHSA-9gqv-wp59-fq42</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42",
            "title": "[http-proxy-middleware] http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed",
            "date_modified": "2025-04-28T14:28:54.000Z",
            "date_published": "2025-04-15T03:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32996\">https://nvd.nist.gov/vuln/detail/CVE-2025-32996</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/pull/1089\">https://github.com/chimurai/http-proxy-middleware/pull/1089</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145\">https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4\">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4www-5p9h-95mh\">https://github.com/advisories/GHSA-4www-5p9h-95mh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh",
            "title": "[http-proxy-middleware] http-proxy-middleware can call writeBody twice because \"else if\" is not used",
            "date_modified": "2025-04-28T14:27:15.000Z",
            "date_published": "2025-04-15T03:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (AWS CDK)</a> is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. In the CDK, developers organize their applications into reusable components called \"<a href=\"https://docs.aws.amazon.com/cdk/v2/guide/constructs.html\">constructs</a>,\" which are organized into a hierarchical tree structure. One of the features of this framework is the ability to call \"<a href=\"https://docs.aws.amazon.com/cdk/v2/guide/aspects.html\">Aspects</a>,\" which are mechanisms to set configuration options for all AWS Resources in a particular part of the hierarchy at once. Aspect execution happens in a specific order, and the last Aspect to execute controls the final values in the template.</p>\n<p>AWS CDK version <a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.172.0\">2.172.0</a> introduced a new priority system for Aspects. Prior to this version, CDK would run Aspects based on hierarchical location. The new priority system takes precedence over hierarchical location, altering the invocation order of Aspects. Different priority classes were introduced: Aspects added by CDK APIs were classified as MUTATING (priority 200), while Aspects added directly by the user were classified as DEFAULT (priority 500) unless the user specified otherwise. As a result of this change, CDK apps that use a custom Aspect to assign a default permissions boundary and then use a built-in CDK method to override it on select resources could have unexpected permissions boundaries assigned. </p>\n<p>The following is an affected code sample:</p>\n<pre><code class=\"language-ts\">Aspects.of(stack).add(new CustomAspectThatAssignsDefaultPermissionsBoundaries());   // {1}\n\nPermissionsBoundary.of(lambdaFunc).apply(...);  // {2} -- uses Aspects internally\n</code></pre>\n<p>In versions prior to 2.172.0, the Aspect added by {2} would invoke last and assign its permissions boundary to the Lambda function role.</p>\n<p>In versions 2.172.0 and after, the Aspect added by {2} would have priority 200 while the Aspect added by {1} would have priority 500 and therefore be invoked last. The Lambda function role would get the permissions boundary of {1} assigned, which may not be what users expect. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>If an unexpected permissions boundary is selected for a role, it could lead to that role having insufficient permissions. Alternatively, this could lead to a role having wider permissions than intended; however, this could happen only in combination with an overly permissive role policy, as permissions boundaries do not grant permissions by themselves.</p>\n<p>Impacted versions: versions 2.172.0 up until 2.189.1</p>\n<h3 id=\"patches\">Patches</h3>\n<p>In version 2.189.1, the behavior has been reverted to the behavior of pre-2.172.0. The new behavior is available through a feature flag:</p>\n<pre><code class=\"language-json\">{\n  \"context\": {\n    \"@aws-cdk/core:aspectPrioritiesMutating\": true\n  }\n}\n</code></pre>\n<p>The patches are included in AWS CDK Library version 2.189.1 and after. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a workaround, users can use the location hierarchy to order the invocation of Aspects. To do this, users can assign the custom Aspect a priority of MUTATING to ensure it has the same priority as the Aspect added by the CDK API, and that the location hierarchy is used for the order of invocation Aspects.</p>\n<p>The following code is an example:</p>\n<pre><code class=\"language-ts\">Aspects.of(stack).add(new CustomAspectThatAssignsDefaultPermissionsBoundaries(), {\n  priority: AspectPriority.MUTATING,\n});\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank GoDaddy for collaborating on this issue through the coordinated vulnerability disclosure process.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-cdk/security/advisories/GHSA-qc59-cxj2-c2w4\">https://github.com/aws/aws-cdk/security/advisories/GHSA-qc59-cxj2-c2w4</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/commit/b7f4bc7aee1d99b70e4d9d3cedea53e910ee37ef\">https://github.com/aws/aws-cdk/commit/b7f4bc7aee1d99b70e4d9d3cedea53e910ee37ef</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.189.1\">https://github.com/aws/aws-cdk/releases/tag/v2.189.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qc59-cxj2-c2w4\">https://github.com/advisories/GHSA-qc59-cxj2-c2w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qc59-cxj2-c2w4",
            "title": "[aws-cdk-lib] aws-cdk-lib's aspect order change causes different Permissions Boundary assigned to Role",
            "date_modified": "2025-04-15T14:48:50.000Z",
            "date_published": "2025-04-15T14:48:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qc59-cxj2-c2w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package jquery-validation before 1.20.0 are vulnerable to Cross-site Scripting (XSS) in the showLabel() function, which may take input from a user-controlled placeholder value. This value will populate a message via $.validator.messages in a user localizable dictionary.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3573\">https://nvd.nist.gov/vuln/detail/CVE-2025-3573</a></li>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/pull/2462\">https://github.com/jquery-validation/jquery-validation/pull/2462</a></li>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/commit/7a490d8f39bd988027568ddcf51755e1f4688902\">https://github.com/jquery-validation/jquery-validation/commit/7a490d8f39bd988027568ddcf51755e1f4688902</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-JQUERYVALIDATION-5952285\">https://security.snyk.io/vuln/SNYK-JS-JQUERYVALIDATION-5952285</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrj2-ph5q-jxw2\">https://github.com/advisories/GHSA-rrj2-ph5q-jxw2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrj2-ph5q-jxw2",
            "title": "[jquery-validation] jquery-validation vulnerable to Cross-site Scripting",
            "date_modified": "2025-04-15T14:24:22.000Z",
            "date_published": "2025-04-15T06:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrj2-ph5q-jxw2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>File Upload vulnerability in nestjs nest prior to v.11.0.16 allows a remote attacker to execute arbitrary code via the Content-Type header.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29409\">https://nvd.nist.gov/vuln/detail/CVE-2024-29409</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495\">https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495</a></li>\n<li><a href=\"https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f\">https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f</a></li>\n<li><a href=\"https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19\">https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/14876\">https://github.com/nestjs/nest/issues/14876</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038\">https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038</a></li>\n<li><a href=\"https://github.com/nestjs/nest/pull/14881\">https://github.com/nestjs/nest/pull/14881</a></li>\n<li><a href=\"https://github.com/nestjs/nest/releases/tag/v11.0.16\">https://github.com/nestjs/nest/releases/tag/v11.0.16</a></li>\n<li><a href=\"https://github.com/nestjs/nest/releases/tag/v10.4.16\">https://github.com/nestjs/nest/releases/tag/v10.4.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj7v-w2c7-cp7c\">https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c",
            "title": "[@nestjs/common] nest allows a remote attacker to execute arbitrary code via the Content-Type header",
            "date_modified": "2025-04-14T22:25:20.000Z",
            "date_published": "2025-03-14T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}