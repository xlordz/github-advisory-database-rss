{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Versions of the package git-commit-info before 2.0.2 are vulnerable to Command Injection such that the package-exported method gitCommitInfo() fails to sanitize its parameter commit, which later flows into a sensitive command execution API. As a result, attackers may inject arguments to the git binary.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26134\">https://nvd.nist.gov/vuln/detail/CVE-2023-26134</a></li>\n<li><a href=\"https://github.com/JPeer264/node-git-commit-info/issues/24\">https://github.com/JPeer264/node-git-commit-info/issues/24</a></li>\n<li><a href=\"https://github.com/JPeer264/node-git-commit-info/commit/f7c491ede51f886a988af9b266797cb24591d18c\">https://github.com/JPeer264/node-git-commit-info/commit/f7c491ede51f886a988af9b266797cb24591d18c</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-GITCOMMITINFO-5740174\">https://security.snyk.io/vuln/SNYK-JS-GITCOMMITINFO-5740174</a></li>\n<li><a href=\"https://www.npmjs.com/package/execa/v/5.1.0#execacommandcommand-options\">https://www.npmjs.com/package/execa/v/5.1.0#execacommandcommand-options</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h42j-mrmp-9369\">https://github.com/advisories/GHSA-h42j-mrmp-9369</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h42j-mrmp-9369",
            "title": "[git-commit-info] git-commit-info vulnerable to Command Injection",
            "date_modified": "2024-10-30T18:00:11.000Z",
            "date_published": "2023-06-28T06:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h42j-mrmp-9369"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A path traversal vulnerability exists in the <code>getFullPath</code> method of langchain-ai/langchainjs version 0.2.5. This vulnerability allows attackers to save files anywhere in the filesystem, overwrite existing text files, read <code>.txt</code> files, and delete files. The vulnerability is exploited through the <code>setFileContent</code>, <code>getParsedFile</code>, and <code>mdelete</code> methods, which do not properly sanitize user input.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-7774\">https://nvd.nist.gov/vuln/detail/CVE-2024-7774</a></li>\n<li><a href=\"https://github.com/langchain-ai/langchainjs/commit/a0fad77d6b569e5872bd4a9d33be0c0785e538a9\">https://github.com/langchain-ai/langchainjs/commit/a0fad77d6b569e5872bd4a9d33be0c0785e538a9</a></li>\n<li><a href=\"https://huntr.com/bounties/8fe40685-b714-4191-af7a-3de5e5628cee\">https://huntr.com/bounties/8fe40685-b714-4191-af7a-3de5e5628cee</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hc5w-c9f8-9cc4\">https://github.com/advisories/GHSA-hc5w-c9f8-9cc4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hc5w-c9f8-9cc4",
            "title": "[langchain] Langchain Path Traversal vulnerability",
            "date_modified": "2024-10-29T19:40:08.000Z",
            "date_published": "2024-10-29T15:32:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hc5w-c9f8-9cc4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-7042\">https://nvd.nist.gov/vuln/detail/CVE-2024-7042</a></li>\n<li><a href=\"https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6\">https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6</a></li>\n<li><a href=\"https://huntr.com/bounties/b612defb-1104-4fff-9fef-001ab07c7b2d\">https://huntr.com/bounties/b612defb-1104-4fff-9fef-001ab07c7b2d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m59-8fmv-m5f9\">https://github.com/advisories/GHSA-6m59-8fmv-m5f9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m59-8fmv-m5f9",
            "title": "[@langchain/community] @langchain/community SQL Injection vulnerability",
            "date_modified": "2024-10-29T19:38:30.000Z",
            "date_published": "2024-10-29T15:32:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m59-8fmv-m5f9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Elliptic prior to 6.6.0 for Node.js, in its for ECDSA implementation, does not correctly verify valid signatures if the hash contains at least four leading 0 bytes and when the order of the elliptic curve's base point is smaller than the hash, because of an _truncateToN anomaly. This leads to valid signatures being rejected. Legitimate transactions or communications may be incorrectly flagged as invalid.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48948\">https://nvd.nist.gov/vuln/detail/CVE-2024-48948</a></li>\n<li><a href=\"https://github.com/indutny/elliptic/issues/321\">https://github.com/indutny/elliptic/issues/321</a></li>\n<li><a href=\"https://github.com/indutny/elliptic/pull/322\">https://github.com/indutny/elliptic/pull/322</a></li>\n<li><a href=\"https://github.com/indutny/elliptic/commit/34c853478cec1be4e37260ed2cb12cdbdc6402cf\">https://github.com/indutny/elliptic/commit/34c853478cec1be4e37260ed2cb12cdbdc6402cf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fc9h-whq2-v747\">https://github.com/advisories/GHSA-fc9h-whq2-v747</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fc9h-whq2-v747",
            "title": "[elliptic] Valid ECDSA signatures erroneously rejected in Elliptic",
            "date_modified": "2024-10-28T18:12:53.000Z",
            "date_published": "2024-10-15T15:30:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fc9h-whq2-v747"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>CycloneDX cdxgen through 10.10.7, when run against an untrusted codebase, may execute code contained within build-related files such as build.gradle.kts, a similar issue to CVE-2022-24441. cdxgen is used by, for example, OWASP dep-scan. NOTE: this has been characterized as a design limitation, rather than an implementation mistake.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50611\">https://nvd.nist.gov/vuln/detail/CVE-2024-50611</a></li>\n<li><a href=\"https://github.com/CycloneDX/cdxgen/issues/1328\">https://github.com/CycloneDX/cdxgen/issues/1328</a></li>\n<li><a href=\"https://github.com/CycloneDX/cdxgen/releases\">https://github.com/CycloneDX/cdxgen/releases</a></li>\n<li><a href=\"https://owasp.org/www-project-dep-scan\">https://owasp.org/www-project-dep-scan</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxf3-vgpm-fv9p\">https://github.com/advisories/GHSA-hxf3-vgpm-fv9p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxf3-vgpm-fv9p",
            "title": "[@cyclonedx/cdxgen] CycloneDX cdxgen may execute code contained within build-related files",
            "date_modified": "2024-10-28T15:05:27.000Z",
            "date_published": "2024-10-28T00:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxf3-vgpm-fv9p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Useragent is a user agent parser for Node.js. All versions as of time of publication contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26311\">https://nvd.nist.gov/vuln/detail/CVE-2020-26311</a></li>\n<li><a href=\"https://github.com/3rd-Eden/useragent/issues/167\">https://github.com/3rd-Eden/useragent/issues/167</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-312-redos-useragent\">https://securitylab.github.com/advisories/GHSL-2020-312-redos-useragent</a></li>\n<li><a href=\"https://github.com/3rd-Eden/useragent/commit/4c3ee79358bea72d88fe78ac98f4f861db40b89b\">https://github.com/3rd-Eden/useragent/commit/4c3ee79358bea72d88fe78ac98f4f861db40b89b</a></li>\n<li><a href=\"https://github.com/3rd-Eden/useragent/blob/ffa906f923183c85fbb9e6c90f19345e2bd3c52a/lib/regexps.js#L5568\">https://github.com/3rd-Eden/useragent/blob/ffa906f923183c85fbb9e6c90f19345e2bd3c52a/lib/regexps.js#L5568</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mgfv-m47x-4wqp\">https://github.com/advisories/GHSA-mgfv-m47x-4wqp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mgfv-m47x-4wqp",
            "title": "[useragent] useragent Regular Expression Denial of Service vulnerability",
            "date_modified": "2024-10-28T15:01:52.000Z",
            "date_published": "2024-10-26T21:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mgfv-m47x-4wqp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Nope is a JavaScript validator. Versions 0.11.3 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). This vulnerability is fixed in 0.12.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26309\">https://nvd.nist.gov/vuln/detail/CVE-2020-26309</a></li>\n<li><a href=\"https://github.com/ftonato/nope-validator/issues/352\">https://github.com/ftonato/nope-validator/issues/352</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-303-redos-nope-validator\">https://securitylab.github.com/advisories/GHSL-2020-303-redos-nope-validator</a></li>\n<li><a href=\"https://github.com/ftonato/nope-validator/commit/4564b7444dcd92769e5c5b80420469c9f18b7a05#diff-9c399c46fa266bcf2be2704fbb369181726959e148e95ab548a32ef9ca9e7d47R1\">https://github.com/ftonato/nope-validator/commit/4564b7444dcd92769e5c5b80420469c9f18b7a05#diff-9c399c46fa266bcf2be2704fbb369181726959e148e95ab548a32ef9ca9e7d47R1</a></li>\n<li><a href=\"https://github.com/ftonato/nope-validator/commit/c8af9f93abe8f4786f8f69d2b0518f8ca3652f44\">https://github.com/ftonato/nope-validator/commit/c8af9f93abe8f4786f8f69d2b0518f8ca3652f44</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3phv-83cj-p8p7\">https://github.com/advisories/GHSA-3phv-83cj-p8p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3phv-83cj-p8p7",
            "title": "[nope-validator] nope-validator Regular Expression Denial of Service vulnerability",
            "date_modified": "2024-10-28T14:56:39.000Z",
            "date_published": "2024-10-26T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3phv-83cj-p8p7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Validate.js provides a declarative way of validating javascript objects. Versions 0.13.1 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26308\">https://nvd.nist.gov/vuln/detail/CVE-2020-26308</a></li>\n<li><a href=\"https://github.com/ansman/validate.js/issues/342\">https://github.com/ansman/validate.js/issues/342</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-302-redos-validate.js\">https://securitylab.github.com/advisories/GHSL-2020-302-redos-validate.js</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rv73-9c8w-jp4c\">https://github.com/advisories/GHSA-rv73-9c8w-jp4c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rv73-9c8w-jp4c",
            "title": "[validate.js] validate.js Regular Expression Denial of Service vulnerability",
            "date_modified": "2024-10-28T14:51:34.000Z",
            "date_published": "2024-10-26T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rv73-9c8w-jp4c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Knwl.js is a Javascript library that parses through text for dates, times, phone numbers, emails, places, and more. Versions 1.0.2 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26306\">https://nvd.nist.gov/vuln/detail/CVE-2020-26306</a></li>\n<li><a href=\"https://github.com/benhmoore/Knwl/issues/106\">https://github.com/benhmoore/Knwl/issues/106</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-296-redos-Knwl.js\">https://securitylab.github.com/advisories/GHSL-2020-296-redos-Knwl.js</a></li>\n<li><a href=\"https://github.com/benhmoore/Knwl/commit/88aa966b1415a167c7c91b70053b72c7762c1cc0\">https://github.com/benhmoore/Knwl/commit/88aa966b1415a167c7c91b70053b72c7762c1cc0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68qg-g787-3rp5\">https://github.com/advisories/GHSA-68qg-g787-3rp5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68qg-g787-3rp5",
            "title": "[knwl.js] Knwl.js Regular Expression Denial of Service vulnerability",
            "date_modified": "2024-10-28T14:50:19.000Z",
            "date_published": "2024-10-26T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68qg-g787-3rp5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>CommonRegexJS is a CommonRegex port for JavaScript. All available versions contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26305\">https://nvd.nist.gov/vuln/detail/CVE-2020-26305</a></li>\n<li><a href=\"https://github.com/talyssonoc/CommonRegexJS/issues/4\">https://github.com/talyssonoc/CommonRegexJS/issues/4</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-291-redos-CommonRegexJS\">https://securitylab.github.com/advisories/GHSL-2020-291-redos-CommonRegexJS</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmvv-57rg-5g86\">https://github.com/advisories/GHSA-pmvv-57rg-5g86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmvv-57rg-5g86",
            "title": "[commonregex] CommonRegexJS Regular Expression Denial of Service vulnerability",
            "date_modified": "2024-10-28T14:44:58.000Z",
            "date_published": "2024-10-26T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmvv-57rg-5g86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Foundation is a front-end framework. Versions 6.3.3 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, it is unknown if any fixes are available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26304\">https://nvd.nist.gov/vuln/detail/CVE-2020-26304</a></li>\n<li><a href=\"https://github.com/foundation/foundation-sites/issues/12180\">https://github.com/foundation/foundation-sites/issues/12180</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-290-redos-foundation-sites\">https://securitylab.github.com/advisories/GHSL-2020-290-redos-foundation-sites</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p8pc-3f7w-jr5q\">https://github.com/advisories/GHSA-p8pc-3f7w-jr5q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p8pc-3f7w-jr5q",
            "title": "[foundation-sites] Foundation Regular Expression Denial of Service vulnerability",
            "date_modified": "2024-10-28T14:44:07.000Z",
            "date_published": "2024-10-26T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p8pc-3f7w-jr5q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>insane is a whitelist-oriented HTML sanitizer. Versions 2.6.2 and prior contain one or more regular expressions that are vulnerable to Regular Expression Denial of Service (ReDoS). As of time of publication, no known patches are available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26303\">https://nvd.nist.gov/vuln/detail/CVE-2020-26303</a></li>\n<li><a href=\"https://github.com/bevacqua/insane/issues/19\">https://github.com/bevacqua/insane/issues/19</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2020-289-redos-insane\">https://securitylab.github.com/advisories/GHSL-2020-289-redos-insane</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w455-mfq9-hf74\">https://github.com/advisories/GHSA-w455-mfq9-hf74</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w455-mfq9-hf74",
            "title": "[insane] insane vulnerable to Regular Expression Denial of Service",
            "date_modified": "2024-10-28T14:40:04.000Z",
            "date_published": "2024-10-26T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w455-mfq9-hf74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The ReDoS can be exploited through the <code>parseHTML</code> function in the <code>html-parser.ts</code> file. This flaw allows attackers to slow down the application by providing specially crafted input that causes inefficient processing of regular expressions, leading to excessive resource consumption.</p>\n<p>To demonstrate this vulnerability, here's an example. In a Vue client-side application, create a new Vue instance with a template string that includes a <code>&lt;script&gt;</code> tag but closes it incorrectly with something like <code>&lt;/textarea&gt;</code>.</p>\n<pre><code class=\"language-javascript\">new Vue({\n  el: '#app',\n  template: '\n    &lt;div&gt;\n      Hello, world!\n      &lt;script&gt;${'&lt;'.repeat(1000000)}&lt;/textarea&gt;\n    &lt;/div&gt;'\n});\n</code></pre>\n<p>Next, set up a basic HTML page (e.g., index.html) to load this JavaScript and mount the Vue instance:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;My first Vue app&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\\\"app\\\"&gt;Loading...&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>When you visit the app in your browser at <a href=\"http://localhost:3000\">http://localhost:3000</a>, you'll notice that the time taken to parse and mount the Vue application increases significantly due to the ReDoS vulnerability, demonstrating how the flaw can affect performance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9506\">https://nvd.nist.gov/vuln/detail/CVE-2024-9506</a></li>\n<li><a href=\"https://www.herodevs.com/vulnerability-directory/cve-2024-9506\">https://www.herodevs.com/vulnerability-directory/cve-2024-9506</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5j4c-8p2g-v4jx\">https://github.com/advisories/GHSA-5j4c-8p2g-v4jx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5j4c-8p2g-v4jx",
            "title": "[vue] ReDoS vulnerability in vue package that is exploitable through inefficient regex evaluation in the parseHTML function",
            "date_modified": "2024-10-24T20:05:37.000Z",
            "date_published": "2024-10-15T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5j4c-8p2g-v4jx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Snyk gradle plugin is vulnerable to Code Injection when scanning an untrusted Gradle project. The vulnerability can be triggered if Snyk test is run inside the untrusted project due to the improper handling of the current working directory name. Snyk recommends only scanning trusted projects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48964\">https://nvd.nist.gov/vuln/detail/CVE-2024-48964</a></li>\n<li><a href=\"https://github.com/snyk/snyk-gradle-plugin/commit/2f5ee7579f00660282dd161a0b79690f4a9c865d\">https://github.com/snyk/snyk-gradle-plugin/commit/2f5ee7579f00660282dd161a0b79690f4a9c865d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qqqw-gm93-qf6m\">https://github.com/advisories/GHSA-qqqw-gm93-qf6m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qqqw-gm93-qf6m",
            "title": "[snyk-gradle-plugin] OS Command Injection in Snyk gradle plugin",
            "date_modified": "2024-10-30T16:12:37.000Z",
            "date_published": "2024-10-23T21:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qqqw-gm93-qf6m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Snyk php plugin is vulnerable to Code Injection when scanning an untrusted PHP project. The vulnerability can be triggered if Snyk test is run inside the untrusted project due to the improper handling of the current working directory name. Snyk recommends only scanning trusted projects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48963\">https://nvd.nist.gov/vuln/detail/CVE-2024-48963</a></li>\n<li><a href=\"https://github.com/snyk/snyk-php-plugin/releases/tag/v1.10.0\">https://github.com/snyk/snyk-php-plugin/releases/tag/v1.10.0</a></li>\n<li><a href=\"https://github.com/snyk/snyk-php-plugin/commit/9189f093b94f9ce51672f6919ffbc98171fd66d4\">https://github.com/snyk/snyk-php-plugin/commit/9189f093b94f9ce51672f6919ffbc98171fd66d4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-69f9-h8f9-7vjf\">https://github.com/advisories/GHSA-69f9-h8f9-7vjf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-69f9-h8f9-7vjf",
            "title": "[snyk-php-plugin] OS Command Injection in Snyk php plugin",
            "date_modified": "2024-10-23T21:40:15.000Z",
            "date_published": "2024-10-23T21:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-69f9-h8f9-7vjf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package http-proxy-middleware before 2.0.7, from 3.0.0 and before 3.0.3 are vulnerable to Denial of Service (DoS) due to an UnhandledPromiseRejection error thrown by micromatch. An attacker could kill the Node.js process and crash the server by making requests to certain paths.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21536\">https://nvd.nist.gov/vuln/detail/CVE-2024-21536</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/0b4274e8cc9e9a2c5a06f35fbf456ccfcebc55a5\">https://github.com/chimurai/http-proxy-middleware/commit/0b4274e8cc9e9a2c5a06f35fbf456ccfcebc55a5</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/788b21e4aff38332d6319557d4a5b1b13b1f9a22\">https://github.com/chimurai/http-proxy-middleware/commit/788b21e4aff38332d6319557d4a5b1b13b1f9a22</a></li>\n<li><a href=\"https://gist.github.com/mhassan1/28be67266d82a53708ed59ce5dc3c94a\">https://gist.github.com/mhassan1/28be67266d82a53708ed59ce5dc3c94a</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-HTTPPROXYMIDDLEWARE-8229906\">https://security.snyk.io/vuln/SNYK-JS-HTTPPROXYMIDDLEWARE-8229906</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c7qv-q95q-8v27\">https://github.com/advisories/GHSA-c7qv-q95q-8v27</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c7qv-q95q-8v27",
            "title": "[http-proxy-middleware] Denial of service in http-proxy-middleware",
            "date_modified": "2024-10-22T19:47:42.000Z",
            "date_published": "2024-10-19T06:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c7qv-q95q-8v27"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package http-proxy-middleware before 2.0.7, from 3.0.0 and before 3.0.3 are vulnerable to Denial of Service (DoS) due to an UnhandledPromiseRejection error thrown by micromatch. An attacker could kill the Node.js process and crash the server by making requests to certain paths.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21536\">https://nvd.nist.gov/vuln/detail/CVE-2024-21536</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/0b4274e8cc9e9a2c5a06f35fbf456ccfcebc55a5\">https://github.com/chimurai/http-proxy-middleware/commit/0b4274e8cc9e9a2c5a06f35fbf456ccfcebc55a5</a></li>\n<li><a href=\"https://github.com/chimurai/http-proxy-middleware/commit/788b21e4aff38332d6319557d4a5b1b13b1f9a22\">https://github.com/chimurai/http-proxy-middleware/commit/788b21e4aff38332d6319557d4a5b1b13b1f9a22</a></li>\n<li><a href=\"https://gist.github.com/mhassan1/28be67266d82a53708ed59ce5dc3c94a\">https://gist.github.com/mhassan1/28be67266d82a53708ed59ce5dc3c94a</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-HTTPPROXYMIDDLEWARE-8229906\">https://security.snyk.io/vuln/SNYK-JS-HTTPPROXYMIDDLEWARE-8229906</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c7qv-q95q-8v27\">https://github.com/advisories/GHSA-c7qv-q95q-8v27</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c7qv-q95q-8v27",
            "title": "[http-proxy-middleware] Denial of service in http-proxy-middleware",
            "date_modified": "2024-10-22T19:47:42.000Z",
            "date_published": "2024-10-19T06:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c7qv-q95q-8v27"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The following bundled files within the Mermaid NPM package contain a bundled version of DOMPurify that is vulnerable to <a href=\"https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674\">https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674</a>, potentially resulting in an XSS attack.</p>\n<p>This affects the built:</p>\n<ul>\n<li><code>dist/mermaid.min.js</code></li>\n<li><code>dist/mermaid.js</code></li>\n<li><code>dist/mermaid.esm.mjs</code></li>\n<li><code>dist/mermaid.esm.min.mjs</code></li>\n</ul>\n<p>This will also affect users that use the above files via a CDN link, e.g. <code>https://cdn.jsdelivr.net/npm/mermaid@10.9.2/dist/mermaid.min.js</code></p>\n<p><strong>Users that use the default NPM export of <code>mermaid</code>, e.g. <code>import mermaid from 'mermaid'</code>, or the <code>dist/mermaid.core.mjs</code> file, do not use this bundled version of DOMPurify, and can easily update using their package manager with something like <code>npm audit fix</code>.</strong></p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><code>develop</code> branch: 6c785c93166c151d27d328ddf68a13d9d65adc00</li>\n<li>backport to v10: 92a07ffe40aab2769dd1c3431b4eb5beac282b34</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674\">https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/security/advisories/GHSA-m4gq-x24j-jpmf\">https://github.com/mermaid-js/mermaid/security/advisories/GHSA-m4gq-x24j-jpmf</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/commit/6c785c93166c151d27d328ddf68a13d9d65adc00\">https://github.com/mermaid-js/mermaid/commit/6c785c93166c151d27d328ddf68a13d9d65adc00</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/commit/92a07ffe40aab2769dd1c3431b4eb5beac282b34\">https://github.com/mermaid-js/mermaid/commit/92a07ffe40aab2769dd1c3431b4eb5beac282b34</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4gq-x24j-jpmf\">https://github.com/advisories/GHSA-m4gq-x24j-jpmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4gq-x24j-jpmf",
            "title": "[mermaid] Prototype pollution vulnerability found in Mermaid's bundled version of DOMPurify",
            "date_modified": "2024-10-23T16:58:48.000Z",
            "date_published": "2024-10-22T18:17:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4gq-x24j-jpmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This can be leveraged to gain access to higher-privilege endpoints, e.g. if you get a user with admin privileges to run the code, you can potentially elevate all users and grant them admin privileges or access protected content.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Will be patched in 14.3.1 and 15.0.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that access to the Dictionary section is only granted to trusted users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-c5g6-6xf7-qxp3\">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-c5g6-6xf7-qxp3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47819\">https://nvd.nist.gov/vuln/detail/CVE-2024-47819</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c5g6-6xf7-qxp3\">https://github.com/advisories/GHSA-c5g6-6xf7-qxp3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c5g6-6xf7-qxp3",
            "title": "[@umbraco-cms/backoffice] Umbraco CMS vulnerable to stored Cross-site Scripting in the \"dictionary name\" on Dictionary section",
            "date_modified": "2024-10-22T19:22:20.000Z",
            "date_published": "2024-10-22T17:50:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c5g6-6xf7-qxp3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In <code>elliptic</code>-based version, <code>loadUncompressedPublicKey</code> has a check that the public key is on the curve: <a href=\"https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39\">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></p>\n<p><code>loadCompressedPublicKey</code> is, however, missing that check: <a href=\"https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19\">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></p>\n<p>That allows the attacker to use public keys on low-cardinality curves to extract enough information to fully restore the private key from as little as 11 ECDH sessions, and very cheaply on compute power</p>\n<p>Other operations on public keys are also affected, including e.g. <code>publicKeyVerify()</code> incorrectly returning <code>true</code> on those invalid keys, and e.g. <code>publicKeyTweakMul()</code> also returning predictable outcomes allowing to restore the tweak </p>\n<h3 id=\"details\">Details</h3>\n<p>The curve equation is <code>Y^2 = X^3 + 7</code>, and it restores <code>Y</code> from <code>X</code> in <code>loadCompressedPublicKey</code>, using <code>Y = sqrt(X^3 + 7)</code>, but when there are no valid <code>Y</code> values satisfying <code>Y^2 = X^3 + 7</code> for a given <code>X</code>, the same code calculates a solution for <code>-Y^2 = X^3 + 7</code>, and that solution also satisfies some other equation <code>Y^2 = X^3 + D</code>, where <code>D</code> is not equal to 7 and might be on a curve with factorizable cardinality, so <code>(X,Y)</code> might be a low-order point on that curve, lowering the number of possible ECDH output values to bruteforcable</p>\n<p>Those output values correspond to remainders which can be then combined with Chinese remainder theorem to restore the original value</p>\n<p>Endomorphism-based multiplication only slightly hinders restoration and does not affect the fact that the result is low-order</p>\n<p>10 different malicious X values could be chosen so that the overall extracted information is 238.4 bits out of 256 bit private key, and the rest is trivially bruteforcable with an additional 11th public key (which might be valid or not -- not significant)</p>\n<p>The attacker does not need to <em>receive</em> the ECDH value, they only need to be able to confirm it against a list of possible candidates, e.g. check if using it to decipher block/stream cipher would work -- and that could all be done locally on the attacker side</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"example-public-key\">Example public key</h4>\n<p>This key has order 39\nOne of the possible outcomes for it is a throw, 38 are predictable ECDH values\nKeys used in full attack have higher order (starting from ~20000), so are very unlikely to cause an error</p>\n<pre><code class=\"language-js\">import secp256k1 from 'secp256k1/elliptic.js'\nimport { randomBytes } from 'crypto'\n\nconst pub = Buffer.from('028ac57f9c6399282773c116ef21f7394890b6140aa6f25c181e9a91e2a9e3da45', 'hex')\n\nconst seen = new Set()\nfor (let i = 0; i &lt; 1000; i++) {\n  try {\n    seen.add(Buffer.from(secp256k1.ecdh(pub, randomBytes(32))).toString('hex'))\n  } catch {\n    seen.add('failure also is an outcome')\n  }\n}\n\nconsole.log(seen.size) // 39\n</code></pre>\n<h4 id=\"full-attack\">Full attack</h4>\n<p>This PoC doesn't list the exact public keys or the code for <code>solver.js</code> intentionally, but this exact code works, on arbitrary random private keys:</p>\n<pre><code class=\"language-js\">// Only the elliptic version is affected, gyp one isn't\n// Node.js can use both, Web/RN/bundles always use the elliptic version\nimport secp256k1 from 'secp256k1/elliptic.js'\n\nimport { randomBytes } from 'node:crypto'\nimport assert from 'node:assert/strict'\nimport { Solver } from './solver.js'\n\nconst privateKey = randomBytes(32)\n\n// The full dataset is precomputed on a single MacBook Air in a few days and can be reused for any private key\nconst solver = new Solver\n\n// We need to run on 10 specially crafted public keys for this\n// Lower than 10 is possible but requires more compute\nfor (let i = 0; i &lt; 10; i++) {\n  const letMeIn = solver.ping() // this is a normal 33-byte Uint8Array, a 02/03-prefixed compressed public key\n  assert(letMeIn instanceof Uint8Array) // true\n  assert(secp256k1.publicKeyVerify(letMeIn)) // true\n\n  // Returning ecdh value is not necessary but is used in this demo for simplicity\n  // Solver needs to _confirm_ an ecdh value against a set of precalculated known ones,\n  // which can be done even after it's hashed or used e.g. for a stream/block cipher, based on the encrypted data\n  solver.callback(secp256k1.ecdh(letMeIn, privateKey))\n\n  // Btw we have those precomputed so we can actually use those sessions to lower suspicion, most -- instantly\n}\n\n// Now, we need a single valid (or another invalid) public key to recheck things against\n// It can be anything, e.g. we can specify an 11th one, or create a valid one and use it\n// We'll be able to confirm/restore and use the ecdh value for this session too upon privateKey extraction\nconst anyPublicKey = secp256k1.publicKeyCreate(randomBytes(32))\nassert(secp256k1.publicKeyVerify(anyPublicKey)) // true (obviously)\n\n// Full complexity of this exploit requires solver to perform ~ 2^35 ecdh value checks (for all 10 keys combined),\n// which is ~ 1 TiB -- that can be done offline and does not require any further interaction with the target\n// The exact speed of the comparison step depends on how the ecdh values are used, but is not very significant\n// Direct non-indexed linear scan over all possible (precomputed) values takes &lt;10 minutes on a MacBook Air\n// Confirming against e.g. cipher output would be somewhat slower, but still definitely possible + also could be precomputed\nconst extracted = solver.stab(anyPublicKey, secp256k1.ecdh(anyPublicKey, privateKey))\n\nconsole.log(`Extracted private key:  ${extracted.toString('hex')}`)\nconsole.log(`Actual private key was: ${privateKey.toString('hex')}`)\n\nassert(extracted.toString('hex') === privateKey.toString('hex'))\n\nconsole.log('Oops')\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"language-console\">Extracted private key:  e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d\nActual private key was: e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d\nOops\nnode example.js  178.80s user 13.59s system 74% cpu 4:17.01 total\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Remote private key is extracted over 11 ECDH sessions</p>\n<p>The attack is very low-cost, precompute took a few days on a single MacBook Air, and extraction takes ~10 minutes on the same MacBook Air</p>\n<p>Also:</p>\n<ul>\n<li><code>publicKeyVerify()</code> misreports malicious public keys as valid</li>\n<li>Same affects tweak extraction from <code>publicKeyTweakMul</code> result and other public key operations</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm\">https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm</a></li>\n<li><a href=\"https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f\">https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-48930\">https://nvd.nist.gov/vuln/detail/CVE-2024-48930</a></li>\n<li><a href=\"https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed\">https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed</a></li>\n<li><a href=\"https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221\">https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221</a></li>\n<li><a href=\"https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19\">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></li>\n<li><a href=\"https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39\">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-584q-6j8j-r5pm\">https://github.com/advisories/GHSA-584q-6j8j-r5pm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-584q-6j8j-r5pm",
            "title": "[secp256k1] secp256k1-node allows private key extraction over ECDH",
            "date_modified": "2024-10-21T19:09:45.000Z",
            "date_published": "2024-10-21T17:28:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-584q-6j8j-r5pm"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}