{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>nativeImage.createFromPath()</code> and <code>nativeImage.createFromBuffer()</code> functions call a function downstream that is vulnerable to a heap buffer overflow. An Electron program that uses either of the affected functions is vulnerable to a buffer overflow if an attacker is in control of the image's height, width, and contents.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>There are no app-side workarounds for this issue. You must update your Electron version to be protected.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><code>v28.3.2</code></li>\n<li><code>v29.3.3</code></li>\n<li><code>v30.0.3</code></li>\n</ul>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-6r2x-8pq8-9489\">https://github.com/electron/electron/security/advisories/GHSA-6r2x-8pq8-9489</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6r2x-8pq8-9489\">https://github.com/advisories/GHSA-6r2x-8pq8-9489</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6r2x-8pq8-9489",
            "title": "[electron] Electron vulnerable to Heap Buffer Overflow in NativeImage",
            "date_modified": "2025-06-30T18:41:10.000Z",
            "date_published": "2025-06-30T18:41:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6r2x-8pq8-9489"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>nativeImage.createFromPath()</code> and <code>nativeImage.createFromBuffer()</code> functions call a function downstream that is vulnerable to a heap buffer overflow. An Electron program that uses either of the affected functions is vulnerable to a buffer overflow if an attacker is in control of the image's height, width, and contents.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>There are no app-side workarounds for this issue. You must update your Electron version to be protected.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><code>v28.3.2</code></li>\n<li><code>v29.3.3</code></li>\n<li><code>v30.0.3</code></li>\n</ul>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-6r2x-8pq8-9489\">https://github.com/electron/electron/security/advisories/GHSA-6r2x-8pq8-9489</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6r2x-8pq8-9489\">https://github.com/advisories/GHSA-6r2x-8pq8-9489</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6r2x-8pq8-9489",
            "title": "[electron] Electron vulnerable to Heap Buffer Overflow in NativeImage",
            "date_modified": "2025-06-30T18:41:10.000Z",
            "date_published": "2025-06-30T18:41:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6r2x-8pq8-9489"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>nativeImage.createFromPath()</code> and <code>nativeImage.createFromBuffer()</code> functions call a function downstream that is vulnerable to a heap buffer overflow. An Electron program that uses either of the affected functions is vulnerable to a buffer overflow if an attacker is in control of the image's height, width, and contents.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>There are no app-side workarounds for this issue. You must update your Electron version to be protected.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><code>v28.3.2</code></li>\n<li><code>v29.3.3</code></li>\n<li><code>v30.0.3</code></li>\n</ul>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-6r2x-8pq8-9489\">https://github.com/electron/electron/security/advisories/GHSA-6r2x-8pq8-9489</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6r2x-8pq8-9489\">https://github.com/advisories/GHSA-6r2x-8pq8-9489</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6r2x-8pq8-9489",
            "title": "[electron] Electron vulnerable to Heap Buffer Overflow in NativeImage",
            "date_modified": "2025-06-30T18:41:10.000Z",
            "date_published": "2025-06-30T18:41:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6r2x-8pq8-9489"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>electron's ASAR Integrity can be bypass by modifying the content.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled. Apps without these fuses enabled are not impacted. This issue is specific to Windows, apps using these fuses on macOS are unimpacted.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too. i.e. the ability to edit files inside the .app bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>30.0.5</code></li>\n<li><code>31.0.0-beta.1</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-xw5q-g62x-2qjc\">https://github.com/electron/electron/security/advisories/GHSA-xw5q-g62x-2qjc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xw5q-g62x-2qjc\">https://github.com/advisories/GHSA-xw5q-g62x-2qjc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xw5q-g62x-2qjc",
            "title": "[electron] electron ASAR Integrity bypass by just modifying the content",
            "date_modified": "2025-06-30T17:54:12.000Z",
            "date_published": "2025-06-30T17:54:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xw5q-g62x-2qjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>electron's ASAR Integrity can be bypass by modifying the content.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled. Apps without these fuses enabled are not impacted. This issue is specific to Windows, apps using these fuses on macOS are unimpacted.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too. i.e. the ability to edit files inside the .app bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>30.0.5</code></li>\n<li><code>31.0.0-beta.1</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-xw5q-g62x-2qjc\">https://github.com/electron/electron/security/advisories/GHSA-xw5q-g62x-2qjc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xw5q-g62x-2qjc\">https://github.com/advisories/GHSA-xw5q-g62x-2qjc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xw5q-g62x-2qjc",
            "title": "[electron] electron ASAR Integrity bypass by just modifying the content",
            "date_modified": "2025-06-30T17:54:12.000Z",
            "date_published": "2025-06-30T17:54:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xw5q-g62x-2qjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A malicious JSON-stringifyable message can be made passing on <code>verify()</code>, when global Buffer is <a href=\"https://www.npmjs.com/package/buffer\"><code>buffer</code> package</a></p>\n<h3 id=\"details\">Details</h3>\n<p>This affects only environments where <code>require('buffer')</code> is <a href=\"https://npmjs.com/buffer\">https://npmjs.com/buffer</a>\nE.g.: browser bundles, React Native apps, etc.</p>\n<p><code>Buffer.isBuffer</code> check can be bypassed, resulting in strange objects being accepted as <code>message</code>, and those messages could trick <code>verify()</code> into returning false-positive <code>true</code> values</p>\n<p>v2.x is unaffected as it verifies input to be an actual <code>Uint8Array</code> instance</p>\n<p>Such a message can be constructed for any already known message/signature pair\nThere are some restrictions though (also depending on the known message/signature), but not very limiting, see PoC for example</p>\n<p><a href=\"https://github.com/bitcoinjs/tiny-secp256k1/pull/140\">https://github.com/bitcoinjs/tiny-secp256k1/pull/140</a> is a subtle fix for this</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This code deliberately doesn't provide <code>reencode</code> for now, could be updated later</p>\n<pre><code class=\"language-js\">import { randomBytes } from 'crypto'\nimport tiny from 'tiny-secp256k1' // 1.1.6\n\n// Random keypair\nconst privateKey = randomBytes(32)\nconst publicKey = tiny.pointFromScalar(privateKey)\n\nconst valid = Buffer.alloc(32).fill(255) // let's sign a static buffer\nconst signature = tiny.sign(valid, privateKey)\n\n// Prevent processing any unverified data by fail-closed throwing\nfunction verified(data, signature) {\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, 'hex')\n  if (!tiny.verify(data, publicKey, signature)) throw new Error('Signature invalid!')\n  return new Uint8Array(data)\n}\n\nfunction safeProcess(payload) {\n  const totally = JSON.parse(payload) // e.g. json over network\n\n  const message = verified(totally, signature)\n  console.log(message instanceof Uint8Array)\n  console.log(Buffer.from(message).toString('utf8'))  \n}\n\nconst payload = reencode(valid, \"Secure contain protect\")\nsafeProcess(payload)\n</code></pre>\n<p>Output (after being bundled):</p>\n<pre><code class=\"language-console\">true\nSecure contain protect����\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Malicious messages could crafted to be verified from a given known valid message/signature pair</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bitcoinjs/tiny-secp256k1/security/advisories/GHSA-5vhg-9xg4-cv9m\">https://github.com/bitcoinjs/tiny-secp256k1/security/advisories/GHSA-5vhg-9xg4-cv9m</a></li>\n<li><a href=\"https://github.com/bitcoinjs/tiny-secp256k1/pull/140\">https://github.com/bitcoinjs/tiny-secp256k1/pull/140</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5vhg-9xg4-cv9m\">https://github.com/advisories/GHSA-5vhg-9xg4-cv9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5vhg-9xg4-cv9m",
            "title": "[tiny-secp256k1] tiny-secp256k1 allows for verify() bypass when running in bundled environment",
            "date_modified": "2025-06-30T17:44:16.000Z",
            "date_published": "2025-06-30T17:44:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5vhg-9xg4-cv9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Private key can be extracted on signing a malicious JSON-stringifiable object, when global Buffer is <a href=\"https://www.npmjs.com/package/buffer\"><code>buffer</code> package</a></p>\n<h3 id=\"details\">Details</h3>\n<p>This affects only environments where <code>require('buffer')</code> is <a href=\"https://npmjs.com/buffer\">https://npmjs.com/buffer</a>\nE.g.: browser bundles, React Native apps, etc.</p>\n<p><code>Buffer.isBuffer</code> check can be bypassed, resulting in <code>k</code> reuse for different messages, leading to private key extraction over a single invalid message (and a second one for which any message/signature could be taken, e.g. previously known valid one)</p>\n<p>v2.x is unaffected as it verifies input to be an actual <code>Uint8Array</code> instance</p>\n<p>Such a message can be constructed for any already known message/signature pair, meaning that the attack needs only a single malicious message being signed for a full key extraction</p>\n<p>While signing unverified attacker-controlled messages would be problematic itself (and exploitation of this needs such a scenario), signing a single message still should not leak the private key</p>\n<p>Also, message validation could have the same bug (out of scope for this report, but could be possible in some situations), which makes this attack more likely when used in a chain</p>\n<p><a href=\"https://github.com/bitcoinjs/tiny-secp256k1/pull/140\">https://github.com/bitcoinjs/tiny-secp256k1/pull/140</a> is a subtle fix for this</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This code deliberately doesn't provide <code>funnyBuffer</code> and <code>extractTiny</code> for now, could be updated later</p>\n<pre><code class=\"language-js\">import secp256k1 from 'tiny-secp256k1'\nimport crypto from 'crypto'\n\nconst key = crypto.randomBytes(32)\n\nconst msg0 = crypto.randomBytes(32)\nconst sig0 = secp256k1.sign(msg0, key).toString('hex')\n\nconst msg1 = funnyBuffer(msg0)\nconst sig1 = secp256k1.sign(msg1, key).toString('hex')\n\nconst restored = extractTiny(msg0, sig0, sig1)\nconsole.log('Guesses:', JSON.stringify(restored, undefined, 2))\nconst recheck = (k) =&gt; secp256k1.sign(msg0, Buffer.from(k, 'hex')).toString('hex') === sig0\nconsole.log('Rechecked:', JSON.stringify(restored.filter(recheck)))\n\nconsole.log('Actual key', key.toString('hex'))\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"language-console\">Guesses: [\n  \"8f351953047e6b149e0595547e7d10a8a1edc61bd519b5b2514202a495e434ed\",\n  \"ebc81e1632a1b3255589ba84364949a0a6fd0229444519765570706d394671dd\"\n]\nRechecked: [\"ebc81e1632a1b3255589ba84364949a0a6fd0229444519765570706d394671dd\"]\nActual key ebc81e1632a1b3255589ba84364949a0a6fd0229444519765570706d394671dd\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Full private key extraction when signing a single malicious message (that passes <code>JSON.stringify</code>/<code>JSON.parse</code> and can come from network)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bitcoinjs/tiny-secp256k1/security/advisories/GHSA-7mc2-6phr-23xc\">https://github.com/bitcoinjs/tiny-secp256k1/security/advisories/GHSA-7mc2-6phr-23xc</a></li>\n<li><a href=\"https://github.com/bitcoinjs/tiny-secp256k1/pull/140\">https://github.com/bitcoinjs/tiny-secp256k1/pull/140</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mc2-6phr-23xc\">https://github.com/advisories/GHSA-7mc2-6phr-23xc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mc2-6phr-23xc",
            "title": "[tiny-secp256k1] tiny-secp256k1 vulnerable to private key extraction when signing a malicious JSON-stringifyable message in bundled environment",
            "date_modified": "2025-06-30T17:43:41.000Z",
            "date_published": "2025-06-30T17:43:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mc2-6phr-23xc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package snyk before 1.1297.3 are vulnerable to Insertion of Sensitive Information into Log File through local Snyk CLI debug logs. Container Registry credentials provided via environment variables or command line arguments can be exposed when executing Snyk CLI in DEBUG or DEBUG/TRACE mode.</p>\n<p>The issue affects the following Snyk commands:</p>\n<ol>\n<li><p>When snyk container test or snyk container monitor commands are run against a container registry, with debug mode enabled, the container registry credentials may be written into the local Snyk CLI debug log. This only happens with credentials specified in environment variables (SNYK_REGISTRY_USERNAME and SNYK_REGISTRY_PASSWORD), or in the CLI (--password/-p and  --username/-u).</p>\n</li>\n<li><p>When snyk auth command is executed with debug mode enabled AND the log level is set to TRACE, the Snyk access / refresh credential tokens used to connect the CLI to Snyk may be written into the local CLI debug logs.</p>\n</li>\n<li><p>When snyk iac test is executed with a Remote IAC Custom rules bundle, debug mode enabled, AND the log level is set to TRACE, the docker registry token may be written into the local CLI debug logs.</p>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-6624\">https://nvd.nist.gov/vuln/detail/CVE-2025-6624</a></li>\n<li><a href=\"https://github.com/snyk/cli/commit/38322f377da7e5f1391e1f641710be50989fa4df\">https://github.com/snyk/cli/commit/38322f377da7e5f1391e1f641710be50989fa4df</a></li>\n<li><a href=\"https://github.com/snyk/go-application-framework/commit/ca7ba7d72e68455afb466a7a47bb2c9aece86c18\">https://github.com/snyk/go-application-framework/commit/ca7ba7d72e68455afb466a7a47bb2c9aece86c18</a></li>\n<li><a href=\"https://docs.snyk.io/snyk-cli/debugging-the-snyk-cli\">https://docs.snyk.io/snyk-cli/debugging-the-snyk-cli</a></li>\n<li><a href=\"https://github.com/snyk/cli/releases/tag/v1.1297.3\">https://github.com/snyk/cli/releases/tag/v1.1297.3</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SNYK-10497607\">https://security.snyk.io/vuln/SNYK-JS-SNYK-10497607</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hwc-9h8r-3vmf\">https://github.com/advisories/GHSA-6hwc-9h8r-3vmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hwc-9h8r-3vmf",
            "title": "[snyk] Snyk CLI Insertion of Sensitive Information into Log File allowed in DEBUG or DEBUG/TRACE mode",
            "date_modified": "2025-06-30T11:42:50.000Z",
            "date_published": "2025-06-26T06:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hwc-9h8r-3vmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Hi team,</p>\n<p>I was looking at the recent fix and you limited the exploitability of race conditions but unfortunately it is still possible to exploit the issue since two requests happening at the exact same time will still go through. You should be able to completely fix the race conditions by leveraging SQLITE write lock and just send one query.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>The /get-patch endpoint processes a purchase in two separate database queries: a SELECT that verifies the token is unused, followed by an UPDATE that marks the token as used. Because SQLite only guards each statement, a malicious actor can issue two requests at the exact same moment and have both SELECT statements succeed before either UPDATE runs.</p>\n<h3 id=\"details\">Details</h3>\n<p>The handler executes (step 1):</p>\n<pre><code>SELECT id, token_used_at FROM purchases WHERE patch_id = ? AND purchase_token = ? AND status = 'COMPLETED'\n</code></pre>\n<p>If token_used_at IS NULL, the request passes the check (step 2): </p>\n<pre><code>        if (row.token_used_at) {\n            return res.status(403).json({ error: \"Purchase token has already been used.\" });\n        }\n</code></pre>\n<p>The handler finally runs (step 3):</p>\n<pre><code>UPDATE purchases SET token_used_at = CURRENT_TIMESTAMP WHERE id = ?\n</code></pre>\n<p>When two requests arrive at the same time, they both finish step 1 while the row is still unused. SQLite serializes writers only per statement, so each request believes it has exclusive access. Both decrypt and return the patch, and both UPDATE statements succeed.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To perform this attack, you need to send two requests at the exact same time. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker who possesses a valid purchase token can replay it and receive multiple copies of the paid patch, or distribute one copy while still keeping their own. This results in revenue loss and undermines license enforcement.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>Replace the read-then-write sequence with a single atomic statement that both validates and consumes the token while SQLite holds the write lock:</p>\n<pre><code>const row = db.prepare(`\n  UPDATE purchases\n     SET token_used_at = CURRENT_TIMESTAMP\n   WHERE patch_id       = ?\n     AND purchase_token = ?\n     AND status         = 'COMPLETED'\n     AND token_used_at IS NULL\n  RETURNING id;\n`).get(patchId, token);\n\nif (!row) return res.status(403).json({ error: 'Invalid or already-used token.' });\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tailot/taylored/security/advisories/GHSA-vh5j-5fhq-9xwg\">https://github.com/tailot/taylored/security/advisories/GHSA-vh5j-5fhq-9xwg</a></li>\n<li><a href=\"https://github.com/tailot/taylored/commit/fdf67a6fba0deae30912905a79fb5a9e83751a79\">https://github.com/tailot/taylored/commit/fdf67a6fba0deae30912905a79fb5a9e83751a79</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vh5j-5fhq-9xwg\">https://github.com/advisories/GHSA-vh5j-5fhq-9xwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vh5j-5fhq-9xwg",
            "title": "[taylored] Taylor has race condition in /get-patch that allows purchase token replay",
            "date_modified": "2025-06-30T12:53:29.000Z",
            "date_published": "2025-06-27T22:06:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vh5j-5fhq-9xwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is an Open Redirect (CWE-601) vulnerability in the login flow of n8n. Authenticated users can be redirected to untrusted, attacker-controlled domains after logging in, by crafting malicious URLs with a misleading redirect query parameter.</p>\n<p>This may lead to:</p>\n<ul>\n<li>Phishing attacks by impersonating the n8n UI on lookalike domains (e.g., n8n.local.evil.com)</li>\n<li>Credential or 2FA theft if users are tricked into re-entering sensitive information</li>\n<li>Reputation risk due to the visual similarity between attacker-controlled domains and trusted ones</li>\n</ul>\n<p>The vulnerability affects anyone hosting n8n and exposing the <code>/signin</code> endpoint to users.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in <a href=\"https://github.com/n8n-io/n8n/releases/tag/n8n%401.98.0\">1.98.0</a>.\nAll users should upgrade to this version or later.</p>\n<p>The fix introduces strict origin validation for redirect URLs, ensuring only same-origin or relative paths are allowed after login.</p>\n<p>Patch commit: <a href=\"https://github.com/n8n-io/n8n/pull/16034\">https://github.com/n8n-io/n8n/pull/16034</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/n8n-io/n8n/security/advisories/GHSA-5vj6-wjr7-5v9f\">https://github.com/n8n-io/n8n/security/advisories/GHSA-5vj6-wjr7-5v9f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-49592\">https://nvd.nist.gov/vuln/detail/CVE-2025-49592</a></li>\n<li><a href=\"https://github.com/n8n-io/n8n/pull/16034\">https://github.com/n8n-io/n8n/pull/16034</a></li>\n<li><a href=\"https://github.com/n8n-io/n8n/commit/4865d1e360a0fe7b045e295b5e1a29daad12314e\">https://github.com/n8n-io/n8n/commit/4865d1e360a0fe7b045e295b5e1a29daad12314e</a></li>\n<li><a href=\"https://github.com/n8n-io/n8n/releases/tag/n8n%401.98.0\">https://github.com/n8n-io/n8n/releases/tag/n8n%401.98.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5vj6-wjr7-5v9f\">https://github.com/advisories/GHSA-5vj6-wjr7-5v9f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5vj6-wjr7-5v9f",
            "title": "[n8n] n8n allows open redirects via the /signin endpoint",
            "date_modified": "2025-06-27T14:19:03.000Z",
            "date_published": "2025-06-27T14:19:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5vj6-wjr7-5v9f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"command-injection-in-mcp-server\">Command Injection in MCP Server</h1>\n<p>The MCP Server at <a href=\"https://github.com/joshuayoes/ios-simulator-mcp/\">https://github.com/joshuayoes/ios-simulator-mcp/</a> is written in a way that is vulnerable to command injection vulnerability attacks as part of some of its MCP Server tool definition and implementation.</p>\n<h2 id=\"vulnerable-tool\">Vulnerable tool</h2>\n<p>The MCP Server exposes the tool <code>ui_tap</code> which relies on Node.js child process API <code>exec</code> which is an unsafe and vulnerable API if concatenated with untrusted user input.</p>\n<p>LLM exposed user input for <code>duration</code>, <code>udid</code>, and <code>x</code> and <code>y</code> args can be replaced with shell meta-characters like <code>;</code> or <code>&amp;&amp;</code> or others to change the behavior from running the expected command <code>idb</code> to another command.</p>\n<p>Vulnerable line of code: <a href=\"https://github.com/joshuayoes/ios-simulator-mcp/blob/main/src/index.ts#L166-L207\">https://github.com/joshuayoes/ios-simulator-mcp/blob/main/src/index.ts#L166-L207</a></p>\n<pre><code class=\"language-js\">  server.tool(\n    \"ui_tap\",\n    \"Tap on the screen in the iOS Simulator\",\n    {\n      duration: z.string().optional().describe(\"Press duration\"),\n      udid: z\n        .string()\n        .optional()\n        .describe(\"Udid of target, can also be set with the IDB_UDID env var\"),\n      x: z.number().describe(\"The x-coordinate\"),\n      y: z.number().describe(\"The x-coordinate\"),\n    },\n    async ({ duration, udid, x, y }) =&gt; {\n      try {\n        const actualUdid = await getBootedDeviceId(udid);\n        const durationArg = duration ? `--duration ${duration}` : \"\";\n        const { stderr } = await execAsync(\n          `idb ui tap --udid ${actualUdid} ${durationArg} ${x} ${y}  --json`\n        );\n</code></pre>\n<h2 id=\"exploitation\">Exploitation</h2>\n<p>When LLMs are tricked through prompt injection (and other techniques and attack vectors) to call the tool with input that uses special shell characters such as <code>; rm -rf /tmp;#</code> and other payload variations, the full command-line text will be interepted by the shell and result in other commands except of <code>ps</code> executing on the host running the MCP Server.</p>\n<p>Reference example from prior security research on this topic:</p>\n<p><img alt=\"Cursor defined MCP Server vulnerable to command injection\" src=\"https://res.cloudinary.com/snyk/image/upload/f_auto,w_2560,q_auto/v1747081395/Screenshot_2025-05-07_at_9.22.11_AM_d76kvm.png\"></p>\n<h2 id=\"impact\">Impact</h2>\n<p>User initiated and remote command injection on a running MCP Server.</p>\n<h2 id=\"references-and-prior-work\">References and Prior work</h2>\n<ol>\n<li><a href=\"https://snyk.io/articles/exploiting-mcp-servers-vulnerable-to-command-injection/\">Exploiting MCP Servers Vulnerable to Command Injection</a></li>\n<li>Liran's <a href=\"https://www.nodejs-security.com/book/command-injection\">Node.js Secure Coding: Defending Against Command Injection Vulnerabilities</a></li>\n</ol>\n<h2 id=\"\"></h2>\n<p>Disclosed by <a href=\"https://lirantal.com\">Liran Tal</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joshuayoes/ios-simulator-mcp/security/advisories/GHSA-6f6r-m9pv-67jw\">https://github.com/joshuayoes/ios-simulator-mcp/security/advisories/GHSA-6f6r-m9pv-67jw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52573\">https://nvd.nist.gov/vuln/detail/CVE-2025-52573</a></li>\n<li><a href=\"https://github.com/joshuayoes/ios-simulator-mcp/commit/eb53a4f2cc8bbeb13e8d6d930f00167befcdb809\">https://github.com/joshuayoes/ios-simulator-mcp/commit/eb53a4f2cc8bbeb13e8d6d930f00167befcdb809</a></li>\n<li><a href=\"https://github.com/joshuayoes/ios-simulator-mcp/blob/main/src/index.ts#L166-L207\">https://github.com/joshuayoes/ios-simulator-mcp/blob/main/src/index.ts#L166-L207</a></li>\n<li><a href=\"https://github.com/joshuayoes/ios-simulator-mcp/releases/tag/v1.3.3\">https://github.com/joshuayoes/ios-simulator-mcp/releases/tag/v1.3.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6f6r-m9pv-67jw\">https://github.com/advisories/GHSA-6f6r-m9pv-67jw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6f6r-m9pv-67jw",
            "title": "[ios-simulator-mcp] iOS Simulator MCP Command Injection allowed via exec API",
            "date_modified": "2025-06-26T21:21:02.000Z",
            "date_published": "2025-06-26T21:20:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6f6r-m9pv-67jw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On historic but declared as supported Node.js versions (0.12-2.x), pbkdf2 silently disregards Uint8Array input</p>\n<p>This only affects Node.js &lt;3.0.0, but <code>pbkdf2</code> claims to:</p>\n<ul>\n<li>Support Node.js <a href=\"https://github.com/browserify/pbkdf2/blob/v3.1.2/package.json#L62\">&gt;= 0.12</a> (and there seems to be ongoing effort in this repo to maintain that)</li>\n<li>Support <code>Uint8Array</code> input (input is typechecked against Uint8Array, and the error message includes e.g. \"Password must be a string, a Buffer, a typed array or a DataView\"</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>The error is in <code>toBuffer</code> method</p>\n<p>This vulnerability somehow even made it to tests: <a href=\"https://github.com/browserify/pbkdf2/commit/eb9f97a66ed83836bebc4ff563a1588248708501\">https://github.com/browserify/pbkdf2/commit/eb9f97a66ed83836bebc4ff563a1588248708501</a>\nThere, <code>resultsOld</code> (where mismatch <code>results</code>) are just invalid output generated from empty password/salt instead of the supplied one</p>\n<h3 id=\"poc\">PoC</h3>\n<p>On Node.js/io.js &lt; 3.0.0</p>\n<pre><code class=\"language-console\">&gt; require('pbkdf2').pbkdf2Sync(new Uint8Array([1,2,3]), new Uint8Array([1,3,4]), 1024, 32, 'sha256')\n&lt;Buffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66&gt;\n\n// But that's just a hash of empty data with empty password:\n&gt; require('pbkdf2').pbkdf2Sync('', '', 1024, 32, 'sha256')\n&lt;Buffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66&gt;\n\n// Node.js crypto is fine even on that version:\n&gt; require('crypto').pbkdf2Sync(new Uint8Array([1,2,3]), new Uint8Array([1,3,4]), 1024, 32, 'sha256')\n&lt;Buffer 78 10 cc 84 b7 bb 85 cd c8 37 ca 68 da a9 4c 33 db ae c2 3d 5b d4 95 76 da 33 f9 95 ac 51 f4 45&gt;\n\n// Empty hash from Node.js, for comparison\n&gt; require('crypto').pbkdf2Sync('', '', 1024, 32, 'sha256')\n&lt;Buffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66&gt;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Static hashes being outputted and used as keys/passwords can completely undermine security\nThat said, no one should be using those Node.js versions anywhere now, so I would recommend to just drop them\nThis lib should not pretend to work on those versions while outputting static data though</p>\n<p>Just updating to a fixed version is not enough: if anyone was using <code>pbkdf2</code> lib (do not confuse with Node.js <code>crypto.pbkdf2</code>) or anything depending on it with Node.js/io.js &lt; 3.0.0, recheck where those keys went / how they were used,  and take action accordingly</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/browserify/pbkdf2/security/advisories/GHSA-v62p-rq8g-8h59\">https://github.com/browserify/pbkdf2/security/advisories/GHSA-v62p-rq8g-8h59</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-6547\">https://nvd.nist.gov/vuln/detail/CVE-2025-6547</a></li>\n<li><a href=\"https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb\">https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v62p-rq8g-8h59\">https://github.com/advisories/GHSA-v62p-rq8g-8h59</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v62p-rq8g-8h59",
            "title": "[pbkdf2] pbkdf2 silently disregards Uint8Array input, returning static keys",
            "date_modified": "2025-06-23T22:42:02.000Z",
            "date_published": "2025-06-23T22:42:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v62p-rq8g-8h59"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This affects both:</p>\n<ol>\n<li>Unsupported algos (e.g. <code>sha3-256</code> / <code>sha3-512</code> / <code>sha512-256</code>)</li>\n<li>Supported but non-normalized algos (e.g. <code>Sha256</code> / <code>Sha512</code> / <code>SHA1</code> / <code>sha-1</code> / <code>sha-256</code> / <code>sha-512</code>)</li>\n</ol>\n<p>All of those work correctly in Node.js, but this polyfill silently returns highly predictable ouput</p>\n<p>Under Node.js (only with <code>pbkdf2/browser</code> import, unlikely) / Bun (<code>pbkdf2</code> top-level import is affected), the memory is not zero-filled but is uninitialized, as <code>Buffer.allocUnsafe</code> is used</p>\n<p>Under browsers, it just returns zero-filled buffers\n(Which is also critical, those are completely unacceptable as kdf output and ruin security)</p>\n<h3 id=\"were-you-affected\">Were you affected?</h3>\n<p>The full list of arguments that were <strong>not</strong> affected were literal:</p>\n<ul>\n<li><code>'md5'</code></li>\n<li><code>'sha1'</code></li>\n<li><code>'sha224'</code></li>\n<li><code>'sha256'</code></li>\n<li><code>'sha384'</code></li>\n<li><code>'sha512'</code></li>\n<li><code>'rmd160'</code></li>\n<li><code>'ripemd160'</code></li>\n</ul>\n<p>Any other arguments, e.g. representation variations of the above ones like <code>'SHA-1'</code>/<code>'sha-256'</code>/<code>'SHA512'</code> or  different algos like <code>'sha3-512'</code>/<code>'blake2b512'</code>, while supported on Node.js <code>crypto</code> module, returned predictable output on <code>pbkdf2</code> (or <code>crypto</code> browser/bundlers polyfill)</p>\n<hr>\n<p>Beware of packages re-exporting this under a different signature, like (abstract):</p>\n<pre><code class=\"language-js\">const crypto = require('crypto')\nmodule.exports.deriveKey = (algo, pass, salt) =&gt; crypto.pbkdf2Sync(pass, salt, 2048, 64, algo)\n</code></pre>\n<p>In this case, the resulting <code>deriveKey</code> method is also affected (to the same extent / conditions as listed here).</p>\n<h3 id=\"environments\">Environments</h3>\n<p>This affects <code>require('crypto')</code> in polyfilled mode (e.g. from <code>crypto-browserify</code>, <code>node-libs-browser</code>, <code>vite-plugin-node-polyfills</code>, <code>node-stdlib-browser</code>, etc. -- basically everything that bundles/polfyills <code>crypto</code></p>\n<ul>\n<li>In bundled code (e.g. Webpack / Vite / whatever), this affects <code>require('crypto')</code> and <code>require('pbkdf2')</code></li>\n<li>On Node.js, this does not affect <code>require('pbkdf2')</code> (or <code>require('crypto')</code> obviously), but affects <code>require('pbkdf2/browser')</code></li>\n<li>On Bun, this <em>does</em> affect <code>require('pbkdf2')</code> <em>and</em>  <code>require('pbkdf2/browser')</code> (and returns uninitialized memory, often zeros / sparse flipped bytes)</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-js\">const node = require('crypto')\nconst polyfill = require('pbkdf2/browser')\n\nconst algos = [\n  'sha3-512', 'sha3-256', 'SHA3-384',\n  'Sha256', 'Sha512', 'sha512-256',\n  'SHA1', 'sha-1',\n  'blake2b512',\n  'RMD160', 'RIPEMD-160', 'ripemd-160',\n]\nfor (const algo of algos) {\n  for (const { pbkdf2Sync } of [node, polyfill]) {\n    const key = pbkdf2Sync('secret', 'salt', 100000, 64, algo)\n    console.log(`${algo}: ${key.toString('hex')}`);\n  }\n}\n</code></pre>\n<p>Output (odd lines are Node.js, even is <code>pbkdf2</code> module / polyfill):</p>\n<pre><code>sha3-512: de00370414a3251d6d620dc8f7c371644e5d7f365ab23b116298a23fa4077b39deab802dd61714847a5c7e9981704ffe009aee5bb40f6f0103fc60f3d4cedfb0\nsha3-512: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsha3-256: 76bf06909b91e4c968700078ee36af92019d0839ab1fea2f345c6c8685074ca0179302633fbd84d22cff4f8744952b2d07edbfc9658e95d30fb4e93ee067c7c9\nsha3-256: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nSHA3-384: 2b2b41b73f9b7bcd023f709ea84ba3c29a88edc311b737856ba9e74a2d9a928f233eb8cb404a9ba93c276edf6380c692140024a0bc12b75bfa38626207915e01\nSHA3-384: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nSha256: 3fa094211c0cf2ed1d332ab43adc69aab469f0e0f2cae6345c81bb874eef3f9eb2c629052ec272ca49c2ee95b33e7ba6377b2317cd0dacce92c4748d3c7a45f0\nSha256: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nSha512: 3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae\nSha512: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsha512-256: e423f61987413121418715d0ebf64cb646042ae9a09fe4fd2c764a4f186ba28cf70823fdc2b03dda67a0d977c6f0a0612e5ed74a11e6f32b033cb658fa9f270d\nsha512-256: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nSHA1: 0e24bc5a548b236e3eb3b22317ef805664a88747c725cd35bfb0db0e4ae5539e3ed5cd5ba8c0ac018deb6518059788c8fffbe624f614fbbe62ba6a6e174e4a72\nSHA1: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nsha-1: 0e24bc5a548b236e3eb3b22317ef805664a88747c725cd35bfb0db0e4ae5539e3ed5cd5ba8c0ac018deb6518059788c8fffbe624f614fbbe62ba6a6e174e4a72\nsha-1: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nblake2b512: d3d661100c5ffb79bdf3b5c77d1698e621414cba40e2348bd3f1b10fbd2fe97bff4dc7d76474955bfefa61179f2a37e9dddedced0e7e79ef9d8c678080d45926\nblake2b512: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nRMD160: ec65dbad1485616cf0426725d64e009ad3e1633543746ccb56b7f06eb7ce51d0249aaef27c879f32911a7c0accdc83389c2948ddec439114f6165366f9b4cca2\nRMD160: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nRIPEMD-160: ec65dbad1485616cf0426725d64e009ad3e1633543746ccb56b7f06eb7ce51d0249aaef27c879f32911a7c0accdc83389c2948ddec439114f6165366f9b4cca2\nRIPEMD-160: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nripemd-160: ec65dbad1485616cf0426725d64e009ad3e1633543746ccb56b7f06eb7ce51d0249aaef27c879f32911a7c0accdc83389c2948ddec439114f6165366f9b4cca2\nripemd-160: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n</code></pre>\n<h4 id=\"uninitialized-memory\">Uninitialized memory</h4>\n<pre><code class=\"language-js\">const { pbkdf2Sync } = require('pbkdf2/browser') // or just 'pbkdf2' on Bun will do this too\n\nlet prev\nfor (let i = 0; i &lt; 100000; i++) {\n  const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha3-256')\n  const hex = key.toString('hex')\n  if (hex !== prev) console.log(hex);\n  prev = hex\n}\n</code></pre>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>Seems to be since <a href=\"https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078\">https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is critical, browserifying code might silently generate zero-filled keys instead of proper ones, for code that was working on Node.js or in test environment</p>\n<p>Just updating to a fixed version is not enough: if anyone was using <code>pbkdf2</code> lib (e.g. via <code>crypto-browserify</code> or directly) on algos not from the literal string list (see \"were you affected\"), recheck where those keys went / how they were used,  and take action accordingly</p>\n<h3 id=\"note\">Note</h3>\n<p>Most likely, you receive this either through a subdep using <code>pbkdf2</code> module directly (and then it is used), or through <code>crypto-browserify</code> (and the usage depends on whether you or any of your subdeps were calling <code>pbkdf2/pbkdf2Sync</code> methods from Node.js crypto inside your bundle)</p>\n<p>When targeting non-Node.js, prever avoiding Node.js crypto polyfill at all, and use <code>crypto.subtle</code> and/or modern/audited cryptography primitives instead</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/browserify/pbkdf2/security/advisories/GHSA-h7cp-r72f-jxh6\">https://github.com/browserify/pbkdf2/security/advisories/GHSA-h7cp-r72f-jxh6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-6545\">https://nvd.nist.gov/vuln/detail/CVE-2025-6545</a></li>\n<li><a href=\"https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078\">https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078</a></li>\n<li><a href=\"https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb\">https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7cp-r72f-jxh6\">https://github.com/advisories/GHSA-h7cp-r72f-jxh6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7cp-r72f-jxh6",
            "title": "[pbkdf2] pbkdf2 returns predictable uninitialized/zero-filled memory for non-normalized or unimplemented algos",
            "date_modified": "2025-06-23T22:41:52.000Z",
            "date_published": "2025-06-23T22:41:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7cp-r72f-jxh6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Claude Code extensions in VSCode and forks (e.g., Cursor, Windsurf, and VSCodium) and JetBrains IDEs (e.g., IntelliJ, Pycharm, and Android Studio) are vulnerable to unauthorized websocket connections from an attacker when visiting attacker-controlled webpages. Claude Code for VSCode IDE extensions versions 0.2.116 through 1.0.23 are vulnerable. For Jetbrains IDE plugins, Claude Code [beta] versions 0.1.1 through 0.1.8 are vulnerable.  </p>\n<p>In VSCode (and forks), exploitation would allow an attacker to read arbitrary files, see the list of files open in the IDE, get selection and diagnostics events from the IDE, or execute code in limited situations where a user has an open Jupyter Notebook and accepts a malicious prompt. In JetBrains IDEs, an attacker could get selection events, a list of open files, and a list of syntax errors.</p>\n<p><strong>Remediation</strong></p>\n<p>We released a patch for this issue on June 13th, 2025. Although Claude Code auto-updates when you launch it and auto-updates the extensions, you should take the following steps (the exact steps depend on your IDE).</p>\n<p><strong>VSCode, Cursor, Windsurf, VSCodium, and other VSCode forks</strong>\nExtension Name: Claude Code for VSCode</p>\n<p>Instructions:</p>\n<ol>\n<li>Open the list of Extensions (View-&gt;Extensions)</li>\n<li>Look for Claude Code for VSCode among installed extensions</li>\n<li>If you have a version &lt; 1.0.24, click “Update” (or “Uninstall”)</li>\n<li>Restart the IDE</li>\n</ol>\n<p><strong>All JetBrains IDEs including IntelliJ, PyCharm, and Android Studio</strong>\nPlugin name: Claude Code [Beta]</p>\n<p>Instructions:</p>\n<ol>\n<li>Open the Plugins list</li>\n<li>Look for Claude Code [Beta] among installed extensions</li>\n<li>Update (or Uninstall) the plugin if the version is &lt; 0.1.9</li>\n<li>Restart the IDE</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/anthropics/claude-code/security/advisories/GHSA-9f65-56v6-gxw7\">https://github.com/anthropics/claude-code/security/advisories/GHSA-9f65-56v6-gxw7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52882\">https://nvd.nist.gov/vuln/detail/CVE-2025-52882</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9f65-56v6-gxw7\">https://github.com/advisories/GHSA-9f65-56v6-gxw7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9f65-56v6-gxw7",
            "title": "[@anthropic-ai/claude-code] Claude Code Improper Authorization via websocket connections from arbitrary origins",
            "date_modified": "2025-06-27T23:08:01.000Z",
            "date_published": "2025-06-23T21:22:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9f65-56v6-gxw7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the <a href=\"https://www.npmjs.com/package/lunary\">lunary npm package</a> is connected to <a href=\"https://github.com/lunary-ai/lunary-js\">https://github.com/lunary-ai/lunary-js</a>, not the <a href=\"https://github.com/lunary-ai/lunary\">https://github.com/lunary-ai/lunary</a> repo that is discussed in this advisory.</p>\n<p><strong>The underlying vulnerability report is still valid</strong>, but it doesn't affect a product in a <a href=\"https://docs.github.com/en/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-the-github-advisory-database#github-reviewed-advisories\">GitHub Advisory Database supported ecosystem</a>.</p>\n<p>This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A Cross-Site Request Forgery (CSRF) vulnerability exists in lunary-ai/lunary version 1.2.34 due to overly permissive CORS settings. This vulnerability allows an attacker to sign up for and create projects or use the instance as if they were a user with local access. The main attack vector is for instances hosted locally on personal machines, which are not publicly accessible. The CORS settings in the backend permit all origins, exposing unauthenticated endpoints to CSRF attacks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6862\">https://nvd.nist.gov/vuln/detail/CVE-2024-6862</a></li>\n<li><a href=\"https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54\">https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54</a></li>\n<li><a href=\"https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f\">https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v6x6-4v4x-2fx9\">https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v6x6-4v4x-2fx9",
            "title": "[@lunary/backend] Withdrawn Advisory: Lunary Cross-Site Request Forgery (CSRF) vulnerability",
            "date_modified": "2025-06-20T20:02:29.000Z",
            "date_published": "2024-09-13T18:31:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v6x6-4v4x-2fx9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Passbolt Browser Extension before 4.6.2. It can send multiple requests to HaveIBeenPwned while a password is being typed, which results in an information leak. This allows an attacker capable of observing Passbolt's HTTPS queries to the Pwned Password API to more easily brute force passwords that are manually typed by the user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-33669\">https://nvd.nist.gov/vuln/detail/CVE-2024-33669</a></li>\n<li><a href=\"https://blog.quarkslab.com/passbolt-a-bold-use-of-haveibeenpwned.html\">https://blog.quarkslab.com/passbolt-a-bold-use-of-haveibeenpwned.html</a></li>\n<li><a href=\"https://haveibeenpwned.com\">https://haveibeenpwned.com</a></li>\n<li><a href=\"https://www.passbolt.com\">https://www.passbolt.com</a></li>\n<li><a href=\"https://www.passbolt.com/security/more\">https://www.passbolt.com/security/more</a></li>\n<li><a href=\"https://www.passbolt.com/incidents/pwned-password-service-information-leak\">https://www.passbolt.com/incidents/pwned-password-service-information-leak</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfq4-78j7-v594\">https://github.com/advisories/GHSA-xfq4-78j7-v594</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfq4-78j7-v594",
            "title": "[passbolt-browser-extension] Passbolt Browser Extension leaks password information",
            "date_modified": "2025-06-19T14:30:36.000Z",
            "date_published": "2024-04-26T03:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfq4-78j7-v594"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pg-promise before 11.5.5 is vulnerable to SQL Injection due to improper handling of negative numbers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29744\">https://nvd.nist.gov/vuln/detail/CVE-2025-29744</a></li>\n<li><a href=\"https://github.com/vitaly-t/pg-promise/discussions/911\">https://github.com/vitaly-t/pg-promise/discussions/911</a></li>\n<li><a href=\"https://www.sonarsource.com/blog/double-dash-double-trouble-a-subtle-sql-injection-flaw\">https://www.sonarsource.com/blog/double-dash-double-trouble-a-subtle-sql-injection-flaw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ff9h-848c-4xfj\">https://github.com/advisories/GHSA-ff9h-848c-4xfj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ff9h-848c-4xfj",
            "title": "[pg-promise] pg-promise SQL Injection vulnerability",
            "date_modified": "2025-06-18T19:41:43.000Z",
            "date_published": "2025-06-12T18:31:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ff9h-848c-4xfj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"critical-security-advisory-for-taylored-npm-package-v707---tag-705\">Critical Security Advisory for Taylored npm package v7.0.7 - tag 7.0.5</h3>\n<h4 id=\"summary\">Summary</h4>\n<p>A series of moderate to high-severity security vulnerabilities have been identified specifically in version <strong>7.0.7 of `taylored`</strong>. These vulnerabilities reside in the \"Backend-in-a-Box\" template distributed with this version. They could allow a malicious actor to read arbitrary files from the server, download paid patches without completing a valid purchase, and weaken the protection of encrypted patches.</p>\n<p><strong>All users who have installed or generated a `taysell-server` using version 7.0.7 of `taylored` are strongly advised to immediately upgrade to version 7.0.8 (or later) and follow the required mitigation steps outlined below.</strong> Versions prior to 7.0.7 did not include the Taysell functionality and are therefore not affected by these specific issues.</p>\n<h4 id=\"vulnerabilities-patched-in-v708\">Vulnerabilities Patched in v7.0.8</h4>\n<p>Version 7.0.8 addresses the following issues found in the v7.0.7 template:</p>\n<ol>\n<li><strong>Path Traversal in Patch Download:</strong> The patch download endpoint did not properly sanitize the user-provided `patchId`. An attacker could have crafted a request with path traversal sequences (e.g., `../../etc/passwd`) to read arbitrary files from the server's filesystem. The `patchId` is now sanitized to ensure only files within the intended patches directory can be accessed.</li>\n<li><strong>Missing PayPal Webhook Validation:</strong> The server endpoint did not cryptographically verify incoming payment notifications, allowing an attacker to spoof a purchase and gain unauthorized access to patches.</li>\n<li><strong>Purchase Token Replay Vulnerability:</strong> A legitimate purchase token could be reused indefinitely. The system now correctly invalidates tokens after their first use.</li>\n<li><strong>Insufficient PBKDF2 Iterations:</strong> The key derivation function used an insufficient number of iterations, making encrypted patches more susceptible to brute-force attacks. This has been strengthened.</li>\n</ol>\n<h3 id=\"required-actions\">Required Actions</h3>\n<p>To fix these vulnerabilities, users of version <strong>7.0.7</strong> must <strong>upgrade the `taylored` tool and regenerate their `taysell-server` instance</strong>.</p>\n<p>Please follow these steps carefully:</p>\n<ol>\n<li><p><strong>Upgrade to the Secure Version of `taylored`:</strong>\nOpen your terminal and run the following command to install the latest version:\n```bash\nnpm install -g taylored@latest\n```\nVerify that you have version 7.0.8 or later.</p>\n</li>\n<li><p><strong>Remove the Vulnerable Backend:</strong>\nNavigate to the project directory where you previously generated the backend with v7.0.7 and <strong>completely delete the old `taysell-server` directory</strong>.\n```bash</p>\n<h1 id=\"back-up-any-customizations-if-necessary\">Back up any customizations if necessary</h1>\n<p>rm -rf taysell-server\n```</p>\n</li>\n<li><p><strong>Generate the New, Secure Backend:</strong>\nFrom the same directory, run the `setup-backend` command again using the upgraded `taylored` tool. This will create a new `taysell-server` directory with the patched, secure code.\n```bash\ntaylored setup-backend\n```\nFollow the prompts and enter your PayPal credentials and server configuration. <strong>Using a new, strong, and unique `PATCH_ENCRYPTION_KEY` is highly recommended.</strong></p>\n</li>\n<li><p><strong>Recreate and Re-upload Commercial Patches:</strong>\nDue to the cryptography improvements, <strong>patches created with version 7.0.7 are not compatible with the new, secure backend</strong>. You must recreate them:</p>\n<ul>\n<li>For each of your commercial patches, run the `taylored create-taysell` command again.</li>\n<li>Upload the new encrypted files (e.g., `patch-name.taylored.encrypted`) to the `patches/` directory of your new `taysell-server`.</li>\n</ul>\n</li>\n<li><p><strong>Launch the New Server:</strong>\nStart your new backend using Docker Compose:\n```bash\ncd taysell-server\ndocker-compose up --build -d\n```</p>\n</li>\n</ol>\n<p>For questions or support, please refer to the official documentation or open an issue on our GitHub repository.</p>\n<p>Thank you for your attention to this important update.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tailot/taylored/security/advisories/GHSA-8g98-m4j9-qww5\">https://github.com/tailot/taylored/security/advisories/GHSA-8g98-m4j9-qww5</a></li>\n<li><a href=\"https://github.com/tailot/taylored/commit/57b7634391959dbbdb39b387ac4dc68157cd58a1\">https://github.com/tailot/taylored/commit/57b7634391959dbbdb39b387ac4dc68157cd58a1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8g98-m4j9-qww5\">https://github.com/advisories/GHSA-8g98-m4j9-qww5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8g98-m4j9-qww5",
            "title": "[taylored] Taylored webhook validation vulnerabilities",
            "date_modified": "2025-06-18T17:51:03.000Z",
            "date_published": "2025-06-18T17:51:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8g98-m4j9-qww5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>XSS via <code>.py</code> file containing script tag interpreted as HTML</p>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability exists in the file preview/browsing feature of the application, where files with a <code>.py</code> extension that contain JavaScript code wrapped in <code>&lt;script&gt;</code> tags may be interpreted and executed as HTML in certain modes. This leads to a stored XSS vulnerability.</p>\n<h2 id=\"affected-versions\">Affected Versions</h2>\n<ul>\n<li>&lt;= 4.0.0-rc.3</li>\n</ul>\n<h2 id=\"poc\">PoC</h2>\n<p>Create a <code>.py</code> file with arbitrary JavaScript content wrapped in <code>&lt;script&gt;</code> tags. For example:</p>\n<pre><code class=\"language-javascript\">&lt;script&gt;alert(document.cookie);&lt;/script&gt;\n</code></pre>\n<p>When a victim views the file in browsing mode (e.g., a rendered preview), the JavaScript is executed in the browser context.</p>\n<hr>\n<h2 id=\"attack-vector\">Attack vector</h2>\n<p>An attacker can place such a <code>.py</code> file in the system via remote channels, such as:</p>\n<ul>\n<li>Convincing a webmaster to download or upload the file; </li>\n<li>Tricking users into accessing a file link via public URLs.</li>\n</ul>\n<h2 id=\"required-permissions\">Required permissions</h2>\n<ul>\n<li>None, if public or visitor access is enabled.</li>\n<li>If the file is uploaded by a user with elevated permissions, potential privilege boundaries may be crossed.</li>\n</ul>\n<h2 id=\"user-interaction\">User interaction</h2>\n<p>Yes. The user must manually click to switch to the browsing or preview mode to trigger the script. And seems only when using <code>ISO-8859-1</code> encoding.</p>\n<h2 id=\"scope\">Scope</h2>\n<ul>\n<li>Unchanged <code>(S:U)</code> - The attack does not cross system or privilege boundaries in general.</li>\n<li>⚠️ Controversial edge case: If sensitive preview files are accessible due to misconfiguration, scope could be considered Changed <code>(S:C)</code>.</li>\n</ul>\n<h2 id=\"impact\">Impact</h2>\n<ul>\n<li>Confidentiality: User information including cookies, login state, and localStorage may be accessed. Some files that only can be viewed via this user will leak too.</li>\n<li>Integrity &amp; Availability: Not directly impacted.</li>\n</ul>\n<hr>\n<h2 id=\"recommendations\">Recommendations</h2>\n<ul>\n<li>Treat all previewed file types (including non-HTML like .py) as plain text unless explicitly sanitized.</li>\n<li>Disable rendering modes that can interpret user-uploaded content as HTML.</li>\n</ul>\n<h2 id=\"timeline\">Timeline</h2>\n<table>\n<thead>\n<tr>\n<th>Date</th>\n<th>Event</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2025-06-17</td>\n<td>Vulnerability reported</td>\n</tr>\n<tr>\n<td>2025-06-17</td>\n<td>Comminuty Manager confirmed</td>\n</tr>\n<tr>\n<td>2025-06-17</td>\n<td>Fixed</td>\n</tr>\n</tbody></table>\n<h1 id=\"credits\">Credits</h1>\n<ul>\n<li>Discovered by: @zyk2507</li>\n<li>Reported to: <a href=\"https://github.com/OpenListTeam\">The OpenList Team</a></li>\n<li>Analyzed and confirmed by: @jyxjjj</li>\n<li>Fixed by: @cxw620</li>\n<li>Fixed in: <code>4.0.0-rc.4</code></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenListTeam/OpenList/security/advisories/GHSA-2hw3-h8qx-hqqp\">https://github.com/OpenListTeam/OpenList/security/advisories/GHSA-2hw3-h8qx-hqqp</a></li>\n<li><a href=\"https://github.com/OpenListTeam/OpenList-Frontend/commit/7b5ed20c608c7b9b36d1950a386678e0a89f8175\">https://github.com/OpenListTeam/OpenList-Frontend/commit/7b5ed20c608c7b9b36d1950a386678e0a89f8175</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-50183\">https://nvd.nist.gov/vuln/detail/CVE-2025-50183</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2hw3-h8qx-hqqp\">https://github.com/advisories/GHSA-2hw3-h8qx-hqqp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2hw3-h8qx-hqqp",
            "title": "[@openlist-frontend/openlist-frontend] OpenList (frontend) allows XSS Attacks in the built-in Markdown Viewer",
            "date_modified": "2025-06-19T15:19:19.000Z",
            "date_published": "2025-06-18T14:41:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2hw3-h8qx-hqqp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the proof of concept does not demonstrate a practical security impact. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>A denial of service (DoS) vulnerability has been identified in the JavaScript library microlight version 0.0.7. This library, used for syntax highlighting, does not limit the size of textual content it processes in HTML elements with the microlight class. When excessively large content (e.g., 100 million characters) is processed, the reset function in microlight.js consumes excessive memory and CPU resources, causing browser crashes or unresponsiveness. An attacker can exploit this vulnerability by tricking a user into visiting a malicious web page containing a microlight element with large content, resulting in a denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-45526\">https://nvd.nist.gov/vuln/detail/CVE-2025-45526</a></li>\n<li><a href=\"https://gist.github.com/Rootingg/483b09b760d031b62b172f2153f3ed2a\">https://gist.github.com/Rootingg/483b09b760d031b62b172f2153f3ed2a</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/5730\">https://github.com/github/advisory-database/pull/5730</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgc6-9f6w-h8hx\">https://github.com/advisories/GHSA-wgc6-9f6w-h8hx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgc6-9f6w-h8hx",
            "title": "[microlight] Withdrawn Advisory: microlight allows a denial of service",
            "date_modified": "2025-06-18T17:11:36.000Z",
            "date_published": "2025-06-17T21:32:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgc6-9f6w-h8hx"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}