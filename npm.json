{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Versions of the package bun before 1.1.30 are vulnerable to Prototype Pollution due to improper input sanitization. An attacker can exploit this vulnerability through Bun's APIs that accept objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21548\">https://nvd.nist.gov/vuln/detail/CVE-2024-21548</a></li>\n<li><a href=\"https://github.com/oven-sh/bun/pull/14119\">https://github.com/oven-sh/bun/pull/14119</a></li>\n<li><a href=\"https://github.com/oven-sh/bun/commit/a234e067a5dc7837602df3fb5489e826920cc65a\">https://github.com/oven-sh/bun/commit/a234e067a5dc7837602df3fb5489e826920cc65a</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-BUN-8499549\">https://security.snyk.io/vuln/SNYK-JS-BUN-8499549</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v9mx-4pqq-h232\">https://github.com/advisories/GHSA-v9mx-4pqq-h232</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v9mx-4pqq-h232",
            "title": "[bun] Bun has an Application-level Prototype Pollution vulnerability in the runtime native API for Glo",
            "date_modified": "2024-12-18T16:56:07.000Z",
            "date_published": "2024-12-18T06:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v9mx-4pqq-h232"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jsii</code> is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>You may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the <code>jsii.configureCategories()</code> function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. </p>\n<p><strong>This will not affect jsii itself, but it might affect the application you have loaded jsii into.</strong></p>\n<blockquote>\n<p>The function <code>jsii.configureCategories()</code> is used to configure the severity (error, warning, etc.) of various jsii diagnostics.</p>\n</blockquote>\n<p><strong>Impacted versions: &lt;=5.7.2, &lt;=5.6.3, &lt;=5.5.14, &lt;=5.4.45</strong> </p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n</code></pre>\n<p>For more information about javascript prototype pollution, see [1].</p>\n<h2 id=\"patches\">Patches</h2>\n<p>A patch is included in versions <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">5.7.3</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">5.6.4</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">5.5.15</a>, <a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">5.4.46</a></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Sanitize user input to configureCategories() by stripping the <strong>proto</strong> property if detected.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://learn.snyk.io/lesson/prototype-pollution/\">https://learn.snyk.io/lesson/prototype-pollution/</a></p>\n<p>[2] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/issue-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.4.46\">https://github.com/aws/jsii-compiler/releases/tag/v5.4.46</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.5.15\">https://github.com/aws/jsii-compiler/releases/tag/v5.5.15</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.6.4\">https://github.com/aws/jsii-compiler/releases/tag/v5.6.4</a></li>\n<li><a href=\"https://github.com/aws/jsii-compiler/releases/tag/v5.7.3\">https://github.com/aws/jsii-compiler/releases/tag/v5.7.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m56h-5xx3-2jc2\">https://github.com/advisories/GHSA-m56h-5xx3-2jc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2",
            "title": "[jsii] Prototype pollution in jsii.configureCategories",
            "date_modified": "2024-12-18T15:50:11.000Z",
            "date_published": "2024-12-18T15:50:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A bug in Astro’s CSRF-protection middleware allows requests to bypass CSRF checks.</p>\n<h3 id=\"details\">Details</h3>\n<p>When the <code>security.checkOrigin</code> configuration option is set to <code>true</code>, Astro middleware will perform a CSRF check. (Source code: <a href=\"https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts\">https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts</a>)</p>\n<p>For example, with the following Astro configuration:</p>\n<pre><code class=\"language-js\">// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n    output: 'server',\n    security: { checkOrigin: true },\n    adapter: node({ mode: 'standalone' }),\n});\n</code></pre>\n<p>A request like the following would be blocked if made from a different origin:</p>\n<pre><code class=\"language-js\">// fetch API or &lt;form action=\"https://test.example.com/\" method=\"POST\"&gt;\nfetch('https://test.example.com/', {\n    method: 'POST',\n    credentials: 'include',\n    body: 'a=b',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n});\n// =&gt; Cross-site POST form submissions are forbidden\n</code></pre>\n<p>However, a vulnerability exists that can bypass this security.</p>\n<h4 id=\"pattern-1-requests-with-a-semicolon-after-the-content-type\">Pattern 1: Requests with a semicolon after the <code>Content-Type</code></h4>\n<p>A semicolon-delimited parameter is allowed after the type in <code>Content-Type</code>.</p>\n<p>Web browsers will treat a <code>Content-Type</code> such as <code>application/x-www-form-urlencoded; abc</code> as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\">simple request</a> and will not perform preflight validation. In this case, CSRF is not blocked as expected.</p>\n<pre><code class=\"language-js\">fetch('https://test.example.com', {\n    method: 'POST',\n    credentials: 'include',\n    body: 'test',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded; abc' },\n});\n// =&gt; Server-side functions are executed (Response Code 200).\n</code></pre>\n<h4 id=\"pattern-2-request-without-content-type-header\">Pattern 2: Request without <code>Content-Type</code> header</h4>\n<p>The <code>Content-Type</code> header is not required for a request. The following examples are sent without a <code>Content-Type</code> header, resulting in CSRF.</p>\n<pre><code class=\"language-js\">// Pattern 2.1 Request without body\nfetch('http://test.example.com', { method: 'POST', credentials: 'include' });\n\n// Pattern 2.2 Blob object without type\nfetch('https://test.example.com', {\n    method: 'POST',\n    credentials: 'include',\n    body: new Blob(['a=b'], {}),\n});\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass CSRF protection implemented with CSRF middleware.</p>\n<blockquote>\n<p>[!Note]\nEven with <code>credentials: 'include'</code>, browsers may not send cookies due to third-party cookie blocking. This feature depends on the browser version and settings, and is for privacy protection, not as a CSRF measure.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/withastro/astro/security/advisories/GHSA-c4pw-33h3-35xw\">https://github.com/withastro/astro/security/advisories/GHSA-c4pw-33h3-35xw</a></li>\n<li><a href=\"https://github.com/withastro/astro/commit/e7d14c374b9d45e27089994a4eb72186d05514de\">https://github.com/withastro/astro/commit/e7d14c374b9d45e27089994a4eb72186d05514de</a></li>\n<li><a href=\"https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts\">https://github.com/withastro/astro/blob/6031962ab5f56457de986eb82bd24807e926ba1b/packages/astro/src/core/app/middlewares.ts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4pw-33h3-35xw\">https://github.com/advisories/GHSA-c4pw-33h3-35xw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4pw-33h3-35xw",
            "title": "[astro] Atro CSRF Middleware Bypass (security.checkOrigin)",
            "date_modified": "2024-12-18T15:02:38.000Z",
            "date_published": "2024-12-18T15:02:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4pw-33h3-35xw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If a Next.js application is performing authorization in middleware based on pathname, it was possible for this authorization to be bypassed for pages directly under the application's root directory. For example:</p>\n<ul>\n<li>[Not affected] <code>https://example.com/</code></li>\n<li>[Affected] <code>https://example.com/foo</code></li>\n<li>[Not affected] <code>https://example.com/foo/bar</code></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was patched in Next.js <code>14.2.15</code> and later.</p>\n<p>If your Next.js application is hosted on Vercel, this vulnerability has been automatically mitigated, regardless of Next.js version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no official workarounds for this vulnerability.</p>\n<h4 id=\"credits\">Credits</h4>\n<p>We'd like to thank <a href=\"http://github.com/tyage\">tyage</a> (GMO CyberSecurity by IERAE) for responsible disclosure of this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-7gfc-8cq8-jh5f\">https://github.com/vercel/next.js/security/advisories/GHSA-7gfc-8cq8-jh5f</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/1c8234eb20bc8afd396b89999a00f06b61d72d7b\">https://github.com/vercel/next.js/commit/1c8234eb20bc8afd396b89999a00f06b61d72d7b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51479\">https://nvd.nist.gov/vuln/detail/CVE-2024-51479</a></li>\n<li><a href=\"https://github.com/vercel/next.js/releases/tag/v14.2.15\">https://github.com/vercel/next.js/releases/tag/v14.2.15</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7gfc-8cq8-jh5f\">https://github.com/advisories/GHSA-7gfc-8cq8-jh5f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7gfc-8cq8-jh5f",
            "title": "[next] Next.js authorization bypass vulnerability",
            "date_modified": "2024-12-17T21:35:56.000Z",
            "date_published": "2024-12-17T15:09:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7gfc-8cq8-jh5f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>due to a weakness in the encryption method used in cookie-encrypter an attack can use the world visible IV to edit encrypted cookies without decrypting the cookie itself. This is known as an AES CBC bit flipping attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53441\">https://nvd.nist.gov/vuln/detail/CVE-2024-53441</a></li>\n<li><a href=\"https://gist.github.com/mathysEthical/f45f1503f87381090e38a33c50eec971\">https://gist.github.com/mathysEthical/f45f1503f87381090e38a33c50eec971</a></li>\n<li><a href=\"https://mathys.reboux.pro/CVE/2024/53441\">https://mathys.reboux.pro/CVE/2024/53441</a></li>\n<li><a href=\"https://github.com/ebourmalo/cookie-encrypter/issues/9\">https://github.com/ebourmalo/cookie-encrypter/issues/9</a></li>\n<li><a href=\"https://crypto.stackexchange.com/questions/66085/bit-flipping-attack-on-cbc-mode\">https://crypto.stackexchange.com/questions/66085/bit-flipping-attack-on-cbc-mode</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h63v-hw6g-x8hp\">https://github.com/advisories/GHSA-h63v-hw6g-x8hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h63v-hw6g-x8hp",
            "title": "[cookie-encrypter] Bit flip attack vulnerability in cookie-encrypter",
            "date_modified": "2024-12-12T15:31:49.000Z",
            "date_published": "2024-12-09T21:31:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h63v-hw6g-x8hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>pnpm seems to mishandle overrides and global cache:</p>\n<ol>\n<li>Overrides from one workspace leak into npm metadata saved in global cache</li>\n<li>npm metadata from global cache affects other workspaces</li>\n<li>installs by default don't revalidate the data (including on first lockfile generation)</li>\n</ol>\n<p>This can make workspace A (even running with <code>ignore-scripts=true</code>) posion global cache and execute scripts in workspace B</p>\n<p>Users generally expect <code>ignore-scripts</code> to be sufficient to prevent immediate code execution on install (e.g. when the tree is just repacked/bundled without executing it).</p>\n<p>Here, that expectation is broken</p>\n<h3 id=\"details\">Details</h3>\n<p>See PoC.</p>\n<p>In it, overrides from a single run of A get leaked into e.g. <code>~/Library/Caches/pnpm/metadata/registry.npmjs.org/rimraf.json</code> and persistently affect all other projects using the cache</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Postinstall code used in PoC is benign and can be inspected in <a href=\"https://www.npmjs.com/package/ponyhooves?activeTab=code\">https://www.npmjs.com/package/ponyhooves?activeTab=code</a>, it's just a <code>console.log</code></p>\n<ol>\n<li>Remove store and cache\nOn mac: <code>rm -rf ~/Library/Caches/pnpm ~/Library/pnpm/store</code>\nThis step is not required in general, but we'll be using a popular package for PoC that's likely cached</li>\n<li>Create <code>A/package.json</code>:<pre><code class=\"language-json\">{\n  \"name\": \"A\",\n  \"pnpm\": { \"overrides\": { \"rimraf&gt;glob\": \"npm:ponyhooves@1\" } },\n  \"dependencies\": { \"rimraf\": \"6.0.1\" }\n}\n</code></pre>\nInstall it with <code>pnpm i --ignore-scripts</code> (the flag is not required, but the point of the demo is to show that it doesn't help)</li>\n<li>Create <code>B/package.json</code>:<pre><code class=\"language-json\">{\n  \"name\": \"B\",\n  \"dependencies\": { \"rimraf\": \"6.0.1\" }\n}\n</code></pre>\nInstall it with <code>pnpm i</code></li>\n</ol>\n<p>Result:</p>\n<pre><code class=\"language-console\">Packages: +3\n+++\nProgress: resolved 3, reused 3, downloaded 0, added 3, done\nnode_modules/.pnpm/ponyhooves@1.0.1/node_modules/ponyhooves: Running postinstall script, done in 51ms\n\ndependencies:\n+ rimraf 6.0.1\n\nDone in 1.4s\n</code></pre>\n<p>Also, that code got leaked into another project and it's lockfile now! </p>\n<h3 id=\"impact\">Impact</h3>\n<p>Global state integrity is lost via operations that one would expect to be secure, enabling subsequently running arbitrary code execution on installs</p>\n<p>As a work-around, use separate cache and store dirs in each workspace</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-vm32-9rqf-rh3r\">https://github.com/pnpm/pnpm/security/advisories/GHSA-vm32-9rqf-rh3r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53866\">https://nvd.nist.gov/vuln/detail/CVE-2024-53866</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/commit/11afcddea48f25ed5117a87dc1780a55222b9743\">https://github.com/pnpm/pnpm/commit/11afcddea48f25ed5117a87dc1780a55222b9743</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vm32-9rqf-rh3r\">https://github.com/advisories/GHSA-vm32-9rqf-rh3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vm32-9rqf-rh3r",
            "title": "[pnpm] pnpm no-script global cache poisoning via overrides / `ignore-scripts` evasion",
            "date_modified": "2024-12-10T22:42:44.000Z",
            "date_published": "2024-12-10T22:42:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vm32-9rqf-rh3r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-Site Request Forgery (CSRF) in Avenwu Whistle v.2.9.90 and before allows attackers to perform malicious API calls, resulting in the execution of arbitrary code on the victim's machine.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-55500\">https://nvd.nist.gov/vuln/detail/CVE-2024-55500</a></li>\n<li><a href=\"https://github.com/avwo/whistle/commit/d1b8ca275dc4e453bd2efed392c0fd4b92f73cdf\">https://github.com/avwo/whistle/commit/d1b8ca275dc4e453bd2efed392c0fd4b92f73cdf</a></li>\n<li><a href=\"https://www.sonarsource.com/blog/never-underestimate-csrf-why-origin-reflection-is-a-bad-idea\">https://www.sonarsource.com/blog/never-underestimate-csrf-why-origin-reflection-is-a-bad-idea</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gg6x-448q-pqqm\">https://github.com/advisories/GHSA-gg6x-448q-pqqm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gg6x-448q-pqqm",
            "title": "[whistle] Avenwu Whistle Cross-Site Request Forgery (CSRF)",
            "date_modified": "2024-12-10T22:41:24.000Z",
            "date_published": "2024-12-10T21:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gg6x-448q-pqqm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can write a malicious expression that escapes the sandbox to execute arbitrary code on the system.</p>\n<p>Example of vulnerable code:</p>\n<pre><code class=\"language-js\">const expressions = require(\"angular-expressions\");\nconst result = expressions.compile(\"__proto__.constructor\")({}, {});\n// result should be undefined, however for versions &lt;=1.4.2, it returns an object.\n</code></pre>\n<p>With a more complex (undisclosed) payload, one can get full access to Arbitrary code execution on the system.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in version 1.4.3 of angular-expressions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is one workaround if it not possible for you to update : </p>\n<ul>\n<li>Make sure that you use the compiled function with just one argument : ie this is not vulnerable : \n  <code>const result = expressions.compile(\"__proto__.constructor\")({});</code> : in this case you lose the feature of locals if you need it.</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Credits go to <a href=\"https://github.com/JorianWoltjer\">JorianWoltjer</a> who has found the issue and reported it to use. <a href=\"https://jorianwoltjer.com/\">https://jorianwoltjer.com/</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/peerigon/angular-expressions/security/advisories/GHSA-5462-4vcx-jh7j\">https://github.com/peerigon/angular-expressions/security/advisories/GHSA-5462-4vcx-jh7j</a></li>\n<li><a href=\"https://github.com/peerigon/angular-expressions/commit/97f7ad94006156eeb97fc942332578b6cfbf8eef\">https://github.com/peerigon/angular-expressions/commit/97f7ad94006156eeb97fc942332578b6cfbf8eef</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54152\">https://nvd.nist.gov/vuln/detail/CVE-2024-54152</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5462-4vcx-jh7j\">https://github.com/advisories/GHSA-5462-4vcx-jh7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5462-4vcx-jh7j",
            "title": "[angular-expressions] Angular Expressions - Remote Code Execution when using locals",
            "date_modified": "2024-12-10T20:59:49.000Z",
            "date_published": "2024-12-10T16:54:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5462-4vcx-jh7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When nanoid is called with a fractional value, there were a number of undesirable effects:</p>\n<ol>\n<li>in browser and non-secure, the code infinite loops on while (size--)</li>\n<li>in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled</li>\n<li>if the first call in node is a fractional argument, the initial buffer allocation fails with an error</li>\n</ol>\n<p>Version 3.3.8 and 5.0.9 are fixed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-55565\">https://nvd.nist.gov/vuln/detail/CVE-2024-55565</a></li>\n<li><a href=\"https://github.com/ai/nanoid/pull/510\">https://github.com/ai/nanoid/pull/510</a></li>\n<li><a href=\"https://github.com/ai/nanoid/compare/3.3.7...3.3.8\">https://github.com/ai/nanoid/compare/3.3.7...3.3.8</a></li>\n<li><a href=\"https://github.com/ai/nanoid/releases/tag/5.0.9\">https://github.com/ai/nanoid/releases/tag/5.0.9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mwcw-c2x4-8c55\">https://github.com/advisories/GHSA-mwcw-c2x4-8c55</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mwcw-c2x4-8c55",
            "title": "[nanoid] Predictable results in nanoid generation when given non-integer values",
            "date_modified": "2024-12-13T22:57:32.000Z",
            "date_published": "2024-12-09T03:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mwcw-c2x4-8c55"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When nanoid is called with a fractional value, there were a number of undesirable effects:</p>\n<ol>\n<li>in browser and non-secure, the code infinite loops on while (size--)</li>\n<li>in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled</li>\n<li>if the first call in node is a fractional argument, the initial buffer allocation fails with an error</li>\n</ol>\n<p>Version 3.3.8 and 5.0.9 are fixed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-55565\">https://nvd.nist.gov/vuln/detail/CVE-2024-55565</a></li>\n<li><a href=\"https://github.com/ai/nanoid/pull/510\">https://github.com/ai/nanoid/pull/510</a></li>\n<li><a href=\"https://github.com/ai/nanoid/compare/3.3.7...3.3.8\">https://github.com/ai/nanoid/compare/3.3.7...3.3.8</a></li>\n<li><a href=\"https://github.com/ai/nanoid/releases/tag/5.0.9\">https://github.com/ai/nanoid/releases/tag/5.0.9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mwcw-c2x4-8c55\">https://github.com/advisories/GHSA-mwcw-c2x4-8c55</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mwcw-c2x4-8c55",
            "title": "[nanoid] Predictable results in nanoid generation when given non-integer values",
            "date_modified": "2024-12-13T22:57:32.000Z",
            "date_published": "2024-12-09T03:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mwcw-c2x4-8c55"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When setting <code>WEBSOCKETS_GRAPHQL_AUTH</code> or <code>WEBSOCKETS_REST_AUTH</code> to \"public\", an unauthenticated user is able to do any of the supported operations (CRUD, subscriptions) with full admin privileges.</p>\n<h3 id=\"details\">Details</h3>\n<p>Accountability for unauthenticated WebSocket requests is set to null, which used to be \"public permissions\" until the Permissions Policy update which now defaults that to system/admin level access. So instead of null we need to make use of <code>createDefaultAccountability()</code> to ensure public permissions are used for unauthenticated users.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Start directus with</li>\n</ol>\n<pre><code class=\"language-bash\">WEBSOCKETS_ENABLED=true\nWEBSOCKETS_GRAPHQL_AUTH=public\nWEBSOCKETS_REST_AUTH=public\n</code></pre>\n<ol start=\"2\">\n<li>Subscribe using GQL or REST or do any CRUD operation on a user created collection (system tables are not reachable with crud)</li>\n</ol>\n<pre><code class=\"language-gql\">subscription {\n    directus_users_mutated {\n        key\n        event\n        data {\n            id\n            email\n            first_name\n            last_name\n            password\n        }\n    }\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-json\">{\n   \"type\": \"items\",\n   \"action\": \"read\",\n   \"collection\": \"your_collection_name\"\n}\n</code></pre>\n<p>3a. Open up the data studio as any user. Observe how the subscriber gets notified on each page navigation (because the users <code>last_page</code> gets updated, the <code>password</code> fields is properly redacted here)</p>\n<p>3b. Observe receiving all available items from the <code>your_collection_name</code> collection.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This impacts any Directus instance that has either <code>WEBSOCKETS_GRAPHQL_AUTH</code> or <code>WEBSOCKETS_REST_AUTH</code> set to <code>public</code> allowing unauthenticated users to subscribe for changes on any collection or do REST CRUD operations on user defined collections ignoring permissions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-849r-qrwj-8rv4\">https://github.com/directus/directus/security/advisories/GHSA-849r-qrwj-8rv4</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/ce0397d16cf767b5293cd57f626c5349b5732a21\">https://github.com/directus/directus/commit/ce0397d16cf767b5293cd57f626c5349b5732a21</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54151\">https://nvd.nist.gov/vuln/detail/CVE-2024-54151</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-849r-qrwj-8rv4\">https://github.com/advisories/GHSA-849r-qrwj-8rv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-849r-qrwj-8rv4",
            "title": "[@directus/api] Directus allows unauthenticated access to WebSocket events and operations",
            "date_modified": "2024-12-09T21:54:15.000Z",
            "date_published": "2024-12-09T20:40:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-849r-qrwj-8rv4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When setting <code>WEBSOCKETS_GRAPHQL_AUTH</code> or <code>WEBSOCKETS_REST_AUTH</code> to \"public\", an unauthenticated user is able to do any of the supported operations (CRUD, subscriptions) with full admin privileges.</p>\n<h3 id=\"details\">Details</h3>\n<p>Accountability for unauthenticated WebSocket requests is set to null, which used to be \"public permissions\" until the Permissions Policy update which now defaults that to system/admin level access. So instead of null we need to make use of <code>createDefaultAccountability()</code> to ensure public permissions are used for unauthenticated users.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Start directus with</li>\n</ol>\n<pre><code class=\"language-bash\">WEBSOCKETS_ENABLED=true\nWEBSOCKETS_GRAPHQL_AUTH=public\nWEBSOCKETS_REST_AUTH=public\n</code></pre>\n<ol start=\"2\">\n<li>Subscribe using GQL or REST or do any CRUD operation on a user created collection (system tables are not reachable with crud)</li>\n</ol>\n<pre><code class=\"language-gql\">subscription {\n    directus_users_mutated {\n        key\n        event\n        data {\n            id\n            email\n            first_name\n            last_name\n            password\n        }\n    }\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-json\">{\n   \"type\": \"items\",\n   \"action\": \"read\",\n   \"collection\": \"your_collection_name\"\n}\n</code></pre>\n<p>3a. Open up the data studio as any user. Observe how the subscriber gets notified on each page navigation (because the users <code>last_page</code> gets updated, the <code>password</code> fields is properly redacted here)</p>\n<p>3b. Observe receiving all available items from the <code>your_collection_name</code> collection.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This impacts any Directus instance that has either <code>WEBSOCKETS_GRAPHQL_AUTH</code> or <code>WEBSOCKETS_REST_AUTH</code> set to <code>public</code> allowing unauthenticated users to subscribe for changes on any collection or do REST CRUD operations on user defined collections ignoring permissions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-849r-qrwj-8rv4\">https://github.com/directus/directus/security/advisories/GHSA-849r-qrwj-8rv4</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/ce0397d16cf767b5293cd57f626c5349b5732a21\">https://github.com/directus/directus/commit/ce0397d16cf767b5293cd57f626c5349b5732a21</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54151\">https://nvd.nist.gov/vuln/detail/CVE-2024-54151</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-849r-qrwj-8rv4\">https://github.com/advisories/GHSA-849r-qrwj-8rv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-849r-qrwj-8rv4",
            "title": "[directus] Directus allows unauthenticated access to WebSocket events and operations",
            "date_modified": "2024-12-09T21:54:15.000Z",
            "date_published": "2024-12-09T20:40:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-849r-qrwj-8rv4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Trix editor, in versions prior to 2.1.9 and 1.3.3, is vulnerable to XSS + mutation XSS attacks when pasting malicious code.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker could trick a user to copy and paste malicious code that would execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update Recommendation: Users should upgrade to Trix editor version 2.1.9 or later, which uses <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a> to sanitize the pasted content. </p>\n<p>If using Trix 1.x, upgrade to version 1.3.3 or later.</p>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>This is not really a workaround but something that should be considered in addition to upgrading to the patched version. If affected users can disallow browsers that don't support a Content Security Policy, then this would be an effective workaround for this and all XSS vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>\n<h3 id=\"references\">References</h3>\n<p>The XSS vulnerability was reported by HackerOne researcher <a href=\"https://hackerone.com/hiumee?type=user\">hiumee</a>.\nThe mutation XSS vulnerability was reported by HackerOne researcher <a href=\"https://hackerone.com/sudi?type=user\">sudi</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/security/advisories/GHSA-6vx4-v2jw-qwqh\">https://github.com/basecamp/trix/security/advisories/GHSA-6vx4-v2jw-qwqh</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/272c7e27e722608732a67108ad3fe7870e233ac8\">https://github.com/basecamp/trix/commit/272c7e27e722608732a67108ad3fe7870e233ac8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53847\">https://nvd.nist.gov/vuln/detail/CVE-2024-53847</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6vx4-v2jw-qwqh\">https://github.com/advisories/GHSA-6vx4-v2jw-qwqh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6vx4-v2jw-qwqh",
            "title": "[trix] Trix editor subject to XSS vulnerabilities on copy & paste",
            "date_modified": "2024-12-09T21:53:55.000Z",
            "date_published": "2024-12-09T20:38:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6vx4-v2jw-qwqh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Trix editor, in versions prior to 2.1.9 and 1.3.3, is vulnerable to XSS + mutation XSS attacks when pasting malicious code.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker could trick a user to copy and paste malicious code that would execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update Recommendation: Users should upgrade to Trix editor version 2.1.9 or later, which uses <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a> to sanitize the pasted content. </p>\n<p>If using Trix 1.x, upgrade to version 1.3.3 or later.</p>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>This is not really a workaround but something that should be considered in addition to upgrading to the patched version. If affected users can disallow browsers that don't support a Content Security Policy, then this would be an effective workaround for this and all XSS vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>\n<h3 id=\"references\">References</h3>\n<p>The XSS vulnerability was reported by HackerOne researcher <a href=\"https://hackerone.com/hiumee?type=user\">hiumee</a>.\nThe mutation XSS vulnerability was reported by HackerOne researcher <a href=\"https://hackerone.com/sudi?type=user\">sudi</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/security/advisories/GHSA-6vx4-v2jw-qwqh\">https://github.com/basecamp/trix/security/advisories/GHSA-6vx4-v2jw-qwqh</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/272c7e27e722608732a67108ad3fe7870e233ac8\">https://github.com/basecamp/trix/commit/272c7e27e722608732a67108ad3fe7870e233ac8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53847\">https://nvd.nist.gov/vuln/detail/CVE-2024-53847</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6vx4-v2jw-qwqh\">https://github.com/advisories/GHSA-6vx4-v2jw-qwqh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6vx4-v2jw-qwqh",
            "title": "[trix] Trix editor subject to XSS vulnerabilities on copy & paste",
            "date_modified": "2024-12-09T21:53:55.000Z",
            "date_published": "2024-12-09T20:38:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6vx4-v2jw-qwqh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Using <code>merge</code> and <code>clone</code> helper methods in the <code>src/core/util.ts</code> module will have prototype pollution. It will affect the popular data visualization library Apache ECharts, which is using and exported these two methods directly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>It has been patched in <a href=\"https://github.com/ecomfe/zrender/pull/826\">https://github.com/ecomfe/zrender/pull/826</a>. \nUsers should update zrender to <code>5.2.1</code>.  and update echarts to <code>5.2.1</code> if project is using echarts.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>NA</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf\">https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39227\">https://nvd.nist.gov/vuln/detail/CVE-2021-39227</a></li>\n<li><a href=\"https://github.com/ecomfe/zrender/pull/826\">https://github.com/ecomfe/zrender/pull/826</a></li>\n<li><a href=\"https://github.com/ecomfe/zrender/releases/tag/5.2.1\">https://github.com/ecomfe/zrender/releases/tag/5.2.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fhv8-fx5f-7fxf\">https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fhv8-fx5f-7fxf",
            "title": "[zrender] Prototype Pollution in the merge and clone helper methods",
            "date_modified": "2024-12-06T18:20:50.000Z",
            "date_published": "2021-09-20T19:53:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fhv8-fx5f-7fxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Using <code>merge</code> and <code>clone</code> helper methods in the <code>src/core/util.ts</code> module will have prototype pollution. It will affect the popular data visualization library Apache ECharts, which is using and exported these two methods directly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>It has been patched in <a href=\"https://github.com/ecomfe/zrender/pull/826\">https://github.com/ecomfe/zrender/pull/826</a>. \nUsers should update zrender to <code>5.2.1</code>.  and update echarts to <code>5.2.1</code> if project is using echarts.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>NA</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf\">https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39227\">https://nvd.nist.gov/vuln/detail/CVE-2021-39227</a></li>\n<li><a href=\"https://github.com/ecomfe/zrender/pull/826\">https://github.com/ecomfe/zrender/pull/826</a></li>\n<li><a href=\"https://github.com/ecomfe/zrender/releases/tag/5.2.1\">https://github.com/ecomfe/zrender/releases/tag/5.2.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fhv8-fx5f-7fxf\">https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fhv8-fx5f-7fxf",
            "title": "[zrender] Prototype Pollution in the merge and clone helper methods",
            "date_modified": "2024-12-06T18:20:50.000Z",
            "date_published": "2021-09-20T19:53:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fhv8-fx5f-7fxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The regular expression that is vulnerable to backtracking can be generated in the 0.1.x release of <code>path-to-regexp</code>, originally reported in CVE-2024-45296</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 0.1.12.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Avoid using two parameters within a single path segment, when the separator is not <code>.</code> (e.g. no <code>/:a-:b</code>). Alternatively, you can define the regex used for both parameters and ensure they do not overlap to allow backtracking.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-9wv6-86v2-598j\">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>\n<li><a href=\"https://blakeembrey.com/posts/2024-09-web-redos/\">https://blakeembrey.com/posts/2024-09-web-redos/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-rhx6-c78j-4q9w\">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-rhx6-c78j-4q9w</a></li>\n<li><a href=\"https://blakeembrey.com/posts/2024-09-web-redos\">https://blakeembrey.com/posts/2024-09-web-redos</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-52798\">https://nvd.nist.gov/vuln/detail/CVE-2024-52798</a></li>\n<li><a href=\"https://github.com/pillarjs/path-to-regexp/commit/f01c26a013b1889f0c217c643964513acf17f6a4\">https://github.com/pillarjs/path-to-regexp/commit/f01c26a013b1889f0c217c643964513acf17f6a4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rhx6-c78j-4q9w\">https://github.com/advisories/GHSA-rhx6-c78j-4q9w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rhx6-c78j-4q9w",
            "title": "[path-to-regexp] Unpatched `path-to-regexp` ReDoS in 0.1.x",
            "date_modified": "2024-12-06T00:33:29.000Z",
            "date_published": "2024-12-05T22:40:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rhx6-c78j-4q9w"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}