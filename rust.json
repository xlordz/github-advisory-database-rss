{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>When a <code>Some(...)</code> value was passed to the <code>properties</code> argument of either of these functions, a use-after-free would result.</p>\n<p>In practice this would nearly always result in OpenSSL treating the properties as an empty string (due to <code>CString::drop</code>'s behavior).</p>\n<p>The maintainers thank <a href=\"https://github.com/quitbug/\">quitbug</a> for reporting this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sfackler/rust-openssl/pull/2390\">https://github.com/sfackler/rust-openssl/pull/2390</a></li>\n<li><a href=\"https://github.com/sfackler/rust-openssl/commit/87085bd67896b7f92e6de35d081f607a334beae4\">https://github.com/sfackler/rust-openssl/commit/87085bd67896b7f92e6de35d081f607a334beae4</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0022.html\">https://rustsec.org/advisories/RUSTSEC-2025-0022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fcv-w3qc-ppgg\">https://github.com/advisories/GHSA-4fcv-w3qc-ppgg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fcv-w3qc-ppgg",
            "title": "[openssl] rust-openssl Use-After-Free in `Md::fetch` and `Cipher::fetch`",
            "date_modified": "2025-04-04T20:31:09.000Z",
            "date_published": "2025-04-04T20:31:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fcv-w3qc-ppgg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-worktree-state] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-worktree] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-traverse] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-status] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-revwalk] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-revision] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-ref] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-protocol] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-negotiate] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-merge] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-fsck] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-filter] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-discover] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-dir] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-diff] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-config] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-blame] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix-archive] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>gitoxide uses SHA-1 hash implementations without any collision detection, leaving it vulnerable to hash collision attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>gitoxide uses the <code>sha1_smol</code> or <code>sha1</code> crate, both of which implement standard SHA-1 without any mitigations for collision attacks. This means that two distinct Git objects with colliding SHA-1 hashes would break the Git object model and integrity checks when used with gitoxide.</p>\n<p>The SHA-1 function is considered cryptographically insecure. However, in the wake of the SHAttered attacks, this issue was mitigated in Git 2.13.0 in 2017 by using the <a href=\"https://github.com/crmarcstevens/sha1collisiondetection\">sha1collisiondetection</a> algorithm by default and producing an error when known SHA-1 collisions are detected. Git is in the process of migrating to using SHA-256 for object hashes, but this has not been rolled out widely yet and gitoxide does not support SHA-256 object hashes.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following program demonstrates the problem, using the two <a href=\"https://shattered.io/\">SHAttered PDFs</a>:</p>\n<pre><code class=\"language-rust\">use sha1_checked::{CollisionResult, Digest};\n\nfn sha1_oid_of_file(filename: &amp;str) -&gt; gix::ObjectId {\n    let mut hasher = gix::features::hash::hasher(gix::hash::Kind::Sha1);\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    gix::ObjectId::Sha1(hasher.digest())\n}\n\nfn sha1dc_oid_of_file(filename: &amp;str) -&gt; Result&lt;gix::ObjectId, String&gt; {\n    // Matches Git’s behaviour.\n    let mut hasher = sha1_checked::Builder::default().safe_hash(false).build();\n    hasher.update(&amp;std::fs::read(filename).unwrap());\n    match hasher.try_finalize() {\n        CollisionResult::Ok(digest) =&gt; Ok(gix::ObjectId::Sha1(digest.into())),\n        CollisionResult::Mitigated(_) =&gt; unreachable!(),\n        CollisionResult::Collision(digest) =&gt; Err(format!(\n            \"Collision attack: {}\",\n            gix::ObjectId::Sha1(digest.into()).to_hex()\n        )),\n    }\n}\n\nfn main() {\n    dbg!(sha1_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1_oid_of_file(\"shattered-2.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-1.pdf\"));\n    dbg!(sha1dc_oid_of_file(\"shattered-2.pdf\"));\n}\n</code></pre>\n<p>The output is as follows:</p>\n<pre><code>[src/main.rs:24:5] sha1_oid_of_file(\"shattered-1.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:25:5] sha1_oid_of_file(\"shattered-2.pdf\") = Sha1(38762cf7f55934b34d179ae6a4c80cadccbb7f0a)\n[src/main.rs:26:5] sha1dc_oid_of_file(\"shattered-1.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n[src/main.rs:27:5] sha1dc_oid_of_file(\"shattered-2.pdf\") = Err(\n    \"Collision attack: 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\",\n)\n</code></pre>\n<p>The latter behaviour matches Git.</p>\n<p>Since the SHAttered PDFs are not in a valid format for Git objects, a direct proof‐of‐concept using higher‐level APIs cannot be immediately demonstrated without significant computational resources.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker with the ability to mount a collision attack on SHA-1 like the <a href=\"https://shattered.io/\">SHAttered</a> or <a href=\"https://sha-mbles.github.io/\">SHA-1 is a Shambles</a> attacks could create two distinct Git objects with the same hash. This is becoming increasingly affordable for well‐resourced attackers, with the Shambles researchers in 2020 estimating $45k for a chosen‐prefix collision or $11k for a classical collision, and projecting less than $10k for a chosen‐prefix collision by 2025. The result could be used to disguise malicious repository contents, or potentially exploit assumptions in the logic of programs using gitoxide to cause further vulnerabilities.</p>\n<p>This vulnerability affects any user of gitoxide, including <code>gix-*</code> library crates, that reads or writes Git objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-2frx-2596-x5r6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31130\">https://nvd.nist.gov/vuln/detail/CVE-2025-31130</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d\">https://github.com/GitoxideLabs/gitoxide/commit/4660f7a6f71873311f68f170b0f1f6659a02829d</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0021.html\">https://rustsec.org/advisories/RUSTSEC-2025-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2frx-2596-x5r6\">https://github.com/advisories/GHSA-2frx-2596-x5r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6",
            "title": "[gix] gitoxide does not detect SHA-1 collision attacks",
            "date_modified": "2025-04-04T16:06:11.000Z",
            "date_published": "2025-04-04T16:06:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2frx-2596-x5r6"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}