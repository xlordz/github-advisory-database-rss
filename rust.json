{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>During proof generation, the prover must observe all values sent to the verifier to generate valid Fiat-Shamir challenges. Prior to v3.0.0 the cumulative sum of the permutation argument was not observed when sampling zeta, which is a random challenge sampled to force the constraints to be true. In v3.0.0, this is fixed by observing the cumulative sum into the challenger, which can is done by observing the commit to the entire permutation trace.</p>\n<p>While this vulnerability is theoretically present in v2.0.0 and below, exploiting it is quite a difficult task as the cumulative sum one can get from manipulation is essentially random. It requires practically infeasible amount of computation and deep knowledge of cryptographic attacks to carry out.</p>\n<p>This issue was discovered during the audit of SP1 V3.0.0 and was officially fixed on October 17th. Out of abundance of caution, we will be deprecating all versions of SP1 before 3.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/succinctlabs/sp1/security/advisories/GHSA-8m24-3cfx-9fjw\">https://github.com/succinctlabs/sp1/security/advisories/GHSA-8m24-3cfx-9fjw</a></li>\n<li><a href=\"https://github.com/succinctlabs/sp1/commit/79884ffb1a2d10bfd2c272f864033577a052468a\">https://github.com/succinctlabs/sp1/commit/79884ffb1a2d10bfd2c272f864033577a052468a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m24-3cfx-9fjw\">https://github.com/advisories/GHSA-8m24-3cfx-9fjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m24-3cfx-9fjw",
            "title": "[sp1-recursion-circuit] sp1 has insufficient observation of cumulative sum",
            "date_modified": "2024-11-08T16:44:16.000Z",
            "date_published": "2024-11-08T16:44:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m24-3cfx-9fjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Specially crafted Git repositories can cause <code>jj</code> to write files outside the clone.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in 0.23.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Not much other than to not clone repositories from untrusted sources.</p>\n<h3 id=\"references\">References</h3>\n<p>Here's the original report from @joernchen:</p>\n<blockquote>\n<p>When cloning a crafted Git repository it is possible to let <code>jj</code> write\ninto arbitrary directories. This can be achieved by having file objects\nwhich contain path traversals.</p>\n<p>Reproduction steps:</p>\n<p>Apply the following patch to Git version v.2.47.0:</p>\n<pre><code class=\"language-diff\">diff --git a/path.c b/path.c\nindex 93491bab14..2f47e69fd1 100644\n--- a/path.c\n+++ b/path.c\n@@ -44,11 +44,11 @@ struct strbuf *get_pathname(void)\n\n static const char *cleanup_path(const char *path)\n {\n-       /* Clean it up */\n+       /* Clean it up\n        if (skip_prefix(path, \"./\", &amp;path)) {\n                while (*path == '/')\n                        path++;\n-       }\n+       }*/\n        return path;\n }\n\n@@ -1101,7 +1101,9 @@ int normalize_path_copy_len(char *dst, const char *src, int *prefix_len)\n\n int normalize_path_copy(char *dst, const char *src)\n {\n-       return normalize_path_copy_len(dst, src, NULL);\n+//     return normalize_path_copy_len(dst, src, NULL);\n+       memcpy(dst, src, strlen(dst));\n+       return 0;\n }\n\n int strbuf_normalize_path(struct strbuf *src)\ndiff --git a/read-cache.c b/read-cache.c\nindex 3c078afadb..2eb44cb26f 100644\n--- a/read-cache.c\n+++ b/read-cache.c\n@@ -977,6 +977,7 @@ static enum verify_path_result verify_path_internal(const char *path,\n                                                    unsigned mode)\n {\n        char c = 0;\n+       return PATH_OK;\n\n        if (has_dos_drive_prefix(path))\n                return PATH_INVALID;\n</code></pre>\n<p>With this patched <code>git</code> binary we can now apply a crafted\npatch containing a path traversal to a repository.</p>\n<p>The patch would look like:</p>\n<pre><code class=\"language-patch\">From ecea96264bd3f9785e5ebec8640be4847ba28e22 Mon Sep 17 00:00:00 2001\nFrom: joernchen &lt;[joernchen@phenoelit.de](mailto:joernchen@phenoelit.de)&gt;\nDate: Sun, 13 Oct 2024 18:09:50 +0200\nSubject: [PATCH] z123\n\n---\n z | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 z\n\ndiff --git a/../joernchen_was_here b/../joernchen_was_here\nnew file mode 100644\nindex 0000000..e69de29\n--\n2.46.1\n</code></pre>\n<p>Note the traversal <code>../joernchen_was_here</code> in the patch. This now can be committed to a repository\nusing the modified <code>git</code> binary:</p>\n<pre><code class=\"language-bash\">mkdir demo\ncd demo\ngit init\n./path/to/modified/git/git --exec-path=./path/to/modified/git am the_traversal.patch\nrm ../joernchen_was_here # remove the file the modified git wrote\n</code></pre>\n<p>Now, when cloning that repository with <code>jj git clone</code> the path traversal will write above the worktree\ndirectory, allowing arbitrary file writes.</p>\n<p>I've attached a tar.gz with the demo repo so you don't have to mess with the patched Git at all. For\nreproduction it should be sufficient to do <code>jj git clone demo.git</code> after unpacking the tarball.</p>\n<p>The demo repository after being cloned with <code>jj</code> will create an empty file <code>joernchen_was_here</code> right next\nto the <code>demo</code> directory to demonstrate the traversal.</p>\n</blockquote>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/martinvonz/jj/security/advisories/GHSA-88h5-6w7m-5w56\">https://github.com/martinvonz/jj/security/advisories/GHSA-88h5-6w7m-5w56</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51990\">https://nvd.nist.gov/vuln/detail/CVE-2024-51990</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88h5-6w7m-5w56\">https://github.com/advisories/GHSA-88h5-6w7m-5w56</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88h5-6w7m-5w56",
            "title": "[jj-lib] jj vulnerable to path traversal via crafted Git repositories",
            "date_modified": "2024-11-07T16:18:47.000Z",
            "date_published": "2024-11-07T16:18:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88h5-6w7m-5w56"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>cap-std's filesystem sandbox implementation on Windows blocks access to special device filenames such as \"COM1\", \"COM2\", \"LPT0\", \"LPT1\", and so on, however it did not block access to the special device filenames which use superscript digits, such as \"COM¹\", \"COM²\", \"LPT⁰\", \"LPT¹\", and so on. Untrusted filesystem paths could bypass the sandbox and access devices through those special device filenames with superscript digits, and through them provide access peripheral devices connected to the computer, or network resources mapped to those devices. This can include modems, printers, network printers, and any other device connected to a serial or parallel port, including emulated USB serial ports.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The bug is fixed in <a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a>, which is published in cap-primitives 3.4.1, cap-std 3.4.1, and cap-async-std 3.4.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. Affected Windows users are recommended to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Microsoft's documentation</a> of the special device filenames</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO-8859-1</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/security/advisories/GHSA-hxf5-99xg-86hw\">https://github.com/bytecodealliance/cap-std/security/advisories/GHSA-hxf5-99xg-86hw</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51756\">https://nvd.nist.gov/vuln/detail/CVE-2024-51756</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/commit/dcc3818039761331fbeacbb3a40c542b65b5ebf7\">https://github.com/bytecodealliance/cap-std/commit/dcc3818039761331fbeacbb3a40c542b65b5ebf7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxf5-99xg-86hw\">https://github.com/advisories/GHSA-hxf5-99xg-86hw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxf5-99xg-86hw",
            "title": "[cap-primitives] cap-std doesn't fully sandbox all the Windows device filenames",
            "date_modified": "2024-11-06T14:28:27.000Z",
            "date_published": "2024-11-05T22:19:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxf5-99xg-86hw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>cap-std's filesystem sandbox implementation on Windows blocks access to special device filenames such as \"COM1\", \"COM2\", \"LPT0\", \"LPT1\", and so on, however it did not block access to the special device filenames which use superscript digits, such as \"COM¹\", \"COM²\", \"LPT⁰\", \"LPT¹\", and so on. Untrusted filesystem paths could bypass the sandbox and access devices through those special device filenames with superscript digits, and through them provide access peripheral devices connected to the computer, or network resources mapped to those devices. This can include modems, printers, network printers, and any other device connected to a serial or parallel port, including emulated USB serial ports.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The bug is fixed in <a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a>, which is published in cap-primitives 3.4.1, cap-std 3.4.1, and cap-async-std 3.4.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. Affected Windows users are recommended to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Microsoft's documentation</a> of the special device filenames</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO-8859-1</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/security/advisories/GHSA-hxf5-99xg-86hw\">https://github.com/bytecodealliance/cap-std/security/advisories/GHSA-hxf5-99xg-86hw</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51756\">https://nvd.nist.gov/vuln/detail/CVE-2024-51756</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/commit/dcc3818039761331fbeacbb3a40c542b65b5ebf7\">https://github.com/bytecodealliance/cap-std/commit/dcc3818039761331fbeacbb3a40c542b65b5ebf7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxf5-99xg-86hw\">https://github.com/advisories/GHSA-hxf5-99xg-86hw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxf5-99xg-86hw",
            "title": "[cap-async-std] cap-std doesn't fully sandbox all the Windows device filenames",
            "date_modified": "2024-11-06T14:28:27.000Z",
            "date_published": "2024-11-05T22:19:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxf5-99xg-86hw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>cap-std's filesystem sandbox implementation on Windows blocks access to special device filenames such as \"COM1\", \"COM2\", \"LPT0\", \"LPT1\", and so on, however it did not block access to the special device filenames which use superscript digits, such as \"COM¹\", \"COM²\", \"LPT⁰\", \"LPT¹\", and so on. Untrusted filesystem paths could bypass the sandbox and access devices through those special device filenames with superscript digits, and through them provide access peripheral devices connected to the computer, or network resources mapped to those devices. This can include modems, printers, network printers, and any other device connected to a serial or parallel port, including emulated USB serial ports.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The bug is fixed in <a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a>, which is published in cap-primitives 3.4.1, cap-std 3.4.1, and cap-async-std 3.4.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. Affected Windows users are recommended to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Microsoft's documentation</a> of the special device filenames</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO-8859-1</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/security/advisories/GHSA-hxf5-99xg-86hw\">https://github.com/bytecodealliance/cap-std/security/advisories/GHSA-hxf5-99xg-86hw</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51756\">https://nvd.nist.gov/vuln/detail/CVE-2024-51756</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/commit/dcc3818039761331fbeacbb3a40c542b65b5ebf7\">https://github.com/bytecodealliance/cap-std/commit/dcc3818039761331fbeacbb3a40c542b65b5ebf7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxf5-99xg-86hw\">https://github.com/advisories/GHSA-hxf5-99xg-86hw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxf5-99xg-86hw",
            "title": "[cap-std] cap-std doesn't fully sandbox all the Windows device filenames",
            "date_modified": "2024-11-06T14:28:27.000Z",
            "date_published": "2024-11-05T22:19:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxf5-99xg-86hw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Wasmtime's filesystem sandbox implementation on Windows blocks access to special device filenames such as \"COM1\", \"COM2\", \"LPT0\", \"LPT1\", and so on, however it did not block access to the special device filenames which use superscript digits, such as \"COM¹\", \"COM²\", \"LPT⁰\", \"LPT¹\", and so on. Untrusted Wasm programs that are given access to any filesystem directory could bypass the sandbox and access devices through those special device filenames with superscript digits, and through them gain access peripheral devices connected to the computer, or network resources mapped to those devices. This can include modems, printers, network printers, and any other device connected to a serial or parallel port, including emulated USB serial ports.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patch releases for Wasmtime have been issued as 24.0.2, 25.0.3, and 26.0.1. Users of Wasmtime 23.0.x and prior are recommended to upgrade to one of these patched versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. Affected Windows users are recommended to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Microsoft's documentation</a> of the special device filenames</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO-8859-1</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">The original PR reporting the issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-c2f5-jxjv-2hh8\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-c2f5-jxjv-2hh8</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51745\">https://nvd.nist.gov/vuln/detail/CVE-2024-51745</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2f5-jxjv-2hh8\">https://github.com/advisories/GHSA-c2f5-jxjv-2hh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2f5-jxjv-2hh8",
            "title": "[wasmtime] Wasmtime doesn't fully sandbox all the Windows device filenames",
            "date_modified": "2024-11-06T14:28:17.000Z",
            "date_published": "2024-11-05T22:18:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2f5-jxjv-2hh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Wasmtime's filesystem sandbox implementation on Windows blocks access to special device filenames such as \"COM1\", \"COM2\", \"LPT0\", \"LPT1\", and so on, however it did not block access to the special device filenames which use superscript digits, such as \"COM¹\", \"COM²\", \"LPT⁰\", \"LPT¹\", and so on. Untrusted Wasm programs that are given access to any filesystem directory could bypass the sandbox and access devices through those special device filenames with superscript digits, and through them gain access peripheral devices connected to the computer, or network resources mapped to those devices. This can include modems, printers, network printers, and any other device connected to a serial or parallel port, including emulated USB serial ports.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patch releases for Wasmtime have been issued as 24.0.2, 25.0.3, and 26.0.1. Users of Wasmtime 23.0.x and prior are recommended to upgrade to one of these patched versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. Affected Windows users are recommended to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Microsoft's documentation</a> of the special device filenames</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO-8859-1</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">The original PR reporting the issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-c2f5-jxjv-2hh8\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-c2f5-jxjv-2hh8</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51745\">https://nvd.nist.gov/vuln/detail/CVE-2024-51745</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2f5-jxjv-2hh8\">https://github.com/advisories/GHSA-c2f5-jxjv-2hh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2f5-jxjv-2hh8",
            "title": "[wasmtime] Wasmtime doesn't fully sandbox all the Windows device filenames",
            "date_modified": "2024-11-06T14:28:17.000Z",
            "date_published": "2024-11-05T22:18:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2f5-jxjv-2hh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Wasmtime's filesystem sandbox implementation on Windows blocks access to special device filenames such as \"COM1\", \"COM2\", \"LPT0\", \"LPT1\", and so on, however it did not block access to the special device filenames which use superscript digits, such as \"COM¹\", \"COM²\", \"LPT⁰\", \"LPT¹\", and so on. Untrusted Wasm programs that are given access to any filesystem directory could bypass the sandbox and access devices through those special device filenames with superscript digits, and through them gain access peripheral devices connected to the computer, or network resources mapped to those devices. This can include modems, printers, network printers, and any other device connected to a serial or parallel port, including emulated USB serial ports.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patch releases for Wasmtime have been issued as 24.0.2, 25.0.3, and 26.0.1. Users of Wasmtime 23.0.x and prior are recommended to upgrade to one of these patched versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. Affected Windows users are recommended to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Microsoft's documentation</a> of the special device filenames</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO-8859-1</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">The original PR reporting the issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-c2f5-jxjv-2hh8\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-c2f5-jxjv-2hh8</a></li>\n<li><a href=\"https://github.com/bytecodealliance/cap-std/pull/371\">https://github.com/bytecodealliance/cap-std/pull/371</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859-1\">https://en.wikipedia.org/wiki/ISO/IEC_8859-1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51745\">https://nvd.nist.gov/vuln/detail/CVE-2024-51745</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2f5-jxjv-2hh8\">https://github.com/advisories/GHSA-c2f5-jxjv-2hh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2f5-jxjv-2hh8",
            "title": "[wasmtime] Wasmtime doesn't fully sandbox all the Windows device filenames",
            "date_modified": "2024-11-06T14:28:17.000Z",
            "date_published": "2024-11-05T22:18:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2f5-jxjv-2hh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>loona-hpack</code> suffers from the same vulnerability as the original <code>hpack</code> as documented in <a href=\"https://github.com/mlalic/hpack-rs/issues/11\">https://github.com/mlalic/hpack-rs/issues/11</a> </p>\n<h3 id=\"details\">Details</h3>\n<p>The original includes a very nice description of the problem, as well as an easy-enough fix for it.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The original example pretty much still applies:</p>\n<pre><code class=\"language-rust\">use loona_hpack::Decoder;\n\npub fn main() {\n    let input = &amp;[0x3f];\n    let mut decoder = Decoder::new();\n    let _ = decoder.decode(input);\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>From the original:\n<code>All users who try to decode untrusted input using the Decoder are vulnerable to this exploit. A patched version of the crate is available on [crates.io](https://crates.io/crates/hpack-patched) under the name hpack-patched. See [Cargo's documentation on overriding dependencies](https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html) for more information.</code></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bearcove/loona/security/advisories/GHSA-7vm6-qwh5-9x44\">https://github.com/bearcove/loona/security/advisories/GHSA-7vm6-qwh5-9x44</a></li>\n<li><a href=\"https://github.com/mlalic/hpack-rs/issues/11\">https://github.com/mlalic/hpack-rs/issues/11</a></li>\n<li><a href=\"https://github.com/bearcove/loona/commit/9a4028ec6484f50a320281271a41a5040ddb1ba8\">https://github.com/bearcove/loona/commit/9a4028ec6484f50a320281271a41a5040ddb1ba8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7hm-hmxv-pvhf\">https://github.com/advisories/GHSA-w7hm-hmxv-pvhf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-51502\">https://nvd.nist.gov/vuln/detail/CVE-2024-51502</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vm6-qwh5-9x44\">https://github.com/advisories/GHSA-7vm6-qwh5-9x44</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vm6-qwh5-9x44",
            "title": "[loona-hpack] loona-hpack Panic Vulnerability",
            "date_modified": "2024-11-05T18:35:40.000Z",
            "date_published": "2024-11-04T23:22:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vm6-qwh5-9x44"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Gnark recursion circuit constrains arithmetic over BabyBear when the native field of the ZKP circuit is the BN254 scalar field. Proper implementation of this logic requires range checking Bn254 values to be less than the BabyBear modulus.</p>\n<p>In versions &lt; 1.2.0, functions like <code>InvF</code> and <code>InvE</code> used values generated by hints that were not appropriately range checked. These issues are resolved in versions 1.2.0 and higher, by adding range checks in the appropriate places. This code was covered under the original audit scope of the recursion circuit audit by Veridise, and both Veridise and Kalos revisited the code for similar issues and found no additional vulnerabilities.</p>\n<p>This issue was discovered by the Succinct team on September 3rd. The issue was fixed and resolved within 48 hours, and released with V1.2.0 (note that a later V2.0.0 release has the same contents as V1.2.0 to respect semver), with production SP1 users being notified and upgraded immediately. The V1.1.0 verifier was frozen on September 4th to ensure that no one uses versions of SP1 with this bug.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/succinctlabs/sp1/security/advisories/GHSA-f77q-r5qm-w4m8\">https://github.com/succinctlabs/sp1/security/advisories/GHSA-f77q-r5qm-w4m8</a></li>\n<li><a href=\"https://github.com/succinctlabs/sp1/commit/8600d4aa63184ce3df7ccd30c79ac0388eacca52\">https://github.com/succinctlabs/sp1/commit/8600d4aa63184ce3df7ccd30c79ac0388eacca52</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f77q-r5qm-w4m8\">https://github.com/advisories/GHSA-f77q-r5qm-w4m8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f77q-r5qm-w4m8",
            "title": "[sp1-recursion-gnark-ffi] sp1-recursion-gnark-ffi has insufficient range checks of BabyBear arithmetic ",
            "date_modified": "2024-10-29T15:37:51.000Z",
            "date_published": "2024-10-29T15:37:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f77q-r5qm-w4m8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Previously, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. This issue is fixed by properly refund unused weights after each EVM execution.</p>\n<p>The impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in <a href=\"https://github.com/paritytech/frontier/pull/851\">https://github.com/paritytech/frontier/pull/851</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/paritytech/frontier/issues\">Frontier repo</a></li>\n<li>Email <a href=\"mailto:wei@that.world\">Wei</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-v57h-6hmh-g2p4\">https://github.com/paritytech/frontier/security/advisories/GHSA-v57h-6hmh-g2p4</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/851\">https://github.com/paritytech/frontier/pull/851</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39242\">https://nvd.nist.gov/vuln/detail/CVE-2022-39242</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v57h-6hmh-g2p4\">https://github.com/advisories/GHSA-v57h-6hmh-g2p4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v57h-6hmh-g2p4",
            "title": "[pallet-ethereum] Weight not properly refunded after EVM execution",
            "date_modified": "2024-10-24T21:56:02.000Z",
            "date_published": "2022-09-23T22:07:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v57h-6hmh-g2p4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In the newly introduced signed Frontier-specific extrinsic for <code>pallet-ethereum</code>, a large part of transaction validation logic was only called in transaction pool validation, but not in block execution. Malicious validators can take advantage of this to put invalid transactions into a block.</p>\n<p>The attack is limited in that the signature is always validated, and the majority of the validation is done again in the subsequent <code>pallet-evm</code> execution logic. However, do note that a chain ID replay attack was possible. In addition, spamming attacks are of main concerns, while they are limited by Substrate block size limits and other factors.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is patched in commit 146bb48849e5393004be5c88beefe76fdf009aba.</p>\n<h3 id=\"references\">References</h3>\n<p>Patch PR: <a href=\"https://github.com/paritytech/frontier/pull/495\">https://github.com/paritytech/frontier/pull/495</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/paritytech/frontier/issues\">Frontier repo</a></li>\n</ul>\n<h3 id=\"special-thanks\">Special thanks</h3>\n<p>Special thanks to @librelois, @nanocryk and the Moonbeam team for reporting and fixing this security vulnerability.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-vj62-g63v-f8mf\">https://github.com/paritytech/frontier/security/advisories/GHSA-vj62-g63v-f8mf</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/495\">https://github.com/paritytech/frontier/pull/495</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/146bb48849e5393004be5c88beefe76fdf009aba\">https://github.com/paritytech/frontier/commit/146bb48849e5393004be5c88beefe76fdf009aba</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41138\">https://nvd.nist.gov/vuln/detail/CVE-2021-41138</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/497\">https://github.com/paritytech/frontier/pull/497</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vj62-g63v-f8mf\">https://github.com/advisories/GHSA-vj62-g63v-f8mf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vj62-g63v-f8mf",
            "title": "[pallet-ethereum] Validity check missing in Frontier",
            "date_modified": "2024-10-24T21:53:17.000Z",
            "date_published": "2021-10-13T18:53:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vj62-g63v-f8mf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. It is recommended that you apply the patch as soon as possible.</p>\n<p>If you do not use MODEXP precompile in your runtime, then you are not impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patches are applied in PR #549.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p>Patch PR: #549</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to SR-Labs for discovering the security vulnerability, and thanks to PureStake team for the patches.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/paritytech/frontier\">Frontier repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4\">https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21685\">https://nvd.nist.gov/vuln/detail/CVE-2022-21685</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/549\">https://github.com/paritytech/frontier/pull/549</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664\">https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cjg2-2fjg-fph4\">https://github.com/advisories/GHSA-cjg2-2fjg-fph4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjg2-2fjg-fph4",
            "title": "[pallet-evm-precompile-modexp] Integer underflow in Frontier",
            "date_modified": "2024-10-24T21:50:43.000Z",
            "date_published": "2022-01-14T21:03:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjg2-2fjg-fph4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A low severity security issue was discovered affecting parsing of the RPC result of the exit reason in case of EVM reversion. In release build, this would cause the exit reason being incorrectly parsed and returned by RPC. In debug build, this would cause an overflow panic.</p>\n<p>No action is needed unless you have a bridge node that needs to distinguish different reversion exit reasons and you used RPC for this.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is patched in <a href=\"https://github.com/paritytech/frontier/pull/820\">https://github.com/paritytech/frontier/pull/820</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p>PR <a href=\"https://github.com/paritytech/frontier/pull/820\">https://github.com/paritytech/frontier/pull/820</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email <a href=\"mailto:wei@that.world\">Wei Tang</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-mjvm-mhgc-q4gp\">https://github.com/paritytech/frontier/security/advisories/GHSA-mjvm-mhgc-q4gp</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/820\">https://github.com/paritytech/frontier/pull/820</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/fff8cc43b7756ce3979a38fc473f38e6e24ac451\">https://github.com/paritytech/frontier/commit/fff8cc43b7756ce3979a38fc473f38e6e24ac451</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36008\">https://nvd.nist.gov/vuln/detail/CVE-2022-36008</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mjvm-mhgc-q4gp\">https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mjvm-mhgc-q4gp",
            "title": "[fc-rpc] Incorrect parsing of EVM reversion exit reason in RPC",
            "date_modified": "2024-10-24T21:48:35.000Z",
            "date_published": "2022-08-18T19:18:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mjvm-mhgc-q4gp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Frontier's <code>modexp</code> precompile uses <code>num-bigint</code> crate under the hood. <a href=\"https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134\">In the implementation</a>, the cases for modulus being even and modulus being odd are treated separately. Odd modulus uses the fast Montgomery multiplication, and even modulus uses the slow plain power algorithm. This gas cost discrepancy was not accounted for in the <code>modexp</code> precompile, leading to possible denial of service attacks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>No fixes for <code>num-bigint</code> is currently available, and thus this advisory will be first fixed in the short term by raising the gas costs for even modulus, and in the long term fixing it in <code>num-bigint</code> or switching to another modexp implementation.</p>\n<p>The short-term fix for Frontier is deployed at <a href=\"https://github.com/paritytech/frontier/pull/1017\">PR 1017</a>.</p>\n<p>The recommendations are as follows:</p>\n<ul>\n<li>If you anticipate malicious validators, it's recommended to issue an emergency runtime upgrade as soon as possible.</li>\n<li>If you do not anticipate malicious validators, it's recommended to issue a normal runtime upgrade, as Substrate has builtin timeout protection when validators are building blocks.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p>A similar issue was presented in Geth's implementation and the fix can be found <a href=\"https://go-review.googlesource.com/c/go/+/420897\">here</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6\">https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/1017\">https://github.com/paritytech/frontier/pull/1017</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219\">https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219</a></li>\n<li><a href=\"https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134\">https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28431\">https://nvd.nist.gov/vuln/detail/CVE-2023-28431</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fcmm-54jp-7vf6\">https://github.com/advisories/GHSA-fcmm-54jp-7vf6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fcmm-54jp-7vf6",
            "title": "[pallet-evm-precompile-modexp] Frontier's modexp precompile is slow for even modulus",
            "date_modified": "2024-10-24T21:21:00.000Z",
            "date_published": "2023-03-21T22:31:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fcmm-54jp-7vf6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug in <code>pallet-ethereum</code> can cause invalid transactions to be included in the Ethereum block state in <code>pallet-ethereum</code> due to not validating the input data size. Any invalid transactions included this way have no possibility to alter the internal Ethereum or Substrate state. The transaction will appear to have be included, but is of no effect as it is rejected by the EVM engine. The impact is further limited by Substrate extrinsic size constraints.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patches are applied in PR #465.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p>Patch PR: <a href=\"https://github.com/paritytech/frontier/pull/465\">https://github.com/paritytech/frontier/pull/465</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/paritytech/frontier\">Frontier repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-hw4v-5x4h-c3xm\">https://github.com/paritytech/frontier/security/advisories/GHSA-hw4v-5x4h-c3xm</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/dd112e\">https://github.com/paritytech/frontier/commit/dd112e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39193\">https://nvd.nist.gov/vuln/detail/CVE-2021-39193</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/465\">https://github.com/paritytech/frontier/pull/465</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/465/commits/8a2b890a2fb477d5fedd0e4335b00623832849ae\">https://github.com/paritytech/frontier/pull/465/commits/8a2b890a2fb477d5fedd0e4335b00623832849ae</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/0b962f218f0cdd796dadfe26c3f09e68f7861b26\">https://github.com/paritytech/frontier/commit/0b962f218f0cdd796dadfe26c3f09e68f7861b26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hw4v-5x4h-c3xm\">https://github.com/advisories/GHSA-hw4v-5x4h-c3xm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hw4v-5x4h-c3xm",
            "title": "[pallet-ethereum] Transaction validity oversight in pallet-ethereum",
            "date_modified": "2024-10-24T21:18:32.000Z",
            "date_published": "2021-09-01T18:22:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hw4v-5x4h-c3xm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>\n<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>\n<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>On a Unix-like system in a POSIX-compatible shell, run:</p>\n<pre><code class=\"language-sh\">git init misleading-path\ncd misleading-path\ntouch \"$(printf '\\033]0;Boo!\\007\\033[2K\\r\\033[91mError: Repository is corrupted. Run \\033[96mEVIL_COMMAND\\033[91m to attempt recovery.\\033[0m')\"\ngit add .\ngit commit -m 'Initial commit'\n</code></pre>\n<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>\n<pre><code class=\"language-sh\">gix tree entries\n</code></pre>\n<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>\n<pre><code class=\"language-text\">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.\n</code></pre>\n<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>\n<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>\n<pre><code class=\"language-text\">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m\n</code></pre>\n<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>\n<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>\n<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>\n<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>\n<ul>\n<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>\n<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>\n<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>\n<li>Reading and blocking cannot be performed.</li>\n<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43785\">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0364.html\">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h",
            "title": "[gitoxide] gitoxide-core does not neutralize special characters for terminals",
            "date_modified": "2024-10-24T14:33:18.000Z",
            "date_published": "2024-08-22T16:41:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>\n<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>\n<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>On a Unix-like system in a POSIX-compatible shell, run:</p>\n<pre><code class=\"language-sh\">git init misleading-path\ncd misleading-path\ntouch \"$(printf '\\033]0;Boo!\\007\\033[2K\\r\\033[91mError: Repository is corrupted. Run \\033[96mEVIL_COMMAND\\033[91m to attempt recovery.\\033[0m')\"\ngit add .\ngit commit -m 'Initial commit'\n</code></pre>\n<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>\n<pre><code class=\"language-sh\">gix tree entries\n</code></pre>\n<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>\n<pre><code class=\"language-text\">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.\n</code></pre>\n<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>\n<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>\n<pre><code class=\"language-text\">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m\n</code></pre>\n<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>\n<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>\n<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>\n<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>\n<ul>\n<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>\n<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>\n<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>\n<li>Reading and blocking cannot be performed.</li>\n<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43785\">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0364.html\">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h",
            "title": "[gitoxide-core] gitoxide-core does not neutralize special characters for terminals",
            "date_modified": "2024-10-24T14:33:18.000Z",
            "date_published": "2024-08-22T16:41:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The family of functions to read \"borrowed\" values from Python weak references were fundamentally unsound, because the weak reference does itself not have ownership of the value. At any point the last strong reference could be cleared and the borrowed value would become dangling.</p>\n<p>In PyO3 0.22.4 these functions have all been deprecated and patched to leak a strong reference as a mitigation. PyO3 0.23 will remove these functions entirely.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9979\">https://nvd.nist.gov/vuln/detail/CVE-2024-9979</a></li>\n<li><a href=\"https://github.com/PyO3/pyo3/pull/4590\">https://github.com/PyO3/pyo3/pull/4590</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-9979\">https://access.redhat.com/security/cve/CVE-2024-9979</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2318646\">https://bugzilla.redhat.com/show_bug.cgi?id=2318646</a></li>\n<li><a href=\"https://crates.io/crates/pyo3\">https://crates.io/crates/pyo3</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0378.html\">https://rustsec.org/advisories/RUSTSEC-2024-0378.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6jgw-rgmm-7cv6\">https://github.com/advisories/GHSA-6jgw-rgmm-7cv6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6jgw-rgmm-7cv6",
            "title": "[pyo3]  PyO3 has a risk of use-after-free in `borrowed` reads from Python weak references",
            "date_modified": "2024-10-15T17:04:56.000Z",
            "date_published": "2024-10-15T15:30:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6jgw-rgmm-7cv6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-6jgw-rgmm-7cv6. This link is maintained to preserve external references.</p>\n<h2 id=\"original-advisory\">Original Advisory</h2>\n<p>The family of functions to read \"borrowed\" values from Python weak references were fundamentally unsound, because the weak reference does itself not have ownership of the value. At any point the last strong reference could be cleared and the borrowed value would become dangling.</p>\n<p>In PyO3 0.22.4 these functions have all been deprecated and patched to leak a strong reference as a mitigation. PyO3 0.23 will remove these functions entirely.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PyO3/pyo3/pull/4590\">https://github.com/PyO3/pyo3/pull/4590</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0378.html\">https://rustsec.org/advisories/RUSTSEC-2024-0378.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f8x4-f32r-w556\">https://github.com/advisories/GHSA-f8x4-f32r-w556</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f8x4-f32r-w556",
            "title": "[pyo3] Duplicate Advisory: PyO3 has a risk of use-after-free in `borrowed` reads from Python weak references",
            "date_modified": "2024-10-15T17:13:46.000Z",
            "date_published": "2024-10-15T14:08:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f8x4-f32r-w556"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}