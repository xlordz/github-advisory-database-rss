{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[age] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A plugin name containing a path separator may allow an attacker to execute an arbitrary binary.</p>\n<p>Such a plugin name can be provided to the <code>rage</code> CLI through an attacker-controlled recipient or identity string, or to the following <code>age</code> APIs when the <code>plugin</code> feature flag is enabled:</p>\n<ul>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#impl-FromStr-for-Identity\"><code>age::plugin::Identity::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Identity&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Identity.html#method.default_for_plugin\"><code>age::plugin::Identity::default_for_plugin</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.IdentityPluginV1.html#method.new\"><code>age::plugin::IdentityPluginV1::new</code></a></li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.Recipient.html#impl-FromStr-for-Recipient\"><code>age::plugin::Recipient::from_str</code></a> (or equivalently <a href=\"https://doc.rust-lang.org/stable/core/primitive.str.html#method.parse\"><code>str::parse::&lt;age::plugin::Recipient&gt;()</code></a>)</li>\n<li><a href=\"https://docs.rs/age/0.11.0/age/plugin/struct.RecipientPluginV1.html#method.new\"><code>age::plugin::RecipientPluginV1::new</code></a></li>\n</ul>\n<p>On UNIX systems, a directory matching <code>age-plugin-*</code> needs to exist in the working directory for the attack to succeed.</p>\n<p>The binary is executed with a single flag, either <code>--age-plugin=recipient-v1</code> or <code>--age-plugin=identity-v1</code>. The standard input includes the recipient or identity string,  and the random file key (if encrypting) or the header of the file (if decrypting). The format is constrained by the <a href=\"https://c2sp.org/age-plugin\">age-plugin</a> protocol.</p>\n<p>An equivalent issue was fixed in <a href=\"https://github.com/FiloSottile/age\">the reference Go implementation of age</a>, see advisory <a href=\"https://github.com/FiloSottile/age/security/advisories/GHSA-32gq-x56h-299c\">GHSA-32gq-x56h-299c</a>.</p>\n<p>Thanks to ⬡-49016 for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/str4d/rage/security/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n<li><a href=\"https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227\">https://github.com/str4d/rage/commit/703152ecfa86f27952a35b57dd525ed39396a227</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg7-vxc8-qx5w\">https://github.com/advisories/GHSA-4fg7-vxc8-qx5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w",
            "title": "[rage] rage vulnerable to malicious plugin names, recipients, or identities causing arbitrary binary execution",
            "date_modified": "2024-12-18T18:21:57.000Z",
            "date_published": "2024-12-18T18:21:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg7-vxc8-qx5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>OVERWRITE</code> clause of the <code>DEFINE TABLE</code> statement would fail to overwrite data for tables that were defined with <code>TYPE RELATION</code>. Since table definitions include the <code>PERMISSIONS</code> clause, this failure would result in permissions not being overwritten as a result, which may potentially lead users to believe they have changed the table permissions when they have not.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If a user attempted to update table permissions of a table defined with <code>TYPE RELATION</code> using <code>DEFINE TABLE ... OVERWRITE</code>, permissions for the table would not be changed. This may allow a client that is authorized to run queries in a SurrealDB server to access certain data in that specific table that they were not intended to be able to access after the specified change in permissions.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The <code>DEFINE TABLE</code> statement has been updated to appropriately overwrite data for tables defined with <code>TYPE RELATION</code>.</p>\n<ul>\n<li>Version 2.1.4 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users of tables with <code>TYPE RELATION</code> that may have been modified using the <code>OVERWRITE</code> clause in order to update permissions are advised to verify that the intended permissions are in place using the <code>INFO FOR DB</code> statement. Affected users who are unable to update and require updating permissions in a table with <code>TYPE RELATION</code> will be required to remove the table and define it from scratch with the intended permissions. Data can be preserved by backing it up to a temporary table.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>#5260</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5260\">https://github.com/surrealdb/surrealdb/pull/5260</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734\">https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-27vq-hv74-7cqp\">https://github.com/advisories/GHSA-27vq-hv74-7cqp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-27vq-hv74-7cqp",
            "title": "[surrealdb-core] SurrealDB has Silent Failure to Overwrite Table Definition of Relation Type",
            "date_modified": "2024-12-18T17:18:20.000Z",
            "date_published": "2024-12-16T17:38:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-27vq-hv74-7cqp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>OVERWRITE</code> clause of the <code>DEFINE TABLE</code> statement would fail to overwrite data for tables that were defined with <code>TYPE RELATION</code>. Since table definitions include the <code>PERMISSIONS</code> clause, this failure would result in permissions not being overwritten as a result, which may potentially lead users to believe they have changed the table permissions when they have not.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If a user attempted to update table permissions of a table defined with <code>TYPE RELATION</code> using <code>DEFINE TABLE ... OVERWRITE</code>, permissions for the table would not be changed. This may allow a client that is authorized to run queries in a SurrealDB server to access certain data in that specific table that they were not intended to be able to access after the specified change in permissions.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The <code>DEFINE TABLE</code> statement has been updated to appropriately overwrite data for tables defined with <code>TYPE RELATION</code>.</p>\n<ul>\n<li>Version 2.1.4 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users of tables with <code>TYPE RELATION</code> that may have been modified using the <code>OVERWRITE</code> clause in order to update permissions are advised to verify that the intended permissions are in place using the <code>INFO FOR DB</code> statement. Affected users who are unable to update and require updating permissions in a table with <code>TYPE RELATION</code> will be required to remove the table and define it from scratch with the intended permissions. Data can be preserved by backing it up to a temporary table.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>#5260</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-27vq-hv74-7cqp</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5260\">https://github.com/surrealdb/surrealdb/pull/5260</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734\">https://github.com/surrealdb/surrealdb/commit/2f9a58f830c24f107b4783da1f0704a502bc7734</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-27vq-hv74-7cqp\">https://github.com/advisories/GHSA-27vq-hv74-7cqp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-27vq-hv74-7cqp",
            "title": "[surrealdb] SurrealDB has Silent Failure to Overwrite Table Definition of Relation Type",
            "date_modified": "2024-12-18T17:18:20.000Z",
            "date_published": "2024-12-16T17:38:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-27vq-hv74-7cqp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n\n\n<p><strong>Impacted are the only ones who use <a href=\"https://docs.rs/hd-wallet/0.5.1/hd_wallet/struct.Slip10Like.html\"><code>hd_wallet::Slip10Like</code></a> or <a href=\"https://docs.rs/slip-10/latest/slip_10/\"><code>slip_10</code></a> derivation method instantiated with curves other than secp256k1 and secp256r1.</strong></p>\n<p><code>hd_wallet</code> crate used to provide <code>Slip10Like</code> derivation method, which is also provided in <code>slip-10</code> crate as a default derivation method. It's based on <a href=\"https://github.com/satoshilabs/slips/blob/master/slip-0010.md\">slip10</a> method that searches for a valid child key in an infinite loop until it's found.</p>\n<p>Theoretically, this could be exploited by an attacker by finding a derivation path that would force someone to execute a lot of iterations of this loop to find a valid child key. This attack, however, requires the probability of getting an invalid scalar from random 32 bytes to be high. Slip10 is protected from this attack as it's only defined on secp256k1 and secp256r1 curves, for which such probability is very low:</p>\n<ul>\n<li>For secp256k1, probability is $&lt; 2^{-127}$. This means that a loop with 2 or more iterations is vanishingly impossible.</li>\n<li>For secp256r1, probability is $&lt; 2^{-32}$. This means that a loop with 5 or more iterations is vanishingly impossible.</li>\n</ul>\n<p>While standard curves are safe to use with slip10, we used to allow slip10-like derivation which can be instantiated with any curve. For instance, one could instantiate it with ed25519 or stark curves, for which probability of getting invalid scalar from random 32 bytes is &gt;90%, so theoretically, attacker could try to DoS such construction.</p>\n<h3 id=\"patches\">Patches</h3>\n\n\n<p><code>hd_wallet v0.6.0</code> has been patched by removing slip10-like derivation from public API.</p>\n<p>If you need HD derivation on other curves than secp256k1 and secp256r1, we suggest you to use:</p>\n<ul>\n<li><a href=\"https://docs.rs/hd-wallet/latest/hd_wallet/edwards/struct.Edwards.html\"><code>hd_wallet::Edwards</code></a> derivation method available for ed25519 curve</li>\n<li><a href=\"https://docs.rs/hd-wallet/latest/hd_wallet/stark/struct.Stark.html\"><code>hd_wallet::Stark</code></a> derivation method available for stark curve</li>\n</ul>\n<p>Both derivation methods are non-standard, but secure and efficient.</p>\n<p><strong>If you're still using <code>slip_10</code></strong> and would like to migrate to patched version, please migrate to <code>hd_wallet v0.6</code>. You may first migrate from <code>slip_10 v0.4</code> to <code>hd_wallet v0.5</code> by following migration instructions available <a href=\"https://docs.rs/slip-10/latest/slip_10/\">in the docs</a>, and then upgrade from <code>hd_wallet v0.5</code> to <code>hd_wallet v0.6</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Technically, you don't need to upgrade if you don't use slip10-like derivation instantiated with other curves than secp256k1 or secp256r1.</p>\n<p>However, if you do, migrating to other derivation method might be required.</p>\n<h3 id=\"reach-out-to-us-in-discord\">Reach out to us in Discord</h3>\n<p>If you want to reach out to us, feel free to write to <a href=\"https://discordapp.com/channels/905194001349627914/1294284489635139585\"><code>#lockness</code> room in Discord</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Alessio Marziali <a href=\"mailto:alessio.marziali@metaco.com\">alessio.marziali@metaco.com</a> for discovering and flagging this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r\">https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r</a></li>\n<li><a href=\"https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d\">https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2ff4-xfpr-m32r\">https://github.com/advisories/GHSA-2ff4-xfpr-m32r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2ff4-xfpr-m32r",
            "title": "[slip-10] `Slip10Like` derivation method instantiated with certain curves may allow attacker to find derivation path which results into very long derivation (possible DoS)",
            "date_modified": "2024-12-18T15:51:26.000Z",
            "date_published": "2024-12-18T15:51:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2ff4-xfpr-m32r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n\n\n<p><strong>Impacted are the only ones who use <a href=\"https://docs.rs/hd-wallet/0.5.1/hd_wallet/struct.Slip10Like.html\"><code>hd_wallet::Slip10Like</code></a> or <a href=\"https://docs.rs/slip-10/latest/slip_10/\"><code>slip_10</code></a> derivation method instantiated with curves other than secp256k1 and secp256r1.</strong></p>\n<p><code>hd_wallet</code> crate used to provide <code>Slip10Like</code> derivation method, which is also provided in <code>slip-10</code> crate as a default derivation method. It's based on <a href=\"https://github.com/satoshilabs/slips/blob/master/slip-0010.md\">slip10</a> method that searches for a valid child key in an infinite loop until it's found.</p>\n<p>Theoretically, this could be exploited by an attacker by finding a derivation path that would force someone to execute a lot of iterations of this loop to find a valid child key. This attack, however, requires the probability of getting an invalid scalar from random 32 bytes to be high. Slip10 is protected from this attack as it's only defined on secp256k1 and secp256r1 curves, for which such probability is very low:</p>\n<ul>\n<li>For secp256k1, probability is $&lt; 2^{-127}$. This means that a loop with 2 or more iterations is vanishingly impossible.</li>\n<li>For secp256r1, probability is $&lt; 2^{-32}$. This means that a loop with 5 or more iterations is vanishingly impossible.</li>\n</ul>\n<p>While standard curves are safe to use with slip10, we used to allow slip10-like derivation which can be instantiated with any curve. For instance, one could instantiate it with ed25519 or stark curves, for which probability of getting invalid scalar from random 32 bytes is &gt;90%, so theoretically, attacker could try to DoS such construction.</p>\n<h3 id=\"patches\">Patches</h3>\n\n\n<p><code>hd_wallet v0.6.0</code> has been patched by removing slip10-like derivation from public API.</p>\n<p>If you need HD derivation on other curves than secp256k1 and secp256r1, we suggest you to use:</p>\n<ul>\n<li><a href=\"https://docs.rs/hd-wallet/latest/hd_wallet/edwards/struct.Edwards.html\"><code>hd_wallet::Edwards</code></a> derivation method available for ed25519 curve</li>\n<li><a href=\"https://docs.rs/hd-wallet/latest/hd_wallet/stark/struct.Stark.html\"><code>hd_wallet::Stark</code></a> derivation method available for stark curve</li>\n</ul>\n<p>Both derivation methods are non-standard, but secure and efficient.</p>\n<p><strong>If you're still using <code>slip_10</code></strong> and would like to migrate to patched version, please migrate to <code>hd_wallet v0.6</code>. You may first migrate from <code>slip_10 v0.4</code> to <code>hd_wallet v0.5</code> by following migration instructions available <a href=\"https://docs.rs/slip-10/latest/slip_10/\">in the docs</a>, and then upgrade from <code>hd_wallet v0.5</code> to <code>hd_wallet v0.6</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Technically, you don't need to upgrade if you don't use slip10-like derivation instantiated with other curves than secp256k1 or secp256r1.</p>\n<p>However, if you do, migrating to other derivation method might be required.</p>\n<h3 id=\"reach-out-to-us-in-discord\">Reach out to us in Discord</h3>\n<p>If you want to reach out to us, feel free to write to <a href=\"https://discordapp.com/channels/905194001349627914/1294284489635139585\"><code>#lockness</code> room in Discord</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Alessio Marziali <a href=\"mailto:alessio.marziali@metaco.com\">alessio.marziali@metaco.com</a> for discovering and flagging this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r\">https://github.com/LFDT-Lockness/hd-wallet/security/advisories/GHSA-2ff4-xfpr-m32r</a></li>\n<li><a href=\"https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d\">https://github.com/LFDT-Lockness/hd-wallet/commit/a7e37704600ee7c737dbb02db08814dd2d15389d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2ff4-xfpr-m32r\">https://github.com/advisories/GHSA-2ff4-xfpr-m32r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2ff4-xfpr-m32r",
            "title": "[hd-wallet] `Slip10Like` derivation method instantiated with certain curves may allow attacker to find derivation path which results into very long derivation (possible DoS)",
            "date_modified": "2024-12-18T15:51:26.000Z",
            "date_published": "2024-12-18T15:51:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2ff4-xfpr-m32r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A correctness error has been identified in the reference implementation of the HQC key encapsulation mechanism. Due to an indexing error, part of the secret key is incorrectly treated as non-secret data. This results in an incorrect shared secret value being returned when the decapsulation function is called with a malformed ciphertext.</p>\n<p>No concrete attack exploiting the error has been identified at this point. However, the error involves mishandling of the secret key, and in principle this presents a security vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>PQClean does not have a release process, as it is a collection of implementations. If you obtained a HQC implementation from PQClean, please update to a version that includes the fixes proposed in <a href=\"https://github.com/PQClean/PQClean/pull/578\">https://github.com/PQClean/PQClean/pull/578</a>. </p>\n<p>Please also <a href=\"https://github.com/PQClean/PQClean/blob/master/SECURITY.md\">refer to our security policy</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Manually patching is always possible</p>\n<h3 id=\"further-details\">Further details</h3>\n<p>In the 2023/04/30 version of the HQC specification and reference implementation, an extra field (sigma) was added to the secret key structure to enable implicit rejection of malformed ciphertexts. The logic to retrieve the public key from the secret key in the decapsulation function was not updated accordingly. As a result, sigma is treated as part of the public key. Later in the decapsulation call, a incorrectly constructed comparison check allows this error to go through undetected. Due to how these two bugs interfere with each other, the decapsulation function never uses sigma to perform implicit rejection; instead, it accepts malformed ciphertexts and returns shared secrets based on their decryptions.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was first reported in OQS <a href=\"https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7\">https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7</a>. The vulnerability was identified by Célian Glénaz and Dahmun Goudarzi (Quarkslab).</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PQClean/PQClean/security/advisories/GHSA-753p-wrj5-g8fj\">https://github.com/PQClean/PQClean/security/advisories/GHSA-753p-wrj5-g8fj</a></li>\n<li><a href=\"https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7\">https://github.com/open-quantum-safe/liboqs/security/advisories/GHSA-gpf4-vrrw-r8v7</a></li>\n<li><a href=\"https://github.com/PQClean/PQClean/pull/578\">https://github.com/PQClean/PQClean/pull/578</a></li>\n<li><a href=\"https://github.com/rustpq/pqcrypto/commit/0c07fa8badbf44f67d3ff1571df31ca54e5228c0\">https://github.com/rustpq/pqcrypto/commit/0c07fa8badbf44f67d3ff1571df31ca54e5228c0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-753p-wrj5-g8fj\">https://github.com/advisories/GHSA-753p-wrj5-g8fj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-753p-wrj5-g8fj",
            "title": "[pqcrypto-hqc] PQClean has a correctness error in HQC decapsulation",
            "date_modified": "2024-12-11T21:48:34.000Z",
            "date_published": "2024-12-11T21:47:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-753p-wrj5-g8fj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-007\">CWA-2024-007</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-30: Confio security contributors confirm the report.</li>\n<li>2024-09-02: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp",
            "title": "[cosmwasm-vm] CosmWasm VM Incorrect metering",
            "date_modified": "2024-12-10T16:55:41.000Z",
            "date_published": "2024-12-10T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-007\">CWA-2024-007</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-30: Confio security contributors confirm the report.</li>\n<li>2024-09-02: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp",
            "title": "[cosmwasm-vm] CosmWasm VM Incorrect metering",
            "date_modified": "2024-12-10T16:55:41.000Z",
            "date_published": "2024-12-10T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-007\">CWA-2024-007</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-30: Confio security contributors confirm the report.</li>\n<li>2024-09-02: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp",
            "title": "[cosmwasm-vm] CosmWasm VM Incorrect metering",
            "date_modified": "2024-12-10T16:55:41.000Z",
            "date_published": "2024-12-10T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}