{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>In PyO3 0.23.0 the <code>PYO3_CONFIG_FILE</code> environment variable used to configure builds regressed such that changing the environment variable would no longer trigger PyO3 to reconfigure and recompile. In combination with workflows using tools such as <code>maturin</code> to build for multiple versions in a single build, this leads to Python wheels being compiled against the wrong Python API version.</p>\n<p>All users who distribute artefacts for multiple Python versions are encouraged to update and rebuild with PyO3 0.23.3. Affected wheels produced from PyO3 0.23.0 through 0.23.2 are highly unstable and will crash the Python interpreter in unpredictable ways.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PyO3/pyo3/issues/4757\">https://github.com/PyO3/pyo3/issues/4757</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0409.html\">https://rustsec.org/advisories/RUSTSEC-2024-0409.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vxcf-c7mx-pg53\">https://github.com/advisories/GHSA-vxcf-c7mx-pg53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vxcf-c7mx-pg53",
            "title": "[pyo3] Build corruption when using `PYO3_CONFIG_FILE` environment variable",
            "date_modified": "2024-12-05T19:06:21.000Z",
            "date_published": "2024-12-05T19:06:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vxcf-c7mx-pg53"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The library breaks the safety assumptions when using unsafe API <code>std::slice::from_raw_parts</code>. First, when using the API in iterator implementation (<code>TempFdArrayIterator.next</code>), generic type could be any type, which would create and pass a misaligned pointer to the unsafe API. Second, when validating the address, the code passed the type <code>c_void</code>, which could also be any type, leading to potential uninitialized memory exposure.  </p>\n<p>Two unsound usages here highlight the necessity for developers to perform type checks before doing type conversion with unsafe API.  </p>\n<p>The panic caused by the misalignment causes several downstream applications (e.g., <code>greptimedb</code>) to crash when using <code>pprof::report::ReportBuilder::build</code>.  </p>\n<p>This was patched in 0.14.0.  </p>\n<p>The developer also suggested moving to <a href=\"https://crates.io/crates/pprof2\">pprof2</a>.  </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tikv/pprof-rs/issues/232\">https://github.com/tikv/pprof-rs/issues/232</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0408.html\">https://rustsec.org/advisories/RUSTSEC-2024-0408.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gw5w-5j7f-jmjj\">https://github.com/advisories/GHSA-gw5w-5j7f-jmjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gw5w-5j7f-jmjj",
            "title": "[pprof] Unsound usages of `std::slice::from_raw_parts` ",
            "date_modified": "2024-12-05T19:06:00.000Z",
            "date_published": "2024-12-05T19:05:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gw5w-5j7f-jmjj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>During a security audit, <a href=\"https://www.radicallyopensecurity.com/\">Radically Open Security</a> discovered two vulnerabilities which allow attackers to trigger resource exhaustion vulnerabilities in <code>rpgp</code> by providing crafted messages. This affects general message parsing and decryption with symmetric keys.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Affected <code>rpgp</code> versions do not correctly set upper limits on the total reserved amount of memory when parsing long sequences of partial OpenPGP packets, which can grow to to several GiB in size. Additionally, up to 4GiB of memory is reserved for OpenPGP packets of fixed size with large length fields, even if less data is received. \nDepending on existing message size restrictions and available system resources, this can cause out-of-memory conditions and crash the <code>rpgp</code> process or cause other system instability through memory resource exhaustion when parsing crafted messages.</p>\n<p>Affected <code>rpgp</code> versions are susceptible to excessive memory allocation with values of up to 2TiB or long processing times for some decryption operations which involve the <a href=\"https://datatracker.ietf.org/doc/html/rfc9580.html#name-argon2\">Argon2 function</a>. An attacker can provide a valid <code>Symmetric Key Encrypted Session Key</code> packet (SKESK) which uses <code>Argon2</code> for String-to-Key hashing with parameters that are excessive, but within specification limits of the RFC9580 OpenPGP standard. Since <code>rpgp</code> did not further restrict the Argon2 parameters, this can cause out-of-memory conditions and crash the <code>rpgp</code> process. Under some conditions,   the memory resource exhaustion may trigger other system instability. Alternatively, this can make the program unresponsive via long computations. The attacker needs to trick a victim into attempting decryption, but does not require knowledge of the symmetric secret used by the victim.</p>\n<p>There is no impact to confidentiality or integrity security properties.</p>\n<h3 id=\"versions-and-patches\">Versions and Patches</h3>\n<p>The impact details on the message parsing component varies with different versions. We've confirmed some of the problematic behavior on older versions such as <code>v0.10.0</code> and see all recent versions as affected in some form.  </p>\n<p>The affected <code>Argon2</code> functionality was introduced with <code>v0.12.0-alpha.1</code>, earlier versions are not vulnerable.</p>\n<p>The vulnerabilities have been fixed with version <code>0.14.2</code>. We recommend all users to upgrade to this version.</p>\n<h3 id=\"references\">References</h3>\n<p>The security audit was made possible by the <a href=\"https://nlnet.nl/core/\">NLnet Foundation NGI Zero Core</a> grant program <a href=\"https://nlnet.nl/project/rPGP-cryptorefresh/\">for rpgp</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rpgp/rpgp/security/advisories/GHSA-4grw-m28r-q285\">https://github.com/rpgp/rpgp/security/advisories/GHSA-4grw-m28r-q285</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53857\">https://nvd.nist.gov/vuln/detail/CVE-2024-53857</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4grw-m28r-q285\">https://github.com/advisories/GHSA-4grw-m28r-q285</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4grw-m28r-q285",
            "title": "[pgp] rPGP Potential Resource Exhaustion when handling Untrusted Messages",
            "date_modified": "2024-12-05T19:05:50.000Z",
            "date_published": "2024-12-05T17:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4grw-m28r-q285"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>During a security audit, <a href=\"https://www.radicallyopensecurity.com/\">Radically Open Security</a> discovered several reachable edge cases which allow an attacker to trigger <code>rpgp</code> crashes by providing crafted data.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>When processing malformed input, <code>rpgp</code> can run into Rust panics which halt the program.</p>\n<p>This can happen in the following scenarios:</p>\n<ul>\n<li>Parsing OpenPGP messages from binary or armor format</li>\n<li>Decrypting OpenPGP messages via <code>decrypt_with_password()</code></li>\n<li>Parsing or converting public keys</li>\n<li>Parsing signed cleartext messages from armor format</li>\n<li>Using malformed private keys to sign or encrypt</li>\n</ul>\n<p>Given the affected components, we consider most attack vectors to be reachable by remote attackers during typical use cases of the <code>rpgp</code> library. The attack complexity is low since the malformed messages are generic, short, and require no victim-specific knowledge.</p>\n<p>The result is a denial-of-service impact via program termination. There is no impact to confidentiality or integrity security properties.</p>\n<h3 id=\"versions-and-patches\">Versions and Patches</h3>\n<p>All recent versions are affected by at least some of the above mentioned issues. </p>\n<p>The vulnerabilities have been fixed with version <code>0.14.1</code>. We recommend all users to upgrade to this version.</p>\n<h3 id=\"references\">References</h3>\n<p>The security audit was made possible by the <a href=\"https://nlnet.nl/core/\">NLnet Foundation NGI Zero Core</a> grant program <a href=\"https://nlnet.nl/project/rPGP-cryptorefresh/\">for rpgp</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rpgp/rpgp/security/advisories/GHSA-9rmp-2568-59rv\">https://github.com/rpgp/rpgp/security/advisories/GHSA-9rmp-2568-59rv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53856\">https://nvd.nist.gov/vuln/detail/CVE-2024-53856</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9rmp-2568-59rv\">https://github.com/advisories/GHSA-9rmp-2568-59rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9rmp-2568-59rv",
            "title": "[pgp] rPGP Panics on Malformed Untrusted Input",
            "date_modified": "2024-12-05T19:05:49.000Z",
            "date_published": "2024-12-05T17:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9rmp-2568-59rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions use deno_core releases that expose <code>Deno.core.ops.op_panic</code> to the JS runtime in the base core</p>\n<p>This function when called triggers a manual panic in the thread containing the runtime.</p>\n<p>It can be fixed by stubbing out the exposed op:</p>\n<pre><code class=\"language-javascript\">Deno.core.ops.op_panic = (msg) =&gt; { throw new Error(msg) };\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rscarson/rustyscript/issues/174\">https://github.com/rscarson/rustyscript/issues/174</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0405.html\">https://rustsec.org/advisories/RUSTSEC-2024-0405.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fwfx-rrv8-crpf\">https://github.com/advisories/GHSA-fwfx-rrv8-crpf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fwfx-rrv8-crpf",
            "title": "[rustyscript] op_panic in the base runtime can force a panic in the runtime's containing thread",
            "date_modified": "2024-12-04T18:37:40.000Z",
            "date_published": "2024-12-04T18:37:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fwfx-rrv8-crpf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions use deno_core releases that expose <code>Deno.core.ops.op_panic</code> to the JS runtime in the base core</p>\n<p>This function when called triggers a manual panic in the thread containing the runtime, breaking sandboxing</p>\n<p>It can be fixed by stubbing out the exposed op:</p>\n<pre><code class=\"language-javascript\">Deno.core.ops.op_panic = (msg) =&gt; { throw new Error(msg) };\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Bromeon/js-sandbox/issues/31\">https://github.com/Bromeon/js-sandbox/issues/31</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0403.html\">https://rustsec.org/advisories/RUSTSEC-2024-0403.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mw5-2636-4535\">https://github.com/advisories/GHSA-4mw5-2636-4535</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mw5-2636-4535",
            "title": "[js-sandbox] op_panic in the base runtime can force a panic in the runtime's containing thread",
            "date_modified": "2024-12-04T18:36:39.000Z",
            "date_published": "2024-12-04T18:36:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mw5-2636-4535"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When given a valid UTF8 string \"ö\\x1b😀\", the function in crates/anstream/src/adapter/strip.rs will be confused. The UTF8 bytes are \\xc3\\xb6 then \\x1b then \\xf0\\x9f\\x98\\x80.</p>\n<p>When looping over \"non-printable bytes\" \\x1b\\xf0 will be considered as some non-printable sequence.</p>\n<p>This will produce a broken str from the incorrectly segmented bytes via str::from_utf8_unchecked, and that should never happen.</p>\n<p>Full credit goes to @Ralith who reviewed this code and asked @burakemir to follow up.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rust-cli/anstyle/issues/156\">https://github.com/rust-cli/anstyle/issues/156</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0404.html\">https://rustsec.org/advisories/RUSTSEC-2024-0404.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2rxc-gjrp-vjhx\">https://github.com/advisories/GHSA-2rxc-gjrp-vjhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2rxc-gjrp-vjhx",
            "title": "[anstream] Unsoundness in anstream",
            "date_modified": "2024-12-04T18:31:33.000Z",
            "date_published": "2024-12-04T18:31:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2rxc-gjrp-vjhx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The borsh serialization of the HashMap did not follow the borsh specification. It potentially produced non-canonical encodings dependent on insertion order. It also did not perform canonicty checks on decoding.</p>\n<p>This can result in consensus splits and cause equivalent objects to be considered distinct.</p>\n<p>This was patched in 0.15.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/hashbrown/issues/576\">https://github.com/rust-lang/hashbrown/issues/576</a></li>\n<li><a href=\"https://github.com/kayabaNerve/hashbrown-borsh-poc\">https://github.com/kayabaNerve/hashbrown-borsh-poc</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0402.html\">https://rustsec.org/advisories/RUSTSEC-2024-0402.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wwq9-3cpr-mm53\">https://github.com/advisories/GHSA-wwq9-3cpr-mm53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wwq9-3cpr-mm53",
            "title": "[hashbrown] Borsh serialization of HashMap is non-canonical",
            "date_modified": "2024-12-04T18:29:17.000Z",
            "date_published": "2024-12-04T18:29:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wwq9-3cpr-mm53"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions allow populating a DistributedSlice of T with elements of an arbitrary other type that coerces to T. For example, elements of type <code>&amp;&amp;str</code> could end up in a slice of type <code>[&amp;str]</code>, since <code>&amp;&amp;str</code> coerces to <code>&amp;str</code> via a deref coercion.</p>\n<p>The flaw was corrected by implementing typechecking for distributed slice elements in such a way that coercion no longer occurs. The element's type must be a subtype of the slice's declared element type.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dtolnay/linkme/issues/82\">https://github.com/dtolnay/linkme/issues/82</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0407.html\">https://rustsec.org/advisories/RUSTSEC-2024-0407.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f95p-4cv5-8w8x\">https://github.com/advisories/GHSA-f95p-4cv5-8w8x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f95p-4cv5-8w8x",
            "title": "[linkme] linkme fails to ensure slice elements match the slice's declared type",
            "date_modified": "2024-12-04T18:26:13.000Z",
            "date_published": "2024-12-04T18:26:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f95p-4cv5-8w8x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of <code>ruzstd</code> miscalculate the length of the allocated and init section of its internal <code>RingBuffer</code>, leading to uninitialized or out-of-bounds reads in <code>copy_bytes_overshooting</code> of up to 15 bytes.</p>\n<p>This may result in up to 15 bytes of memory contents being written into the decoded data when decompressing a crafted archive. This may occur multiple times per archive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/KillingSpark/zstd-rs/issues/75\">https://github.com/KillingSpark/zstd-rs/issues/75</a></li>\n<li><a href=\"https://github.com/KillingSpark/zstd-rs/pull/76\">https://github.com/KillingSpark/zstd-rs/pull/76</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0400.html\">https://rustsec.org/advisories/RUSTSEC-2024-0400.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3f4-45xf-rjm7\">https://github.com/advisories/GHSA-x3f4-45xf-rjm7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3f4-45xf-rjm7",
            "title": "[ruzstd] `ruzstd` uninit and out-of-bounds memory reads",
            "date_modified": "2024-12-02T21:34:27.000Z",
            "date_published": "2024-12-02T21:34:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3f4-45xf-rjm7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Several cross-site scripting vulnerabilities existed in the <code>deno_doc</code> crate which lead to Self-XSS with <code>deno doc --html</code>.</p>\n<h3 id=\"details--poc\">Details &amp; PoC</h3>\n<p>1.) XSS in generated <code>search_index.js</code></p>\n<p><code>deno_doc</code> outputed a JavaScript file for searching. However, the generated file used <code>innerHTML</code> on unsanitzed HTML input.</p>\n<p><a href=\"https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144\">https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144</a></p>\n<p>2.) XSS via property, method and enum names</p>\n<p><code>deno_doc</code> did not sanitize property names, method names and enum names.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The first XSS most likely didn't have an impact since <code>deno doc --html</code> is expected to be used locally with own packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-qqwr-j9mm-fhw6\">https://github.com/denoland/deno/security/advisories/GHSA-qqwr-j9mm-fhw6</a></li>\n<li><a href=\"https://github.com/denoland/deno_doc/commit/0f1ef3efbf16194730a29d93dcb9c02f6c490942\">https://github.com/denoland/deno_doc/commit/0f1ef3efbf16194730a29d93dcb9c02f6c490942</a></li>\n<li><a href=\"https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144\">https://github.com/denoland/deno_doc/blob/dc556c848831d7ae48f3eff2ababc6e75eb6b73e/src/html/templates/pages/search.js#L120-L144</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32468\">https://nvd.nist.gov/vuln/detail/CVE-2024-32468</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qqwr-j9mm-fhw6\">https://github.com/advisories/GHSA-qqwr-j9mm-fhw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qqwr-j9mm-fhw6",
            "title": "[deno_doc] deno_doc's HTML generator vulnerable to Cross-site Scripting",
            "date_modified": "2024-11-25T21:46:51.000Z",
            "date_published": "2024-11-25T19:34:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qqwr-j9mm-fhw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A bug introduced in rustls 0.23.13 leads to a panic if the received TLS ClientHello is fragmented.  Only servers that use <code>rustls::server::Acceptor::accept()</code> are affected.</p>\n<p>Servers that use <code>tokio-rustls</code>'s <code>LazyConfigAcceptor</code> API are affected.</p>\n<p>Servers that use <code>tokio-rustls</code>'s <code>TlsAcceptor</code> API are not affected.</p>\n<p>Servers that use <code>rustls-ffi</code>'s <code>rustls_acceptor_accept</code> API are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rustls/rustls/issues/2227\">https://github.com/rustls/rustls/issues/2227</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0399.html\">https://rustsec.org/advisories/RUSTSEC-2024-0399.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qg5g-gv98-5ffh\">https://github.com/advisories/GHSA-qg5g-gv98-5ffh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qg5g-gv98-5ffh",
            "title": "[rustls] rustls network-reachable panic in `Acceptor::accept`",
            "date_modified": "2024-11-25T16:57:36.000Z",
            "date_published": "2024-11-25T16:57:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qg5g-gv98-5ffh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>\n<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>\n<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>On a Unix-like system in a POSIX-compatible shell, run:</p>\n<pre><code class=\"language-sh\">git init misleading-path\ncd misleading-path\ntouch \"$(printf '\\033]0;Boo!\\007\\033[2K\\r\\033[91mError: Repository is corrupted. Run \\033[96mEVIL_COMMAND\\033[91m to attempt recovery.\\033[0m')\"\ngit add .\ngit commit -m 'Initial commit'\n</code></pre>\n<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>\n<pre><code class=\"language-sh\">gix tree entries\n</code></pre>\n<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>\n<pre><code class=\"language-text\">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.\n</code></pre>\n<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>\n<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>\n<pre><code class=\"language-text\">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m\n</code></pre>\n<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>\n<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>\n<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>\n<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>\n<ul>\n<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>\n<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>\n<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>\n<li>Reading and blocking cannot be performed.</li>\n<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43785\">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0364.html\">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h",
            "title": "[gitoxide] gitoxide-core does not neutralize special characters for terminals",
            "date_modified": "2024-11-25T13:49:14.000Z",
            "date_published": "2024-08-22T16:41:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>\n<h3 id=\"details\">Details</h3>\n<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>\n<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>\n<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>On a Unix-like system in a POSIX-compatible shell, run:</p>\n<pre><code class=\"language-sh\">git init misleading-path\ncd misleading-path\ntouch \"$(printf '\\033]0;Boo!\\007\\033[2K\\r\\033[91mError: Repository is corrupted. Run \\033[96mEVIL_COMMAND\\033[91m to attempt recovery.\\033[0m')\"\ngit add .\ngit commit -m 'Initial commit'\n</code></pre>\n<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>\n<pre><code class=\"language-sh\">gix tree entries\n</code></pre>\n<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>\n<pre><code class=\"language-text\">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.\n</code></pre>\n<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>\n<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>\n<pre><code class=\"language-text\">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m\n</code></pre>\n<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>\n<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>\n<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>\n<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>\n<ul>\n<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>\n<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>\n<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>\n<li>Reading and blocking cannot be performed.</li>\n<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43785\">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0364.html\">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>\n<li><a href=\"https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88g2-r9rw-g55h\">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h",
            "title": "[gitoxide-core] gitoxide-core does not neutralize special characters for terminals",
            "date_modified": "2024-11-25T13:49:14.000Z",
            "date_published": "2024-08-22T16:41:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88g2-r9rw-g55h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sorting table records using an <code>ORDER BY</code> clause with the <code>rand()</code> function as sorting mechanism could cause a panic due to relying on a comparison function that did not implement total order. This event resulted in a panic due to a recent <a href=\"https://blog.rust-lang.org/2024/09/05/Rust-1.81.0.html#new-sort-implementations\">change in Rust 1.81</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A client that is authorized to run queries in a SurrealDB server would be able to query a table with <code>ORDER BY rand()</code> in order to potentially cause a panic in the sorting function. This would crash the server, leading to denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The sorting algorithm has been updated to guarantee total order when shuffling records.</p>\n<ul>\n<li>Version 2.1.0 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/issues/4969\">https://github.com/surrealdb/surrealdb/issues/4969</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4989\">https://github.com/surrealdb/surrealdb/pull/4989</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4805\">https://github.com/surrealdb/surrealdb/pull/4805</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4906\">https://github.com/surrealdb/surrealdb/pull/4906</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/issues/4969\">https://github.com/surrealdb/surrealdb/issues/4969</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4805\">https://github.com/surrealdb/surrealdb/pull/4805</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4906\">https://github.com/surrealdb/surrealdb/pull/4906</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4989\">https://github.com/surrealdb/surrealdb/pull/4989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m52v-24p8-654f\">https://github.com/advisories/GHSA-m52v-24p8-654f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m52v-24p8-654f",
            "title": "[surrealdb-core] SurrealDB has an Uncaught Exception Sorting Tables by Random Order",
            "date_modified": "2024-11-22T20:11:49.000Z",
            "date_published": "2024-11-22T20:11:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m52v-24p8-654f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sorting table records using an <code>ORDER BY</code> clause with the <code>rand()</code> function as sorting mechanism could cause a panic due to relying on a comparison function that did not implement total order. This event resulted in a panic due to a recent <a href=\"https://blog.rust-lang.org/2024/09/05/Rust-1.81.0.html#new-sort-implementations\">change in Rust 1.81</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A client that is authorized to run queries in a SurrealDB server would be able to query a table with <code>ORDER BY rand()</code> in order to potentially cause a panic in the sorting function. This would crash the server, leading to denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The sorting algorithm has been updated to guarantee total order when shuffling records.</p>\n<ul>\n<li>Version 2.1.0 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/issues/4969\">https://github.com/surrealdb/surrealdb/issues/4969</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4989\">https://github.com/surrealdb/surrealdb/pull/4989</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4805\">https://github.com/surrealdb/surrealdb/pull/4805</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4906\">https://github.com/surrealdb/surrealdb/pull/4906</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m52v-24p8-654f</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/issues/4969\">https://github.com/surrealdb/surrealdb/issues/4969</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4805\">https://github.com/surrealdb/surrealdb/pull/4805</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4906\">https://github.com/surrealdb/surrealdb/pull/4906</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/4989\">https://github.com/surrealdb/surrealdb/pull/4989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m52v-24p8-654f\">https://github.com/advisories/GHSA-m52v-24p8-654f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m52v-24p8-654f",
            "title": "[surrealdb] SurrealDB has an Uncaught Exception Sorting Tables by Random Order",
            "date_modified": "2024-11-22T20:11:49.000Z",
            "date_published": "2024-11-22T20:11:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m52v-24p8-654f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Roles for system users are stored as generic <code>Ident</code> values and converted as strings and into the <code>Role</code> enum whenever IAM operations are to be performed that require processing the user roles. This conversion expects those identifiers to only contain the values <code>owner</code>, <code>editor</code> and <code>viewer</code> and will return an error otherwise. However, the <code>unwrap()</code> method would be called on this result when implementing <code>std::convert::From&lt;&amp;Ident&gt; for Role</code>, which would result in a panic where a nonexistent role was used.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A privileged user with the <code>owner</code> role at any level in SurrealDB would be able to define a user with <code>DEFINE USER</code> with an nonexistent role, which would panic when being converted to a <code>Role</code> enum in order to perform certain IAM operations with that user. These operations included signing in with the user. This would crash the server, leading to denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Unexistent roles are no longer accepted during parsing when defining a user. Even when successfully associated with a user, referencing unexistent roles will no longer result in a panic and will instead throw an <code>InvalidRole</code> error.</p>\n<ul>\n<li>Version 2.1.0 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit access to users with the <code>owner</code> role at any level to trusted parties only. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>#5079</li>\n<li>#5092</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5079\">https://github.com/surrealdb/surrealdb/pull/5079</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5092\">https://github.com/surrealdb/surrealdb/pull/5092</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jc55-246c-r88f\">https://github.com/advisories/GHSA-jc55-246c-r88f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jc55-246c-r88f",
            "title": "[surrealdb-core] SurrealDB has an Uncaught Exception Handling Nonexistent Role",
            "date_modified": "2024-11-22T20:11:45.000Z",
            "date_published": "2024-11-22T20:11:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jc55-246c-r88f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Roles for system users are stored as generic <code>Ident</code> values and converted as strings and into the <code>Role</code> enum whenever IAM operations are to be performed that require processing the user roles. This conversion expects those identifiers to only contain the values <code>owner</code>, <code>editor</code> and <code>viewer</code> and will return an error otherwise. However, the <code>unwrap()</code> method would be called on this result when implementing <code>std::convert::From&lt;&amp;Ident&gt; for Role</code>, which would result in a panic where a nonexistent role was used.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A privileged user with the <code>owner</code> role at any level in SurrealDB would be able to define a user with <code>DEFINE USER</code> with an nonexistent role, which would panic when being converted to a <code>Role</code> enum in order to perform certain IAM operations with that user. These operations included signing in with the user. This would crash the server, leading to denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Unexistent roles are no longer accepted during parsing when defining a user. Even when successfully associated with a user, referencing unexistent roles will no longer result in a panic and will instead throw an <code>InvalidRole</code> error.</p>\n<ul>\n<li>Version 2.1.0 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit access to users with the <code>owner</code> role at any level to trusted parties only. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>#5079</li>\n<li>#5092</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jc55-246c-r88f</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5079\">https://github.com/surrealdb/surrealdb/pull/5079</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5092\">https://github.com/surrealdb/surrealdb/pull/5092</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jc55-246c-r88f\">https://github.com/advisories/GHSA-jc55-246c-r88f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jc55-246c-r88f",
            "title": "[surrealdb] SurrealDB has an Uncaught Exception Handling Nonexistent Role",
            "date_modified": "2024-11-22T20:11:45.000Z",
            "date_published": "2024-11-22T20:11:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jc55-246c-r88f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>rand::time()</code> function in SurrealQL generates a random time from an optional range of two Unix timestamps. Due to the underlying use of <code>timestamp_opt</code> from the <code>chrono</code> crate, this function could potentially return <code>None</code> in some instances, leading to a panic when <code>unwrap</code> was called on its result in order to return a SurrealQL <code>datetime</code> type to the caller of the function.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A client that is authorized to run queries in a SurrealDB server would be able to make repeated (in the order of millions) calls to <code>rand::time()</code> in order to reliably trigger a panic. This would crash the server, leading to denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The function has been updated in to guarantee that some <code>datetime</code> is returned or that an error is otherwise gracefully handled.</p>\n<ul>\n<li>Version 2.1.0 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>rand::time()</code> function in the affected versions of SurrealDB using security capabilities. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>#5126</li>\n<li><a href=\"https://surrealdb.com/docs/surrealql/functions/database/rand#randtime\">SurrealQL Documentation - Database Functions (<code>rand::time</code>)</a></li>\n<li><a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities#functions\">SurrealDB Documentation - Security Capabilities (Functions)</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5126\">https://github.com/surrealdb/surrealdb/pull/5126</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4f5-h82v-5w4r\">https://github.com/advisories/GHSA-h4f5-h82v-5w4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4f5-h82v-5w4r",
            "title": "[surrealdb-core] SurrealDB has an Uncaught Exception in Function Generating Random Time",
            "date_modified": "2024-11-22T20:11:39.000Z",
            "date_published": "2024-11-22T20:11:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4f5-h82v-5w4r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>rand::time()</code> function in SurrealQL generates a random time from an optional range of two Unix timestamps. Due to the underlying use of <code>timestamp_opt</code> from the <code>chrono</code> crate, this function could potentially return <code>None</code> in some instances, leading to a panic when <code>unwrap</code> was called on its result in order to return a SurrealQL <code>datetime</code> type to the caller of the function.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A client that is authorized to run queries in a SurrealDB server would be able to make repeated (in the order of millions) calls to <code>rand::time()</code> in order to reliably trigger a panic. This would crash the server, leading to denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The function has been updated in to guarantee that some <code>datetime</code> is returned or that an error is otherwise gracefully handled.</p>\n<ul>\n<li>Version 2.1.0 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run the <code>rand::time()</code> function in the affected versions of SurrealDB using security capabilities. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>#5126</li>\n<li><a href=\"https://surrealdb.com/docs/surrealql/functions/database/rand#randtime\">SurrealQL Documentation - Database Functions (<code>rand::time</code>)</a></li>\n<li><a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities#functions\">SurrealDB Documentation - Security Capabilities (Functions)</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-h4f5-h82v-5w4r</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5126\">https://github.com/surrealdb/surrealdb/pull/5126</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4f5-h82v-5w4r\">https://github.com/advisories/GHSA-h4f5-h82v-5w4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4f5-h82v-5w4r",
            "title": "[surrealdb] SurrealDB has an Uncaught Exception in Function Generating Random Time",
            "date_modified": "2024-11-22T20:11:39.000Z",
            "date_published": "2024-11-22T20:11:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4f5-h82v-5w4r"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}