{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>It is possible to bypass Deno's read/write permission checks by using <code>ATTACH DATABASE</code> statement.</p>\n<h2 id=\"poc\">PoC</h2>\n<pre><code class=\"language-js\">// poc.js\nimport { DatabaseSync } from \"node:sqlite\"\n\nconst db = new DatabaseSync(\":memory:\");\ndb.exec(\"ATTACH DATABASE 'test.db' as test;\");\n\ndb.exec(\"CREATE TABLE test.test (id INTEGER PRIMARY KEY, name TEXT);\");\n</code></pre>\n<pre><code>$ deno poc.js\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596\">https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860\">https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vxj-4cph-c596\">https://github.com/advisories/GHSA-8vxj-4cph-c596</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596",
            "title": "[deno_node] Deno has --allow-read / --allow-write permission bypass in `node:sqlite`",
            "date_modified": "2025-06-04T21:22:28.000Z",
            "date_published": "2025-06-04T21:22:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>It is possible to bypass Deno's read/write permission checks by using <code>ATTACH DATABASE</code> statement.</p>\n<h2 id=\"poc\">PoC</h2>\n<pre><code class=\"language-js\">// poc.js\nimport { DatabaseSync } from \"node:sqlite\"\n\nconst db = new DatabaseSync(\":memory:\");\ndb.exec(\"ATTACH DATABASE 'test.db' as test;\");\n\ndb.exec(\"CREATE TABLE test.test (id INTEGER PRIMARY KEY, name TEXT);\");\n</code></pre>\n<pre><code>$ deno poc.js\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596\">https://github.com/denoland/deno/security/advisories/GHSA-8vxj-4cph-c596</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860\">https://github.com/denoland/deno/commit/31a97803995bd94629528ba841b2418d3ca01860</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vxj-4cph-c596\">https://github.com/advisories/GHSA-8vxj-4cph-c596</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596",
            "title": "[deno] Deno has --allow-read / --allow-write permission bypass in `node:sqlite`",
            "date_modified": "2025-06-04T21:22:28.000Z",
            "date_published": "2025-06-04T21:22:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vxj-4cph-c596"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n</code></pre>\n<p>The first example using <code>get</code> exits with the following error:</p>\n<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n</code></pre>\n<p>The second example  using <code>toObject</code> prints all environment variables:</p>\n<pre><code>[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789\">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29079\">https://github.com/denoland/deno/pull/29079</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f\">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753\">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>\n<li><a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>\n<li><a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w8p-chxq-2789\">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789",
            "title": "[deno_runtime] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
            "date_modified": "2025-06-04T21:18:19.000Z",
            "date_published": "2025-06-04T21:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n</code></pre>\n<p>The first example using <code>get</code> exits with the following error:</p>\n<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n</code></pre>\n<p>The second example  using <code>toObject</code> prints all environment variables:</p>\n<pre><code>[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789\">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29079\">https://github.com/denoland/deno/pull/29079</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f\">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753\">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>\n<li><a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>\n<li><a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w8p-chxq-2789\">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789",
            "title": "[deno] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
            "date_modified": "2025-06-04T21:18:19.000Z",
            "date_published": "2025-06-04T21:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">Deno.env.toObject</a> method ignores any variables listed in the <code>--deny-env</code> option of the <code>deno run</code> command. When looking at the <a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">documentation</a> of the <code>--deny-env</code> option this might lead to a false impression that variables listed in the option are impossible to read.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>export AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n</code></pre>\n<p>The first example using <code>get</code> exits with the following error:</p>\n<pre><code>error: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n</code></pre>\n<p>The second example  using <code>toObject</code> prints all environment variables:</p>\n<pre><code>[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Software relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789\">https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29079\">https://github.com/denoland/deno/pull/29079</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f\">https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753\">https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753</a></li>\n<li><a href=\"https://docs.deno.com/api/deno/~/Deno.Env.toObject\">https://docs.deno.com/api/deno/~/Deno.Env.toObject</a></li>\n<li><a href=\"https://docs.deno.com/runtime/fundamentals/security/#environment-variables\">https://docs.deno.com/runtime/fundamentals/security/#environment-variables</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w8p-chxq-2789\">https://github.com/advisories/GHSA-7w8p-chxq-2789</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789",
            "title": "[deno] Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
            "date_modified": "2025-06-04T21:18:19.000Z",
            "date_published": "2025-06-04T21:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Caused by the fast exit logic in #22894.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Run the above command expecting no permissions to be passed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/22894\">https://github.com/denoland/deno/pull/22894</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29213\">https://github.com/denoland/deno/pull/29213</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db\">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f\">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf\">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683",
            "title": "[deno_runtime] Deno run with --allow-read and --deny-read flags results in allowed",
            "date_modified": "2025-06-04T21:13:44.000Z",
            "date_published": "2025-06-04T21:13:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Caused by the fast exit logic in #22894.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Run the above command expecting no permissions to be passed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/22894\">https://github.com/denoland/deno/pull/22894</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29213\">https://github.com/denoland/deno/pull/29213</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db\">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f\">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf\">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683",
            "title": "[deno] Deno run with --allow-read and --deny-read flags results in allowed",
            "date_modified": "2025-06-04T21:13:44.000Z",
            "date_published": "2025-06-04T21:13:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Caused by the fast exit logic in #22894.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Run the above command expecting no permissions to be passed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/22894\">https://github.com/denoland/deno/pull/22894</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29213\">https://github.com/denoland/deno/pull/29213</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db\">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f\">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf\">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683",
            "title": "[deno] Deno run with --allow-read and --deny-read flags results in allowed",
            "date_modified": "2025-06-04T21:13:44.000Z",
            "date_published": "2025-06-04T21:13:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>deno run --allow-read --deny-read main.ts</code> results in allowed, even though 'deny' should be stronger. Same with all global unary permissions given as <code>--allow-* --deny-*</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Caused by the fast exit logic in #22894.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Run the above command expecting no permissions to be passed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects a nonsensical combination of flags, so there shouldn't be a real impact on the userbase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/denoland/deno/security/advisories/GHSA-xqxc-x6p3-w683</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/22894\">https://github.com/denoland/deno/pull/22894</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/29213\">https://github.com/denoland/deno/pull/29213</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db\">https://github.com/denoland/deno/commit/2f0fae9d9071dcaf0a689bc7097584b1b9ebc8db</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f\">https://github.com/denoland/deno/commit/9d665572d3cd39f997e29e6daac7c1102fc5c04f</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf\">https://github.com/denoland/deno/commit/ef315b56c26c9ef5f25284a5100d2ed525a148cf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqxc-x6p3-w683\">https://github.com/advisories/GHSA-xqxc-x6p3-w683</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683",
            "title": "[deno] Deno run with --allow-read and --deny-read flags results in allowed",
            "date_modified": "2025-06-04T21:13:44.000Z",
            "date_published": "2025-06-04T21:13:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqxc-x6p3-w683"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This affects AES-256-GCM and AES-128-GCM in Deno, introduced by commit <a href=\"https://github.com/denoland/deno/commit/0d1beed\">0d1beed</a>. Specifically, the authentication tag is not being validated. This means tampered ciphertexts or incorrect keys might not be detected, which breaks the guarantees expected from AES-GCM. Older versions of Deno correctly threw errors in such cases, as does Node.js.</p>\n<p>Without authentication tag verification, AES-GCM degrades to essentially CTR mode, removing integrity protection. Authenticated data set with set_aad is also affected, as it is incorporated into the GCM hash (ghash) but this too is not validated, rendering AAD checks ineffective.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-ts\">import { Buffer } from \"node:buffer\";\nimport {\n  createCipheriv,\n  createDecipheriv,\n  randomBytes,\n  scrypt,\n} from \"node:crypto\";\n\ntype Encrypted = {\n  salt: string;\n  iv: string;\n  enc: string;\n  authTag: string;\n};\n\nconst deriveKey = (key: string, salt: Buffer) =&gt;\n  new Promise&lt;Buffer&gt;((res, rej) =&gt;\n    scrypt(key, salt, 32, (err, k) =&gt; {\n      if (err) rej(err);\n      else res(k);\n    })\n  );\n\nasync function encrypt(text: string, key: string): Promise&lt;Encrypted&gt; {\n  const salt = randomBytes(32);\n  const k = await deriveKey(key, salt);\n\n  const iv = randomBytes(16);\n  const enc = createCipheriv(\"aes-256-gcm\", k, iv);\n  const ciphertext = enc.update(text, \"binary\", \"binary\") + enc.final(\"binary\");\n\n  return {\n    salt: salt.toString(\"binary\"),\n    iv: iv.toString(\"binary\"),\n    enc: ciphertext,\n    authTag: enc.getAuthTag().toString(\"binary\"),\n  };\n}\n\nasync function decrypt(enc: Encrypted, key: string) {\n  const k = await deriveKey(key, Buffer.from(enc.salt, \"binary\"));\n  const dec = createDecipheriv(\"aes-256-gcm\", k, Buffer.from(enc.iv, \"binary\"));\n\n  const out = dec.update(enc.enc, \"binary\", \"binary\");\n  dec.setAuthTag(Buffer.from(enc.authTag, \"binary\"));\n  return out + dec.final(\"binary\");\n}\n\nconst test = await encrypt(\"abcdefghi\", \"key\");\ntest.enc = \"\";\nconsole.log(await decrypt(test, \"\")); // no error\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>While discovered through experimentation, authentication failures that should raise errors may be silently ignored.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x\">https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24015\">https://nvd.nist.gov/vuln/detail/CVE-2025-24015</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d\">https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed\">https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67\">https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2x3r-hwv5-p32x\">https://github.com/advisories/GHSA-2x3r-hwv5-p32x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2x3r-hwv5-p32x",
            "title": "[deno_node] Deno's AES GCM authentication tags are not verified",
            "date_modified": "2025-06-04T20:48:58.000Z",
            "date_published": "2025-06-04T20:48:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2x3r-hwv5-p32x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This affects AES-256-GCM and AES-128-GCM in Deno, introduced by commit <a href=\"https://github.com/denoland/deno/commit/0d1beed\">0d1beed</a>. Specifically, the authentication tag is not being validated. This means tampered ciphertexts or incorrect keys might not be detected, which breaks the guarantees expected from AES-GCM. Older versions of Deno correctly threw errors in such cases, as does Node.js.</p>\n<p>Without authentication tag verification, AES-GCM degrades to essentially CTR mode, removing integrity protection. Authenticated data set with set_aad is also affected, as it is incorporated into the GCM hash (ghash) but this too is not validated, rendering AAD checks ineffective.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-ts\">import { Buffer } from \"node:buffer\";\nimport {\n  createCipheriv,\n  createDecipheriv,\n  randomBytes,\n  scrypt,\n} from \"node:crypto\";\n\ntype Encrypted = {\n  salt: string;\n  iv: string;\n  enc: string;\n  authTag: string;\n};\n\nconst deriveKey = (key: string, salt: Buffer) =&gt;\n  new Promise&lt;Buffer&gt;((res, rej) =&gt;\n    scrypt(key, salt, 32, (err, k) =&gt; {\n      if (err) rej(err);\n      else res(k);\n    })\n  );\n\nasync function encrypt(text: string, key: string): Promise&lt;Encrypted&gt; {\n  const salt = randomBytes(32);\n  const k = await deriveKey(key, salt);\n\n  const iv = randomBytes(16);\n  const enc = createCipheriv(\"aes-256-gcm\", k, iv);\n  const ciphertext = enc.update(text, \"binary\", \"binary\") + enc.final(\"binary\");\n\n  return {\n    salt: salt.toString(\"binary\"),\n    iv: iv.toString(\"binary\"),\n    enc: ciphertext,\n    authTag: enc.getAuthTag().toString(\"binary\"),\n  };\n}\n\nasync function decrypt(enc: Encrypted, key: string) {\n  const k = await deriveKey(key, Buffer.from(enc.salt, \"binary\"));\n  const dec = createDecipheriv(\"aes-256-gcm\", k, Buffer.from(enc.iv, \"binary\"));\n\n  const out = dec.update(enc.enc, \"binary\", \"binary\");\n  dec.setAuthTag(Buffer.from(enc.authTag, \"binary\"));\n  return out + dec.final(\"binary\");\n}\n\nconst test = await encrypt(\"abcdefghi\", \"key\");\ntest.enc = \"\";\nconsole.log(await decrypt(test, \"\")); // no error\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>While discovered through experimentation, authentication failures that should raise errors may be silently ignored.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x\">https://github.com/denoland/deno/security/advisories/GHSA-2x3r-hwv5-p32x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24015\">https://nvd.nist.gov/vuln/detail/CVE-2025-24015</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d\">https://github.com/denoland/deno/commit/0d1beed2e3633d71d5e288e0382b85be361ec13d</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed\">https://github.com/denoland/deno/commit/4f27d7cdc02e3edfb9d36275341fb8185d6e99ed</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67\">https://github.com/denoland/deno/commit/a4003a5292bd0affefad3ecb24a8732886900f67</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2x3r-hwv5-p32x\">https://github.com/advisories/GHSA-2x3r-hwv5-p32x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2x3r-hwv5-p32x",
            "title": "[deno] Deno's AES GCM authentication tags are not verified",
            "date_modified": "2025-06-04T20:48:58.000Z",
            "date_published": "2025-06-04T20:48:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2x3r-hwv5-p32x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>Rows::row_unchecked()</code> allows out of bounds access to the underlying buffer without sufficient checks.</p>\n<p>The arrow2 crate is no longer maintained, so there are no plans to fix this issue. Users are advised to migrate to the arrow crate, instead.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0038.html\">https://rustsec.org/advisories/RUSTSEC-2025-0038.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wv8j-m3hx-924j\">https://github.com/advisories/GHSA-wv8j-m3hx-924j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wv8j-m3hx-924j",
            "title": "[arrow2] Arrow2 allows out of bounds access in public safe API",
            "date_modified": "2025-05-30T20:09:57.000Z",
            "date_published": "2025-05-30T20:09:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wv8j-m3hx-924j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In group_number in the scsir crate 0.2.0 for Rust, there can be an overflow because a hardware device may expect a small number of bits (e.g., 5 bits) for group number.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48756\">https://nvd.nist.gov/vuln/detail/CVE-2025-48756</a></li>\n<li><a href=\"https://github.com/maboroshinokiseki/scsir/issues/4\">https://github.com/maboroshinokiseki/scsir/issues/4</a></li>\n<li><a href=\"https://crates.io/crates/scsir\">https://crates.io/crates/scsir</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cm3g-qm4h-xm6m\">https://github.com/advisories/GHSA-cm3g-qm4h-xm6m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cm3g-qm4h-xm6m",
            "title": "[scsir] SCSIR has a Potential Unsound Issue in WriteSameCommand",
            "date_modified": "2025-05-27T18:52:09.000Z",
            "date_published": "2025-05-24T03:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cm3g-qm4h-xm6m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In the memory_pages crate 0.1.0 for Rust, division by zero can occur.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48754\">https://nvd.nist.gov/vuln/detail/CVE-2025-48754</a></li>\n<li><a href=\"https://github.com/FractalFir/memory_pages/issues/1\">https://github.com/FractalFir/memory_pages/issues/1</a></li>\n<li><a href=\"https://crates.io/crates/memory_pages\">https://crates.io/crates/memory_pages</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r4r-9fgh-pw53\">https://github.com/advisories/GHSA-5r4r-9fgh-pw53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r4r-9fgh-pw53",
            "title": "[memory_pages] memory_pages division by zero",
            "date_modified": "2025-05-27T18:04:28.000Z",
            "date_published": "2025-05-24T03:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r4r-9fgh-pw53"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In the process-sync crate 0.2.2 for Rust, the drop function lacks a check for whether the pthread_mutex is unlocked.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48752\">https://nvd.nist.gov/vuln/detail/CVE-2025-48752</a></li>\n<li><a href=\"https://github.com/Forestryks/process-sync-rs/issues/3\">https://github.com/Forestryks/process-sync-rs/issues/3</a></li>\n<li><a href=\"https://crates.io/crates/process-sync\">https://crates.io/crates/process-sync</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mqwx-r894-9hfp\">https://github.com/advisories/GHSA-mqwx-r894-9hfp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mqwx-r894-9hfp",
            "title": "[process-sync] Process Sync has a Potential Unsound Issue in SharedMutex",
            "date_modified": "2025-05-27T18:04:18.000Z",
            "date_published": "2025-05-24T03:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mqwx-r894-9hfp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The process_lock crate 0.1.0 for Rust allows data races in unlock.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48751\">https://nvd.nist.gov/vuln/detail/CVE-2025-48751</a></li>\n<li><a href=\"https://github.com/tickbh/ProcessLock/issues/1\">https://github.com/tickbh/ProcessLock/issues/1</a></li>\n<li><a href=\"https://crates.io/crates/process_lock\">https://crates.io/crates/process_lock</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6v24-6wgf-8vj6\">https://github.com/advisories/GHSA-6v24-6wgf-8vj6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6v24-6wgf-8vj6",
            "title": "[process_lock] process_lock has a Potential Unsound issue in unlock",
            "date_modified": "2025-05-27T18:04:08.000Z",
            "date_published": "2025-05-24T03:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6v24-6wgf-8vj6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Pingora versions prior to 0.5.0 which used the caching functionality in pingora-proxy did not properly drain the downstream request body on cache hits.</p>\n<p>This allows an attacker to craft malicious HTTP/1.1 requests which could lead to request smuggling or cache poisoning.</p>\n<p>This flaw was corrected in commit fda3317ec822678564d641e7cf1c9b77ee3759ff by ensuring that the downstream request body is always drained before a connection can be reused.</p>\n<p>See <a href=\"https://blog.cloudflare.com/resolving-a-request-smuggling-vulnerability-in-pingora/\">the blog post</a> for more information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4366\">https://nvd.nist.gov/vuln/detail/CVE-2025-4366</a></li>\n<li><a href=\"https://blog.cloudflare.com/resolving-a-request-smuggling-vulnerability-in-pingora\">https://blog.cloudflare.com/resolving-a-request-smuggling-vulnerability-in-pingora</a></li>\n<li><a href=\"https://github.com/cloudflare/pingora\">https://github.com/cloudflare/pingora</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0037.html\">https://rustsec.org/advisories/RUSTSEC-2025-0037.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3qmp-g57h-rxf2\">https://github.com/advisories/GHSA-3qmp-g57h-rxf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3qmp-g57h-rxf2",
            "title": "[pingora-core] Pingora Request Smuggling and Cache Poisoning",
            "date_modified": "2025-05-22T20:25:17.000Z",
            "date_published": "2025-05-22T20:25:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3qmp-g57h-rxf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"duplicate-advisory\">Duplicate Advisory</h3>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-pg9f-39pc-qf8g. This link is maintained to preserve external references.</p>\n<h3 id=\"original-description\">Original Description</h3>\n<p>In crossbeam-channel rust crate, the internal <code>Channel</code> type's <code>Drop</code> method has a race condition which could, in some circumstances, lead to a double-free that could result in memory corruption.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4574\">https://nvd.nist.gov/vuln/detail/CVE-2025-4574</a></li>\n<li><a href=\"https://github.com/crossbeam-rs/crossbeam/pull/1187\">https://github.com/crossbeam-rs/crossbeam/pull/1187</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2025-4574\">https://access.redhat.com/security/cve/CVE-2025-4574</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2358890\">https://bugzilla.redhat.com/show_bug.cgi?id=2358890</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w443-5h3j-jqcp\">https://github.com/advisories/GHSA-w443-5h3j-jqcp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w443-5h3j-jqcp",
            "title": "[crossbeam-channel] Duplicate Advisory: crossbeam-channel Vulnerable to Double Free on Drop",
            "date_modified": "2025-05-15T18:26:23.000Z",
            "date_published": "2025-05-14T00:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w443-5h3j-jqcp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Several soundness issues have been reported. Resolving them doesn't seem to be considered a priority. In particular, unprincipled use of mutable statics is pervasive throughout the library, making it possible to cause use-after-free in safe code.</p>\n<p>Currently, no fixed version is available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/not-fl3/macroquad/issues/333\">https://github.com/not-fl3/macroquad/issues/333</a></li>\n<li><a href=\"https://github.com/not-fl3/macroquad/issues/634\">https://github.com/not-fl3/macroquad/issues/634</a></li>\n<li><a href=\"https://github.com/not-fl3/macroquad/issues/723\">https://github.com/not-fl3/macroquad/issues/723</a></li>\n<li><a href=\"https://github.com/not-fl3/macroquad/issues/746\">https://github.com/not-fl3/macroquad/issues/746</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0035.html\">https://rustsec.org/advisories/RUSTSEC-2025-0035.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gg76-hg3v-5q6c\">https://github.com/advisories/GHSA-gg76-hg3v-5q6c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gg76-hg3v-5q6c",
            "title": "[macroquad] macroquad vulnerable to multiple soundness issues",
            "date_modified": "2025-05-15T16:22:33.000Z",
            "date_published": "2025-05-15T16:22:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gg76-hg3v-5q6c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Users with limited sudo privileges (e.g. execution of a single command) can list sudo privileges of other users using the <code>-U</code> flag. This doesn't happen with the original sudo.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The initial test has been done in a container running Ubuntu 24.04 and installing <a href=\"https://github.com/jnsgruk/oxidizr\">oxidizr</a>, running sudo-rs 0.2.2.</p>\n<p>A user (bob) has been added with only ps command executable through sudo:</p>\n<pre><code>root    ALL=(ALL:ALL) ALL\nbob     ALL=(ALL:ALL) /usr/bin/ps\n</code></pre>\n<p>The user is not able to read the <code>/etc/sudoers</code> file and running <code>sudo -l -Uroot</code> with original sudo (version 1.9.15p5) causes the following error:</p>\n<pre><code>Sorry, user bob is not allowed to execute 'list' as root on 43d4aed3cdbd.\n</code></pre>\n<p>The same command with sudo-rs is run without denying the execution:</p>\n<pre><code>User root may run the following commands on 43d4aed3cdbd:\n    (ALL : ALL) ALL\n</code></pre>\n<p>The same happens for other non-root users:</p>\n<pre><code>bob@43d4aed3cdbd:~$ sudo -l -Ufoo\nUser foo may run the following commands on 43d4aed3cdbd:\n    (ALL : ALL) /usr/bin/whoami\n</code></pre>\n<p>The behavior has been also been observed for version 0.2.5.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users with limited sudo privileges can enumerate the sudoers file, revealing sensitive information about other users' permissions. Attackers can collect information that can be used to more targeted attacks.</p>\n<p>Systems where users either do not have sudo privileges or have the ability to run all commands as root through sudo (the default configuration on most systems) are not affected by this advisory.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was identified by <a href=\"https://www.zonia3000.net/\">Sonia Zorba</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/trifectatechfoundation/sudo-rs/security/advisories/GHSA-w9q3-g4p5-5q2r\">https://github.com/trifectatechfoundation/sudo-rs/security/advisories/GHSA-w9q3-g4p5-5q2r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46718\">https://nvd.nist.gov/vuln/detail/CVE-2025-46718</a></li>\n<li><a href=\"https://github.com/trifectatechfoundation/sudo-rs/releases/tag/v0.2.6\">https://github.com/trifectatechfoundation/sudo-rs/releases/tag/v0.2.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w9q3-g4p5-5q2r\">https://github.com/advisories/GHSA-w9q3-g4p5-5q2r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w9q3-g4p5-5q2r",
            "title": "[sudo-rs] sudo-rs Allows Low Privilege Users to Enumerate Privileges of Others",
            "date_modified": "2025-05-13T20:05:56.000Z",
            "date_published": "2025-05-13T20:05:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w9q3-g4p5-5q2r"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}