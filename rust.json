{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>An authenticated system user at the root, namespace, or database levels can use the <code>DEFINE ANALYZER</code> statement to point to arbitrary file locations on the file system, and should the file be tab separated with two columns, the analyzer can be leveraged to exfiltrate the content.</p>\n<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Limited to unauthorised access to 2 column TSV files on the file system</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been created that introduces a new environment variable, <code>SURREAL_FILE_ALLOWLIST</code> , which contains a list of allowed file paths. When a mapping file is processed, the mapper checks if the file’s path is within one of the allowed paths.</p>\n<ul>\n<li>Versions 2.1.5, 2.2.2 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users unable to update may want to limit those with root, namespace, or database level users to trusted parties only.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://surrealdb.com/docs/surrealql/statements/define/analyzer#define-analyzer-statement\">SurrealQL Documentation - DEFINE ANALYZER</a>\n<a href=\"https://github.com/surrealdb/surrealdb/pull/5600\">#5600</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5600\">https://github.com/surrealdb/surrealdb/pull/5600</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2cvj-g5r5-jrrg\">https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2cvj-g5r5-jrrg",
            "title": "[surrealdb] SurrealDB has local file read of 2-column TSV files via analyzers ",
            "date_modified": "2025-04-10T21:08:51.000Z",
            "date_published": "2025-04-10T21:08:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2cvj-g5r5-jrrg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An authenticated system user at the root, namespace, or database levels can use the <code>DEFINE ANALYZER</code> statement to point to arbitrary file locations on the file system, and should the file be tab separated with two columns, the analyzer can be leveraged to exfiltrate the content.</p>\n<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Low, matched by our CVSS v4 assessment.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Limited to unauthorised access to 2 column TSV files on the file system</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been created that introduces a new environment variable, <code>SURREAL_FILE_ALLOWLIST</code> , which contains a list of allowed file paths. When a mapping file is processed, the mapper checks if the file’s path is within one of the allowed paths.</p>\n<ul>\n<li>Versions 2.1.5, 2.2.2 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users unable to update may want to limit those with root, namespace, or database level users to trusted parties only.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://surrealdb.com/docs/surrealql/statements/define/analyzer#define-analyzer-statement\">SurrealQL Documentation - DEFINE ANALYZER</a>\n<a href=\"https://github.com/surrealdb/surrealdb/pull/5600\">#5600</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-2cvj-g5r5-jrrg</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5600\">https://github.com/surrealdb/surrealdb/pull/5600</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2cvj-g5r5-jrrg\">https://github.com/advisories/GHSA-2cvj-g5r5-jrrg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2cvj-g5r5-jrrg",
            "title": "[surrealdb] SurrealDB has local file read of 2-column TSV files via analyzers ",
            "date_modified": "2025-04-10T21:08:51.000Z",
            "date_published": "2025-04-10T21:08:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2cvj-g5r5-jrrg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In order to prevent DoS situations due to infinite recursions, SurrealDB implements a limit of nested calls for both native functions and embedded JavaScript functions.</p>\n<p>However, in SurrealDB instances with embedded scripting functions enabled, it was found that this limit can be circumvented by utilizing both at the same time. If a native function contains JavaScript which issues a new query that calls that function, the recursion limit is not triggered.</p>\n<p>Once executed, SurrealDB will follow the path of infinite recursions until the system runs out of memory, prior to the recursion limit being triggered.</p>\n<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or \n<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>\n<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For SurrealDB instances with embedded scripting functions enabled, this attack could be used to perform a DoS attack on the server by an authenticated user. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been created that further limits scripting function call limit recursion depth and disallows multiple calls to <code>surreadb.query()</code> to run in parallel in a scripting function.</p>\n<ul>\n<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Deny execution of embedded scripting functions through the configuration of <a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities\">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities\">SurrealDB Documentation - Capabilities</a>\n<a href=\"https://surrealdb.com/docs/surrealql/functions/script\">SurrealQL Documentation - Scripting Functions</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7rc-8w7m-r9qr\">https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7rc-8w7m-r9qr",
            "title": "[surrealdb] SurrealDB vulnerable to memory exhaustion via nested functions and scripts",
            "date_modified": "2025-04-10T21:08:01.000Z",
            "date_published": "2025-04-10T21:07:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7rc-8w7m-r9qr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In order to prevent DoS situations due to infinite recursions, SurrealDB implements a limit of nested calls for both native functions and embedded JavaScript functions.</p>\n<p>However, in SurrealDB instances with embedded scripting functions enabled, it was found that this limit can be circumvented by utilizing both at the same time. If a native function contains JavaScript which issues a new query that calls that function, the recursion limit is not triggered.</p>\n<p>Once executed, SurrealDB will follow the path of infinite recursions until the system runs out of memory, prior to the recursion limit being triggered.</p>\n<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or \n<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>\n<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For SurrealDB instances with embedded scripting functions enabled, this attack could be used to perform a DoS attack on the server by an authenticated user. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been created that further limits scripting function call limit recursion depth and disallows multiple calls to <code>surreadb.query()</code> to run in parallel in a scripting function.</p>\n<ul>\n<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Deny execution of embedded scripting functions through the configuration of <a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities\">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities\">SurrealDB Documentation - Capabilities</a>\n<a href=\"https://surrealdb.com/docs/surrealql/functions/script\">SurrealQL Documentation - Scripting Functions</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7rc-8w7m-r9qr\">https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7rc-8w7m-r9qr",
            "title": "[surrealdb] SurrealDB vulnerable to memory exhaustion via nested functions and scripts",
            "date_modified": "2025-04-10T21:08:01.000Z",
            "date_published": "2025-04-10T21:07:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7rc-8w7m-r9qr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In order to prevent DoS situations due to infinite recursions, SurrealDB implements a limit of nested calls for both native functions and embedded JavaScript functions.</p>\n<p>However, in SurrealDB instances with embedded scripting functions enabled, it was found that this limit can be circumvented by utilizing both at the same time. If a native function contains JavaScript which issues a new query that calls that function, the recursion limit is not triggered.</p>\n<p>Once executed, SurrealDB will follow the path of infinite recursions until the system runs out of memory, prior to the recursion limit being triggered.</p>\n<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or \n<code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>\n<p>This issue was discovered and patched during an code audit and penetration test of SurrealDB by cure53, the severity defined within cure53's preliminary finding is Medium, matched by our CVSS v4 assessment.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>For SurrealDB instances with embedded scripting functions enabled, this attack could be used to perform a DoS attack on the server by an authenticated user. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been created that further limits scripting function call limit recursion depth and disallows multiple calls to <code>surreadb.query()</code> to run in parallel in a scripting function.</p>\n<ul>\n<li>Versions 2.0.5, 2.1.5, 2.2.2 and later are not affected by this issue.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Deny execution of embedded scripting functions through the configuration of <a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities#capabilities\">capabilities</a> by starting SurrealDB with the <code>--deny-scripting</code> flag or the equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. This has a usability implication, although scripting functions are disabled by default.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://surrealdb.com/docs/surrealdb/security/capabilities\">SurrealDB Documentation - Capabilities</a>\n<a href=\"https://surrealdb.com/docs/surrealql/functions/script\">SurrealQL Documentation - Scripting Functions</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m7rc-8w7m-r9qr</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7rc-8w7m-r9qr\">https://github.com/advisories/GHSA-m7rc-8w7m-r9qr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7rc-8w7m-r9qr",
            "title": "[surrealdb] SurrealDB vulnerable to memory exhaustion via nested functions and scripts",
            "date_modified": "2025-04-10T21:08:01.000Z",
            "date_published": "2025-04-10T21:07:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7rc-8w7m-r9qr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found where an attacker can crash the database via crafting a HTTP query that returns a null byte. The problem relies on an uncaught exception in the <code>net</code> module, where the result of the query will be converted to JSON before showing as the HTTP response to the user in the <strong>/sql</strong> endpoint.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows any authenticated user to crash a SurrealDB instance by sending a crafted query with a null byte to the /sql endpoint. </p>\n<p>Where SurrealDB is used as an application backend, it is possible that an application user can crash the SurrealDB instance and thus the supported application through crafted inputs that exploit this attack vector.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced that ensures the error is caught and converted as an error.</p>\n<ul>\n<li>Versions 2.2.2, 2.1.5 and 2.0.5 and later are not affected by this isssue</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<p>Where SurrealDB is used as an application backend, ensure sanitisation of input at the application layer to prevent injection attacks.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/surrealdb/surrealdb/pull/5647\">https://github.com/surrealdb/surrealdb/pull/5647</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-rq86-9m6r-cm3g\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-rq86-9m6r-cm3g</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5647\">https://github.com/surrealdb/surrealdb/pull/5647</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rq86-9m6r-cm3g\">https://github.com/advisories/GHSA-rq86-9m6r-cm3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rq86-9m6r-cm3g",
            "title": "[surrealdb] SurrealDB has uncaught exception in Net module that leads to database crash",
            "date_modified": "2025-04-10T21:05:36.000Z",
            "date_published": "2025-04-10T21:05:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rq86-9m6r-cm3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found where an attacker can crash the database via crafting a HTTP query that returns a null byte. The problem relies on an uncaught exception in the <code>net</code> module, where the result of the query will be converted to JSON before showing as the HTTP response to the user in the <strong>/sql</strong> endpoint.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows any authenticated user to crash a SurrealDB instance by sending a crafted query with a null byte to the /sql endpoint. </p>\n<p>Where SurrealDB is used as an application backend, it is possible that an application user can crash the SurrealDB instance and thus the supported application through crafted inputs that exploit this attack vector.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced that ensures the error is caught and converted as an error.</p>\n<ul>\n<li>Versions 2.2.2, 2.1.5 and 2.0.5 and later are not affected by this isssue</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<p>Where SurrealDB is used as an application backend, ensure sanitisation of input at the application layer to prevent injection attacks.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/surrealdb/surrealdb/pull/5647\">https://github.com/surrealdb/surrealdb/pull/5647</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-rq86-9m6r-cm3g\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-rq86-9m6r-cm3g</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5647\">https://github.com/surrealdb/surrealdb/pull/5647</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rq86-9m6r-cm3g\">https://github.com/advisories/GHSA-rq86-9m6r-cm3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rq86-9m6r-cm3g",
            "title": "[surrealdb] SurrealDB has uncaught exception in Net module that leads to database crash",
            "date_modified": "2025-04-10T21:05:36.000Z",
            "date_published": "2025-04-10T21:05:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rq86-9m6r-cm3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found where an attacker can crash the database via crafting a HTTP query that returns a null byte. The problem relies on an uncaught exception in the <code>net</code> module, where the result of the query will be converted to JSON before showing as the HTTP response to the user in the <strong>/sql</strong> endpoint.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows any authenticated user to crash a SurrealDB instance by sending a crafted query with a null byte to the /sql endpoint. </p>\n<p>Where SurrealDB is used as an application backend, it is possible that an application user can crash the SurrealDB instance and thus the supported application through crafted inputs that exploit this attack vector.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced that ensures the error is caught and converted as an error.</p>\n<ul>\n<li>Versions 2.2.2, 2.1.5 and 2.0.5 and later are not affected by this isssue</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>\n<p>Where SurrealDB is used as an application backend, ensure sanitisation of input at the application layer to prevent injection attacks.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/surrealdb/surrealdb/pull/5647\">https://github.com/surrealdb/surrealdb/pull/5647</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-rq86-9m6r-cm3g\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-rq86-9m6r-cm3g</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/5647\">https://github.com/surrealdb/surrealdb/pull/5647</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rq86-9m6r-cm3g\">https://github.com/advisories/GHSA-rq86-9m6r-cm3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rq86-9m6r-cm3g",
            "title": "[surrealdb] SurrealDB has uncaught exception in Net module that leads to database crash",
            "date_modified": "2025-04-10T21:05:36.000Z",
            "date_published": "2025-04-10T21:05:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rq86-9m6r-cm3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The internal <code>Channel</code> type's <code>Drop</code> method has a race\nwhich could, in some circumstances, lead to a double-free.\nThis could result in memory corruption.</p>\n<p>Quoting from the\n<a href=\"https://github.com/crossbeam-rs/crossbeam/pull/1187#issue-2980761131\">upstream description in merge request #1187</a>:</p>\n<blockquote>\n<p>The problem lies in the fact that <code>dicard_all_messages</code> contained two paths that could lead to <code>head.block</code> being read but only one of them would swap the value. This meant that <code>dicard_all_messages</code> could end up observing a non-null block pointer (and therefore attempting to free it) without setting <code>head.block</code> to null. This would then lead to <code>Channel::drop</code> making a second attempt at dropping the same pointer.</p>\n</blockquote>\n<p>The bug was introduced while fixing a memory leak, in\nupstream <a href=\"https://github.com/crossbeam-rs/crossbeam/pull/1084\">MR #1084</a>,\nfirst published in 0.5.12.</p>\n<p>The fix is in\nupstream <a href=\"https://github.com/crossbeam-rs/crossbeam/pull/1187\">MR #1187</a>\nand has been published in 0.5.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/crossbeam-rs/crossbeam/pull/1187\">https://github.com/crossbeam-rs/crossbeam/pull/1187</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0024.html\">https://rustsec.org/advisories/RUSTSEC-2025-0024.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pg9f-39pc-qf8g\">https://github.com/advisories/GHSA-pg9f-39pc-qf8g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pg9f-39pc-qf8g",
            "title": "[crossbeam-channel] crossbeam-channel Vulnerable to Double Free on Drop",
            "date_modified": "2025-04-10T14:30:40.000Z",
            "date_published": "2025-04-10T14:30:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pg9f-39pc-qf8g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Name: ISA-2025-003: Malicious validator can spoof votes from other validators \nComponent: tendermint-rs\nCriticality: High (Catastrophic Impact; Rare Likelihood per <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>)\nAffected versions: &lt;= v0.40.2\nAffected users: Everyone</p>\n<h3 id=\"description\">Description</h3>\n<p>tendermint-rs contains a critical vulnerability in its light client implementation due to insecure handling of corrupted validator sets. Because it doesn't check that the validator address is correctly derived from the validator's public key when counting votes, it is possible to spoof votes from other validators. The result is being able to construct the malicious block and cheat the light client. The light client will accept such a block, seemingly signed by 2/3+ majority.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The new tendermint-rs release <a href=\"https://github.com/informalsystems/tendermint-rs/releases/tag/v0.40.3\">v0.40.3</a> fixes this issue.</p>\n<p>Unreleased code in the main branch is patched as well.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue.</p>\n<h3 id=\"timeline\">Timeline</h3>\n<ul>\n<li>March 12, 2025, 13:41pm PST: Issue reported</li>\n<li>March 12, 2025, 03:00am PST: Core team completes validation of issue</li>\n</ul>\n<p>This issue was reported by Felix Wilhelm from <a href=\"https://www.asymmetric.re/\">Asymmetric Research</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/informalsystems/tendermint-rs/security/advisories/GHSA-6jrf-4jv4-r9mw\">https://github.com/informalsystems/tendermint-rs/security/advisories/GHSA-6jrf-4jv4-r9mw</a></li>\n<li><a href=\"https://github.com/informalsystems/tendermint-rs/commit/1aabcfe6a3c0678db22097543f7f7a662f0db34b\">https://github.com/informalsystems/tendermint-rs/commit/1aabcfe6a3c0678db22097543f7f7a662f0db34b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6jrf-4jv4-r9mw\">https://github.com/advisories/GHSA-6jrf-4jv4-r9mw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6jrf-4jv4-r9mw",
            "title": "[tendermint-light-client-verifier] tendermint-rs's Light Client Verifier allows malicious validators to spoof votes from other validators ",
            "date_modified": "2025-04-09T13:01:27.000Z",
            "date_published": "2025-04-09T13:01:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6jrf-4jv4-r9mw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An improper uploaded media ownership check can result in inadvertent deletion of media when a user is banned with content removal or purged. This can lead to deletion of media that was not uploaded by the banned/purged user. This also applies to purged communities, in which case all media posted in that community will get deleted without proper ownership check.\nThis is limited to media with an <code>image/*</code> content-type returned by pict-rs.</p>\n<h3 id=\"details\">Details</h3>\n<p>Lemmy did not associate users with media uploads until version 0.19.0 (<a href=\"https://github.com/LemmyNet/lemmy/pull/3927\">#3927</a>).\nBack when the first parts of content purging were implemented for 0.17.0 (<a href=\"https://github.com/LemmyNet/lemmy/pull/1809\">#1809</a>), it was therefore not possible to properly identify media belonging to a specific user for situations in which this data should get erased from pict-rs, Lemmy's media storage backend.</p>\n<p>Pict-rs deduplicates uploaded files transparently. As a result, it has two types of media deletion. A regular deletion will only remove the referenced alias, and if there are not other aliases pointing to the same file, the backing file will also be deleted. A purge on the other hand will delete all aliases pointing to the specified file, as well as the file itself.</p>\n<p>The logic implemented in 0.17.0 iterated over media URLs related to users and communities when purging them and purged them from pict-rs. This results in a full deletion of the backing media, even if either the same URL was the result of an upload by a different user, or the same media being uploaded by another user with a different alias.\nFor user purges, Lemmy iterated over all posts they created and applied this to all media referenced in post URLs and post thumbnails. For community purges, this applied to all posts within this community.</p>\n<p>Additionally, the deletion of user avatars, banners, as well as the media from all their posts was implemented when users were banned with content removal. This includes local bans and also bans received via federation, when a user gets banned on their home instance.</p>\n<p>The function for purging images from pict-rs performs a check at the start to verify that the media <code>Content-Type</code> header returned by pict-rs starts with <code>image/</code>, which limits this to not affect other media types supported by Lemmy and pict-rs, such as videos.</p>\n<h3 id=\"impact\">Impact</h3>\n<h4 id=\"instances-with-open-federation\">Instances with open federation</h4>\n<p>The vast majority of Lemmy instances has open federation, which means that this can be exploited remotely without any authentication.</p>\n<h4 id=\"instances-with-limited-or-no-federation\">Instances with limited or no federation</h4>\n<p>Exploitation requires user interaction by an admin of the targeted instance or a federation-linked instance if federation is enabled.\nIt may also require authentication, as instances may not have open registrations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/LemmyNet/lemmy/security/advisories/GHSA-wr2m-38xh-rpc9\">https://github.com/LemmyNet/lemmy/security/advisories/GHSA-wr2m-38xh-rpc9</a></li>\n<li><a href=\"https://github.com/LemmyNet/lemmy/pull/1809\">https://github.com/LemmyNet/lemmy/pull/1809</a></li>\n<li><a href=\"https://github.com/LemmyNet/lemmy/pull/3927\">https://github.com/LemmyNet/lemmy/pull/3927</a></li>\n<li><a href=\"https://github.com/LemmyNet/lemmy/pull/5566\">https://github.com/LemmyNet/lemmy/pull/5566</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wr2m-38xh-rpc9\">https://github.com/advisories/GHSA-wr2m-38xh-rpc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wr2m-38xh-rpc9",
            "title": "[lemmy_server] Lemmy user purging users or communities or banning users can delete images they didn't upload/exclusively use",
            "date_modified": "2025-04-08T17:39:00.000Z",
            "date_published": "2025-04-08T17:38:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wr2m-38xh-rpc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The broadcast channel internally calls <code>clone</code> on the stored value when receiving it, and only requires <code>T:Send</code>. This means that using the broadcast channel with values that are <code>Send</code> but not <code>Sync</code> can trigger unsoundness if the <code>clone</code> implementation makes use of the value being <code>!Sync</code>.</p>\n<p>Thank you to Austin Bonander for finding and reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/pull/7232\">https://github.com/tokio-rs/tokio/pull/7232</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio\">https://github.com/tokio-rs/tokio</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0023.html\">https://rustsec.org/advisories/RUSTSEC-2025-0023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rr8g-9fpq-6wmg\">https://github.com/advisories/GHSA-rr8g-9fpq-6wmg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rr8g-9fpq-6wmg",
            "title": "[tokio] Tokio broadcast channel calls clone in parallel, but does not require `Sync`",
            "date_modified": "2025-04-07T21:12:51.000Z",
            "date_published": "2025-04-07T21:12:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rr8g-9fpq-6wmg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The broadcast channel internally calls <code>clone</code> on the stored value when receiving it, and only requires <code>T:Send</code>. This means that using the broadcast channel with values that are <code>Send</code> but not <code>Sync</code> can trigger unsoundness if the <code>clone</code> implementation makes use of the value being <code>!Sync</code>.</p>\n<p>Thank you to Austin Bonander for finding and reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/pull/7232\">https://github.com/tokio-rs/tokio/pull/7232</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio\">https://github.com/tokio-rs/tokio</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0023.html\">https://rustsec.org/advisories/RUSTSEC-2025-0023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rr8g-9fpq-6wmg\">https://github.com/advisories/GHSA-rr8g-9fpq-6wmg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rr8g-9fpq-6wmg",
            "title": "[tokio] Tokio broadcast channel calls clone in parallel, but does not require `Sync`",
            "date_modified": "2025-04-07T21:12:51.000Z",
            "date_published": "2025-04-07T21:12:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rr8g-9fpq-6wmg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The broadcast channel internally calls <code>clone</code> on the stored value when receiving it, and only requires <code>T:Send</code>. This means that using the broadcast channel with values that are <code>Send</code> but not <code>Sync</code> can trigger unsoundness if the <code>clone</code> implementation makes use of the value being <code>!Sync</code>.</p>\n<p>Thank you to Austin Bonander for finding and reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/pull/7232\">https://github.com/tokio-rs/tokio/pull/7232</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio\">https://github.com/tokio-rs/tokio</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2025-0023.html\">https://rustsec.org/advisories/RUSTSEC-2025-0023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rr8g-9fpq-6wmg\">https://github.com/advisories/GHSA-rr8g-9fpq-6wmg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rr8g-9fpq-6wmg",
            "title": "[tokio] Tokio broadcast channel calls clone in parallel, but does not require `Sync`",
            "date_modified": "2025-04-07T21:12:51.000Z",
            "date_published": "2025-04-07T21:12:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rr8g-9fpq-6wmg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Compiler allowed queries with deeply nested and reused named fragments to be prohibitively expensive to validate. This could lead to excessive resource consumption and denial of service in applications.</p>\n<h2 id=\"details\">Details</h2>\n<p>Named fragments were being processed once per fragment spread in some cases during query validation, leading to exponential resource usage when deeply nested and reused fragments were involved.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>The validation logic has been updated to process each named fragment only once, preventing redundant traversal.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>apollo-compiler</code> version 1.27.0.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>No known direct workarounds exist.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query validation mechanisms.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/apollo-rs/security/advisories/GHSA-7mpv-9xg6-5r79\">https://github.com/apollographql/apollo-rs/security/advisories/GHSA-7mpv-9xg6-5r79</a></li>\n<li><a href=\"https://github.com/apollographql/apollo-rs/pull/952\">https://github.com/apollographql/apollo-rs/pull/952</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31496\">https://nvd.nist.gov/vuln/detail/CVE-2025-31496</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mpv-9xg6-5r79\">https://github.com/advisories/GHSA-7mpv-9xg6-5r79</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mpv-9xg6-5r79",
            "title": "[apollo-compiler] Apollo Compiler Named Fragment Processing Vulnerability",
            "date_modified": "2025-04-08T17:49:33.000Z",
            "date_published": "2025-04-07T19:09:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mpv-9xg6-5r79"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Router's usage of Apollo Compiler allowed queries with deeply nested and reused named fragments to be prohibitively expensive to validate. This could lead to excessive resource consumption and denial of service.</p>\n<h2 id=\"details\">Details</h2>\n<p>Named fragments were being processed once per fragment spread in some cases during query validation, leading to exponential resource usage when deeply nested and reused fragments were involved.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>Apollo Router's usage of Apollo Compiler has been updated so that validation logic processes each named fragment only once, preventing redundant traversal.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>apollo-router</code> versions 1.61.2 and 2.1.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>The only known workaround is \"Safelisting with IDs only\" per <a href=\"https://www.apollographql.com/docs/graphos/routing/security/persisted-queries#router-security-levels\">Safelisting with Persisted Queries - Apollo GraphQL Docs</a>. The \"Safelisting\" security level is not sufficient, since that level allows freeform GraphQL queries to be sent to Apollo Router.</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.apollographql.com/docs/graphos/reference/federation/query-plans\">Query Planning Documentation</a></p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query validation mechanisms.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/router/security/advisories/GHSA-3j43-9v8v-cp3f\">https://github.com/apollographql/router/security/advisories/GHSA-3j43-9v8v-cp3f</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564\">https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952\">https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32380\">https://nvd.nist.gov/vuln/detail/CVE-2025-32380</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3j43-9v8v-cp3f\">https://github.com/advisories/GHSA-3j43-9v8v-cp3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3j43-9v8v-cp3f",
            "title": "[apollo-router] Apollo Router Query Validation Vulnerable to Excessive Resource Consumption via Named Fragment Processing",
            "date_modified": "2025-04-09T19:53:50.000Z",
            "date_published": "2025-04-07T19:00:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3j43-9v8v-cp3f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Router's usage of Apollo Compiler allowed queries with deeply nested and reused named fragments to be prohibitively expensive to validate. This could lead to excessive resource consumption and denial of service.</p>\n<h2 id=\"details\">Details</h2>\n<p>Named fragments were being processed once per fragment spread in some cases during query validation, leading to exponential resource usage when deeply nested and reused fragments were involved.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>Apollo Router's usage of Apollo Compiler has been updated so that validation logic processes each named fragment only once, preventing redundant traversal.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>apollo-router</code> versions 1.61.2 and 2.1.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>The only known workaround is \"Safelisting with IDs only\" per <a href=\"https://www.apollographql.com/docs/graphos/routing/security/persisted-queries#router-security-levels\">Safelisting with Persisted Queries - Apollo GraphQL Docs</a>. The \"Safelisting\" security level is not sufficient, since that level allows freeform GraphQL queries to be sent to Apollo Router.</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.apollographql.com/docs/graphos/reference/federation/query-plans\">Query Planning Documentation</a></p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query validation mechanisms.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/router/security/advisories/GHSA-3j43-9v8v-cp3f\">https://github.com/apollographql/router/security/advisories/GHSA-3j43-9v8v-cp3f</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564\">https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952\">https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32380\">https://nvd.nist.gov/vuln/detail/CVE-2025-32380</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3j43-9v8v-cp3f\">https://github.com/advisories/GHSA-3j43-9v8v-cp3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3j43-9v8v-cp3f",
            "title": "[apollo-router] Apollo Router Query Validation Vulnerable to Excessive Resource Consumption via Named Fragment Processing",
            "date_modified": "2025-04-09T19:53:50.000Z",
            "date_published": "2025-04-07T19:00:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3j43-9v8v-cp3f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Router allowed certain queries to bypass configured operation limits, specifically due to integer overflow.</p>\n<h2 id=\"details\">Details</h2>\n<p>The operation limits plugin uses unsigned 32-bit integers to track limit counters (e.g. for a query's height). If a counter exceeded the maximum value for this data type (4,294,967,295), it wrapped around to 0, unintentionally allowing queries to bypass configured thresholds. This could occur for large queries if the payload limit were sufficiently increased, but could also occur for small queries with deeply nested and reused named fragments.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>Logic was updated to ensure counter overflow is handled correctly and does not wrap around to 0.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>apollo-router</code> versions 1.61.2 and 2.1.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>The only known workaround is \"Safelisting\" or \"Safelisting with IDs only\" per <a href=\"https://www.apollographql.com/docs/graphos/routing/security/persisted-queries#router-security-levels\">Safelisting with Persisted Queries - Apollo GraphQL Docs</a>.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of operation limiting mechanisms.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/router/security/advisories/GHSA-84m6-5m72-45fp\">https://github.com/apollographql/router/security/advisories/GHSA-84m6-5m72-45fp</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564\">https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952\">https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32033\">https://nvd.nist.gov/vuln/detail/CVE-2025-32033</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-84m6-5m72-45fp\">https://github.com/advisories/GHSA-84m6-5m72-45fp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-84m6-5m72-45fp",
            "title": "[apollo-router] Apollo Router Operation Limits Vulnerable to Bypass via Integer Overflow",
            "date_modified": "2025-04-08T17:51:04.000Z",
            "date_published": "2025-04-07T18:59:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-84m6-5m72-45fp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Router allowed certain queries to bypass configured operation limits, specifically due to integer overflow.</p>\n<h2 id=\"details\">Details</h2>\n<p>The operation limits plugin uses unsigned 32-bit integers to track limit counters (e.g. for a query's height). If a counter exceeded the maximum value for this data type (4,294,967,295), it wrapped around to 0, unintentionally allowing queries to bypass configured thresholds. This could occur for large queries if the payload limit were sufficiently increased, but could also occur for small queries with deeply nested and reused named fragments.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>Logic was updated to ensure counter overflow is handled correctly and does not wrap around to 0.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>apollo-router</code> versions 1.61.2 and 2.1.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>The only known workaround is \"Safelisting\" or \"Safelisting with IDs only\" per <a href=\"https://www.apollographql.com/docs/graphos/routing/security/persisted-queries#router-security-levels\">Safelisting with Persisted Queries - Apollo GraphQL Docs</a>.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of operation limiting mechanisms.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/router/security/advisories/GHSA-84m6-5m72-45fp\">https://github.com/apollographql/router/security/advisories/GHSA-84m6-5m72-45fp</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564\">https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952\">https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32033\">https://nvd.nist.gov/vuln/detail/CVE-2025-32033</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-84m6-5m72-45fp\">https://github.com/advisories/GHSA-84m6-5m72-45fp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-84m6-5m72-45fp",
            "title": "[apollo-router] Apollo Router Operation Limits Vulnerable to Bypass via Integer Overflow",
            "date_modified": "2025-04-08T17:51:04.000Z",
            "date_published": "2025-04-07T18:59:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-84m6-5m72-45fp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in Apollo Router allowed queries with deeply nested and reused named fragments to be prohibitively expensive to query plan, specifically during named fragment expansion. This could lead to excessive resource consumption and denial of service.</p>\n<h2 id=\"details\">Details</h2>\n<p>Named fragments were being expanded once per fragment spread during query planning, leading to exponential resource usage when deeply nested and reused fragments were involved.</p>\n<h2 id=\"fixmitigation\">Fix/Mitigation</h2>\n<p>A new <strong>Query Fragment Expansion Limit</strong> metric has been introduced:</p>\n<ul>\n<li>This metric computes the number of selections a query would have if its fragment spreads were fully expanded.</li>\n<li>The metric is checked against a limit to prevent excessive computation.</li>\n</ul>\n<h1 id=\"patches\">Patches</h1>\n<p>This has been remediated in <code>apollo-router</code> versions 1.61.2 and 2.1.1.</p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>The only known workaround is \"Safelisting\" or \"Safelisting with IDs only\" per <a href=\"https://www.apollographql.com/docs/graphos/routing/security/persisted-queries#router-security-levels\">Safelisting with Persisted Queries - Apollo GraphQL Docs</a>.</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.apollographql.com/docs/graphos/reference/federation/query-plans\">Query Planning Documentation</a></p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query planning mechanisms.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/router/security/advisories/GHSA-75m2-jhh5-j5g2\">https://github.com/apollographql/router/security/advisories/GHSA-75m2-jhh5-j5g2</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564\">https://github.com/apollographql/router/commit/ab6675a63174715ea6ff50881fc957831d4e9564</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952\">https://github.com/apollographql/router/commit/bba032e183b861348a466d3123c7137a1ae18952</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32034\">https://nvd.nist.gov/vuln/detail/CVE-2025-32034</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-75m2-jhh5-j5g2\">https://github.com/advisories/GHSA-75m2-jhh5-j5g2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-75m2-jhh5-j5g2",
            "title": "[apollo-router] Apollo Router Query Planner Vulnerable to Excessive Resource Consumption via Named Fragment Expansion",
            "date_modified": "2025-04-08T17:51:03.000Z",
            "date_published": "2025-04-07T18:57:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-75m2-jhh5-j5g2"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}