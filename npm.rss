<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-02-21T18:01:29.493Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@rpldy/uploader] @rpldy/uploader prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-pc47-g7gv-4gpw</id>
        <link href="https://github.com/advisories/GHSA-pc47-g7gv-4gpw"/>
        <updated>2025-02-21T15:18:11.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.createUploader function of @rpldy/uploader v1.8.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57082">https://nvd.nist.gov/vuln/detail/CVE-2024-57082</a></li>
<li><a href="https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315">https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315</a></li>
<li><a href="https://github.com/rpldy/react-uploady/commit/386e0a80c428eb988e89fd2acf9bb0b786ac8028">https://github.com/rpldy/react-uploady/commit/386e0a80c428eb988e89fd2acf9bb0b786ac8028</a></li>
<li><a href="https://github.com/rpldy/react-uploady/releases/tag/v1.9.1">https://github.com/rpldy/react-uploady/releases/tag/v1.9.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pc47-g7gv-4gpw">https://github.com/advisories/GHSA-pc47-g7gv-4gpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pc47-g7gv-4gpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tanstack/form-core] @tanstack/form-core prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</id>
        <link href="https://github.com/advisories/GHSA-ggv3-vmgw-xv2q"/>
        <updated>2025-02-20T22:59:33.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.mutateMergeDeep function of @tanstack/form-core v0.35.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57068">https://nvd.nist.gov/vuln/detail/CVE-2024-57068</a></li>
<li><a href="https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533">https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533</a></li>
<li><a href="https://github.com/TanStack/form/pull/1151">https://github.com/TanStack/form/pull/1151</a></li>
<li><a href="https://github.com/TanStack/form/commit/455522c8f3272787668f3d1afd6adbc6dc1b9e8a">https://github.com/TanStack/form/commit/455522c8f3272787668f3d1afd6adbc6dc1b9e8a</a></li>
<li><a href="https://github.com/advisories/GHSA-ggv3-vmgw-xv2q">https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[docsgpt] DocsGPT Allows Remote Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-9gff-5v8w-x922</id>
        <link href="https://github.com/advisories/GHSA-9gff-5v8w-x922"/>
        <updated>2025-02-20T20:18:37.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, that could result in Remote Code Execution (RCE), has been found in DocsGPT. Due to improper parsing of JSON data using eval() an unauthorized attacker could send arbitrary Python code to be executed via /api/remote endpoint.</p>
<p>This issue affects DocsGPT: from 0.8.1 through 0.12.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0868">https://nvd.nist.gov/vuln/detail/CVE-2025-0868</a></li>
<li><a href="https://cert.pl/en/posts/2025/02/CVE-2025-0868">https://cert.pl/en/posts/2025/02/CVE-2025-0868</a></li>
<li><a href="https://cert.pl/posts/2025/02/CVE-2025-0868">https://cert.pl/posts/2025/02/CVE-2025-0868</a></li>
<li><a href="https://github.com/arc53/DocsGPT">https://github.com/arc53/DocsGPT</a></li>
<li><a href="https://github.com/advisories/GHSA-9gff-5v8w-x922">https://github.com/advisories/GHSA-9gff-5v8w-x922</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gff-5v8w-x922</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-20T12:31:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor5-premium-features] Cross-site scripting (XSS) in the CKEditor 5 real-time collaboration package]]></title>
        <id>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</id>
        <link href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh"/>
        <updated>2025-02-20T22:53:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>During a recent internal audit, we identified a Cross-Site Scripting (XSS) vulnerability in the CKEditor 5 real-time collaboration package. This vulnerability can lead to unauthorized JavaScript code execution and affects user markers, which represent users' positions within the document.</p>
<p>This vulnerability affects only installations with <a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">Real-time collaborative editing</a> enabled.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been recognized and patched. The fix will be available in version 44.2.1 (and above).</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@cksource.com">security@cksource.com</a> if you have any questions or comments about this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25299">https://nvd.nist.gov/vuln/detail/CVE-2025-25299</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html</a></li>
<li><a href="https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1">https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-20T20:16:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ckeditor/ckeditor5-real-time-collaboration] Cross-site scripting (XSS) in the CKEditor 5 real-time collaboration package]]></title>
        <id>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</id>
        <link href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh"/>
        <updated>2025-02-20T22:53:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>During a recent internal audit, we identified a Cross-Site Scripting (XSS) vulnerability in the CKEditor 5 real-time collaboration package. This vulnerability can lead to unauthorized JavaScript code execution and affects user markers, which represent users' positions within the document.</p>
<p>This vulnerability affects only installations with <a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">Real-time collaborative editing</a> enabled.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been recognized and patched. The fix will be available in version 44.2.1 (and above).</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@cksource.com">security@cksource.com</a> if you have any questions or comments about this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25299">https://nvd.nist.gov/vuln/detail/CVE-2025-25299</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html</a></li>
<li><a href="https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1">https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-20T20:16:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Directus allows updates to non-allowed fields due to overlapping policies]]></title>
        <id>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</id>
        <link href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6"/>
        <updated>2025-02-19T19:59:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If there are two overlapping policies for the <code>update</code> action that allow access to different fields, instead of correctly checking access permissions against the item they apply for the user is allowed to update the superset of fields allowed by any of the policies. </p>
<p>E.g. have one policy allowing update access to <code>field_a</code> if the <code>id == 1</code> and one policy allowing update access to <code>field_b</code> if the <code>id == 2</code>. The user with both these policies is allowed to update both <code>field_a</code> and <code>field_b</code> for the items with ids <code>1</code> and <code>2</code>. </p>
<h3 id="details">Details</h3>
<p>Before v11, if a user was allowed to update an item they were allowed to update the fields that the single permission, that applied to that item, listed. With overlapping permissions this isn't as clear cut anymore and the union of fields might not be the fields the user is allowed to update for that specific item.</p>
<p>The solution that this PR introduces is to evaluate the permissions for each field that the user tries to update in the validateItemAccess DB query, instead of only verifying access to the item as a whole. This is done by, instead of returning the actual field value, returning a flag that indicates if the user has access to that field. This uses the same case/when mechanism that is used for stripping out non permitted field that is at the core of the permissions engine.</p>
<p>As a result, for every item that the access is validated for, the expected result is an item that has either 1 or null for all the "requested" fields instead of any of the actual field values. These results are not useful for anything other than verifying the field level access permissions.</p>
<p>The final check in validateItemAccess can either fail if the number of items does not match the number of items the access is checked for (ie. the user does not have access to the item at all) or if not all of the passed in fields have access permissions for any of the returned items.</p>
<h3 id="impact">Impact</h3>
<p>This is a vulnerability that allows update access to unintended fields, potentially impacting the password field for user accounts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6</a></li>
<li><a href="https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2">https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27089">https://nvd.nist.gov/vuln/detail/CVE-2025-27089</a></li>
<li><a href="https://github.com/directus/directus/releases/tag/v11.1.2">https://github.com/directus/directus/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/advisories/GHSA-99vm-5v2h-h6r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-19T17:46:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus allows updates to non-allowed fields due to overlapping policies]]></title>
        <id>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</id>
        <link href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6"/>
        <updated>2025-02-19T19:59:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If there are two overlapping policies for the <code>update</code> action that allow access to different fields, instead of correctly checking access permissions against the item they apply for the user is allowed to update the superset of fields allowed by any of the policies. </p>
<p>E.g. have one policy allowing update access to <code>field_a</code> if the <code>id == 1</code> and one policy allowing update access to <code>field_b</code> if the <code>id == 2</code>. The user with both these policies is allowed to update both <code>field_a</code> and <code>field_b</code> for the items with ids <code>1</code> and <code>2</code>. </p>
<h3 id="details">Details</h3>
<p>Before v11, if a user was allowed to update an item they were allowed to update the fields that the single permission, that applied to that item, listed. With overlapping permissions this isn't as clear cut anymore and the union of fields might not be the fields the user is allowed to update for that specific item.</p>
<p>The solution that this PR introduces is to evaluate the permissions for each field that the user tries to update in the validateItemAccess DB query, instead of only verifying access to the item as a whole. This is done by, instead of returning the actual field value, returning a flag that indicates if the user has access to that field. This uses the same case/when mechanism that is used for stripping out non permitted field that is at the core of the permissions engine.</p>
<p>As a result, for every item that the access is validated for, the expected result is an item that has either 1 or null for all the "requested" fields instead of any of the actual field values. These results are not useful for anything other than verifying the field level access permissions.</p>
<p>The final check in validateItemAccess can either fail if the number of items does not match the number of items the access is checked for (ie. the user does not have access to the item at all) or if not all of the passed in fields have access permissions for any of the returned items.</p>
<h3 id="impact">Impact</h3>
<p>This is a vulnerability that allows update access to unintended fields, potentially impacting the password field for user accounts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6</a></li>
<li><a href="https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2">https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27089">https://nvd.nist.gov/vuln/detail/CVE-2025-27089</a></li>
<li><a href="https://github.com/directus/directus/releases/tag/v11.1.2">https://github.com/directus/directus/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/advisories/GHSA-99vm-5v2h-h6r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-19T17:46:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jsonpath-plus] JSONPath Plus allows Remote Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</id>
        <link href="https://github.com/advisories/GHSA-hw8r-x6gr-5gjp"/>
        <updated>2025-02-18T19:25:35.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package jsonpath-plus before 10.3.0 are vulnerable to Remote Code Execution (RCE) due to improper input sanitization. An attacker can execute aribitrary code on the system by exploiting the unsafe default usage of eval='safe' mode.</p>
<p><strong>Note:</strong></p>
<p>This is caused by an incomplete fix for CVE-2024-21534.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1302">https://nvd.nist.gov/vuln/detail/CVE-2025-1302</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/30942896d27cb8a806b965a5ca9ef9f686be24ee">https://github.com/JSONPath-Plus/JSONPath/commit/30942896d27cb8a806b965a5ca9ef9f686be24ee</a></li>
<li><a href="https://gist.github.com/nickcopi/11ba3cb4fdee6f89e02e6afae8db6456">https://gist.github.com/nickcopi/11ba3cb4fdee6f89e02e6afae8db6456</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-8719585">https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-8719585</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21534">https://nvd.nist.gov/vuln/detail/CVE-2024-21534</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/blob/8e4acf8aff5f446aa66323e12394ac5615c3b260/src/Safe-Script.js#L127">https://github.com/JSONPath-Plus/JSONPath/blob/8e4acf8aff5f446aa66323e12394ac5615c3b260/src/Safe-Script.js#L127</a></li>
<li><a href="https://github.com/advisories/GHSA-hw8r-x6gr-5gjp">https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-15T06:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request] @octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</id>
        <link href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38"/>
        <updated>2025-02-18T19:17:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code> used to match the <code>link</code> header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious <code>link</code> header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.</p>
<h3 id="details">Details</h3>
<p>The vulnerability resides in the regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code>, which is used to match the <code>link</code> header in HTTP responses. This regular expression captures content between angle brackets (<code>&lt;&gt;</code>) followed by <code>; rel="deprecation"</code>. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.
An attacker can exploit this vulnerability by sending a specially crafted <code>link</code> header designed to trigger excessive backtracking. For example, the following headers:</p>
<pre><code class="language-js">fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
fakeHeaders.set("deprecation", "true");
</code></pre>
<p>The crafted <code>link</code> header consists of 100,000 consecutive <code>&lt;</code> characters followed by a closing <code>&gt;</code>. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.
The issue is present in the following code:</p>
<pre><code class="language-js">const matches = responseHeaders.link &amp;&amp; responseHeaders.link.match(/&lt;([^&gt;]+)&gt;; rel="deprecation"/);
</code></pre>
<p>In this scenario, the <code>link</code> header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { request } from "@octokit/request";
const originalFetch = globalThis.fetch;
globalThis.fetch = async (url, options) =&gt; {
  const response = await originalFetch(url, options);
  const fakeHeaders = new Headers(response.headers);
  fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
  fakeHeaders.set("deprecation", "true");
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers: fakeHeaders
  });
};
request("GET /repos/octocat/hello-world")
  .then(response =&gt; {
    // console.log("[+] Response received:", response);
  })
  .catch(error =&gt; {
    // console.error("[-] Error:", error);
  });
// globalThis.fetch = originalFetch;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a <em>Denial of Service (DoS) vulnerability</em> caused by a <em>ReDoS (Regular Expression Denial of Service)</em> flaw. The vulnerability allows an attacker to craft a malicious <code>link</code> header that exploits the inefficient backtracking behavior of the regular expression used in the code.
The primary impact is the potential for <em>server resource exhaustion</em>, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.
The vulnerability impacts any system that uses this specific regular expression to process <code>link</code> headers in HTTP responses. This can include:</p>
<ul>
<li>Web applications or APIs that rely on parsing headers for deprecation information.</li>
<li>Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.</li>
<li>Service providers who may face disruption in operations or performance degradation due to this flaw.
If left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious <code>link</code> header, making it a low-barrier attack that could be exploited by anyone.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38</a></li>
<li><a href="https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68">https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25290">https://nvd.nist.gov/vuln/detail/CVE-2025-25290</a></li>
<li><a href="https://github.com/octokit/request.js/releases/tag/v8.4.1">https://github.com/octokit/request.js/releases/tag/v8.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/advisories/GHSA-rmvr-2pp2-xj38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T18:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request] @octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</id>
        <link href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38"/>
        <updated>2025-02-18T19:17:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code> used to match the <code>link</code> header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious <code>link</code> header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.</p>
<h3 id="details">Details</h3>
<p>The vulnerability resides in the regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code>, which is used to match the <code>link</code> header in HTTP responses. This regular expression captures content between angle brackets (<code>&lt;&gt;</code>) followed by <code>; rel="deprecation"</code>. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.
An attacker can exploit this vulnerability by sending a specially crafted <code>link</code> header designed to trigger excessive backtracking. For example, the following headers:</p>
<pre><code class="language-js">fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
fakeHeaders.set("deprecation", "true");
</code></pre>
<p>The crafted <code>link</code> header consists of 100,000 consecutive <code>&lt;</code> characters followed by a closing <code>&gt;</code>. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.
The issue is present in the following code:</p>
<pre><code class="language-js">const matches = responseHeaders.link &amp;&amp; responseHeaders.link.match(/&lt;([^&gt;]+)&gt;; rel="deprecation"/);
</code></pre>
<p>In this scenario, the <code>link</code> header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { request } from "@octokit/request";
const originalFetch = globalThis.fetch;
globalThis.fetch = async (url, options) =&gt; {
  const response = await originalFetch(url, options);
  const fakeHeaders = new Headers(response.headers);
  fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
  fakeHeaders.set("deprecation", "true");
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers: fakeHeaders
  });
};
request("GET /repos/octocat/hello-world")
  .then(response =&gt; {
    // console.log("[+] Response received:", response);
  })
  .catch(error =&gt; {
    // console.error("[-] Error:", error);
  });
// globalThis.fetch = originalFetch;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a <em>Denial of Service (DoS) vulnerability</em> caused by a <em>ReDoS (Regular Expression Denial of Service)</em> flaw. The vulnerability allows an attacker to craft a malicious <code>link</code> header that exploits the inefficient backtracking behavior of the regular expression used in the code.
The primary impact is the potential for <em>server resource exhaustion</em>, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.
The vulnerability impacts any system that uses this specific regular expression to process <code>link</code> headers in HTTP responses. This can include:</p>
<ul>
<li>Web applications or APIs that rely on parsing headers for deprecation information.</li>
<li>Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.</li>
<li>Service providers who may face disruption in operations or performance degradation due to this flaw.
If left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious <code>link</code> header, making it a low-barrier attack that could be exploited by anyone.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38</a></li>
<li><a href="https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68">https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25290">https://nvd.nist.gov/vuln/detail/CVE-2025-25290</a></li>
<li><a href="https://github.com/octokit/request.js/releases/tag/v8.4.1">https://github.com/octokit/request.js/releases/tag/v8.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/advisories/GHSA-rmvr-2pp2-xj38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T18:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/plugin-paginate-rest] @octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</id>
        <link href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q"/>
        <updated>2025-02-18T19:15:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>For the npm package <code>@octokit/plugin-paginate-rest</code>, when calling <code>octokit.paginate.iterator()</code>, a specially crafted <code>octokit</code> instance—particularly with a malicious <code>link</code> parameter in the <code>headers</code> section of the <code>request</code>—can trigger a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">line 39</a> of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:</p>
<pre><code class="language-js">url = ((normalizedResponse.headers.link || "").match(
  /&lt;([^&gt;]+)&gt;;\s*rel="next"/,
) || [])[1];
</code></pre>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;;\s*rel="next"/</code> may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted <code>Link</code> headers.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/plugin-paginate-rest</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { Octokit } from "@octokit/core";
import { paginateRest } from "@octokit/plugin-paginate-rest";

const MyOctokit = Octokit.plugin(paginateRest);
const octokit = new MyOctokit({
  auth: "your-github-token",
});

// Intercept the request to inject a malicious 'link' header for ReDoS
octokit.hook.wrap("request", async (request, options) =&gt; {
  const maliciousLinkHeader = "" + "&lt;".repeat(100000) + "&gt;"; // attack string
  return {
    data: [],
    headers: {
      link: maliciousLinkHeader, // Inject malicious 'link' header
    },
  };
});

// Trigger the ReDoS attack by paginating through GitHub issues
(async () =&gt; {
  try {
    for await (const normalizedResponse of octokit.paginate.iterator(
      "GET /repos/{owner}/{repo}/issues", { owner: "DayShift", repo: "ReDos", per_page: 100 }
    )) {
      console.log({ normalizedResponse });
    }
  } catch (error) {
    console.error("Error encountered:", error);
  }
})();
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b"></p>
<h3 id="impact">Impact</h3>
<h4 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h4>
<p>This is a <em>Regular Expression Denial of Service (ReDoS) vulnerability</em>, which occurs due to excessive backtracking in the regex pattern:</p>
<pre><code class="language-js">/&lt;([^&gt;]+)&gt;;\s*rel="next"/
</code></pre>
<p>When processing a specially crafted <code>Link</code> header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.</p>
<h4 id="who-is-impacted">Who is impacted?</h4>
<ul>
<li>Users of <code>@octokit/plugin-paginate-rest</code> who call <code>octokit.paginate.iterator()</code> and process untrusted or manipulated <code>Link</code> headers.</li>
<li>Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.</li>
<li>GitHub API consumers who integrate this package into their projects for paginated data retrieval.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab">https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25288">https://nvd.nist.gov/vuln/detail/CVE-2025-25288</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2">https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:57:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/plugin-paginate-rest] @octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</id>
        <link href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q"/>
        <updated>2025-02-18T19:15:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>For the npm package <code>@octokit/plugin-paginate-rest</code>, when calling <code>octokit.paginate.iterator()</code>, a specially crafted <code>octokit</code> instance—particularly with a malicious <code>link</code> parameter in the <code>headers</code> section of the <code>request</code>—can trigger a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">line 39</a> of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:</p>
<pre><code class="language-js">url = ((normalizedResponse.headers.link || "").match(
  /&lt;([^&gt;]+)&gt;;\s*rel="next"/,
) || [])[1];
</code></pre>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;;\s*rel="next"/</code> may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted <code>Link</code> headers.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/plugin-paginate-rest</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { Octokit } from "@octokit/core";
import { paginateRest } from "@octokit/plugin-paginate-rest";

const MyOctokit = Octokit.plugin(paginateRest);
const octokit = new MyOctokit({
  auth: "your-github-token",
});

// Intercept the request to inject a malicious 'link' header for ReDoS
octokit.hook.wrap("request", async (request, options) =&gt; {
  const maliciousLinkHeader = "" + "&lt;".repeat(100000) + "&gt;"; // attack string
  return {
    data: [],
    headers: {
      link: maliciousLinkHeader, // Inject malicious 'link' header
    },
  };
});

// Trigger the ReDoS attack by paginating through GitHub issues
(async () =&gt; {
  try {
    for await (const normalizedResponse of octokit.paginate.iterator(
      "GET /repos/{owner}/{repo}/issues", { owner: "DayShift", repo: "ReDos", per_page: 100 }
    )) {
      console.log({ normalizedResponse });
    }
  } catch (error) {
    console.error("Error encountered:", error);
  }
})();
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b"></p>
<h3 id="impact">Impact</h3>
<h4 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h4>
<p>This is a <em>Regular Expression Denial of Service (ReDoS) vulnerability</em>, which occurs due to excessive backtracking in the regex pattern:</p>
<pre><code class="language-js">/&lt;([^&gt;]+)&gt;;\s*rel="next"/
</code></pre>
<p>When processing a specially crafted <code>Link</code> header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.</p>
<h4 id="who-is-impacted">Who is impacted?</h4>
<ul>
<li>Users of <code>@octokit/plugin-paginate-rest</code> who call <code>octokit.paginate.iterator()</code> and process untrusted or manipulated <code>Link</code> headers.</li>
<li>Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.</li>
<li>GitHub API consumers who integrate this package into their projects for paginated data retrieval.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab">https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25288">https://nvd.nist.gov/vuln/detail/CVE-2025-25288</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2">https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:57:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request-error] @octokit/request-error has a Regular Expression in index that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-xx4v-prfh-6cgc</id>
        <link href="https://github.com/advisories/GHSA-xx4v-prfh-6cgc"/>
        <updated>2025-02-14T23:07:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the processing of HTTP request headers. By sending an authorization header containing an excessively long sequence of spaces followed by a newline and "@", an attacker can exploit inefficient regular expression processing, leading to excessive resource consumption. This can significantly degrade server performance or cause a denial-of-service (DoS) condition, impacting availability.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/request-error.js/blob/main/src/index.ts">line 52</a> of iterator.ts in the @octokit/request-error repository.
The vulnerability is caused by the use of an inefficient regular expression in the handling of the <code>authorization</code> header within the request processing logic:</p>
<pre><code class="language-js">authorization: options.request.headers.authorization.replace(
  / .*$/, 
  " [REDACTED]"
)
</code></pre>
<p>The regular expression <code>/ .*$/</code> matches a space followed by any number of characters until the end of the line. This pattern is vulnerable to Regular Expression Denial of Service (ReDoS) when processing specially crafted input. Specifically, an attacker can send an <code>authorization</code> header containing a long sequence of spaces followed by a newline and "@", such as:</p>
<pre><code class="language-js">headers: {
  authorization: "" + " ".repeat(100000) + "\n@",
}
</code></pre>
<p>Due to the way JavaScript's regular expression engine backtracks while attempting to match the space followed by arbitrary characters, this input can cause excessive CPU usage, significantly slowing down or even freezing the server. This leads to a denial-of-service condition, impacting availability.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/e1203ad22701fd043b8501eb37676a0d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request-error</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { RequestError } from "@octokit/request-error";

const error = new RequestError("Oops", 500, {
  request: {
    method: "POST",
    url: "https://api.github.com/foo",
    body: {
      bar: "baz",
    },
    headers: {
      authorization: ""+" ".repeat(100000)+"\n@",
    },
  },
  response: {
    status: 500,
    url: "https://api.github.com/foo",
    headers: {
      "x-github-request-id": "1:2:3:4",
    },
    data: {
      foo: "bar",
    },
  },
});
</code></pre>
<h3 id="impact">Impact</h3>
<h4 id="vulnerability-type--impact">Vulnerability Type &amp; Impact:</h4>
<p>This is a <code>Regular Expression Denial of Service (ReDoS) vulnerability</code>, which occurs due to an inefficient regular expression (<code>/ .*$/</code>) used to sanitize the <code>authorization</code> header. An attacker can craft a malicious input that triggers excessive backtracking in the regex engine, leading to high CPU consumption and potential denial-of-service (DoS).</p>
<h4 id="who-is-impacted">Who is Impacted?</h4>
<ul>
<li>Projects or services using this code to process HTTP headers are vulnerable.</li>
<li>Applications that rely on user-supplied <code>authorization</code> headers are at risk, especially those processing a large volume of authentication requests.</li>
<li>Multi-tenant or API-driven platforms could experience degraded performance or service outages if exploited at scale.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc">https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc</a></li>
<li><a href="https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e">https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25289">https://nvd.nist.gov/vuln/detail/CVE-2025-25289</a></li>
<li><a href="https://github.com/octokit/request-error.js/blob/main/src/index.ts">https://github.com/octokit/request-error.js/blob/main/src/index.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-xx4v-prfh-6cgc">https://github.com/advisories/GHSA-xx4v-prfh-6cgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx4v-prfh-6cgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:58:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request-error] @octokit/request-error has a Regular Expression in index that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-xx4v-prfh-6cgc</id>
        <link href="https://github.com/advisories/GHSA-xx4v-prfh-6cgc"/>
        <updated>2025-02-14T23:07:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the processing of HTTP request headers. By sending an authorization header containing an excessively long sequence of spaces followed by a newline and "@", an attacker can exploit inefficient regular expression processing, leading to excessive resource consumption. This can significantly degrade server performance or cause a denial-of-service (DoS) condition, impacting availability.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/request-error.js/blob/main/src/index.ts">line 52</a> of iterator.ts in the @octokit/request-error repository.
The vulnerability is caused by the use of an inefficient regular expression in the handling of the <code>authorization</code> header within the request processing logic:</p>
<pre><code class="language-js">authorization: options.request.headers.authorization.replace(
  / .*$/, 
  " [REDACTED]"
)
</code></pre>
<p>The regular expression <code>/ .*$/</code> matches a space followed by any number of characters until the end of the line. This pattern is vulnerable to Regular Expression Denial of Service (ReDoS) when processing specially crafted input. Specifically, an attacker can send an <code>authorization</code> header containing a long sequence of spaces followed by a newline and "@", such as:</p>
<pre><code class="language-js">headers: {
  authorization: "" + " ".repeat(100000) + "\n@",
}
</code></pre>
<p>Due to the way JavaScript's regular expression engine backtracks while attempting to match the space followed by arbitrary characters, this input can cause excessive CPU usage, significantly slowing down or even freezing the server. This leads to a denial-of-service condition, impacting availability.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/e1203ad22701fd043b8501eb37676a0d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request-error</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { RequestError } from "@octokit/request-error";

const error = new RequestError("Oops", 500, {
  request: {
    method: "POST",
    url: "https://api.github.com/foo",
    body: {
      bar: "baz",
    },
    headers: {
      authorization: ""+" ".repeat(100000)+"\n@",
    },
  },
  response: {
    status: 500,
    url: "https://api.github.com/foo",
    headers: {
      "x-github-request-id": "1:2:3:4",
    },
    data: {
      foo: "bar",
    },
  },
});
</code></pre>
<h3 id="impact">Impact</h3>
<h4 id="vulnerability-type--impact">Vulnerability Type &amp; Impact:</h4>
<p>This is a <code>Regular Expression Denial of Service (ReDoS) vulnerability</code>, which occurs due to an inefficient regular expression (<code>/ .*$/</code>) used to sanitize the <code>authorization</code> header. An attacker can craft a malicious input that triggers excessive backtracking in the regex engine, leading to high CPU consumption and potential denial-of-service (DoS).</p>
<h4 id="who-is-impacted">Who is Impacted?</h4>
<ul>
<li>Projects or services using this code to process HTTP headers are vulnerable.</li>
<li>Applications that rely on user-supplied <code>authorization</code> headers are at risk, especially those processing a large volume of authentication requests.</li>
<li>Multi-tenant or API-driven platforms could experience degraded performance or service outages if exploited at scale.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc">https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc</a></li>
<li><a href="https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e">https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25289">https://nvd.nist.gov/vuln/detail/CVE-2025-25289</a></li>
<li><a href="https://github.com/octokit/request-error.js/blob/main/src/index.ts">https://github.com/octokit/request-error.js/blob/main/src/index.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-xx4v-prfh-6cgc">https://github.com/advisories/GHSA-xx4v-prfh-6cgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx4v-prfh-6cgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:58:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/endpoint] @octokit/endpoint has a Regular Expression in parse that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</id>
        <link href="https://github.com/advisories/GHSA-x4c5-c7rf-jjgv"/>
        <updated>2025-02-14T22:19:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>By crafting specific <code>options</code> parameters, the <code>endpoint.parse(options)</code> call can be triggered, leading to a regular expression denial-of-service (ReDoS) attack. This causes the program to hang and results in high CPU utilization.</p>
<h3 id="details">Details</h3>
<p>The issue occurs in the <code>parse</code> function within the <code>parse.ts</code> file of the npm package <code>@octokit/endpoint</code>. The specific code is located at the following link: <a href="https://github.com/octokit/endpoint.js/blob/main/src/parse.ts">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>
<pre><code class="language-ts">headers.accept.match(/[\w-]+(?=-preview)/g) || ([] as string[]);
</code></pre>
<p>The regular expression <code>/[\w-]+(?=-preview)/g</code> encounters a backtracking issue when it processes <code>a large number of characters</code> followed by the <code>-</code> symbol.
e.g., the attack string: </p>
<pre><code class="language-js">"" + "A".repeat(100000) + "-"
</code></pre>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/a17202ac1ad403a80ca302466d5e56c4">The gist</a>
Here is the reproduction process for the vulnerability:</p>
<ol>
<li>run 'npm i @octokit/endpoint'</li>
<li>Move <code>poc.js</code> to the root directory of the same level as <code>README.md</code></li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { endpoint } from "@octokit/endpoint";
// import { parse } from "./node_modules/@octokit/endpoint/dist-src/parse.js";
const options = {  
  method: "POST",
  url: "/graphql", // Ensure that the URL ends with "/graphql"
  headers: {
    accept: "" + "A".repeat(100000) + "-", // Pass in the attack string
    "content-type": "text/plain",
  },
  mediaType: {
    previews: ["test-preview"], // Ensure that mediaType.previews exists and has values
    format: "raw", // Optional media format
  },
  baseUrl: "https://api.github.com",
};

const startTime = performance.now();
endpoint.parse(options);
const endTime = performance.now();
const duration = endTime - startTime;
console.log(`Endpoint execution time: ${duration} ms`);
</code></pre>
<ol>
<li><p><strong>Import the <code>endpoint</code> module</strong>: First, import the <code>endpoint</code> module from the npm package <code>@octokit/endpoint</code>, which is used for handling GitHub API requests.</p>
</li>
<li><p><strong>Construct the <code>options</code> object that triggers a ReDoS attack</strong>: The following member variables are critical in constructing the <code>options</code> object:</p>
</li>
</ol>
<ul>
<li><code>url</code>: Set to <code>"/graphql"</code>, ensuring the URL ends with <code>/graphql</code> to match the format for GitHub's GraphQL API.</li>
<li><code>headers</code>:<blockquote>
<p><code>accept</code>: A long attack string is crafted with <code>"A".repeat(100000) + "-"</code>, which will be passed to the regular expression and cause a backtracking attack (ReDoS).</p>
</blockquote>
</li>
<li><code>mediaType</code>:<blockquote>
<p><code>previews</code>: Set to <code>["test-preview"]</code>, ensuring <code>mediaType.previews</code> exists and has values.</p>
<p><code>format</code>: Set to <code>"raw"</code>, indicating raw data format.</p>
</blockquote>
</li>
</ul>
<ol start="3">
<li><p><strong>Call the <code>endpoint.parse(options)</code> function and record the time</strong>: Call the <code>endpoint.parse(options)</code> function and use <code>performance.now()</code> to record the start and end times, measuring the execution duration.</p>
</li>
<li><p><strong>Calculate the time difference and output it</strong>: Compute the difference between the start and end times and output it using <code>console.log</code>. When the attack string length reaches 100000, the response time typically exceeds 10000 milliseconds, satisfying the characteristic condition for a ReDoS attack, where response times dramatically increase.</p>
<img src="https://github.com/user-attachments/assets/9fc865a4-e150-42d5-bcd5-93ab6b0c29ef" alt="2" width="800"></li>
</ol>
<h3 id="impact">Impact</h3>
<h4 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h4>
<p>This is a <strong>Regular Expression Denial of Service (ReDoS)</strong> vulnerability. It arises from inefficient regular expressions that can cause excessive backtracking when processing certain inputs. Specifically, the regular expression <code>/[\w-]+(?=-preview)/g</code> is vulnerable because it attempts to match long strings of characters followed by a hyphen (<code>-</code>), which leads to inefficient backtracking when provided with specially crafted attack strings. This backtracking results in high CPU utilization, causing the application to become unresponsive and denying service to legitimate users.</p>
<h4 id="who-is-impacted">Who is impacted?</h4>
<p>This vulnerability impacts any application that uses the affected regular expression in conjunction with user-controlled inputs, particularly where large or maliciously crafted strings can trigger excessive backtracking.
In addition to directly affecting applications using the <code>@octokit/endpoint package</code>, the impact is more widespread because <code>@octokit/endpoint</code> is a library used to wrap REST APIs, including GitHub's API. This means that any system or service built on top of this library that interacts with GitHub or other REST APIs could be vulnerable. Given the extensive use of this package in API communication, the potential for exploitation is broad and serious. The vulnerability could affect a wide range of applications, from small integrations to large enterprise-level systems, especially those relying on the package to handle API requests.
Attackers can exploit this vulnerability to cause performance degradation, downtime, and service disruption, making it a critical issue for anyone using the affected version of <code>@octokit/endpoint</code>.</p>
<h3 id="solution">Solution</h3>
<p>To resolve the ReDoS vulnerability, the regular expression should be updated to avoid excessive backtracking. By modifying the regular expression to <code>(?&lt;![\w-])[\w-]+(?=-preview)</code>, we prevent the issue.
Here is how this change solves the problem:
Here is how this change solves the problem:</p>
<ol>
<li><strong>Old Regular Expression</strong>: <code>/[\w-]+(?=-preview)/g</code></li>
</ol>
<ul>
<li>This regular expression matches any sequence of word characters (<code>\w</code>) and hyphens (<code>-</code>) followed by <code>-preview</code>.</li>
<li>The issue arises when the regex engine encounters a long string of characters followed by a <code>-</code>, causing excessive backtracking and high CPU usage.</li>
</ul>
<ol start="2">
<li><strong>New Regular Expression</strong>: <code>(?&lt;![\w-])[\w-]+(?=-preview)</code></li>
</ol>
<ul>
<li>This updated regular expression uses a negative lookbehind <code>(?&lt;![\w-])</code>, ensuring that the matched string is not preceded by any word characters or hyphens (<code>\w</code> or <code>-</code>).</li>
<li>The new expression still matches sequences of word characters and hyphens, but the negative lookbehind ensures it doesn't cause backtracking issues when processing long attack strings.</li>
<li>By adding this lookbehind, we effectively prevent the vulnerability, ensuring the regex operates efficiently without excessive backtracking.</li>
</ul>
<h4 id="full-solution-example">Full Solution Example:</h4>
<p>The specific code is located at the following link: <a href="https://github.com/octokit/endpoint.js/blob/main/src/parse.ts">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>
<ol>
<li><strong>Update the Regular Expression</strong>: In the <code>parse.ts</code> file (or wherever the original regex is defined), replace the existing regular expression:</li>
</ol>
<pre><code class="language-ts">const previewsFromAcceptHeader =
          headers.accept.match(/[\w-]+(?=-preview)/g) || ([] as string[]);
</code></pre>
<p>With the updated one:</p>
<pre><code class="language-ts">const previewsFromAcceptHeader =
          headers.accept.match(/(?&lt;![\w-])[\w-]+(?=-preview)/g) || ([] as string[]);
</code></pre>
<ol start="2">
<li><strong>Test the Change</strong>: After updating the regular expression, thoroughly test the application with both regular and malicious inputs to ensure that:</li>
</ol>
<ul>
<li>The functionality remains correct and the expected matches still occur.</li>
<li>The performance improves and the ReDoS vulnerability no longer occurs when handling large attack strings.</li>
</ul>
<ol start="3">
<li><strong>Deploy the Fix</strong>: Once the solution is verified, deploy the fix to your production environment to protect against potential attacks.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv">https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv</a></li>
<li><a href="https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8">https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25285">https://nvd.nist.gov/vuln/detail/CVE-2025-25285</a></li>
<li><a href="https://github.com/octokit/endpoint.js/blob/main/src/parse.ts">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-x4c5-c7rf-jjgv">https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:56:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/endpoint] @octokit/endpoint has a Regular Expression in parse that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</id>
        <link href="https://github.com/advisories/GHSA-x4c5-c7rf-jjgv"/>
        <updated>2025-02-14T22:19:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>By crafting specific <code>options</code> parameters, the <code>endpoint.parse(options)</code> call can be triggered, leading to a regular expression denial-of-service (ReDoS) attack. This causes the program to hang and results in high CPU utilization.</p>
<h3 id="details">Details</h3>
<p>The issue occurs in the <code>parse</code> function within the <code>parse.ts</code> file of the npm package <code>@octokit/endpoint</code>. The specific code is located at the following link: <a href="https://github.com/octokit/endpoint.js/blob/main/src/parse.ts">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>
<pre><code class="language-ts">headers.accept.match(/[\w-]+(?=-preview)/g) || ([] as string[]);
</code></pre>
<p>The regular expression <code>/[\w-]+(?=-preview)/g</code> encounters a backtracking issue when it processes <code>a large number of characters</code> followed by the <code>-</code> symbol.
e.g., the attack string: </p>
<pre><code class="language-js">"" + "A".repeat(100000) + "-"
</code></pre>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/a17202ac1ad403a80ca302466d5e56c4">The gist</a>
Here is the reproduction process for the vulnerability:</p>
<ol>
<li>run 'npm i @octokit/endpoint'</li>
<li>Move <code>poc.js</code> to the root directory of the same level as <code>README.md</code></li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { endpoint } from "@octokit/endpoint";
// import { parse } from "./node_modules/@octokit/endpoint/dist-src/parse.js";
const options = {  
  method: "POST",
  url: "/graphql", // Ensure that the URL ends with "/graphql"
  headers: {
    accept: "" + "A".repeat(100000) + "-", // Pass in the attack string
    "content-type": "text/plain",
  },
  mediaType: {
    previews: ["test-preview"], // Ensure that mediaType.previews exists and has values
    format: "raw", // Optional media format
  },
  baseUrl: "https://api.github.com",
};

const startTime = performance.now();
endpoint.parse(options);
const endTime = performance.now();
const duration = endTime - startTime;
console.log(`Endpoint execution time: ${duration} ms`);
</code></pre>
<ol>
<li><p><strong>Import the <code>endpoint</code> module</strong>: First, import the <code>endpoint</code> module from the npm package <code>@octokit/endpoint</code>, which is used for handling GitHub API requests.</p>
</li>
<li><p><strong>Construct the <code>options</code> object that triggers a ReDoS attack</strong>: The following member variables are critical in constructing the <code>options</code> object:</p>
</li>
</ol>
<ul>
<li><code>url</code>: Set to <code>"/graphql"</code>, ensuring the URL ends with <code>/graphql</code> to match the format for GitHub's GraphQL API.</li>
<li><code>headers</code>:<blockquote>
<p><code>accept</code>: A long attack string is crafted with <code>"A".repeat(100000) + "-"</code>, which will be passed to the regular expression and cause a backtracking attack (ReDoS).</p>
</blockquote>
</li>
<li><code>mediaType</code>:<blockquote>
<p><code>previews</code>: Set to <code>["test-preview"]</code>, ensuring <code>mediaType.previews</code> exists and has values.</p>
<p><code>format</code>: Set to <code>"raw"</code>, indicating raw data format.</p>
</blockquote>
</li>
</ul>
<ol start="3">
<li><p><strong>Call the <code>endpoint.parse(options)</code> function and record the time</strong>: Call the <code>endpoint.parse(options)</code> function and use <code>performance.now()</code> to record the start and end times, measuring the execution duration.</p>
</li>
<li><p><strong>Calculate the time difference and output it</strong>: Compute the difference between the start and end times and output it using <code>console.log</code>. When the attack string length reaches 100000, the response time typically exceeds 10000 milliseconds, satisfying the characteristic condition for a ReDoS attack, where response times dramatically increase.</p>
<img src="https://github.com/user-attachments/assets/9fc865a4-e150-42d5-bcd5-93ab6b0c29ef" alt="2" width="800"></li>
</ol>
<h3 id="impact">Impact</h3>
<h4 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h4>
<p>This is a <strong>Regular Expression Denial of Service (ReDoS)</strong> vulnerability. It arises from inefficient regular expressions that can cause excessive backtracking when processing certain inputs. Specifically, the regular expression <code>/[\w-]+(?=-preview)/g</code> is vulnerable because it attempts to match long strings of characters followed by a hyphen (<code>-</code>), which leads to inefficient backtracking when provided with specially crafted attack strings. This backtracking results in high CPU utilization, causing the application to become unresponsive and denying service to legitimate users.</p>
<h4 id="who-is-impacted">Who is impacted?</h4>
<p>This vulnerability impacts any application that uses the affected regular expression in conjunction with user-controlled inputs, particularly where large or maliciously crafted strings can trigger excessive backtracking.
In addition to directly affecting applications using the <code>@octokit/endpoint package</code>, the impact is more widespread because <code>@octokit/endpoint</code> is a library used to wrap REST APIs, including GitHub's API. This means that any system or service built on top of this library that interacts with GitHub or other REST APIs could be vulnerable. Given the extensive use of this package in API communication, the potential for exploitation is broad and serious. The vulnerability could affect a wide range of applications, from small integrations to large enterprise-level systems, especially those relying on the package to handle API requests.
Attackers can exploit this vulnerability to cause performance degradation, downtime, and service disruption, making it a critical issue for anyone using the affected version of <code>@octokit/endpoint</code>.</p>
<h3 id="solution">Solution</h3>
<p>To resolve the ReDoS vulnerability, the regular expression should be updated to avoid excessive backtracking. By modifying the regular expression to <code>(?&lt;![\w-])[\w-]+(?=-preview)</code>, we prevent the issue.
Here is how this change solves the problem:
Here is how this change solves the problem:</p>
<ol>
<li><strong>Old Regular Expression</strong>: <code>/[\w-]+(?=-preview)/g</code></li>
</ol>
<ul>
<li>This regular expression matches any sequence of word characters (<code>\w</code>) and hyphens (<code>-</code>) followed by <code>-preview</code>.</li>
<li>The issue arises when the regex engine encounters a long string of characters followed by a <code>-</code>, causing excessive backtracking and high CPU usage.</li>
</ul>
<ol start="2">
<li><strong>New Regular Expression</strong>: <code>(?&lt;![\w-])[\w-]+(?=-preview)</code></li>
</ol>
<ul>
<li>This updated regular expression uses a negative lookbehind <code>(?&lt;![\w-])</code>, ensuring that the matched string is not preceded by any word characters or hyphens (<code>\w</code> or <code>-</code>).</li>
<li>The new expression still matches sequences of word characters and hyphens, but the negative lookbehind ensures it doesn't cause backtracking issues when processing long attack strings.</li>
<li>By adding this lookbehind, we effectively prevent the vulnerability, ensuring the regex operates efficiently without excessive backtracking.</li>
</ul>
<h4 id="full-solution-example">Full Solution Example:</h4>
<p>The specific code is located at the following link: <a href="https://github.com/octokit/endpoint.js/blob/main/src/parse.ts">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a>, at line 62:</p>
<ol>
<li><strong>Update the Regular Expression</strong>: In the <code>parse.ts</code> file (or wherever the original regex is defined), replace the existing regular expression:</li>
</ol>
<pre><code class="language-ts">const previewsFromAcceptHeader =
          headers.accept.match(/[\w-]+(?=-preview)/g) || ([] as string[]);
</code></pre>
<p>With the updated one:</p>
<pre><code class="language-ts">const previewsFromAcceptHeader =
          headers.accept.match(/(?&lt;![\w-])[\w-]+(?=-preview)/g) || ([] as string[]);
</code></pre>
<ol start="2">
<li><strong>Test the Change</strong>: After updating the regular expression, thoroughly test the application with both regular and malicious inputs to ensure that:</li>
</ol>
<ul>
<li>The functionality remains correct and the expected matches still occur.</li>
<li>The performance improves and the ReDoS vulnerability no longer occurs when handling large attack strings.</li>
</ul>
<ol start="3">
<li><strong>Deploy the Fix</strong>: Once the solution is verified, deploy the fix to your production environment to protect against potential attacks.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv">https://github.com/octokit/endpoint.js/security/advisories/GHSA-x4c5-c7rf-jjgv</a></li>
<li><a href="https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8">https://github.com/octokit/endpoint.js/commit/6c9c5be033c450d436efb37de41b6470c22f7db8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25285">https://nvd.nist.gov/vuln/detail/CVE-2025-25285</a></li>
<li><a href="https://github.com/octokit/endpoint.js/blob/main/src/parse.ts">https://github.com/octokit/endpoint.js/blob/main/src/parse.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-x4c5-c7rf-jjgv">https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4c5-c7rf-jjgv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:56:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMPurify allows Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-vhxf-7vqr-mrjg</id>
        <link href="https://github.com/advisories/GHSA-vhxf-7vqr-mrjg"/>
        <updated>2025-02-14T18:05:09.000Z</updated>
        <content type="html"><![CDATA[<p>DOMPurify before 3.2.4 has an incorrect template literal regular expression, sometimes leading to mutation cross-site scripting (mXSS).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-26791">https://nvd.nist.gov/vuln/detail/CVE-2025-26791</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/d18ffcb554e0001748865da03ac75dd7829f0f02">https://github.com/cure53/DOMPurify/commit/d18ffcb554e0001748865da03ac75dd7829f0f02</a></li>
<li><a href="https://ensy.zip/posts/dompurify-323-bypass">https://ensy.zip/posts/dompurify-323-bypass</a></li>
<li><a href="https://github.com/cure53/DOMPurify/releases/tag/3.2.4">https://github.com/cure53/DOMPurify/releases/tag/3.2.4</a></li>
<li><a href="https://nsysean.github.io/posts/dompurify-323-bypass">https://nsysean.github.io/posts/dompurify-323-bypass</a></li>
<li><a href="https://github.com/advisories/GHSA-vhxf-7vqr-mrjg">https://github.com/advisories/GHSA-vhxf-7vqr-mrjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vhxf-7vqr-mrjg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T09:31:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vega-selections] Vega allows Cross-site Scripting via the vlSelectionTuples function]]></title>
        <id>https://github.com/advisories/GHSA-mp7w-mhcv-673j</id>
        <link href="https://github.com/advisories/GHSA-mp7w-mhcv-673j"/>
        <updated>2025-02-14T22:17:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>vlSelectionTuples</code> function can be used to call JavaScript functions, leading to XSS.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14"><code>vlSelectionTuples</code></a> calls multiple functions that can be controlled by an attacker, including one call with an attacker-controlled argument.</p>
<p>Example call: <code>vlSelectionTuples([{datum:&lt;argument&gt;}], {fields:[{getter:&lt;function&gt;}]})</code></p>
<p>This can be used to call <code>Function()</code> with arbitrary JavaScript and the resulting function can be called with <code>vlSelectionTuples</code> or using a type coercion to call <code>toString</code> or <code>valueOf</code>.</p>
<h3 id="poc">PoC</h3>
<pre><code>{"$schema":"https://vega.github.io/schema/vega/v5.json","signals":[{"name":"a","init":"+{valueOf:vlSelectionTuples([{datum:'alert(1)'}],{fields:[{getter:[].at.constructor}]})[0].values[0]}"}]}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j">https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j</a></li>
<li><a href="https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e">https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25304">https://nvd.nist.gov/vuln/detail/CVE-2025-25304</a></li>
<li><a href="https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14">https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14</a></li>
<li><a href="https://github.com/advisories/GHSA-mp7w-mhcv-673j">https://github.com/advisories/GHSA-mp7w-mhcv-673j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp7w-mhcv-673j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:33:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vega] Vega allows Cross-site Scripting via the vlSelectionTuples function]]></title>
        <id>https://github.com/advisories/GHSA-mp7w-mhcv-673j</id>
        <link href="https://github.com/advisories/GHSA-mp7w-mhcv-673j"/>
        <updated>2025-02-14T22:17:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>vlSelectionTuples</code> function can be used to call JavaScript functions, leading to XSS.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14"><code>vlSelectionTuples</code></a> calls multiple functions that can be controlled by an attacker, including one call with an attacker-controlled argument.</p>
<p>Example call: <code>vlSelectionTuples([{datum:&lt;argument&gt;}], {fields:[{getter:&lt;function&gt;}]})</code></p>
<p>This can be used to call <code>Function()</code> with arbitrary JavaScript and the resulting function can be called with <code>vlSelectionTuples</code> or using a type coercion to call <code>toString</code> or <code>valueOf</code>.</p>
<h3 id="poc">PoC</h3>
<pre><code>{"$schema":"https://vega.github.io/schema/vega/v5.json","signals":[{"name":"a","init":"+{valueOf:vlSelectionTuples([{datum:'alert(1)'}],{fields:[{getter:[].at.constructor}]})[0].values[0]}"}]}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j">https://github.com/vega/vega/security/advisories/GHSA-mp7w-mhcv-673j</a></li>
<li><a href="https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e">https://github.com/vega/vega/commit/9fb9ea07e27984394e463d286eb73944fa61411e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25304">https://nvd.nist.gov/vuln/detail/CVE-2025-25304</a></li>
<li><a href="https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14">https://github.com/vega/vega/blob/b45cf431cd6c0d0c0e1567f087f9b3b55bc236fa/packages/vega-selections/src/selectionTuples.js#L14</a></li>
<li><a href="https://github.com/advisories/GHSA-mp7w-mhcv-673j">https://github.com/advisories/GHSA-mp7w-mhcv-673j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp7w-mhcv-673j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:33:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[atlassian-connect-express] Broken Authentication in Atlassian Connect Express]]></title>
        <id>https://github.com/advisories/GHSA-4v96-m8xv-x83v</id>
        <link href="https://github.com/advisories/GHSA-4v96-m8xv-x83v"/>
        <updated>2025-02-12T21:53:05.000Z</updated>
        <content type="html"><![CDATA[<p>Broken Authentication in Atlassian Connect Express (ACE) from version 3.0.2 before version 6.6.0: Atlassian Connect Express is a Node.js package for building Atlassian Connect apps. Authentication between Atlassian products and the Atlassian Connect Express app occurs with a server-to-server JWT or a context JWT. Atlassian Connect Express versions between 3.0.2 - 6.5.0 erroneously accept context JWTs in lifecycle endpoints (such as installation) where only server-to-server JWTs should be accepted, permitting an attacker to send authenticated re-installation events to an app.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26073">https://nvd.nist.gov/vuln/detail/CVE-2021-26073</a></li>
<li><a href="https://confluence.atlassian.com/pages/viewpage.action?pageId=1051986099">https://confluence.atlassian.com/pages/viewpage.action?pageId=1051986099</a></li>
<li><a href="https://community.developer.atlassian.com/t/action-required-atlassian-connect-vulnerability-a%5B%E2%80%A6%5Dypass-of-app-qsh-verification-via-context-jwts/47072">https://community.developer.atlassian.com/t/action-required-atlassian-connect-vulnerability-a%5B%E2%80%A6%5Dypass-of-app-qsh-verification-via-context-jwts/47072</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210604-0004">https://security.netapp.com/advisory/ntap-20210604-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-4v96-m8xv-x83v">https://github.com/advisories/GHSA-4v96-m8xv-x83v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v96-m8xv-x83v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T22:28:12.000Z</published>
    </entry>
</feed>