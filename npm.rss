<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-05-08T18:01:32.511Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[trix] Trix vulnerable to Cross-site Scripting on copy & paste]]></title>
        <id>https://github.com/advisories/GHSA-mcrw-746g-9q8h</id>
        <link href="https://github.com/advisories/GHSA-mcrw-746g-9q8h"/>
        <updated>2025-05-08T14:48:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Trix editor, in versions prior to 2.1.15, is vulnerable to XSS attacks when pasting malicious code.</p>
<p>An attacker could trick a user to copy and paste malicious code that would execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>
<h3 id="patches">Patches</h3>
<p>Update Recommendation: Users should upgrade to Trix editor version 2.1.15 or later.</p>
<h3 id="references">References</h3>
<p>The XSS vulnerability was reported by HackerOne researcher <a href="https://hackerone.com/hiumee?type=user">hiumee</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/basecamp/trix/security/advisories/GHSA-mcrw-746g-9q8h">https://github.com/basecamp/trix/security/advisories/GHSA-mcrw-746g-9q8h</a></li>
<li><a href="https://github.com/basecamp/trix/commit/75226089646841b0f774d8b152e5ec27d2d9e191">https://github.com/basecamp/trix/commit/75226089646841b0f774d8b152e5ec27d2d9e191</a></li>
<li><a href="https://github.com/advisories/GHSA-mcrw-746g-9q8h">https://github.com/advisories/GHSA-mcrw-746g-9q8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mcrw-746g-9q8h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-08T14:48:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[passport-wsfed-saml2] Passport-wsfed-saml2 allows SAML Authentication Bypass via Attribute Smuggling]]></title>
        <id>https://github.com/advisories/GHSA-8gqj-226h-gm8r</id>
        <link href="https://github.com/advisories/GHSA-8gqj-226h-gm8r"/>
        <updated>2025-05-07T15:34:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>This vulnerability allows an attacker to impersonate any user during SAML authentication by tampering with a valid SAML response. This can be done by adding attributes to the response.</p>
<h3 id="am-i-affected">Am I Affected?</h3>
<p>You are affected by this SAML Attribute Smuggling vulnerability if you are using <code>passport-wsfed-saml2</code> version 4.6.3 or below, specifically under the following conditions:</p>
<ol>
<li>The service provider is using <code>passport-wsfed-saml2</code>, </li>
<li>A valid SAML Response signed by the Identity Provider can be obtained</li>
</ol>
<h3 id="fix">Fix</h3>
<p>Upgrade to v4.6.4 or greater.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/passport-wsfed-saml2/security/advisories/GHSA-8gqj-226h-gm8r">https://github.com/auth0/passport-wsfed-saml2/security/advisories/GHSA-8gqj-226h-gm8r</a></li>
<li><a href="https://github.com/auth0/passport-wsfed-saml2/commit/e5cf3cc2a53748207f7a81bfba9195c8efa94181">https://github.com/auth0/passport-wsfed-saml2/commit/e5cf3cc2a53748207f7a81bfba9195c8efa94181</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46573">https://nvd.nist.gov/vuln/detail/CVE-2025-46573</a></li>
<li><a href="https://github.com/advisories/GHSA-8gqj-226h-gm8r">https://github.com/advisories/GHSA-8gqj-226h-gm8r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gqj-226h-gm8r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-06T21:18:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[passport-wsfed-saml2] Passport-wsfed-saml2 allows SAML Authentication Bypass via Signature Wrapping]]></title>
        <id>https://github.com/advisories/GHSA-wjmp-wphq-jvqf</id>
        <link href="https://github.com/advisories/GHSA-wjmp-wphq-jvqf"/>
        <updated>2025-05-06T21:43:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>This vulnerability allows an attacker to impersonate any user during SAML authentication by crafting a SAMLResponse. This can be done by using a valid SAML object that was signed by the configured IdP.</p>
<h3 id="am-i-affected">Am I Affected?</h3>
<p>You are affected by this SAML Signature Wrapping vulnerability if you are using <code>passport-wsfed-saml2</code> version 4.6.3 or below, specifically under the following conditions:</p>
<ol>
<li>The service provider is using <code>passport-wsfed-saml2</code>,</li>
<li>A valid SAML document signed by the Identity Provider can be obtained.</li>
</ol>
<h3 id="fix">Fix</h3>
<p>Upgrade to v4.6.4 or greater.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/passport-wsfed-saml2/security/advisories/GHSA-wjmp-wphq-jvqf">https://github.com/auth0/passport-wsfed-saml2/security/advisories/GHSA-wjmp-wphq-jvqf</a></li>
<li><a href="https://github.com/auth0/passport-wsfed-saml2/commit/e5cf3cc2a53748207f7a81bfba9195c8efa94181">https://github.com/auth0/passport-wsfed-saml2/commit/e5cf3cc2a53748207f7a81bfba9195c8efa94181</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46572">https://nvd.nist.gov/vuln/detail/CVE-2025-46572</a></li>
<li><a href="https://github.com/advisories/GHSA-wjmp-wphq-jvqf">https://github.com/advisories/GHSA-wjmp-wphq-jvqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjmp-wphq-jvqf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-06T21:18:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@misskey-dev/summaly] @misskey-dev/summaly allows IP Filter Bypass via Redirect]]></title>
        <id>https://github.com/advisories/GHSA-jqx4-9gpq-rppm</id>
        <link href="https://github.com/advisories/GHSA-jqx4-9gpq-rppm"/>
        <updated>2025-05-06T16:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to a validation error in <code>got.scpaping</code>, it is possible to use an HTTP redirect to avoid IP filtering.</p>
<h3 id="details">Details</h3>
<p>In <code>got.scpaping</code>, Summaly first makes a HTTP <code>HEAD</code> request to the page being summarized. It then preforms private IP address checks on the <code>HEAD</code> response, then makes an additional HTTP <code>GET</code> request to the page being summarized. Unfortunately, since private IP address checks aren't performed on the <code>GET</code> response, the <code>GET</code> response can issue a HTTP redirect to a private IP address, which will succeed, regardless of if private IP addresses are allowed by Summaly.</p>
<h3 id="poc">PoC</h3>
<p>With a simple Caddy webserver, you can get Summaly to summarize a page hosted via a local IP address:</p>
<pre><code class="language-caddy">@summaly-bypass-head {
    method HEAD
    path /summaly-bypass
}
@summaly-bypass-get {
    method GET
    path /summaly-bypass
}
header @summaly-bypass-head Content-Type "text/html"
respond @summaly-bypass-head 200
redir @summaly-bypass-get http://127.0.0.1:3080/
</code></pre>
<h3 id="impact">Impact</h3>
<p>Using this bypass, an attacker can probe a victims internal network for HTTP services that aren't supposed to be exposed to the outside world. While they might only have read-only access through this, it may still be possible to extract sensitive information or be used to probe a network prior to attacking via other exploits without leaving a trace.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/misskey-dev/summaly/security/advisories/GHSA-jqx4-9gpq-rppm">https://github.com/misskey-dev/summaly/security/advisories/GHSA-jqx4-9gpq-rppm</a></li>
<li><a href="https://github.com/misskey-dev/summaly/commit/dfe6451012aac42eabe71d4ed721d8058c4066b4">https://github.com/misskey-dev/summaly/commit/dfe6451012aac42eabe71d4ed721d8058c4066b4</a></li>
<li><a href="https://github.com/advisories/GHSA-jqx4-9gpq-rppm">https://github.com/advisories/GHSA-jqx4-9gpq-rppm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqx4-9gpq-rppm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-06T16:44:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@keystone-6/core] Keystone has an unintended `isFilterable` bypass that can be used as an oracle to match hidden fields]]></title>
        <id>https://github.com/advisories/GHSA-hg9m-67mm-7pg3</id>
        <link href="https://github.com/advisories/GHSA-hg9m-67mm-7pg3"/>
        <updated>2025-05-05T22:06:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="summary">Summary</h1>
<p><code>{field}.isFilterable</code> access control can be bypassed in <code>update</code> and <code>delete</code> mutations by adding additional unique filters. These filters can be used as an oracle to probe the existence or value of otherwise unreadable fields.</p>
<p>Specifically, when a mutation includes a <code>where</code> clause with multiple unique filters (e.g. <code>id</code> and <code>email</code>), Keystone will attempt to match records even if filtering by the latter fields would normally be rejected by <code>field.isFilterable</code> or <code>list.defaultIsFilterable</code>. This can allow malicious actors to infer the presence of a particular field value when a filter is successful in returning a result.</p>
<h1 id="impact">Impact</h1>
<p>This affects any project relying on the default or dynamic <code>isFilterable</code> behaviour (at the list or field level) to prevent external users from using the filtering of fields as a discovery mechanism. While this access control is respected during <code>findMany</code> operations, it was not completely enforced during <code>update</code> and <code>delete</code> mutations when accepting more than one unique <code>where</code> values in filters.</p>
<p>This has no impact on projects using <code>isFilterable: false</code> or <code>defaultIsFilterable: false</code> for sensitive fields, or if you have otherwise omitted filtering by these fields from your GraphQL schema. (See workarounds)</p>
<h1 id="patches">Patches</h1>
<p>This issue has been patched in <code>@keystone-6/core</code> version 6.5.0.</p>
<h1 id="workarounds">Workarounds</h1>
<p>To mitigate this issue in older versions where patching is not a viable pathway.</p>
<ul>
<li>Set <code>isFilterable: false</code> statically for relevant fields to prevent filtering by them earlier in the access control pipeline (that is, don't use functions)</li>
<li>Set <code>{field}.graphql.omit.read: true</code> for relevant fields, which implicitly removes filtering by these fields your GraphQL schema</li>
<li>Deny <code>update</code> and <code>delete</code> operations for the relevant <strong>lists</strong> completely (e.g <code>list({ access: { operation: { update: false, delete: false } }, ... })</code>)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keystonejs/keystone/security/advisories/GHSA-hg9m-67mm-7pg3">https://github.com/keystonejs/keystone/security/advisories/GHSA-hg9m-67mm-7pg3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46720">https://nvd.nist.gov/vuln/detail/CVE-2025-46720</a></li>
<li><a href="https://github.com/advisories/GHSA-hg9m-67mm-7pg3">https://github.com/advisories/GHSA-hg9m-67mm-7pg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg9m-67mm-7pg3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-05T18:51:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@misskey-dev/summaly] @misskey-dev/summaly Redirect Filter Bypass]]></title>
        <id>https://github.com/advisories/GHSA-7899-w6c4-vqc4</id>
        <link href="https://github.com/advisories/GHSA-7899-w6c4-vqc4"/>
        <updated>2025-05-05T22:06:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A logic error in the main <code>summaly</code> function causes the <code>allowRedirects</code> option to never be passed to any plugins, and as a result, isn't enforced.</p>
<h3 id="details">Details</h3>
<p>In the main <code>summaly</code> function, a new <code>scrapingOptions</code> object is created and passed to either the matched plugin, if any, or the default summarize function. The issue here is that the new <code>scrapingOptions</code> object is not provided the <code>allowRedirects</code> property of <code>opts</code>.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Publish a post containing a link to any URL that redirects on Misskey.</li>
<li>A preview will be generated for the target of the redirect, despite Misskey passing <code>allowRedirects: false</code>.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Misskey will follow redirects, despite explicitly requesting not to.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/misskey-dev/summaly/security/advisories/GHSA-7899-w6c4-vqc4">https://github.com/misskey-dev/summaly/security/advisories/GHSA-7899-w6c4-vqc4</a></li>
<li><a href="https://github.com/misskey-dev/summaly/commit/45153b4f08a772c395a13f7a25399dd87ed022ed">https://github.com/misskey-dev/summaly/commit/45153b4f08a772c395a13f7a25399dd87ed022ed</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46553">https://nvd.nist.gov/vuln/detail/CVE-2025-46553</a></li>
<li><a href="https://github.com/advisories/GHSA-7899-w6c4-vqc4">https://github.com/advisories/GHSA-7899-w6c4-vqc4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7899-w6c4-vqc4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-05T17:03:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@vercel/flags] Information Disclosure via Flags override link]]></title>
        <id>https://github.com/advisories/GHSA-892p-pqrr-hxqr</id>
        <link href="https://github.com/advisories/GHSA-892p-pqrr-hxqr"/>
        <updated>2025-05-02T19:28:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>An information disclosure vulnerability affecting Flags SDK has been addressed. It impacted <code>flags</code> ≤3.2.0 and <code>@vercel/flags</code> ≤3.1.1 and in certain circumstances, allowed a bad actor with detailed knowledge of the vulnerability to list all flags returned by the flags discovery endpoint (<code>.well-known/vercel/flags</code>).</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability allowed for information disclosure, where a bad actor could gain access to a list of all feature flags exposed through the flags discovery endpoint, including the:</p>
<ul>
<li>Flag names</li>
<li>Flag descriptions</li>
<li>Available options and their labels (e.g. <code>true</code>, <code>false</code>)</li>
<li>Default flag values</li>
</ul>
<p>Not impacted:</p>
<ul>
<li>Flags providers were not accessible</li>
</ul>
<p>No write access nor additional customer data was exposed, this is limited to just the values noted above. Vercel has automatically mitigated this incident on behalf of our customers for the default flags discovery endpoint at <code>.well-known/vercel/flags</code>. Flags Explorer will be disabled and show a warning notice until upgraded to <code>flags@4.0.0</code>.</p>
<h2 id="resolution">Resolution</h2>
<p>The <code>verifyAccess</code> function was patched within <code>flags@4.0.0</code>. </p>
<p>Users of <code>@vercel/flags</code> should also migrate to <code>flags@4.0.0</code>.</p>
<p>For further guidance on upgrading your version, please see our <a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">upgrade guide</a>.</p>
<h2 id="mitigations">Mitigations</h2>
<p>Vercel implemented a network-level mitigation to prevent the default flags discovery endpoint at <code>/.well-known/vercel/flags</code> being reachable, which automatically protects Vercel deployments against exploitation of this issue. Users need to upgrade to <code>flags@4.0.0</code> to re-enable the Flags Explorer.</p>
<p>This automatic mitigation is not effective in two scenarios:</p>
<ul>
<li>When using the Flags SDK on Pages Router, as the original non-rewritten route would still be accessible, e.g. <code>/api/vercel/flags</code>.</li>
<li>When using a custom path for the flags discovery endpoint.</li>
</ul>
<p>If you are not protected by the Vercel default mitigation you can temporarily deny access to the other exposed flags discovery endpoints through a custom WAF rule while you upgrade to the latest version.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr">https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46332">https://nvd.nist.gov/vuln/detail/CVE-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/advisories/GHSA-892p-pqrr-hxqr">https://github.com/advisories/GHSA-892p-pqrr-hxqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-892p-pqrr-hxqr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T19:28:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flags] Information Disclosure via Flags override link]]></title>
        <id>https://github.com/advisories/GHSA-892p-pqrr-hxqr</id>
        <link href="https://github.com/advisories/GHSA-892p-pqrr-hxqr"/>
        <updated>2025-05-02T19:28:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>An information disclosure vulnerability affecting Flags SDK has been addressed. It impacted <code>flags</code> ≤3.2.0 and <code>@vercel/flags</code> ≤3.1.1 and in certain circumstances, allowed a bad actor with detailed knowledge of the vulnerability to list all flags returned by the flags discovery endpoint (<code>.well-known/vercel/flags</code>).</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability allowed for information disclosure, where a bad actor could gain access to a list of all feature flags exposed through the flags discovery endpoint, including the:</p>
<ul>
<li>Flag names</li>
<li>Flag descriptions</li>
<li>Available options and their labels (e.g. <code>true</code>, <code>false</code>)</li>
<li>Default flag values</li>
</ul>
<p>Not impacted:</p>
<ul>
<li>Flags providers were not accessible</li>
</ul>
<p>No write access nor additional customer data was exposed, this is limited to just the values noted above. Vercel has automatically mitigated this incident on behalf of our customers for the default flags discovery endpoint at <code>.well-known/vercel/flags</code>. Flags Explorer will be disabled and show a warning notice until upgraded to <code>flags@4.0.0</code>.</p>
<h2 id="resolution">Resolution</h2>
<p>The <code>verifyAccess</code> function was patched within <code>flags@4.0.0</code>. </p>
<p>Users of <code>@vercel/flags</code> should also migrate to <code>flags@4.0.0</code>.</p>
<p>For further guidance on upgrading your version, please see our <a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">upgrade guide</a>.</p>
<h2 id="mitigations">Mitigations</h2>
<p>Vercel implemented a network-level mitigation to prevent the default flags discovery endpoint at <code>/.well-known/vercel/flags</code> being reachable, which automatically protects Vercel deployments against exploitation of this issue. Users need to upgrade to <code>flags@4.0.0</code> to re-enable the Flags Explorer.</p>
<p>This automatic mitigation is not effective in two scenarios:</p>
<ul>
<li>When using the Flags SDK on Pages Router, as the original non-rewritten route would still be accessible, e.g. <code>/api/vercel/flags</code>.</li>
<li>When using a custom path for the flags discovery endpoint.</li>
</ul>
<p>If you are not protected by the Vercel default mitigation you can temporarily deny access to the other exposed flags discovery endpoints through a custom WAF rule while you upgrade to the latest version.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr">https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46332">https://nvd.nist.gov/vuln/detail/CVE-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/advisories/GHSA-892p-pqrr-hxqr">https://github.com/advisories/GHSA-892p-pqrr-hxqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-892p-pqrr-hxqr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T19:28:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] @cloudflare/workers-oauth-provider PKCE bypass via downgrade attack]]></title>
        <id>https://github.com/advisories/GHSA-qgp8-v765-qxx9</id>
        <link href="https://github.com/advisories/GHSA-qgp8-v765-qxx9"/>
        <updated>2025-05-01T17:01:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>PKCE was implemented in the OAuth implementation in workers-oauth-provider that is part of<a href="https://github.com/cloudflare/workers-mcp"> MCP framework</a>. However, it was found that an attacker could cause the check to be skipped.</p>
<h3 id="impact">Impact</h3>
<p>PKCE is a defense-in-depth mechanism against certain kinds of attacks and was an optional extension in OAuth 2.0 which became required in the OAuth 2.1 draft. (Note that the MCP specification requires OAuth 2.1.)
This bug completely bypasses PKCE protection.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in: <a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a></p>
<p>We patched up the vulnerabilities in the latest version, v 0.0.5 of the Workers OAuth provider (<a href="https://www.npmjs.com/package/@cloudflare/workers-oauth-provider">https://www.npmjs.com/package/@cloudflare/workers-oauth-provider</a>). You'll need to update your MCP servers to use that version to resolve the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-qgp8-v765-qxx9">https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-qgp8-v765-qxx9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4144">https://nvd.nist.gov/vuln/detail/CVE-2025-4144</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a></li>
<li><a href="https://github.com/advisories/GHSA-qgp8-v765-qxx9">https://github.com/advisories/GHSA-qgp8-v765-qxx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qgp8-v765-qxx9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T17:01:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] Duplicate Advisory: @cloudflare/workers-oauth-provider PKCE bypass via downgrade attack]]></title>
        <id>https://github.com/advisories/GHSA-vh4h-fvqf-q9wv</id>
        <link href="https://github.com/advisories/GHSA-vh4h-fvqf-q9wv"/>
        <updated>2025-05-01T17:01:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-qgp8-v765-qxx9. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>PKCE was implemented in the OAuth implementation in workers-oauth-provider that is part of  MCP framework <a href="https://github.com/cloudflare/workers-mcp">https://github.com/cloudflare/workers-mcp</a> . However, it&nbsp;was found that an attacker could cause the check to be skipped.</p>
<p>Fixed in:</p>
<p> <a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a> <a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a> </p>
<p>Impact: </p>
<p>PKCE is a defense-in-depth mechanism against certain kinds of attacks and was an optional extension in OAuth 2.0 which became required in the OAuth 2.1 draft. (Note that the MCP specification requires OAuth 2.1.).&nbsp;This bug completely bypasses PKCE protection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4144">https://nvd.nist.gov/vuln/detail/CVE-2025-4144</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a></li>
<li><a href="https://github.com/advisories/GHSA-vh4h-fvqf-q9wv">https://github.com/advisories/GHSA-vh4h-fvqf-q9wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vh4h-fvqf-q9wv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T03:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] @cloudflare/workers-oauth-provider missing validation of redirect_uri on authorize endpoint]]></title>
        <id>https://github.com/advisories/GHSA-4pc9-x2fx-p7vj</id>
        <link href="https://github.com/advisories/GHSA-4pc9-x2fx-p7vj"/>
        <updated>2025-05-01T17:00:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>PKCE was implemented in the OAuth implementation in workers-oauth-provider that is part of<a href="https://github.com/cloudflare/workers-mcp"> MCP framework</a>. However, it was found that an attacker could cause the check to be skipped.</p>
<h3 id="impact">Impact</h3>
<p>Under certain circumstances (see below), if a victim had previously authorized with a server built on workers-oath-provider, and an attacker could later trick the victim into visiting a malicious web site, then attacker could potentially steal the victim's credentials to the same OAuth server and subsequently impersonate them.</p>
<p>In order for the attack to be possible, the OAuth server's authorized callback must be designed to auto-approve authorizations that appear to come from an OAuth client that the victim has authorized previously. The authorization flow is not implemented by workers-oauth-provider; it is up to the application built on top to decide whether to implement such automatic re-authorization. However, many applications do implement such logic.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in: <a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a></p>
<p>We patched up the vulnerabilities in the latest version, v 0.0.5 of the Workers OAuth provider (<a href="https://www.npmjs.com/package/@cloudflare/workers-oauth-provider">https://www.npmjs.com/package/@cloudflare/workers-oauth-provider</a>). You'll need to update your MCP servers to use that version to resolve the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="note">Note</h3>
<p>It is a basic, well-known requirement that OAuth servers should verify that the redirect URI is among the allowed list for the client, both during the authorization flow and subsequently when exchanging the authorization code for an access token. workers-oauth-provider implemented only the latter check, not the former. Unfortunately, the former is the much more important check.</p>
<p>Readers who are familiar with OAuth may recognize that failing to check redirect URIs against the allowed list is a well-known, basic mistake, covered extensively in the RFC and elsewhere. The author of this library would like everyone to know that he was, in fact, well-aware of this requirement, thought about it a lot while designing the library, and then, somehow, forgot to actually make sure the check was in the code. That is, it's not that he didn't know what he was doing, it's that he knew what he was doing but flubbed it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-4pc9-x2fx-p7vj">https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-4pc9-x2fx-p7vj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4143">https://nvd.nist.gov/vuln/detail/CVE-2025-4143</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a></li>
<li><a href="https://github.com/advisories/GHSA-4pc9-x2fx-p7vj">https://github.com/advisories/GHSA-4pc9-x2fx-p7vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4pc9-x2fx-p7vj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T17:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] Duplicate Advisory: @cloudflare/workers-oauth-provider missing validation of redirect_uri on authorize endpoint]]></title>
        <id>https://github.com/advisories/GHSA-7cp4-jw97-3rc2</id>
        <link href="https://github.com/advisories/GHSA-7cp4-jw97-3rc2"/>
        <updated>2025-05-01T17:00:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-4pc9-x2fx-p7vj. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>The OAuth implementation in workers-oauth-provider that is part of  MCP framework <a href="https://github.com/cloudflare/workers-mcp">https://github.com/cloudflare/workers-mcp</a> , did not correctly validate that redirect_uri was on the allowed list of redirect URIs for the given client registration.</p>
<p>Fixed in:&nbsp; <a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a> <a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a> </p>
<p>Impact:</p>
<p>Under certain circumstances (see below), if a victim had previously authorized with a server built on workers-oath-provider, and an attacker could later trick the victim into visiting a malicious web site, then attacker could potentially steal the victim's credentials to the same OAuth server and subsequently impersonate them.</p>
<p>In order for the attack to be possible, the OAuth server's authorized callback must be designed to auto-approve authorizations that appear to come from an OAuth client that the victim has authorized previously. The authorization flow is not implemented by workers-oauth-provider; it is up to the application built on top to decide whether to implement such automatic re-authorization. However, many applications do implement such logic.</p>
<p>Note: It is a basic, well-known requirement that OAuth servers should verify that the redirect URI is among the allowed list for the client, both during the authorization flow and subsequently when exchanging the authorization code for an access token. workers-oauth-provider implemented only the latter check, not the former. Unfortunately, the former is the much more important check.&nbsp;Readers who are familiar with OAuth may recognize that failing to check redirect URIs against the allowed list is a well-known, basic mistake, covered extensively in the RFC and elsewhere. The author of this library would like everyone to know that he was, in fact, well-aware of this requirement, thought about it a lot while designing the library, and then, somehow, forgot to actually make sure the check was in the code. That is, it's not that he didn't know what he was doing, it's that he knew what he was doing but flubbed it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4143">https://nvd.nist.gov/vuln/detail/CVE-2025-4143</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a></li>
<li><a href="https://github.com/advisories/GHSA-7cp4-jw97-3rc2">https://github.com/advisories/GHSA-7cp4-jw97-3rc2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cp4-jw97-3rc2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T03:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-04-30T21:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-04-30T21:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-05-01T13:31:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27611">https://nvd.nist.gov/vuln/detail/CVE-2025-27611</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
</feed>