<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-04-14T10:01:27.262Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[yui] YUI Cross-site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9ww8-j8j2-3788</id>
        <link href="https://github.com/advisories/GHSA-9ww8-j8j2-3788"/>
        <updated>2025-04-12T03:26:54.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in flashuploader.swf in the Uploader component in Yahoo! YUI 3.5.0 through 3.9.1, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4942">https://nvd.nist.gov/vuln/detail/CVE-2013-4942</a></li>
<li><a href="https://moodle.org/mod/forum/discuss.php?d=232496">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>
<li><a href="http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>
<li><a href="https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-9ww8-j8j2-3788">https://github.com/advisories/GHSA-9ww8-j8j2-3788</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9ww8-j8j2-3788</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yui] YUI Cross-site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-64r3-582j-frqm</id>
        <link href="https://github.com/advisories/GHSA-64r3-582j-frqm"/>
        <updated>2025-04-12T03:25:18.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in uploader.swf in the Uploader component in Yahoo! YUI 3.2.0 through 3.9.1, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4941">https://nvd.nist.gov/vuln/detail/CVE-2013-4941</a></li>
<li><a href="https://moodle.org/mod/forum/discuss.php?d=232496">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>
<li><a href="http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>
<li><a href="https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-64r3-582j-frqm">https://github.com/advisories/GHSA-64r3-582j-frqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64r3-582j-frqm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yui] YUI Cross-site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x5hj-47vv-53p8</id>
        <link href="https://github.com/advisories/GHSA-x5hj-47vv-53p8"/>
        <updated>2025-04-12T03:24:29.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in io.swf in the IO Utility component in Yahoo! YUI 3.10.2, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.  NOTE: this vulnerability exists because of a CVE-2013-4939 regression.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4940">https://nvd.nist.gov/vuln/detail/CVE-2013-4940</a></li>
<li><a href="https://moodle.org/mod/forum/discuss.php?d=232496">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>
<li><a href="http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>
<li><a href="https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-x5hj-47vv-53p8">https://github.com/advisories/GHSA-x5hj-47vv-53p8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5hj-47vv-53p8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yui] YUI Cross-site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x5hj-47vv-53p8</id>
        <link href="https://github.com/advisories/GHSA-x5hj-47vv-53p8"/>
        <updated>2025-04-12T03:24:29.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in io.swf in the IO Utility component in Yahoo! YUI 3.10.2, as used in Moodle through 2.1.10, 2.2.x before 2.2.11, 2.3.x before 2.3.8, 2.4.x before 2.4.5, 2.5.x before 2.5.1, and other products, allows remote attackers to inject arbitrary web script or HTML via a crafted string in a URL.  NOTE: this vulnerability exists because of a CVE-2013-4939 regression.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4940">https://nvd.nist.gov/vuln/detail/CVE-2013-4940</a></li>
<li><a href="https://moodle.org/mod/forum/discuss.php?d=232496">https://moodle.org/mod/forum/discuss.php?d=232496</a></li>
<li><a href="http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-39678</a></li>
<li><a href="https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability">https://web.archive.org/web/20130909203912/http://yuilibrary.com/support/20130515-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-x5hj-47vv-53p8">https://github.com/advisories/GHSA-x5hj-47vv-53p8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5hj-47vv-53p8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@nestjs/common] nest allows a remote attacker to execute arbitrary code via the Content-Type header]]></title>
        <id>https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</id>
        <link href="https://github.com/advisories/GHSA-cj7v-w2c7-cp7c"/>
        <updated>2025-04-11T18:01:56.000Z</updated>
        <content type="html"><![CDATA[<p>File Upload vulnerability in nestjs nest prior to v.11.0.16 allows a remote attacker to execute arbitrary code via the Content-Type header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29409">https://nvd.nist.gov/vuln/detail/CVE-2024-29409</a></li>
<li><a href="https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495">https://github.com/nestjs/nest/issues/13311#issuecomment-1993839495</a></li>
<li><a href="https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f">https://gist.github.com/aydinnyunus/801342361584d1491c67a820a714f53f</a></li>
<li><a href="https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19">https://github.com/nestjs/nest/blob/83a48b2c7396985144b7a6cd5d3bee1abb7c5d81/packages/common/pipes/file/file-type.validator.ts#L19</a></li>
<li><a href="https://github.com/nestjs/nest/issues/14876">https://github.com/nestjs/nest/issues/14876</a></li>
<li><a href="https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038">https://github.com/nestjs/nest/issues/14876#issuecomment-2796888038</a></li>
<li><a href="https://github.com/nestjs/nest/pull/14881">https://github.com/nestjs/nest/pull/14881</a></li>
<li><a href="https://github.com/nestjs/nest/releases/tag/v11.0.16">https://github.com/nestjs/nest/releases/tag/v11.0.16</a></li>
<li><a href="https://github.com/advisories/GHSA-cj7v-w2c7-cp7c">https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cj7v-w2c7-cp7c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-14T18:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`]]></title>
        <id>https://github.com/advisories/GHSA-356w-63v5-8wf4</id>
        <link href="https://github.com/advisories/GHSA-356w-63v5-8wf4"/>
        <updated>2025-04-11T14:06:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>
<h3 id="impact">Impact</h3>
<p>Only apps with the following conditions are affected.</p>
<ul>
<li>explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>)</li>
<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1">ref1</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3">ref2</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3">ref3</a>).</p>
<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href="https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>
<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>/etc/passwd</code></p>
<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32395">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>
<li><a href="https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>
<li><a href="https://github.com/advisories/GHSA-356w-63v5-8wf4">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-356w-63v5-8wf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`]]></title>
        <id>https://github.com/advisories/GHSA-356w-63v5-8wf4</id>
        <link href="https://github.com/advisories/GHSA-356w-63v5-8wf4"/>
        <updated>2025-04-11T14:06:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>
<h3 id="impact">Impact</h3>
<p>Only apps with the following conditions are affected.</p>
<ul>
<li>explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>)</li>
<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1">ref1</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3">ref2</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3">ref3</a>).</p>
<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href="https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>
<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>/etc/passwd</code></p>
<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32395">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>
<li><a href="https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>
<li><a href="https://github.com/advisories/GHSA-356w-63v5-8wf4">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-356w-63v5-8wf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`]]></title>
        <id>https://github.com/advisories/GHSA-356w-63v5-8wf4</id>
        <link href="https://github.com/advisories/GHSA-356w-63v5-8wf4"/>
        <updated>2025-04-11T14:06:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>
<h3 id="impact">Impact</h3>
<p>Only apps with the following conditions are affected.</p>
<ul>
<li>explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>)</li>
<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1">ref1</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3">ref2</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3">ref3</a>).</p>
<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href="https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>
<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>/etc/passwd</code></p>
<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32395">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>
<li><a href="https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>
<li><a href="https://github.com/advisories/GHSA-356w-63v5-8wf4">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-356w-63v5-8wf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`]]></title>
        <id>https://github.com/advisories/GHSA-356w-63v5-8wf4</id>
        <link href="https://github.com/advisories/GHSA-356w-63v5-8wf4"/>
        <updated>2025-04-11T14:06:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>
<h3 id="impact">Impact</h3>
<p>Only apps with the following conditions are affected.</p>
<ul>
<li>explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>)</li>
<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1">ref1</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3">ref2</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3">ref3</a>).</p>
<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href="https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>
<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>/etc/passwd</code></p>
<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32395">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>
<li><a href="https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>
<li><a href="https://github.com/advisories/GHSA-356w-63v5-8wf4">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-356w-63v5-8wf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has an `server.fs.deny` bypass with an invalid `request-target`]]></title>
        <id>https://github.com/advisories/GHSA-356w-63v5-8wf4</id>
        <link href="https://github.com/advisories/GHSA-356w-63v5-8wf4"/>
        <updated>2025-04-11T14:06:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.</p>
<h3 id="impact">Impact</h3>
<p>Only apps with the following conditions are affected.</p>
<ul>
<li>explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>)</li>
<li>running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)</li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2">HTTP 1.1 spec (RFC 9112) does not allow <code>#</code> in <code>request-target</code></a>. Although an attacker can send such a request. For those requests with an invalid <code>request-line</code> (it includes <code>request-target</code>), the spec <a href="https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4">recommends to reject them with 400 or 301</a>. The same can be said for HTTP 2 (<a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1">ref1</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3">ref2</a>, <a href="https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3">ref3</a>).</p>
<p>On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of <a href="https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl"><code>http.IncomingMessage.url</code></a> contains <code>#</code>. Vite assumed <code>req.url</code> won't contain <code>#</code> when checking <code>server.fs.deny</code>, allowing those kinds of requests to bypass the check.</p>
<p>On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of <code>http.IncomingMessage.url</code> did not contain <code>#</code>. </p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>/etc/passwd</code></p>
<pre><code>curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4">https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32395">https://nvd.nist.gov/vuln/detail/CVE-2025-32395</a></li>
<li><a href="https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70">https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</a></li>
<li><a href="https://github.com/advisories/GHSA-356w-63v5-8wf4">https://github.com/advisories/GHSA-356w-63v5-8wf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-356w-63v5-8wf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-11T14:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flowise-components] Flowise Vulnerable to SQL Injection via `tableName` Parameter]]></title>
        <id>https://github.com/advisories/GHSA-gjx9-wg9x-7gvp</id>
        <link href="https://github.com/advisories/GHSA-gjx9-wg9x-7gvp"/>
        <updated>2025-04-10T14:18:52.000Z</updated>
        <content type="html"><![CDATA[<p>Flowise &lt;= 2.2.3 is vulnerable to SQL Injection. via tableName parameter at Postgres_VectorStores.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29189">https://nvd.nist.gov/vuln/detail/CVE-2025-29189</a></li>
<li><a href="https://drive.google.com/file/d/1WHPslTmQmAM9xPJifULS2qAo7hcidB4L/view?usp=sharing">https://drive.google.com/file/d/1WHPslTmQmAM9xPJifULS2qAo7hcidB4L/view?usp=sharing</a></li>
<li><a href="https://github.com/FlowiseAI/Flowise/pull/3818">https://github.com/FlowiseAI/Flowise/pull/3818</a></li>
<li><a href="https://github.com/FlowiseAI/Flowise/commit/9a417bdc95f58d6dd92cbf60dad42414aba34754">https://github.com/FlowiseAI/Flowise/commit/9a417bdc95f58d6dd92cbf60dad42414aba34754</a></li>
<li><a href="https://github.com/advisories/GHSA-gjx9-wg9x-7gvp">https://github.com/advisories/GHSA-gjx9-wg9x-7gvp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gjx9-wg9x-7gvp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-09T12:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-opcua-alarm-condition] node-opcua-alarm-condition prototype pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gvwq-6fmx-28xm</id>
        <link href="https://github.com/advisories/GHSA-gvwq-6fmx-28xm"/>
        <updated>2025-04-10T12:50:03.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the function fieldsToJson of node-opcua-alarm-condition v2.134.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57086">https://nvd.nist.gov/vuln/detail/CVE-2024-57086</a></li>
<li><a href="https://gist.github.com/tariqhawis/30acc3632cf595ca5825b7ec2b2f795a">https://gist.github.com/tariqhawis/30acc3632cf595ca5825b7ec2b2f795a</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/issues/1433#issuecomment-2791824350">https://github.com/node-opcua/node-opcua/issues/1433#issuecomment-2791824350</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/blob/330db56bb62bce9fff80382daee1fac94311978d/packages/node-opcua-alarm-condition/test/test_cve_polution_attack.ts">https://github.com/node-opcua/node-opcua/blob/330db56bb62bce9fff80382daee1fac94311978d/packages/node-opcua-alarm-condition/test/test_cve_polution_attack.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-gvwq-6fmx-28xm">https://github.com/advisories/GHSA-gvwq-6fmx-28xm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gvwq-6fmx-28xm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-cdk-lib] AWS CDK CodePipeline: trusted entities are too broad]]></title>
        <id>https://github.com/advisories/GHSA-5pq3-h73f-66hr</id>
        <link href="https://github.com/advisories/GHSA-5pq3-h73f-66hr"/>
        <updated>2025-04-10T02:03:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://aws.amazon.com/cdk/">AWS Cloud Development Kit (CDK)</a> is an open-source framework for defining cloud infrastructure using code. Users use it to create their own applications, which are converted to AWS CloudFormation templates during deployment to a user's AWS account. AWS CDK contains pre-built components called "constructs," which are higher-level abstractions providing defaults and best practices. This approach enables developers to use familiar programming languages to define complex cloud infrastructure more efficiently than writing raw CloudFormation templates.</p>
<p>The <a href="https://aws.amazon.com/codepipeline/">AWS CodePipeline</a> construct deploys CodePipeline, a managed service that orchestrates software release processes through a series of stages, each comprising one or more actions executed by CodePipeline. To perform these actions, CodePipeline assumes IAM roles with permissions necessary for each step, allowing it to interact with AWS services and resources on behalf of the user.</p>
<p>An issue exists where, when using CDK to create a CodePipeline with the CDK Construct Library, CDK creates an AWS Identity and Access Management (AWS IAM) trust policy with overly broad permissions. Any user with unrestricted sts:AssumeRole permissions could assume that trust policy. This issue does not affect users who supply their own role for CodePipeline.</p>
<h3 id="impact">Impact</h3>
<p>To leverage the issue, an actor has to be authenticated in the account and have an unrestricted sts:AssumeRole permission. The permissions an actor could leverage depend on the actions added to the pipeline. Possible permissions include actions on services such as CloudFormation, CodeCommit, Lambda, and ECS, as well as access to the S3 bucket holding pipeline build artifacts (<a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline_actions-readme.html">see documentation</a>). </p>
<p>Users can review their AWS CloudTrail logs for when the role was assumed to determine if this was expected. </p>
<h4 id="impacted-versions-v21890">Impacted versions: &lt;v2.189.0</h4>
<h3 id="patches">Patches</h3>
<p>The patches are included in the CDK Construct Library release <a href="https://github.com/aws/aws-cdk/releases/tag/v2.189.0">v2.189.0</a>. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>
<p>When new CDK applications using the latest version are initialized, they will use the new behavior with more restrictive permissions.</p>
<p>Existing applications must upgrade to the latest version, change the <a href="https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/cx-api/FEATURE_FLAGS.md">feature flag</a> (@aws-cdk/pipelines:reduceStageRoleTrustScope)  and (@aws-cdk/pipelines:reduceCrossAccountActionRoleTrustScope) to true and redeploy the application to apply this fix and use the new behavior with more restrictive permissions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can explicitly supply the role for your <a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline-readme.html#cross-account-codepipelines">CodePipeline</a> and follow the policy recommendations detailed in <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-create-cross-account.html">CodePipeline documentation</a>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/aws/aws-cdk/issues/33709">Original reporting issue.</a></p>
<p>If you have any questions or comments about this advisory please contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr">https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr</a></li>
<li><a href="https://github.com/aws/aws-cdk/issues/33709">https://github.com/aws/aws-cdk/issues/33709</a></li>
<li><a href="https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf">https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf</a></li>
<li><a href="https://github.com/aws/aws-cdk/releases/tag/v2.184.0">https://github.com/aws/aws-cdk/releases/tag/v2.184.0</a></li>
<li><a href="https://github.com/advisories/GHSA-5pq3-h73f-66hr">https://github.com/advisories/GHSA-5pq3-h73f-66hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pq3-h73f-66hr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-24T15:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[koa] Koajs vulnerable to Cross-Site Scripting (XSS) at ctx.redirect() function]]></title>
        <id>https://github.com/advisories/GHSA-x2rg-q646-7m2v</id>
        <link href="https://github.com/advisories/GHSA-x2rg-q646-7m2v"/>
        <updated>2025-04-09T20:29:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In koa &lt; 2.16.1 and &lt; 3.0.0-alpha.5, passing untrusted user input to ctx.redirect() even after sanitizing it, may execute javascript code on the user who use the app.</p>
<h3 id="patches">Patches</h3>
<p>This issue is patched in  2.16.1 and 3.0.0-alpha.5.</p>
<h3 id="poc">PoC</h3>
<p>Coming soon...</p>
<h3 id="impact">Impact</h3>
<ol>
<li>Redirect user to another phishing site</li>
<li>Make request to another endpoint of the application based on user's cookie</li>
<li>Steal user's cookie</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v">https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v</a></li>
<li><a href="https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312">https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32379">https://nvd.nist.gov/vuln/detail/CVE-2025-32379</a></li>
<li><a href="https://github.com/advisories/GHSA-x2rg-q646-7m2v">https://github.com/advisories/GHSA-x2rg-q646-7m2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2rg-q646-7m2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-09T13:00:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[koa] Koajs vulnerable to Cross-Site Scripting (XSS) at ctx.redirect() function]]></title>
        <id>https://github.com/advisories/GHSA-x2rg-q646-7m2v</id>
        <link href="https://github.com/advisories/GHSA-x2rg-q646-7m2v"/>
        <updated>2025-04-09T20:29:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In koa &lt; 2.16.1 and &lt; 3.0.0-alpha.5, passing untrusted user input to ctx.redirect() even after sanitizing it, may execute javascript code on the user who use the app.</p>
<h3 id="patches">Patches</h3>
<p>This issue is patched in  2.16.1 and 3.0.0-alpha.5.</p>
<h3 id="poc">PoC</h3>
<p>Coming soon...</p>
<h3 id="impact">Impact</h3>
<ol>
<li>Redirect user to another phishing site</li>
<li>Make request to another endpoint of the application based on user's cookie</li>
<li>Steal user's cookie</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v">https://github.com/koajs/koa/security/advisories/GHSA-x2rg-q646-7m2v</a></li>
<li><a href="https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312">https://github.com/koajs/koa/commit/ff25eb4a7f2392df46481fe86355161067687312</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32379">https://nvd.nist.gov/vuln/detail/CVE-2025-32379</a></li>
<li><a href="https://github.com/advisories/GHSA-x2rg-q646-7m2v">https://github.com/advisories/GHSA-x2rg-q646-7m2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2rg-q646-7m2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-09T13:00:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[crud-query-parser] crud-query-parser SQL Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9r25-rp3p-h2w4</id>
        <link href="https://github.com/advisories/GHSA-9r25-rp3p-h2w4"/>
        <updated>2025-04-09T12:57:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper neutralization of the <code>order</code>/<code>sort</code> parameter in the TypeORM adapter, which allows SQL injection.</p>
<p>You are impacted by this vulnerability if you are using the TypeORM adapter, ordering is enabled and you have not set-up a property filter.</p>
<p>Versions 0.0.1, 0.0.2 and 0.0.3 are affected by this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in version 0.1.0 and newer, which introduces TypeORM field validation (enabled by default).</p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="add-an-allowlist-of-fields">Add an allowlist of fields</h4>
<p>List all valid fields and use the <code>filterProperties</code> function to filter out invalid fields before passing the crudRequest to the <code>TypeOrmQueryAdapter</code>. Here's an example:</p>
<pre><code class="language-ts">crudRequest = filterProperties(crudRequest, ['id', 'title', 'category.name']);
</code></pre>
<h4 id="disable-ordering">Disable ordering</h4>
<p>Cleanup the <code>order</code> field just before passing it to the <code>TypeOrmQueryAdapter</code>. Here's an example:</p>
<pre><code class="language-ts">crudRequest.order = [];
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Guichaguri/crud-query-parser/security/advisories/GHSA-9r25-rp3p-h2w4">https://github.com/Guichaguri/crud-query-parser/security/advisories/GHSA-9r25-rp3p-h2w4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32020">https://nvd.nist.gov/vuln/detail/CVE-2025-32020</a></li>
<li><a href="https://github.com/advisories/GHSA-9r25-rp3p-h2w4">https://github.com/advisories/GHSA-9r25-rp3p-h2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r25-rp3p-h2w4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-09T12:57:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apeleghq/asn1-der] ts-asn1-der has Incorrect DER Encoding of Numbers Leading to Denial of Service and Incorrect Value Representation]]></title>
        <id>https://github.com/advisories/GHSA-p4qw-7j9g-5h53</id>
        <link href="https://github.com/advisories/GHSA-p4qw-7j9g-5h53"/>
        <updated>2025-04-08T17:49:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Incorrect <code>number</code> DER encoding can lead to denial on service for absolute values in the range <code>2**31</code> -- <code>2**32 - 1</code>. The arithmetic in the <code>numBitLen</code> didn't take into account that values in this range could result in a negative result upon applying the <code>&gt;&gt;</code> operator, leading to an infinite loop.</p>
<p>In addition, <code>number</code> encoding had a few other issues that resulted it in it not encoding values correctly.</p>
<h3 id="patches">Patches</h3>
<p>The issue is patched in version <code>1.0.4</code>. Users are recommended to upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If upgrading is not an option, the issue can be mitigated by validating inputs to <code>Asn1Integer</code> to ensure that they are not smaller than <code>-2**31 + 1</code> and no larger than <code>2**31 - 1</code>. Although <code>Asn1Integer</code> supports <code>bigint</code> inputs, some additional implementation issues make using <code>bigint</code> as a mitigation inviable, as it will result in incorrect values.</p>
<p>If upgrading is not an option and range checks are impractical or undesirable, input to <code>Asn1Integer</code> can be provided as a buffer to be used directly. Note that this requires computing the correct DER encoding externally.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ApelegHQ/ts-asn1-der/security/advisories/GHSA-p4qw-7j9g-5h53">https://github.com/ApelegHQ/ts-asn1-der/security/advisories/GHSA-p4qw-7j9g-5h53</a></li>
<li><a href="https://github.com/ApelegHQ/ts-asn1-der/commit/b2bc9032cbe19755d234a27d79e47a7e52993af8">https://github.com/ApelegHQ/ts-asn1-der/commit/b2bc9032cbe19755d234a27d79e47a7e52993af8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32029">https://nvd.nist.gov/vuln/detail/CVE-2025-32029</a></li>
<li><a href="https://github.com/advisories/GHSA-p4qw-7j9g-5h53">https://github.com/advisories/GHSA-p4qw-7j9g-5h53</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4qw-7j9g-5h53</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-07T21:11:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[estree-util-value-to-estree] estree-util-value-to-estree allows prototype pollution in generated ESTree]]></title>
        <id>https://github.com/advisories/GHSA-f7f6-9jq7-3rqj</id>
        <link href="https://github.com/advisories/GHSA-f7f6-9jq7-3rqj"/>
        <updated>2025-04-07T19:09:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When generating an ESTree from a value with a property named <code>__proto__</code>, <code>valueToEstree</code> would generate an object that specifies a prototype instead.</p>
<p>Example:</p>
<pre><code class="language-js">import { generate } from 'astring'
import { valueToEstree } from 'estree-util-value-to-estree'

const estree = valueToEstree({
  ['__proto__']: {}
})
const code = generate(estree)
console.log(code)
</code></pre>
<p>Output:</p>
<pre><code class="language-js">{
  "__proto__": {}
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>This was fixed in version <a href="https://github.com/remcohaszing/estree-util-value-to-estree/releases/tag/v3.3.3">3.3.3</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you control the input, don’t specify a property named <code>__proto__</code>. If you don’t control the output, strip any properties named <code>__proto__</code> before passing it to <code>valueToEstree</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remcohaszing/estree-util-value-to-estree/security/advisories/GHSA-f7f6-9jq7-3rqj">https://github.com/remcohaszing/estree-util-value-to-estree/security/advisories/GHSA-f7f6-9jq7-3rqj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32014">https://nvd.nist.gov/vuln/detail/CVE-2025-32014</a></li>
<li><a href="https://github.com/remcohaszing/estree-util-value-to-estree/commit/d0c394fbc64bc55937ffe4e162b81f15ba506e55">https://github.com/remcohaszing/estree-util-value-to-estree/commit/d0c394fbc64bc55937ffe4e162b81f15ba506e55</a></li>
<li><a href="https://github.com/advisories/GHSA-f7f6-9jq7-3rqj">https://github.com/advisories/GHSA-f7f6-9jq7-3rqj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f7f6-9jq7-3rqj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-07T19:09:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apollo/gateway] Apollo Gateway Query Planner Vulnerable to Excessive Resource Consumption via Optimization Bypass]]></title>
        <id>https://github.com/advisories/GHSA-p2q6-pwh5-m6jr</id>
        <link href="https://github.com/advisories/GHSA-p2q6-pwh5-m6jr"/>
        <updated>2025-04-08T17:51:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<h2 id="summary">Summary</h2>
<p>A vulnerability in Apollo Gateway allowed queries with deeply nested and reused named fragments to be prohibitively expensive to query plan, specifically due to internal optimizations being frequently bypassed. This could lead to excessive resource consumption and denial of service.</p>
<h2 id="details">Details</h2>
<p>The query planner includes an optimization that significantly speeds up planning for applicable GraphQL selections. However, queries with deeply nested and reused named fragments can generate many selections where this optimization does not apply, leading to significantly longer planning times. Because the query planner does not enforce a timeout, a small number of such queries can render gateway inoperable.</p>
<h2 id="fixmitigation">Fix/Mitigation</h2>
<ul>
<li>A new <strong>Query Optimization Limit</strong> metric has been added:<ul>
<li>This metric approximates the number of selections that cannot be skipped by the existing optimization.</li>
<li>The metric is checked against a limit to prevent excessive computation.</li>
</ul>
</li>
</ul>
<p>Given the complexity of query planning optimizations, we will continue refining these solutions based on real-world performance and accuracy tests.</p>
<h1 id="patches">Patches</h1>
<p>This has been remediated in <code>@apollo/gateway</code> version 2.10.1.</p>
<h1 id="workarounds">Workarounds</h1>
<p>No known direct workarounds exist.</p>
<h1 id="references">References</h1>
<p><a href="https://www.apollographql.com/docs/graphos/reference/federation/query-plans">Query Planning Documentation</a></p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query planning mechanisms.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/federation/security/advisories/GHSA-p2q6-pwh5-m6jr">https://github.com/apollographql/federation/security/advisories/GHSA-p2q6-pwh5-m6jr</a></li>
<li><a href="https://github.com/apollographql/federation/pull/3236">https://github.com/apollographql/federation/pull/3236</a></li>
<li><a href="https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1">https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32031">https://nvd.nist.gov/vuln/detail/CVE-2025-32031</a></li>
<li><a href="https://github.com/advisories/GHSA-p2q6-pwh5-m6jr">https://github.com/advisories/GHSA-p2q6-pwh5-m6jr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2q6-pwh5-m6jr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-07T19:03:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apollo/gateway] Apollo Gateway Query Planner Vulnerable to Excessive Resource Consumption via Named Fragment Expansion]]></title>
        <id>https://github.com/advisories/GHSA-q2f9-x4p4-7xmh</id>
        <link href="https://github.com/advisories/GHSA-q2f9-x4p4-7xmh"/>
        <updated>2025-04-08T17:51:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<h2 id="summary">Summary</h2>
<p>A vulnerability in Apollo Gateway allowed queries with deeply nested and reused named fragments to be prohibitively expensive to query plan, specifically during named fragment expansion. This could lead to excessive resource consumption and denial of service.</p>
<h2 id="details">Details</h2>
<p>Named fragments were being expanded once per fragment spread during query planning, leading to exponential resource usage when deeply nested and reused fragments were involved.</p>
<h2 id="fixmitigation">Fix/Mitigation</h2>
<p>A new <strong>Query Fragment Expansion Limit</strong> metric has been introduced:</p>
<ul>
<li>This metric computes the number of selections a query would have if its fragment spreads were fully expanded.</li>
<li>The metric is checked against a limit to prevent excessive computation.</li>
</ul>
<h1 id="patches">Patches</h1>
<p>This has been remediated in <code>@apollo/gateway</code> version 2.10.1.</p>
<h1 id="workarounds">Workarounds</h1>
<p>No known direct workarounds exist.</p>
<h1 id="references">References</h1>
<p><a href="https://www.apollographql.com/docs/graphos/reference/federation/query-plans">Query Planning Documentation</a></p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We appreciate the efforts of the security community in identifying and improving the performance and security of query planning mechanisms.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/federation/security/advisories/GHSA-q2f9-x4p4-7xmh">https://github.com/apollographql/federation/security/advisories/GHSA-q2f9-x4p4-7xmh</a></li>
<li><a href="https://github.com/apollographql/federation/pull/3236">https://github.com/apollographql/federation/pull/3236</a></li>
<li><a href="https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1">https://github.com/apollographql/federation/releases/tag/%40apollo%2Fgateway%402.10.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32030">https://nvd.nist.gov/vuln/detail/CVE-2025-32030</a></li>
<li><a href="https://github.com/advisories/GHSA-q2f9-x4p4-7xmh">https://github.com/advisories/GHSA-q2f9-x4p4-7xmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2f9-x4p4-7xmh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-07T19:03:10.000Z</published>
    </entry>
</feed>