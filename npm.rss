<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-05-28T23:50:18.326Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[next] Information exposure in Next.js dev server due to lack of origin verification]]></title>
        <id>https://github.com/advisories/GHSA-3h52-269p-cp9r</id>
        <link href="https://github.com/advisories/GHSA-3h52-269p-cp9r"/>
        <updated>2025-05-28T21:52:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This vulnerability is similar to CVE-2018-14732. When running a Next.js server locally (e.g. through <code>npm run dev</code>), the WebSocket server is vulnerable to the Cross-site WebSocket hijacking (CSWSH) attack. and a bad actor can access the source code of client components, if a user was to visit a malicious link while having the Next.js dev server running.</p>
<h3 id="impact">Impact</h3>
<p>If a user is running a Next.js server locally (e.g. <code>npm run dev</code>), and they were to browse to a malicious website, the malicious website may be able to access the source code of the Next.js app. This vulnerability only affects applications making use of App Router.</p>
<p><em>Note: App Router was experimental requiring</em> <code>experimental.appDir = true</code> <em>in versions</em> <code>&gt;=13.0.0</code> to  <code>&lt;13.4</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r">https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r</a></li>
<li><a href="https://github.com/advisories/GHSA-3h52-269p-cp9r">https://github.com/advisories/GHSA-3h52-269p-cp9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h52-269p-cp9r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T21:52:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-05-27T18:49:22.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.x before 2.1.3 and 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://www.npmjs.com/package/formidable/v/2.1.3">https://www.npmjs.com/package/formidable/v/2.1.3</a></li>
<li><a href="https://www.npmjs.com/package/formidable/v/3.5.3">https://www.npmjs.com/package/formidable/v/3.5.3</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@supabase/auth-js] auth-js Vulnerable to Insecure Path Routing from Malformed User Input]]></title>
        <id>https://github.com/advisories/GHSA-8r88-6cj9-9fh5</id>
        <link href="https://github.com/advisories/GHSA-8r88-6cj9-9fh5"/>
        <updated>2025-05-28T19:42:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The library functions <code>getUserById</code>, <code>deleteUser</code>, <code>updateUserById</code>, <code>listFactors</code> and <code>deleteFactor</code> did not require the user supplied values to be valid UUIDs. This could lead to a URL path traversal, resulting in the wrong API function being called.</p>
<p>Implementations that follow security best practice and validate user controlled inputs, such as the <code>userId</code> are not affected by this.</p>
<h3 id="patches">Patches</h3>
<p>Strict value checks have been added to all affected functions. These functions now require that the <code>userId</code> and <code>factorId</code> parameters MUST be valid UUID (v4).</p>
<p><strong>Patched version:</strong> &gt;= 2.69.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>Implementations that follow security best practice and validate user controlled inputs, such as the <code>userId</code> are not affected by this. It is recommended that users of the auth-js library always follow security best practice and validate all inputs, before passing these to other functions or libraries.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/supabase/auth-js/pull/1063">https://github.com/supabase/auth-js/pull/1063</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/supabase/auth-js/security/advisories/GHSA-8r88-6cj9-9fh5">https://github.com/supabase/auth-js/security/advisories/GHSA-8r88-6cj9-9fh5</a></li>
<li><a href="https://github.com/supabase/auth-js/pull/1063">https://github.com/supabase/auth-js/pull/1063</a></li>
<li><a href="https://github.com/supabase/auth-js/commit/1bcb76e479e51cd9bca2d7732d0bf3199e07a693">https://github.com/supabase/auth-js/commit/1bcb76e479e51cd9bca2d7732d0bf3199e07a693</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48370">https://nvd.nist.gov/vuln/detail/CVE-2025-48370</a></li>
<li><a href="https://github.com/advisories/GHSA-8r88-6cj9-9fh5">https://github.com/advisories/GHSA-8r88-6cj9-9fh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r88-6cj9-9fh5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-27T18:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/admin] Strapi allows Server-Side Request Forgery in Webhook function]]></title>
        <id>https://github.com/advisories/GHSA-v8wj-f5c7-pvxf</id>
        <link href="https://github.com/advisories/GHSA-v8wj-f5c7-pvxf"/>
        <updated>2025-05-27T17:59:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>In Strapi latest version, at function Settings -&gt; Webhooks, the application allows us to input a URL in order to create a Webook connection. However, we can input into this field the local domains such as <code>localhost</code>, <code>127.0.0.1</code>, <code>0.0.0.0</code>,.... in order to make the Application fetching into the internal itself, which causes the vulnerability <code>Server - Side Request Forgery (SSRF)</code>.</p>
<h2 id="payloads">Payloads</h2>
<ul>
<li><code>http://127.0.0.1:80</code> -&gt; <code>The Port is not open</code></li>
<li><code>http://127.0.0.1:1337</code> -&gt; <code>The Port which Strapi is running on</code></li>
</ul>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ul>
<li>First of all, let's input the URL <code>http://127.0.0.1:80</code> into the <code>URL</code> field, and click "Save".</li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 45 17@2x" src="https://github.com/strapi/strapi/assets/71650574/7336b817-cb61-41e6-9b3f-87151d8667e9"></p>
<ul>
<li>Next, use the "Trigger" function and use Burp Suite to capture the request / response</li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 47 50@2x" src="https://github.com/strapi/strapi/assets/71650574/659f1bbe-6b03-456c-a9c2-5187fca20dd6"></p>
<ul>
<li>The server return <code>request to http://127.0.0.1/ failed, reason: connect ECONNREFUSED 127.0.0.1:80</code>, BECAUSE the <code>Port 80</code> is not open, since we are running Strapi on <code>Port 1337</code>, let's change the URL we input above into <code>http://127.0.0.1:1337</code></li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 50 13@2x" src="https://github.com/strapi/strapi/assets/71650574/a7916c86-1923-49ed-bd43-a70fa00d41e9"></p>
<ul>
<li>Continue to click the "Trigger" function, use Burp to capture the request / response</li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 53 25@2x" src="https://github.com/strapi/strapi/assets/71650574/6fc51bb7-5a66-4b2b-b24f-2eba45ba1db9"></p>
<ul>
<li>The server returns <code>Method Not Allowed</code>, which means that there actually is a <code>Port 1337</code> running the machine.</li>
</ul>
<h2 id="poc">PoC</h2>
<p>Here is the Poc Video, please check: </p>
<p><a href="https://drive.google.com/file/d/1EvVp9lMpYnGLmUyr16gQ_2RetI-GqYjV/view?usp=sharing">https://drive.google.com/file/d/1EvVp9lMpYnGLmUyr16gQ_2RetI-GqYjV/view?usp=sharing</a></p>
<h2 id="impact">Impact</h2>
<ul>
<li>If there is a real server running Strapi with many ports open, by using this SSRF vulnerability, the attacker can brute-force through all 65535 ports to know what ports are open.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-v8wj-f5c7-pvxf">https://github.com/strapi/strapi/security/advisories/GHSA-v8wj-f5c7-pvxf</a></li>
<li><a href="https://github.com/advisories/GHSA-v8wj-f5c7-pvxf">https://github.com/advisories/GHSA-v8wj-f5c7-pvxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8wj-f5c7-pvxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-27T17:59:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[marked] Marked allows Regular Expression Denial of Service (ReDoS) attacks]]></title>
        <id>https://github.com/advisories/GHSA-p9wx-2529-fp83</id>
        <link href="https://github.com/advisories/GHSA-p9wx-2529-fp83"/>
        <updated>2025-05-27T15:03:48.000Z</updated>
        <content type="html"><![CDATA[<p>Marked prior to version 0.3.17 is vulnerable to a Regular Expression Denial of Service (ReDoS) attack due to catastrophic backtracking in several regular expressions used for parsing HTML tags and markdown links. An attacker can exploit this vulnerability by providing specially crafted markdown input, such as deeply nested or repetitively structured brackets or tag attributes, which cause the parser to hang and lead to a Denial of Service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25110">https://nvd.nist.gov/vuln/detail/CVE-2018-25110</a></li>
<li><a href="https://github.com/markedjs/marked/issues/1070">https://github.com/markedjs/marked/issues/1070</a></li>
<li><a href="https://github.com/markedjs/marked/pull/1083">https://github.com/markedjs/marked/pull/1083</a></li>
<li><a href="https://github.com/markedjs/marked/commit/20bfc106013ed45713a21672ad4a34df94dcd485">https://github.com/markedjs/marked/commit/20bfc106013ed45713a21672ad4a34df94dcd485</a></li>
<li><a href="https://github.com/Checkmarx/Vulnerabilities-Proofs-of-Concept/tree/main/2018/CVE-2018-25110">https://github.com/Checkmarx/Vulnerabilities-Proofs-of-Concept/tree/main/2018/CVE-2018-25110</a></li>
<li><a href="https://github.com/advisories/GHSA-p9wx-2529-fp83">https://github.com/advisories/GHSA-p9wx-2529-fp83</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9wx-2529-fp83</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-23T15:31:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[radashi] radashi Allows Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')]]></title>
        <id>https://github.com/advisories/GHSA-2xv9-ghh9-xc69</id>
        <link href="https://github.com/advisories/GHSA-2xv9-ghh9-xc69"/>
        <updated>2025-05-27T15:03:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a prototype pollution vulnerability. It impacts users of the <code>set</code> function within the Radashi library. If an attacker can control parts of the <code>path</code> argument to the <code>set</code> function, they could potentially modify the prototype of all objects in the JavaScript runtime, leading to unexpected behavior, denial of service, or even remote code execution in some specific scenarios.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in commit <a href="https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66"><code>8147abc8cfc3cfe9b9a17cd389076a5d97235a66</code></a>. Users should upgrade to a version of Radashi that includes this commit. The fix utilizes a new helper function, <code>isDangerousKey</code>, to prevent the use of <code>__proto__</code>, <code>prototype</code>, or <code>constructor</code> as keys in the path, throwing an error if any are encountered. This check is bypassed for objects with a <code>null</code> prototype.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users on older versions can mitigate this vulnerability by sanitizing the <code>path</code> argument provided to the <code>set</code> function to ensure that no part of the path string is <code>__proto__</code>, <code>prototype</code>, or <code>constructor</code>. For example, by checking each segment of the path before passing it to the <code>set</code> function.</p>
<h3 id="references">References</h3>
<ul>
<li>Git commit: <a href="https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66"><code>8147abc8cfc3cfe9b9a17cd389076a5d97235a66</code></a></li>
<li>CWE-1321: Improperly Controlled Modification of Dynamically-Determined Object Attributes ('Prototype Pollution'): <a href="https://cwe.mitre.org/data/definitions/1321.html">https://cwe.mitre.org/data/definitions/1321.html</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/radashi-org/radashi/security/advisories/GHSA-2xv9-ghh9-xc69">https://github.com/radashi-org/radashi/security/advisories/GHSA-2xv9-ghh9-xc69</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48054">https://nvd.nist.gov/vuln/detail/CVE-2025-48054</a></li>
<li><a href="https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66">https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66</a></li>
<li><a href="https://github.com/advisories/GHSA-2xv9-ghh9-xc69">https://github.com/advisories/GHSA-2xv9-ghh9-xc69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xv9-ghh9-xc69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-27T15:03:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[connect-multiparty] Connect-Multiparty allows arbitrary file upload]]></title>
        <id>https://github.com/advisories/GHSA-w2xw-44r3-4v9g</id>
        <link href="https://github.com/advisories/GHSA-w2xw-44r3-4v9g"/>
        <updated>2025-05-20T19:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the file upload module of Express Connect-Multiparty 2.2.0 allows attackers to execute arbitrary code via a crafted PDF file. NOTE: the Supplier has not verified this vulnerability report.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29623">https://nvd.nist.gov/vuln/detail/CVE-2022-29623</a></li>
<li><a href="https://www.youtube.com/watch?v=i3xJR-91rrM">https://www.youtube.com/watch?v=i3xJR-91rrM</a></li>
<li><a href="https://github.com/expressjs/connect-multiparty/releases/tag/2.2.0">https://github.com/expressjs/connect-multiparty/releases/tag/2.2.0</a></li>
<li><a href="https://www.npmjs.com/package/connect-multiparty">https://www.npmjs.com/package/connect-multiparty</a></li>
<li><a href="https://github.com/advisories/GHSA-w2xw-44r3-4v9g">https://github.com/advisories/GHSA-w2xw-44r3-4v9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w2xw-44r3-4v9g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T00:01:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File]]></title>
        <id>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</id>
        <link href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx"/>
        <updated>2025-05-20T17:57:27.000Z</updated>
        <content type="html"><![CDATA[<p>An Improper Link Resolution Before File Access ("Link Following") and Improper Limitation of a Pathname to a Restricted Directory ("Path Traversal"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>
<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12905">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-27T18:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[samlify] samlify SAML Signature Wrapping attack]]></title>
        <id>https://github.com/advisories/GHSA-r683-v43c-6xqv</id>
        <link href="https://github.com/advisories/GHSA-r683-v43c-6xqv"/>
        <updated>2025-05-19T22:33:01.000Z</updated>
        <content type="html"><![CDATA[<p>A Signature Wrapping attack has been found in samlify &lt;v2.10.0, allowing an attacker to forge a SAML Response to authenticate as any user. 
An attacker would need a signed XML document by the identity provider.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tngan/samlify/security/advisories/GHSA-r683-v43c-6xqv">https://github.com/tngan/samlify/security/advisories/GHSA-r683-v43c-6xqv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47949">https://nvd.nist.gov/vuln/detail/CVE-2025-47949</a></li>
<li><a href="https://github.com/tngan/samlify/commit/115679acd89f0a37ea3ebd8fff7db54fca3e8af3">https://github.com/tngan/samlify/commit/115679acd89f0a37ea3ebd8fff7db54fca3e8af3</a></li>
<li><a href="https://github.com/advisories/GHSA-r683-v43c-6xqv">https://github.com/advisories/GHSA-r683-v43c-6xqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r683-v43c-6xqv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-05-19T22:33:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[multer] Multer vulnerable to Denial of Service from maliciously crafted requests]]></title>
        <id>https://github.com/advisories/GHSA-4pg4-qvpc-4q3h</id>
        <link href="https://github.com/advisories/GHSA-4pg4-qvpc-4q3h"/>
        <updated>2025-05-21T20:37:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in Multer versions &gt;=1.4.4-lts.1 allows an attacker to trigger a Denial of Service (DoS) by sending a malformed multi-part upload request. This request causes an unhandled exception, leading to a crash of the process.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to <code>2.0.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/expressjs/multer/issues/1176">https://github.com/expressjs/multer/issues/1176</a></li>
<li><a href="https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665">https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/multer/security/advisories/GHSA-4pg4-qvpc-4q3h">https://github.com/expressjs/multer/security/advisories/GHSA-4pg4-qvpc-4q3h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47944">https://nvd.nist.gov/vuln/detail/CVE-2025-47944</a></li>
<li><a href="https://github.com/expressjs/multer/issues/1176">https://github.com/expressjs/multer/issues/1176</a></li>
<li><a href="https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665">https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665</a></li>
<li><a href="https://github.com/advisories/GHSA-4pg4-qvpc-4q3h">https://github.com/advisories/GHSA-4pg4-qvpc-4q3h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4pg4-qvpc-4q3h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-19T22:16:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[multer] Multer vulnerable to Denial of Service via memory leaks from unclosed streams]]></title>
        <id>https://github.com/advisories/GHSA-44fp-w29j-9vj5</id>
        <link href="https://github.com/advisories/GHSA-44fp-w29j-9vj5"/>
        <updated>2025-05-19T22:04:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Multer &lt;2.0.0 is vulnerable to a resource exhaustion and memory leak issue due to improper stream handling. When the HTTP request stream emits an error, the internal <code>busboy</code> stream is not closed, violating Node.js stream safety guidance.</p>
<p>This leads to unclosed streams accumulating over time, consuming memory and file descriptors. Under sustained or repeated failure conditions, this can result in denial of service, requiring manual server restarts to recover. All users of Multer handling file uploads are potentially impacted.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to <code>2.0.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/expressjs/multer/pull/1120">https://github.com/expressjs/multer/pull/1120</a></li>
<li><a href="https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665">https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/multer/security/advisories/GHSA-44fp-w29j-9vj5">https://github.com/expressjs/multer/security/advisories/GHSA-44fp-w29j-9vj5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47935">https://nvd.nist.gov/vuln/detail/CVE-2025-47935</a></li>
<li><a href="https://github.com/expressjs/multer/pull/1120">https://github.com/expressjs/multer/pull/1120</a></li>
<li><a href="https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665">https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665</a></li>
<li><a href="https://github.com/advisories/GHSA-44fp-w29j-9vj5">https://github.com/advisories/GHSA-44fp-w29j-9vj5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-44fp-w29j-9vj5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-19T22:04:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openpgp] OpenPGP.js's message signature verification can be spoofed]]></title>
        <id>https://github.com/advisories/GHSA-8qff-qr5q-5pr8</id>
        <link href="https://github.com/advisories/GHSA-8qff-qr5q-5pr8"/>
        <updated>2025-05-19T21:54:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously modified message can be passed to either <code>openpgp.verify</code> or <code>openpgp.decrypt</code>, causing these functions to return a valid signature verification result while returning data that was not actually signed.</p>
<p>This flaw allows signature verifications of inline (non-detached) signed messages (using <code>openpgp.verify</code>) and signed-and-encrypted messages (using <code>openpgp.decrypt</code> with <code>verificationKeys</code>) to be spoofed, since both functions return extracted data that may not match the data that was originally signed. Detached signature verifications are not affected, as no signed data is returned in that case.</p>
<p>In order to spoof a message, the attacker needs a single valid message signature (inline or detached) as well as the plaintext data that was legitimately signed, and can then construct an inline-signed message or signed-and-encrypted message with any data of the attacker's choice, which will appear as legitimately signed by affected versions of OpenPGP.js.</p>
<p>In other words. any inline-signed message can be modified to return any other data (while still indicating that the signature was valid), and the same is true for signed+encrypted messages if the attacker can obtain a valid signature and encrypt a new message (of the attacker's choice) together with that signature.</p>
<p>Both OpenPGP.js v6 and v5 are affected. OpenPGP.js v4 is not affected.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions 5.11.3 and 6.1.1.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>When verifying inline-signed messages, extract the message and signature(s) from the message returned by <code>openpgp.readMessage</code>, and verify the(/each) signature as a detached signature by passing the signature and a new message containing only the data (created using <code>openpgp.createMessage</code>) to <code>openpgp.verify</code>.</li>
<li>When decrypting and verifying signed+encrypted messages, decrypt and verify the message in two steps, by first calling <code>openpgp.decrypt</code> without <code>verificationKeys</code>, and then passing the returned signature(s) and a new message containing the decrypted data (created using <code>openpgp.createMessage</code>) to <code>openpgp.verify</code>.</li>
</ul>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>We would like to thank:</p>
<ul>
<li>Edoardo Geraci and Thomas Rinsma of <a href="https://codeanlabs.com/">Codean Labs</a> for finding and reporting this vulnerability</li>
<li>The <a href="https://www.sovereign.tech/">Sovereign Tech Agency</a> for sponsoring the <a href="https://yeswehack.com/programs/openpgp-js-bug-bounty-program">OpenPGP.js bug bounty program</a></li>
<li><a href="https://www.yeswehack.com/">YesWeHack</a> for hosting the <a href="https://yeswehack.com/programs/openpgp-js-bug-bounty-program">OpenPGP.js bug bounty program</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-8qff-qr5q-5pr8">https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-8qff-qr5q-5pr8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47934">https://nvd.nist.gov/vuln/detail/CVE-2025-47934</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/43f5f4e2bd67d0514d06acc60b6ee571a049c229">https://github.com/openpgpjs/openpgpjs/commit/43f5f4e2bd67d0514d06acc60b6ee571a049c229</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/843a69d0adbdec0f87af09f9000a9223e6614e5c">https://github.com/openpgpjs/openpgpjs/commit/843a69d0adbdec0f87af09f9000a9223e6614e5c</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/bd54e8535ca29b3bef58a8c02296892e408be356">https://github.com/openpgpjs/openpgpjs/commit/bd54e8535ca29b3bef58a8c02296892e408be356</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v5.11.3">https://github.com/openpgpjs/openpgpjs/releases/tag/v5.11.3</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v6.1.1">https://github.com/openpgpjs/openpgpjs/releases/tag/v6.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-8qff-qr5q-5pr8">https://github.com/advisories/GHSA-8qff-qr5q-5pr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qff-qr5q-5pr8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-19T21:54:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openpgp] OpenPGP.js's message signature verification can be spoofed]]></title>
        <id>https://github.com/advisories/GHSA-8qff-qr5q-5pr8</id>
        <link href="https://github.com/advisories/GHSA-8qff-qr5q-5pr8"/>
        <updated>2025-05-19T21:54:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously modified message can be passed to either <code>openpgp.verify</code> or <code>openpgp.decrypt</code>, causing these functions to return a valid signature verification result while returning data that was not actually signed.</p>
<p>This flaw allows signature verifications of inline (non-detached) signed messages (using <code>openpgp.verify</code>) and signed-and-encrypted messages (using <code>openpgp.decrypt</code> with <code>verificationKeys</code>) to be spoofed, since both functions return extracted data that may not match the data that was originally signed. Detached signature verifications are not affected, as no signed data is returned in that case.</p>
<p>In order to spoof a message, the attacker needs a single valid message signature (inline or detached) as well as the plaintext data that was legitimately signed, and can then construct an inline-signed message or signed-and-encrypted message with any data of the attacker's choice, which will appear as legitimately signed by affected versions of OpenPGP.js.</p>
<p>In other words. any inline-signed message can be modified to return any other data (while still indicating that the signature was valid), and the same is true for signed+encrypted messages if the attacker can obtain a valid signature and encrypt a new message (of the attacker's choice) together with that signature.</p>
<p>Both OpenPGP.js v6 and v5 are affected. OpenPGP.js v4 is not affected.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions 5.11.3 and 6.1.1.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>When verifying inline-signed messages, extract the message and signature(s) from the message returned by <code>openpgp.readMessage</code>, and verify the(/each) signature as a detached signature by passing the signature and a new message containing only the data (created using <code>openpgp.createMessage</code>) to <code>openpgp.verify</code>.</li>
<li>When decrypting and verifying signed+encrypted messages, decrypt and verify the message in two steps, by first calling <code>openpgp.decrypt</code> without <code>verificationKeys</code>, and then passing the returned signature(s) and a new message containing the decrypted data (created using <code>openpgp.createMessage</code>) to <code>openpgp.verify</code>.</li>
</ul>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>We would like to thank:</p>
<ul>
<li>Edoardo Geraci and Thomas Rinsma of <a href="https://codeanlabs.com/">Codean Labs</a> for finding and reporting this vulnerability</li>
<li>The <a href="https://www.sovereign.tech/">Sovereign Tech Agency</a> for sponsoring the <a href="https://yeswehack.com/programs/openpgp-js-bug-bounty-program">OpenPGP.js bug bounty program</a></li>
<li><a href="https://www.yeswehack.com/">YesWeHack</a> for hosting the <a href="https://yeswehack.com/programs/openpgp-js-bug-bounty-program">OpenPGP.js bug bounty program</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-8qff-qr5q-5pr8">https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-8qff-qr5q-5pr8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47934">https://nvd.nist.gov/vuln/detail/CVE-2025-47934</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/43f5f4e2bd67d0514d06acc60b6ee571a049c229">https://github.com/openpgpjs/openpgpjs/commit/43f5f4e2bd67d0514d06acc60b6ee571a049c229</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/843a69d0adbdec0f87af09f9000a9223e6614e5c">https://github.com/openpgpjs/openpgpjs/commit/843a69d0adbdec0f87af09f9000a9223e6614e5c</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/bd54e8535ca29b3bef58a8c02296892e408be356">https://github.com/openpgpjs/openpgpjs/commit/bd54e8535ca29b3bef58a8c02296892e408be356</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v5.11.3">https://github.com/openpgpjs/openpgpjs/releases/tag/v5.11.3</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v6.1.1">https://github.com/openpgpjs/openpgpjs/releases/tag/v6.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-8qff-qr5q-5pr8">https://github.com/advisories/GHSA-8qff-qr5q-5pr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qff-qr5q-5pr8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-05-19T21:54:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cocotais-bot] Cocotais Bot has builtin .echo command injection]]></title>
        <id>https://github.com/advisories/GHSA-mj2c-8hxf-ffvq</id>
        <link href="https://github.com/advisories/GHSA-mj2c-8hxf-ffvq"/>
        <updated>2025-05-19T16:25:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>﻿
A command echoing feature in the framework allows users to indirectly trigger privileged behavior by injecting special platform tags. Specifically, an unauthorized user can use the <code>/echo &lt;qqbot-at-everyone /&gt;</code> command to cause the bot to send a message that mentions all members in the chat, bypassing any permission controls. This can lead to spam, disruption, or abuse of notification systems.
﻿</p>
<h3 id="details">Details</h3>
<p>﻿
The framework provides a command <code>/echo</code> that causes the bot to repeat any user-provided message verbatim in the group chat. However, the bot fails to sanitize or filter platform-specific control elements such as <code>&lt;qqbot-at-everyone /&gt;</code>, which, when included in a message, mentions everyone (i.e., @全体成员). While normal users are forbidden from using this tag in normal chats, the bot, which has higher privileges, is allowed to do so.
﻿
Since the <code>/echo</code> command blindly echoes any content, a user can exploit this by sending:
﻿</p>
<pre><code>/echo &lt;qqbot-at-everyone /&gt;
</code></pre>
<p>﻿
The bot will then send a message containing <code>&lt;qqbot-at-everyone /&gt;</code>, causing the platform to interpret it as an @全体成员 command, effectively allowing an unauthorized user to @everyone via the bot.
﻿</p>
<h3 id="poc">PoC</h3>
<p>﻿</p>
<ol>
<li>Set up a chatbot using the affected framework.</li>
<li>Join the chat that includes the bot as a regular user with <strong>no permission to use @全体成员</strong>.</li>
<li>Send the following message in the chat:</li>
</ol>
<p>﻿</p>
<pre><code>/echo &lt;qqbot-at-everyone /&gt;
</code></pre>
<ol start="4">
<li>The bot will respond by repeating the message, and the platform will interpret <code>&lt;qqbot-at-everyone /&gt;</code> as an @全体成员 mention.</li>
<li>All the chat members receive a notification, despite the user lacking that permission.</li>
</ol>
<p>﻿
﻿</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cocotais/cocotais-bot/security/advisories/GHSA-mj2c-8hxf-ffvq">https://github.com/cocotais/cocotais-bot/security/advisories/GHSA-mj2c-8hxf-ffvq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47948">https://nvd.nist.gov/vuln/detail/CVE-2025-47948</a></li>
<li><a href="https://github.com/cocotais/cocotais-bot/commit/d1cf01a9a41b3131241d1833444b890c8d6e70b8">https://github.com/cocotais/cocotais-bot/commit/d1cf01a9a41b3131241d1833444b890c8d6e70b8</a></li>
<li><a href="https://github.com/advisories/GHSA-mj2c-8hxf-ffvq">https://github.com/advisories/GHSA-mj2c-8hxf-ffvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mj2c-8hxf-ffvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-19T16:25:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lockfile-lint-api] lockfile-lint-api Vulnerable to Incorrect Behavior Order]]></title>
        <id>https://github.com/advisories/GHSA-7cfr-5cjf-32p4</id>
        <link href="https://github.com/advisories/GHSA-7cfr-5cjf-32p4"/>
        <updated>2025-05-16T21:45:33.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package lockfile-lint-api before 5.9.2 are vulnerable to Incorrect Behavior Order: Early Validation via the resolved attribute of the package URL validation which can be bypassed by extending the package name allowing an attacker to install other npm packages than the intended one.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4759">https://nvd.nist.gov/vuln/detail/CVE-2025-4759</a></li>
<li><a href="https://github.com/lirantal/lockfile-lint/pull/204">https://github.com/lirantal/lockfile-lint/pull/204</a></li>
<li><a href="https://github.com/lirantal/lockfile-lint/commit/9e5305bd3e4f0c6acc0d23ec43eac2bd5303b4ca">https://github.com/lirantal/lockfile-lint/commit/9e5305bd3e4f0c6acc0d23ec43eac2bd5303b4ca</a></li>
<li><a href="https://gist.github.com/Xavier59/881aef04940970dc3e738dcbff64151f">https://gist.github.com/Xavier59/881aef04940970dc3e738dcbff64151f</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-LOCKFILELINTAPI-10169587">https://security.snyk.io/vuln/SNYK-JS-LOCKFILELINTAPI-10169587</a></li>
<li><a href="https://github.com/lirantal/lockfile-lint/blob/89b5cad028df4d77bab2b73ac93bc61e392668ab/packages/lockfile-lint-api/src/validators/ValidatePackageNames.js#L51-L63">https://github.com/lirantal/lockfile-lint/blob/89b5cad028df4d77bab2b73ac93bc61e392668ab/packages/lockfile-lint-api/src/validators/ValidatePackageNames.js#L51-L63</a></li>
<li><a href="https://github.com/advisories/GHSA-7cfr-5cjf-32p4">https://github.com/advisories/GHSA-7cfr-5cjf-32p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cfr-5cjf-32p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-16T06:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[meteor] Meteor Affected By Inefficient Regular Expression Complexity]]></title>
        <id>https://github.com/advisories/GHSA-j3v9-6gc7-vf5f</id>
        <link href="https://github.com/advisories/GHSA-j3v9-6gc7-vf5f"/>
        <updated>2025-05-16T17:44:55.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Meteor up to 3.2.1 and classified as problematic. This issue affects the function Object.assign of the file packages/ddp-server/livedata_server.js. The manipulation of the argument forwardedFor leads to inefficient regular expression complexity. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 3.2.2 is able to address this issue. The identifier of the patch is f7ea6817b90952baaea9baace2a3b4366fee6a63. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4727">https://nvd.nist.gov/vuln/detail/CVE-2025-4727</a></li>
<li><a href="https://github.com/meteor/meteor/issues/13713">https://github.com/meteor/meteor/issues/13713</a></li>
<li><a href="https://github.com/meteor/meteor/pull/13721">https://github.com/meteor/meteor/pull/13721</a></li>
<li><a href="https://github.com/meteor/meteor/commit/f7ea6817b90952baaea9baace2a3b4366fee6a63">https://github.com/meteor/meteor/commit/f7ea6817b90952baaea9baace2a3b4366fee6a63</a></li>
<li><a href="https://github.com/meteor/meteor/releases/tag/release/METEOR%403.2.2">https://github.com/meteor/meteor/releases/tag/release/METEOR%403.2.2</a></li>
<li><a href="https://vuldb.com/?ctiid.309029">https://vuldb.com/?ctiid.309029</a></li>
<li><a href="https://vuldb.com/?id.309029">https://vuldb.com/?id.309029</a></li>
<li><a href="https://vuldb.com/?submit.570441">https://vuldb.com/?submit.570441</a></li>
<li><a href="https://github.com/advisories/GHSA-j3v9-6gc7-vf5f">https://github.com/advisories/GHSA-j3v9-6gc7-vf5f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3v9-6gc7-vf5f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-16T00:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap-multiselect] Bootstrap Multiselect Vulnerable to CSRF and Reflective XSS via Arbitrary POST Data]]></title>
        <id>https://github.com/advisories/GHSA-gv5r-9gxr-v74w</id>
        <link href="https://github.com/advisories/GHSA-gv5r-9gxr-v74w"/>
        <updated>2025-05-15T14:51:27.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in post.php in bootstrap-multiselect (aka Bootstrap Multiselect) 1.1.2. A PHP script in the source code echoes arbitrary POST data. If a developer adopts this structure wholesale in a live application, it could create a Reflective Cross-Site Scripting (XSS) vulnerability exploitable through Cross-Site Request Forgery (CSRF).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47204">https://nvd.nist.gov/vuln/detail/CVE-2025-47204</a></li>
<li><a href="https://github.com/projectdiscovery/nuclei-templates/commit/11e1a6c11d3954f44acfb0274b6dad4bd8045103">https://github.com/projectdiscovery/nuclei-templates/commit/11e1a6c11d3954f44acfb0274b6dad4bd8045103</a></li>
<li><a href="https://github.com/davidstutz/bootstrap-multiselect/releases">https://github.com/davidstutz/bootstrap-multiselect/releases</a></li>
<li><a href="https://github.com/advisories/GHSA-gv5r-9gxr-v74w">https://github.com/advisories/GHSA-gv5r-9gxr-v74w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gv5r-9gxr-v74w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-13T18:30:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[undici] undici Denial of Service attack via bad certificate data]]></title>
        <id>https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</id>
        <link href="https://github.com/advisories/GHSA-cxrh-j4jr-qwg3"/>
        <updated>2025-05-16T02:07:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. </p>
<h3 id="patches">Patches</h3>
<p>This has been patched in <a href="https://github.com/nodejs/undici/pull/4088">https://github.com/nodejs/undici/pull/4088</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If a webhook fails, avoid keep calling it repeatedly.</p>
<h3 id="references">References</h3>
<p>Reported as: <a href="https://github.com/nodejs/undici/issues/3895">https://github.com/nodejs/undici/issues/3895</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3">https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3</a></li>
<li><a href="https://github.com/nodejs/undici/issues/3895">https://github.com/nodejs/undici/issues/3895</a></li>
<li><a href="https://github.com/nodejs/undici/pull/4088">https://github.com/nodejs/undici/pull/4088</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47279">https://nvd.nist.gov/vuln/detail/CVE-2025-47279</a></li>
<li><a href="https://github.com/advisories/GHSA-cxrh-j4jr-qwg3">https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-15T14:15:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[undici] undici Denial of Service attack via bad certificate data]]></title>
        <id>https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</id>
        <link href="https://github.com/advisories/GHSA-cxrh-j4jr-qwg3"/>
        <updated>2025-05-16T02:07:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. </p>
<h3 id="patches">Patches</h3>
<p>This has been patched in <a href="https://github.com/nodejs/undici/pull/4088">https://github.com/nodejs/undici/pull/4088</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If a webhook fails, avoid keep calling it repeatedly.</p>
<h3 id="references">References</h3>
<p>Reported as: <a href="https://github.com/nodejs/undici/issues/3895">https://github.com/nodejs/undici/issues/3895</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3">https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3</a></li>
<li><a href="https://github.com/nodejs/undici/issues/3895">https://github.com/nodejs/undici/issues/3895</a></li>
<li><a href="https://github.com/nodejs/undici/pull/4088">https://github.com/nodejs/undici/pull/4088</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47279">https://nvd.nist.gov/vuln/detail/CVE-2025-47279</a></li>
<li><a href="https://github.com/advisories/GHSA-cxrh-j4jr-qwg3">https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-15T14:15:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[undici] undici Denial of Service attack via bad certificate data]]></title>
        <id>https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</id>
        <link href="https://github.com/advisories/GHSA-cxrh-j4jr-qwg3"/>
        <updated>2025-05-16T02:07:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Applications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. </p>
<h3 id="patches">Patches</h3>
<p>This has been patched in <a href="https://github.com/nodejs/undici/pull/4088">https://github.com/nodejs/undici/pull/4088</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If a webhook fails, avoid keep calling it repeatedly.</p>
<h3 id="references">References</h3>
<p>Reported as: <a href="https://github.com/nodejs/undici/issues/3895">https://github.com/nodejs/undici/issues/3895</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3">https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3</a></li>
<li><a href="https://github.com/nodejs/undici/issues/3895">https://github.com/nodejs/undici/issues/3895</a></li>
<li><a href="https://github.com/nodejs/undici/pull/4088">https://github.com/nodejs/undici/pull/4088</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-47279">https://nvd.nist.gov/vuln/detail/CVE-2025-47279</a></li>
<li><a href="https://github.com/advisories/GHSA-cxrh-j4jr-qwg3">https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxrh-j4jr-qwg3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-15T14:15:06.000Z</published>
    </entry>
</feed>