<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-03-25T23:01:25.665Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[nossrf] nossrf Server-Side Request Forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-vm77-mr48-27wj</id>
        <link href="https://github.com/advisories/GHSA-vm77-mr48-27wj"/>
        <updated>2025-03-25T16:30:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package nossrf before 1.0.4 are vulnerable to Server-Side Request Forgery (SSRF) where an attacker can provide a hostname that resolves to a local or reserved IP address space and bypass the SSRF protection mechanism.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2691">https://nvd.nist.gov/vuln/detail/CVE-2025-2691</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-NOSSRF-9510842">https://security.snyk.io/vuln/SNYK-JS-NOSSRF-9510842</a></li>
<li><a href="https://github.com/advisories/GHSA-vm77-mr48-27wj">https://github.com/advisories/GHSA-vm77-mr48-27wj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm77-mr48-27wj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-23T15:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ContentTools] GetmeUK ContentTools Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</id>
        <link href="https://github.com/advisories/GHSA-4f2v-2gpq-qhjg"/>
        <updated>2025-03-24T21:24:06.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in GetmeUK ContentTools up to 1.6.16. It has been rated as problematic. Affected by this issue is some unknown functionality of the component Image Handler. The manipulation of the argument onload leads to cross site scripting. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2699">https://nvd.nist.gov/vuln/detail/CVE-2025-2699</a></li>
<li><a href="https://gist.github.com/Masamuneee/657f2e2b0eb5bf9b0d4dbb79f00dac37">https://gist.github.com/Masamuneee/657f2e2b0eb5bf9b0d4dbb79f00dac37</a></li>
<li><a href="https://vuldb.com/?ctiid.300716">https://vuldb.com/?ctiid.300716</a></li>
<li><a href="https://vuldb.com/?id.300716">https://vuldb.com/?id.300716</a></li>
<li><a href="https://vuldb.com/?submit.515864">https://vuldb.com/?submit.515864</a></li>
<li><a href="https://github.com/advisories/GHSA-4f2v-2gpq-qhjg">https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-24T09:34:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-cdk-lib] AWS CDK CodePipeline: trusted entities are too broad]]></title>
        <id>https://github.com/advisories/GHSA-5pq3-h73f-66hr</id>
        <link href="https://github.com/advisories/GHSA-5pq3-h73f-66hr"/>
        <updated>2025-03-24T15:45:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://aws.amazon.com/cdk/">AWS Cloud Development Kit (CDK)</a> is an open-source framework for defining cloud infrastructure using code. Users use it to create their own applications, which are converted to AWS CloudFormation templates during deployment to a user's AWS account. AWS CDK contains pre-built components called "constructs," which are higher-level abstractions providing defaults and best practices. This approach enables developers to use familiar programming languages to define complex cloud infrastructure more efficiently than writing raw CloudFormation templates.</p>
<p>The <a href="https://aws.amazon.com/codepipeline/">AWS CodePipeline</a> construct deploys CodePipeline, a managed service that orchestrates software release processes through a series of stages, each comprising one or more actions executed by CodePipeline. To perform these actions, CodePipeline assumes IAM roles with permissions necessary for each step, allowing it to interact with AWS services and resources on behalf of the user.</p>
<p>An issue exists where, when using CDK to create a CodePipeline with the CDK Construct Library, CDK creates an AWS Identity and Access Management (AWS IAM) trust policy with overly broad permissions. Any user with unrestricted sts:AssumeRole permissions could assume that trust policy. This issue does not affect users who supply their own role for CodePipeline.</p>
<h3 id="impact">Impact</h3>
<p>To leverage the issue, an actor has to be authenticated in the account and have an unrestricted sts:AssumeRole permission. The permissions an actor could leverage depend on the actions added to the pipeline. Possible permissions include actions on services such as CloudFormation, CodeCommit, Lambda, and ECS, as well as access to the S3 bucket holding pipeline build artifacts (<a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline_actions-readme.html">see documentation</a>). </p>
<p>Users can review their AWS CloudTrail logs for when the role was assumed to determine if this was expected. </p>
<h4 id="impacted-versions-v21840">Impacted versions: &lt;v2.184.0</h4>
<h3 id="patches">Patches</h3>
<p>The patches are included in the CDK Construct Library release <a href="https://github.com/aws/aws-cdk/releases/tag/v2.184.0">v2.184.0</a>. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>
<p>When new CDK applications using the latest version are initialized, they will use the new behavior with more restrictive permissions.</p>
<p>Existing applications must upgrade to the latest version, change the <a href="https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/cx-api/FEATURE_FLAGS.md">feature flag</a> (@aws-cdk/pipelines:reduceStageRoleTrustScope) to true and redeploy the application to apply this fix and use the new behavior with more restrictive permissions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can explicitly supply the role for your <a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_codepipeline-readme.html#cross-account-codepipelines">CodePipeline</a> and follow the policy recommendations detailed in <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-create-cross-account.html">CodePipeline documentation</a>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/aws/aws-cdk/issues/33709">Original reporting issue.</a></p>
<p>If you have any questions or comments about this advisory please contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr">https://github.com/aws/aws-cdk/security/advisories/GHSA-5pq3-h73f-66hr</a></li>
<li><a href="https://github.com/aws/aws-cdk/issues/33709">https://github.com/aws/aws-cdk/issues/33709</a></li>
<li><a href="https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf">https://github.com/aws/aws-cdk/commit/a64b01cc2969822bb92d7bd72152ecb2ccf1c1cf</a></li>
<li><a href="https://github.com/aws/aws-cdk/releases/tag/v2.184.0">https://github.com/aws/aws-cdk/releases/tag/v2.184.0</a></li>
<li><a href="https://github.com/advisories/GHSA-5pq3-h73f-66hr">https://github.com/advisories/GHSA-5pq3-h73f-66hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pq3-h73f-66hr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-24T15:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Authorization Bypass in Next.js Middleware]]></title>
        <id>https://github.com/advisories/GHSA-f82v-jwr5-mffw</id>
        <link href="https://github.com/advisories/GHSA-f82v-jwr5-mffw"/>
        <updated>2025-03-24T14:40:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>
<h1 id="patches">Patches</h1>
<ul>
<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>
<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>
<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>
<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>
<li>For Next.js 11.x, consult the below workaround.</li>
</ul>
<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>
<h1 id="workaround">Workaround</h1>
<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>
<h2 id="credits">Credits</h2>
<ul>
<li>Allam Rachid (zhero;)</li>
<li>Allam Yasser (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>
<li><a href="https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>
<li><a href="https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29927">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v12.3.5">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v13.5.9">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>
<li><a href="https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/3">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/4">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>
<li><a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f82v-jwr5-mffw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-21T15:20:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Authorization Bypass in Next.js Middleware]]></title>
        <id>https://github.com/advisories/GHSA-f82v-jwr5-mffw</id>
        <link href="https://github.com/advisories/GHSA-f82v-jwr5-mffw"/>
        <updated>2025-03-24T14:40:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>
<h1 id="patches">Patches</h1>
<ul>
<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>
<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>
<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>
<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>
<li>For Next.js 11.x, consult the below workaround.</li>
</ul>
<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>
<h1 id="workaround">Workaround</h1>
<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>
<h2 id="credits">Credits</h2>
<ul>
<li>Allam Rachid (zhero;)</li>
<li>Allam Yasser (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>
<li><a href="https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>
<li><a href="https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29927">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v12.3.5">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v13.5.9">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>
<li><a href="https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/3">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/4">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>
<li><a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f82v-jwr5-mffw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-21T15:20:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Authorization Bypass in Next.js Middleware]]></title>
        <id>https://github.com/advisories/GHSA-f82v-jwr5-mffw</id>
        <link href="https://github.com/advisories/GHSA-f82v-jwr5-mffw"/>
        <updated>2025-03-24T14:40:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>
<h1 id="patches">Patches</h1>
<ul>
<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>
<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>
<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>
<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>
<li>For Next.js 11.x, consult the below workaround.</li>
</ul>
<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>
<h1 id="workaround">Workaround</h1>
<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>
<h2 id="credits">Credits</h2>
<ul>
<li>Allam Rachid (zhero;)</li>
<li>Allam Yasser (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>
<li><a href="https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>
<li><a href="https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29927">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v12.3.5">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v13.5.9">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>
<li><a href="https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/3">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/4">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>
<li><a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f82v-jwr5-mffw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-21T15:20:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Authorization Bypass in Next.js Middleware]]></title>
        <id>https://github.com/advisories/GHSA-f82v-jwr5-mffw</id>
        <link href="https://github.com/advisories/GHSA-f82v-jwr5-mffw"/>
        <updated>2025-03-24T14:40:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>It is possible to bypass authorization checks within a Next.js application, if the authorization check occurs in middleware.</p>
<h1 id="patches">Patches</h1>
<ul>
<li>For Next.js 15.x, this issue is fixed in <code>15.2.3</code></li>
<li>For Next.js 14.x, this issue is fixed in <code>14.2.25</code></li>
<li>For Next.js 13.x, this issue is fixed in <code>13.5.9</code></li>
<li>For Next.js 12.x, this issue is fixed in <code>12.3.5</code></li>
<li>For Next.js 11.x, consult the below workaround.</li>
</ul>
<p><em>Note: Next.js deployments hosted on Vercel are automatically protected against this vulnerability.</em></p>
<h1 id="workaround">Workaround</h1>
<p>If patching to a safe version is infeasible, it is recommend that you prevent external user requests which contain the <code>x-middleware-subrequest</code> header from reaching your Next.js application.</p>
<h2 id="credits">Credits</h2>
<ul>
<li>Allam Rachid (zhero;)</li>
<li>Allam Yasser (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw">https://github.com/vercel/next.js/security/advisories/GHSA-f82v-jwr5-mffw</a></li>
<li><a href="https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2">https://github.com/vercel/next.js/commit/52a078da3884efe6501613c7834a3d02a91676d2</a></li>
<li><a href="https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48">https://github.com/vercel/next.js/commit/5fd3ae8f8542677c6294f32d18022731eab6fe48</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29927">https://nvd.nist.gov/vuln/detail/CVE-2025-29927</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v12.3.5">https://github.com/vercel/next.js/releases/tag/v12.3.5</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v13.5.9">https://github.com/vercel/next.js/releases/tag/v13.5.9</a></li>
<li><a href="https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware">https://vercel.com/changelog/vercel-firewall-proactively-protects-against-vulnerability-with-middleware</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/3">http://www.openwall.com/lists/oss-security/2025/03/23/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/23/4">http://www.openwall.com/lists/oss-security/2025/03/23/4</a></li>
<li><a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">https://github.com/advisories/GHSA-f82v-jwr5-mffw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f82v-jwr5-mffw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-21T15:20:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cdk] AWS CDK CLI prints AWS credentials retrieved by custom credential plugins]]></title>
        <id>https://github.com/advisories/GHSA-v63m-x9r9-8gqp</id>
        <link href="https://github.com/advisories/GHSA-v63m-x9r9-8gqp"/>
        <updated>2025-03-21T17:43:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The AWS Cloud Development Kit (AWS CDK) [1] is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. The AWS CDK CLI [2] is a command line tool for interacting with CDK applications. Customers can use the CDK CLI to create, manage, and deploy their AWS CDK projects. </p>
<p>An issue exists in the AWS CDK CLI where, under certain conditions, AWS credentials may be returned in the console output. Plugins that return an <code>expiration </code>property in the credentials object are affected by this issue. Plugins that omit the <code>expiration</code> property are not affected. </p>
<h2 id="impact">Impact</h2>
<p>When customers run AWS CDK CLI commands with credential plugins and configure those plugins to return temporary credentials by including an <code>expiration</code> property, the AWS credentials retrieved by the plugin may be returned in the console output. Any user with access where the CDK CLI was ran would have access to this output. </p>
<p>The following are examples of configuring a custom credential plugin: </p>
<p><em>Via command line option:</em></p>
<p><code>cdk deploy --plugin /path/to/plugin</code></p>
<p><em>Via configuration file [3]:</em></p>
<pre><code class="language-json">{
  "plugin": "/path/to/plugin"
}
</code></pre>
<p>Plugins that return an <code>expiration</code> property in the credentials object, such as the following example, are affected:</p>
<pre><code class="language-console">return {
    accessKeyId: '&lt;access-key&gt;',
    secretAccessKey: '&lt;secret-access-key&gt;',
    sessionToken: '&lt;session-token&gt;',
    expiration: &lt;date&gt;,
};
</code></pre>
<p>The <code>expiration</code> property indicates that the provided credentials are temporary. </p>
<p>Please refer to our "AWS CDK CLI Library" guide for more information about custom credential plugins [4].</p>
<h2 id="impacted-versions--21720-and-21782">Impacted versions:  &gt;=2.172.0 and &lt;2.178.2</h2>
<h2 id="patches">Patches</h2>
<p>The issue has been addressed in version 2.178.2 [5]. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>
<h2 id="workarounds">Workarounds</h2>
<p>If you are unable to upgrade to version 2.178.2 or later, you can downgrade to version 2.171.1. If you are unable to downgrade, but have access to the code of the credential plugin you use, you can remove the <code>expiration</code> property from the object returned by the plugin.</p>
<p>For example, change the code from returning this:</p>
<pre><code class="language-javascript">return {
    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,
    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,
    sessionToken: assumeRoleOutput.Credentials.SessionToken,

    // Expiration indicates to the CLI that this is temporary
    expiration: assumeRoleOutput.Credentials.Expiration,
};
</code></pre>
<p>To return this:</p>
<pre><code class="language-javascript">return {
    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,
    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,
    sessionToken: assumeRoleOutput.Credentials.SessionToken,
};
</code></pre>
<p>Note that this will prevent the CDK CLI from refreshing the credentials when needed, and may cause your workflow to fail on an expired credentials error. </p>
<h2 id="references">References</h2>
<p>[1] <a href="https://docs.aws.amazon.com/cdk/v2/guide/home.html">https://docs.aws.amazon.com/cdk/v2/guide/home.html</a></p>
<p>[2] <a href="https://docs.aws.amazon.com/cdk/v2/guide/cli.html">https://docs.aws.amazon.com/cdk/v2/guide/cli.html</a></p>
<p>[3] <a href="https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config">https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config</a></p>
<p>[4] <a href="https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract">https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract</a></p>
<p>[5] <a href="https://github.com/aws/aws-cdk/releases/tag/v2.178.2">https://github.com/aws/aws-cdk/releases/tag/v2.178.2</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp">https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2598">https://nvd.nist.gov/vuln/detail/CVE-2025-2598</a></li>
<li><a href="https://aws.amazon.com/security/security-bulletins/AWS-2025-005">https://aws.amazon.com/security/security-bulletins/AWS-2025-005</a></li>
<li><a href="https://github.com/advisories/GHSA-v63m-x9r9-8gqp">https://github.com/advisories/GHSA-v63m-x9r9-8gqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v63m-x9r9-8gqp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T17:43:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-cdk] AWS CDK CLI prints AWS credentials retrieved by custom credential plugins]]></title>
        <id>https://github.com/advisories/GHSA-v63m-x9r9-8gqp</id>
        <link href="https://github.com/advisories/GHSA-v63m-x9r9-8gqp"/>
        <updated>2025-03-21T17:43:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>The AWS Cloud Development Kit (AWS CDK) [1] is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. The AWS CDK CLI [2] is a command line tool for interacting with CDK applications. Customers can use the CDK CLI to create, manage, and deploy their AWS CDK projects. </p>
<p>An issue exists in the AWS CDK CLI where, under certain conditions, AWS credentials may be returned in the console output. Plugins that return an <code>expiration </code>property in the credentials object are affected by this issue. Plugins that omit the <code>expiration</code> property are not affected. </p>
<h2 id="impact">Impact</h2>
<p>When customers run AWS CDK CLI commands with credential plugins and configure those plugins to return temporary credentials by including an <code>expiration</code> property, the AWS credentials retrieved by the plugin may be returned in the console output. Any user with access where the CDK CLI was ran would have access to this output. </p>
<p>The following are examples of configuring a custom credential plugin: </p>
<p><em>Via command line option:</em></p>
<p><code>cdk deploy --plugin /path/to/plugin</code></p>
<p><em>Via configuration file [3]:</em></p>
<pre><code class="language-json">{
  "plugin": "/path/to/plugin"
}
</code></pre>
<p>Plugins that return an <code>expiration</code> property in the credentials object, such as the following example, are affected:</p>
<pre><code class="language-console">return {
    accessKeyId: '&lt;access-key&gt;',
    secretAccessKey: '&lt;secret-access-key&gt;',
    sessionToken: '&lt;session-token&gt;',
    expiration: &lt;date&gt;,
};
</code></pre>
<p>The <code>expiration</code> property indicates that the provided credentials are temporary. </p>
<p>Please refer to our "AWS CDK CLI Library" guide for more information about custom credential plugins [4].</p>
<h2 id="impacted-versions--21720-and-21782">Impacted versions:  &gt;=2.172.0 and &lt;2.178.2</h2>
<h2 id="patches">Patches</h2>
<p>The issue has been addressed in version 2.178.2 [5]. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. </p>
<h2 id="workarounds">Workarounds</h2>
<p>If you are unable to upgrade to version 2.178.2 or later, you can downgrade to version 2.171.1. If you are unable to downgrade, but have access to the code of the credential plugin you use, you can remove the <code>expiration</code> property from the object returned by the plugin.</p>
<p>For example, change the code from returning this:</p>
<pre><code class="language-javascript">return {
    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,
    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,
    sessionToken: assumeRoleOutput.Credentials.SessionToken,

    // Expiration indicates to the CLI that this is temporary
    expiration: assumeRoleOutput.Credentials.Expiration,
};
</code></pre>
<p>To return this:</p>
<pre><code class="language-javascript">return {
    accessKeyId: assumeRoleOutput.Credentials.AccessKeyId,
    secretAccessKey: assumeRoleOutput.Credentials.SecretAccessKey,
    sessionToken: assumeRoleOutput.Credentials.SessionToken,
};
</code></pre>
<p>Note that this will prevent the CDK CLI from refreshing the credentials when needed, and may cause your workflow to fail on an expired credentials error. </p>
<h2 id="references">References</h2>
<p>[1] <a href="https://docs.aws.amazon.com/cdk/v2/guide/home.html">https://docs.aws.amazon.com/cdk/v2/guide/home.html</a></p>
<p>[2] <a href="https://docs.aws.amazon.com/cdk/v2/guide/cli.html">https://docs.aws.amazon.com/cdk/v2/guide/cli.html</a></p>
<p>[3] <a href="https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config">https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-config</a></p>
<p>[4] <a href="https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract">https://www.npmjs.com/package/@aws-cdk/cli-plugin-contract</a></p>
<p>[5] <a href="https://github.com/aws/aws-cdk/releases/tag/v2.178.2">https://github.com/aws/aws-cdk/releases/tag/v2.178.2</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp">https://github.com/aws/aws-cdk/security/advisories/GHSA-v63m-x9r9-8gqp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2598">https://nvd.nist.gov/vuln/detail/CVE-2025-2598</a></li>
<li><a href="https://aws.amazon.com/security/security-bulletins/AWS-2025-005">https://aws.amazon.com/security/security-bulletins/AWS-2025-005</a></li>
<li><a href="https://github.com/advisories/GHSA-v63m-x9r9-8gqp">https://github.com/advisories/GHSA-v63m-x9r9-8gqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v63m-x9r9-8gqp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T17:43:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server has an OAuth login vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-837q-jhwx-cmpv</id>
        <link href="https://github.com/advisories/GHSA-837q-jhwx-cmpv"/>
        <updated>2025-03-21T17:42:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The 3rd party authentication handling of Parse Server allows the authentication credentials of some specific authentication providers to be used across multiple Parse Server apps. For example, if a user signed up using the same authentication provider in two unrelated Parse Server apps, the credentials stored by one app can be used to authenticate the same user in the other app. Note that this only affects Parse Server apps that specifically use an affected 3rd party authentication provider for user authentication, for example by setting the Parse Server option <code>auth</code> to configure a Parse Server authentication adapter. See the <a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">3rd party authentication docs</a> for more information on which authentication providers are affected.</p>
<h3 id="patches">Patches</h3>
<p>The fix of this vulnerability requires to upgrade Parse Server to a version that includes the bug fix, as well as upgrade the client app to send a secure payload, which is different from the previous insecure payload. To accommodate a gradual rollout of the client app update, affected Parse Server authentication adapters now offer an <code>enableInsecureAuth</code> option to accept both insecure and secure payloads from clients apps. See the <a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">3rd party authentication docs</a> for how to migrate from insecure to secure authentication.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li>GitHub security advisory: <a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>
<li>Parse Server documentation for 3rd party authentication providers: <a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>
<li>Bug fix in Parse Server 7: <a href="https://github.com/parse-community/parse-server/pull/9668">https://github.com/parse-community/parse-server/pull/9668</a></li>
<li>Bug fix in Parse Server 8: <a href="https://github.com/parse-community/parse-server/pull/9667">https://github.com/parse-community/parse-server/pull/9667</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30168">https://nvd.nist.gov/vuln/detail/CVE-2025-30168</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9667">https://github.com/parse-community/parse-server/pull/9667</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9668">https://github.com/parse-community/parse-server/pull/9668</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e">https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f">https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f</a></li>
<li><a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>
<li><a href="https://github.com/advisories/GHSA-837q-jhwx-cmpv">https://github.com/advisories/GHSA-837q-jhwx-cmpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-837q-jhwx-cmpv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T17:42:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server has an OAuth login vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-837q-jhwx-cmpv</id>
        <link href="https://github.com/advisories/GHSA-837q-jhwx-cmpv"/>
        <updated>2025-03-21T17:42:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The 3rd party authentication handling of Parse Server allows the authentication credentials of some specific authentication providers to be used across multiple Parse Server apps. For example, if a user signed up using the same authentication provider in two unrelated Parse Server apps, the credentials stored by one app can be used to authenticate the same user in the other app. Note that this only affects Parse Server apps that specifically use an affected 3rd party authentication provider for user authentication, for example by setting the Parse Server option <code>auth</code> to configure a Parse Server authentication adapter. See the <a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">3rd party authentication docs</a> for more information on which authentication providers are affected.</p>
<h3 id="patches">Patches</h3>
<p>The fix of this vulnerability requires to upgrade Parse Server to a version that includes the bug fix, as well as upgrade the client app to send a secure payload, which is different from the previous insecure payload. To accommodate a gradual rollout of the client app update, affected Parse Server authentication adapters now offer an <code>enableInsecureAuth</code> option to accept both insecure and secure payloads from clients apps. See the <a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">3rd party authentication docs</a> for how to migrate from insecure to secure authentication.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li>GitHub security advisory: <a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>
<li>Parse Server documentation for 3rd party authentication providers: <a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>
<li>Bug fix in Parse Server 7: <a href="https://github.com/parse-community/parse-server/pull/9668">https://github.com/parse-community/parse-server/pull/9668</a></li>
<li>Bug fix in Parse Server 8: <a href="https://github.com/parse-community/parse-server/pull/9667">https://github.com/parse-community/parse-server/pull/9667</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv">https://github.com/parse-community/parse-server/security/advisories/GHSA-837q-jhwx-cmpv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30168">https://nvd.nist.gov/vuln/detail/CVE-2025-30168</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9667">https://github.com/parse-community/parse-server/pull/9667</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9668">https://github.com/parse-community/parse-server/pull/9668</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e">https://github.com/parse-community/parse-server/commit/2ff9c71030bce3aada0a00fbceedeb7ae2c8a41e</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f">https://github.com/parse-community/parse-server/commit/5ef0440c8e763854e62341acaeb6dc4ade3ba82f</a></li>
<li><a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication">https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication</a></li>
<li><a href="https://github.com/advisories/GHSA-837q-jhwx-cmpv">https://github.com/advisories/GHSA-837q-jhwx-cmpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-837q-jhwx-cmpv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-21T17:42:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[open-webui] Open WebUI Uncontrolled Resource Consumption vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g3mx-83mp-3rwc</id>
        <link href="https://github.com/advisories/GHSA-g3mx-83mp-3rwc"/>
        <updated>2025-03-21T17:30:10.000Z</updated>
        <content type="html"><![CDATA[<p>In version v0.3.32 of open-webui/open-webui, the application allows users to submit large payloads in the email and password fields during the sign-in process due to the lack of character length validation on these inputs. This vulnerability can lead to a Denial of Service (DoS) condition when a user submits excessively large strings, exhausting server resources such as CPU, memory, and disk space, and rendering the service unavailable for legitimate users. This makes the server susceptible to resource exhaustion attacks without requiring authentication.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12534">https://nvd.nist.gov/vuln/detail/CVE-2024-12534</a></li>
<li><a href="https://huntr.com/bounties/c7c0a4e6-acd3-49b4-8684-2c2c27014b76">https://huntr.com/bounties/c7c0a4e6-acd3-49b4-8684-2c2c27014b76</a></li>
<li><a href="https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/auths/index.ts#L113-L142">https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/auths/index.ts#L113-L142</a></li>
<li><a href="https://github.com/advisories/GHSA-g3mx-83mp-3rwc">https://github.com/advisories/GHSA-g3mx-83mp-3rwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g3mx-83mp-3rwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[open-webui] Open WebUI Uncontrolled Resource Consumption vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-chf7-q7m5-fq92</id>
        <link href="https://github.com/advisories/GHSA-chf7-q7m5-fq92"/>
        <updated>2025-03-21T17:29:28.000Z</updated>
        <content type="html"><![CDATA[<p>In version 0.3.32 of open-webui/open-webui, the absence of authentication mechanisms allows any unauthenticated attacker to access the <code>api/v1/utils/code/format</code> endpoint. If a malicious actor sends a POST request with an excessively high volume of content, the server could become completely unresponsive. This could lead to severe performance issues, causing the server to become unresponsive or experience significant degradation, ultimately resulting in service interruptions for legitimate users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12537">https://nvd.nist.gov/vuln/detail/CVE-2024-12537</a></li>
<li><a href="https://huntr.com/bounties/edabd06c-acc0-428c-a481-271f333755bc">https://huntr.com/bounties/edabd06c-acc0-428c-a481-271f333755bc</a></li>
<li><a href="https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/utils/index.ts#L25-L56">https://github.com/open-webui/open-webui/blob/e8babe62bc8e466be0367703fd062a981f5c2394/src/lib/apis/utils/index.ts#L25-L56</a></li>
<li><a href="https://github.com/advisories/GHSA-chf7-q7m5-fq92">https://github.com/advisories/GHSA-chf7-q7m5-fq92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-chf7-q7m5-fq92</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[open-webui] Open WebUI Unauthenticated Multipart Boundary Denial of Service (DoS) Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5ccf-884p-4jjq</id>
        <link href="https://github.com/advisories/GHSA-5ccf-884p-4jjq"/>
        <updated>2025-03-21T03:38:58.000Z</updated>
        <content type="html"><![CDATA[<p>A Denial of Service (DoS) vulnerability exists in open-webui/open-webui version 0.3.21. This vulnerability affects multiple endpoints, including <code>/ollama/models/upload</code>, <code>/audio/api/v1/transcriptions</code>, and <code>/rag/api/v1/doc</code>. The application processes multipart boundaries without authentication, leading to resource exhaustion. By appending additional characters to the multipart boundary, an attacker can cause the server to parse each byte of the boundary, ultimately leading to service unavailability. This vulnerability can be exploited remotely, resulting in high CPU and memory usage, and rendering the service inaccessible to legitimate users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9840">https://nvd.nist.gov/vuln/detail/CVE-2024-9840</a></li>
<li><a href="https://huntr.com/bounties/9178f09e-4d4f-4a5b-bc32-cada7445b03c">https://huntr.com/bounties/9178f09e-4d4f-4a5b-bc32-cada7445b03c</a></li>
<li><a href="https://github.com/advisories/GHSA-5ccf-884p-4jjq">https://github.com/advisories/GHSA-5ccf-884p-4jjq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5ccf-884p-4jjq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-20T12:32:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nuxt] Nuxt allows DOS via cache poisoning with payload rendering response]]></title>
        <id>https://github.com/advisories/GHSA-jvhm-gjrh-3h93</id>
        <link href="https://github.com/advisories/GHSA-jvhm-gjrh-3h93"/>
        <updated>2025-03-20T19:31:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>By sending a crafted HTTP request to a server behind an CDN, it is possible in some circumstances to poison the CDN cache and highly impacts the availability of a site.</p>
<p>It is possible to craft a request, such as <code>https://mysite.com/?/_payload.json</code> which will be rendered as JSON. If the CDN in front of a Nuxt site ignores the query string when determining whether to cache a route, then this JSON response could be served to future visitors to the site.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can perform this attack to a vulnerable site in order to make a site unavailable indefinitely. It is also possible in the case where the cache will be reset to make a small script to send a request each X seconds (=caching duration) so that the cache is permanently poisoned making the site completely unavailable.</p>
<h2 id="conclusion-">Conclusion :</h2>
<p>This is similar to a vulnerability in Next.js that resulted in CVE-2024-46982 (and see <a href="https://zhero-web-sec.github.io/research-and-things/nextjs-cache-and-chains-the-stale-elixir">this article</a>, in particular the "Internal URL parameter and pageProps" part, the latter being very similar to the one concerning us here.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nuxt/nuxt/security/advisories/GHSA-jvhm-gjrh-3h93">https://github.com/nuxt/nuxt/security/advisories/GHSA-jvhm-gjrh-3h93</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27415">https://nvd.nist.gov/vuln/detail/CVE-2025-27415</a></li>
<li><a href="https://github.com/advisories/GHSA-jvhm-gjrh-3h93">https://github.com/advisories/GHSA-jvhm-gjrh-3h93</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jvhm-gjrh-3h93</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-19T19:54:25.000Z</published>
    </entry>
</feed>