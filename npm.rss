<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-05-04T08:01:37.051Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@vercel/flags] Information Disclosure via Flags override link]]></title>
        <id>https://github.com/advisories/GHSA-892p-pqrr-hxqr</id>
        <link href="https://github.com/advisories/GHSA-892p-pqrr-hxqr"/>
        <updated>2025-05-02T19:28:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>An information disclosure vulnerability affecting Flags SDK has been addressed. It impacted <code>flags</code> ≤3.2.0 and <code>@vercel/flags</code> ≤3.1.1 and in certain circumstances, allowed a bad actor with detailed knowledge of the vulnerability to list all flags returned by the flags discovery endpoint (<code>.well-known/vercel/flags</code>).</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability allowed for information disclosure, where a bad actor could gain access to a list of all feature flags exposed through the flags discovery endpoint, including the:</p>
<ul>
<li>Flag names</li>
<li>Flag descriptions</li>
<li>Available options and their labels (e.g. <code>true</code>, <code>false</code>)</li>
<li>Default flag values</li>
</ul>
<p>Not impacted:</p>
<ul>
<li>Flags providers were not accessible</li>
</ul>
<p>No write access nor additional customer data was exposed, this is limited to just the values noted above. Vercel has automatically mitigated this incident on behalf of our customers for the default flags discovery endpoint at <code>.well-known/vercel/flags</code>. Flags Explorer will be disabled and show a warning notice until upgraded to <code>flags@4.0.0</code>.</p>
<h2 id="resolution">Resolution</h2>
<p>The <code>verifyAccess</code> function was patched within <code>flags@4.0.0</code>. </p>
<p>Users of <code>@vercel/flags</code> should also migrate to <code>flags@4.0.0</code>.</p>
<p>For further guidance on upgrading your version, please see our <a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">upgrade guide</a>.</p>
<h2 id="mitigations">Mitigations</h2>
<p>Vercel implemented a network-level mitigation to prevent the default flags discovery endpoint at <code>/.well-known/vercel/flags</code> being reachable, which automatically protects Vercel deployments against exploitation of this issue. Users need to upgrade to <code>flags@4.0.0</code> to re-enable the Flags Explorer.</p>
<p>This automatic mitigation is not effective in two scenarios:</p>
<ul>
<li>When using the Flags SDK on Pages Router, as the original non-rewritten route would still be accessible, e.g. <code>/api/vercel/flags</code>.</li>
<li>When using a custom path for the flags discovery endpoint.</li>
</ul>
<p>If you are not protected by the Vercel default mitigation you can temporarily deny access to the other exposed flags discovery endpoints through a custom WAF rule while you upgrade to the latest version.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr">https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46332">https://nvd.nist.gov/vuln/detail/CVE-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/advisories/GHSA-892p-pqrr-hxqr">https://github.com/advisories/GHSA-892p-pqrr-hxqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-892p-pqrr-hxqr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T19:28:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flags] Information Disclosure via Flags override link]]></title>
        <id>https://github.com/advisories/GHSA-892p-pqrr-hxqr</id>
        <link href="https://github.com/advisories/GHSA-892p-pqrr-hxqr"/>
        <updated>2025-05-02T19:28:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>An information disclosure vulnerability affecting Flags SDK has been addressed. It impacted <code>flags</code> ≤3.2.0 and <code>@vercel/flags</code> ≤3.1.1 and in certain circumstances, allowed a bad actor with detailed knowledge of the vulnerability to list all flags returned by the flags discovery endpoint (<code>.well-known/vercel/flags</code>).</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability allowed for information disclosure, where a bad actor could gain access to a list of all feature flags exposed through the flags discovery endpoint, including the:</p>
<ul>
<li>Flag names</li>
<li>Flag descriptions</li>
<li>Available options and their labels (e.g. <code>true</code>, <code>false</code>)</li>
<li>Default flag values</li>
</ul>
<p>Not impacted:</p>
<ul>
<li>Flags providers were not accessible</li>
</ul>
<p>No write access nor additional customer data was exposed, this is limited to just the values noted above. Vercel has automatically mitigated this incident on behalf of our customers for the default flags discovery endpoint at <code>.well-known/vercel/flags</code>. Flags Explorer will be disabled and show a warning notice until upgraded to <code>flags@4.0.0</code>.</p>
<h2 id="resolution">Resolution</h2>
<p>The <code>verifyAccess</code> function was patched within <code>flags@4.0.0</code>. </p>
<p>Users of <code>@vercel/flags</code> should also migrate to <code>flags@4.0.0</code>.</p>
<p>For further guidance on upgrading your version, please see our <a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">upgrade guide</a>.</p>
<h2 id="mitigations">Mitigations</h2>
<p>Vercel implemented a network-level mitigation to prevent the default flags discovery endpoint at <code>/.well-known/vercel/flags</code> being reachable, which automatically protects Vercel deployments against exploitation of this issue. Users need to upgrade to <code>flags@4.0.0</code> to re-enable the Flags Explorer.</p>
<p>This automatic mitigation is not effective in two scenarios:</p>
<ul>
<li>When using the Flags SDK on Pages Router, as the original non-rewritten route would still be accessible, e.g. <code>/api/vercel/flags</code>.</li>
<li>When using a custom path for the flags discovery endpoint.</li>
</ul>
<p>If you are not protected by the Vercel default mitigation you can temporarily deny access to the other exposed flags discovery endpoints through a custom WAF rule while you upgrade to the latest version.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr">https://github.com/vercel/flags/security/advisories/GHSA-892p-pqrr-hxqr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46332">https://nvd.nist.gov/vuln/detail/CVE-2025-46332</a></li>
<li><a href="https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md">https://github.com/vercel/flags/blob/main/packages/flags/guides/upgrade-to-v4.md</a></li>
<li><a href="https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332">https://vercel.com/changelog/information-disclosure-in-flags-sdk-cve-2025-46332</a></li>
<li><a href="https://github.com/advisories/GHSA-892p-pqrr-hxqr">https://github.com/advisories/GHSA-892p-pqrr-hxqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-892p-pqrr-hxqr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-02T19:28:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] @cloudflare/workers-oauth-provider PKCE bypass via downgrade attack]]></title>
        <id>https://github.com/advisories/GHSA-qgp8-v765-qxx9</id>
        <link href="https://github.com/advisories/GHSA-qgp8-v765-qxx9"/>
        <updated>2025-05-01T17:01:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>PKCE was implemented in the OAuth implementation in workers-oauth-provider that is part of<a href="https://github.com/cloudflare/workers-mcp"> MCP framework</a>. However, it was found that an attacker could cause the check to be skipped.</p>
<h3 id="impact">Impact</h3>
<p>PKCE is a defense-in-depth mechanism against certain kinds of attacks and was an optional extension in OAuth 2.0 which became required in the OAuth 2.1 draft. (Note that the MCP specification requires OAuth 2.1.)
This bug completely bypasses PKCE protection.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in: <a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a></p>
<p>We patched up the vulnerabilities in the latest version, v 0.0.5 of the Workers OAuth provider (<a href="https://www.npmjs.com/package/@cloudflare/workers-oauth-provider">https://www.npmjs.com/package/@cloudflare/workers-oauth-provider</a>). You'll need to update your MCP servers to use that version to resolve the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-qgp8-v765-qxx9">https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-qgp8-v765-qxx9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4144">https://nvd.nist.gov/vuln/detail/CVE-2025-4144</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a></li>
<li><a href="https://github.com/advisories/GHSA-qgp8-v765-qxx9">https://github.com/advisories/GHSA-qgp8-v765-qxx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qgp8-v765-qxx9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T17:01:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] Duplicate Advisory: @cloudflare/workers-oauth-provider PKCE bypass via downgrade attack]]></title>
        <id>https://github.com/advisories/GHSA-vh4h-fvqf-q9wv</id>
        <link href="https://github.com/advisories/GHSA-vh4h-fvqf-q9wv"/>
        <updated>2025-05-01T17:01:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-qgp8-v765-qxx9. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>PKCE was implemented in the OAuth implementation in workers-oauth-provider that is part of  MCP framework <a href="https://github.com/cloudflare/workers-mcp">https://github.com/cloudflare/workers-mcp</a> . However, it&nbsp;was found that an attacker could cause the check to be skipped.</p>
<p>Fixed in:</p>
<p> <a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a> <a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a> </p>
<p>Impact: </p>
<p>PKCE is a defense-in-depth mechanism against certain kinds of attacks and was an optional extension in OAuth 2.0 which became required in the OAuth 2.1 draft. (Note that the MCP specification requires OAuth 2.1.).&nbsp;This bug completely bypasses PKCE protection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4144">https://nvd.nist.gov/vuln/detail/CVE-2025-4144</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/27">https://github.com/cloudflare/workers-oauth-provider/pull/27</a></li>
<li><a href="https://github.com/advisories/GHSA-vh4h-fvqf-q9wv">https://github.com/advisories/GHSA-vh4h-fvqf-q9wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vh4h-fvqf-q9wv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T03:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] @cloudflare/workers-oauth-provider missing validation of redirect_uri on authorize endpoint]]></title>
        <id>https://github.com/advisories/GHSA-4pc9-x2fx-p7vj</id>
        <link href="https://github.com/advisories/GHSA-4pc9-x2fx-p7vj"/>
        <updated>2025-05-01T17:00:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>PKCE was implemented in the OAuth implementation in workers-oauth-provider that is part of<a href="https://github.com/cloudflare/workers-mcp"> MCP framework</a>. However, it was found that an attacker could cause the check to be skipped.</p>
<h3 id="impact">Impact</h3>
<p>Under certain circumstances (see below), if a victim had previously authorized with a server built on workers-oath-provider, and an attacker could later trick the victim into visiting a malicious web site, then attacker could potentially steal the victim's credentials to the same OAuth server and subsequently impersonate them.</p>
<p>In order for the attack to be possible, the OAuth server's authorized callback must be designed to auto-approve authorizations that appear to come from an OAuth client that the victim has authorized previously. The authorization flow is not implemented by workers-oauth-provider; it is up to the application built on top to decide whether to implement such automatic re-authorization. However, many applications do implement such logic.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in: <a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a></p>
<p>We patched up the vulnerabilities in the latest version, v 0.0.5 of the Workers OAuth provider (<a href="https://www.npmjs.com/package/@cloudflare/workers-oauth-provider">https://www.npmjs.com/package/@cloudflare/workers-oauth-provider</a>). You'll need to update your MCP servers to use that version to resolve the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="note">Note</h3>
<p>It is a basic, well-known requirement that OAuth servers should verify that the redirect URI is among the allowed list for the client, both during the authorization flow and subsequently when exchanging the authorization code for an access token. workers-oauth-provider implemented only the latter check, not the former. Unfortunately, the former is the much more important check.</p>
<p>Readers who are familiar with OAuth may recognize that failing to check redirect URIs against the allowed list is a well-known, basic mistake, covered extensively in the RFC and elsewhere. The author of this library would like everyone to know that he was, in fact, well-aware of this requirement, thought about it a lot while designing the library, and then, somehow, forgot to actually make sure the check was in the code. That is, it's not that he didn't know what he was doing, it's that he knew what he was doing but flubbed it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-4pc9-x2fx-p7vj">https://github.com/cloudflare/workers-oauth-provider/security/advisories/GHSA-4pc9-x2fx-p7vj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4143">https://nvd.nist.gov/vuln/detail/CVE-2025-4143</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a></li>
<li><a href="https://github.com/advisories/GHSA-4pc9-x2fx-p7vj">https://github.com/advisories/GHSA-4pc9-x2fx-p7vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4pc9-x2fx-p7vj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T17:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cloudflare/workers-oauth-provider] Duplicate Advisory: @cloudflare/workers-oauth-provider missing validation of redirect_uri on authorize endpoint]]></title>
        <id>https://github.com/advisories/GHSA-7cp4-jw97-3rc2</id>
        <link href="https://github.com/advisories/GHSA-7cp4-jw97-3rc2"/>
        <updated>2025-05-01T17:00:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-4pc9-x2fx-p7vj. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>The OAuth implementation in workers-oauth-provider that is part of  MCP framework <a href="https://github.com/cloudflare/workers-mcp">https://github.com/cloudflare/workers-mcp</a> , did not correctly validate that redirect_uri was on the allowed list of redirect URIs for the given client registration.</p>
<p>Fixed in:&nbsp; <a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a> <a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a> </p>
<p>Impact:</p>
<p>Under certain circumstances (see below), if a victim had previously authorized with a server built on workers-oath-provider, and an attacker could later trick the victim into visiting a malicious web site, then attacker could potentially steal the victim's credentials to the same OAuth server and subsequently impersonate them.</p>
<p>In order for the attack to be possible, the OAuth server's authorized callback must be designed to auto-approve authorizations that appear to come from an OAuth client that the victim has authorized previously. The authorization flow is not implemented by workers-oauth-provider; it is up to the application built on top to decide whether to implement such automatic re-authorization. However, many applications do implement such logic.</p>
<p>Note: It is a basic, well-known requirement that OAuth servers should verify that the redirect URI is among the allowed list for the client, both during the authorization flow and subsequently when exchanging the authorization code for an access token. workers-oauth-provider implemented only the latter check, not the former. Unfortunately, the former is the much more important check.&nbsp;Readers who are familiar with OAuth may recognize that failing to check redirect URIs against the allowed list is a well-known, basic mistake, covered extensively in the RFC and elsewhere. The author of this library would like everyone to know that he was, in fact, well-aware of this requirement, thought about it a lot while designing the library, and then, somehow, forgot to actually make sure the check was in the code. That is, it's not that he didn't know what he was doing, it's that he knew what he was doing but flubbed it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-4143">https://nvd.nist.gov/vuln/detail/CVE-2025-4143</a></li>
<li><a href="https://github.com/cloudflare/workers-oauth-provider/pull/26">https://github.com/cloudflare/workers-oauth-provider/pull/26</a></li>
<li><a href="https://github.com/advisories/GHSA-7cp4-jw97-3rc2">https://github.com/advisories/GHSA-7cp4-jw97-3rc2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cp4-jw97-3rc2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-01T03:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-04-30T21:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-04-30T21:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-05-02T15:33:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46565">https://nvd.nist.gov/vuln/detail/CVE-2025-46565</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-05-01T13:31:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27611">https://nvd.nist.gov/vuln/detail/CVE-2025-27611</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-05-01T13:31:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27611">https://nvd.nist.gov/vuln/detail/CVE-2025-27611</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-05-01T13:31:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27611">https://nvd.nist.gov/vuln/detail/CVE-2025-27611</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular] AngularJS improperly sanitizes SVG elements]]></title>
        <id>https://github.com/advisories/GHSA-j58c-ww9w-pwp5</id>
        <link href="https://github.com/advisories/GHSA-j58c-ww9w-pwp5"/>
        <updated>2025-04-30T14:18:12.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the 'href' and 'xlink:href' attributes in '<img>' SVG elements in AngularJS allows attackers to bypass common image source restrictions. This can lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> &nbsp;and also negatively affect the application's performance and behavior by using too large or slow-to-load images.</p>
<p>This issue affects all versions of AngularJS.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0716">https://nvd.nist.gov/vuln/detail/CVE-2025-0716</a></li>
<li><a href="https://codepen.io/herodevs/pen/qEWQmpd/a86a0d29310e12c7a3756768e6c7b915">https://codepen.io/herodevs/pen/qEWQmpd/a86a0d29310e12c7a3756768e6c7b915</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2025-0716">https://www.herodevs.com/vulnerability-directory/cve-2025-0716</a></li>
<li><a href="https://github.com/advisories/GHSA-j58c-ww9w-pwp5">https://github.com/advisories/GHSA-j58c-ww9w-pwp5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j58c-ww9w-pwp5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-29T18:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@auth0/nextjs-auth0] Auth0 NextJS SDK v4 Missing Session Invalidation]]></title>
        <id>https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</id>
        <link href="https://github.com/advisories/GHSA-pjr6-jx7r-j4r6"/>
        <updated>2025-04-30T17:25:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>Auth0 NextJS <code>v4.0.1</code> to <code>v4.5.0</code> does not invoke <code>.setExpirationTime</code> when generating a JWE token for the session. As a result, the JWE does not contain an internal expiration claim. While the session cookie may expire or be cleared, the JWE remains valid.</p>
<h3 id="am-i-affected">Am I Affected?</h3>
<p>You are affected if you are using Auth0 NextJS SDK v4.</p>
<h3 id="fix">Fix</h3>
<p>Upgrade to <code>v4.5.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-pjr6-jx7r-j4r6">https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-pjr6-jx7r-j4r6</a></li>
<li><a href="https://github.com/auth0/nextjs-auth0/commit/a4f061aed02ffa132feca8adfbd11704df17e1c3">https://github.com/auth0/nextjs-auth0/commit/a4f061aed02ffa132feca8adfbd11704df17e1c3</a></li>
<li><a href="https://github.com/auth0/nextjs-auth0/releases/tag/v4.5.1">https://github.com/auth0/nextjs-auth0/releases/tag/v4.5.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46344">https://nvd.nist.gov/vuln/detail/CVE-2025-46344</a></li>
<li><a href="https://github.com/advisories/GHSA-pjr6-jx7r-j4r6">https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-29T18:54:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@escape.tech/graphql-armor-cost-limit] GraphQL Armor Cost-Limit Plugin Bypass via Introspection Query Obfuscation]]></title>
        <id>https://github.com/advisories/GHSA-733v-p3h5-qpq7</id>
        <link href="https://github.com/advisories/GHSA-733v-p3h5-qpq7"/>
        <updated>2025-04-29T16:45:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A query cost restriction using the <code>cost-limit</code> can be bypassed if <code>ignoreIntrospection</code> is enabled (which is the default configuration) by naming your query/fragment <code>__schema</code>.</p>
<h3 id="details">Details</h3>
<p>At the start of the <code>computeComplexity</code> function, we have the following check for <code>ignoreIntrospection</code> option:</p>
<pre><code class="language-ts">    if (this.config.ignoreIntrospection &amp;&amp; 'name' in node &amp;&amp; node.name?.value === '__schema') {
      return 0;
    }
</code></pre>
<p>However, the <code>node</code> can be <code>FieldNode | FragmentDefinitionNode | InlineFragmentNode | OperationDefinitionNode | FragmentSpreadNode</code></p>
<p>So, for example, sending the following query</p>
<pre><code class="language-gql">query hello {
  books {
    title
  }
}
</code></pre>
<p>would create an <code>OperationDefinitionNode</code> with <code>node.name.value == 'hello'</code></p>
<p>The proper way to handle this would be to check for the <code>__schema</code> field, which would create a <code>FieldNode</code>.</p>
<p>The fix is</p>
<pre><code class="language-ts">    if (
      this.config.ignoreIntrospection &amp;&amp;
      'name' in node &amp;&amp;
      node.name?.value === '__schema' &amp;&amp;
      node.kind === Kind.FIELD
    ) {
      return 0;
    }
</code></pre>
<p>to assert that the node must be a <code>FieldNode</code></p>
<h3 id="poc">PoC</h3>
<pre><code class="language-gql">query  {
  ...__schema
}

fragment __schema on Query {
  books {
    title
    author
  }
}
</code></pre>
<pre><code class="language-gql">query __schema {
  books {
    title
    author
  }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Applications using GraphQL Armor Cost Limit plugin with <code>ignoreIntrospection</code> enabled.</p>
<h3 id="fix">Fix:</h3>
<p>Fixed on <a href="https://github.com/Escape-Technologies/graphql-armor/pull/772">772</a>. A quick patch would be to set <code>ignoreIntrospection</code> to false.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7">https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7</a></li>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/pull/772">https://github.com/Escape-Technologies/graphql-armor/pull/772</a></li>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba">https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba</a></li>
<li><a href="https://github.com/advisories/GHSA-733v-p3h5-qpq7">https://github.com/advisories/GHSA-733v-p3h5-qpq7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-733v-p3h5-qpq7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-25T15:14:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@account-kit/smart-contracts] @account-kit/smart-contracts Allowlist Module Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</id>
        <link href="https://github.com/advisories/GHSA-wfm2-rq5g-f8v5"/>
        <updated>2025-04-29T15:11:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Allowlist module contains a bypass vulnerability</p>
<h3 id="details">Details</h3>
<p>The logic for using an allowlist on a Modular Account V2 contained a bug that allowed session keys to bypass any allowlist configuration</p>
<h3>Action</h3>
<p>If you are using @aa-sdk and/or @account-kit/smart-contracts between the versions of &gt;=4.8.0 and &lt;4.28.1, please upgrade to 4.28.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/alchemyplatform/aa-sdk/security/advisories/GHSA-wfm2-rq5g-f8v5">https://github.com/alchemyplatform/aa-sdk/security/advisories/GHSA-wfm2-rq5g-f8v5</a></li>
<li><a href="https://github.com/alchemyplatform/aa-sdk/commit/b65bafdb9eec3a009df2cbabf09a35a76550e9d0">https://github.com/alchemyplatform/aa-sdk/commit/b65bafdb9eec3a009df2cbabf09a35a76550e9d0</a></li>
<li><a href="https://github.com/advisories/GHSA-wfm2-rq5g-f8v5">https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-29T15:11:41.000Z</published>
    </entry>
</feed>