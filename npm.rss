<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-02-27T08:01:56.198Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[matrix-appservice-irc] Matrix IRC Bridge allows IRC command injection to own puppeted user]]></title>
        <id>https://github.com/advisories/GHSA-5mvm-89c9-9gm5</id>
        <link href="https://github.com/advisories/GHSA-5mvm-89c9-9gm5"/>
        <updated>2025-02-25T21:46:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The matrix-appservice-irc bridge up to version 3.0.3 contains a vulnerability which can lead to arbitrary IRC command execution as the puppeted user. The attacker can only inject commands executed as their own IRC user.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in matrix-appservice-irc version 3.0.4.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-5mvm-89c9-9gm5">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-5mvm-89c9-9gm5</a></li>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/commit/74f02c8e11f16ed1b355700092c1aa9c036a11bd">https://github.com/matrix-org/matrix-appservice-irc/commit/74f02c8e11f16ed1b355700092c1aa9c036a11bd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27146">https://nvd.nist.gov/vuln/detail/CVE-2025-27146</a></li>
<li><a href="https://github.com/advisories/GHSA-5mvm-89c9-9gm5">https://github.com/advisories/GHSA-5mvm-89c9-9gm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5mvm-89c9-9gm5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-25T18:29:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dom-expressions] DOM Expressions has a Cross-Site Scripting (XSS) vulnerability due to improper use of string.replace]]></title>
        <id>https://github.com/advisories/GHSA-hw62-58pr-7wc5</id>
        <link href="https://github.com/advisories/GHSA-hw62-58pr-7wc5"/>
        <updated>2025-02-25T17:49:59.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>[!NOTE]<br>This advisory was originally emailed to <a href="mailto:community@solidjs.com">community@solidjs.com</a> by @nsysean.</p>
</blockquote>
<p>To sum it up, the use of javascript's <code>.replace()</code> opens up to potential XSS vulnerabilities with the special replacement patterns beginning with <code>$</code>.</p>
<p>Particularly, when the attributes of <code>Meta</code> tag from solid-meta are user-defined, attackers can utilise the special replacement patterns, either <code>$'</code> or `$`` to achieve XSS.</p>
<p>The solid-meta package has this issue since it uses <code>useAffect</code> and context providers, which injects the used assets in the html header. "dom-expressions" uses <code>.replace()</code> to insert the assets, which is vulnerable to the special replacement patterns listed above. </p>
<p>This effectively means that if the attributes of an asset tag contained user-controlled data, it would be vulnerable to XSS. For instance, there might be meta tags for the open graph protocol in a user profile page, but if attackers set the user query to some payload abusing <code>.replace()</code>, then they could execute arbitrary javascript in the victim's web browser. Moreover, it could be stored and cause more problems.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ryansolid/dom-expressions/security/advisories/GHSA-hw62-58pr-7wc5">https://github.com/ryansolid/dom-expressions/security/advisories/GHSA-hw62-58pr-7wc5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27108">https://nvd.nist.gov/vuln/detail/CVE-2025-27108</a></li>
<li><a href="https://github.com/ryansolid/dom-expressions/commit/521f75dfa89ed24161646e7007d9d7d21da07767">https://github.com/ryansolid/dom-expressions/commit/521f75dfa89ed24161646e7007d9d7d21da07767</a></li>
<li><a href="https://github.com/advisories/GHSA-hw62-58pr-7wc5">https://github.com/advisories/GHSA-hw62-58pr-7wc5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw62-58pr-7wc5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-25T17:49:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[solid-js] Solid Lacks Escaping of HTML in JSX Fragments allows for Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-3qxh-p7jc-5xh6</id>
        <link href="https://github.com/advisories/GHSA-3qxh-p7jc-5xh6"/>
        <updated>2025-02-25T17:49:41.000Z</updated>
        <content type="html"><![CDATA[<p>Inserts/JSX expressions inside illegal inlined JSX fragments lacked escaping, allowing user input to be rendered as HTML when put directly inside JSX fragments.</p>
<p>For instance, <code>?text=&lt;svg/onload=alert(1)&gt;</code> would trigger XSS here.</p>
<pre><code class="language-js">  const [text] = createResource(() =&gt; {
    return new URL(getRequestEvent().request.url).searchParams.get("text");
  });

  return (
    &lt;&gt;
      Text: {text()}
    &lt;/&gt;
  );
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solidjs/solid/security/advisories/GHSA-3qxh-p7jc-5xh6">https://github.com/solidjs/solid/security/advisories/GHSA-3qxh-p7jc-5xh6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27109">https://nvd.nist.gov/vuln/detail/CVE-2025-27109</a></li>
<li><a href="https://github.com/solidjs/solid/commit/b93956f28ed75469af6976a98728e313d0edd236">https://github.com/solidjs/solid/commit/b93956f28ed75469af6976a98728e313d0edd236</a></li>
<li><a href="https://github.com/advisories/GHSA-3qxh-p7jc-5xh6">https://github.com/advisories/GHSA-3qxh-p7jc-5xh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qxh-p7jc-5xh6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-25T17:49:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[better-auth] Better Auth allows bypassing the trustedOrigins Protection which leads to ATO]]></title>
        <id>https://github.com/advisories/GHSA-vp58-j275-797x</id>
        <link href="https://github.com/advisories/GHSA-vp58-j275-797x"/>
        <updated>2025-02-24T20:49:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A bypass was found for the security feature <strong>trustedOrigins</strong>. This works for wild card or absolute URLs trustedOrigins configs and opens the victims website to a <strong>Open Redirect</strong> vulnerability, where it can be used to steal the <strong>reset password token</strong> of a victims account by changing the "callbackURL" parameter value to a website owned by the attacker.</p>
<h3 id="details">Details</h3>
<h4 id="absolute-urls">Absolute URLs</h4>
<p>The issue here appears in the <strong>middleware</strong>,  <a href="https://github.com/better-auth/better-auth/blob/ddebd0358d74376ea64541512d0167dd4377f182/packages/better-auth/src/api/middlewares/origin-check.ts#L53">specifically</a>. This protection is not sufficiente and it allows attackers to get a open redirect, by using the payload <code>/\/example.com</code>. We can check this is a valid URL ( or it will be a valid URL because the URL parser fix it for us ), by checking the image bellow:</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/d192f06d-358d-4612-97d9-cab89ba55b06"></p>
<pre><code class="language-typescript">// trustedOrigins = [ "https://example.com" ]
validateURL("https://attacker.com", "callbackURL") // ❌ APIError, No Redirect
validateURL("/\/attacker.com", "callbackURL")       // ✅ Redirect to http://attacker.com
</code></pre>
<h4 id="regex">Regex</h4>
<p>The issue here is because the regex is not strong enough <code>[^/\\]*?\.example\.com[/\\]*?</code> ( this is the regex it will be created if we have a wildcard as config ), but we can bypass by using a payload like:</p>
<pre><code class="language-text">// trustedOrigins = [ "*.example.com" ]
  ┌──────────────────┐       ┌────────────────┐       ┌─────────────────┐
  │ None of [ "/\" ] │ ────▶ │ ".example.com" │ ────▶ │ One of [ "/\" ] │
  └──────────────────┘       └────────────────┘       └─────────────────┘
          demo                  .example.com                    /               ✅ Redirect to https://example.com
          demo                  .attacker.com                   /               ❌ APIError, no redirect
   http:attacker.com?           .example.com                    /               ✅ Redirect to http://attacker.com
</code></pre>
<p>This works because <strong>:</strong> and <strong>?</strong> are special chars in a URL, so when the URL parser sees, <strong>http:</strong> it will fix our happily fix our URL to <a href="http://attacker.com">http://attacker.com</a>? and make  <code>.example.com</code> as parameter, thus, bypassing this check</p>
<h3 id="poc">PoC</h3>
<p>We can PoC the open redirect by using the <code>demo.better-auth.com</code>. 
If we access the URL bellow, we are redirected to example.com:</p>
<ul>
<li><a href="https://demo.better-auth.com/api/auth/reset-password/x?callbackURL=/%5C/example.com">https://demo.better-auth.com/api/auth/reset-password/x?callbackURL=/\/example.com</a></li>
</ul>
<h3 id="impact">Impact</h3>
<p>Every single website using the <strong>better-auth</strong> library, is vulnerable to un-auth open redirect and more importantilly, vulnerable to potential one click account take over vulnerability, as the attacker can send the victim a email to reset their account while changing the "redirectTo" parameter <a href="https://demo.better-auth.com/forget-password">here</a>, and when the victim clicks on the link, the reset token is sent to the attackers website, thus making the attacker to use the token stolen and reset the password of the victim.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/better-auth/better-auth/security/advisories/GHSA-vp58-j275-797x">https://github.com/better-auth/better-auth/security/advisories/GHSA-vp58-j275-797x</a></li>
<li><a href="https://github.com/better-auth/better-auth/commit/b381cac7aafd6aa53ef78b6ab771ebfa24643c80">https://github.com/better-auth/better-auth/commit/b381cac7aafd6aa53ef78b6ab771ebfa24643c80</a></li>
<li><a href="https://github.com/better-auth/better-auth/blob/ddebd0358d74376ea64541512d0167dd4377f182/packages/better-auth/src/api/middlewares/origin-check.ts#L53">https://github.com/better-auth/better-auth/blob/ddebd0358d74376ea64541512d0167dd4377f182/packages/better-auth/src/api/middlewares/origin-check.ts#L53</a></li>
<li><a href="https://github.com/advisories/GHSA-vp58-j275-797x">https://github.com/advisories/GHSA-vp58-j275-797x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vp58-j275-797x</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-24T20:49:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tarteaucitronjs] tarteaucitron Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-8wp9-x25p-8794</id>
        <link href="https://github.com/advisories/GHSA-8wp9-x25p-8794"/>
        <updated>2025-02-24T18:30:26.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package tarteaucitronjs before 1.17.0 are vulnerable to Cross-site Scripting (XSS) via the getElemWidth() and getElemHeight(). This is related to <a href="https://security.snyk.io/vuln/SNYK-JS-TARTEAUCITRONJS-8366541">SNYK-JS-TARTEAUCITRONJS-8366541</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1467">https://nvd.nist.gov/vuln/detail/CVE-2025-1467</a></li>
<li><a href="https://github.com/AmauriC/tarteaucitron.js/issues/1184">https://github.com/AmauriC/tarteaucitron.js/issues/1184</a></li>
<li><a href="https://github.com/AmauriC/tarteaucitron.js/commit/12490579001d5caa187adcaecb01da570a12076b">https://github.com/AmauriC/tarteaucitron.js/commit/12490579001d5caa187adcaecb01da570a12076b</a></li>
<li><a href="https://gist.github.com/Rudloff/d48f525215bd5426cbb076116c4422dd">https://gist.github.com/Rudloff/d48f525215bd5426cbb076116c4422dd</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-TARTEAUCITRONJS-8731160">https://security.snyk.io/vuln/SNYK-JS-TARTEAUCITRONJS-8731160</a></li>
<li><a href="https://github.com/advisories/GHSA-8wp9-x25p-8794">https://github.com/advisories/GHSA-8wp9-x25p-8794</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8wp9-x25p-8794</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-23T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[better-auth] Beter Auth has an Open Redirect via Scheme-Less Callback Parameter]]></title>
        <id>https://github.com/advisories/GHSA-hjpm-7mrm-26w8</id>
        <link href="https://github.com/advisories/GHSA-hjpm-7mrm-26w8"/>
        <updated>2025-02-25T18:00:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The application is vulnerable to an open redirect due to improper validation of the callbackURL parameter in the email verification endpoint and any other endpoint that accepts callback url. While the server blocks fully qualified URLs (e.g., <a href="https://evil.com">https://evil.com</a>), it incorrectly allows scheme-less URLs (e.g., //malicious-site.com). This results in the browser interpreting the URL as <a href="https://malicious-site.com">https://malicious-site.com</a>, leading to unintended redirection.</p>
<p>bypass for : <a href="https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723">https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723</a></p>
<h3 id="affected-versions">Affected Versions</h3>
<p>All versions prior to 1.1.19</p>
<h3 id="details">Details</h3>
<p>The application’s email verification endpoint (/auth/verify-email) accepts a callbackURL parameter intended to redirect users after successful email verification. While the server correctly blocks fully qualified external URLs (e.g., <a href="https://evil.com">https://evil.com</a>), it improperly allows scheme-less URLs (e.g., //malicious-site.com). This issue occurs because browsers interpret //malicious-site.com as <a href="https://malicious-site.com">https://malicious-site.com</a>, leading to an open redirect vulnerability.</p>
<p>An attacker can exploit this flaw by crafting a malicious verification link and tricking users into clicking it. Upon successful email verification, the user will be automatically redirected to the attacker's website, which can be used for phishing, malware distribution, or stealing sensitive authentication tokens.</p>
<h3 id="impact">Impact</h3>
<p>Phishing &amp; Credential Theft – Attackers can redirect users to a fake login page, tricking them into entering sensitive credentials, which can then be stolen.</p>
<p>Session Hijacking &amp; Token Theft – If used in OAuth flows, an attacker could redirect authentication tokens to their own domain, leading to account takeover.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723">https://github.com/better-auth/better-auth/security/advisories/GHSA-8jhw-6pjj-8723</a></li>
<li><a href="https://github.com/better-auth/better-auth/security/advisories/GHSA-hjpm-7mrm-26w8">https://github.com/better-auth/better-auth/security/advisories/GHSA-hjpm-7mrm-26w8</a></li>
<li><a href="https://github.com/better-auth/better-auth/commit/24659aefc35a536b95ea4e5347e52c8803910153">https://github.com/better-auth/better-auth/commit/24659aefc35a536b95ea4e5347e52c8803910153</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27143">https://nvd.nist.gov/vuln/detail/CVE-2025-27143</a></li>
<li><a href="https://github.com/better-auth/better-auth/commit/b381cac7aafd6aa53ef78b6ab771ebfa24643c80">https://github.com/better-auth/better-auth/commit/b381cac7aafd6aa53ef78b6ab771ebfa24643c80</a></li>
<li><a href="https://github.com/better-auth/better-auth/releases/tag/v1.1.21">https://github.com/better-auth/better-auth/releases/tag/v1.1.21</a></li>
<li><a href="https://github.com/advisories/GHSA-hjpm-7mrm-26w8">https://github.com/advisories/GHSA-hjpm-7mrm-26w8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjpm-7mrm-26w8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-24T18:27:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serialize-javascript] Cross-site Scripting (XSS) in serialize-javascript]]></title>
        <id>https://github.com/advisories/GHSA-76p7-773f-r4q5</id>
        <link href="https://github.com/advisories/GHSA-76p7-773f-r4q5"/>
        <updated>2025-02-21T20:19:18.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in npm-serialize-javascript. The vulnerability occurs because the serialize-javascript module does not properly sanitize certain inputs, such as regex or other JavaScript object types, allowing an attacker to inject malicious code. This code could be executed when deserialized by a web browser, causing Cross-site scripting (XSS) attacks. This issue is critical in environments where serialized data is sent to web clients, potentially compromising the security of the website or web application using this package.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11831">https://nvd.nist.gov/vuln/detail/CVE-2024-11831</a></li>
<li><a href="https://github.com/yahoo/serialize-javascript/pull/173">https://github.com/yahoo/serialize-javascript/pull/173</a></li>
<li><a href="https://github.com/yahoo/serialize-javascript/commit/f27d65d3de42affe2aac14607066c293891cec4e">https://github.com/yahoo/serialize-javascript/commit/f27d65d3de42affe2aac14607066c293891cec4e</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-11831">https://access.redhat.com/security/cve/CVE-2024-11831</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2312579">https://bugzilla.redhat.com/show_bug.cgi?id=2312579</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:1334">https://access.redhat.com/errata/RHSA-2025:1334</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:1468">https://access.redhat.com/errata/RHSA-2025:1468</a></li>
<li><a href="https://github.com/yahoo/serialize-javascript/commit/7f3ac252d86b802454cb43782820aea2e0f6dc25">https://github.com/yahoo/serialize-javascript/commit/7f3ac252d86b802454cb43782820aea2e0f6dc25</a></li>
<li><a href="https://github.com/advisories/GHSA-76p7-773f-r4q5">https://github.com/advisories/GHSA-76p7-773f-r4q5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76p7-773f-r4q5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T18:30:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@rpldy/uploader] @rpldy/uploader prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-pc47-g7gv-4gpw</id>
        <link href="https://github.com/advisories/GHSA-pc47-g7gv-4gpw"/>
        <updated>2025-02-21T15:18:11.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.createUploader function of @rpldy/uploader v1.8.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57082">https://nvd.nist.gov/vuln/detail/CVE-2024-57082</a></li>
<li><a href="https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315">https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315</a></li>
<li><a href="https://github.com/rpldy/react-uploady/commit/386e0a80c428eb988e89fd2acf9bb0b786ac8028">https://github.com/rpldy/react-uploady/commit/386e0a80c428eb988e89fd2acf9bb0b786ac8028</a></li>
<li><a href="https://github.com/rpldy/react-uploady/releases/tag/v1.9.1">https://github.com/rpldy/react-uploady/releases/tag/v1.9.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pc47-g7gv-4gpw">https://github.com/advisories/GHSA-pc47-g7gv-4gpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pc47-g7gv-4gpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tanstack/form-core] @tanstack/form-core prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</id>
        <link href="https://github.com/advisories/GHSA-ggv3-vmgw-xv2q"/>
        <updated>2025-02-20T22:59:33.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.mutateMergeDeep function of @tanstack/form-core v0.35.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57068">https://nvd.nist.gov/vuln/detail/CVE-2024-57068</a></li>
<li><a href="https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533">https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533</a></li>
<li><a href="https://github.com/TanStack/form/pull/1151">https://github.com/TanStack/form/pull/1151</a></li>
<li><a href="https://github.com/TanStack/form/commit/455522c8f3272787668f3d1afd6adbc6dc1b9e8a">https://github.com/TanStack/form/commit/455522c8f3272787668f3d1afd6adbc6dc1b9e8a</a></li>
<li><a href="https://github.com/advisories/GHSA-ggv3-vmgw-xv2q">https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[docsgpt] DocsGPT Allows Remote Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-9gff-5v8w-x922</id>
        <link href="https://github.com/advisories/GHSA-9gff-5v8w-x922"/>
        <updated>2025-02-20T20:18:37.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, that could result in Remote Code Execution (RCE), has been found in DocsGPT. Due to improper parsing of JSON data using eval() an unauthorized attacker could send arbitrary Python code to be executed via /api/remote endpoint.</p>
<p>This issue affects DocsGPT: from 0.8.1 through 0.12.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0868">https://nvd.nist.gov/vuln/detail/CVE-2025-0868</a></li>
<li><a href="https://cert.pl/en/posts/2025/02/CVE-2025-0868">https://cert.pl/en/posts/2025/02/CVE-2025-0868</a></li>
<li><a href="https://cert.pl/posts/2025/02/CVE-2025-0868">https://cert.pl/posts/2025/02/CVE-2025-0868</a></li>
<li><a href="https://github.com/arc53/DocsGPT">https://github.com/arc53/DocsGPT</a></li>
<li><a href="https://github.com/advisories/GHSA-9gff-5v8w-x922">https://github.com/advisories/GHSA-9gff-5v8w-x922</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gff-5v8w-x922</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-20T12:31:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor5-premium-features] Cross-site scripting (XSS) in the CKEditor 5 real-time collaboration package]]></title>
        <id>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</id>
        <link href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh"/>
        <updated>2025-02-20T22:53:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>During a recent internal audit, we identified a Cross-Site Scripting (XSS) vulnerability in the CKEditor 5 real-time collaboration package. This vulnerability can lead to unauthorized JavaScript code execution and affects user markers, which represent users' positions within the document.</p>
<p>This vulnerability affects only installations with <a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">Real-time collaborative editing</a> enabled.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been recognized and patched. The fix will be available in version 44.2.1 (and above).</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@cksource.com">security@cksource.com</a> if you have any questions or comments about this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25299">https://nvd.nist.gov/vuln/detail/CVE-2025-25299</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html</a></li>
<li><a href="https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1">https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-20T20:16:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ckeditor/ckeditor5-real-time-collaboration] Cross-site scripting (XSS) in the CKEditor 5 real-time collaboration package]]></title>
        <id>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</id>
        <link href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh"/>
        <updated>2025-02-20T22:53:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>During a recent internal audit, we identified a Cross-Site Scripting (XSS) vulnerability in the CKEditor 5 real-time collaboration package. This vulnerability can lead to unauthorized JavaScript code execution and affects user markers, which represent users' positions within the document.</p>
<p>This vulnerability affects only installations with <a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">Real-time collaborative editing</a> enabled.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been recognized and patched. The fix will be available in version 44.2.1 (and above).</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@cksource.com">security@cksource.com</a> if you have any questions or comments about this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/ckeditor/ckeditor5/security/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=ee1dca024c9b4e44aef039f99ebe6c664</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25299">https://nvd.nist.gov/vuln/detail/CVE-2025-25299</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html">https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html</a></li>
<li><a href="https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1">https://github.com/ckeditor/ckeditor5/releases/tag/v44.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-j3mm-wmfm-mwvh">https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3mm-wmfm-mwvh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-20T20:16:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Directus allows updates to non-allowed fields due to overlapping policies]]></title>
        <id>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</id>
        <link href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6"/>
        <updated>2025-02-19T19:59:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If there are two overlapping policies for the <code>update</code> action that allow access to different fields, instead of correctly checking access permissions against the item they apply for the user is allowed to update the superset of fields allowed by any of the policies. </p>
<p>E.g. have one policy allowing update access to <code>field_a</code> if the <code>id == 1</code> and one policy allowing update access to <code>field_b</code> if the <code>id == 2</code>. The user with both these policies is allowed to update both <code>field_a</code> and <code>field_b</code> for the items with ids <code>1</code> and <code>2</code>. </p>
<h3 id="details">Details</h3>
<p>Before v11, if a user was allowed to update an item they were allowed to update the fields that the single permission, that applied to that item, listed. With overlapping permissions this isn't as clear cut anymore and the union of fields might not be the fields the user is allowed to update for that specific item.</p>
<p>The solution that this PR introduces is to evaluate the permissions for each field that the user tries to update in the validateItemAccess DB query, instead of only verifying access to the item as a whole. This is done by, instead of returning the actual field value, returning a flag that indicates if the user has access to that field. This uses the same case/when mechanism that is used for stripping out non permitted field that is at the core of the permissions engine.</p>
<p>As a result, for every item that the access is validated for, the expected result is an item that has either 1 or null for all the "requested" fields instead of any of the actual field values. These results are not useful for anything other than verifying the field level access permissions.</p>
<p>The final check in validateItemAccess can either fail if the number of items does not match the number of items the access is checked for (ie. the user does not have access to the item at all) or if not all of the passed in fields have access permissions for any of the returned items.</p>
<h3 id="impact">Impact</h3>
<p>This is a vulnerability that allows update access to unintended fields, potentially impacting the password field for user accounts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6</a></li>
<li><a href="https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2">https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27089">https://nvd.nist.gov/vuln/detail/CVE-2025-27089</a></li>
<li><a href="https://github.com/directus/directus/releases/tag/v11.1.2">https://github.com/directus/directus/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/advisories/GHSA-99vm-5v2h-h6r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-19T17:46:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus allows updates to non-allowed fields due to overlapping policies]]></title>
        <id>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</id>
        <link href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6"/>
        <updated>2025-02-19T19:59:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If there are two overlapping policies for the <code>update</code> action that allow access to different fields, instead of correctly checking access permissions against the item they apply for the user is allowed to update the superset of fields allowed by any of the policies. </p>
<p>E.g. have one policy allowing update access to <code>field_a</code> if the <code>id == 1</code> and one policy allowing update access to <code>field_b</code> if the <code>id == 2</code>. The user with both these policies is allowed to update both <code>field_a</code> and <code>field_b</code> for the items with ids <code>1</code> and <code>2</code>. </p>
<h3 id="details">Details</h3>
<p>Before v11, if a user was allowed to update an item they were allowed to update the fields that the single permission, that applied to that item, listed. With overlapping permissions this isn't as clear cut anymore and the union of fields might not be the fields the user is allowed to update for that specific item.</p>
<p>The solution that this PR introduces is to evaluate the permissions for each field that the user tries to update in the validateItemAccess DB query, instead of only verifying access to the item as a whole. This is done by, instead of returning the actual field value, returning a flag that indicates if the user has access to that field. This uses the same case/when mechanism that is used for stripping out non permitted field that is at the core of the permissions engine.</p>
<p>As a result, for every item that the access is validated for, the expected result is an item that has either 1 or null for all the "requested" fields instead of any of the actual field values. These results are not useful for anything other than verifying the field level access permissions.</p>
<p>The final check in validateItemAccess can either fail if the number of items does not match the number of items the access is checked for (ie. the user does not have access to the item at all) or if not all of the passed in fields have access permissions for any of the returned items.</p>
<h3 id="impact">Impact</h3>
<p>This is a vulnerability that allows update access to unintended fields, potentially impacting the password field for user accounts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/directus/directus/security/advisories/GHSA-99vm-5v2h-h6r6</a></li>
<li><a href="https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2">https://github.com/directus/directus/commit/a7ea67783b060d0d6fc964d71c2d4575d5eee4e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27089">https://nvd.nist.gov/vuln/detail/CVE-2025-27089</a></li>
<li><a href="https://github.com/directus/directus/releases/tag/v11.1.2">https://github.com/directus/directus/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-99vm-5v2h-h6r6">https://github.com/advisories/GHSA-99vm-5v2h-h6r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99vm-5v2h-h6r6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-19T17:46:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jsonpath-plus] JSONPath Plus allows Remote Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</id>
        <link href="https://github.com/advisories/GHSA-hw8r-x6gr-5gjp"/>
        <updated>2025-02-18T19:25:35.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package jsonpath-plus before 10.3.0 are vulnerable to Remote Code Execution (RCE) due to improper input sanitization. An attacker can execute aribitrary code on the system by exploiting the unsafe default usage of eval='safe' mode.</p>
<p><strong>Note:</strong></p>
<p>This is caused by an incomplete fix for CVE-2024-21534.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1302">https://nvd.nist.gov/vuln/detail/CVE-2025-1302</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/30942896d27cb8a806b965a5ca9ef9f686be24ee">https://github.com/JSONPath-Plus/JSONPath/commit/30942896d27cb8a806b965a5ca9ef9f686be24ee</a></li>
<li><a href="https://gist.github.com/nickcopi/11ba3cb4fdee6f89e02e6afae8db6456">https://gist.github.com/nickcopi/11ba3cb4fdee6f89e02e6afae8db6456</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-8719585">https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-8719585</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21534">https://nvd.nist.gov/vuln/detail/CVE-2024-21534</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/blob/8e4acf8aff5f446aa66323e12394ac5615c3b260/src/Safe-Script.js#L127">https://github.com/JSONPath-Plus/JSONPath/blob/8e4acf8aff5f446aa66323e12394ac5615c3b260/src/Safe-Script.js#L127</a></li>
<li><a href="https://github.com/advisories/GHSA-hw8r-x6gr-5gjp">https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw8r-x6gr-5gjp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-15T06:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request] @octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</id>
        <link href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38"/>
        <updated>2025-02-18T19:17:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code> used to match the <code>link</code> header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious <code>link</code> header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.</p>
<h3 id="details">Details</h3>
<p>The vulnerability resides in the regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code>, which is used to match the <code>link</code> header in HTTP responses. This regular expression captures content between angle brackets (<code>&lt;&gt;</code>) followed by <code>; rel="deprecation"</code>. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.
An attacker can exploit this vulnerability by sending a specially crafted <code>link</code> header designed to trigger excessive backtracking. For example, the following headers:</p>
<pre><code class="language-js">fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
fakeHeaders.set("deprecation", "true");
</code></pre>
<p>The crafted <code>link</code> header consists of 100,000 consecutive <code>&lt;</code> characters followed by a closing <code>&gt;</code>. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.
The issue is present in the following code:</p>
<pre><code class="language-js">const matches = responseHeaders.link &amp;&amp; responseHeaders.link.match(/&lt;([^&gt;]+)&gt;; rel="deprecation"/);
</code></pre>
<p>In this scenario, the <code>link</code> header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { request } from "@octokit/request";
const originalFetch = globalThis.fetch;
globalThis.fetch = async (url, options) =&gt; {
  const response = await originalFetch(url, options);
  const fakeHeaders = new Headers(response.headers);
  fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
  fakeHeaders.set("deprecation", "true");
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers: fakeHeaders
  });
};
request("GET /repos/octocat/hello-world")
  .then(response =&gt; {
    // console.log("[+] Response received:", response);
  })
  .catch(error =&gt; {
    // console.error("[-] Error:", error);
  });
// globalThis.fetch = originalFetch;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a <em>Denial of Service (DoS) vulnerability</em> caused by a <em>ReDoS (Regular Expression Denial of Service)</em> flaw. The vulnerability allows an attacker to craft a malicious <code>link</code> header that exploits the inefficient backtracking behavior of the regular expression used in the code.
The primary impact is the potential for <em>server resource exhaustion</em>, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.
The vulnerability impacts any system that uses this specific regular expression to process <code>link</code> headers in HTTP responses. This can include:</p>
<ul>
<li>Web applications or APIs that rely on parsing headers for deprecation information.</li>
<li>Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.</li>
<li>Service providers who may face disruption in operations or performance degradation due to this flaw.
If left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious <code>link</code> header, making it a low-barrier attack that could be exploited by anyone.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38</a></li>
<li><a href="https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68">https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25290">https://nvd.nist.gov/vuln/detail/CVE-2025-25290</a></li>
<li><a href="https://github.com/octokit/request.js/releases/tag/v8.4.1">https://github.com/octokit/request.js/releases/tag/v8.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/advisories/GHSA-rmvr-2pp2-xj38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T18:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request] @octokit/request has a Regular Expression in fetchWrapper that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</id>
        <link href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38"/>
        <updated>2025-02-18T19:17:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code> used to match the <code>link</code> header in HTTP responses is vulnerable to a ReDoS (Regular Expression Denial of Service) attack. This vulnerability arises due to the unbounded nature of the regex's matching behavior, which can lead to catastrophic backtracking when processing specially crafted input. An attacker could exploit this flaw by sending a malicious <code>link</code> header, resulting in excessive CPU usage and potentially causing the server to become unresponsive, impacting service availability.</p>
<h3 id="details">Details</h3>
<p>The vulnerability resides in the regular expression <code>/&lt;([^&gt;]+)&gt;; rel="deprecation"/</code>, which is used to match the <code>link</code> header in HTTP responses. This regular expression captures content between angle brackets (<code>&lt;&gt;</code>) followed by <code>; rel="deprecation"</code>. However, the pattern is vulnerable to ReDoS (Regular Expression Denial of Service) attacks due to its susceptibility to catastrophic backtracking when processing malicious input.
An attacker can exploit this vulnerability by sending a specially crafted <code>link</code> header designed to trigger excessive backtracking. For example, the following headers:</p>
<pre><code class="language-js">fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
fakeHeaders.set("deprecation", "true");
</code></pre>
<p>The crafted <code>link</code> header consists of 100,000 consecutive <code>&lt;</code> characters followed by a closing <code>&gt;</code>. This input forces the regular expression engine to backtrack extensively in an attempt to match the pattern. As a result, the server can experience a significant increase in CPU usage, which may lead to denial of service, making the server unresponsive or even causing it to crash under load.
The issue is present in the following code:</p>
<pre><code class="language-js">const matches = responseHeaders.link &amp;&amp; responseHeaders.link.match(/&lt;([^&gt;]+)&gt;; rel="deprecation"/);
</code></pre>
<p>In this scenario, the <code>link</code> header value triggers the regex to perform excessive backtracking, resulting in resource exhaustion and potentially causing the service to become unavailable.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/2afdabf0fc4cb6cfbd3b1d58b6082f6a">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { request } from "@octokit/request";
const originalFetch = globalThis.fetch;
globalThis.fetch = async (url, options) =&gt; {
  const response = await originalFetch(url, options);
  const fakeHeaders = new Headers(response.headers);
  fakeHeaders.set("link", "&lt;".repeat(100000) + "&gt;");
  fakeHeaders.set("deprecation", "true");
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers: fakeHeaders
  });
};
request("GET /repos/octocat/hello-world")
  .then(response =&gt; {
    // console.log("[+] Response received:", response);
  })
  .catch(error =&gt; {
    // console.error("[-] Error:", error);
  });
// globalThis.fetch = originalFetch;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is a <em>Denial of Service (DoS) vulnerability</em> caused by a <em>ReDoS (Regular Expression Denial of Service)</em> flaw. The vulnerability allows an attacker to craft a malicious <code>link</code> header that exploits the inefficient backtracking behavior of the regular expression used in the code.
The primary impact is the potential for <em>server resource exhaustion</em>, specifically high CPU usage, which can cause the server to become unresponsive or even crash when processing the malicious request. This affects the availability of the service, leading to downtime or degraded performance.
The vulnerability impacts any system that uses this specific regular expression to process <code>link</code> headers in HTTP responses. This can include:</p>
<ul>
<li>Web applications or APIs that rely on parsing headers for deprecation information.</li>
<li>Users interacting with the affected service, as they may experience delays or outages if the server becomes overwhelmed.</li>
<li>Service providers who may face disruption in operations or performance degradation due to this flaw.
If left unpatched, the vulnerability can be exploited by any unauthenticated user who is able to send a specially crafted HTTP request with a malicious <code>link</code> header, making it a low-barrier attack that could be exploited by anyone.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/octokit/request.js/security/advisories/GHSA-rmvr-2pp2-xj38</a></li>
<li><a href="https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68">https://github.com/octokit/request.js/commit/34ff07ee86fc5c20865982d77391bc910ef19c68</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25290">https://nvd.nist.gov/vuln/detail/CVE-2025-25290</a></li>
<li><a href="https://github.com/octokit/request.js/releases/tag/v8.4.1">https://github.com/octokit/request.js/releases/tag/v8.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-rmvr-2pp2-xj38">https://github.com/advisories/GHSA-rmvr-2pp2-xj38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rmvr-2pp2-xj38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T18:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/plugin-paginate-rest] @octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</id>
        <link href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q"/>
        <updated>2025-02-18T19:15:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>For the npm package <code>@octokit/plugin-paginate-rest</code>, when calling <code>octokit.paginate.iterator()</code>, a specially crafted <code>octokit</code> instance—particularly with a malicious <code>link</code> parameter in the <code>headers</code> section of the <code>request</code>—can trigger a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">line 39</a> of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:</p>
<pre><code class="language-js">url = ((normalizedResponse.headers.link || "").match(
  /&lt;([^&gt;]+)&gt;;\s*rel="next"/,
) || [])[1];
</code></pre>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;;\s*rel="next"/</code> may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted <code>Link</code> headers.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/plugin-paginate-rest</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { Octokit } from "@octokit/core";
import { paginateRest } from "@octokit/plugin-paginate-rest";

const MyOctokit = Octokit.plugin(paginateRest);
const octokit = new MyOctokit({
  auth: "your-github-token",
});

// Intercept the request to inject a malicious 'link' header for ReDoS
octokit.hook.wrap("request", async (request, options) =&gt; {
  const maliciousLinkHeader = "" + "&lt;".repeat(100000) + "&gt;"; // attack string
  return {
    data: [],
    headers: {
      link: maliciousLinkHeader, // Inject malicious 'link' header
    },
  };
});

// Trigger the ReDoS attack by paginating through GitHub issues
(async () =&gt; {
  try {
    for await (const normalizedResponse of octokit.paginate.iterator(
      "GET /repos/{owner}/{repo}/issues", { owner: "DayShift", repo: "ReDos", per_page: 100 }
    )) {
      console.log({ normalizedResponse });
    }
  } catch (error) {
    console.error("Error encountered:", error);
  }
})();
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b"></p>
<h3 id="impact">Impact</h3>
<h4 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h4>
<p>This is a <em>Regular Expression Denial of Service (ReDoS) vulnerability</em>, which occurs due to excessive backtracking in the regex pattern:</p>
<pre><code class="language-js">/&lt;([^&gt;]+)&gt;;\s*rel="next"/
</code></pre>
<p>When processing a specially crafted <code>Link</code> header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.</p>
<h4 id="who-is-impacted">Who is impacted?</h4>
<ul>
<li>Users of <code>@octokit/plugin-paginate-rest</code> who call <code>octokit.paginate.iterator()</code> and process untrusted or manipulated <code>Link</code> headers.</li>
<li>Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.</li>
<li>GitHub API consumers who integrate this package into their projects for paginated data retrieval.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab">https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25288">https://nvd.nist.gov/vuln/detail/CVE-2025-25288</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2">https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:57:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/plugin-paginate-rest] @octokit/plugin-paginate-rest has a Regular Expression in iterator Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</id>
        <link href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q"/>
        <updated>2025-02-18T19:15:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>For the npm package <code>@octokit/plugin-paginate-rest</code>, when calling <code>octokit.paginate.iterator()</code>, a specially crafted <code>octokit</code> instance—particularly with a malicious <code>link</code> parameter in the <code>headers</code> section of the <code>request</code>—can trigger a ReDoS attack.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">line 39</a> of iterator.ts in the @octokit/plugin-paginate-rest repository. The relevant code is as follows:</p>
<pre><code class="language-js">url = ((normalizedResponse.headers.link || "").match(
  /&lt;([^&gt;]+)&gt;;\s*rel="next"/,
) || [])[1];
</code></pre>
<p>The regular expression <code>/&lt;([^&gt;]+)&gt;;\s*rel="next"/</code> may lead to a potential backtracking vulnerability, resulting in a ReDoS (Regular Expression Denial of Service) attack. This could cause high CPU utilization and even service slowdowns or freezes when processing specially crafted <code>Link</code> headers.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/d3f2ad000be8384d2105c87c2ed7ce7d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/plugin-paginate-rest</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { Octokit } from "@octokit/core";
import { paginateRest } from "@octokit/plugin-paginate-rest";

const MyOctokit = Octokit.plugin(paginateRest);
const octokit = new MyOctokit({
  auth: "your-github-token",
});

// Intercept the request to inject a malicious 'link' header for ReDoS
octokit.hook.wrap("request", async (request, options) =&gt; {
  const maliciousLinkHeader = "" + "&lt;".repeat(100000) + "&gt;"; // attack string
  return {
    data: [],
    headers: {
      link: maliciousLinkHeader, // Inject malicious 'link' header
    },
  };
});

// Trigger the ReDoS attack by paginating through GitHub issues
(async () =&gt; {
  try {
    for await (const normalizedResponse of octokit.paginate.iterator(
      "GET /repos/{owner}/{repo}/issues", { owner: "DayShift", repo: "ReDos", per_page: 100 }
    )) {
      console.log({ normalizedResponse });
    }
  } catch (error) {
    console.error("Error encountered:", error);
  }
})();
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/619c030e-5473-4a26-9e2a-4b9a26c1563b"></p>
<h3 id="impact">Impact</h3>
<h4 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h4>
<p>This is a <em>Regular Expression Denial of Service (ReDoS) vulnerability</em>, which occurs due to excessive backtracking in the regex pattern:</p>
<pre><code class="language-js">/&lt;([^&gt;]+)&gt;;\s*rel="next"/
</code></pre>
<p>When processing a specially crafted <code>Link</code> header, this regex can cause significant performance degradation, leading to high CPU utilization and potential service unresponsiveness.</p>
<h4 id="who-is-impacted">Who is impacted?</h4>
<ul>
<li>Users of <code>@octokit/plugin-paginate-rest</code> who call <code>octokit.paginate.iterator()</code> and process untrusted or manipulated <code>Link</code> headers.</li>
<li>Applications relying on Octokit's pagination mechanism, particularly those handling large volumes of API requests.</li>
<li>GitHub API consumers who integrate this package into their projects for paginated data retrieval.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/octokit/plugin-paginate-rest.js/security/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab">https://github.com/octokit/plugin-paginate-rest.js/commit/bb6c4f945d8023902cf387391d2b2209261044ab</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25288">https://nvd.nist.gov/vuln/detail/CVE-2025-25288</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts">https://github.com/octokit/plugin-paginate-rest.js/blob/main/src/iterator.ts</a></li>
<li><a href="https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2">https://github.com/octokit/plugin-paginate-rest.js/releases/tag/v9.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-h5c3-5r3r-rr8q">https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5c3-5r3r-rr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:57:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@octokit/request-error] @octokit/request-error has a Regular Expression in index that Leads to ReDoS Vulnerability Due to Catastrophic Backtracking]]></title>
        <id>https://github.com/advisories/GHSA-xx4v-prfh-6cgc</id>
        <link href="https://github.com/advisories/GHSA-xx4v-prfh-6cgc"/>
        <updated>2025-02-14T23:07:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the processing of HTTP request headers. By sending an authorization header containing an excessively long sequence of spaces followed by a newline and "@", an attacker can exploit inefficient regular expression processing, leading to excessive resource consumption. This can significantly degrade server performance or cause a denial-of-service (DoS) condition, impacting availability.</p>
<h3 id="details">Details</h3>
<p>The issue occurs at <a href="https://github.com/octokit/request-error.js/blob/main/src/index.ts">line 52</a> of iterator.ts in the @octokit/request-error repository.
The vulnerability is caused by the use of an inefficient regular expression in the handling of the <code>authorization</code> header within the request processing logic:</p>
<pre><code class="language-js">authorization: options.request.headers.authorization.replace(
  / .*$/, 
  " [REDACTED]"
)
</code></pre>
<p>The regular expression <code>/ .*$/</code> matches a space followed by any number of characters until the end of the line. This pattern is vulnerable to Regular Expression Denial of Service (ReDoS) when processing specially crafted input. Specifically, an attacker can send an <code>authorization</code> header containing a long sequence of spaces followed by a newline and "@", such as:</p>
<pre><code class="language-js">headers: {
  authorization: "" + " ".repeat(100000) + "\n@",
}
</code></pre>
<p>Due to the way JavaScript's regular expression engine backtracks while attempting to match the space followed by arbitrary characters, this input can cause excessive CPU usage, significantly slowing down or even freezing the server. This leads to a denial-of-service condition, impacting availability.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/ShiyuBanzhou/e1203ad22701fd043b8501eb37676a0d">The gist of PoC.js</a></p>
<ol>
<li>run npm i @octokit/request-error</li>
<li>run 'node poc.js'
result:</li>
<li>then the program will stuck forever with high CPU usage</li>
</ol>
<pre><code class="language-js">import { RequestError } from "@octokit/request-error";

const error = new RequestError("Oops", 500, {
  request: {
    method: "POST",
    url: "https://api.github.com/foo",
    body: {
      bar: "baz",
    },
    headers: {
      authorization: ""+" ".repeat(100000)+"\n@",
    },
  },
  response: {
    status: 500,
    url: "https://api.github.com/foo",
    headers: {
      "x-github-request-id": "1:2:3:4",
    },
    data: {
      foo: "bar",
    },
  },
});
</code></pre>
<h3 id="impact">Impact</h3>
<h4 id="vulnerability-type--impact">Vulnerability Type &amp; Impact:</h4>
<p>This is a <code>Regular Expression Denial of Service (ReDoS) vulnerability</code>, which occurs due to an inefficient regular expression (<code>/ .*$/</code>) used to sanitize the <code>authorization</code> header. An attacker can craft a malicious input that triggers excessive backtracking in the regex engine, leading to high CPU consumption and potential denial-of-service (DoS).</p>
<h4 id="who-is-impacted">Who is Impacted?</h4>
<ul>
<li>Projects or services using this code to process HTTP headers are vulnerable.</li>
<li>Applications that rely on user-supplied <code>authorization</code> headers are at risk, especially those processing a large volume of authentication requests.</li>
<li>Multi-tenant or API-driven platforms could experience degraded performance or service outages if exploited at scale.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc">https://github.com/octokit/request-error.js/security/advisories/GHSA-xx4v-prfh-6cgc</a></li>
<li><a href="https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e">https://github.com/octokit/request-error.js/commit/d558320874a4bc8d356babf1079e6f0056a59b9e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25289">https://nvd.nist.gov/vuln/detail/CVE-2025-25289</a></li>
<li><a href="https://github.com/octokit/request-error.js/blob/main/src/index.ts">https://github.com/octokit/request-error.js/blob/main/src/index.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-xx4v-prfh-6cgc">https://github.com/advisories/GHSA-xx4v-prfh-6cgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx4v-prfh-6cgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-14T17:58:54.000Z</published>
    </entry>
</feed>