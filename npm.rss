<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-05-01T02:32:14.081Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-04-30T21:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formidable] Formidable relies on hexoid to prevent guessing of filenames for untrusted executable content]]></title>
        <id>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</id>
        <link href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m"/>
        <updated>2025-04-30T21:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>Formidable (aka node-formidable) 2.1.0 through 3.x before 3.5.3 relies on hexoid to prevent guessing of filenames for untrusted executable content; however, hexoid is documented as not "cryptographically secure." (Also, there is a scenario in which only the last two characters of a hexoid string need to be guessed, but this is not often relevant.) NOTE: this does not imply that, in a typical use case, attackers will be able to exploit any hexoid behavior to upload and execute their own content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46653">https://nvd.nist.gov/vuln/detail/CVE-2025-46653</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5">https://github.com/node-formidable/formidable/commit/022c2c5577dfe14d2947f10909d81b03b6070bf5</a></li>
<li><a href="https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10">https://github.com/node-formidable/formidable/blob/d0fbec13edc8add54a1afb9ce1a8d3db803f8d47/CHANGELOG.md?plain=1#L10</a></li>
<li><a href="https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md">https://github.com/zast-ai/vulnerability-reports/blob/main/formidable/file_upload/report.md</a></li>
<li><a href="https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa">https://github.com/node-formidable/formidable/commit/37a3e89fca1ed68ec674a539f13aafd62221ddaa</a></li>
<li><a href="https://github.com/advisories/GHSA-75v8-2h7p-7m2m">https://github.com/advisories/GHSA-75v8-2h7p-7m2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75v8-2h7p-7m2m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-26T21:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-04-30T20:42:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-04-30T20:42:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-04-30T20:42:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-04-30T20:42:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's server.fs.deny bypassed with /. for files under project root]]></title>
        <id>https://github.com/advisories/GHSA-859w-5945-r5v3</id>
        <link href="https://github.com/advisories/GHSA-859w-5945-r5v3"/>
        <updated>2025-04-30T20:42:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of files in <a href="https://vite.dev/config/shared-options.html#root">the project <code>root</code></a> that are denied by a file matching pattern can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using --host or <a href="https://vitejs.dev/config/server-options.html#server-host">server.host config option</a>) are affected.
Only files that are under <a href="https://vite.dev/config/shared-options.html#root">project <code>root</code></a> and are denied by a file matching pattern can be bypassed.</p>
<ul>
<li>Examples of file matching patterns: <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code>, <code>**/.env</code></li>
<li>Examples of other patterns: <code>**/.git/**</code>, <code>.git/**</code>, <code>.git/**/*</code></li>
</ul>
<h3 id="details">Details</h3>
<p><a href="https://vite.dev/config/server-options.html#server-fs-deny"><code>server.fs.deny</code></a> can contain patterns matching against files (by default it includes <code>.env</code>, <code>.env.*</code>, <code>*.{crt,pem}</code> as such patterns).
These patterns were able to bypass for files under <code>root</code> by using a combination of slash and dot (<code>/.</code>).</p>
<h3 id="poc">PoC</h3>
<pre><code>npm create vite@latest
cd vite-project/
cat "secret" &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b">
<img alt="image" src="https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3">https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb">https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</a></li>
<li><a href="https://github.com/advisories/GHSA-859w-5945-r5v3">https://github.com/advisories/GHSA-859w-5945-r5v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-859w-5945-r5v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-30T17:40:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-04-30T19:43:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-04-30T19:43:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[base-x] Homograph attack allows Unicode lookalike characters to bypass validation.]]></title>
        <id>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</id>
        <link href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p"/>
        <updated>2025-04-30T19:43:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can deceive users into sending funds to an unintended address.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/cryptocoinjs/base-x/security/advisories/GHSA-xq7p-g2vc-g82p</a></li>
<li><a href="https://github.com/cryptocoinjs/base-x/pull/86">https://github.com/cryptocoinjs/base-x/pull/86</a></li>
<li><a href="https://github.com/advisories/GHSA-xq7p-g2vc-g82p">https://github.com/advisories/GHSA-xq7p-g2vc-g82p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xq7p-g2vc-g82p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-30T16:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular] AngularJS improperly sanitizes SVG elements]]></title>
        <id>https://github.com/advisories/GHSA-j58c-ww9w-pwp5</id>
        <link href="https://github.com/advisories/GHSA-j58c-ww9w-pwp5"/>
        <updated>2025-04-30T14:18:12.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the 'href' and 'xlink:href' attributes in '<img>' SVG elements in AngularJS allows attackers to bypass common image source restrictions. This can lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> &nbsp;and also negatively affect the application's performance and behavior by using too large or slow-to-load images.</p>
<p>This issue affects all versions of AngularJS.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0716">https://nvd.nist.gov/vuln/detail/CVE-2025-0716</a></li>
<li><a href="https://codepen.io/herodevs/pen/qEWQmpd/a86a0d29310e12c7a3756768e6c7b915">https://codepen.io/herodevs/pen/qEWQmpd/a86a0d29310e12c7a3756768e6c7b915</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2025-0716">https://www.herodevs.com/vulnerability-directory/cve-2025-0716</a></li>
<li><a href="https://github.com/advisories/GHSA-j58c-ww9w-pwp5">https://github.com/advisories/GHSA-j58c-ww9w-pwp5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j58c-ww9w-pwp5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-29T18:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@auth0/nextjs-auth0] Auth0 NextJS SDK v4 Missing Session Invalidation]]></title>
        <id>https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</id>
        <link href="https://github.com/advisories/GHSA-pjr6-jx7r-j4r6"/>
        <updated>2025-04-30T17:25:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>Auth0 NextJS <code>v4.0.1</code> to <code>v4.5.0</code> does not invoke <code>.setExpirationTime</code> when generating a JWE token for the session. As a result, the JWE does not contain an internal expiration claim. While the session cookie may expire or be cleared, the JWE remains valid.</p>
<h3 id="am-i-affected">Am I Affected?</h3>
<p>You are affected if you are using Auth0 NextJS SDK v4.</p>
<h3 id="fix">Fix</h3>
<p>Upgrade to <code>v4.5.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-pjr6-jx7r-j4r6">https://github.com/auth0/nextjs-auth0/security/advisories/GHSA-pjr6-jx7r-j4r6</a></li>
<li><a href="https://github.com/auth0/nextjs-auth0/commit/a4f061aed02ffa132feca8adfbd11704df17e1c3">https://github.com/auth0/nextjs-auth0/commit/a4f061aed02ffa132feca8adfbd11704df17e1c3</a></li>
<li><a href="https://github.com/auth0/nextjs-auth0/releases/tag/v4.5.1">https://github.com/auth0/nextjs-auth0/releases/tag/v4.5.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46344">https://nvd.nist.gov/vuln/detail/CVE-2025-46344</a></li>
<li><a href="https://github.com/advisories/GHSA-pjr6-jx7r-j4r6">https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pjr6-jx7r-j4r6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-29T18:54:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@escape.tech/graphql-armor-cost-limit] GraphQL Armor Cost-Limit Plugin Bypass via Introspection Query Obfuscation]]></title>
        <id>https://github.com/advisories/GHSA-733v-p3h5-qpq7</id>
        <link href="https://github.com/advisories/GHSA-733v-p3h5-qpq7"/>
        <updated>2025-04-29T16:45:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A query cost restriction using the <code>cost-limit</code> can be bypassed if <code>ignoreIntrospection</code> is enabled (which is the default configuration) by naming your query/fragment <code>__schema</code>.</p>
<h3 id="details">Details</h3>
<p>At the start of the <code>computeComplexity</code> function, we have the following check for <code>ignoreIntrospection</code> option:</p>
<pre><code class="language-ts">    if (this.config.ignoreIntrospection &amp;&amp; 'name' in node &amp;&amp; node.name?.value === '__schema') {
      return 0;
    }
</code></pre>
<p>However, the <code>node</code> can be <code>FieldNode | FragmentDefinitionNode | InlineFragmentNode | OperationDefinitionNode | FragmentSpreadNode</code></p>
<p>So, for example, sending the following query</p>
<pre><code class="language-gql">query hello {
  books {
    title
  }
}
</code></pre>
<p>would create an <code>OperationDefinitionNode</code> with <code>node.name.value == 'hello'</code></p>
<p>The proper way to handle this would be to check for the <code>__schema</code> field, which would create a <code>FieldNode</code>.</p>
<p>The fix is</p>
<pre><code class="language-ts">    if (
      this.config.ignoreIntrospection &amp;&amp;
      'name' in node &amp;&amp;
      node.name?.value === '__schema' &amp;&amp;
      node.kind === Kind.FIELD
    ) {
      return 0;
    }
</code></pre>
<p>to assert that the node must be a <code>FieldNode</code></p>
<h3 id="poc">PoC</h3>
<pre><code class="language-gql">query  {
  ...__schema
}

fragment __schema on Query {
  books {
    title
    author
  }
}
</code></pre>
<pre><code class="language-gql">query __schema {
  books {
    title
    author
  }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Applications using GraphQL Armor Cost Limit plugin with <code>ignoreIntrospection</code> enabled.</p>
<h3 id="fix">Fix:</h3>
<p>Fixed on <a href="https://github.com/Escape-Technologies/graphql-armor/pull/772">772</a>. A quick patch would be to set <code>ignoreIntrospection</code> to false.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7">https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7</a></li>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/pull/772">https://github.com/Escape-Technologies/graphql-armor/pull/772</a></li>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba">https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba</a></li>
<li><a href="https://github.com/advisories/GHSA-733v-p3h5-qpq7">https://github.com/advisories/GHSA-733v-p3h5-qpq7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-733v-p3h5-qpq7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-25T15:14:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@account-kit/smart-contracts] @account-kit/smart-contracts Allowlist Module Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</id>
        <link href="https://github.com/advisories/GHSA-wfm2-rq5g-f8v5"/>
        <updated>2025-04-29T15:11:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Allowlist module contains a bypass vulnerability</p>
<h3 id="details">Details</h3>
<p>The logic for using an allowlist on a Modular Account V2 contained a bug that allowed session keys to bypass any allowlist configuration</p>
<h3>Action</h3>
<p>If you are using @aa-sdk and/or @account-kit/smart-contracts between the versions of &gt;=4.8.0 and &lt;4.28.1, please upgrade to 4.28.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/alchemyplatform/aa-sdk/security/advisories/GHSA-wfm2-rq5g-f8v5">https://github.com/alchemyplatform/aa-sdk/security/advisories/GHSA-wfm2-rq5g-f8v5</a></li>
<li><a href="https://github.com/alchemyplatform/aa-sdk/commit/b65bafdb9eec3a009df2cbabf09a35a76550e9d0">https://github.com/alchemyplatform/aa-sdk/commit/b65bafdb9eec3a009df2cbabf09a35a76550e9d0</a></li>
<li><a href="https://github.com/advisories/GHSA-wfm2-rq5g-f8v5">https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wfm2-rq5g-f8v5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-29T15:11:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[n8n] n8n Vulnerable to Stored XSS through Attachments View Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</id>
        <link href="https://github.com/advisories/GHSA-c8hm-hr8h-5xjw"/>
        <updated>2025-04-29T13:15:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>n8n workflows can store and serve binary files, which are accessible to authenticated users. However, there was no restriction on the MIME type of uploaded files, and the MIME type could be controlled via a GET parameter. This allowed the server to respond with any MIME type, potentially enabling malicious content to be interpreted and executed by the browser.</p>
<p>An authenticated attacker with member-level permissions could exploit this by uploading a crafted HTML file containing malicious JavaScript. When another user visits the binary data endpoint with the MIME type set to text/html, the script executes in the context of the user’s session. This script could, for example, send a request to change the user’s email address in their account settings, effectively enabling account takeover.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0">n8n@1.90.0</a></li>
</ul>
<h3 id="credit">Credit</h3>
<p>We would like to thank @Mahmoud0x00 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/n8n-io/n8n/security/advisories/GHSA-c8hm-hr8h-5xjw">https://github.com/n8n-io/n8n/security/advisories/GHSA-c8hm-hr8h-5xjw</a></li>
<li><a href="https://github.com/n8n-io/n8n/pull/14350">https://github.com/n8n-io/n8n/pull/14350</a></li>
<li><a href="https://github.com/n8n-io/n8n/pull/14685">https://github.com/n8n-io/n8n/pull/14685</a></li>
<li><a href="https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0">https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46343">https://nvd.nist.gov/vuln/detail/CVE-2025-46343</a></li>
<li><a href="https://github.com/advisories/GHSA-c8hm-hr8h-5xjw">https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-28T21:02:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-sdk] NodeJS Driver for Snowflake has race condition when checking access to Easy Logging configuration file]]></title>
        <id>https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</id>
        <link href="https://github.com/advisories/GHSA-wmjq-jrm2-9wfr"/>
        <updated>2025-04-29T13:10:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="issue">Issue</h1>
<p>Snowflake discovered and remediated a vulnerability in the NodeJS Driver for Snowflake (“Driver”). When using the Easy Logging feature on Linux and macOS the Driver didn’t correctly verify the permissions of the logging configuration file, potentially allowing an attacker with local access to overwrite the configuration and gain control over logging level and output location.</p>
<p>This vulnerability affects Driver versions 1.10.0 through 2.0.3. Snowflake fixed the issue in version 2.0.4.</p>
<h1 id="vulnerability-details">Vulnerability Details</h1>
<p>When using the Easy Logging feature on Linux and macOS the Driver reads logging configuration from a user-provided file. On Linux and macOS the Driver verifies that the configuration file can be written to only by its owner. That check was vulnerable to a Time-of-Check to Time-of-Use (TOCTOU) race condition and failed to verify that the file owner matches the user running the Driver. This could allow a local attacker with write access to the configuration file or the directory containing it to overwrite the configuration and gain control over logging level and output location.</p>
<h1 id="solution">Solution</h1>
<p>Snowflake released version 2.0.4 of the NodeJS Driver for Snowflake, which fixes this issue. We recommend users upgrade to version 2.0.4.</p>
<h1 id="additional-information">Additional Information</h1>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to Snowflake through our Vulnerability Disclosure Program hosted at HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-wmjq-jrm2-9wfr">https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-wmjq-jrm2-9wfr</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/commit/e94c24112271e1f44c271634bf29a3188acc68d0">https://github.com/snowflakedb/snowflake-connector-nodejs/commit/e94c24112271e1f44c271634bf29a3188acc68d0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-46328">https://nvd.nist.gov/vuln/detail/CVE-2025-46328</a></li>
<li><a href="https://github.com/advisories/GHSA-wmjq-jrm2-9wfr">https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-28T20:31:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</id>
        <link href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc"/>
        <updated>2025-04-28T17:39:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>
<p>Users using the the following pattern are affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              'foo': {
                type: 'string',
              }
            },
            required: ['foo']
          }
        },
      }
    }
  }
})
</code></pre>
<p>User using the following pattern are <strong>not</strong> affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      type: 'object',
      properties: {
        'foo': {
          type: 'string',
        }
      },
      required: ['foo']
    }
  }
})
</code></pre>
<h3 id="patches">Patches</h3>
<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.
Version v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not specify multiple content types in the schema.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>
<li><a href="https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32442">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>
<li><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></li>
<li><a href="https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T15:02:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy-middleware] http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed]]></title>
        <id>https://github.com/advisories/GHSA-9gqv-wp59-fq42</id>
        <link href="https://github.com/advisories/GHSA-9gqv-wp59-fq42"/>
        <updated>2025-04-28T14:28:54.000Z</updated>
        <content type="html"><![CDATA[<p>In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32997">https://nvd.nist.gov/vuln/detail/CVE-2025-32997</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/pull/1096">https://github.com/chimurai/http-proxy-middleware/pull/1096</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e">https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-9gqv-wp59-fq42">https://github.com/advisories/GHSA-9gqv-wp59-fq42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gqv-wp59-fq42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T03:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy-middleware] http-proxy-middleware can call writeBody twice because "else if" is not used]]></title>
        <id>https://github.com/advisories/GHSA-4www-5p9h-95mh</id>
        <link href="https://github.com/advisories/GHSA-4www-5p9h-95mh"/>
        <updated>2025-04-28T14:27:15.000Z</updated>
        <content type="html"><![CDATA[<p>In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because "else if" is not used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32996">https://nvd.nist.gov/vuln/detail/CVE-2025-32996</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/pull/1089">https://github.com/chimurai/http-proxy-middleware/pull/1089</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145">https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/advisories/GHSA-4www-5p9h-95mh">https://github.com/advisories/GHSA-4www-5p9h-95mh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4www-5p9h-95mh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T03:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pug-code-gen] Pug allows JavaScript code execution if an application accepts untrusted input]]></title>
        <id>https://github.com/advisories/GHSA-3965-hpx2-q597</id>
        <link href="https://github.com/advisories/GHSA-3965-hpx2-q597"/>
        <updated>2025-04-28T14:20:51.000Z</updated>
        <content type="html"><![CDATA[<p>Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the <code>compileClient</code>, <code>compileFileClient</code>, or <code>compileClientWithDependenciesTracked</code> function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36361">https://nvd.nist.gov/vuln/detail/CVE-2024-36361</a></li>
<li><a href="https://github.com/pugjs/pug/pull/3428">https://github.com/pugjs/pug/pull/3428</a></li>
<li><a href="https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug">https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug</a></li>
<li><a href="https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328">https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328</a></li>
<li><a href="https://pugjs.org/api/reference.html">https://pugjs.org/api/reference.html</a></li>
<li><a href="https://www.npmjs.com/package/pug-code-gen">https://www.npmjs.com/package/pug-code-gen</a></li>
<li><a href="https://github.com/pugjs/pug/pull/3438">https://github.com/pugjs/pug/pull/3438</a></li>
<li><a href="https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb">https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb</a></li>
<li><a href="https://github.com/pugjs/pug/releases/tag/pug%403.0.3">https://github.com/pugjs/pug/releases/tag/pug%403.0.3</a></li>
<li><a href="https://github.com/advisories/GHSA-3965-hpx2-q597">https://github.com/advisories/GHSA-3965-hpx2-q597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3965-hpx2-q597</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-24T14:45:02.000Z</published>
    </entry>
</feed>