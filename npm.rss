<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xlordz.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-06-25T04:39:30.175Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[pbkdf2] pbkdf2 silently disregards Uint8Array input, returning static keys]]></title>
        <id>https://github.com/advisories/GHSA-v62p-rq8g-8h59</id>
        <link href="https://github.com/advisories/GHSA-v62p-rq8g-8h59"/>
        <updated>2025-06-23T22:42:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>On historic but declared as supported Node.js versions (0.12-2.x), pbkdf2 silently disregards Uint8Array input</p>
<p>This only affects Node.js &lt;3.0.0, but <code>pbkdf2</code> claims to:</p>
<ul>
<li>Support Node.js <a href="https://github.com/browserify/pbkdf2/blob/v3.1.2/package.json#L62">&gt;= 0.12</a> (and there seems to be ongoing effort in this repo to maintain that)</li>
<li>Support <code>Uint8Array</code> input (input is typechecked against Uint8Array, and the error message includes e.g. "Password must be a string, a Buffer, a typed array or a DataView"</li>
</ul>
<h3 id="details">Details</h3>
<p>The error is in <code>toBuffer</code> method</p>
<p>This vulnerability somehow even made it to tests: <a href="https://github.com/browserify/pbkdf2/commit/eb9f97a66ed83836bebc4ff563a1588248708501">https://github.com/browserify/pbkdf2/commit/eb9f97a66ed83836bebc4ff563a1588248708501</a>
There, <code>resultsOld</code> (where mismatch <code>results</code>) are just invalid output generated from empty password/salt instead of the supplied one</p>
<h3 id="poc">PoC</h3>
<p>On Node.js/io.js &lt; 3.0.0</p>
<pre><code class="language-console">&gt; require('pbkdf2').pbkdf2Sync(new Uint8Array([1,2,3]), new Uint8Array([1,3,4]), 1024, 32, 'sha256')
&lt;Buffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66&gt;

// But that's just a hash of empty data with empty password:
&gt; require('pbkdf2').pbkdf2Sync('', '', 1024, 32, 'sha256')
&lt;Buffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66&gt;

// Node.js crypto is fine even on that version:
&gt; require('crypto').pbkdf2Sync(new Uint8Array([1,2,3]), new Uint8Array([1,3,4]), 1024, 32, 'sha256')
&lt;Buffer 78 10 cc 84 b7 bb 85 cd c8 37 ca 68 da a9 4c 33 db ae c2 3d 5b d4 95 76 da 33 f9 95 ac 51 f4 45&gt;

// Empty hash from Node.js, for comparison
&gt; require('crypto').pbkdf2Sync('', '', 1024, 32, 'sha256')
&lt;Buffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Static hashes being outputted and used as keys/passwords can completely undermine security
That said, no one should be using those Node.js versions anywhere now, so I would recommend to just drop them
This lib should not pretend to work on those versions while outputting static data though</p>
<p>Just updating to a fixed version is not enough: if anyone was using <code>pbkdf2</code> lib (do not confuse with Node.js <code>crypto.pbkdf2</code>) or anything depending on it with Node.js/io.js &lt; 3.0.0, recheck where those keys went / how they were used,  and take action accordingly</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/browserify/pbkdf2/security/advisories/GHSA-v62p-rq8g-8h59">https://github.com/browserify/pbkdf2/security/advisories/GHSA-v62p-rq8g-8h59</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6547">https://nvd.nist.gov/vuln/detail/CVE-2025-6547</a></li>
<li><a href="https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb">https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb</a></li>
<li><a href="https://github.com/advisories/GHSA-v62p-rq8g-8h59">https://github.com/advisories/GHSA-v62p-rq8g-8h59</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v62p-rq8g-8h59</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-23T22:42:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pbkdf2] pbkdf2 returns predictable uninitialized/zero-filled memory for non-normalized or unimplemented algos]]></title>
        <id>https://github.com/advisories/GHSA-h7cp-r72f-jxh6</id>
        <link href="https://github.com/advisories/GHSA-h7cp-r72f-jxh6"/>
        <updated>2025-06-23T22:41:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This affects both:</p>
<ol>
<li>Unsupported algos (e.g. <code>sha3-256</code> / <code>sha3-512</code> / <code>sha512-256</code>)</li>
<li>Supported but non-normalized algos (e.g. <code>Sha256</code> / <code>Sha512</code> / <code>SHA1</code> / <code>sha-1</code> / <code>sha-256</code> / <code>sha-512</code>)</li>
</ol>
<p>All of those work correctly in Node.js, but this polyfill silently returns highly predictable ouput</p>
<p>Under Node.js (only with <code>pbkdf2/browser</code> import, unlikely) / Bun (<code>pbkdf2</code> top-level import is affected), the memory is not zero-filled but is uninitialized, as <code>Buffer.allocUnsafe</code> is used</p>
<p>Under browsers, it just returns zero-filled buffers
(Which is also critical, those are completely unacceptable as kdf output and ruin security)</p>
<h3 id="were-you-affected">Were you affected?</h3>
<p>The full list of arguments that were <strong>not</strong> affected were literal:</p>
<ul>
<li><code>'md5'</code></li>
<li><code>'sha1'</code></li>
<li><code>'sha224'</code></li>
<li><code>'sha256'</code></li>
<li><code>'sha384'</code></li>
<li><code>'sha512'</code></li>
<li><code>'rmd160'</code></li>
<li><code>'ripemd160'</code></li>
</ul>
<p>Any other arguments, e.g. representation variations of the above ones like <code>'SHA-1'</code>/<code>'sha-256'</code>/<code>'SHA512'</code> or  different algos like <code>'sha3-512'</code>/<code>'blake2b512'</code>, while supported on Node.js <code>crypto</code> module, returned predictable output on <code>pbkdf2</code> (or <code>crypto</code> browser/bundlers polyfill)</p>
<hr>
<p>Beware of packages re-exporting this under a different signature, like (abstract):</p>
<pre><code class="language-js">const crypto = require('crypto')
module.exports.deriveKey = (algo, pass, salt) =&gt; crypto.pbkdf2Sync(pass, salt, 2048, 64, algo)
</code></pre>
<p>In this case, the resulting <code>deriveKey</code> method is also affected (to the same extent / conditions as listed here).</p>
<h3 id="environments">Environments</h3>
<p>This affects <code>require('crypto')</code> in polyfilled mode (e.g. from <code>crypto-browserify</code>, <code>node-libs-browser</code>, <code>vite-plugin-node-polyfills</code>, <code>node-stdlib-browser</code>, etc. -- basically everything that bundles/polfyills <code>crypto</code></p>
<ul>
<li>In bundled code (e.g. Webpack / Vite / whatever), this affects <code>require('crypto')</code> and <code>require('pbkdf2')</code></li>
<li>On Node.js, this does not affect <code>require('pbkdf2')</code> (or <code>require('crypto')</code> obviously), but affects <code>require('pbkdf2/browser')</code></li>
<li>On Bun, this <em>does</em> affect <code>require('pbkdf2')</code> <em>and</em>  <code>require('pbkdf2/browser')</code> (and returns uninitialized memory, often zeros / sparse flipped bytes)</li>
</ul>
<h3 id="poc">PoC</h3>
<pre><code class="language-js">const node = require('crypto')
const polyfill = require('pbkdf2/browser')

const algos = [
  'sha3-512', 'sha3-256', 'SHA3-384',
  'Sha256', 'Sha512', 'sha512-256',
  'SHA1', 'sha-1',
  'blake2b512',
  'RMD160', 'RIPEMD-160', 'ripemd-160',
]
for (const algo of algos) {
  for (const { pbkdf2Sync } of [node, polyfill]) {
    const key = pbkdf2Sync('secret', 'salt', 100000, 64, algo)
    console.log(`${algo}: ${key.toString('hex')}`);
  }
}
</code></pre>
<p>Output (odd lines are Node.js, even is <code>pbkdf2</code> module / polyfill):</p>
<pre><code>sha3-512: de00370414a3251d6d620dc8f7c371644e5d7f365ab23b116298a23fa4077b39deab802dd61714847a5c7e9981704ffe009aee5bb40f6f0103fc60f3d4cedfb0
sha3-512: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
sha3-256: 76bf06909b91e4c968700078ee36af92019d0839ab1fea2f345c6c8685074ca0179302633fbd84d22cff4f8744952b2d07edbfc9658e95d30fb4e93ee067c7c9
sha3-256: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SHA3-384: 2b2b41b73f9b7bcd023f709ea84ba3c29a88edc311b737856ba9e74a2d9a928f233eb8cb404a9ba93c276edf6380c692140024a0bc12b75bfa38626207915e01
SHA3-384: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Sha256: 3fa094211c0cf2ed1d332ab43adc69aab469f0e0f2cae6345c81bb874eef3f9eb2c629052ec272ca49c2ee95b33e7ba6377b2317cd0dacce92c4748d3c7a45f0
Sha256: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Sha512: 3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae
Sha512: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
sha512-256: e423f61987413121418715d0ebf64cb646042ae9a09fe4fd2c764a4f186ba28cf70823fdc2b03dda67a0d977c6f0a0612e5ed74a11e6f32b033cb658fa9f270d
sha512-256: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SHA1: 0e24bc5a548b236e3eb3b22317ef805664a88747c725cd35bfb0db0e4ae5539e3ed5cd5ba8c0ac018deb6518059788c8fffbe624f614fbbe62ba6a6e174e4a72
SHA1: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
sha-1: 0e24bc5a548b236e3eb3b22317ef805664a88747c725cd35bfb0db0e4ae5539e3ed5cd5ba8c0ac018deb6518059788c8fffbe624f614fbbe62ba6a6e174e4a72
sha-1: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
blake2b512: d3d661100c5ffb79bdf3b5c77d1698e621414cba40e2348bd3f1b10fbd2fe97bff4dc7d76474955bfefa61179f2a37e9dddedced0e7e79ef9d8c678080d45926
blake2b512: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
RMD160: ec65dbad1485616cf0426725d64e009ad3e1633543746ccb56b7f06eb7ce51d0249aaef27c879f32911a7c0accdc83389c2948ddec439114f6165366f9b4cca2
RMD160: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
RIPEMD-160: ec65dbad1485616cf0426725d64e009ad3e1633543746ccb56b7f06eb7ce51d0249aaef27c879f32911a7c0accdc83389c2948ddec439114f6165366f9b4cca2
RIPEMD-160: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ripemd-160: ec65dbad1485616cf0426725d64e009ad3e1633543746ccb56b7f06eb7ce51d0249aaef27c879f32911a7c0accdc83389c2948ddec439114f6165366f9b4cca2
ripemd-160: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
</code></pre>
<h4 id="uninitialized-memory">Uninitialized memory</h4>
<pre><code class="language-js">const { pbkdf2Sync } = require('pbkdf2/browser') // or just 'pbkdf2' on Bun will do this too

let prev
for (let i = 0; i &lt; 100000; i++) {
  const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha3-256')
  const hex = key.toString('hex')
  if (hex !== prev) console.log(hex);
  prev = hex
}
</code></pre>
<h3 id="affected-versions">Affected versions</h3>
<p>Seems to be since <a href="https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078">https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078</a></p>
<h3 id="impact">Impact</h3>
<p>This is critical, browserifying code might silently generate zero-filled keys instead of proper ones, for code that was working on Node.js or in test environment</p>
<p>Just updating to a fixed version is not enough: if anyone was using <code>pbkdf2</code> lib (e.g. via <code>crypto-browserify</code> or directly) on algos not from the literal string list (see "were you affected"), recheck where those keys went / how they were used,  and take action accordingly</p>
<h3 id="note">Note</h3>
<p>Most likely, you receive this either through a subdep using <code>pbkdf2</code> module directly (and then it is used), or through <code>crypto-browserify</code> (and the usage depends on whether you or any of your subdeps were calling <code>pbkdf2/pbkdf2Sync</code> methods from Node.js crypto inside your bundle)</p>
<p>When targeting non-Node.js, prever avoiding Node.js crypto polyfill at all, and use <code>crypto.subtle</code> and/or modern/audited cryptography primitives instead</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/browserify/pbkdf2/security/advisories/GHSA-h7cp-r72f-jxh6">https://github.com/browserify/pbkdf2/security/advisories/GHSA-h7cp-r72f-jxh6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6545">https://nvd.nist.gov/vuln/detail/CVE-2025-6545</a></li>
<li><a href="https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078">https://github.com/browserify/pbkdf2/commit/9699045c37a07f8319cfb8d44e2ff4252d7a7078</a></li>
<li><a href="https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb">https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb</a></li>
<li><a href="https://github.com/advisories/GHSA-h7cp-r72f-jxh6">https://github.com/advisories/GHSA-h7cp-r72f-jxh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7cp-r72f-jxh6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-23T22:41:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@anthropic-ai/claude-code] Claude Code Improper Authorization via websocket connections from arbitrary origins]]></title>
        <id>https://github.com/advisories/GHSA-9f65-56v6-gxw7</id>
        <link href="https://github.com/advisories/GHSA-9f65-56v6-gxw7"/>
        <updated>2025-06-23T21:22:23.000Z</updated>
        <content type="html"><![CDATA[<p>Claude Code extensions in VSCode and forks (e.g., Cursor, Windsurf, and VSCodium) and JetBrains IDEs (e.g., IntelliJ, Pycharm, and Android Studio) are vulnerable to unauthorized websocket connections from an attacker when visiting attacker-controlled webpages. Claude Code for VSCode IDE extensions versions 0.2.116 through 1.0.23 are vulnerable. For Jetbrains IDE plugins, Claude Code [beta] versions 0.1.1 through 0.1.8 are vulnerable.  </p>
<p>In VSCode (and forks), exploitation would allow an attacker to read arbitrary files, see the list of files open in the IDE, get selection and diagnostics events from the IDE, or execute code in limited situations where a user has an open Jupyter Notebook and accepts a malicious prompt. In JetBrains IDEs, an attacker could get selection events, a list of open files, and a list of syntax errors.</p>
<p><strong>Remediation</strong></p>
<p>We released a patch for this issue on June 13th, 2025. Although Claude Code auto-updates when you launch it and auto-updates the extensions, you should take the following steps (the exact steps depend on your IDE).</p>
<p><strong>VSCode, Cursor, Windsurf, VSCodium, and other VSCode forks</strong>
Extension Name: Claude Code for VSCode</p>
<p>Instructions:</p>
<ol>
<li>Open the list of Extensions (View-&gt;Extensions)</li>
<li>Look for Claude Code for VSCode among installed extensions</li>
<li>If you have a version &lt; 1.0.24, click “Update” (or “Uninstall”)</li>
<li>Restart the IDE</li>
</ol>
<p><strong>All JetBrains IDEs including IntelliJ, PyCharm, and Android Studio</strong>
Plugin name: Claude Code [Beta]</p>
<p>Instructions:</p>
<ol>
<li>Open the Plugins list</li>
<li>Look for Claude Code [Beta] among installed extensions</li>
<li>Update (or Uninstall) the plugin if the version is &lt; 0.1.9</li>
<li>Restart the IDE</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/anthropics/claude-code/security/advisories/GHSA-9f65-56v6-gxw7">https://github.com/anthropics/claude-code/security/advisories/GHSA-9f65-56v6-gxw7</a></li>
<li><a href="https://github.com/advisories/GHSA-9f65-56v6-gxw7">https://github.com/advisories/GHSA-9f65-56v6-gxw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9f65-56v6-gxw7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-23T21:22:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@lunary/backend] Withdrawn Advisory: Lunary Cross-Site Request Forgery (CSRF) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</id>
        <link href="https://github.com/advisories/GHSA-v6x6-4v4x-2fx9"/>
        <updated>2025-06-20T20:02:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="withdrawn-advisory">Withdrawn Advisory</h2>
<p>This advisory has been withdrawn because the <a href="https://www.npmjs.com/package/lunary">lunary npm package</a> is connected to <a href="https://github.com/lunary-ai/lunary-js">https://github.com/lunary-ai/lunary-js</a>, not the <a href="https://github.com/lunary-ai/lunary">https://github.com/lunary-ai/lunary</a> repo that is discussed in this advisory.</p>
<p><strong>The underlying vulnerability report is still valid</strong>, but it doesn't affect a product in a <a href="https://docs.github.com/en/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-the-github-advisory-database#github-reviewed-advisories">GitHub Advisory Database supported ecosystem</a>.</p>
<p>This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>A Cross-Site Request Forgery (CSRF) vulnerability exists in lunary-ai/lunary version 1.2.34 due to overly permissive CORS settings. This vulnerability allows an attacker to sign up for and create projects or use the instance as if they were a user with local access. The main attack vector is for instances hosted locally on personal machines, which are not publicly accessible. The CORS settings in the backend permit all origins, exposing unauthenticated endpoints to CSRF attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6862">https://nvd.nist.gov/vuln/detail/CVE-2024-6862</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54">https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54</a></li>
<li><a href="https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f">https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f</a></li>
<li><a href="https://github.com/advisories/GHSA-v6x6-4v4x-2fx9">https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[passbolt-browser-extension] Passbolt Browser Extension leaks password information]]></title>
        <id>https://github.com/advisories/GHSA-xfq4-78j7-v594</id>
        <link href="https://github.com/advisories/GHSA-xfq4-78j7-v594"/>
        <updated>2025-06-19T14:30:36.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Passbolt Browser Extension before 4.6.2. It can send multiple requests to HaveIBeenPwned while a password is being typed, which results in an information leak. This allows an attacker capable of observing Passbolt's HTTPS queries to the Pwned Password API to more easily brute force passwords that are manually typed by the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-33669">https://nvd.nist.gov/vuln/detail/CVE-2024-33669</a></li>
<li><a href="https://blog.quarkslab.com/passbolt-a-bold-use-of-haveibeenpwned.html">https://blog.quarkslab.com/passbolt-a-bold-use-of-haveibeenpwned.html</a></li>
<li><a href="https://haveibeenpwned.com">https://haveibeenpwned.com</a></li>
<li><a href="https://www.passbolt.com">https://www.passbolt.com</a></li>
<li><a href="https://www.passbolt.com/security/more">https://www.passbolt.com/security/more</a></li>
<li><a href="https://www.passbolt.com/incidents/pwned-password-service-information-leak">https://www.passbolt.com/incidents/pwned-password-service-information-leak</a></li>
<li><a href="https://github.com/advisories/GHSA-xfq4-78j7-v594">https://github.com/advisories/GHSA-xfq4-78j7-v594</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfq4-78j7-v594</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-26T03:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pg-promise] pg-promise SQL Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-ff9h-848c-4xfj</id>
        <link href="https://github.com/advisories/GHSA-ff9h-848c-4xfj"/>
        <updated>2025-06-18T19:41:43.000Z</updated>
        <content type="html"><![CDATA[<p>pg-promise before 11.5.5 is vulnerable to SQL Injection due to improper handling of negative numbers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29744">https://nvd.nist.gov/vuln/detail/CVE-2025-29744</a></li>
<li><a href="https://github.com/vitaly-t/pg-promise/discussions/911">https://github.com/vitaly-t/pg-promise/discussions/911</a></li>
<li><a href="https://www.sonarsource.com/blog/double-dash-double-trouble-a-subtle-sql-injection-flaw">https://www.sonarsource.com/blog/double-dash-double-trouble-a-subtle-sql-injection-flaw</a></li>
<li><a href="https://github.com/advisories/GHSA-ff9h-848c-4xfj">https://github.com/advisories/GHSA-ff9h-848c-4xfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ff9h-848c-4xfj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-12T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[taylored] Taylored webhook validation vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-8g98-m4j9-qww5</id>
        <link href="https://github.com/advisories/GHSA-8g98-m4j9-qww5"/>
        <updated>2025-06-18T17:51:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="critical-security-advisory-for-taylored-npm-package-v707---tag-705">Critical Security Advisory for Taylored npm package v7.0.7 - tag 7.0.5</h3>
<h4 id="summary">Summary</h4>
<p>A series of moderate to high-severity security vulnerabilities have been identified specifically in version <strong>7.0.7 of `taylored`</strong>. These vulnerabilities reside in the "Backend-in-a-Box" template distributed with this version. They could allow a malicious actor to read arbitrary files from the server, download paid patches without completing a valid purchase, and weaken the protection of encrypted patches.</p>
<p><strong>All users who have installed or generated a `taysell-server` using version 7.0.7 of `taylored` are strongly advised to immediately upgrade to version 7.0.8 (or later) and follow the required mitigation steps outlined below.</strong> Versions prior to 7.0.7 did not include the Taysell functionality and are therefore not affected by these specific issues.</p>
<h4 id="vulnerabilities-patched-in-v708">Vulnerabilities Patched in v7.0.8</h4>
<p>Version 7.0.8 addresses the following issues found in the v7.0.7 template:</p>
<ol>
<li><strong>Path Traversal in Patch Download:</strong> The patch download endpoint did not properly sanitize the user-provided `patchId`. An attacker could have crafted a request with path traversal sequences (e.g., `../../etc/passwd`) to read arbitrary files from the server's filesystem. The `patchId` is now sanitized to ensure only files within the intended patches directory can be accessed.</li>
<li><strong>Missing PayPal Webhook Validation:</strong> The server endpoint did not cryptographically verify incoming payment notifications, allowing an attacker to spoof a purchase and gain unauthorized access to patches.</li>
<li><strong>Purchase Token Replay Vulnerability:</strong> A legitimate purchase token could be reused indefinitely. The system now correctly invalidates tokens after their first use.</li>
<li><strong>Insufficient PBKDF2 Iterations:</strong> The key derivation function used an insufficient number of iterations, making encrypted patches more susceptible to brute-force attacks. This has been strengthened.</li>
</ol>
<h3 id="required-actions">Required Actions</h3>
<p>To fix these vulnerabilities, users of version <strong>7.0.7</strong> must <strong>upgrade the `taylored` tool and regenerate their `taysell-server` instance</strong>.</p>
<p>Please follow these steps carefully:</p>
<ol>
<li><p><strong>Upgrade to the Secure Version of `taylored`:</strong>
Open your terminal and run the following command to install the latest version:
```bash
npm install -g taylored@latest
```
Verify that you have version 7.0.8 or later.</p>
</li>
<li><p><strong>Remove the Vulnerable Backend:</strong>
Navigate to the project directory where you previously generated the backend with v7.0.7 and <strong>completely delete the old `taysell-server` directory</strong>.
```bash</p>
<h1 id="back-up-any-customizations-if-necessary">Back up any customizations if necessary</h1>
<p>rm -rf taysell-server
```</p>
</li>
<li><p><strong>Generate the New, Secure Backend:</strong>
From the same directory, run the `setup-backend` command again using the upgraded `taylored` tool. This will create a new `taysell-server` directory with the patched, secure code.
```bash
taylored setup-backend
```
Follow the prompts and enter your PayPal credentials and server configuration. <strong>Using a new, strong, and unique `PATCH_ENCRYPTION_KEY` is highly recommended.</strong></p>
</li>
<li><p><strong>Recreate and Re-upload Commercial Patches:</strong>
Due to the cryptography improvements, <strong>patches created with version 7.0.7 are not compatible with the new, secure backend</strong>. You must recreate them:</p>
<ul>
<li>For each of your commercial patches, run the `taylored create-taysell` command again.</li>
<li>Upload the new encrypted files (e.g., `patch-name.taylored.encrypted`) to the `patches/` directory of your new `taysell-server`.</li>
</ul>
</li>
<li><p><strong>Launch the New Server:</strong>
Start your new backend using Docker Compose:
```bash
cd taysell-server
docker-compose up --build -d
```</p>
</li>
</ol>
<p>For questions or support, please refer to the official documentation or open an issue on our GitHub repository.</p>
<p>Thank you for your attention to this important update.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tailot/taylored/security/advisories/GHSA-8g98-m4j9-qww5">https://github.com/tailot/taylored/security/advisories/GHSA-8g98-m4j9-qww5</a></li>
<li><a href="https://github.com/tailot/taylored/commit/57b7634391959dbbdb39b387ac4dc68157cd58a1">https://github.com/tailot/taylored/commit/57b7634391959dbbdb39b387ac4dc68157cd58a1</a></li>
<li><a href="https://github.com/advisories/GHSA-8g98-m4j9-qww5">https://github.com/advisories/GHSA-8g98-m4j9-qww5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8g98-m4j9-qww5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-18T17:51:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openlist-frontend/openlist-frontend] OpenList (frontend) allows XSS Attacks in the built-in Markdown Viewer]]></title>
        <id>https://github.com/advisories/GHSA-2hw3-h8qx-hqqp</id>
        <link href="https://github.com/advisories/GHSA-2hw3-h8qx-hqqp"/>
        <updated>2025-06-19T15:19:19.000Z</updated>
        <content type="html"><![CDATA[<p>XSS via <code>.py</code> file containing script tag interpreted as HTML</p>
<h2 id="summary">Summary</h2>
<p>A vulnerability exists in the file preview/browsing feature of the application, where files with a <code>.py</code> extension that contain JavaScript code wrapped in <code>&lt;script&gt;</code> tags may be interpreted and executed as HTML in certain modes. This leads to a stored XSS vulnerability.</p>
<h2 id="affected-versions">Affected Versions</h2>
<ul>
<li>&lt;= 4.0.0-rc.3</li>
</ul>
<h2 id="poc">PoC</h2>
<p>Create a <code>.py</code> file with arbitrary JavaScript content wrapped in <code>&lt;script&gt;</code> tags. For example:</p>
<pre><code class="language-javascript">&lt;script&gt;alert(document.cookie);&lt;/script&gt;
</code></pre>
<p>When a victim views the file in browsing mode (e.g., a rendered preview), the JavaScript is executed in the browser context.</p>
<hr>
<h2 id="attack-vector">Attack vector</h2>
<p>An attacker can place such a <code>.py</code> file in the system via remote channels, such as:</p>
<ul>
<li>Convincing a webmaster to download or upload the file; </li>
<li>Tricking users into accessing a file link via public URLs.</li>
</ul>
<h2 id="required-permissions">Required permissions</h2>
<ul>
<li>None, if public or visitor access is enabled.</li>
<li>If the file is uploaded by a user with elevated permissions, potential privilege boundaries may be crossed.</li>
</ul>
<h2 id="user-interaction">User interaction</h2>
<p>Yes. The user must manually click to switch to the browsing or preview mode to trigger the script. And seems only when using <code>ISO-8859-1</code> encoding.</p>
<h2 id="scope">Scope</h2>
<ul>
<li>Unchanged <code>(S:U)</code> - The attack does not cross system or privilege boundaries in general.</li>
<li>⚠️ Controversial edge case: If sensitive preview files are accessible due to misconfiguration, scope could be considered Changed <code>(S:C)</code>.</li>
</ul>
<h2 id="impact">Impact</h2>
<ul>
<li>Confidentiality: User information including cookies, login state, and localStorage may be accessed. Some files that only can be viewed via this user will leak too.</li>
<li>Integrity &amp; Availability: Not directly impacted.</li>
</ul>
<hr>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li>Treat all previewed file types (including non-HTML like .py) as plain text unless explicitly sanitized.</li>
<li>Disable rendering modes that can interpret user-uploaded content as HTML.</li>
</ul>
<h2 id="timeline">Timeline</h2>
<table>
<thead>
<tr>
<th>Date</th>
<th>Event</th>
</tr>
</thead>
<tbody><tr>
<td>2025-06-17</td>
<td>Vulnerability reported</td>
</tr>
<tr>
<td>2025-06-17</td>
<td>Comminuty Manager confirmed</td>
</tr>
<tr>
<td>2025-06-17</td>
<td>Fixed</td>
</tr>
</tbody></table>
<h1 id="credits">Credits</h1>
<ul>
<li>Discovered by: @zyk2507</li>
<li>Reported to: <a href="https://github.com/OpenListTeam">The OpenList Team</a></li>
<li>Analyzed and confirmed by: @jyxjjj</li>
<li>Fixed by: @cxw620</li>
<li>Fixed in: <code>4.0.0-rc.4</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenListTeam/OpenList/security/advisories/GHSA-2hw3-h8qx-hqqp">https://github.com/OpenListTeam/OpenList/security/advisories/GHSA-2hw3-h8qx-hqqp</a></li>
<li><a href="https://github.com/OpenListTeam/OpenList-Frontend/commit/7b5ed20c608c7b9b36d1950a386678e0a89f8175">https://github.com/OpenListTeam/OpenList-Frontend/commit/7b5ed20c608c7b9b36d1950a386678e0a89f8175</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-50183">https://nvd.nist.gov/vuln/detail/CVE-2025-50183</a></li>
<li><a href="https://github.com/advisories/GHSA-2hw3-h8qx-hqqp">https://github.com/advisories/GHSA-2hw3-h8qx-hqqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hw3-h8qx-hqqp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-06-18T14:41:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microlight] Withdrawn Advisory: microlight allows a denial of service]]></title>
        <id>https://github.com/advisories/GHSA-wgc6-9f6w-h8hx</id>
        <link href="https://github.com/advisories/GHSA-wgc6-9f6w-h8hx"/>
        <updated>2025-06-18T17:11:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="withdrawn-advisory">Withdrawn Advisory</h2>
<p>This advisory has been withdrawn because the proof of concept does not demonstrate a practical security impact. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>A denial of service (DoS) vulnerability has been identified in the JavaScript library microlight version 0.0.7. This library, used for syntax highlighting, does not limit the size of textual content it processes in HTML elements with the microlight class. When excessively large content (e.g., 100 million characters) is processed, the reset function in microlight.js consumes excessive memory and CPU resources, causing browser crashes or unresponsiveness. An attacker can exploit this vulnerability by tricking a user into visiting a malicious web page containing a microlight element with large content, resulting in a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-45526">https://nvd.nist.gov/vuln/detail/CVE-2025-45526</a></li>
<li><a href="https://gist.github.com/Rootingg/483b09b760d031b62b172f2153f3ed2a">https://gist.github.com/Rootingg/483b09b760d031b62b172f2153f3ed2a</a></li>
<li><a href="https://github.com/github/advisory-database/pull/5730">https://github.com/github/advisory-database/pull/5730</a></li>
<li><a href="https://github.com/advisories/GHSA-wgc6-9f6w-h8hx">https://github.com/advisories/GHSA-wgc6-9f6w-h8hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wgc6-9f6w-h8hx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-17T21:32:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microlight] Withdrawn Advisory: microlight.js has a null pointer dereference vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-64x7-m7rh-9m83</id>
        <link href="https://github.com/advisories/GHSA-64x7-m7rh-9m83"/>
        <updated>2025-06-20T14:12:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="withdrawn-advisory">Withdrawn Advisory</h2>
<p>This advisory has been withdrawn because a website owner has to set CSS color values. The proof of concept doesn't demonstrate how a malicious user who is not the website owner can cause an application crash. This link has been maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>A null pointer dereference vulnerability was discovered in microlight.js (version 0.0.7), a lightweight syntax highlighting library. When processing elements with non-standard CSS color values, the library fails to validate the result of a regular expression match before accessing its properties, leading to an uncaught TypeError and potential application crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-45525">https://nvd.nist.gov/vuln/detail/CVE-2025-45525</a></li>
<li><a href="https://gist.github.com/Rootingg/843368931f70886bed3cf982f10a4424">https://gist.github.com/Rootingg/843368931f70886bed3cf982f10a4424</a></li>
<li><a href="https://github.com/github/advisory-database/pull/5730">https://github.com/github/advisory-database/pull/5730</a></li>
<li><a href="https://github.com/advisories/GHSA-64x7-m7rh-9m83">https://github.com/advisories/GHSA-64x7-m7rh-9m83</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64x7-m7rh-9m83</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-17T21:32:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@opennextjs/cloudflare] OpenNext for Cloudflare (opennextjs-cloudflare) has a SSRF vulnerability via /_next/image endpoint]]></title>
        <id>https://github.com/advisories/GHSA-rvpw-p7vw-wj3m</id>
        <link href="https://github.com/advisories/GHSA-rvpw-p7vw-wj3m"/>
        <updated>2025-06-16T21:46:53.000Z</updated>
        <content type="html"><![CDATA[<p>A Server-Side Request Forgery (SSRF) vulnerability was identified in the @opennextjs/cloudflare package. </p>
<p>The vulnerability stems from an unimplemented feature in the Cloudflare adapter for Open Next, which allowed unauthenticated users to proxy arbitrary remote content via the <code>/_next/image</code> endpoint. </p>
<p>This issue allowed attackers to load remote resources from arbitrary hosts under the victim site’s domain for any site deployed using the Cloudflare adapter for Open Next.  For example: <code>https://victim-site.com/_next/image?url=https://attacker.com</code>. In this example, attacker-controlled content from attacker.com is served through the victim site’s domain (<code>victim-site.com</code>), violating the same-origin policy and potentially misleading users or other services.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>SSRF via unrestricted remote URL loading </li>
<li>Arbitrary remote content loading </li>
<li>Potential internal service exposure or phishing risks through domain abuse</li>
</ul>
<h3 id="mitigation">Mitigation</h3>
<p>The following mitigations have been put in place: </p>
<p><strong>Server side updates</strong> to Cloudflare’s platform to restrict the content loaded via the <code>/_next/image</code> endpoint to images. The update automatically mitigates the issue for all existing and any future sites deployed to Cloudflare using the affected version of the Cloudflare adapter for Open Next </p>
<p><strong>Root cause fix</strong>: Pull request <a href="https://github.com/opennextjs/opennextjs-cloudflare/pull/727">https://github.com/opennextjs/opennextjs-cloudflare/pull/727</a>  to the Cloudflare adapter for Open Next. The patched version of the adapter is found here  <a href="https://www.npmjs.com/package/@opennextjs/cloudflare/v/1.3.0">@opennextjs/cloudflare@1.3.0</a></p>
<p><strong>Package dependency update</strong>: Pull request <a href="https://github.com/cloudflare/workers-sdk/pull/9608">https://github.com/cloudflare/workers-sdk/pull/9608</a>  to create-cloudflare (c3) to use the fixed version of the Cloudflare adapter for Open Next. The patched version of create-cloudflare is found at <a href="https://www.npmjs.com/package/create-cloudflare/v/2.49.3">create-cloudflare@2.49.3</a>.</p>
<p> In addition to the automatic mitigation deployed on Cloudflare’s platform, we encourage affected users to upgrade to @opennext/cloudflare v1.3.0 and use the <a href="https://nextjs.org/docs/pages/api-reference/components/image#remotepatterns">remotePatterns</a> filter in Next config if they need to allow-list external urls with images assets.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed responsibly by security researcher Edward Coristine. Thank you for the report.</p>
<h3 id="references">References</h3>
<p><a href="https://www.cve.org/cverecord?id=CVE-2025-6087">https://www.cve.org/cverecord?id=CVE-2025-6087</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/opennextjs/opennextjs-cloudflare/security/advisories/GHSA-rvpw-p7vw-wj3m">https://github.com/opennextjs/opennextjs-cloudflare/security/advisories/GHSA-rvpw-p7vw-wj3m</a></li>
<li><a href="https://github.com/cloudflare/workers-sdk/pull/9608">https://github.com/cloudflare/workers-sdk/pull/9608</a></li>
<li><a href="https://github.com/opennextjs/opennextjs-cloudflare/pull/727">https://github.com/opennextjs/opennextjs-cloudflare/pull/727</a></li>
<li><a href="https://github.com/opennextjs/opennextjs-cloudflare/commit/36119c0f490c95b3d4f6e826d745b728c80625ab">https://github.com/opennextjs/opennextjs-cloudflare/commit/36119c0f490c95b3d4f6e826d745b728c80625ab</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-6087">https://nvd.nist.gov/vuln/detail/CVE-2025-6087</a></li>
<li><a href="https://github.com/opennextjs/opennextjs-cloudflare">https://github.com/opennextjs/opennextjs-cloudflare</a></li>
<li><a href="https://github.com/advisories/GHSA-rvpw-p7vw-wj3m">https://github.com/advisories/GHSA-rvpw-p7vw-wj3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvpw-p7vw-wj3m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-16T19:37:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@modelcontextprotocol/inspector] MCP Inspector proxy server lacks authentication between the Inspector client and proxy]]></title>
        <id>https://github.com/advisories/GHSA-7f8r-222p-6f5g</id>
        <link href="https://github.com/advisories/GHSA-7f8r-222p-6f5g"/>
        <updated>2025-06-13T22:15:27.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of MCP Inspector below 0.14.1 are vulnerable to remote code execution due to lack of authentication between the Inspector client and proxy, allowing unauthenticated requests to launch MCP commands over stdio. Users should immediately upgrade to version 0.14.1 or later to address these vulnerabilities.</p>
<p>Credit: Rémy Marot <a href="mailto:bughunters@tenable.com">bughunters@tenable.com</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/modelcontextprotocol/inspector/security/advisories/GHSA-7f8r-222p-6f5g">https://github.com/modelcontextprotocol/inspector/security/advisories/GHSA-7f8r-222p-6f5g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-49596">https://nvd.nist.gov/vuln/detail/CVE-2025-49596</a></li>
<li><a href="https://github.com/modelcontextprotocol/inspector/commit/50df0e1ec488f3983740b4d28d2a968f12eb8979">https://github.com/modelcontextprotocol/inspector/commit/50df0e1ec488f3983740b4d28d2a968f12eb8979</a></li>
<li><a href="https://github.com/advisories/GHSA-7f8r-222p-6f5g">https://github.com/advisories/GHSA-7f8r-222p-6f5g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7f8r-222p-6f5g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-06-13T22:15:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Information exposure in Next.js dev server due to lack of origin verification]]></title>
        <id>https://github.com/advisories/GHSA-3h52-269p-cp9r</id>
        <link href="https://github.com/advisories/GHSA-3h52-269p-cp9r"/>
        <updated>2025-06-13T14:41:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A low-severity vulnerability in <strong>Next.js</strong> has been fixed in <strong>version 15.2.2</strong>. This issue may have allowed limited source code exposure when the dev server was running with the App Router enabled. The vulnerability only affects local development environments and requires the user to visit a malicious webpage while <code>npm run dev</code> is active.</p>
<p>Because the mitigation is potentially a breaking change for some development setups, to opt-in to the fix, you must configure <code>allowedDevOrigins</code> in your next config after upgrading to a patched version. <a href="https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins">Learn more</a>.</p>
<p>Learn more: <a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></p>
<h2 id="credit">Credit</h2>
<p>Thanks to <a href="https://github.com/sapphi-red">sapphi-red</a> and <a href="https://github.com/R4356th">Radman Siddiki</a> for responsibly disclosing this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r">https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48068">https://nvd.nist.gov/vuln/detail/CVE-2025-48068</a></li>
<li><a href="https://github.com/advisories/GHSA-3h52-269p-cp9r">https://github.com/advisories/GHSA-3h52-269p-cp9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h52-269p-cp9r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T21:52:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Information exposure in Next.js dev server due to lack of origin verification]]></title>
        <id>https://github.com/advisories/GHSA-3h52-269p-cp9r</id>
        <link href="https://github.com/advisories/GHSA-3h52-269p-cp9r"/>
        <updated>2025-06-13T14:41:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A low-severity vulnerability in <strong>Next.js</strong> has been fixed in <strong>version 15.2.2</strong>. This issue may have allowed limited source code exposure when the dev server was running with the App Router enabled. The vulnerability only affects local development environments and requires the user to visit a malicious webpage while <code>npm run dev</code> is active.</p>
<p>Because the mitigation is potentially a breaking change for some development setups, to opt-in to the fix, you must configure <code>allowedDevOrigins</code> in your next config after upgrading to a patched version. <a href="https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins">Learn more</a>.</p>
<p>Learn more: <a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></p>
<h2 id="credit">Credit</h2>
<p>Thanks to <a href="https://github.com/sapphi-red">sapphi-red</a> and <a href="https://github.com/R4356th">Radman Siddiki</a> for responsibly disclosing this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r">https://github.com/vercel/next.js/security/advisories/GHSA-3h52-269p-cp9r</a></li>
<li><a href="https://vercel.com/changelog/cve-2025-48068">https://vercel.com/changelog/cve-2025-48068</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48068">https://nvd.nist.gov/vuln/detail/CVE-2025-48068</a></li>
<li><a href="https://github.com/advisories/GHSA-3h52-269p-cp9r">https://github.com/advisories/GHSA-3h52-269p-cp9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h52-269p-cp9r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-05-28T21:52:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[brace-expansion] brace-expansion Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</id>
        <link href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"/>
        <updated>2025-06-11T21:00:29.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is <code>a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</code>. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5889">https://nvd.nist.gov/vuln/detail/CVE-2025-5889</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5">https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</a></li>
<li><a href="https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466">https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466</a></li>
<li><a href="https://vuldb.com/?ctiid.311660">https://vuldb.com/?ctiid.311660</a></li>
<li><a href="https://vuldb.com/?id.311660">https://vuldb.com/?id.311660</a></li>
<li><a href="https://vuldb.com/?submit.585717">https://vuldb.com/?submit.585717</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2">https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f">https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e">https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217">https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217</a></li>
<li><a href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw">https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-09T21:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[brace-expansion] brace-expansion Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</id>
        <link href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"/>
        <updated>2025-06-11T21:00:29.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is <code>a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</code>. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5889">https://nvd.nist.gov/vuln/detail/CVE-2025-5889</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5">https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</a></li>
<li><a href="https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466">https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466</a></li>
<li><a href="https://vuldb.com/?ctiid.311660">https://vuldb.com/?ctiid.311660</a></li>
<li><a href="https://vuldb.com/?id.311660">https://vuldb.com/?id.311660</a></li>
<li><a href="https://vuldb.com/?submit.585717">https://vuldb.com/?submit.585717</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2">https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f">https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e">https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217">https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217</a></li>
<li><a href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw">https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-09T21:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[brace-expansion] brace-expansion Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</id>
        <link href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"/>
        <updated>2025-06-11T21:00:29.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is <code>a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</code>. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5889">https://nvd.nist.gov/vuln/detail/CVE-2025-5889</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5">https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</a></li>
<li><a href="https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466">https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466</a></li>
<li><a href="https://vuldb.com/?ctiid.311660">https://vuldb.com/?ctiid.311660</a></li>
<li><a href="https://vuldb.com/?id.311660">https://vuldb.com/?id.311660</a></li>
<li><a href="https://vuldb.com/?submit.585717">https://vuldb.com/?submit.585717</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2">https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f">https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e">https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217">https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217</a></li>
<li><a href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw">https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-09T21:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[brace-expansion] brace-expansion Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</id>
        <link href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"/>
        <updated>2025-06-11T21:00:29.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is <code>a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</code>. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5889">https://nvd.nist.gov/vuln/detail/CVE-2025-5889</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5">https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</a></li>
<li><a href="https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466">https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466</a></li>
<li><a href="https://vuldb.com/?ctiid.311660">https://vuldb.com/?ctiid.311660</a></li>
<li><a href="https://vuldb.com/?id.311660">https://vuldb.com/?id.311660</a></li>
<li><a href="https://vuldb.com/?submit.585717">https://vuldb.com/?submit.585717</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2">https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f">https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e">https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e</a></li>
<li><a href="https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217">https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217</a></li>
<li><a href="https://github.com/advisories/GHSA-v6h2-p8h4-qcjw">https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-09T21:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pm2] pm2 Regular Expression Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x5gf-qvw8-r2rm</id>
        <link href="https://github.com/advisories/GHSA-x5gf-qvw8-r2rm"/>
        <updated>2025-06-10T22:52:18.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability classified as problematic was found in Unitech pm2 up to 6.0.6. This vulnerability affects unknown code of the file /lib/tools/Config.js. The manipulation leads to inefficient regular expression complexity. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-5891">https://nvd.nist.gov/vuln/detail/CVE-2025-5891</a></li>
<li><a href="https://github.com/Unitech/pm2/pull/5971">https://github.com/Unitech/pm2/pull/5971</a></li>
<li><a href="https://gist.github.com/mmmsssttt404/407e2ffe3e0eaa393ad923a86316a385">https://gist.github.com/mmmsssttt404/407e2ffe3e0eaa393ad923a86316a385</a></li>
<li><a href="https://vuldb.com/?ctiid.311662">https://vuldb.com/?ctiid.311662</a></li>
<li><a href="https://vuldb.com/?id.311662">https://vuldb.com/?id.311662</a></li>
<li><a href="https://vuldb.com/?submit.585750">https://vuldb.com/?submit.585750</a></li>
<li><a href="https://github.com/advisories/GHSA-x5gf-qvw8-r2rm">https://github.com/advisories/GHSA-x5gf-qvw8-r2rm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5gf-qvw8-r2rm</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-06-09T21:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[erxes] Erxes Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rq9r-qvwg-829q</id>
        <link href="https://github.com/advisories/GHSA-rq9r-qvwg-829q"/>
        <updated>2025-06-10T20:27:02.000Z</updated>
        <content type="html"><![CDATA[<p>In Erxes &lt;1.6.2, an unauthenticated attacker can read arbitrary files from the system using a Path Traversal vulnerability in the /read-file endpoint handler.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57186">https://nvd.nist.gov/vuln/detail/CVE-2024-57186</a></li>
<li><a href="https://github.com/erxes/erxes/commit/d626070a0fcd435ae29e689aca051ccfb440c2f3">https://github.com/erxes/erxes/commit/d626070a0fcd435ae29e689aca051ccfb440c2f3</a></li>
<li><a href="https://www.sonarsource.com/blog/micro-services-major-headaches-detecting-vulnerabilities-in-erxes-microservices">https://www.sonarsource.com/blog/micro-services-major-headaches-detecting-vulnerabilities-in-erxes-microservices</a></li>
<li><a href="https://github.com/advisories/GHSA-rq9r-qvwg-829q">https://github.com/advisories/GHSA-rq9r-qvwg-829q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rq9r-qvwg-829q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-06-10T18:32:27.000Z</published>
    </entry>
</feed>