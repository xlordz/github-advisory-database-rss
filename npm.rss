<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2025-04-29T02:29:25.086Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[n8n] n8n Vulnerable to Stored XSS through Attachments View Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</id>
        <link href="https://github.com/advisories/GHSA-c8hm-hr8h-5xjw"/>
        <updated>2025-04-28T21:02:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>n8n workflows can store and serve binary files, which are accessible to authenticated users. However, there was no restriction on the MIME type of uploaded files, and the MIME type could be controlled via a GET parameter. This allowed the server to respond with any MIME type, potentially enabling malicious content to be interpreted and executed by the browser.</p>
<p>An authenticated attacker with member-level permissions could exploit this by uploading a crafted HTML file containing malicious JavaScript. When another user visits the binary data endpoint with the MIME type set to text/html, the script executes in the context of the user’s session. This script could, for example, send a request to change the user’s email address in their account settings, effectively enabling account takeover.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0">n8n@1.90.0</a></li>
</ul>
<h3 id="credit">Credit</h3>
<p>We would like to thank @Mahmoud0x00 for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/n8n-io/n8n/security/advisories/GHSA-c8hm-hr8h-5xjw">https://github.com/n8n-io/n8n/security/advisories/GHSA-c8hm-hr8h-5xjw</a></li>
<li><a href="https://github.com/n8n-io/n8n/pull/14350">https://github.com/n8n-io/n8n/pull/14350</a></li>
<li><a href="https://github.com/n8n-io/n8n/pull/14685">https://github.com/n8n-io/n8n/pull/14685</a></li>
<li><a href="https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0">https://github.com/n8n-io/n8n/releases/tag/n8n%401.90.0</a></li>
<li><a href="https://github.com/advisories/GHSA-c8hm-hr8h-5xjw">https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8hm-hr8h-5xjw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-28T21:02:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-sdk] NodeJS Driver for Snowflake has race condition when checking access to Easy Logging configuration file]]></title>
        <id>https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</id>
        <link href="https://github.com/advisories/GHSA-wmjq-jrm2-9wfr"/>
        <updated>2025-04-28T20:31:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="issue">Issue</h1>
<p>Snowflake discovered and remediated a vulnerability in the NodeJS Driver for Snowflake (“Driver”). When using the Easy Logging feature on Linux and macOS the Driver didn’t correctly verify the permissions of the logging configuration file, potentially allowing an attacker with local access to overwrite the configuration and gain control over logging level and output location.</p>
<p>This vulnerability affects Driver versions 1.10.0 through 2.0.3. Snowflake fixed the issue in version 2.0.4.</p>
<h1 id="vulnerability-details">Vulnerability Details</h1>
<p>When using the Easy Logging feature on Linux and macOS the Driver reads logging configuration from a user-provided file. On Linux and macOS the Driver verifies that the configuration file can be written to only by its owner. That check was vulnerable to a Time-of-Check to Time-of-Use (TOCTOU) race condition and failed to verify that the file owner matches the user running the Driver. This could allow a local attacker with write access to the configuration file or the directory containing it to overwrite the configuration and gain control over logging level and output location.</p>
<h1 id="solution">Solution</h1>
<p>Snowflake released version 2.0.4 of the NodeJS Driver for Snowflake, which fixes this issue. We recommend users upgrade to version 2.0.4.</p>
<h1 id="additional-information">Additional Information</h1>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to Snowflake through our Vulnerability Disclosure Program hosted at HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-wmjq-jrm2-9wfr">https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-wmjq-jrm2-9wfr</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/commit/e94c24112271e1f44c271634bf29a3188acc68d0">https://github.com/snowflakedb/snowflake-connector-nodejs/commit/e94c24112271e1f44c271634bf29a3188acc68d0</a></li>
<li><a href="https://github.com/advisories/GHSA-wmjq-jrm2-9wfr">https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmjq-jrm2-9wfr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-28T20:31:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</id>
        <link href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc"/>
        <updated>2025-04-28T17:39:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>
<p>Users using the the following pattern are affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              'foo': {
                type: 'string',
              }
            },
            required: ['foo']
          }
        },
      }
    }
  }
})
</code></pre>
<p>User using the following pattern are <strong>not</strong> affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      type: 'object',
      properties: {
        'foo': {
          type: 'string',
        }
      },
      required: ['foo']
    }
  }
})
</code></pre>
<h3 id="patches">Patches</h3>
<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.
Version v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not specify multiple content types in the schema.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>
<li><a href="https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32442">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>
<li><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></li>
<li><a href="https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T15:02:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy-middleware] http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed]]></title>
        <id>https://github.com/advisories/GHSA-9gqv-wp59-fq42</id>
        <link href="https://github.com/advisories/GHSA-9gqv-wp59-fq42"/>
        <updated>2025-04-28T14:28:54.000Z</updated>
        <content type="html"><![CDATA[<p>In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32997">https://nvd.nist.gov/vuln/detail/CVE-2025-32997</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/pull/1096">https://github.com/chimurai/http-proxy-middleware/pull/1096</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e">https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-9gqv-wp59-fq42">https://github.com/advisories/GHSA-9gqv-wp59-fq42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gqv-wp59-fq42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T03:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy-middleware] http-proxy-middleware can call writeBody twice because "else if" is not used]]></title>
        <id>https://github.com/advisories/GHSA-4www-5p9h-95mh</id>
        <link href="https://github.com/advisories/GHSA-4www-5p9h-95mh"/>
        <updated>2025-04-28T14:27:15.000Z</updated>
        <content type="html"><![CDATA[<p>In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because "else if" is not used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32996">https://nvd.nist.gov/vuln/detail/CVE-2025-32996</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/pull/1089">https://github.com/chimurai/http-proxy-middleware/pull/1089</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145">https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/advisories/GHSA-4www-5p9h-95mh">https://github.com/advisories/GHSA-4www-5p9h-95mh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4www-5p9h-95mh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T03:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pug-code-gen] Pug allows JavaScript code execution if an application accepts untrusted input]]></title>
        <id>https://github.com/advisories/GHSA-3965-hpx2-q597</id>
        <link href="https://github.com/advisories/GHSA-3965-hpx2-q597"/>
        <updated>2025-04-28T14:20:51.000Z</updated>
        <content type="html"><![CDATA[<p>Pug through 3.0.2 allows JavaScript code execution if an application accepts untrusted input for the name option of the <code>compileClient</code>, <code>compileFileClient</code>, or <code>compileClientWithDependenciesTracked</code> function. NOTE: these functions are for compiling Pug templates into JavaScript, and there would typically be no reason to allow untrusted callers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36361">https://nvd.nist.gov/vuln/detail/CVE-2024-36361</a></li>
<li><a href="https://github.com/pugjs/pug/pull/3428">https://github.com/pugjs/pug/pull/3428</a></li>
<li><a href="https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug">https://github.com/Coding-Competition-Team/hackac-2024/tree/main/web/pug</a></li>
<li><a href="https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328">https://github.com/pugjs/pug/blob/4767cafea0af3d3f935553df0f9a8a6e76d470c2/packages/pug/lib/index.js#L328</a></li>
<li><a href="https://pugjs.org/api/reference.html">https://pugjs.org/api/reference.html</a></li>
<li><a href="https://www.npmjs.com/package/pug-code-gen">https://www.npmjs.com/package/pug-code-gen</a></li>
<li><a href="https://github.com/pugjs/pug/pull/3438">https://github.com/pugjs/pug/pull/3438</a></li>
<li><a href="https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb">https://github.com/pugjs/pug/commit/32acfe8f197dc44c54e8af32c7d7b19aa9d350fb</a></li>
<li><a href="https://github.com/pugjs/pug/releases/tag/pug%403.0.3">https://github.com/pugjs/pug/releases/tag/pug%403.0.3</a></li>
<li><a href="https://github.com/advisories/GHSA-3965-hpx2-q597">https://github.com/advisories/GHSA-3965-hpx2-q597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3965-hpx2-q597</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-24T14:45:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@escape.tech/graphql-armor-cost-limit] GraphQL Armor Cost-Limit Plugin Bypass via Introspection Query Obfuscation]]></title>
        <id>https://github.com/advisories/GHSA-733v-p3h5-qpq7</id>
        <link href="https://github.com/advisories/GHSA-733v-p3h5-qpq7"/>
        <updated>2025-04-25T15:14:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A query cost restriction using the <code>cost-limit</code> can be bypassed if <code>ignoreIntrospection</code> is enabled (which is the default configuration) by naming your query/fragment <code>__schema</code>.</p>
<h3 id="details">Details</h3>
<p>At the start of the <code>computeComplexity</code> function, we have the following check for <code>ignoreIntrospection</code> option:</p>
<pre><code class="language-ts">    if (this.config.ignoreIntrospection &amp;&amp; 'name' in node &amp;&amp; node.name?.value === '__schema') {
      return 0;
    }
</code></pre>
<p>However, the <code>node</code> can be <code>FieldNode | FragmentDefinitionNode | InlineFragmentNode | OperationDefinitionNode | FragmentSpreadNode</code></p>
<p>So, for example, sending the following query</p>
<pre><code class="language-gql">query hello {
  books {
    title
  }
}
</code></pre>
<p>would create an <code>OperationDefinitionNode</code> with <code>node.name.value == 'hello'</code></p>
<p>The proper way to handle this would be to check for the <code>__schema</code> field, which would create a <code>FieldNode</code>.</p>
<p>The fix is</p>
<pre><code class="language-ts">    if (
      this.config.ignoreIntrospection &amp;&amp;
      'name' in node &amp;&amp;
      node.name?.value === '__schema' &amp;&amp;
      node.kind === Kind.FIELD
    ) {
      return 0;
    }
</code></pre>
<p>to assert that the node must be a <code>FieldNode</code></p>
<h3 id="poc">PoC</h3>
<pre><code class="language-gql">query  {
  ...__schema
}

fragment __schema on Query {
  books {
    title
    author
  }
}
</code></pre>
<pre><code class="language-gql">query __schema {
  books {
    title
    author
  }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Applications using GraphQL Armor Cost Limit plugin with <code>ignoreIntrospection</code> enabled.</p>
<h3 id="fix">Fix:</h3>
<p>Fixed on <a href="https://github.com/Escape-Technologies/graphql-armor/pull/772">772</a>. A quick patch would be to set <code>ignoreIntrospection</code> to false.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7">https://github.com/Escape-Technologies/graphql-armor/security/advisories/GHSA-733v-p3h5-qpq7</a></li>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/pull/772">https://github.com/Escape-Technologies/graphql-armor/pull/772</a></li>
<li><a href="https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba">https://github.com/Escape-Technologies/graphql-armor/commit/5a329541cf32a359ee1f69748738f91231b26eba</a></li>
<li><a href="https://github.com/advisories/GHSA-733v-p3h5-qpq7">https://github.com/advisories/GHSA-733v-p3h5-qpq7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-733v-p3h5-qpq7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-25T15:14:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-router] React Router allows pre-render data spoofing on React-Router framework mode]]></title>
        <id>https://github.com/advisories/GHSA-cpj6-fhp6-mr6j</id>
        <link href="https://github.com/advisories/GHSA-cpj6-fhp6-mr6j"/>
        <updated>2025-04-25T14:34:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>After some research, it turns out that it's possible to modify pre-rendered data by adding a header to the request. This allows to completely spoof its contents and modify all the values ​​of the data object passed to the HTML. Latest versions are impacted.</p>
<h2 id="details">Details</h2>
<p>The vulnerable header is <code>X-React-Router-Prerender-Data</code>, a specific JSON object must be passed to it in order for the spoofing to be successful as we will see shortly. Here is <a href="https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87">the vulnerable code</a> :</p>
<img src="https://github.com/user-attachments/assets/c95b0b33-15ce-4d30-9f5e-b10525dd6ab4" alt="Capture d’écran 2025-04-07 à 05 36 58" width="776">

<p>To use the header, React-router must be used in Framework mode, and for the attack to be possible the target page must use a loader.</p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<p>Versions used for our PoC: </p>
<ul>
<li>"@react-router/node": "^7.5.0",</li>
<li>"@react-router/serve": "^7.5.0",</li>
<li>"react": "^19.0.0"</li>
<li>"react-dom": "^19.0.0"</li>
<li>"react-router": "^7.5.0"</li>
</ul>
<ol>
<li>Install React-Router with its default configuration in Framework mode (<a href="https://reactrouter.com/start/framework/installation">https://reactrouter.com/start/framework/installation</a>)</li>
<li>Add a simple page using a loader (example: <code>routes/ssr</code>)</li>
<li>Access your page (<em>which uses the loader</em>) by suffixing it with <code>.data</code>. In our case the page is called <code>/ssr</code>:</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/d7d04e86-c549-4f4a-9200-2d1b6ac96aad"></p>
<p>We access it by adding the suffix <code>.data</code> and retrieve the data object, needed for the header:</p>
<p><img alt="image" src="https://github.com/user-attachments/assets/ea0ca23e-6ba5-49c1-980d-1b04a05acf56"></p>
<ol start="4">
<li>Send your request by adding the <code>X-React-Router-Prerender-Data</code> header with the previously retrieved object as its value. You can change any value of your <code>data</code> object (do not touch the other values, the latter being necessary for the object to be processed correctly and not throw an error):</li>
</ol>
<p><img alt="Capture d’écran 2025-04-07 à 05 56 10" src="https://github.com/user-attachments/assets/42ca7c9e-5cd3-4eff-9711-1e78755c9046"></p>
<p>As you can see, all values ​​have been changed/overwritten by the values ​​provided via the header. </p>
<h2 id="impact">Impact</h2>
<p>The impact is significant, if a cache system is in place, it is possible to poison a response in which all of the data transmitted via a loader would be altered by an attacker allowing him to take control of the content of the page and modify it as he wishes via a cache-poisoning attack. This can lead to several types of attacks including potential stored XSS depending on the context in which the data is injected and/or how the data is used on the client-side.</p>
<h2 id="credits">Credits</h2>
<ul>
<li>Rachid Allam (zhero;)</li>
<li>Yasser Allam (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remix-run/react-router/security/advisories/GHSA-cpj6-fhp6-mr6j">https://github.com/remix-run/react-router/security/advisories/GHSA-cpj6-fhp6-mr6j</a></li>
<li><a href="https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111">https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111</a></li>
<li><a href="https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87">https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/routes.ts#L87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-43865">https://nvd.nist.gov/vuln/detail/CVE-2025-43865</a></li>
<li><a href="https://github.com/advisories/GHSA-cpj6-fhp6-mr6j">https://github.com/advisories/GHSA-cpj6-fhp6-mr6j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cpj6-fhp6-mr6j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-24T16:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-router] React Router allows a DoS via cache poisoning by forcing SPA mode]]></title>
        <id>https://github.com/advisories/GHSA-f46r-rw29-r322</id>
        <link href="https://github.com/advisories/GHSA-f46r-rw29-r322"/>
        <updated>2025-04-25T14:32:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>After some research, it turns out that it is possible to force an application to switch to SPA mode by adding a header to the request. If the application uses SSR and is forced to switch to SPA, this causes an error that completely corrupts the page. If a cache system is in place, this allows the response containing the error to be cached, resulting in a cache poisoning that strongly impacts the availability of the application.</p>
<h2 id="details">Details</h2>
<p>The vulnerable header is <code>X-React-Router-SPA-Mode</code>; adding it to a request sent to a page/endpoint using a loader throws an error. Here is <a href="https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407">the vulnerable code</a> :</p>
<img src="https://github.com/user-attachments/assets/0a0e9c41-70fd-4dba-9061-892dd6797291" alt="Capture d’écran 2025-04-07 à 08 28 20" width="672">

<p>To use the header, React-router must be used in Framework mode, and for the attack to be possible the target page must use a loader.</p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<p>Versions used for our PoC: </p>
<ul>
<li>"@react-router/node": "^7.5.0",</li>
<li>"@react-router/serve": "^7.5.0",</li>
<li>"react": "^19.0.0"</li>
<li>"react-dom": "^19.0.0"</li>
<li>"react-router": "^7.5.0"</li>
</ul>
<ol>
<li>Install React-Router with its default configuration in Framework mode (<a href="https://reactrouter.com/start/framework/installation">https://reactrouter.com/start/framework/installation</a>)</li>
<li>Add a simple page using a loader (example: <code>routes/ssr</code>)</li>
</ol>
<p><img alt="image" src="https://github.com/user-attachments/assets/d7d04e86-c549-4f4a-9200-2d1b6ac96aad"></p>
<ol start="3">
<li>Send a request to the endpoint using the loader (<code>/ssr</code> in our case) adding the following header:</li>
</ol>
<pre><code>X-React-Router-SPA-Mode: yes
</code></pre>
<p>Notice the difference between a request with and without the header;</p>
<p><strong>Normal request</strong>
<img alt="Capture d’écran 2025-04-07 à 08 36 27" src="https://github.com/user-attachments/assets/da372b70-7c68-41c1-aac1-e5be94f22526"></p>
<p><strong>With the header</strong>
<img alt="Capture d’écran 2025-04-07 à 08 37 01" src="https://github.com/user-attachments/assets/98101720-cb5b-44e9-bff5-463c0b4dab2a">
<img alt="image" src="https://github.com/user-attachments/assets/c16a101e-688c-4757-9e05-61308ed8a2de"></p>
<h2 id="impact">Impact</h2>
<p>If a system cache is in place, it is possible to poison the response by completely altering its content (<em>by an error message</em>), strongly impacting its availability, making the latter impractical via a cache-poisoning attack.</p>
<h2 id="credits">Credits</h2>
<ul>
<li>Rachid Allam (zhero;)</li>
<li>Yasser Allam (inzo_)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/remix-run/react-router/security/advisories/GHSA-f46r-rw29-r322">https://github.com/remix-run/react-router/security/advisories/GHSA-f46r-rw29-r322</a></li>
<li><a href="https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111">https://github.com/remix-run/react-router/commit/c84302972a152d851cf5dd859ff332b354b70111</a></li>
<li><a href="https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407">https://github.com/remix-run/react-router/blob/e6c53a0130559b4a9bd47f9cf76ea5b08a69868a/packages/react-router/lib/server-runtime/server.ts#L407</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-43864">https://nvd.nist.gov/vuln/detail/CVE-2025-43864</a></li>
<li><a href="https://github.com/advisories/GHSA-f46r-rw29-r322">https://github.com/advisories/GHSA-f46r-rw29-r322</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f46r-rw29-r322</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-24T16:31:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@trpc/server] tRPC 11 WebSocket DoS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pj3v-9cm8-gvj8</id>
        <link href="https://github.com/advisories/GHSA-pj3v-9cm8-gvj8"/>
        <updated>2025-04-24T16:03:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unhandled error is thrown when validating invalid connectionParams which crashes a tRPC WebSocket server. This allows any unauthenticated user to crash a tRPC 11 WebSocket server.</p>
<h3 id="details">Details</h3>
<p>Any tRPC 11 server with WebSocket enabled with a <code>createContext</code> method set is vulnerable. Here is an example:</p>
<p><a href="https://github.com/user-attachments/assets/ce1b2d32-6103-4e54-8446-51535b293b05">https://github.com/user-attachments/assets/ce1b2d32-6103-4e54-8446-51535b293b05</a></p>
<p>I have a working reproduction here if you would like to test: <a href="https://github.com/lukechilds/trpc-vuln-reproduction">https://github.com/lukechilds/trpc-vuln-reproduction</a></p>
<p>The connectionParams logic introduced in <a href="https://github.com/trpc/trpc/pull/5839">https://github.com/trpc/trpc/pull/5839</a> does not safely handle invalid connectionParams objects. During validation if the object does not match an expected shape an error will be thrown:</p>
<p><a href="https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/unstable-core-do-not-import/http/parseConnectionParams.ts#L27-L33">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/unstable-core-do-not-import/http/parseConnectionParams.ts#L27-L33</a></p>
<p>This is called during WebSocket connection setup inside <code>createCtxPromise()</code> here:</p>
<p><a href="https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L435">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L435</a></p>
<p><code>createCtxPromise</code> has handling to catch any errors and pass them up to the <code>opts.onError</code> handler:</p>
<p><a href="https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L144-L173">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L144-L173</a></p>
<p>However the error handler then rethrows the error:</p>
<p><a href="https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171</a></p>
<p>Since this is all triggered from the WebSocket <code>message</code> event there is no higher level error handling so this causes an uncaught exception and crashes the server process.</p>
<p>This means any tRPC 11 server with WebSockets enabled can be crashed by an attacker sending an invalid connectionParams object. It doesn't matter if the server doesn't make user of connectionParams, the connectionParams logic can be initiated by the client.</p>
<p>To fix this vulnerability tRPC should not rethrow the error after it's be handled. This patch fixes the vulnerability:</p>
<pre><code class="language-patch">From 5747b1d11946f60268eb86c59784bd6f7eb50abd Mon Sep 17 00:00:00 2001
From: Luke Childs &lt;lukechilds123@gmail.com&gt;
Date: Sun, 20 Apr 2025 13:27:10 +0700
Subject: [PATCH] Don't throw already handled error

This error has already been handled so no need to re-throw. If we re-throw it will not be caught and will trigger an uncaught exception causing the entire server process to crash.
---
 packages/server/src/adapters/ws.ts | 2 --
 1 file changed, 2 deletions(-)

diff --git a/packages/server/src/adapters/ws.ts b/packages/server/src/adapters/ws.ts
index ad869affd..5a578b5cb 100644
--- a/packages/server/src/adapters/ws.ts
+++ b/packages/server/src/adapters/ws.ts
@@ -167,8 +167,6 @@ export function getWSConnectionHandler&lt;TRouter extends AnyRouter&gt;(
         (globalThis.setImmediate ?? globalThis.setTimeout)(() =&gt; {
           client.close();
         });
-
-        throw error;
       });
     }

--
2.48.1
</code></pre>
<h2 id="poc">PoC</h2>
<p>This script will crash the target tRPC 11 server if WebSockets are enabled:</p>
<pre><code class="language-js">#!/usr/bin/env node

const TARGET = 'ws://localhost:3000'

// These malicious connection params will crash any tRPC v11.1.0 WebSocket server on validation
const MALICIOUS_CONNECTION_PARAMS = JSON.stringify({
  method: "connectionParams",
  data: { invalidConnectionParams: null },
});

// Open a connection to the target
const target = `${TARGET}?connectionParams=1`;
console.log(`Opening a WebSocket to ${target}`);
const socket = new WebSocket(target);

// Wait for the connection to be established
socket.addEventListener("open", () =&gt; {
  console.log("WebSocket established!");

  // Sends a message to the WebSocket server.
  console.log(`Sending malicious connectionParams`);
  socket.send(MALICIOUS_CONNECTION_PARAMS);
  console.log(`Done!`);
});

// Handle errors
socket.addEventListener("error", () =&gt; console.log("Error opening WebSocket"));
</code></pre>
<p>Complete PoC with vulnerable WebSocket server here: <a href="https://github.com/lukechilds/trpc-vuln-reproduction">https://github.com/lukechilds/trpc-vuln-reproduction</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trpc/trpc/security/advisories/GHSA-pj3v-9cm8-gvj8">https://github.com/trpc/trpc/security/advisories/GHSA-pj3v-9cm8-gvj8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-43855">https://nvd.nist.gov/vuln/detail/CVE-2025-43855</a></li>
<li><a href="https://github.com/trpc/trpc/pull/5839">https://github.com/trpc/trpc/pull/5839</a></li>
<li><a href="https://github.com/trpc/trpc/commit/9beb26c636d44852e0f407f3d7a82ad54df65b4d">https://github.com/trpc/trpc/commit/9beb26c636d44852e0f407f3d7a82ad54df65b4d</a></li>
<li><a href="https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171">https://github.com/trpc/trpc/blob/8cef54eaf95d8abc8484fe1d454b6620eeb57f2f/packages/server/src/adapters/ws.ts#L171</a></li>
<li><a href="https://github.com/advisories/GHSA-pj3v-9cm8-gvj8">https://github.com/advisories/GHSA-pj3v-9cm8-gvj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pj3v-9cm8-gvj8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-24T16:03:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@posthog/plugin-server] PostHog Plugin Server SQL Injection Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v64v-fq96-c5wv</id>
        <link href="https://github.com/advisories/GHSA-v64v-fq96-c5wv"/>
        <updated>2025-04-23T19:38:44.000Z</updated>
        <content type="html"><![CDATA[<p>PostHog ClickHouse Table Functions SQL Injection Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of PostHog. Authentication is required to exploit this vulnerability.</p>
<p>The specific flaw exists within the implementation of the SQL parser. The issue results from the lack of proper validation of a user-supplied string before using it to construct SQL queries. An attacker can leverage this vulnerability to execute code in the context of the database account. Was ZDI-CAN-25350.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1520">https://nvd.nist.gov/vuln/detail/CVE-2025-1520</a></li>
<li><a href="https://github.com/PostHog/posthog/commit/6e8f035f9acd339c5ba87ba6ea40fc1ab3053d42">https://github.com/PostHog/posthog/commit/6e8f035f9acd339c5ba87ba6ea40fc1ab3053d42</a></li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-25-099">https://www.zerodayinitiative.com/advisories/ZDI-25-099</a></li>
<li><a href="https://github.com/advisories/GHSA-v64v-fq96-c5wv">https://github.com/advisories/GHSA-v64v-fq96-c5wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v64v-fq96-c5wv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-23T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pnpm] pnpm uses the md5 path shortening function causes packet paths to coincide, which causes indirect packet overwriting]]></title>
        <id>https://github.com/advisories/GHSA-8cc4-rfj6-fhg4</id>
        <link href="https://github.com/advisories/GHSA-8cc4-rfj6-fhg4"/>
        <updated>2025-04-23T19:16:02.000Z</updated>
        <content type="html"><![CDATA[<p>The path shortening function is used in pnpm：</p>
<pre><code>export function depPathToFilename (depPath: string, maxLengthWithoutHash: number): string {
  let filename = depPathToFilenameUnescaped(depPath).replace(/[\\/:*?"&lt;&gt;|]/g, '+')
  if (filename.includes('(')) {
    filename = filename
      .replace(/\)$/, '')
      .replace(/(\)\()|\(|\)/g, '_')
  }
  if (filename.length &gt; maxLengthWithoutHash || filename !== filename.toLowerCase() &amp;&amp; !filename.startsWith('file+')) {
    return `${filename.substring(0, maxLengthWithoutHash - 27)}_${createBase32Hash(filename)}`
  }
  return filename
}
</code></pre>
<p>However, it uses the md5 function as a path shortening compression function, and if a collision occurs, it will result in the same storage path for two different libraries. Although the real names are under the package name /node_modoules/, there are no version numbers for the libraries they refer to.
<img alt="Schematic picture" src="https://github.com/user-attachments/assets/7b8b87ab-f297-47bd-a9dd-43be86e36ed2">
In the diagram, we assume that two packages are called packageA and packageB, and that the first 90 digits of their package names must be the same, and that the hash value of the package names with versions must be the same.  Then C is the package that they both reference, but with a different version number.  (npm allows package names up to 214 bytes, so constructing such a collision package name is obvious.)</p>
<p>Then hash(<a href="mailto:packageA@1.2.3">packageA@1.2.3</a>)=hash(<a href="mailto:packageB@3.4.5">packageB@3.4.5</a>).  This results in the same path for the installation, and thus under the same directory.  Although the package names under node_modoules are the full paths again, they are shared with C.
What is the exact version number of C?
In our local tests, it depends on which one is installed later.  If packageB is installed later, the C version number will change to 2.0.0.  At this time, although package A requires the <a href="mailto:C@1.0.0">C@1.0.0</a> version, package. json will only work during installation, and will not affect the actual operation.
We did not receive any installation error issues from pnpm during our local testing, nor did we use force, which is clearly a case that can be triggered.</p>
<p>For a package with a package name + version number longer than 120, another package can be constructed to introduce an indirect reference to a lower version, such as one with some known vulnerability.
Alternatively, it is possible to construct two packages with more than 120 package names + version numbers.
This is clearly an advantage for those intent on carrying out supply chain attacks.</p>
<p>The solution:
The repair cost is also very low, just need to upgrade the md5 function to sha256.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4">https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47829">https://nvd.nist.gov/vuln/detail/CVE-2024-47829</a></li>
<li><a href="https://github.com/advisories/GHSA-8cc4-rfj6-fhg4">https://github.com/advisories/GHSA-8cc4-rfj6-fhg4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8cc4-rfj6-fhg4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-23T14:05:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xrpl] Compromised xrpl.js versions 4.2.1, 4.2.2, 4.2.3, 4.2.4, and 2.14.2]]></title>
        <id>https://github.com/advisories/GHSA-33qr-m49q-rxfx</id>
        <link href="https://github.com/advisories/GHSA-33qr-m49q-rxfx"/>
        <updated>2025-04-22T23:53:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions 4.2.1, 4.2.2, 4.2.3, and 4.2.4 of xrpl.js were compromised and contained malicious code designed to exfiltrate private keys. If you are using one of these versions, stop immediately and rotate any private keys or secrets used with affected systems.</p>
<p>Version 2.14.2 is also malicious, though it is less likely to lead to exploitation as it is not compatible with other 2.x versions.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to version 4.2.5 or 2.14.3.</p>
<h3 id="required-actions">Required Actions</h3>
<p>To secure funds, think carefully about whether any keys may have been compromised by this supply chain attack, and mitigate by sending funds to secure wallets, and/or rotating keys:</p>
<p>The XRP Ledger supports key rotation: <a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></p>
<p>If any account's master key is potentially compromised, you should disable it: <a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></p>
<h3 id="references">References</h3>
<p><a href="https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx">https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx</a></li>
<li><a href="https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></li>
<li><a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></li>
<li><a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32965">https://nvd.nist.gov/vuln/detail/CVE-2025-32965</a></li>
<li><a href="https://github.com/advisories/GHSA-33qr-m49q-rxfx">https://github.com/advisories/GHSA-33qr-m49q-rxfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33qr-m49q-rxfx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-22T18:57:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xrpl] Compromised xrpl.js versions 4.2.1, 4.2.2, 4.2.3, 4.2.4, and 2.14.2]]></title>
        <id>https://github.com/advisories/GHSA-33qr-m49q-rxfx</id>
        <link href="https://github.com/advisories/GHSA-33qr-m49q-rxfx"/>
        <updated>2025-04-22T23:53:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions 4.2.1, 4.2.2, 4.2.3, and 4.2.4 of xrpl.js were compromised and contained malicious code designed to exfiltrate private keys. If you are using one of these versions, stop immediately and rotate any private keys or secrets used with affected systems.</p>
<p>Version 2.14.2 is also malicious, though it is less likely to lead to exploitation as it is not compatible with other 2.x versions.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to version 4.2.5 or 2.14.3.</p>
<h3 id="required-actions">Required Actions</h3>
<p>To secure funds, think carefully about whether any keys may have been compromised by this supply chain attack, and mitigate by sending funds to secure wallets, and/or rotating keys:</p>
<p>The XRP Ledger supports key rotation: <a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></p>
<p>If any account's master key is potentially compromised, you should disable it: <a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></p>
<h3 id="references">References</h3>
<p><a href="https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx">https://github.com/XRPLF/xrpl.js/security/advisories/GHSA-33qr-m49q-rxfx</a></li>
<li><a href="https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor">https://www.aikido.dev/blog/xrp-supplychain-attack-official-npm-package-infected-with-crypto-stealing-backdoor</a></li>
<li><a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/assign-a-regular-key-pair</a></li>
<li><a href="https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair">https://xrpl.org/docs/tutorials/how-tos/manage-account-settings/disable-master-key-pair</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32965">https://nvd.nist.gov/vuln/detail/CVE-2025-32965</a></li>
<li><a href="https://github.com/advisories/GHSA-33qr-m49q-rxfx">https://github.com/advisories/GHSA-33qr-m49q-rxfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33qr-m49q-rxfx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-04-22T18:57:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@quasar/quasar-ui-qmarkdown] QMarkdown Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wm65-ph3w-587c</id>
        <link href="https://github.com/advisories/GHSA-wm65-ph3w-587c"/>
        <updated>2025-04-21T16:18:47.000Z</updated>
        <content type="html"><![CDATA[<p>QMarkdown (aka quasar-ui-qmarkdown) before 2.0.5 allows XSS via headers even when when no-html is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-43954">https://nvd.nist.gov/vuln/detail/CVE-2025-43954</a></li>
<li><a href="https://github.com/quasarframework/quasar-ui-qmarkdown/commit/b61dff84851c45369cf931db5bd93db177c657f6">https://github.com/quasarframework/quasar-ui-qmarkdown/commit/b61dff84851c45369cf931db5bd93db177c657f6</a></li>
<li><a href="https://github.com/quasarframework/quasar-ui-qmarkdown/compare/v2.0.4...v2.0.5">https://github.com/quasarframework/quasar-ui-qmarkdown/compare/v2.0.4...v2.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-wm65-ph3w-587c">https://github.com/advisories/GHSA-wm65-ph3w-587c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm65-ph3w-587c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-20T21:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastify] Fastify vulnerable to invalid content-type parsing, which could lead to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</id>
        <link href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc"/>
        <updated>2025-04-28T17:39:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In applications that specify different validation strategies for different content types, it's possible to bypass the validation by providing a <em>slightly altered</em> content type such as with different casing or altered whitespacing before <code>;</code>.</p>
<p>Users using the the following pattern are affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              'foo': {
                type: 'string',
              }
            },
            required: ['foo']
          }
        },
      }
    }
  }
})
</code></pre>
<p>User using the following pattern are <strong>not</strong> affected:</p>
<pre><code class="language-js">fastify.post('/', {
  handler(request, reply) {
    reply.code(200).send(request.body)
  },
  schema: {
    body: {
      type: 'object',
      properties: {
        'foo': {
          type: 'string',
        }
      },
      required: ['foo']
    }
  }
})
</code></pre>
<h3 id="patches">Patches</h3>
<p>This was patched in v5.3.1, but unfortunately it did not cover all problems. This has been fully patched in v5.3.2.
Version v4.9.0 was also affected by this issue. This has been fully patched in v4.9.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not specify multiple content types in the schema.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/fastify/fastify/security/advisories/GHSA-mg2h-6x62-wpwc</a></li>
<li><a href="https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418">https://github.com/fastify/fastify/commit/436da4c06dfbbb8c24adee3a64de0c51e4f47418</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32442">https://nvd.nist.gov/vuln/detail/CVE-2025-32442</a></li>
<li><a href="https://hackerone.com/reports/3087928">https://hackerone.com/reports/3087928</a></li>
<li><a href="https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4">https://github.com/fastify/fastify/commit/f3d2bcb3963cd570a582e5d39aab01a9ae692fe4</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2h-6x62-wpwc">https://github.com/advisories/GHSA-mg2h-6x62-wpwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2h-6x62-wpwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T15:02:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] ses's global contour bindings leak into Compartment lexical scope]]></title>
        <id>https://github.com/advisories/GHSA-h9w6-f932-gq62</id>
        <link href="https://github.com/advisories/GHSA-h9w6-f932-gq62"/>
        <updated>2025-04-22T01:49:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Web pages and web extensions using <code>ses</code> and the <code>Compartment</code> API to evaluate third-party code in an isolated execution environment that have also elsewhere used <code>const</code>, <code>let</code>, and <code>class</code> bindings in the top-level scope of a <code>&lt;script&gt;</code> tag will have inadvertently revealed these bindings in the lexical scope of third-party code.</p>
<h3 id="patches">Patches</h3>
<p>This compromise is addressed in <code>ses</code> version <code>1.12.0</code>. The mechanism for confining third-party code involves a <code>with</code> block and a semi-opaque scope <code>Proxy</code>. The proxy previously revealed any named property to the surrounding lexical scope if it were absent on <code>globalThis</code>, so that the third-party code would receive an informative <code>ReferenceError</code>, relying on the invalid assumption that only properties of <code>globalThis</code> are in the top-level lexical scope. The solution makes the scope proxy fully opaque. Consequently, accessing an unbound free lexical name will produce <code>undefined</code> instead of throwing <code>ReferenceError</code>.
Assigning to an unbound free lexical name will continue to throw a <code>ReferenceError</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This problem can be mitigated either by avoiding top-level <code>let</code>, <code>const</code>, or <code>class</code> bindings in <code>&lt;script&gt;</code> tags, which is an existing industry best-practice, or change these to <code>var</code> bindings to be reflected on <code>globalThis</code>, or upgrade <code>ses</code> to version <code>1.12.0</code> or greater.</p>
<p>Some bundlers by default transform top-level <code>let</code>, <code>const</code>, and <code>class</code> bindings to <code>var</code>.</p>
<h3 id="disclosure">Disclosure</h3>
<p>This vulnerability was disclosed by @mingijunggrape in the course of their studies at UNIST (Ulsan National Institute of Science and Technology) as a member of the Web Security Lab (<a href="https://websec-lab.github.io/">https://websec-lab.github.io/</a>).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-h9w6-f932-gq62">https://github.com/endojs/endo/security/advisories/GHSA-h9w6-f932-gq62</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32792">https://nvd.nist.gov/vuln/detail/CVE-2025-32792</a></li>
<li><a href="https://github.com/advisories/GHSA-h9w6-f932-gq62">https://github.com/advisories/GHSA-h9w6-f932-gq62</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h9w6-f932-gq62</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-18T15:10:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-permission-backend] Permission policy information leakage in Backstage permission system]]></title>
        <id>https://github.com/advisories/GHSA-f8j4-p5cr-p777</id>
        <link href="https://github.com/advisories/GHSA-f8j4-p5cr-p777"/>
        <updated>2025-04-17T12:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in the Backstage permission plugin backend allows callers to extract some information about the conditional decisions returned by the permission policy installed in the permission backend. If the permission system is not in use or if the installed permission policy does not use conditional decisions, there is no impact.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in version <code>0.6.0</code> of the permissions backend.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Administrators of the permission policies can ensure that they are crafted in such a way that conditional decisions do not contain any sensitive information.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-f8j4-p5cr-p777">https://github.com/backstage/backstage/security/advisories/GHSA-f8j4-p5cr-p777</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32791">https://nvd.nist.gov/vuln/detail/CVE-2025-32791</a></li>
<li><a href="https://github.com/advisories/GHSA-f8j4-p5cr-p777">https://github.com/advisories/GHSA-f8j4-p5cr-p777</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8j4-p5cr-p777</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-16T15:34:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy-middleware] http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed]]></title>
        <id>https://github.com/advisories/GHSA-9gqv-wp59-fq42</id>
        <link href="https://github.com/advisories/GHSA-9gqv-wp59-fq42"/>
        <updated>2025-04-28T14:28:54.000Z</updated>
        <content type="html"><![CDATA[<p>In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32997">https://nvd.nist.gov/vuln/detail/CVE-2025-32997</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/pull/1096">https://github.com/chimurai/http-proxy-middleware/pull/1096</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e">https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-9gqv-wp59-fq42">https://github.com/advisories/GHSA-9gqv-wp59-fq42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gqv-wp59-fq42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T03:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy-middleware] http-proxy-middleware can call writeBody twice because "else if" is not used]]></title>
        <id>https://github.com/advisories/GHSA-4www-5p9h-95mh</id>
        <link href="https://github.com/advisories/GHSA-4www-5p9h-95mh"/>
        <updated>2025-04-28T14:27:15.000Z</updated>
        <content type="html"><![CDATA[<p>In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because "else if" is not used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32996">https://nvd.nist.gov/vuln/detail/CVE-2025-32996</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/pull/1089">https://github.com/chimurai/http-proxy-middleware/pull/1089</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145">https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8">https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8</a></li>
<li><a href="https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4">https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/advisories/GHSA-4www-5p9h-95mh">https://github.com/advisories/GHSA-4www-5p9h-95mh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4www-5p9h-95mh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-15T03:30:34.000Z</published>
    </entry>
</feed>