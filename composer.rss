<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-11-07T17:01:19.950Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[filament/actions] Filament has exported files stored in default (`public`) filesystem if not reconfigured]]></title>
        <id>https://github.com/advisories/GHSA-4hxw-gc2q-f6f3</id>
        <link href="https://github.com/advisories/GHSA-4hxw-gc2q-f6f3"/>
        <updated>2024-11-07T16:14:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>All Filament features that interact with storage use the <code>default_filesystem_disk</code> config option. This allows the user to easily swap their storage driver to something production-ready like <code>s3</code> when deploying their app, without having to touch multiple configuration options and potentially forgetting about some.</p>
<p>The default disk is set to <code>public</code> when you first install Filament, since this allows users to quickly get started developing with a functional disk that allows features such as file upload previews locally without the need to set up an S3 disk with temporary URL support.</p>
<p>However, some features of Filament such as exports also rely on storage, and the files that are stored contain data that should often not be public. This is not an issue for the many deployed applications, since many use a secure default disk such as S3 in production. However, <a href="https://cwe.mitre.org/data/definitions/1188.html">CWE-1188</a> suggests that having the <code>public</code> disk as the default disk in Filament is a security vulnerability itself:</p>
<blockquote>
<p>Developers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.</p>
</blockquote>
<p>As such, we have implemented a measure to protect users whereby if the <code>public</code> disk is set as the default disk, the exports feature will automatically swap it out for the <code>local</code> disk, if that exists. Users who set the default disk to <code>local</code> or <code>s3</code> already are not affected. If a user wants to continue to use the <code>public</code> disk for exports, they can by <a href="https://filamentphp.com/docs/3.x/actions/prebuilt-actions/export#customizing-the-storage-disk">setting the export disk</a> deliberately.</p>
<h3 id="details">Details</h3>
<p><strong>Product:</strong> filament/actions
<strong>Version:</strong> &gt;=3.2
<strong>CWE-ID:</strong><a href="https://cwe.mitre.org/data/definitions/1188.html">CWE-1188</a>: Initialization of a Resource with an Insecure Default
<strong>Description:</strong> The default configuration saves export files to a public disk, allowing unauthorized users to download exported data.
<strong>Impact:</strong> Reading export files without access control
<strong>Vulnerable component:</strong>
<a href="https://github.com/filamentphp/filament/blob/3.x/packages/actions/src/Exports/Exporter.php#L144-L153">https://github.com/filamentphp/filament/blob/3.x/packages/actions/src/Exports/Exporter.php#L144-L153</a>
<strong>Exploitation conditions:</strong> Unauthorized user
<strong>Researcher:</strong> Vladislav Gladky (Positive Technologies)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/filamentphp/filament/security/advisories/GHSA-4hxw-gc2q-f6f3">https://github.com/filamentphp/filament/security/advisories/GHSA-4hxw-gc2q-f6f3</a></li>
<li><a href="https://github.com/filamentphp/filament/commit/19f5347f0e17d9f4eb515e24ea5632031c6829df">https://github.com/filamentphp/filament/commit/19f5347f0e17d9f4eb515e24ea5632031c6829df</a></li>
<li><a href="https://github.com/filamentphp/filament/blob/3.x/packages/actions/src/Exports/Exporter.php#L144-L153">https://github.com/filamentphp/filament/blob/3.x/packages/actions/src/Exports/Exporter.php#L144-L153</a></li>
<li><a href="https://github.com/advisories/GHSA-4hxw-gc2q-f6f3">https://github.com/advisories/GHSA-4hxw-gc2q-f6f3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4hxw-gc2q-f6f3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-07T16:14:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twig/twig] Twig has unguarded calls to `__isset()` and to array-accesses when the sandbox is enabled]]></title>
        <id>https://github.com/advisories/GHSA-jjxq-ff2g-95vh</id>
        <link href="https://github.com/advisories/GHSA-jjxq-ff2g-95vh"/>
        <updated>2024-11-07T15:12:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>In a sandbox, an attacker can access attributes of Array-like objects as they were not checked by the security policy.
They are now checked via the property policy and the <code>__isset()</code> method is now called after the security check.
<strong>This is a BC break.</strong></p>
<h3 id="resolution">Resolution</h3>
<p>The sandbox mode now ensures access to array-like's properties is allowed.</p>
<p>The patch for this issue is available <a href="https://github.com/twigphp/twig/commit/249615d3bfc3ce1672815a265458c0bcf8f7cc61">here</a> for branch 3.11.x.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jamie Schouten for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/twigphp/Twig/security/advisories/GHSA-jjxq-ff2g-95vh">https://github.com/twigphp/Twig/security/advisories/GHSA-jjxq-ff2g-95vh</a></li>
<li><a href="https://github.com/twigphp/Twig/commit/831c148e786178e5f2fde9db67266be3bf241c21">https://github.com/twigphp/Twig/commit/831c148e786178e5f2fde9db67266be3bf241c21</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51755">https://nvd.nist.gov/vuln/detail/CVE-2024-51755</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51755.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51755.yaml</a></li>
<li><a href="https://symfony.com/blog/unguarded-calls-to-__isset-and-to-array-accesses-when-the-sandbox-is-enabled">https://symfony.com/blog/unguarded-calls-to-__isset-and-to-array-accesses-when-the-sandbox-is-enabled</a></li>
<li><a href="https://github.com/advisories/GHSA-jjxq-ff2g-95vh">https://github.com/advisories/GHSA-jjxq-ff2g-95vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjxq-ff2g-95vh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T19:52:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twig/twig] Twig has unguarded calls to `__isset()` and to array-accesses when the sandbox is enabled]]></title>
        <id>https://github.com/advisories/GHSA-jjxq-ff2g-95vh</id>
        <link href="https://github.com/advisories/GHSA-jjxq-ff2g-95vh"/>
        <updated>2024-11-07T15:12:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>In a sandbox, an attacker can access attributes of Array-like objects as they were not checked by the security policy.
They are now checked via the property policy and the <code>__isset()</code> method is now called after the security check.
<strong>This is a BC break.</strong></p>
<h3 id="resolution">Resolution</h3>
<p>The sandbox mode now ensures access to array-like's properties is allowed.</p>
<p>The patch for this issue is available <a href="https://github.com/twigphp/twig/commit/249615d3bfc3ce1672815a265458c0bcf8f7cc61">here</a> for branch 3.11.x.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jamie Schouten for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/twigphp/Twig/security/advisories/GHSA-jjxq-ff2g-95vh">https://github.com/twigphp/Twig/security/advisories/GHSA-jjxq-ff2g-95vh</a></li>
<li><a href="https://github.com/twigphp/Twig/commit/831c148e786178e5f2fde9db67266be3bf241c21">https://github.com/twigphp/Twig/commit/831c148e786178e5f2fde9db67266be3bf241c21</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51755">https://nvd.nist.gov/vuln/detail/CVE-2024-51755</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51755.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51755.yaml</a></li>
<li><a href="https://symfony.com/blog/unguarded-calls-to-__isset-and-to-array-accesses-when-the-sandbox-is-enabled">https://symfony.com/blog/unguarded-calls-to-__isset-and-to-array-accesses-when-the-sandbox-is-enabled</a></li>
<li><a href="https://github.com/advisories/GHSA-jjxq-ff2g-95vh">https://github.com/advisories/GHSA-jjxq-ff2g-95vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjxq-ff2g-95vh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T19:52:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twig/twig] Twig has unguarded calls to `__toString()` when nesting an object into an array]]></title>
        <id>https://github.com/advisories/GHSA-6377-hfv9-hqf6</id>
        <link href="https://github.com/advisories/GHSA-6377-hfv9-hqf6"/>
        <updated>2024-11-07T14:30:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>In a sandbox, an attacker can call <code>__toString()</code> on an object even if the <code>__toString()</code> method is not allowed by the security policy when the object is part of an array or an argument list (arguments to a function or a filter for instance).</p>
<h3 id="resolution">Resolution</h3>
<p>The sandbox mode now checks the <code>__toString()</code> method call on all objects.</p>
<p>The patch for this issue is available <a href="https://github.com/twigphp/twig/commit/407647c1036518c90b0188bb31b55f19ca84c328">here</a> for branch 3.x.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jamie Schouten for reporting the issue and Fabien Potencier for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/twigphp/Twig/security/advisories/GHSA-6377-hfv9-hqf6">https://github.com/twigphp/Twig/security/advisories/GHSA-6377-hfv9-hqf6</a></li>
<li><a href="https://github.com/twigphp/Twig/commit/2bb8c2460a2c519c498df9b643d5277117155a73">https://github.com/twigphp/Twig/commit/2bb8c2460a2c519c498df9b643d5277117155a73</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51754">https://nvd.nist.gov/vuln/detail/CVE-2024-51754</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51754.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51754.yaml</a></li>
<li><a href="https://symfony.com/blog/unguarded-calls-to-__tostring-when-nesting-an-object-into-an-array">https://symfony.com/blog/unguarded-calls-to-__tostring-when-nesting-an-object-into-an-array</a></li>
<li><a href="https://github.com/advisories/GHSA-6377-hfv9-hqf6">https://github.com/advisories/GHSA-6377-hfv9-hqf6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6377-hfv9-hqf6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T19:52:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twig/twig] Twig has unguarded calls to `__toString()` when nesting an object into an array]]></title>
        <id>https://github.com/advisories/GHSA-6377-hfv9-hqf6</id>
        <link href="https://github.com/advisories/GHSA-6377-hfv9-hqf6"/>
        <updated>2024-11-07T14:30:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>In a sandbox, an attacker can call <code>__toString()</code> on an object even if the <code>__toString()</code> method is not allowed by the security policy when the object is part of an array or an argument list (arguments to a function or a filter for instance).</p>
<h3 id="resolution">Resolution</h3>
<p>The sandbox mode now checks the <code>__toString()</code> method call on all objects.</p>
<p>The patch for this issue is available <a href="https://github.com/twigphp/twig/commit/407647c1036518c90b0188bb31b55f19ca84c328">here</a> for branch 3.x.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jamie Schouten for reporting the issue and Fabien Potencier for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/twigphp/Twig/security/advisories/GHSA-6377-hfv9-hqf6">https://github.com/twigphp/Twig/security/advisories/GHSA-6377-hfv9-hqf6</a></li>
<li><a href="https://github.com/twigphp/Twig/commit/2bb8c2460a2c519c498df9b643d5277117155a73">https://github.com/twigphp/Twig/commit/2bb8c2460a2c519c498df9b643d5277117155a73</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51754">https://nvd.nist.gov/vuln/detail/CVE-2024-51754</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51754.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2024-51754.yaml</a></li>
<li><a href="https://symfony.com/blog/unguarded-calls-to-__tostring-when-nesting-an-object-into-an-array">https://symfony.com/blog/unguarded-calls-to-__tostring-when-nesting-an-object-into-an-array</a></li>
<li><a href="https://github.com/advisories/GHSA-6377-hfv9-hqf6">https://github.com/advisories/GHSA-6377-hfv9-hqf6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6377-hfv9-hqf6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T19:52:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[unopim/unopim] UnoPim Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hv6m-qj65-26q3</id>
        <link href="https://github.com/advisories/GHSA-hv6m-qj65-26q3"/>
        <updated>2024-11-06T20:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>UnoPim 0.1.3 and below is vulnerable to Cross Site Scripting (XSS) in the Create User function.</p>
<p>The vulnerability allows attackers to perform XSS in SVG file extension, which can be used to stealing cookies.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50637">https://nvd.nist.gov/vuln/detail/CVE-2024-50637</a></li>
<li><a href="https://github.com/unopim/unopim/issues/41">https://github.com/unopim/unopim/issues/41</a></li>
<li><a href="https://github.com/unopim/unopim/releases/tag/v0.1.4">https://github.com/unopim/unopim/releases/tag/v0.1.4</a></li>
<li><a href="https://github.com/yamerooo123/ResearchNBugBountyEncyclopedia/blob/main/Researches/Unopim/Findings.md">https://github.com/yamerooo123/ResearchNBugBountyEncyclopedia/blob/main/Researches/Unopim/Findings.md</a></li>
<li><a href="https://github.com/advisories/GHSA-hv6m-qj65-26q3">https://github.com/advisories/GHSA-hv6m-qj65-26q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hv6m-qj65-26q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-06T18:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony vulnerable to command execution hijack on Windows with Process class]]></title>
        <id>https://github.com/advisories/GHSA-qq5c-677p-737q</id>
        <link href="https://github.com/advisories/GHSA-qq5c-677p-737q"/>
        <updated>2024-11-06T23:39:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>On Window, when an executable file named <code>cmd.exe</code> is located in the current working directory it will be called by the <code>Process</code> class when preparing command arguments, leading to possible hijacking.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Process</code> class now uses the absolute path to <code>cmd.exe</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q">https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q</a></li>
<li><a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-51736">https://symfony.com/cve-2024-51736</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51736">https://nvd.nist.gov/vuln/detail/CVE-2024-51736</a></li>
<li><a href="https://github.com/advisories/GHSA-qq5c-677p-737q">https://github.com/advisories/GHSA-qq5c-677p-737q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq5c-677p-737q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-06T15:22:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony vulnerable to command execution hijack on Windows with Process class]]></title>
        <id>https://github.com/advisories/GHSA-qq5c-677p-737q</id>
        <link href="https://github.com/advisories/GHSA-qq5c-677p-737q"/>
        <updated>2024-11-06T23:39:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>On Window, when an executable file named <code>cmd.exe</code> is located in the current working directory it will be called by the <code>Process</code> class when preparing command arguments, leading to possible hijacking.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Process</code> class now uses the absolute path to <code>cmd.exe</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q">https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q</a></li>
<li><a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-51736">https://symfony.com/cve-2024-51736</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51736">https://nvd.nist.gov/vuln/detail/CVE-2024-51736</a></li>
<li><a href="https://github.com/advisories/GHSA-qq5c-677p-737q">https://github.com/advisories/GHSA-qq5c-677p-737q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq5c-677p-737q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-06T15:22:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony vulnerable to command execution hijack on Windows with Process class]]></title>
        <id>https://github.com/advisories/GHSA-qq5c-677p-737q</id>
        <link href="https://github.com/advisories/GHSA-qq5c-677p-737q"/>
        <updated>2024-11-06T23:39:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>On Window, when an executable file named <code>cmd.exe</code> is located in the current working directory it will be called by the <code>Process</code> class when preparing command arguments, leading to possible hijacking.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Process</code> class now uses the absolute path to <code>cmd.exe</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q">https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q</a></li>
<li><a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-51736">https://symfony.com/cve-2024-51736</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51736">https://nvd.nist.gov/vuln/detail/CVE-2024-51736</a></li>
<li><a href="https://github.com/advisories/GHSA-qq5c-677p-737q">https://github.com/advisories/GHSA-qq5c-677p-737q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq5c-677p-737q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-06T15:22:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/process] Symfony vulnerable to command execution hijack on Windows with Process class]]></title>
        <id>https://github.com/advisories/GHSA-qq5c-677p-737q</id>
        <link href="https://github.com/advisories/GHSA-qq5c-677p-737q"/>
        <updated>2024-11-06T23:39:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>On Window, when an executable file named <code>cmd.exe</code> is located in the current working directory it will be called by the <code>Process</code> class when preparing command arguments, leading to possible hijacking.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Process</code> class now uses the absolute path to <code>cmd.exe</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q">https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q</a></li>
<li><a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-51736">https://symfony.com/cve-2024-51736</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51736">https://nvd.nist.gov/vuln/detail/CVE-2024-51736</a></li>
<li><a href="https://github.com/advisories/GHSA-qq5c-677p-737q">https://github.com/advisories/GHSA-qq5c-677p-737q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq5c-677p-737q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-06T15:22:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/process] Symfony vulnerable to command execution hijack on Windows with Process class]]></title>
        <id>https://github.com/advisories/GHSA-qq5c-677p-737q</id>
        <link href="https://github.com/advisories/GHSA-qq5c-677p-737q"/>
        <updated>2024-11-06T23:39:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>On Window, when an executable file named <code>cmd.exe</code> is located in the current working directory it will be called by the <code>Process</code> class when preparing command arguments, leading to possible hijacking.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Process</code> class now uses the absolute path to <code>cmd.exe</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q">https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q</a></li>
<li><a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-51736">https://symfony.com/cve-2024-51736</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51736">https://nvd.nist.gov/vuln/detail/CVE-2024-51736</a></li>
<li><a href="https://github.com/advisories/GHSA-qq5c-677p-737q">https://github.com/advisories/GHSA-qq5c-677p-737q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq5c-677p-737q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-06T15:22:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/process] Symfony vulnerable to command execution hijack on Windows with Process class]]></title>
        <id>https://github.com/advisories/GHSA-qq5c-677p-737q</id>
        <link href="https://github.com/advisories/GHSA-qq5c-677p-737q"/>
        <updated>2024-11-06T23:39:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>On Window, when an executable file named <code>cmd.exe</code> is located in the current working directory it will be called by the <code>Process</code> class when preparing command arguments, leading to possible hijacking.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Process</code> class now uses the absolute path to <code>cmd.exe</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q">https://github.com/symfony/symfony/security/advisories/GHSA-qq5c-677p-737q</a></li>
<li><a href="https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9">https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/process/CVE-2024-51736.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-51736.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-51736">https://symfony.com/cve-2024-51736</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51736">https://nvd.nist.gov/vuln/detail/CVE-2024-51736</a></li>
<li><a href="https://github.com/advisories/GHSA-qq5c-677p-737q">https://github.com/advisories/GHSA-qq5c-677p-737q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qq5c-677p-737q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-06T15:22:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony vulnerable to open redirect via browser-sanitized URLs]]></title>
        <id>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</id>
        <link href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp"/>
        <updated>2024-11-06T23:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The <code>Request</code> class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the <code>Request</code> class to redirect users to another domain.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Request::create</code> methods now assert the URI does not contain invalid characters as defined by <a href="https://url.spec.whatwg.org/">https://url.spec.whatwg.org/</a></p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Sam Mush for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
<li><a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50345">https://symfony.com/cve-2024-50345</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50345">https://nvd.nist.gov/vuln/detail/CVE-2024-50345</a></li>
<li><a href="https://url.spec.whatwg.org">https://url.spec.whatwg.org</a></li>
<li><a href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony vulnerable to open redirect via browser-sanitized URLs]]></title>
        <id>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</id>
        <link href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp"/>
        <updated>2024-11-06T23:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The <code>Request</code> class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the <code>Request</code> class to redirect users to another domain.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Request::create</code> methods now assert the URI does not contain invalid characters as defined by <a href="https://url.spec.whatwg.org/">https://url.spec.whatwg.org/</a></p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Sam Mush for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
<li><a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50345">https://symfony.com/cve-2024-50345</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50345">https://nvd.nist.gov/vuln/detail/CVE-2024-50345</a></li>
<li><a href="https://url.spec.whatwg.org">https://url.spec.whatwg.org</a></li>
<li><a href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony vulnerable to open redirect via browser-sanitized URLs]]></title>
        <id>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</id>
        <link href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp"/>
        <updated>2024-11-06T23:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The <code>Request</code> class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the <code>Request</code> class to redirect users to another domain.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Request::create</code> methods now assert the URI does not contain invalid characters as defined by <a href="https://url.spec.whatwg.org/">https://url.spec.whatwg.org/</a></p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Sam Mush for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
<li><a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50345">https://symfony.com/cve-2024-50345</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50345">https://nvd.nist.gov/vuln/detail/CVE-2024-50345</a></li>
<li><a href="https://url.spec.whatwg.org">https://url.spec.whatwg.org</a></li>
<li><a href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-foundation] Symfony vulnerable to open redirect via browser-sanitized URLs]]></title>
        <id>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</id>
        <link href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp"/>
        <updated>2024-11-06T23:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The <code>Request</code> class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the <code>Request</code> class to redirect users to another domain.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Request::create</code> methods now assert the URI does not contain invalid characters as defined by <a href="https://url.spec.whatwg.org/">https://url.spec.whatwg.org/</a></p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Sam Mush for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
<li><a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50345">https://symfony.com/cve-2024-50345</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50345">https://nvd.nist.gov/vuln/detail/CVE-2024-50345</a></li>
<li><a href="https://url.spec.whatwg.org">https://url.spec.whatwg.org</a></li>
<li><a href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-foundation] Symfony vulnerable to open redirect via browser-sanitized URLs]]></title>
        <id>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</id>
        <link href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp"/>
        <updated>2024-11-06T23:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The <code>Request</code> class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the <code>Request</code> class to redirect users to another domain.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Request::create</code> methods now assert the URI does not contain invalid characters as defined by <a href="https://url.spec.whatwg.org/">https://url.spec.whatwg.org/</a></p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Sam Mush for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
<li><a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50345">https://symfony.com/cve-2024-50345</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50345">https://nvd.nist.gov/vuln/detail/CVE-2024-50345</a></li>
<li><a href="https://url.spec.whatwg.org">https://url.spec.whatwg.org</a></li>
<li><a href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-foundation] Symfony vulnerable to open redirect via browser-sanitized URLs]]></title>
        <id>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</id>
        <link href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp"/>
        <updated>2024-11-06T23:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>The <code>Request</code> class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the <code>Request</code> class to redirect users to another domain.</p>
<h3 id="resolution">Resolution</h3>
<p>The <code>Request::create</code> methods now assert the URI does not contain invalid characters as defined by <a href="https://url.spec.whatwg.org/">https://url.spec.whatwg.org/</a></p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Sam Mush for reporting the issue and Nicolas Grekas for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/symfony/symfony/security/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
<li><a href="https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819">https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-foundation/CVE-2024-50345.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50345.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50345">https://symfony.com/cve-2024-50345</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50345">https://nvd.nist.gov/vuln/detail/CVE-2024-50345</a></li>
<li><a href="https://url.spec.whatwg.org">https://url.spec.whatwg.org</a></li>
<li><a href="https://github.com/advisories/GHSA-mrqx-rp3w-jpjp">https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrqx-rp3w-jpjp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/validator] Symfony has an incorrect response from Validator when input ends with `\n`]]></title>
        <id>https://github.com/advisories/GHSA-g3rh-rrhp-jhh9</id>
        <link href="https://github.com/advisories/GHSA-g3rh-rrhp-jhh9"/>
        <updated>2024-11-06T23:40:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>It is possible to trick a <code>Validator</code> configured with a regular expression using the <code>$</code> metacharacters, with an input ending with <code>\n</code>.</p>
<h3 id="resolution">Resolution</h3>
<p>Symfony now uses the <code>D</code> regex modifier to match the entire input.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Offscript for reporting the issue and Alexandre Daubois for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-g3rh-rrhp-jhh9">https://github.com/symfony/symfony/security/advisories/GHSA-g3rh-rrhp-jhh9</a></li>
<li><a href="https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f">https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50343.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50343.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2024-50343.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2024-50343.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50343">https://symfony.com/cve-2024-50343</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50343">https://nvd.nist.gov/vuln/detail/CVE-2024-50343</a></li>
<li><a href="https://github.com/advisories/GHSA-g3rh-rrhp-jhh9">https://github.com/advisories/GHSA-g3rh-rrhp-jhh9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g3rh-rrhp-jhh9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:21:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/validator] Symfony has an incorrect response from Validator when input ends with `\n`]]></title>
        <id>https://github.com/advisories/GHSA-g3rh-rrhp-jhh9</id>
        <link href="https://github.com/advisories/GHSA-g3rh-rrhp-jhh9"/>
        <updated>2024-11-06T23:40:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>It is possible to trick a <code>Validator</code> configured with a regular expression using the <code>$</code> metacharacters, with an input ending with <code>\n</code>.</p>
<h3 id="resolution">Resolution</h3>
<p>Symfony now uses the <code>D</code> regex modifier to match the entire input.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f">here</a> for branch 5.4.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Offscript for reporting the issue and Alexandre Daubois for providing the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-g3rh-rrhp-jhh9">https://github.com/symfony/symfony/security/advisories/GHSA-g3rh-rrhp-jhh9</a></li>
<li><a href="https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f">https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50343.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2024-50343.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2024-50343.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2024-50343.yaml</a></li>
<li><a href="https://symfony.com/cve-2024-50343">https://symfony.com/cve-2024-50343</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-50343">https://nvd.nist.gov/vuln/detail/CVE-2024-50343</a></li>
<li><a href="https://github.com/advisories/GHSA-g3rh-rrhp-jhh9">https://github.com/advisories/GHSA-g3rh-rrhp-jhh9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g3rh-rrhp-jhh9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-06T15:21:08.000Z</published>
    </entry>
</feed>