<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2025-04-08T16:01:37.204Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[pimcore/admin-ui-classic-bundle] Pimcore's Admin Classic Bundle allows HTML Injection]]></title>
        <id>https://github.com/advisories/GHSA-x82r-6j37-vrgg</id>
        <link href="https://github.com/advisories/GHSA-x82r-6j37-vrgg"/>
        <updated>2025-04-08T14:51:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An HTML injection issue allows users with access to the email sending functionality to inject arbitrary HTML code into emails sent via the admin interface, potentially leading to session cookie theft and the alteration of page content.</p>
<h3 id="details">Details</h3>
<p>The vulnerability was discovered in the <code>/admin/email/send-test-email</code> endpoint using the <code>POST</code> method. The vulnerable parameter is <code>content</code>, which permits the injection of arbitrary HTML code during the email sending process. While JavaScript code injection is blocked through filtering, HTML code injection remains possible.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, a user must fill out the email's content form with the desired HTML payload.
<img alt="send-test-mail-text" src="https://github.com/user-attachments/assets/0e02b004-ce88-4018-b7cb-ae15a8ec2300"></p>
<h3 id="impact">Impact</h3>
<p><img alt="mail-text" src="https://github.com/user-attachments/assets/67080d10-0cef-4f65-a157-4f012203f0a3"></p>
<p>This HTML injection vulnerability can potentially enable phishing attacks by allowing the insertion of any html like fake login forms, etc.
All functionalities that process user input should be carefully reviewed to ensure that data is appropriately encoded as HTML entities in server responses. For instance, a reflected input paramete like <code>&lt;h1&gt; just a test &lt;/h1&gt; &lt;p&gt; &lt;img&gt;</code> should be displayed in the HTML response as <code>&amp;#x3c;h1&amp;#x3e; just a test &amp;#x3c;/h1&amp;#x3e; &amp;#x3c;p&amp;#x3e; &amp;#x3c;img&amp;#x3e;</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-x82r-6j37-vrgg">https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-x82r-6j37-vrgg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30166">https://nvd.nist.gov/vuln/detail/CVE-2025-30166</a></li>
<li><a href="https://github.com/pimcore/admin-ui-classic-bundle/commit/76b690d4f8fcd9c9d41766bc5238c2513242e60e">https://github.com/pimcore/admin-ui-classic-bundle/commit/76b690d4f8fcd9c9d41766bc5238c2513242e60e</a></li>
<li><a href="https://github.com/advisories/GHSA-x82r-6j37-vrgg">https://github.com/advisories/GHSA-x82r-6j37-vrgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x82r-6j37-vrgg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-04-08T14:51:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware allows Denial Of Service via password length]]></title>
        <id>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</id>
        <link href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2"/>
        <updated>2025-04-08T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible to pass long passwords that leads to Denial Of Service via forms in Storefront forms or Store-API.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/advisories/GHSA-cgfj-hj93-rmh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-08T14:51:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/core] Shopware allows Denial Of Service via password length]]></title>
        <id>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</id>
        <link href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2"/>
        <updated>2025-04-08T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible to pass long passwords that leads to Denial Of Service via forms in Storefront forms or Store-API.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/advisories/GHSA-cgfj-hj93-rmh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-08T14:51:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware allows Denial Of Service via password length]]></title>
        <id>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</id>
        <link href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2"/>
        <updated>2025-04-08T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible to pass long passwords that leads to Denial Of Service via forms in Storefront forms or Store-API.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/advisories/GHSA-cgfj-hj93-rmh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-08T14:51:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/core] Shopware allows Denial Of Service via password length]]></title>
        <id>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</id>
        <link href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2"/>
        <updated>2025-04-08T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible to pass long passwords that leads to Denial Of Service via forms in Storefront forms or Store-API.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/advisories/GHSA-cgfj-hj93-rmh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-08T14:51:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware allows Denial Of Service via password length]]></title>
        <id>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</id>
        <link href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2"/>
        <updated>2025-04-08T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible to pass long passwords that leads to Denial Of Service via forms in Storefront forms or Store-API.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/advisories/GHSA-cgfj-hj93-rmh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-08T14:51:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/core] Shopware allows Denial Of Service via password length]]></title>
        <id>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</id>
        <link href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2"/>
        <updated>2025-04-08T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible to pass long passwords that leads to Denial Of Service via forms in Storefront forms or Store-API.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/shopware/shopware/security/advisories/GHSA-cgfj-hj93-rmh2</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-cgfj-hj93-rmh2">https://github.com/advisories/GHSA-cgfj-hj93-rmh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgfj-hj93-rmh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-08T14:51:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware 6 allows attackers to check for registered accounts through the store-api]]></title>
        <id>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</id>
        <link href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h"/>
        <updated>2025-04-08T14:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Through the store-api it is possible as a attacker to check if a specific e-mail address has an account in the shop.</p>
<p>Using the store-api endpoint <code>/store-api/account/recovery-password</code> you get the response</p>
<pre><code>{"errors":[{"status":"404","code":"CHECKOUT__CUSTOMER_NOT_FOUND","title":"Not Found","detail":"No matching customer for the email \u0022asdasfd@asdads.de\u0022 was found.","meta":{"parameters":{"email":"asdasfd@asdads.de"}}}]}
</code></pre>
<p>which indicates clearly that there is no account for this customer. In contrast you get a success response if the account was found.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/advisories/GHSA-hh7j-6x3q-f52h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-08T14:50:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/core] Shopware 6 allows attackers to check for registered accounts through the store-api]]></title>
        <id>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</id>
        <link href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h"/>
        <updated>2025-04-08T14:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Through the store-api it is possible as a attacker to check if a specific e-mail address has an account in the shop.</p>
<p>Using the store-api endpoint <code>/store-api/account/recovery-password</code> you get the response</p>
<pre><code>{"errors":[{"status":"404","code":"CHECKOUT__CUSTOMER_NOT_FOUND","title":"Not Found","detail":"No matching customer for the email \u0022asdasfd@asdads.de\u0022 was found.","meta":{"parameters":{"email":"asdasfd@asdads.de"}}}]}
</code></pre>
<p>which indicates clearly that there is no account for this customer. In contrast you get a success response if the account was found.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/advisories/GHSA-hh7j-6x3q-f52h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-08T14:50:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware 6 allows attackers to check for registered accounts through the store-api]]></title>
        <id>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</id>
        <link href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h"/>
        <updated>2025-04-08T14:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Through the store-api it is possible as a attacker to check if a specific e-mail address has an account in the shop.</p>
<p>Using the store-api endpoint <code>/store-api/account/recovery-password</code> you get the response</p>
<pre><code>{"errors":[{"status":"404","code":"CHECKOUT__CUSTOMER_NOT_FOUND","title":"Not Found","detail":"No matching customer for the email \u0022asdasfd@asdads.de\u0022 was found.","meta":{"parameters":{"email":"asdasfd@asdads.de"}}}]}
</code></pre>
<p>which indicates clearly that there is no account for this customer. In contrast you get a success response if the account was found.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/advisories/GHSA-hh7j-6x3q-f52h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-08T14:50:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/core] Shopware 6 allows attackers to check for registered accounts through the store-api]]></title>
        <id>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</id>
        <link href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h"/>
        <updated>2025-04-08T14:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Through the store-api it is possible as a attacker to check if a specific e-mail address has an account in the shop.</p>
<p>Using the store-api endpoint <code>/store-api/account/recovery-password</code> you get the response</p>
<pre><code>{"errors":[{"status":"404","code":"CHECKOUT__CUSTOMER_NOT_FOUND","title":"Not Found","detail":"No matching customer for the email \u0022asdasfd@asdads.de\u0022 was found.","meta":{"parameters":{"email":"asdasfd@asdads.de"}}}]}
</code></pre>
<p>which indicates clearly that there is no account for this customer. In contrast you get a success response if the account was found.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/advisories/GHSA-hh7j-6x3q-f52h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-08T14:50:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware 6 allows attackers to check for registered accounts through the store-api]]></title>
        <id>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</id>
        <link href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h"/>
        <updated>2025-04-08T14:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Through the store-api it is possible as a attacker to check if a specific e-mail address has an account in the shop.</p>
<p>Using the store-api endpoint <code>/store-api/account/recovery-password</code> you get the response</p>
<pre><code>{"errors":[{"status":"404","code":"CHECKOUT__CUSTOMER_NOT_FOUND","title":"Not Found","detail":"No matching customer for the email \u0022asdasfd@asdads.de\u0022 was found.","meta":{"parameters":{"email":"asdasfd@asdads.de"}}}]}
</code></pre>
<p>which indicates clearly that there is no account for this customer. In contrast you get a success response if the account was found.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/advisories/GHSA-hh7j-6x3q-f52h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-08T14:50:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/core] Shopware 6 allows attackers to check for registered accounts through the store-api]]></title>
        <id>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</id>
        <link href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h"/>
        <updated>2025-04-08T14:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Through the store-api it is possible as a attacker to check if a specific e-mail address has an account in the shop.</p>
<p>Using the store-api endpoint <code>/store-api/account/recovery-password</code> you get the response</p>
<pre><code>{"errors":[{"status":"404","code":"CHECKOUT__CUSTOMER_NOT_FOUND","title":"Not Found","detail":"No matching customer for the email \u0022asdasfd@asdads.de\u0022 was found.","meta":{"parameters":{"email":"asdasfd@asdads.de"}}}]}
</code></pre>
<p>which indicates clearly that there is no account for this customer. In contrast you get a success response if the account was found.</p>
<h3 id="patches">Patches</h3>
<p>Update to Shopware 6.6.10.3 or 6.5.8.17</p>
<h3 id="workarounds">Workarounds</h3>
<p>For older versions of 6.4, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/shopware/shopware/security/advisories/GHSA-hh7j-6x3q-f52h</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.5.8.17">https://github.com/shopware/shopware/releases/tag/v6.5.8.17</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.6.10.3">https://github.com/shopware/shopware/releases/tag/v6.6.10.3</a></li>
<li><a href="https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2">https://github.com/shopware/shopware/releases/tag/v6.7.0.0-rc2</a></li>
<li><a href="https://github.com/advisories/GHSA-hh7j-6x3q-f52h">https://github.com/advisories/GHSA-hh7j-6x3q-f52h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hh7j-6x3q-f52h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-04-08T14:50:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/core] GraphQL grant on a property might be cached with different objects]]></title>
        <id>https://github.com/advisories/GHSA-428q-q3vv-3fq3</id>
        <link href="https://github.com/advisories/GHSA-428q-q3vv-3fq3"/>
        <updated>2025-04-08T13:15:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="original-message">Original message:</h3>
<p>I found an issue with security grants on on properties in the GraphQL ItemNormalizer:</p>
<p>If you use something like <code>#[ApiProperty(security: 'is_granted("PROPERTY_READ", [object, property])')]</code> on a member of an entity, the grant gets cached and is only evaluated once, even if the <code>object</code> in question is a different one.</p>
<p>There is the <code>ApiPlatform\GraphQl\Serializer\ItemNormalizer::isCacheKeySafe()</code> method that seems to be intended to prevent this: <a href="https://github.com/api-platform/core/blob/88f5ac50d20d6510686a7552310cc567fcca45bf/src/GraphQl/Serializer/ItemNormalizer.php#L160-L164">https://github.com/api-platform/core/blob/88f5ac50d20d6510686a7552310cc567fcca45bf/src/GraphQl/Serializer/ItemNormalizer.php#L160-L164</a><br>and in its usage on line 90 it does indeed not create a cache key, but the <code>parent::normalize()</code> that is called afterwards still creates the cache key and causes the issue.</p>
<h3 id="impact">Impact</h3>
<p>It grants access to properties that it should not.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Override the ItemNormalizer.</p>
<p>Patched at: <a href="https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8">https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-428q-q3vv-3fq3">https://github.com/api-platform/core/security/advisories/GHSA-428q-q3vv-3fq3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31485">https://nvd.nist.gov/vuln/detail/CVE-2025-31485</a></li>
<li><a href="https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8">https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8</a></li>
<li><a href="https://github.com/api-platform/core/commit/cba3acfbd517763cf320167250c5bed6d569696a">https://github.com/api-platform/core/commit/cba3acfbd517763cf320167250c5bed6d569696a</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-428q-q3vv-3fq3">https://github.com/advisories/GHSA-428q-q3vv-3fq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-428q-q3vv-3fq3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:19:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/graphql] GraphQL grant on a property might be cached with different objects]]></title>
        <id>https://github.com/advisories/GHSA-428q-q3vv-3fq3</id>
        <link href="https://github.com/advisories/GHSA-428q-q3vv-3fq3"/>
        <updated>2025-04-08T13:15:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="original-message">Original message:</h3>
<p>I found an issue with security grants on on properties in the GraphQL ItemNormalizer:</p>
<p>If you use something like <code>#[ApiProperty(security: 'is_granted("PROPERTY_READ", [object, property])')]</code> on a member of an entity, the grant gets cached and is only evaluated once, even if the <code>object</code> in question is a different one.</p>
<p>There is the <code>ApiPlatform\GraphQl\Serializer\ItemNormalizer::isCacheKeySafe()</code> method that seems to be intended to prevent this: <a href="https://github.com/api-platform/core/blob/88f5ac50d20d6510686a7552310cc567fcca45bf/src/GraphQl/Serializer/ItemNormalizer.php#L160-L164">https://github.com/api-platform/core/blob/88f5ac50d20d6510686a7552310cc567fcca45bf/src/GraphQl/Serializer/ItemNormalizer.php#L160-L164</a><br>and in its usage on line 90 it does indeed not create a cache key, but the <code>parent::normalize()</code> that is called afterwards still creates the cache key and causes the issue.</p>
<h3 id="impact">Impact</h3>
<p>It grants access to properties that it should not.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Override the ItemNormalizer.</p>
<p>Patched at: <a href="https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8">https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-428q-q3vv-3fq3">https://github.com/api-platform/core/security/advisories/GHSA-428q-q3vv-3fq3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31485">https://nvd.nist.gov/vuln/detail/CVE-2025-31485</a></li>
<li><a href="https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8">https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8</a></li>
<li><a href="https://github.com/api-platform/core/commit/cba3acfbd517763cf320167250c5bed6d569696a">https://github.com/api-platform/core/commit/cba3acfbd517763cf320167250c5bed6d569696a</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-428q-q3vv-3fq3">https://github.com/advisories/GHSA-428q-q3vv-3fq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-428q-q3vv-3fq3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:19:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/core] GraphQL query operations security can be bypassed]]></title>
        <id>https://github.com/advisories/GHSA-cg3c-245w-728m</id>
        <link href="https://github.com/advisories/GHSA-cg3c-245w-728m"/>
        <updated>2025-04-08T13:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the Relay special <code>node</code> type you can bypass the configured security on an operation.</p>
<h3 id="details">Details</h3>
<p>Here is an example of how to apply security configurations for the GraphQL operations:</p>
<pre><code class="language-php">#[ApiResource(
    security: "is_granted('ROLE_USER')",
    operations: [ /* ... */ ],
    graphQlOperations: [
        new Query(security: "is_granted('ROLE_USER')"),
        //...
    ],
)]
class Book { /* ... */ }
</code></pre>
<p>This indeed checks <code>is_granted('ROLE_USER')</code> as expected for a GraphQL query like the following:</p>
<pre><code class="language-php">‌query {
    book(id: "/books/1") {
        title
    }
}
</code></pre>
<p>But the security check can be bypassed by using the <code>node</code> field (that is available by default) on the root query type like that:</p>
<pre><code class="language-php">‌query {
    node(id: "/books/1") {
        ... on Book {
            title
        }
    }
}
</code></pre>
<p>This does not execute any security checks and can therefore be used to access any entity without restrictions by everyone that has access to the API.</p>
<h3 id="impact">Impact</h3>
<p>Everyone using GraphQl with the <code>security</code> attribute. Not sure whereas this works with custom resolvers nor if this also applies on mutation.</p>
<p>Patched at <a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m">https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31481">https://nvd.nist.gov/vuln/detail/CVE-2025-31481</a></li>
<li><a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></li>
<li><a href="https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb">https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-cg3c-245w-728m">https://github.com/advisories/GHSA-cg3c-245w-728m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cg3c-245w-728m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:07:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/graphql] GraphQL query operations security can be bypassed]]></title>
        <id>https://github.com/advisories/GHSA-cg3c-245w-728m</id>
        <link href="https://github.com/advisories/GHSA-cg3c-245w-728m"/>
        <updated>2025-04-08T13:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the Relay special <code>node</code> type you can bypass the configured security on an operation.</p>
<h3 id="details">Details</h3>
<p>Here is an example of how to apply security configurations for the GraphQL operations:</p>
<pre><code class="language-php">#[ApiResource(
    security: "is_granted('ROLE_USER')",
    operations: [ /* ... */ ],
    graphQlOperations: [
        new Query(security: "is_granted('ROLE_USER')"),
        //...
    ],
)]
class Book { /* ... */ }
</code></pre>
<p>This indeed checks <code>is_granted('ROLE_USER')</code> as expected for a GraphQL query like the following:</p>
<pre><code class="language-php">‌query {
    book(id: "/books/1") {
        title
    }
}
</code></pre>
<p>But the security check can be bypassed by using the <code>node</code> field (that is available by default) on the root query type like that:</p>
<pre><code class="language-php">‌query {
    node(id: "/books/1") {
        ... on Book {
            title
        }
    }
}
</code></pre>
<p>This does not execute any security checks and can therefore be used to access any entity without restrictions by everyone that has access to the API.</p>
<h3 id="impact">Impact</h3>
<p>Everyone using GraphQl with the <code>security</code> attribute. Not sure whereas this works with custom resolvers nor if this also applies on mutation.</p>
<p>Patched at <a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m">https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31481">https://nvd.nist.gov/vuln/detail/CVE-2025-31481</a></li>
<li><a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></li>
<li><a href="https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb">https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-cg3c-245w-728m">https://github.com/advisories/GHSA-cg3c-245w-728m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cg3c-245w-728m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:07:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/core] GraphQL query operations security can be bypassed]]></title>
        <id>https://github.com/advisories/GHSA-cg3c-245w-728m</id>
        <link href="https://github.com/advisories/GHSA-cg3c-245w-728m"/>
        <updated>2025-04-08T13:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the Relay special <code>node</code> type you can bypass the configured security on an operation.</p>
<h3 id="details">Details</h3>
<p>Here is an example of how to apply security configurations for the GraphQL operations:</p>
<pre><code class="language-php">#[ApiResource(
    security: "is_granted('ROLE_USER')",
    operations: [ /* ... */ ],
    graphQlOperations: [
        new Query(security: "is_granted('ROLE_USER')"),
        //...
    ],
)]
class Book { /* ... */ }
</code></pre>
<p>This indeed checks <code>is_granted('ROLE_USER')</code> as expected for a GraphQL query like the following:</p>
<pre><code class="language-php">‌query {
    book(id: "/books/1") {
        title
    }
}
</code></pre>
<p>But the security check can be bypassed by using the <code>node</code> field (that is available by default) on the root query type like that:</p>
<pre><code class="language-php">‌query {
    node(id: "/books/1") {
        ... on Book {
            title
        }
    }
}
</code></pre>
<p>This does not execute any security checks and can therefore be used to access any entity without restrictions by everyone that has access to the API.</p>
<h3 id="impact">Impact</h3>
<p>Everyone using GraphQl with the <code>security</code> attribute. Not sure whereas this works with custom resolvers nor if this also applies on mutation.</p>
<p>Patched at <a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m">https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31481">https://nvd.nist.gov/vuln/detail/CVE-2025-31481</a></li>
<li><a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></li>
<li><a href="https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb">https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-cg3c-245w-728m">https://github.com/advisories/GHSA-cg3c-245w-728m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cg3c-245w-728m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:07:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/graphql] GraphQL query operations security can be bypassed]]></title>
        <id>https://github.com/advisories/GHSA-cg3c-245w-728m</id>
        <link href="https://github.com/advisories/GHSA-cg3c-245w-728m"/>
        <updated>2025-04-08T13:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the Relay special <code>node</code> type you can bypass the configured security on an operation.</p>
<h3 id="details">Details</h3>
<p>Here is an example of how to apply security configurations for the GraphQL operations:</p>
<pre><code class="language-php">#[ApiResource(
    security: "is_granted('ROLE_USER')",
    operations: [ /* ... */ ],
    graphQlOperations: [
        new Query(security: "is_granted('ROLE_USER')"),
        //...
    ],
)]
class Book { /* ... */ }
</code></pre>
<p>This indeed checks <code>is_granted('ROLE_USER')</code> as expected for a GraphQL query like the following:</p>
<pre><code class="language-php">‌query {
    book(id: "/books/1") {
        title
    }
}
</code></pre>
<p>But the security check can be bypassed by using the <code>node</code> field (that is available by default) on the root query type like that:</p>
<pre><code class="language-php">‌query {
    node(id: "/books/1") {
        ... on Book {
            title
        }
    }
}
</code></pre>
<p>This does not execute any security checks and can therefore be used to access any entity without restrictions by everyone that has access to the API.</p>
<h3 id="impact">Impact</h3>
<p>Everyone using GraphQl with the <code>security</code> attribute. Not sure whereas this works with custom resolvers nor if this also applies on mutation.</p>
<p>Patched at <a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m">https://github.com/api-platform/core/security/advisories/GHSA-cg3c-245w-728m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31481">https://nvd.nist.gov/vuln/detail/CVE-2025-31481</a></li>
<li><a href="https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568">https://github.com/api-platform/core/commit/60747cc8c2fb855798c923b5537888f8d0969568</a></li>
<li><a href="https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb">https://github.com/api-platform/core/commit/55712452b4f630978537bdb2a07dc958202336bb</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-cg3c-245w-728m">https://github.com/advisories/GHSA-cg3c-245w-728m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cg3c-245w-728m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:07:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[api-platform/core] GraphQL grant on a property might be cached with different objects]]></title>
        <id>https://github.com/advisories/GHSA-428q-q3vv-3fq3</id>
        <link href="https://github.com/advisories/GHSA-428q-q3vv-3fq3"/>
        <updated>2025-04-08T13:15:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="original-message">Original message:</h3>
<p>I found an issue with security grants on on properties in the GraphQL ItemNormalizer:</p>
<p>If you use something like <code>#[ApiProperty(security: 'is_granted("PROPERTY_READ", [object, property])')]</code> on a member of an entity, the grant gets cached and is only evaluated once, even if the <code>object</code> in question is a different one.</p>
<p>There is the <code>ApiPlatform\GraphQl\Serializer\ItemNormalizer::isCacheKeySafe()</code> method that seems to be intended to prevent this: <a href="https://github.com/api-platform/core/blob/88f5ac50d20d6510686a7552310cc567fcca45bf/src/GraphQl/Serializer/ItemNormalizer.php#L160-L164">https://github.com/api-platform/core/blob/88f5ac50d20d6510686a7552310cc567fcca45bf/src/GraphQl/Serializer/ItemNormalizer.php#L160-L164</a><br>and in its usage on line 90 it does indeed not create a cache key, but the <code>parent::normalize()</code> that is called afterwards still creates the cache key and causes the issue.</p>
<h3 id="impact">Impact</h3>
<p>It grants access to properties that it should not.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Override the ItemNormalizer.</p>
<p>Patched at: <a href="https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8">https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/api-platform/core/security/advisories/GHSA-428q-q3vv-3fq3">https://github.com/api-platform/core/security/advisories/GHSA-428q-q3vv-3fq3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-31485">https://nvd.nist.gov/vuln/detail/CVE-2025-31485</a></li>
<li><a href="https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8">https://github.com/api-platform/core/commit/7af65aad13037d7649348ee3dcd88e084ef771f8</a></li>
<li><a href="https://github.com/api-platform/core/commit/cba3acfbd517763cf320167250c5bed6d569696a">https://github.com/api-platform/core/commit/cba3acfbd517763cf320167250c5bed6d569696a</a></li>
<li><a href="https://github.com/api-platform/core/releases/tag/v3.4.17">https://github.com/api-platform/core/releases/tag/v3.4.17</a></li>
<li><a href="https://github.com/advisories/GHSA-428q-q3vv-3fq3">https://github.com/advisories/GHSA-428q-q3vv-3fq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-428q-q3vv-3fq3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-04-04T14:19:42.000Z</published>
    </entry>
</feed>