<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2025-03-19T06:01:29.369Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-vmgw-24w6-9v82</id>
        <link href="https://github.com/advisories/GHSA-vmgw-24w6-9v82"/>
        <updated>2025-03-19T02:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2025-003">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>
<li><a href="https://github.com/advisories/GHSA-vmgw-24w6-9v82">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmgw-24w6-9v82</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T02:15:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-vmgw-24w6-9v82</id>
        <link href="https://github.com/advisories/GHSA-vmgw-24w6-9v82"/>
        <updated>2025-03-19T02:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2025-003">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>
<li><a href="https://github.com/advisories/GHSA-vmgw-24w6-9v82">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmgw-24w6-9v82</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T02:15:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-vmgw-24w6-9v82</id>
        <link href="https://github.com/advisories/GHSA-vmgw-24w6-9v82"/>
        <updated>2025-03-19T02:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2025-003">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>
<li><a href="https://github.com/advisories/GHSA-vmgw-24w6-9v82">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmgw-24w6-9v82</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T02:15:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[clickstorm/cs-seo] Clickstorm SEO Allows Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-vmgw-24w6-9v82</id>
        <link href="https://github.com/advisories/GHSA-vmgw-24w6-9v82"/>
        <updated>2025-03-19T02:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been discovered in the Clickstorm SEO extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 6.7.0, 7.4.0, 8.3.0 and 9.2.0 are available for download.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f">https://github.com/clickstorm/cs_seo/commit/46e15a22d52da227b110bf6e95c2bcbb2fe4f55f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/clickstorm/cs-seo/CVE-2025-30081.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2025-003">https://typo3.org/security/advisory/typo3-ext-sa-2025-003</a></li>
<li><a href="https://github.com/advisories/GHSA-vmgw-24w6-9v82">https://github.com/advisories/GHSA-vmgw-24w6-9v82</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmgw-24w6-9v82</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T02:15:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[codingms/additional-tca] Additional TCA Allows Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-rrh3-cgmx-w62f</id>
        <link href="https://github.com/advisories/GHSA-rrh3-cgmx-w62f"/>
        <updated>2025-03-19T01:37:07.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been discovered in the Additional TCA extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 1.15.17 and 1.16.9 are available for download.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml</a></li>
<li><a href="https://gitlab.com/codingms/typo3-public/additional_tca">https://gitlab.com/codingms/typo3-public/additional_tca</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2025-002">https://typo3.org/security/advisory/typo3-ext-sa-2025-002</a></li>
<li><a href="https://github.com/advisories/GHSA-rrh3-cgmx-w62f">https://github.com/advisories/GHSA-rrh3-cgmx-w62f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrh3-cgmx-w62f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T01:37:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[codingms/additional-tca] Additional TCA Allows Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-rrh3-cgmx-w62f</id>
        <link href="https://github.com/advisories/GHSA-rrh3-cgmx-w62f"/>
        <updated>2025-03-19T01:37:07.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been discovered in the Additional TCA extension. This vulnerabily is exploitable by a logged in backend user utilizing the TYPO3 backend user interface. This user can create output in the HTML context by exploiting improperly encoded user input. Updates 1.15.17 and 1.16.9 are available for download.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/codingms/additional-tca/CVE-2025-30083.yaml</a></li>
<li><a href="https://gitlab.com/codingms/typo3-public/additional_tca">https://gitlab.com/codingms/typo3-public/additional_tca</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2025-002">https://typo3.org/security/advisory/typo3-ext-sa-2025-002</a></li>
<li><a href="https://github.com/advisories/GHSA-rrh3-cgmx-w62f">https://github.com/advisories/GHSA-rrh3-cgmx-w62f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrh3-cgmx-w62f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-19T01:37:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[contao/core-bundle] Contao Vulnerable to Cross-Site Scripting (XSS) through SVG uploads]]></title>
        <id>https://github.com/advisories/GHSA-vqqr-fgmh-f626</id>
        <link href="https://github.com/advisories/GHSA-vqqr-fgmh-f626"/>
        <updated>2025-03-18T21:07:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users can upload SVG files with malicious code, which is then executed in the back end and/or front end.</p>
<h3 id="patches">Patches</h3>
<p>Update to Contao 4.13.54, 5.3.30 or 5.5.6.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Remove <code>svg,svgz</code> from the allowed upload file types in the system settings and from <code>contao.editable_files</code> in the <code>config.yaml</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/contao/contao/issues/new/choose">contao/contao</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626">https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626</a></li>
<li><a href="https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></li>
<li><a href="https://github.com/advisories/GHSA-vqqr-fgmh-f626">https://github.com/advisories/GHSA-vqqr-fgmh-f626</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqqr-fgmh-f626</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-18T21:07:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[contao/core-bundle] Contao Vulnerable to Cross-Site Scripting (XSS) through SVG uploads]]></title>
        <id>https://github.com/advisories/GHSA-vqqr-fgmh-f626</id>
        <link href="https://github.com/advisories/GHSA-vqqr-fgmh-f626"/>
        <updated>2025-03-18T21:07:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users can upload SVG files with malicious code, which is then executed in the back end and/or front end.</p>
<h3 id="patches">Patches</h3>
<p>Update to Contao 4.13.54, 5.3.30 or 5.5.6.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Remove <code>svg,svgz</code> from the allowed upload file types in the system settings and from <code>contao.editable_files</code> in the <code>config.yaml</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/contao/contao/issues/new/choose">contao/contao</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626">https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626</a></li>
<li><a href="https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></li>
<li><a href="https://github.com/advisories/GHSA-vqqr-fgmh-f626">https://github.com/advisories/GHSA-vqqr-fgmh-f626</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqqr-fgmh-f626</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-18T21:07:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[contao/core-bundle] Contao Vulnerable to Cross-Site Scripting (XSS) through SVG uploads]]></title>
        <id>https://github.com/advisories/GHSA-vqqr-fgmh-f626</id>
        <link href="https://github.com/advisories/GHSA-vqqr-fgmh-f626"/>
        <updated>2025-03-18T21:07:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users can upload SVG files with malicious code, which is then executed in the back end and/or front end.</p>
<h3 id="patches">Patches</h3>
<p>Update to Contao 4.13.54, 5.3.30 or 5.5.6.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Remove <code>svg,svgz</code> from the allowed upload file types in the system settings and from <code>contao.editable_files</code> in the <code>config.yaml</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/contao/contao/issues/new/choose">contao/contao</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626">https://github.com/contao/contao/security/advisories/GHSA-vqqr-fgmh-f626</a></li>
<li><a href="https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads">https://contao.org/en/security-advisories/cross-site-scripting-through-svg-uploads</a></li>
<li><a href="https://github.com/advisories/GHSA-vqqr-fgmh-f626">https://github.com/advisories/GHSA-vqqr-fgmh-f626</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqqr-fgmh-f626</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-18T21:07:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/paypal-plugin] Sylius PayPal Plugin Payment Amount Manipulation Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pqq3-q84h-pj6x</id>
        <link href="https://github.com/advisories/GHSA-pqq3-q84h-pj6x"/>
        <updated>2025-03-17T21:26:51.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability allows users to manipulate the final payment amount processed by PayPal. If a user modifies the item quantity in their shopping cart after initiating the PayPal Checkout process, PayPal will not receive the updated total amount. As a result, PayPal captures only the initially transmitted amount, while Sylius incorrectly considers the order fully paid based on the modified total. This flaw can be exploited both accidentally and intentionally, potentially enabling fraud by allowing customers to pay less than the actual order value.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>Attackers can intentionally pay less than the actual total order amount.</li>
<li>Business owners may suffer financial losses due to underpaid orders.</li>
<li>Integrity of payment processing is compromised.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.6.1, 1.7.1, 2.0.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>ProcessPayPalOrderAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Controller;

use Doctrine\Persistence\ObjectManager;
use SM\Factory\FactoryInterface as StateMachineFactoryInterface;
use Sylius\Abstraction\StateMachine\StateMachineInterface;
use Sylius\Abstraction\StateMachine\WinzouStateMachineAdapter;
use Sylius\Component\Core\Factory\AddressFactoryInterface;
use Sylius\Component\Core\Model\CustomerInterface;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\Model\PaymentMethodInterface;
use Sylius\Component\Core\OrderCheckoutTransitions;
use Sylius\Component\Core\Repository\CustomerRepositoryInterface;
use Sylius\Component\Resource\Factory\FactoryInterface;
use Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface;
use Sylius\PayPalPlugin\Api\OrderDetailsApiInterface;
use Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface;
use Sylius\PayPalPlugin\Provider\OrderProviderInterface;
use Sylius\PayPalPlugin\Verifier\PaymentAmountVerifierInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

final class ProcessPayPalOrderAction
{
    public function __construct(
        private readonly CustomerRepositoryInterface $customerRepository,
        private readonly FactoryInterface $customerFactory,
        private readonly AddressFactoryInterface $addressFactory,
        private readonly ObjectManager $orderManager,
        private readonly StateMachineFactoryInterface|StateMachineInterface $stateMachineFactory,
        private readonly PaymentStateManagerInterface $paymentStateManager,
        private readonly CacheAuthorizeClientApiInterface $authorizeClientApi,
        private readonly OrderDetailsApiInterface $orderDetailsApi,
        private readonly OrderProviderInterface $orderProvider,
    ) {
    }

    public function __invoke(Request $request): Response
    {
        $orderId = $request-&gt;request-&gt;getInt('orderId');
        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);
        /** @var PaymentInterface $payment */
        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_CART);

        $data = $this-&gt;getOrderDetails((string) $request-&gt;request-&gt;get('payPalOrderId'), $payment);

        /** @var CustomerInterface|null $customer */
        $customer = $order-&gt;getCustomer();
        if ($customer === null) {
            $customer = $this-&gt;getOrderCustomer($data['payer']);
            $order-&gt;setCustomer($customer);
        }

        $purchaseUnit = (array) $data['purchase_units'][0];

        $address = $this-&gt;addressFactory-&gt;createNew();

        if ($order-&gt;isShippingRequired()) {
            $name = explode(' ', $purchaseUnit['shipping']['name']['full_name']);
            $address-&gt;setLastName(array_pop($name) ?? '');
            $address-&gt;setFirstName(implode(' ', $name));
            $address-&gt;setStreet($purchaseUnit['shipping']['address']['address_line_1']);
            $address-&gt;setCity($purchaseUnit['shipping']['address']['admin_area_2']);
            $address-&gt;setPostcode($purchaseUnit['shipping']['address']['postal_code']);
            $address-&gt;setCountryCode($purchaseUnit['shipping']['address']['country_code']);

            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);
            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_SHIPPING);
        } else {
            $address-&gt;setFirstName($customer-&gt;getFirstName());
            $address-&gt;setLastName($customer-&gt;getLastName());

            $defaultAddress = $customer-&gt;getDefaultAddress();

            $address-&gt;setStreet($defaultAddress ? $defaultAddress-&gt;getStreet() : '');
            $address-&gt;setCity($defaultAddress ? $defaultAddress-&gt;getCity() : '');
            $address-&gt;setPostcode($defaultAddress ? $defaultAddress-&gt;getPostcode() : '');
            $address-&gt;setCountryCode($data['payer']['address']['country_code']);

            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);
        }

        $order-&gt;setShippingAddress(clone $address);
        $order-&gt;setBillingAddress(clone $address);

        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);

        $this-&gt;orderManager-&gt;flush();

        try {
            $this-&gt;verify($payment, $data);
        } catch (\Exception) {
            $this-&gt;paymentStateManager-&gt;cancel($payment);

            return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);
        }

        $this-&gt;paymentStateManager-&gt;create($payment);
        $this-&gt;paymentStateManager-&gt;process($payment);

        return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);
    }

    private function getOrderCustomer(array $customerData): CustomerInterface
    {
        /** @var CustomerInterface|null $existingCustomer */
        $existingCustomer = $this-&gt;customerRepository-&gt;findOneBy(['email' =&gt; $customerData['email_address']]);
        if ($existingCustomer !== null) {
            return $existingCustomer;
        }

        /** @var CustomerInterface $customer */
        $customer = $this-&gt;customerFactory-&gt;createNew();
        $customer-&gt;setEmail($customerData['email_address']);
        $customer-&gt;setFirstName($customerData['name']['given_name']);
        $customer-&gt;setLastName($customerData['name']['surname']);

        return $customer;
    }

    private function getOrderDetails(string $id, PaymentInterface $payment): array
    {
        /** @var PaymentMethodInterface $paymentMethod */
        $paymentMethod = $payment-&gt;getMethod();
        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);

        return $this-&gt;orderDetailsApi-&gt;get($token, $id);
    }

    private function getStateMachine(): StateMachineInterface
    {
        if ($this-&gt;stateMachineFactory instanceof StateMachineFactoryInterface) {
            return new WinzouStateMachineAdapter($this-&gt;stateMachineFactory);
        }

        return $this-&gt;stateMachineFactory;
    }

    private function verify(PaymentInterface $payment, array $paypalOrderDetails): void
    {
        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($paypalOrderDetails);

        if ($payment-&gt;getAmount() !== $totalAmount) {
            throw new \Exception();
        }
    }

    private function getTotalPaymentAmountFromPaypal(array $paypalOrderDetails): int
    {
        if (!isset($paypalOrderDetails['purchase_units']) || !is_array($paypalOrderDetails['purchase_units'])) {
            return 0;
        }

        $totalAmount = 0;

        foreach ($paypalOrderDetails['purchase_units'] as $unit) {
            $stringAmount = $unit['amount']['value'] ?? '0';

            $totalAmount += (int) ($stringAmount * 100);
        }

        return $totalAmount;
    }
}
</code></pre>
<p>Also there is a need to overwrite <code>CompletePayPalOrderFromPaymentPageAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Controller;

use Doctrine\Persistence\ObjectManager;
use SM\Factory\FactoryInterface;
use Sylius\Abstraction\StateMachine\StateMachineInterface;
use Sylius\Abstraction\StateMachine\WinzouStateMachineAdapter;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\OrderCheckoutTransitions;
use Sylius\Component\Order\Processor\OrderProcessorInterface;
use Sylius\PayPalPlugin\Exception\PaymentAmountMismatchException;
use Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface;
use Sylius\PayPalPlugin\Provider\OrderProviderInterface;
use Sylius\PayPalPlugin\Verifier\PaymentAmountVerifierInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

final class CompletePayPalOrderFromPaymentPageAction
{
    public function __construct(
        private readonly PaymentStateManagerInterface $paymentStateManager,
        private readonly UrlGeneratorInterface $router,
        private readonly OrderProviderInterface $orderProvider,
        private readonly FactoryInterface|StateMachineInterface $stateMachine,
        private readonly ObjectManager $orderManager,
        private readonly OrderProcessorInterface $orderProcessor,
    ) {
    }

    public function __invoke(Request $request): Response
    {
        $orderId = $request-&gt;attributes-&gt;getInt('id');

        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);
        /** @var PaymentInterface $payment */
        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);

        try {
            $this-&gt;verify($payment);
        } catch (\Exception) {
            $this-&gt;paymentStateManager-&gt;cancel($payment);
            $order-&gt;removePayment($payment);

            $this-&gt;orderProcessor-&gt;process($order);

            return new JsonResponse([
                'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_checkout_complete', [], UrlGeneratorInterface::ABSOLUTE_URL),
            ]);
        }

        $this-&gt;paymentStateManager-&gt;complete($payment);

        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);
        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_COMPLETE);

        $this-&gt;orderManager-&gt;flush();

        $request-&gt;getSession()-&gt;set('sylius_order_id', $order-&gt;getId());

        return new JsonResponse([
            'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_order_thank_you', [], UrlGeneratorInterface::ABSOLUTE_URL),
        ]);
    }

    private function getStateMachine(): StateMachineInterface
    {
        if ($this-&gt;stateMachine instanceof FactoryInterface) {
            return new WinzouStateMachineAdapter($this-&gt;stateMachine);
        }

        return $this-&gt;stateMachine;
    }

    private function verify(PaymentInterface $payment): void
    {
        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);

        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {
            throw new \Exception();
        }
    }

    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int
    {
        $details = $payment-&gt;getDetails();

        return $details['payment_amount'] ?? 0;
    }
}
</code></pre>
<p>And to overwrite <code>CaptureAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Payum\Action;

use Payum\Core\Action\ActionInterface;
use Payum\Core\Exception\RequestNotSupportedException;
use Payum\Core\Request\Capture;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\Model\PaymentMethodInterface;
use Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface;
use Sylius\PayPalPlugin\Api\CreateOrderApiInterface;
use Sylius\PayPalPlugin\Payum\Action\StatusAction;
use Sylius\PayPalPlugin\Provider\UuidProviderInterface;

final class CaptureAction implements ActionInterface
{
    public function __construct(
        private CacheAuthorizeClientApiInterface $authorizeClientApi,
        private CreateOrderApiInterface $createOrderApi,
        private UuidProviderInterface $uuidProvider,
    ) {
    }

    /** @param Capture $request */
    public function execute($request): void
    {
        RequestNotSupportedException::assertSupports($this, $request);

        /** @var PaymentInterface $payment */
        $payment = $request-&gt;getModel();
        /** @var PaymentMethodInterface $paymentMethod */
        $paymentMethod = $payment-&gt;getMethod();

        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);

        $referenceId = $this-&gt;uuidProvider-&gt;provide();
        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);

        if ($content['status'] === 'CREATED') {
            $payment-&gt;setDetails([
                'status' =&gt; StatusAction::STATUS_CAPTURED,
                'paypal_order_id' =&gt; $content['id'],
                'reference_id' =&gt; $referenceId,
                'payment_amount' =&gt; $payment-&gt;getAmount(),
            ]);
        }
    }

    public function supports($request): bool
    {
        return
            $request instanceof Capture &amp;&amp;
            $request-&gt;getModel() instanceof PaymentInterface
        ;
    }
}
</code></pre>
<p>After that, register services in the container when using PayPal 1.x:</p>
<pre><code class="language-yaml">services:
    App\Controller\ProcessPayPalOrderAction:
        class: App\Controller\ProcessPayPalOrderAction
        public: true
        arguments:
            - '@sylius.repository.customer'
            - '@sylius.factory.customer'
            - '@sylius.factory.address'
            - '@sylius.manager.order'
            - '@sylius_abstraction.state_machine'
            - '@Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface'
            - '@Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface'
            - '@Sylius\PayPalPlugin\Api\OrderDetailsApiInterface'
            - '@Sylius\PayPalPlugin\Provider\OrderProviderInterface'

    Sylius\PayPalPlugin\Controller\ProcessPayPalOrderAction:
        alias: App\Controller\ProcessPayPalOrderAction

    App\Controller\CompletePayPalOrderFromPaymentPageAction:
        class: App\Controller\CompletePayPalOrderFromPaymentPageAction
        public: true
        arguments:
            - '@Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface'
            - '@router'
            - '@Sylius\PayPalPlugin\Provider\OrderProviderInterface'
            - '@sylius_abstraction.state_machine'
            - '@sylius.manager.order'
            - '@sylius.order_processing.order_processor'

    Sylius\PayPalPlugin\Controller\CompletePayPalOrderFromPaymentPageAction:
        alias: App\Controller\CompletePayPalOrderFromPaymentPageAction

    Sylius\PayPalPlugin\Payum\Action\CaptureAction:
        class: App\Payum\Action\CaptureAction
        public: true
        arguments:
            - '@Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface'
            - '@Sylius\PayPalPlugin\Api\CreateOrderApiInterface'
            - '@Sylius\PayPalPlugin\Provider\UuidProviderInterface'
        tags:
            - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }
</code></pre>
<p>or when using PayPal 2.x:</p>
<pre><code class="language-yaml">services:
    App\Controller\ProcessPayPalOrderAction:
        class: App\Controller\ProcessPayPalOrderAction
        public: true
        arguments:
            - '@sylius.repository.customer'
            - '@sylius.factory.customer'
            - '@sylius.factory.address'
            - '@sylius.manager.order'
            - '@sylius_abstraction.state_machine'
            - '@sylius_paypal.manager.payment_state'
            - '@sylius_paypal.api.cache_authorize_client'
            - '@sylius_paypal.api.order_details'
            - '@sylius_paypal.provider.order'

    sylius_paypal.controller.process_paypal_order:
        alias: App\Controller\ProcessPayPalOrderAction

    App\Controller\CompletePayPalOrderFromPaymentPageAction:
        class: App\Controller\CompletePayPalOrderFromPaymentPageAction
        public: true
        arguments:
            - '@sylius_paypal.manager.payment_state'
            - '@router'
            - '@sylius_paypal.provider.order'
            - '@sylius_abstraction.state_machine'
            - '@sylius.manager.order'
            - '@sylius.order_processing.order_processor'

    sylius_paypal.controller.complete_paypal_order_from_payment_page:
        alias: App\Controller\CompletePayPalOrderFromPaymentPageAction

    sylius_paypal.payum.action.capture:
        class: App\Payum\Action\CaptureAction
        public: true
        arguments:
            - '@sylius_paypal.api.cache_authorize_client'
            - '@sylius_paypal.api.create_order'
            - '@sylius_paypal.provider.uuid'
        tags:
            - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29788">https://nvd.nist.gov/vuln/detail/CVE-2025-29788</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406">https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d">https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pqq3-q84h-pj6x">https://github.com/advisories/GHSA-pqq3-q84h-pj6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqq3-q84h-pj6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:26:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/paypal-plugin] Sylius PayPal Plugin Payment Amount Manipulation Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pqq3-q84h-pj6x</id>
        <link href="https://github.com/advisories/GHSA-pqq3-q84h-pj6x"/>
        <updated>2025-03-17T21:26:51.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability allows users to manipulate the final payment amount processed by PayPal. If a user modifies the item quantity in their shopping cart after initiating the PayPal Checkout process, PayPal will not receive the updated total amount. As a result, PayPal captures only the initially transmitted amount, while Sylius incorrectly considers the order fully paid based on the modified total. This flaw can be exploited both accidentally and intentionally, potentially enabling fraud by allowing customers to pay less than the actual order value.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>Attackers can intentionally pay less than the actual total order amount.</li>
<li>Business owners may suffer financial losses due to underpaid orders.</li>
<li>Integrity of payment processing is compromised.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.6.1, 1.7.1, 2.0.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>ProcessPayPalOrderAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Controller;

use Doctrine\Persistence\ObjectManager;
use SM\Factory\FactoryInterface as StateMachineFactoryInterface;
use Sylius\Abstraction\StateMachine\StateMachineInterface;
use Sylius\Abstraction\StateMachine\WinzouStateMachineAdapter;
use Sylius\Component\Core\Factory\AddressFactoryInterface;
use Sylius\Component\Core\Model\CustomerInterface;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\Model\PaymentMethodInterface;
use Sylius\Component\Core\OrderCheckoutTransitions;
use Sylius\Component\Core\Repository\CustomerRepositoryInterface;
use Sylius\Component\Resource\Factory\FactoryInterface;
use Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface;
use Sylius\PayPalPlugin\Api\OrderDetailsApiInterface;
use Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface;
use Sylius\PayPalPlugin\Provider\OrderProviderInterface;
use Sylius\PayPalPlugin\Verifier\PaymentAmountVerifierInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

final class ProcessPayPalOrderAction
{
    public function __construct(
        private readonly CustomerRepositoryInterface $customerRepository,
        private readonly FactoryInterface $customerFactory,
        private readonly AddressFactoryInterface $addressFactory,
        private readonly ObjectManager $orderManager,
        private readonly StateMachineFactoryInterface|StateMachineInterface $stateMachineFactory,
        private readonly PaymentStateManagerInterface $paymentStateManager,
        private readonly CacheAuthorizeClientApiInterface $authorizeClientApi,
        private readonly OrderDetailsApiInterface $orderDetailsApi,
        private readonly OrderProviderInterface $orderProvider,
    ) {
    }

    public function __invoke(Request $request): Response
    {
        $orderId = $request-&gt;request-&gt;getInt('orderId');
        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);
        /** @var PaymentInterface $payment */
        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_CART);

        $data = $this-&gt;getOrderDetails((string) $request-&gt;request-&gt;get('payPalOrderId'), $payment);

        /** @var CustomerInterface|null $customer */
        $customer = $order-&gt;getCustomer();
        if ($customer === null) {
            $customer = $this-&gt;getOrderCustomer($data['payer']);
            $order-&gt;setCustomer($customer);
        }

        $purchaseUnit = (array) $data['purchase_units'][0];

        $address = $this-&gt;addressFactory-&gt;createNew();

        if ($order-&gt;isShippingRequired()) {
            $name = explode(' ', $purchaseUnit['shipping']['name']['full_name']);
            $address-&gt;setLastName(array_pop($name) ?? '');
            $address-&gt;setFirstName(implode(' ', $name));
            $address-&gt;setStreet($purchaseUnit['shipping']['address']['address_line_1']);
            $address-&gt;setCity($purchaseUnit['shipping']['address']['admin_area_2']);
            $address-&gt;setPostcode($purchaseUnit['shipping']['address']['postal_code']);
            $address-&gt;setCountryCode($purchaseUnit['shipping']['address']['country_code']);

            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);
            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_SHIPPING);
        } else {
            $address-&gt;setFirstName($customer-&gt;getFirstName());
            $address-&gt;setLastName($customer-&gt;getLastName());

            $defaultAddress = $customer-&gt;getDefaultAddress();

            $address-&gt;setStreet($defaultAddress ? $defaultAddress-&gt;getStreet() : '');
            $address-&gt;setCity($defaultAddress ? $defaultAddress-&gt;getCity() : '');
            $address-&gt;setPostcode($defaultAddress ? $defaultAddress-&gt;getPostcode() : '');
            $address-&gt;setCountryCode($data['payer']['address']['country_code']);

            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);
        }

        $order-&gt;setShippingAddress(clone $address);
        $order-&gt;setBillingAddress(clone $address);

        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);

        $this-&gt;orderManager-&gt;flush();

        try {
            $this-&gt;verify($payment, $data);
        } catch (\Exception) {
            $this-&gt;paymentStateManager-&gt;cancel($payment);

            return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);
        }

        $this-&gt;paymentStateManager-&gt;create($payment);
        $this-&gt;paymentStateManager-&gt;process($payment);

        return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);
    }

    private function getOrderCustomer(array $customerData): CustomerInterface
    {
        /** @var CustomerInterface|null $existingCustomer */
        $existingCustomer = $this-&gt;customerRepository-&gt;findOneBy(['email' =&gt; $customerData['email_address']]);
        if ($existingCustomer !== null) {
            return $existingCustomer;
        }

        /** @var CustomerInterface $customer */
        $customer = $this-&gt;customerFactory-&gt;createNew();
        $customer-&gt;setEmail($customerData['email_address']);
        $customer-&gt;setFirstName($customerData['name']['given_name']);
        $customer-&gt;setLastName($customerData['name']['surname']);

        return $customer;
    }

    private function getOrderDetails(string $id, PaymentInterface $payment): array
    {
        /** @var PaymentMethodInterface $paymentMethod */
        $paymentMethod = $payment-&gt;getMethod();
        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);

        return $this-&gt;orderDetailsApi-&gt;get($token, $id);
    }

    private function getStateMachine(): StateMachineInterface
    {
        if ($this-&gt;stateMachineFactory instanceof StateMachineFactoryInterface) {
            return new WinzouStateMachineAdapter($this-&gt;stateMachineFactory);
        }

        return $this-&gt;stateMachineFactory;
    }

    private function verify(PaymentInterface $payment, array $paypalOrderDetails): void
    {
        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($paypalOrderDetails);

        if ($payment-&gt;getAmount() !== $totalAmount) {
            throw new \Exception();
        }
    }

    private function getTotalPaymentAmountFromPaypal(array $paypalOrderDetails): int
    {
        if (!isset($paypalOrderDetails['purchase_units']) || !is_array($paypalOrderDetails['purchase_units'])) {
            return 0;
        }

        $totalAmount = 0;

        foreach ($paypalOrderDetails['purchase_units'] as $unit) {
            $stringAmount = $unit['amount']['value'] ?? '0';

            $totalAmount += (int) ($stringAmount * 100);
        }

        return $totalAmount;
    }
}
</code></pre>
<p>Also there is a need to overwrite <code>CompletePayPalOrderFromPaymentPageAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Controller;

use Doctrine\Persistence\ObjectManager;
use SM\Factory\FactoryInterface;
use Sylius\Abstraction\StateMachine\StateMachineInterface;
use Sylius\Abstraction\StateMachine\WinzouStateMachineAdapter;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\OrderCheckoutTransitions;
use Sylius\Component\Order\Processor\OrderProcessorInterface;
use Sylius\PayPalPlugin\Exception\PaymentAmountMismatchException;
use Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface;
use Sylius\PayPalPlugin\Provider\OrderProviderInterface;
use Sylius\PayPalPlugin\Verifier\PaymentAmountVerifierInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

final class CompletePayPalOrderFromPaymentPageAction
{
    public function __construct(
        private readonly PaymentStateManagerInterface $paymentStateManager,
        private readonly UrlGeneratorInterface $router,
        private readonly OrderProviderInterface $orderProvider,
        private readonly FactoryInterface|StateMachineInterface $stateMachine,
        private readonly ObjectManager $orderManager,
        private readonly OrderProcessorInterface $orderProcessor,
    ) {
    }

    public function __invoke(Request $request): Response
    {
        $orderId = $request-&gt;attributes-&gt;getInt('id');

        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);
        /** @var PaymentInterface $payment */
        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);

        try {
            $this-&gt;verify($payment);
        } catch (\Exception) {
            $this-&gt;paymentStateManager-&gt;cancel($payment);
            $order-&gt;removePayment($payment);

            $this-&gt;orderProcessor-&gt;process($order);

            return new JsonResponse([
                'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_checkout_complete', [], UrlGeneratorInterface::ABSOLUTE_URL),
            ]);
        }

        $this-&gt;paymentStateManager-&gt;complete($payment);

        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);
        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_COMPLETE);

        $this-&gt;orderManager-&gt;flush();

        $request-&gt;getSession()-&gt;set('sylius_order_id', $order-&gt;getId());

        return new JsonResponse([
            'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_order_thank_you', [], UrlGeneratorInterface::ABSOLUTE_URL),
        ]);
    }

    private function getStateMachine(): StateMachineInterface
    {
        if ($this-&gt;stateMachine instanceof FactoryInterface) {
            return new WinzouStateMachineAdapter($this-&gt;stateMachine);
        }

        return $this-&gt;stateMachine;
    }

    private function verify(PaymentInterface $payment): void
    {
        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);

        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {
            throw new \Exception();
        }
    }

    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int
    {
        $details = $payment-&gt;getDetails();

        return $details['payment_amount'] ?? 0;
    }
}
</code></pre>
<p>And to overwrite <code>CaptureAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Payum\Action;

use Payum\Core\Action\ActionInterface;
use Payum\Core\Exception\RequestNotSupportedException;
use Payum\Core\Request\Capture;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\Model\PaymentMethodInterface;
use Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface;
use Sylius\PayPalPlugin\Api\CreateOrderApiInterface;
use Sylius\PayPalPlugin\Payum\Action\StatusAction;
use Sylius\PayPalPlugin\Provider\UuidProviderInterface;

final class CaptureAction implements ActionInterface
{
    public function __construct(
        private CacheAuthorizeClientApiInterface $authorizeClientApi,
        private CreateOrderApiInterface $createOrderApi,
        private UuidProviderInterface $uuidProvider,
    ) {
    }

    /** @param Capture $request */
    public function execute($request): void
    {
        RequestNotSupportedException::assertSupports($this, $request);

        /** @var PaymentInterface $payment */
        $payment = $request-&gt;getModel();
        /** @var PaymentMethodInterface $paymentMethod */
        $paymentMethod = $payment-&gt;getMethod();

        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);

        $referenceId = $this-&gt;uuidProvider-&gt;provide();
        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);

        if ($content['status'] === 'CREATED') {
            $payment-&gt;setDetails([
                'status' =&gt; StatusAction::STATUS_CAPTURED,
                'paypal_order_id' =&gt; $content['id'],
                'reference_id' =&gt; $referenceId,
                'payment_amount' =&gt; $payment-&gt;getAmount(),
            ]);
        }
    }

    public function supports($request): bool
    {
        return
            $request instanceof Capture &amp;&amp;
            $request-&gt;getModel() instanceof PaymentInterface
        ;
    }
}
</code></pre>
<p>After that, register services in the container when using PayPal 1.x:</p>
<pre><code class="language-yaml">services:
    App\Controller\ProcessPayPalOrderAction:
        class: App\Controller\ProcessPayPalOrderAction
        public: true
        arguments:
            - '@sylius.repository.customer'
            - '@sylius.factory.customer'
            - '@sylius.factory.address'
            - '@sylius.manager.order'
            - '@sylius_abstraction.state_machine'
            - '@Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface'
            - '@Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface'
            - '@Sylius\PayPalPlugin\Api\OrderDetailsApiInterface'
            - '@Sylius\PayPalPlugin\Provider\OrderProviderInterface'

    Sylius\PayPalPlugin\Controller\ProcessPayPalOrderAction:
        alias: App\Controller\ProcessPayPalOrderAction

    App\Controller\CompletePayPalOrderFromPaymentPageAction:
        class: App\Controller\CompletePayPalOrderFromPaymentPageAction
        public: true
        arguments:
            - '@Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface'
            - '@router'
            - '@Sylius\PayPalPlugin\Provider\OrderProviderInterface'
            - '@sylius_abstraction.state_machine'
            - '@sylius.manager.order'
            - '@sylius.order_processing.order_processor'

    Sylius\PayPalPlugin\Controller\CompletePayPalOrderFromPaymentPageAction:
        alias: App\Controller\CompletePayPalOrderFromPaymentPageAction

    Sylius\PayPalPlugin\Payum\Action\CaptureAction:
        class: App\Payum\Action\CaptureAction
        public: true
        arguments:
            - '@Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface'
            - '@Sylius\PayPalPlugin\Api\CreateOrderApiInterface'
            - '@Sylius\PayPalPlugin\Provider\UuidProviderInterface'
        tags:
            - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }
</code></pre>
<p>or when using PayPal 2.x:</p>
<pre><code class="language-yaml">services:
    App\Controller\ProcessPayPalOrderAction:
        class: App\Controller\ProcessPayPalOrderAction
        public: true
        arguments:
            - '@sylius.repository.customer'
            - '@sylius.factory.customer'
            - '@sylius.factory.address'
            - '@sylius.manager.order'
            - '@sylius_abstraction.state_machine'
            - '@sylius_paypal.manager.payment_state'
            - '@sylius_paypal.api.cache_authorize_client'
            - '@sylius_paypal.api.order_details'
            - '@sylius_paypal.provider.order'

    sylius_paypal.controller.process_paypal_order:
        alias: App\Controller\ProcessPayPalOrderAction

    App\Controller\CompletePayPalOrderFromPaymentPageAction:
        class: App\Controller\CompletePayPalOrderFromPaymentPageAction
        public: true
        arguments:
            - '@sylius_paypal.manager.payment_state'
            - '@router'
            - '@sylius_paypal.provider.order'
            - '@sylius_abstraction.state_machine'
            - '@sylius.manager.order'
            - '@sylius.order_processing.order_processor'

    sylius_paypal.controller.complete_paypal_order_from_payment_page:
        alias: App\Controller\CompletePayPalOrderFromPaymentPageAction

    sylius_paypal.payum.action.capture:
        class: App\Payum\Action\CaptureAction
        public: true
        arguments:
            - '@sylius_paypal.api.cache_authorize_client'
            - '@sylius_paypal.api.create_order'
            - '@sylius_paypal.provider.uuid'
        tags:
            - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29788">https://nvd.nist.gov/vuln/detail/CVE-2025-29788</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406">https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d">https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pqq3-q84h-pj6x">https://github.com/advisories/GHSA-pqq3-q84h-pj6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqq3-q84h-pj6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:26:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/paypal-plugin] Sylius PayPal Plugin Payment Amount Manipulation Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pqq3-q84h-pj6x</id>
        <link href="https://github.com/advisories/GHSA-pqq3-q84h-pj6x"/>
        <updated>2025-03-17T21:26:51.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability allows users to manipulate the final payment amount processed by PayPal. If a user modifies the item quantity in their shopping cart after initiating the PayPal Checkout process, PayPal will not receive the updated total amount. As a result, PayPal captures only the initially transmitted amount, while Sylius incorrectly considers the order fully paid based on the modified total. This flaw can be exploited both accidentally and intentionally, potentially enabling fraud by allowing customers to pay less than the actual order value.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>Attackers can intentionally pay less than the actual total order amount.</li>
<li>Business owners may suffer financial losses due to underpaid orders.</li>
<li>Integrity of payment processing is compromised.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.6.1, 1.7.1, 2.0.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To resolve the problem in the end application without updating to the newest patches, there is a need to overwrite <code>ProcessPayPalOrderAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Controller;

use Doctrine\Persistence\ObjectManager;
use SM\Factory\FactoryInterface as StateMachineFactoryInterface;
use Sylius\Abstraction\StateMachine\StateMachineInterface;
use Sylius\Abstraction\StateMachine\WinzouStateMachineAdapter;
use Sylius\Component\Core\Factory\AddressFactoryInterface;
use Sylius\Component\Core\Model\CustomerInterface;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\Model\PaymentMethodInterface;
use Sylius\Component\Core\OrderCheckoutTransitions;
use Sylius\Component\Core\Repository\CustomerRepositoryInterface;
use Sylius\Component\Resource\Factory\FactoryInterface;
use Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface;
use Sylius\PayPalPlugin\Api\OrderDetailsApiInterface;
use Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface;
use Sylius\PayPalPlugin\Provider\OrderProviderInterface;
use Sylius\PayPalPlugin\Verifier\PaymentAmountVerifierInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

final class ProcessPayPalOrderAction
{
    public function __construct(
        private readonly CustomerRepositoryInterface $customerRepository,
        private readonly FactoryInterface $customerFactory,
        private readonly AddressFactoryInterface $addressFactory,
        private readonly ObjectManager $orderManager,
        private readonly StateMachineFactoryInterface|StateMachineInterface $stateMachineFactory,
        private readonly PaymentStateManagerInterface $paymentStateManager,
        private readonly CacheAuthorizeClientApiInterface $authorizeClientApi,
        private readonly OrderDetailsApiInterface $orderDetailsApi,
        private readonly OrderProviderInterface $orderProvider,
    ) {
    }

    public function __invoke(Request $request): Response
    {
        $orderId = $request-&gt;request-&gt;getInt('orderId');
        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);
        /** @var PaymentInterface $payment */
        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_CART);

        $data = $this-&gt;getOrderDetails((string) $request-&gt;request-&gt;get('payPalOrderId'), $payment);

        /** @var CustomerInterface|null $customer */
        $customer = $order-&gt;getCustomer();
        if ($customer === null) {
            $customer = $this-&gt;getOrderCustomer($data['payer']);
            $order-&gt;setCustomer($customer);
        }

        $purchaseUnit = (array) $data['purchase_units'][0];

        $address = $this-&gt;addressFactory-&gt;createNew();

        if ($order-&gt;isShippingRequired()) {
            $name = explode(' ', $purchaseUnit['shipping']['name']['full_name']);
            $address-&gt;setLastName(array_pop($name) ?? '');
            $address-&gt;setFirstName(implode(' ', $name));
            $address-&gt;setStreet($purchaseUnit['shipping']['address']['address_line_1']);
            $address-&gt;setCity($purchaseUnit['shipping']['address']['admin_area_2']);
            $address-&gt;setPostcode($purchaseUnit['shipping']['address']['postal_code']);
            $address-&gt;setCountryCode($purchaseUnit['shipping']['address']['country_code']);

            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);
            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_SHIPPING);
        } else {
            $address-&gt;setFirstName($customer-&gt;getFirstName());
            $address-&gt;setLastName($customer-&gt;getLastName());

            $defaultAddress = $customer-&gt;getDefaultAddress();

            $address-&gt;setStreet($defaultAddress ? $defaultAddress-&gt;getStreet() : '');
            $address-&gt;setCity($defaultAddress ? $defaultAddress-&gt;getCity() : '');
            $address-&gt;setPostcode($defaultAddress ? $defaultAddress-&gt;getPostcode() : '');
            $address-&gt;setCountryCode($data['payer']['address']['country_code']);

            $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_ADDRESS);
        }

        $order-&gt;setShippingAddress(clone $address);
        $order-&gt;setBillingAddress(clone $address);

        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);

        $this-&gt;orderManager-&gt;flush();

        try {
            $this-&gt;verify($payment, $data);
        } catch (\Exception) {
            $this-&gt;paymentStateManager-&gt;cancel($payment);

            return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);
        }

        $this-&gt;paymentStateManager-&gt;create($payment);
        $this-&gt;paymentStateManager-&gt;process($payment);

        return new JsonResponse(['orderID' =&gt; $order-&gt;getId()]);
    }

    private function getOrderCustomer(array $customerData): CustomerInterface
    {
        /** @var CustomerInterface|null $existingCustomer */
        $existingCustomer = $this-&gt;customerRepository-&gt;findOneBy(['email' =&gt; $customerData['email_address']]);
        if ($existingCustomer !== null) {
            return $existingCustomer;
        }

        /** @var CustomerInterface $customer */
        $customer = $this-&gt;customerFactory-&gt;createNew();
        $customer-&gt;setEmail($customerData['email_address']);
        $customer-&gt;setFirstName($customerData['name']['given_name']);
        $customer-&gt;setLastName($customerData['name']['surname']);

        return $customer;
    }

    private function getOrderDetails(string $id, PaymentInterface $payment): array
    {
        /** @var PaymentMethodInterface $paymentMethod */
        $paymentMethod = $payment-&gt;getMethod();
        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);

        return $this-&gt;orderDetailsApi-&gt;get($token, $id);
    }

    private function getStateMachine(): StateMachineInterface
    {
        if ($this-&gt;stateMachineFactory instanceof StateMachineFactoryInterface) {
            return new WinzouStateMachineAdapter($this-&gt;stateMachineFactory);
        }

        return $this-&gt;stateMachineFactory;
    }

    private function verify(PaymentInterface $payment, array $paypalOrderDetails): void
    {
        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($paypalOrderDetails);

        if ($payment-&gt;getAmount() !== $totalAmount) {
            throw new \Exception();
        }
    }

    private function getTotalPaymentAmountFromPaypal(array $paypalOrderDetails): int
    {
        if (!isset($paypalOrderDetails['purchase_units']) || !is_array($paypalOrderDetails['purchase_units'])) {
            return 0;
        }

        $totalAmount = 0;

        foreach ($paypalOrderDetails['purchase_units'] as $unit) {
            $stringAmount = $unit['amount']['value'] ?? '0';

            $totalAmount += (int) ($stringAmount * 100);
        }

        return $totalAmount;
    }
}
</code></pre>
<p>Also there is a need to overwrite <code>CompletePayPalOrderFromPaymentPageAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Controller;

use Doctrine\Persistence\ObjectManager;
use SM\Factory\FactoryInterface;
use Sylius\Abstraction\StateMachine\StateMachineInterface;
use Sylius\Abstraction\StateMachine\WinzouStateMachineAdapter;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\OrderCheckoutTransitions;
use Sylius\Component\Order\Processor\OrderProcessorInterface;
use Sylius\PayPalPlugin\Exception\PaymentAmountMismatchException;
use Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface;
use Sylius\PayPalPlugin\Provider\OrderProviderInterface;
use Sylius\PayPalPlugin\Verifier\PaymentAmountVerifierInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

final class CompletePayPalOrderFromPaymentPageAction
{
    public function __construct(
        private readonly PaymentStateManagerInterface $paymentStateManager,
        private readonly UrlGeneratorInterface $router,
        private readonly OrderProviderInterface $orderProvider,
        private readonly FactoryInterface|StateMachineInterface $stateMachine,
        private readonly ObjectManager $orderManager,
        private readonly OrderProcessorInterface $orderProcessor,
    ) {
    }

    public function __invoke(Request $request): Response
    {
        $orderId = $request-&gt;attributes-&gt;getInt('id');

        $order = $this-&gt;orderProvider-&gt;provideOrderById($orderId);
        /** @var PaymentInterface $payment */
        $payment = $order-&gt;getLastPayment(PaymentInterface::STATE_PROCESSING);

        try {
            $this-&gt;verify($payment);
        } catch (\Exception) {
            $this-&gt;paymentStateManager-&gt;cancel($payment);
            $order-&gt;removePayment($payment);

            $this-&gt;orderProcessor-&gt;process($order);

            return new JsonResponse([
                'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_checkout_complete', [], UrlGeneratorInterface::ABSOLUTE_URL),
            ]);
        }

        $this-&gt;paymentStateManager-&gt;complete($payment);

        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_SELECT_PAYMENT);
        $this-&gt;getStateMachine()-&gt;apply($order, OrderCheckoutTransitions::GRAPH, OrderCheckoutTransitions::TRANSITION_COMPLETE);

        $this-&gt;orderManager-&gt;flush();

        $request-&gt;getSession()-&gt;set('sylius_order_id', $order-&gt;getId());

        return new JsonResponse([
            'return_url' =&gt; $this-&gt;router-&gt;generate('sylius_shop_order_thank_you', [], UrlGeneratorInterface::ABSOLUTE_URL),
        ]);
    }

    private function getStateMachine(): StateMachineInterface
    {
        if ($this-&gt;stateMachine instanceof FactoryInterface) {
            return new WinzouStateMachineAdapter($this-&gt;stateMachine);
        }

        return $this-&gt;stateMachine;
    }

    private function verify(PaymentInterface $payment): void
    {
        $totalAmount = $this-&gt;getTotalPaymentAmountFromPaypal($payment);

        if ($payment-&gt;getOrder()-&gt;getTotal() !== $totalAmount) {
            throw new \Exception();
        }
    }

    private function getTotalPaymentAmountFromPaypal(PaymentInterface $payment): int
    {
        $details = $payment-&gt;getDetails();

        return $details['payment_amount'] ?? 0;
    }
}
</code></pre>
<p>And to overwrite <code>CaptureAction</code> with modified logic:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Payum\Action;

use Payum\Core\Action\ActionInterface;
use Payum\Core\Exception\RequestNotSupportedException;
use Payum\Core\Request\Capture;
use Sylius\Component\Core\Model\PaymentInterface;
use Sylius\Component\Core\Model\PaymentMethodInterface;
use Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface;
use Sylius\PayPalPlugin\Api\CreateOrderApiInterface;
use Sylius\PayPalPlugin\Payum\Action\StatusAction;
use Sylius\PayPalPlugin\Provider\UuidProviderInterface;

final class CaptureAction implements ActionInterface
{
    public function __construct(
        private CacheAuthorizeClientApiInterface $authorizeClientApi,
        private CreateOrderApiInterface $createOrderApi,
        private UuidProviderInterface $uuidProvider,
    ) {
    }

    /** @param Capture $request */
    public function execute($request): void
    {
        RequestNotSupportedException::assertSupports($this, $request);

        /** @var PaymentInterface $payment */
        $payment = $request-&gt;getModel();
        /** @var PaymentMethodInterface $paymentMethod */
        $paymentMethod = $payment-&gt;getMethod();

        $token = $this-&gt;authorizeClientApi-&gt;authorize($paymentMethod);

        $referenceId = $this-&gt;uuidProvider-&gt;provide();
        $content = $this-&gt;createOrderApi-&gt;create($token, $payment, $referenceId);

        if ($content['status'] === 'CREATED') {
            $payment-&gt;setDetails([
                'status' =&gt; StatusAction::STATUS_CAPTURED,
                'paypal_order_id' =&gt; $content['id'],
                'reference_id' =&gt; $referenceId,
                'payment_amount' =&gt; $payment-&gt;getAmount(),
            ]);
        }
    }

    public function supports($request): bool
    {
        return
            $request instanceof Capture &amp;&amp;
            $request-&gt;getModel() instanceof PaymentInterface
        ;
    }
}
</code></pre>
<p>After that, register services in the container when using PayPal 1.x:</p>
<pre><code class="language-yaml">services:
    App\Controller\ProcessPayPalOrderAction:
        class: App\Controller\ProcessPayPalOrderAction
        public: true
        arguments:
            - '@sylius.repository.customer'
            - '@sylius.factory.customer'
            - '@sylius.factory.address'
            - '@sylius.manager.order'
            - '@sylius_abstraction.state_machine'
            - '@Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface'
            - '@Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface'
            - '@Sylius\PayPalPlugin\Api\OrderDetailsApiInterface'
            - '@Sylius\PayPalPlugin\Provider\OrderProviderInterface'

    Sylius\PayPalPlugin\Controller\ProcessPayPalOrderAction:
        alias: App\Controller\ProcessPayPalOrderAction

    App\Controller\CompletePayPalOrderFromPaymentPageAction:
        class: App\Controller\CompletePayPalOrderFromPaymentPageAction
        public: true
        arguments:
            - '@Sylius\PayPalPlugin\Manager\PaymentStateManagerInterface'
            - '@router'
            - '@Sylius\PayPalPlugin\Provider\OrderProviderInterface'
            - '@sylius_abstraction.state_machine'
            - '@sylius.manager.order'
            - '@sylius.order_processing.order_processor'

    Sylius\PayPalPlugin\Controller\CompletePayPalOrderFromPaymentPageAction:
        alias: App\Controller\CompletePayPalOrderFromPaymentPageAction

    Sylius\PayPalPlugin\Payum\Action\CaptureAction:
        class: App\Payum\Action\CaptureAction
        public: true
        arguments:
            - '@Sylius\PayPalPlugin\Api\CacheAuthorizeClientApiInterface'
            - '@Sylius\PayPalPlugin\Api\CreateOrderApiInterface'
            - '@Sylius\PayPalPlugin\Provider\UuidProviderInterface'
        tags:
            - { name: 'payum.action', factory: 'sylius.pay_pal', alias: 'payum.action.capture' }
</code></pre>
<p>or when using PayPal 2.x:</p>
<pre><code class="language-yaml">services:
    App\Controller\ProcessPayPalOrderAction:
        class: App\Controller\ProcessPayPalOrderAction
        public: true
        arguments:
            - '@sylius.repository.customer'
            - '@sylius.factory.customer'
            - '@sylius.factory.address'
            - '@sylius.manager.order'
            - '@sylius_abstraction.state_machine'
            - '@sylius_paypal.manager.payment_state'
            - '@sylius_paypal.api.cache_authorize_client'
            - '@sylius_paypal.api.order_details'
            - '@sylius_paypal.provider.order'

    sylius_paypal.controller.process_paypal_order:
        alias: App\Controller\ProcessPayPalOrderAction

    App\Controller\CompletePayPalOrderFromPaymentPageAction:
        class: App\Controller\CompletePayPalOrderFromPaymentPageAction
        public: true
        arguments:
            - '@sylius_paypal.manager.payment_state'
            - '@router'
            - '@sylius_paypal.provider.order'
            - '@sylius_abstraction.state_machine'
            - '@sylius.manager.order'
            - '@sylius.order_processing.order_processor'

    sylius_paypal.controller.complete_paypal_order_from_payment_page:
        alias: App\Controller\CompletePayPalOrderFromPaymentPageAction

    sylius_paypal.payum.action.capture:
        class: App\Payum\Action\CaptureAction
        public: true
        arguments:
            - '@sylius_paypal.api.cache_authorize_client'
            - '@sylius_paypal.api.create_order'
            - '@sylius_paypal.provider.uuid'
        tags:
            - { name: 'payum.action', factory: 'sylius.paypal', alias: 'payum.action.capture' }
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x">https://github.com/Sylius/PayPalPlugin/security/advisories/GHSA-pqq3-q84h-pj6x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-29788">https://nvd.nist.gov/vuln/detail/CVE-2025-29788</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406">https://github.com/Sylius/PayPalPlugin/commit/31e71b0457e5d887a6c19f8cfabb8b16125ec406</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d">https://github.com/Sylius/PayPalPlugin/commit/8a81258f965b7860d4bccb52942e4c5b53e6774d</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.6.1</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v1.7.1</a></li>
<li><a href="https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1">https://github.com/Sylius/PayPalPlugin/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pqq3-q84h-pj6x">https://github.com/advisories/GHSA-pqq3-q84h-pj6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqq3-q84h-pj6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-17T21:26:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getformwork/formwork]  Formwork has a cross-site scripting (XSS) vulnerability in Site title]]></title>
        <id>https://github.com/advisories/GHSA-vf6x-59hh-332f</id>
        <link href="https://github.com/advisories/GHSA-vf6x-59hh-332f"/>
        <updated>2025-03-17T20:27:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The site title field at /panel/options/site/allows embedding JS tags, which can be used to attack all members of the system. This is a widespread attack and can cause significant damage if there is a considerable number of users.</p>
<h3 id="impact">Impact</h3>
<p>The attack is widespread, leveraging what XSS can do. This will undoubtedly impact system availability.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/getformwork/formwork/commit/aa3e9c684035d9e8495169fde7c57d97faa3f9a2"><strong>Formwork 2.x</strong> (aa3e9c6)</a> escapes site title from panel header navigation.</li>
</ul>
<h3 id="details">Details</h3>
<p>By embedding "&lt;!--", the source code can be rendered non-functional, significantly impacting system availability. However, the attacker would need admin privileges, making the attack more difficult to execute.</p>
<h3 id="poc">PoC</h3>
<p><img alt="image" src="https://github.com/user-attachments/assets/8fc68f6f-8bc4-4b97-8b93-dee5b88a3fcf"></p>
<ol>
<li><p>The page where the vulnerability was found, and the attack surface is the Title field.
<img alt="image" src="https://github.com/user-attachments/assets/dbf94354-7115-4d3b-81ba-6b6aff561b81"></p>
</li>
<li><p>I tested accessing the Dashboard page using a regular user account with Firefox, a different browser, and found that it was also affected.
<img alt="image" src="https://github.com/user-attachments/assets/0e72129a-7f2d-4f0e-b85e-0b1cedfd377e"></p>
</li>
<li><p>Additionally, the remaining code was commented out to disrupt the UX/UI, making it difficult to revert the settings.</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getformwork/formwork/security/advisories/GHSA-vf6x-59hh-332f">https://github.com/getformwork/formwork/security/advisories/GHSA-vf6x-59hh-332f</a></li>
<li><a href="https://github.com/getformwork/formwork/commit/aa3e9c684035d9e8495169fde7c57d97faa3f9a2">https://github.com/getformwork/formwork/commit/aa3e9c684035d9e8495169fde7c57d97faa3f9a2</a></li>
<li><a href="https://github.com/advisories/GHSA-vf6x-59hh-332f">https://github.com/advisories/GHSA-vf6x-59hh-332f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vf6x-59hh-332f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-01T00:11:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getformwork/formwork] Formwork improperly validates input of User role preventing site and panel availability]]></title>
        <id>https://github.com/advisories/GHSA-c85w-x26q-ch87</id>
        <link href="https://github.com/advisories/GHSA-c85w-x26q-ch87"/>
        <updated>2025-03-16T17:19:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Improper validation of select fields allows attackers to craft an input that crashes the system, resulting in a 500 status and making the entire site and administration panel unavailable.
This clearly impacts the Availability aspect of the CIA triad (confidentiality, integrity, and availability), although the attack still has certain limitations.</p>
<h3 id="details">Details</h3>
<p>The attack involves injecting any invalid user role value (e.g. "&gt;") into the Role=User parameter in the /panel/users/{name}/profile page, which is the user profile update page.
Doing this will change the users data in a way that prevents users and then the entire site from loading. Even though the actual data change is minimal, the error is unrecoverable until a valid role parameter is restored by direct modification of the user account file.
Proper validation of select fields will prevent extraneous valid from being accepted and making the entire site and administration panel unavailable.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/getformwork/formwork/commit/d9f0c1feb3b9855d5bdc8bb189c0aaab2792e7ca"><strong>Formwork 2.x</strong> (d9f0c1f)</a> adds proper validation to select fields.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>The condition for this attack is having high privileges or Admin access, which means it could be exploited by an Insider Threat. Alternatively, if an attacker gains access to a privileged user account, they can execute the attack as well.
Overall, the attack is relatively difficult to carry out, but if successful, the impact and damage would be significant.</p>
<h3 id="poc">PoC</h3>
<p><img alt="2025-02-27_10-25" src="https://github.com/user-attachments/assets/4b5a2d71-3397-4a5b-8464-35752376115a"></p>
<ol>
<li>Intercept the request and inject an input that will trigger an error.</li>
</ol>
<p><img alt="2025-02-27_10-25_1" src="https://github.com/user-attachments/assets/a888c109-a724-4478-ae80-d9e8b05ef1aa"></p>
<p><img alt="image" src="https://github.com/user-attachments/assets/e81bb9fc-8c92-413c-8cc0-0bcffd2e2922"></p>
<p>2.After that, it will be observed that the system is shut down or completely broken. Even changing the browser or resetting the server will not be able to restore it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getformwork/formwork/security/advisories/GHSA-c85w-x26q-ch87">https://github.com/getformwork/formwork/security/advisories/GHSA-c85w-x26q-ch87</a></li>
<li><a href="https://github.com/getformwork/formwork/commit/d9f0c1feb3b9855d5bdc8bb189c0aaab2792e7ca">https://github.com/getformwork/formwork/commit/d9f0c1feb3b9855d5bdc8bb189c0aaab2792e7ca</a></li>
<li><a href="https://github.com/advisories/GHSA-c85w-x26q-ch87">https://github.com/advisories/GHSA-c85w-x26q-ch87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c85w-x26q-ch87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-01T00:11:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froala/wysiwyg-editor] Froala WYSIWYG editor allows cross-site scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-549p-5c7f-c5p4</id>
        <link href="https://github.com/advisories/GHSA-549p-5c7f-c5p4"/>
        <updated>2025-03-14T18:51:50.000Z</updated>
        <content type="html"><![CDATA[<p>Inconsistent </p>]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-549p-5c7f-c5p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-08T00:30:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[modx/revolution] MODX allows cross-site scripting (XSS) via an SVG file]]></title>
        <id>https://github.com/advisories/GHSA-hm54-fg2w-2g6j</id>
        <link href="https://github.com/advisories/GHSA-hm54-fg2w-2g6j"/>
        <updated>2025-03-13T19:55:08.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability has been identified in MODX prior to 3.1.0. The vulnerability allows authenticated users to upload SVG files containing malicious JavaScript code as profile images, which gets executed in victims' browsers when viewing the profile image.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-28010">https://nvd.nist.gov/vuln/detail/CVE-2025-28010</a></li>
<li><a href="https://github.com/rtnthakur/CVE/blob/main/MODX/README.md">https://github.com/rtnthakur/CVE/blob/main/MODX/README.md</a></li>
<li><a href="https://github.com/advisories/GHSA-hm54-fg2w-2g6j">https://github.com/advisories/GHSA-hm54-fg2w-2g6j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hm54-fg2w-2g6j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-03-13T18:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flarum/framework] Flarum Vulnerable to Session Hijacking via Authoritative Subdomain Cookie Overwrite]]></title>
        <id>https://github.com/advisories/GHSA-hg9j-64wp-m9px</id>
        <link href="https://github.com/advisories/GHSA-hg9j-64wp-m9px"/>
        <updated>2025-03-12T22:06:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary"><strong>Summary</strong></h2>
<p>A session hijacking vulnerability exists when an attacker-controlled <strong>authoritative subdomain</strong> under a parent domain (e.g., <code>subdomain.host.com</code>) sets cookies scoped to the parent domain (<code>.host.com</code>). This allows session token replacement for applications hosted on sibling subdomains (e.g., <code>community.host.com</code>) if session tokens aren't rotated post-authentication.  </p>
<p><strong>Key Constraints</strong>:  </p>
<ul>
<li>Attacker must control <strong>any subdomain</strong> under the parent domain (e.g., <code>evil.host.com</code> or <code>x.y.host.com</code>).  </li>
<li>Parent domain must <strong>not</strong> be on the <a href="https://publicsuffix.org/">Public Suffix List</a>.</li>
</ul>
<p>Due to non-existent session token rotation after authenticating we can theoretically reproduce the vulnerability by using browser dev tools, but due to the browser's security measures this does not seem to be exploitable as described.</p>
<hr>
<h2 id="proof-of-concept-deno"><strong>Proof of Concept (Deno)</strong></h2>
<pre><code class="language-ts">Deno.serve({
    port: 8000, // default
    hostname: 'localhost',
    onListen: (o) =&gt; console.log(`Server started at http://${o.hostname}:${o.port}`, o),
  },
  async (req) =&gt; (console.log(req), new Response(
    `You've been served! You came from ${req.headers.get('referer')}`,
    {
      //status: 302, // would redirect user to page they came from
      status: 200,
      headers: {
        'set-cookie': 'session_cookie=mytoken; Domain=.deno.dev; Secure; HttpOnly',
        'location': req.headers.get('referer')
      }
    }
  ))
);
</code></pre>
<h3 id="attack-flow"><strong>Attack Flow</strong></h3>
<ol>
<li><strong>Attacker Setup</strong>: Hosts server at <code>evil.host.com</code>.</li>
<li><strong>Harvest Session Token</strong>: Attacker visits <code>community.host.com</code> to get a session token for himself to replace the victim's token with his own.</li>
<li><strong>Victim Interaction</strong>: User clicks link to <code>https://evil.host.com</code>.  </li>
<li><strong>Cookie Override</strong>: Server sets cookie with <code>Domain=.host.com</code> and the harvested token from step 2.  </li>
<li><strong>Session Hijacking</strong>: Victim's future requests to <code>community.host.com</code> use attacker's token.</li>
</ol>
<hr>
<h2 id="why-reverse-dns-subdomains-fail"><strong>Why Reverse DNS Subdomains Fail</strong></h2>
<p>Browsers block cookie setting for parent domains unless:  </p>
<ol>
<li><strong>Authoritative Subdomain</strong>: Server must belong to a direct child domain (e.g., <code>a.host.com</code>, not <code>x.y.host.com</code>).  </li>
<li><strong>Public Suffix Exclusion</strong>: If <code>host.com</code> is on the Public Suffix List (e.g., like <code>github.io</code>), browsers block cross-subdomain cookies.</li>
</ol>
<p><strong>Example</strong>:  </p>
<ul>
<li>❌ <code>123.cust.dynamic.host.com</code> → Cannot set <code>Domain=.host.com</code>.  </li>
<li>✅ <code>evil.host.com</code> → Can set <code>Domain=.host.com</code> (if not on PSL).</li>
</ul>
<hr>
<h2 id="browser-security-behavior"><strong>Browser Security Behavior</strong></h2>
<h3 id="1-cookie-domain-validation">1. <strong>Cookie Domain Validation</strong></h3>
<p>Per <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.3">RFC 6265 §5.3</a>:  </p>
<blockquote>
<p>Cookies can only be set for domains the server is authoritative for.  </p>
</blockquote>
<h3 id="2-public-suffix-list-psl">2. <strong>Public Suffix List (PSL)</strong></h3>
<p>Domains like <code>host.com</code> on the PSL trigger browser protections:  </p>
<blockquote>
<p>Subdomains of PSL-listed domains cannot set cookies for parent domains.  </p>
</blockquote>
<p><strong>Verification</strong>:  </p>
<ul>
<li>Check PSL status: <a href="https://publicsuffix.org/list/">https://publicsuffix.org/list/</a></li>
</ul>
<hr>
<h2 id="impact"><strong>Impact</strong></h2>
<ul>
<li><strong>Account Takeover</strong>: Attacker gains authenticated session access.</li>
<li><strong>Data Exposure</strong>: Email, private messages, and other personal data exposed.</li>
<li><strong>Exploitable Only If</strong>:  <ul>
<li>Parent domain is <strong>not</strong> PSL-listed.  </li>
<li>Attacker controls <strong>direct child subdomain</strong> (e.g., <code>evil.host.com</code>).</li>
</ul>
</li>
</ul>
<hr>
<h2 id="remediation"><strong>Remediation</strong></h2>
<ol>
<li><strong>Session Token Rotation</strong>:  <pre><code class="language-ts">// After authentication:
invalidateOldSession();
const newToken = generateToken();
</code></pre>
</li>
<li><strong>Cookie Scoping (already in place)</strong>:  <pre><code class="language-ts">// Restrict cookies to explicit subdomain:
"Set-Cookie": "session=token; Domain=community.host.com; Secure; HttpOnly; SameSite=Lax";
</code></pre>
</li>
<li><strong>Public Suffix Registration</strong>:<br>Add <code>host.com</code> to the Public Suffix List via <a href="https://publicsuffix.org/submit/">PSL Submission</a>.</li>
</ol>
<hr>
<h2 id="revised-vulnerability-criteria"><strong>Revised Vulnerability Criteria</strong></h2>
<p><strong>Prerequisites</strong>:  </p>
<ul>
<li>Attacker controls authoritative subdomain (e.g., <code>evil.host.com</code>).  </li>
<li>Parent domain (<code>host.com</code>) is <strong>not</strong> PSL-listed.  </li>
<li>Session tokens persist post-authentication.</li>
</ul>
<hr>
<h2 id="references"><strong>References</strong></h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc6265">RFC 6265: HTTP Cookie Handling</a>  </li>
<li><a href="https://publicsuffix.org/">Public Suffix List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flarum/framework/security/advisories/GHSA-hg9j-64wp-m9px">https://github.com/flarum/framework/security/advisories/GHSA-hg9j-64wp-m9px</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27794">https://nvd.nist.gov/vuln/detail/CVE-2025-27794</a></li>
<li><a href="https://github.com/flarum/framework/commit/a05aaea3ee1e0a8b870935183193cd6052f1d402">https://github.com/flarum/framework/commit/a05aaea3ee1e0a8b870935183193cd6052f1d402</a></li>
<li><a href="https://github.com/flarum/framework/releases/tag/v1.8.10">https://github.com/flarum/framework/releases/tag/v1.8.10</a></li>
<li><a href="https://github.com/advisories/GHSA-hg9j-64wp-m9px">https://github.com/advisories/GHSA-hg9j-64wp-m9px</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg9j-64wp-m9px</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-12T22:06:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flarum/core] Flarum Vulnerable to Session Hijacking via Authoritative Subdomain Cookie Overwrite]]></title>
        <id>https://github.com/advisories/GHSA-hg9j-64wp-m9px</id>
        <link href="https://github.com/advisories/GHSA-hg9j-64wp-m9px"/>
        <updated>2025-03-12T22:06:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary"><strong>Summary</strong></h2>
<p>A session hijacking vulnerability exists when an attacker-controlled <strong>authoritative subdomain</strong> under a parent domain (e.g., <code>subdomain.host.com</code>) sets cookies scoped to the parent domain (<code>.host.com</code>). This allows session token replacement for applications hosted on sibling subdomains (e.g., <code>community.host.com</code>) if session tokens aren't rotated post-authentication.  </p>
<p><strong>Key Constraints</strong>:  </p>
<ul>
<li>Attacker must control <strong>any subdomain</strong> under the parent domain (e.g., <code>evil.host.com</code> or <code>x.y.host.com</code>).  </li>
<li>Parent domain must <strong>not</strong> be on the <a href="https://publicsuffix.org/">Public Suffix List</a>.</li>
</ul>
<p>Due to non-existent session token rotation after authenticating we can theoretically reproduce the vulnerability by using browser dev tools, but due to the browser's security measures this does not seem to be exploitable as described.</p>
<hr>
<h2 id="proof-of-concept-deno"><strong>Proof of Concept (Deno)</strong></h2>
<pre><code class="language-ts">Deno.serve({
    port: 8000, // default
    hostname: 'localhost',
    onListen: (o) =&gt; console.log(`Server started at http://${o.hostname}:${o.port}`, o),
  },
  async (req) =&gt; (console.log(req), new Response(
    `You've been served! You came from ${req.headers.get('referer')}`,
    {
      //status: 302, // would redirect user to page they came from
      status: 200,
      headers: {
        'set-cookie': 'session_cookie=mytoken; Domain=.deno.dev; Secure; HttpOnly',
        'location': req.headers.get('referer')
      }
    }
  ))
);
</code></pre>
<h3 id="attack-flow"><strong>Attack Flow</strong></h3>
<ol>
<li><strong>Attacker Setup</strong>: Hosts server at <code>evil.host.com</code>.</li>
<li><strong>Harvest Session Token</strong>: Attacker visits <code>community.host.com</code> to get a session token for himself to replace the victim's token with his own.</li>
<li><strong>Victim Interaction</strong>: User clicks link to <code>https://evil.host.com</code>.  </li>
<li><strong>Cookie Override</strong>: Server sets cookie with <code>Domain=.host.com</code> and the harvested token from step 2.  </li>
<li><strong>Session Hijacking</strong>: Victim's future requests to <code>community.host.com</code> use attacker's token.</li>
</ol>
<hr>
<h2 id="why-reverse-dns-subdomains-fail"><strong>Why Reverse DNS Subdomains Fail</strong></h2>
<p>Browsers block cookie setting for parent domains unless:  </p>
<ol>
<li><strong>Authoritative Subdomain</strong>: Server must belong to a direct child domain (e.g., <code>a.host.com</code>, not <code>x.y.host.com</code>).  </li>
<li><strong>Public Suffix Exclusion</strong>: If <code>host.com</code> is on the Public Suffix List (e.g., like <code>github.io</code>), browsers block cross-subdomain cookies.</li>
</ol>
<p><strong>Example</strong>:  </p>
<ul>
<li>❌ <code>123.cust.dynamic.host.com</code> → Cannot set <code>Domain=.host.com</code>.  </li>
<li>✅ <code>evil.host.com</code> → Can set <code>Domain=.host.com</code> (if not on PSL).</li>
</ul>
<hr>
<h2 id="browser-security-behavior"><strong>Browser Security Behavior</strong></h2>
<h3 id="1-cookie-domain-validation">1. <strong>Cookie Domain Validation</strong></h3>
<p>Per <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.3">RFC 6265 §5.3</a>:  </p>
<blockquote>
<p>Cookies can only be set for domains the server is authoritative for.  </p>
</blockquote>
<h3 id="2-public-suffix-list-psl">2. <strong>Public Suffix List (PSL)</strong></h3>
<p>Domains like <code>host.com</code> on the PSL trigger browser protections:  </p>
<blockquote>
<p>Subdomains of PSL-listed domains cannot set cookies for parent domains.  </p>
</blockquote>
<p><strong>Verification</strong>:  </p>
<ul>
<li>Check PSL status: <a href="https://publicsuffix.org/list/">https://publicsuffix.org/list/</a></li>
</ul>
<hr>
<h2 id="impact"><strong>Impact</strong></h2>
<ul>
<li><strong>Account Takeover</strong>: Attacker gains authenticated session access.</li>
<li><strong>Data Exposure</strong>: Email, private messages, and other personal data exposed.</li>
<li><strong>Exploitable Only If</strong>:  <ul>
<li>Parent domain is <strong>not</strong> PSL-listed.  </li>
<li>Attacker controls <strong>direct child subdomain</strong> (e.g., <code>evil.host.com</code>).</li>
</ul>
</li>
</ul>
<hr>
<h2 id="remediation"><strong>Remediation</strong></h2>
<ol>
<li><strong>Session Token Rotation</strong>:  <pre><code class="language-ts">// After authentication:
invalidateOldSession();
const newToken = generateToken();
</code></pre>
</li>
<li><strong>Cookie Scoping (already in place)</strong>:  <pre><code class="language-ts">// Restrict cookies to explicit subdomain:
"Set-Cookie": "session=token; Domain=community.host.com; Secure; HttpOnly; SameSite=Lax";
</code></pre>
</li>
<li><strong>Public Suffix Registration</strong>:<br>Add <code>host.com</code> to the Public Suffix List via <a href="https://publicsuffix.org/submit/">PSL Submission</a>.</li>
</ol>
<hr>
<h2 id="revised-vulnerability-criteria"><strong>Revised Vulnerability Criteria</strong></h2>
<p><strong>Prerequisites</strong>:  </p>
<ul>
<li>Attacker controls authoritative subdomain (e.g., <code>evil.host.com</code>).  </li>
<li>Parent domain (<code>host.com</code>) is <strong>not</strong> PSL-listed.  </li>
<li>Session tokens persist post-authentication.</li>
</ul>
<hr>
<h2 id="references"><strong>References</strong></h2>
<ul>
<li><a href="https://tools.ietf.org/html/rfc6265">RFC 6265: HTTP Cookie Handling</a>  </li>
<li><a href="https://publicsuffix.org/">Public Suffix List</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flarum/framework/security/advisories/GHSA-hg9j-64wp-m9px">https://github.com/flarum/framework/security/advisories/GHSA-hg9j-64wp-m9px</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27794">https://nvd.nist.gov/vuln/detail/CVE-2025-27794</a></li>
<li><a href="https://github.com/flarum/framework/commit/a05aaea3ee1e0a8b870935183193cd6052f1d402">https://github.com/flarum/framework/commit/a05aaea3ee1e0a8b870935183193cd6052f1d402</a></li>
<li><a href="https://github.com/flarum/framework/releases/tag/v1.8.10">https://github.com/flarum/framework/releases/tag/v1.8.10</a></li>
<li><a href="https://github.com/advisories/GHSA-hg9j-64wp-m9px">https://github.com/advisories/GHSA-hg9j-64wp-m9px</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg9j-64wp-m9px</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-12T22:06:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[laravel/framework] Laravel has a File Validation Bypass]]></title>
        <id>https://github.com/advisories/GHSA-78fx-h6xr-vch4</id>
        <link href="https://github.com/advisories/GHSA-78fx-h6xr-vch4"/>
        <updated>2025-03-12T21:29:28.000Z</updated>
        <content type="html"><![CDATA[<p>When using wildcard validation to validate a given file or image field array (<code>files.*</code>), a user-crafted malicious request could potentially bypass the validation rules.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/laravel/framework/security/advisories/GHSA-78fx-h6xr-vch4">https://github.com/laravel/framework/security/advisories/GHSA-78fx-h6xr-vch4</a></li>
<li><a href="https://github.com/laravel/framework/commit/2d133034fefddfb047838f4caca3687a3ba811a5">https://github.com/laravel/framework/commit/2d133034fefddfb047838f4caca3687a3ba811a5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27515">https://nvd.nist.gov/vuln/detail/CVE-2025-27515</a></li>
<li><a href="https://github.com/laravel/framework/commit/a4f7a8f9b83e21882abeef78c3174c66b0f4a26b">https://github.com/laravel/framework/commit/a4f7a8f9b83e21882abeef78c3174c66b0f4a26b</a></li>
<li><a href="https://github.com/advisories/GHSA-78fx-h6xr-vch4">https://github.com/advisories/GHSA-78fx-h6xr-vch4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78fx-h6xr-vch4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-05T19:09:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[laravel/framework] Laravel has a File Validation Bypass]]></title>
        <id>https://github.com/advisories/GHSA-78fx-h6xr-vch4</id>
        <link href="https://github.com/advisories/GHSA-78fx-h6xr-vch4"/>
        <updated>2025-03-12T21:29:28.000Z</updated>
        <content type="html"><![CDATA[<p>When using wildcard validation to validate a given file or image field array (<code>files.*</code>), a user-crafted malicious request could potentially bypass the validation rules.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/laravel/framework/security/advisories/GHSA-78fx-h6xr-vch4">https://github.com/laravel/framework/security/advisories/GHSA-78fx-h6xr-vch4</a></li>
<li><a href="https://github.com/laravel/framework/commit/2d133034fefddfb047838f4caca3687a3ba811a5">https://github.com/laravel/framework/commit/2d133034fefddfb047838f4caca3687a3ba811a5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27515">https://nvd.nist.gov/vuln/detail/CVE-2025-27515</a></li>
<li><a href="https://github.com/laravel/framework/commit/a4f7a8f9b83e21882abeef78c3174c66b0f4a26b">https://github.com/laravel/framework/commit/a4f7a8f9b83e21882abeef78c3174c66b0f4a26b</a></li>
<li><a href="https://github.com/advisories/GHSA-78fx-h6xr-vch4">https://github.com/advisories/GHSA-78fx-h6xr-vch4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78fx-h6xr-vch4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-03-05T19:09:39.000Z</published>
    </entry>
</feed>