{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>A Server-Side Request Forgery (SSRF) vulnerability exists in the RequestsToolkit component of the langchain-community package (specifically, langchain_community.agent_toolkits.openapi.toolkit.RequestsToolkit) in langchain-ai/langchain version 0.0.27. This vulnerability occurs because the toolkit does not enforce restrictions on requests to remote internet addresses, allowing it to also access local addresses. As a result, an attacker could exploit this flaw to perform port scans, access local services, retrieve instance metadata from cloud environments (e.g., Azure, AWS), and interact with servers on the local network. This issue has been fixed in version 0.0.28.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2828\">https://nvd.nist.gov/vuln/detail/CVE-2025-2828</a></li>\n<li><a href=\"https://github.com/langchain-ai/langchain/commit/e188d4ecb085d4561a0be3c583d26aa9c2c3283f\">https://github.com/langchain-ai/langchain/commit/e188d4ecb085d4561a0be3c583d26aa9c2c3283f</a></li>\n<li><a href=\"https://huntr.com/bounties/8f771040-7f34-420a-b96b-5b93d4a99afc\">https://huntr.com/bounties/8f771040-7f34-420a-b96b-5b93d4a99afc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h5gc-rm8j-5gpr\">https://github.com/advisories/GHSA-h5gc-rm8j-5gpr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h5gc-rm8j-5gpr",
            "title": "[langchain-community] LangChain Community SSRF vulnerability exists in RequestsToolkit component ",
            "date_modified": "2025-06-25T18:45:48.000Z",
            "date_published": "2025-06-23T21:31:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h5gc-rm8j-5gpr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in PySpur-Dev pyspur up to 0.1.18. It has been classified as critical. Affected is the function SingleLLMCallNode of the file backend/pyspur/nodes/llm/single_llm_call.py of the component Jinja2 Template Handler. The manipulation of the argument user_message leads to improper neutralization of special elements used in a template engine. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-6518\">https://nvd.nist.gov/vuln/detail/CVE-2025-6518</a></li>\n<li><a href=\"https://github.com/PySpur-Dev/pyspur/issues/289\">https://github.com/PySpur-Dev/pyspur/issues/289</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.313638\">https://vuldb.com/?ctiid.313638</a></li>\n<li><a href=\"https://vuldb.com/?id.313638\">https://vuldb.com/?id.313638</a></li>\n<li><a href=\"https://vuldb.com/?submit.593612\">https://vuldb.com/?submit.593612</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8gff-cf92-72pv\">https://github.com/advisories/GHSA-8gff-cf92-72pv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8gff-cf92-72pv",
            "title": "[pyspur] pyspur Incomplete Filtering of Special Elements allowed by SingleLLMCallNode function",
            "date_modified": "2025-06-25T14:12:11.000Z",
            "date_published": "2025-06-23T21:31:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8gff-cf92-72pv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>gateway_proxy_handler in MLflow before 3.1.0 lacks gateway_path validation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-52967\">https://nvd.nist.gov/vuln/detail/CVE-2025-52967</a></li>\n<li><a href=\"https://github.com/mlflow/mlflow/issues/15944\">https://github.com/mlflow/mlflow/issues/15944</a></li>\n<li><a href=\"https://github.com/mlflow/mlflow/pull/15970\">https://github.com/mlflow/mlflow/pull/15970</a></li>\n<li><a href=\"https://github.com/mlflow/mlflow/releases/tag/v3.1.0\">https://github.com/mlflow/mlflow/releases/tag/v3.1.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxj7-3fx5-pp9m\">https://github.com/advisories/GHSA-wxj7-3fx5-pp9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxj7-3fx5-pp9m",
            "title": "[mlflow] MLFlow SSRF via gateway_proxy_handler",
            "date_modified": "2025-06-23T21:22:09.000Z",
            "date_published": "2025-06-23T15:31:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxj7-3fx5-pp9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>XSS - Errors in filters from website page change detection watches were not being filtered.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>0.50.4</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hwpg-x5hw-vpv9\">https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hwpg-x5hw-vpv9</a></li>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/commit/3d5a544ea674cfce517adcd498877a8d760d0931\">https://github.com/dgtlmoon/changedetection.io/commit/3d5a544ea674cfce517adcd498877a8d760d0931</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwpg-x5hw-vpv9\">https://github.com/advisories/GHSA-hwpg-x5hw-vpv9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwpg-x5hw-vpv9",
            "title": "[changedetection.io] ChangeDetection.io XSS in watch overview",
            "date_modified": "2025-06-23T21:21:43.000Z",
            "date_published": "2025-06-23T21:21:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwpg-x5hw-vpv9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><code>rfc3161-client</code> 1.0.2 and earlier contain a flaw in their timestamp response signature verification logic. In particular, it performs chain verification against the TSR's embedded certificates up to the trusted root(s), but fails to verify the TSR's own signature against the timestamping leaf certificates. Consequently, vulnerable versions perform insufficient signature validation to properly consider a TSR verified, as the attacker can introduce <em>any</em> TSR signature so long as the embedded leaf chains up to some root TSA.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should immediately upgrade to <code>rfc3161-client</code> 1.0.3 or later.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround possible. Users should immediately upgrade to a fixed version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/trailofbits/rfc3161-client/security/advisories/GHSA-6qhv-4h7r-2g9m\">https://github.com/trailofbits/rfc3161-client/security/advisories/GHSA-6qhv-4h7r-2g9m</a></li>\n<li><a href=\"https://github.com/trailofbits/rfc3161-client/commit/724a184f953e3f171f85cb223871172b41b0d0dc\">https://github.com/trailofbits/rfc3161-client/commit/724a184f953e3f171f85cb223871172b41b0d0dc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qhv-4h7r-2g9m\">https://github.com/advisories/GHSA-6qhv-4h7r-2g9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qhv-4h7r-2g9m",
            "title": "[rfc3161-client] rfc3161-client has insufficient verification for timestamp response signatures",
            "date_modified": "2025-06-20T18:08:42.000Z",
            "date_published": "2025-06-20T18:08:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qhv-4h7r-2g9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>urllib3 <a href=\"https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html\">supports</a> being used in a Pyodide runtime utilizing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">JavaScript Fetch API</a> or falling back on <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>. This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides <a href=\"https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests\">a mechanism</a> to control redirects.</p>\n<p>However, the <code>retries</code> and <code>redirect</code> parameters are ignored with Pyodide; the runtime itself determines redirect behavior.</p>\n<h2 id=\"affected-usages\">Affected usages</h2>\n<p>Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.</p>\n<h2 id=\"remediation\">Remediation</h2>\n<p>If you use urllib3 in Node.js, upgrade to a patched version of urllib3.</p>\n<p>Unfortunately, browsers provide no suitable way which urllib3 can use: <code>XMLHttpRequest</code> provides no control over redirects, the Fetch API returns <code>opaqueredirect</code> responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5\">https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f\">https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-50182\">https://nvd.nist.gov/vuln/detail/CVE-2025-50182</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-48p4-8xcf-vxj5\">https://github.com/advisories/GHSA-48p4-8xcf-vxj5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-48p4-8xcf-vxj5",
            "title": "[urllib3] urllib3 does not control redirects in browsers and Node.js",
            "date_modified": "2025-06-19T15:19:09.000Z",
            "date_published": "2025-06-18T17:50:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-48p4-8xcf-vxj5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>urllib3 handles redirects and retries using the same mechanism, which is controlled by the <code>Retry</code> object. The most common way to disable redirects is at the request level, as follows:</p>\n<pre><code class=\"language-python\">resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False)\nprint(resp.status)\n# 302\n</code></pre>\n<p>However, it is also possible to disable redirects, for all requests, by instantiating a <code>PoolManager</code> and specifying <code>retries</code> in a way that disable redirects:</p>\n<pre><code class=\"language-python\">import urllib3\n\nhttp = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect\nhttp = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above\nhttp = urllib3.PoolManager(retries=False)  # should return the first response\n\nresp = http.request(\"GET\", \"https://httpbin.org/redirect/1\")\n</code></pre>\n<p>However, the <code>retries</code> parameter is currently ignored, which means all the above examples don't disable redirects.</p>\n<h2 id=\"affected-usages\">Affected usages</h2>\n<p>Passing <code>retries</code> on <code>PoolManager</code> instantiation to disable redirects or restrict their number.</p>\n<p>By default, requests and botocore users are not affected.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.</p>\n<h2 id=\"remediation\">Remediation</h2>\n<p>You can remediate this vulnerability with the following steps:</p>\n<ul>\n<li>Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact <a href=\"mailto:sethmichaellarson@gmail.com\">sethmichaellarson@gmail.com</a> to discuss sponsorship or contribution opportunities.</li>\n<li>Disable redirects at the <code>request()</code> level instead of the <code>PoolManager()</code> level.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v\">https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857\">https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-50181\">https://nvd.nist.gov/vuln/detail/CVE-2025-50181</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pq67-6m6q-mj2v\">https://github.com/advisories/GHSA-pq67-6m6q-mj2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pq67-6m6q-mj2v",
            "title": "[urllib3] urllib3 redirects are not disabled when retries are disabled on PoolManager instantiation",
            "date_modified": "2025-06-19T15:19:00.000Z",
            "date_published": "2025-06-18T17:50:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pq67-6m6q-mj2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right.</p>\n<pre><code>- unsafe_add\n- unsafe_sub\n- unsafe_mul\n- unsafe_div\n- pow_mod256\n- |, &amp;, ^ (bitwise operators)\n- bitwise_or (deprecated)\n- bitwise_and (deprecated)\n- bitwise_xor (deprecated)\n- raw_call\n- &lt;, &gt;, &lt;=, &gt;=, ==, !=\n- in, not in (when lhs and rhs are enums)\n</code></pre>\n<p>This behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect:</p>\n<ul>\n<li>state modifying external call </li>\n<li>state modifying internal call</li>\n<li><code>raw_call</code></li>\n<li><code>pop()</code> when used on a Dynamic Array stored in the storage</li>\n<li><code>create_minimal_proxy_to</code></li>\n<li><code>create_copy_of</code></li>\n<li><code>create_from_blueprint</code></li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"language-Vyper\">f:uint256\n\n@internal\ndef side_effect() -&gt; uint256:\n    self.f = 12\n    return 1\n\n@external\ndef foo() -&gt; uint256:\n    return unsafe_add(self.f,self.side_effect()) # returns 13 instead of 1\n</code></pre>\n<pre><code class=\"language-Vyper\">a:DynArray[uint256, 12]\n@external\ndef bar() -&gt; bool:\n    self.a = [1,2,3]\n    return len(self.a) == self.a.pop() # return false instead of true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>not yet patched, will address in a future release. tracking in <a href=\"https://github.com/vyperlang/vyper/issues/3604\">https://github.com/vyperlang/vyper/issues/3604</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When using expressions from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf\">https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40015\">https://nvd.nist.gov/vuln/detail/CVE-2023-40015</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/issues/3604\">https://github.com/vyperlang/vyper/issues/3604</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/issues/4019\">https://github.com/vyperlang/vyper/issues/4019</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/4157\">https://github.com/vyperlang/vyper/pull/4157</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g2xh-c426-v8mf\">https://github.com/advisories/GHSA-g2xh-c426-v8mf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g2xh-c426-v8mf",
            "title": "[vyper] Vyper: reversed order of side effects for some operations",
            "date_modified": "2025-06-18T17:43:51.000Z",
            "date_published": "2023-09-04T16:39:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g2xh-c426-v8mf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Gradio before 4.20 allows credential leakage on Windows.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34510\">https://nvd.nist.gov/vuln/detail/CVE-2024-34510</a></li>\n<li><a href=\"https://github.com/gradio-app/gradio\">https://github.com/gradio-app/gradio</a></li>\n<li><a href=\"https://www.gradio.app/changelog#4-20-0\">https://www.gradio.app/changelog#4-20-0</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/gradio/PYSEC-2024-255.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/gradio/PYSEC-2024-255.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rvfh-h6c7-fc3c\">https://github.com/advisories/GHSA-rvfh-h6c7-fc3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rvfh-h6c7-fc3c",
            "title": "[gradio] Gradio allows credential leakage on Windows",
            "date_modified": "2025-06-17T22:33:36.000Z",
            "date_published": "2024-05-05T21:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rvfh-h6c7-fc3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3730\">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/issues/150835\">https://github.com/pytorch/pytorch/issues/150835</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/pull/150981\">https://github.com/pytorch/pytorch/pull/150981</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.305076\">https://vuldb.com/?ctiid.305076</a></li>\n<li><a href=\"https://vuldb.com/?id.305076\">https://vuldb.com/?id.305076</a></li>\n<li><a href=\"https://vuldb.com/?submit.553645\">https://vuldb.com/?submit.553645</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af\">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>\n<li><a href=\"https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567\">https://github.com/timocafe/tewart-pytorch/commit/46fc5d8e360127361211cb237d5f9eef0223e567</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-887c-mr87-cxwp\">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-887c-mr87-cxwp",
            "title": "[torch] PyTorch Improper Resource Shutdown or Release vulnerability",
            "date_modified": "2025-06-17T22:32:43.000Z",
            "date_published": "2025-04-16T21:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-887c-mr87-cxwp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Langflow versions prior to 1.3.0 are susceptible to code injection in the /api/v1/validate/code endpoint. A remote and unauthenticated attacker can send crafted HTTP requests to execute arbitrary code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/langflow-ai/langflow/security/advisories/GHSA-rvqx-wpfh-mfx7\">https://github.com/langflow-ai/langflow/security/advisories/GHSA-rvqx-wpfh-mfx7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3248\">https://nvd.nist.gov/vuln/detail/CVE-2025-3248</a></li>\n<li><a href=\"https://github.com/langflow-ai/langflow/pull/6911\">https://github.com/langflow-ai/langflow/pull/6911</a></li>\n<li><a href=\"https://github.com/langflow-ai/langflow/commit/faac4db133de32fcb6d483fa9ff52f40ce42bdc0\">https://github.com/langflow-ai/langflow/commit/faac4db133de32fcb6d483fa9ff52f40ce42bdc0</a></li>\n<li><a href=\"https://github.com/langflow-ai/langflow/releases/tag/1.3.0\">https://github.com/langflow-ai/langflow/releases/tag/1.3.0</a></li>\n<li><a href=\"https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai\">https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rvqx-wpfh-mfx7\">https://github.com/advisories/GHSA-rvqx-wpfh-mfx7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rvqx-wpfh-mfx7",
            "title": "[langflow] Langflow Unauth RCE",
            "date_modified": "2025-06-17T20:14:27.000Z",
            "date_published": "2025-06-17T20:14:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rvqx-wpfh-mfx7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mezzanine CMS, in versions prior to 6.1.1, contains a Stored Cross-Site Scripting (XSS) vulnerability in the admin interface. The vulnerability exists in the \"displayable_links_js\" function, which fails to properly sanitize blog post titles before including them in JSON responses served via \"/admin/displayable_links.js\". An authenticated admin user can create a blog post with a malicious JavaScript payload in the title field, then trick another admin user into clicking a direct link to the \"/admin/displayable_links.js\" endpoint, causing the malicious script to execute in their browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-6050\">https://nvd.nist.gov/vuln/detail/CVE-2025-6050</a></li>\n<li><a href=\"https://github.com/stephenmcd/mezzanine/discussions/2080\">https://github.com/stephenmcd/mezzanine/discussions/2080</a></li>\n<li><a href=\"https://https://github.com/stephenmcd/mezzanine/commit/898630d8df48cf3ddb8b9942f59168b93216e3f8\">https://https://github.com/stephenmcd/mezzanine/commit/898630d8df48cf3ddb8b9942f59168b93216e3f8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7pr5-w74r-jjj7\">https://github.com/advisories/GHSA-7pr5-w74r-jjj7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7pr5-w74r-jjj7",
            "title": "[Mezzanine] Mezzanine CMS has a Stored Cross-Site Scripting (XSS) vulnerability in the displayable_links_js function",
            "date_modified": "2025-06-17T15:38:12.000Z",
            "date_published": "2025-06-17T12:31:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7pr5-w74r-jjj7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability classified as critical has been found in themanojdesai python-a2a up to 0.5.5. Affected is the function create_workflow of the file python_a2a/agent_flow/server/api.py. The manipulation leads to path traversal. Upgrading to version 0.5.6 is able to address this issue. It is recommended to upgrade the affected component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-6167\">https://nvd.nist.gov/vuln/detail/CVE-2025-6167</a></li>\n<li><a href=\"https://github.com/themanojdesai/python-a2a/issues/40\">https://github.com/themanojdesai/python-a2a/issues/40</a></li>\n<li><a href=\"https://github.com/themanojdesai/python-a2a/releases/tag/v0.5.6\">https://github.com/themanojdesai/python-a2a/releases/tag/v0.5.6</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.312642\">https://vuldb.com/?ctiid.312642</a></li>\n<li><a href=\"https://vuldb.com/?id.312642\">https://vuldb.com/?id.312642</a></li>\n<li><a href=\"https://vuldb.com/?submit.593613\">https://vuldb.com/?submit.593613</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rp38-pj7h-r8q2\">https://github.com/advisories/GHSA-rp38-pj7h-r8q2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rp38-pj7h-r8q2",
            "title": "[python-a2a] python-a2a has a path traversal in the create_workflow function",
            "date_modified": "2025-06-17T15:37:17.000Z",
            "date_published": "2025-06-17T09:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rp38-pj7h-r8q2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>pycares is vulnerable to a use-after-free condition that occurs when a Channel object is garbage collected while DNS queries are still pending. This results in a fatal Python error and interpreter crash.</p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"root-cause\">Root Cause</h3>\n<p>The vulnerability stems from improper handling of callback references when the Channel object is destroyed:</p>\n<ol>\n<li>When a DNS query is initiated, pycares stores a callback reference using <code>ffi.new_handle()</code></li>\n<li>If the Channel object is garbage collected while queries are pending, the callback references become invalid</li>\n<li>When c-ares attempts to invoke the callback, it accesses freed memory, causing a fatal error</li>\n</ol>\n<p>This issue was much more likely to occur when using <code>event_thread=True</code> but could happen without it under the right circumstances.</p>\n<h3 id=\"technical-details\">Technical Details</h3>\n<p>The core issue is a race condition between Python's garbage collector and c-ares's callback execution:</p>\n<ol>\n<li>When <code>__del__</code> is called from within a c-ares callback context, we cannot immediately call <code>ares_destroy()</code> because c-ares is still executing code after the callback returns</li>\n<li>c-ares needs to execute cleanup code after our Python callback returns (specifically at lines 1422-1429 in ares_process.c)</li>\n<li>If we destroy the channel too quickly, c-ares accesses freed memory</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications using <code>pycares</code> can be crashed remotely by triggering DNS queries that result in <code>Channel</code> objects being garbage collected before query completion. This is particularly problematic in scenarios where:</p>\n<ul>\n<li>Channel objects are created per-request</li>\n<li>Multiple failed DNS queries are processed rapidly</li>\n<li>The application doesn't properly manage Channel lifecycle</li>\n</ul>\n<p>The error manifests as:</p>\n<pre><code>Fatal Python error: b_from_handle: ffi.from_handle() detected that the address passed points to garbage\n</code></pre>\n<h2 id=\"fix\">Fix</h2>\n<p>The vulnerability has been fixed in pycares 4.9.0 by implementing a safe channel destruction mechanism</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<h3 id=\"for-application-developers\">For Application Developers</h3>\n<ol>\n<li><strong>Upgrade to pycares &gt;= 4.9.0</strong> - This version includes the fix and requires no code changes</li>\n<li><strong>Best practices</strong> (optional but recommended):<pre><code class=\"language-python\"># Explicit cleanup\nchannel.close()\n\n# Or use context manager\nwith pycares.Channel() as channel:\n    # ... use channel ...\n# Automatically closed\n</code></pre>\n</li>\n<li><strong>Avoid creating Channel objects per-request</strong> - Prefer long-lived instances for better performance and safety</li>\n</ol>\n<p>The fix is completely transparent - no API changes or code modifications are required.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This vulnerability was reported by @vEpiphyte through the aio-libs security program.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saghul/pycares/security/advisories/GHSA-5qpg-rh4j-qp35\">https://github.com/saghul/pycares/security/advisories/GHSA-5qpg-rh4j-qp35</a></li>\n<li><a href=\"https://github.com/saghul/pycares/commit/ebfd7d71eb8e74bc1057a361ea79a5906db510d4\">https://github.com/saghul/pycares/commit/ebfd7d71eb8e74bc1057a361ea79a5906db510d4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5qpg-rh4j-qp35\">https://github.com/advisories/GHSA-5qpg-rh4j-qp35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5qpg-rh4j-qp35",
            "title": "[pycares] pycares has a Use-After-Free Vulnerability",
            "date_modified": "2025-06-16T16:09:47.000Z",
            "date_published": "2025-06-16T16:09:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5qpg-rh4j-qp35"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of <strong>recursive groups</strong>, <strong>recursive messages</strong> or <strong>a series of <a href=\"https://protobuf.dev/programming-guides/encoding/#groups\"><code>SGROUP</code></a> tags</strong> can be corrupted by exceeding the Python recursion limit.</p>\n<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team\n<a href=\"mailto:ecosystem@trailofbits.com\">ecosystem@trailofbits.com</a></p>\n<p>Affected versions: This issue only affects the <a href=\"https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends\">pure-Python implementation</a> of protobuf-python backend. This is the implementation when <code>PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python</code> environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.</p>\n<p>This is a Python variant of a <a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8\">previous issue affecting protobuf-java</a>.</p>\n<h3 id=\"severity\">Severity</h3>\n<p>This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>For reproduction details, please refer to the unit tests <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98\">decoder_test.py</a> and <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478\">message_test</a></p>\n<h3 id=\"remediation-and-mitigation\">Remediation and Mitigation</h3>\n<p>A mitigation is available now. Please update to the latest available versions of the following packages:</p>\n<ul>\n<li>protobuf-python(4.25.8, 5.29.5, 6.31.1)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8\">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7\">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4565\">https://nvd.nist.gov/vuln/detail/CVE-2025-4565</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901\">https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98\">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478\">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends\">https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8qvm-5x2c-j2w7\">https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8qvm-5x2c-j2w7",
            "title": "[protobuf] protobuf-python has a potential Denial of Service issue",
            "date_modified": "2025-06-16T16:03:02.000Z",
            "date_published": "2025-06-16T16:02:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8qvm-5x2c-j2w7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of <strong>recursive groups</strong>, <strong>recursive messages</strong> or <strong>a series of <a href=\"https://protobuf.dev/programming-guides/encoding/#groups\"><code>SGROUP</code></a> tags</strong> can be corrupted by exceeding the Python recursion limit.</p>\n<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team\n<a href=\"mailto:ecosystem@trailofbits.com\">ecosystem@trailofbits.com</a></p>\n<p>Affected versions: This issue only affects the <a href=\"https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends\">pure-Python implementation</a> of protobuf-python backend. This is the implementation when <code>PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python</code> environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.</p>\n<p>This is a Python variant of a <a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8\">previous issue affecting protobuf-java</a>.</p>\n<h3 id=\"severity\">Severity</h3>\n<p>This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>For reproduction details, please refer to the unit tests <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98\">decoder_test.py</a> and <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478\">message_test</a></p>\n<h3 id=\"remediation-and-mitigation\">Remediation and Mitigation</h3>\n<p>A mitigation is available now. Please update to the latest available versions of the following packages:</p>\n<ul>\n<li>protobuf-python(4.25.8, 5.29.5, 6.31.1)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8\">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7\">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4565\">https://nvd.nist.gov/vuln/detail/CVE-2025-4565</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901\">https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98\">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478\">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends\">https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8qvm-5x2c-j2w7\">https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8qvm-5x2c-j2w7",
            "title": "[protobuf] protobuf-python has a potential Denial of Service issue",
            "date_modified": "2025-06-16T16:03:02.000Z",
            "date_published": "2025-06-16T16:02:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8qvm-5x2c-j2w7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of <strong>recursive groups</strong>, <strong>recursive messages</strong> or <strong>a series of <a href=\"https://protobuf.dev/programming-guides/encoding/#groups\"><code>SGROUP</code></a> tags</strong> can be corrupted by exceeding the Python recursion limit.</p>\n<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team\n<a href=\"mailto:ecosystem@trailofbits.com\">ecosystem@trailofbits.com</a></p>\n<p>Affected versions: This issue only affects the <a href=\"https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends\">pure-Python implementation</a> of protobuf-python backend. This is the implementation when <code>PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python</code> environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.</p>\n<p>This is a Python variant of a <a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8\">previous issue affecting protobuf-java</a>.</p>\n<h3 id=\"severity\">Severity</h3>\n<p>This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>For reproduction details, please refer to the unit tests <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98\">decoder_test.py</a> and <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478\">message_test</a></p>\n<h3 id=\"remediation-and-mitigation\">Remediation and Mitigation</h3>\n<p>A mitigation is available now. Please update to the latest available versions of the following packages:</p>\n<ul>\n<li>protobuf-python(4.25.8, 5.29.5, 6.31.1)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8\">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7\">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8qvm-5x2c-j2w7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4565\">https://nvd.nist.gov/vuln/detail/CVE-2025-4565</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901\">https://github.com/protocolbuffers/protobuf/commit/17838beda2943d08b8a9d4df5b68f5f04f26d901</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98\">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478\">https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends\">https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8qvm-5x2c-j2w7\">https://github.com/advisories/GHSA-8qvm-5x2c-j2w7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8qvm-5x2c-j2w7",
            "title": "[protobuf] protobuf-python has a potential Denial of Service issue",
            "date_modified": "2025-06-16T16:03:02.000Z",
            "date_published": "2025-06-16T16:02:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8qvm-5x2c-j2w7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The audit log notifications included the full IP address of the acting user. This could be obtained by third-party servers such as SMTP relays, or spam filters.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been addressed in Weblate 5.12 via <a href=\"https://github.com/WeblateOrg/weblate/pull/15102\">https://github.com/WeblateOrg/weblate/pull/15102</a>.</p>\n<h3 id=\"references\">References</h3>\n<p>Thanks to <a href=\"https://hackerone.com/micael1\">micael1</a> for reporting this <a href=\"https://hackerone.com/reports/3179850\">issue at HackerOne</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WeblateOrg/weblate/security/advisories/GHSA-4qqf-9m5c-w2c5\">https://github.com/WeblateOrg/weblate/security/advisories/GHSA-4qqf-9m5c-w2c5</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/pull/15102\">https://github.com/WeblateOrg/weblate/pull/15102</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/commit/020b2905e4d001cff2452574d10e6cf3621b5f62\">https://github.com/WeblateOrg/weblate/commit/020b2905e4d001cff2452574d10e6cf3621b5f62</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-49134\">https://nvd.nist.gov/vuln/detail/CVE-2025-49134</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1\">https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4qqf-9m5c-w2c5\">https://github.com/advisories/GHSA-4qqf-9m5c-w2c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4qqf-9m5c-w2c5",
            "title": "[weblate] Weblate exposes personal IP address via e-mail",
            "date_modified": "2025-06-16T21:47:18.000Z",
            "date_published": "2025-06-16T14:52:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4qqf-9m5c-w2c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The verification of the second factor was not subject to rate limiting. The absence of rate limiting on the second factor endpoint allows an attacker with valid credentials to automate OTP guessing. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been addressed in Weblate 5.12 via <a href=\"https://github.com/WeblateOrg/weblate/pull/14918\">https://github.com/WeblateOrg/weblate/pull/14918</a>.</p>\n<h3 id=\"references\">References</h3>\n<p>Thanks to <a href=\"https://hackerone.com/obscuredeer\">obscuredeer</a> for reporting this <a href=\"https://hackerone.com/reports/3150564\">issue at HackerOne</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WeblateOrg/weblate/security/advisories/GHSA-57jg-m997-cx3q\">https://github.com/WeblateOrg/weblate/security/advisories/GHSA-57jg-m997-cx3q</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/pull/14918\">https://github.com/WeblateOrg/weblate/pull/14918</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/commit/f806293451248c5d95e45b3b507e9d158bc4f384\">https://github.com/WeblateOrg/weblate/commit/f806293451248c5d95e45b3b507e9d158bc4f384</a></li>\n<li><a href=\"https://hackerone.com/reports/3150564\">https://hackerone.com/reports/3150564</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-47951\">https://nvd.nist.gov/vuln/detail/CVE-2025-47951</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1\">https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.12.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57jg-m997-cx3q\">https://github.com/advisories/GHSA-57jg-m997-cx3q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57jg-m997-cx3q",
            "title": "[weblate] Weblate lacks rate limiting when verifying second factor",
            "date_modified": "2025-06-17T17:16:11.000Z",
            "date_published": "2025-06-16T14:52:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57jg-m997-cx3q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Directory traversal vulnerability in recv_file method allows arbitrary files to be written to the master cache directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38824\">https://nvd.nist.gov/vuln/detail/CVE-2024-38824</a></li>\n<li><a href=\"https://docs.saltproject.io/en/3006/topics/releases/3006.12.html\">https://docs.saltproject.io/en/3006/topics/releases/3006.12.html</a></li>\n<li><a href=\"https://docs.saltproject.io/en/3007/topics/releases/3007.4.html\">https://docs.saltproject.io/en/3007/topics/releases/3007.4.html</a></li>\n<li><a href=\"https://github.com/saltstack/salt/commit/c4ad23f0f3132d8d8a88f19fa537dc42cf21b215\">https://github.com/saltstack/salt/commit/c4ad23f0f3132d8d8a88f19fa537dc42cf21b215</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8pcp-r83j-fc92\">https://github.com/advisories/GHSA-8pcp-r83j-fc92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8pcp-r83j-fc92",
            "title": "[salt] Salt vulnerable to directory traversal attack in file receiving method",
            "date_modified": "2025-06-13T21:58:02.000Z",
            "date_published": "2025-06-13T09:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8pcp-r83j-fc92"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}