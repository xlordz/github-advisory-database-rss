{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53908\">https://nvd.nist.gov/vuln/detail/CVE-2024-53908</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/12/04/3\">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/dec/04/security-releases\">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9g8-fxxm-xg86\">https://github.com/advisories/GHSA-m9g8-fxxm-xg86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9g8-fxxm-xg86",
            "title": "[django] Django SQL injection in HasKey(lhs, rhs) on Oracle",
            "date_modified": "2025-01-14T16:37:43.000Z",
            "date_published": "2024-12-06T12:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9g8-fxxm-xg86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53908\">https://nvd.nist.gov/vuln/detail/CVE-2024-53908</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/12/04/3\">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/dec/04/security-releases\">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9g8-fxxm-xg86\">https://github.com/advisories/GHSA-m9g8-fxxm-xg86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9g8-fxxm-xg86",
            "title": "[django] Django SQL injection in HasKey(lhs, rhs) on Oracle",
            "date_modified": "2025-01-14T16:37:43.000Z",
            "date_published": "2024-12-06T12:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9g8-fxxm-xg86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53908\">https://nvd.nist.gov/vuln/detail/CVE-2024-53908</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/12/04/3\">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/dec/04/security-releases\">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-157.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9g8-fxxm-xg86\">https://github.com/advisories/GHSA-m9g8-fxxm-xg86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9g8-fxxm-xg86",
            "title": "[django] Django SQL injection in HasKey(lhs, rhs) on Oracle",
            "date_modified": "2025-01-14T16:37:43.000Z",
            "date_published": "2024-12-06T12:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9g8-fxxm-xg86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When the Vyper Compiler uses the precompiles EcRecover (0x1) and Identity (0x4), the success flag of the call is not checked. As a consequence an attacker can provide a specific amount of gas to make these calls fail but let the overall execution continue. Then the execution result can be incorrect.</p>\n<p>Based on EVM's rules, after the failed precompile the remaining code has only 1/64 of the pre-call-gas left (as 63/64 were forwarded and spent). Hence, only fairly simple executions can follow the failed precompile calls. Therefore, we found no significantly impacted real-world contracts.</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"the-relevant-precompiles\">The relevant precompiles</h4>\n<h5 id=\"ecrecover\">EcRecover</h5>\n<p>EcRecover is used in vyper's <code>ecrecover</code> built-in. As the precompile consumes 3000 gas, any execution after an out-of-gas EcRecover call has at most 47 gas left.</p>\n<h5 id=\"identity\">Identity</h5>\n<ul>\n<li>The Identity precompile is used in vyper to perform memory copy operations. As its cost is variable, a variable amount of gas might be left after a failed call. The bigger the copy operation, the more gas can be left. Hence, a failed call to Identity could theoretically be followed by successful storage changes or emitted events.</li>\n<li>Identity is no longer used when <code>evm-version</code> <code>cancun</code> is used (because <code>MCOPY</code> is used instead). In 0.4.0 <code>cancun</code> is default, in 0.3.10 <code>cancun</code> is an option, otherwise <code>cancun</code> is not available. As only pre-<code>cancun</code> versions are relevant, we don't have to consider transient storage operations succeeding a failed call to Identity.</li>\n</ul>\n<h4 id=\"the-other-precompiles\">The other precompiles</h4>\n<ul>\n<li>Calls to <code>Sha2</code>, <code>ecAdd</code>, and <code>ecMul</code> have success checks and have had them for a long time.</li>\n<li>The precompiles <code>modexp</code>, <code>ripe</code>, <code>blake</code>, <code>ecPairing</code>, and <code>Point Evaluation</code> have no builtins in vyper.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>In the following we provide concrete examples of incorrectly generated bytecode. These examples are not optimized, but rather Proof-of-Concepts. The list is also not exhaustive.</p>\n<h4 id=\"ecrecover-use\"><code>ecrecover</code> use</h4>\n<ul>\n<li>Affected versions: 0.2.0 - 0.4.0 </li>\n<li>For older compiler versions (&lt;=0.3.9) it behaves similarly to this <a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-f5x6-7qgp-jhf3\">older advisory</a>. As no data is returned, the previous value of the memory word is returned to the user. Hence, any dirty bytes might be returned. Contracts with older compiler versions and <code>ecrecover</code> were checked.</li>\n<li>For new vyper versions, the output buffer is zeroed, so when the call fails zero is returned. This is an incorrect result, but developers should anyway check for 0 as a failure case. Hence, this is unlikely to result in issues. However, we did search for such cases.</li>\n<li>As mentioned above at most 47 gas is left after the failed call, hence a <code>return</code> is the most realistic scenario to be attacked.</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(hash: bytes32, v: uint256, r:uint256, s:uint256) -&gt; address:\n    return ecrecover(hash, v, r, s)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">print(\n    c.foo(\n        binascii.unhexlify(\n            \"6c9c5e133b8aafb2ea74f524a5263495e7ae5701c7248805f7b511d973dc7055\"\n        ),\n        28,\n        78616903610408968922803823221221116251138855211764625814919875002740131251724,\n        37668412420813231458864536126575229553064045345107737433087067088194345044408,\n    )\n)  # Returns 0x9eE53ad38Bb67d745223a4257D7d48cE973FeB7A\n\nprint(\n    c.foo(\n        binascii.unhexlify(\n            \"6c9c5e133b8aafb2ea74f524a5263495e7ae5701c7248805f7b511d973dc7055\"\n        ),\n        28,\n        78616903610408968922803823221221116251138855211764625814919875002740131251724,\n        37668412420813231458864536126575229553064045345107737433087067088194345044408,\n        gas=3000,\n    )\n)  # Returns 0x0000000000000000000000000000000000000000\n</code></pre>\n<h4 id=\"identity-to-copy-dynamic-arrays\">Identity to copy Dynamic Arrays</h4>\n<ul>\n<li>Affected versions: 0.3.2 - 0.3.9</li>\n<li>Dynamic Arrays might be copied on different occasions</li>\n<li>That copy operation can fail leading to incorrect accesses afterwards</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">\n@external\ndef foo() -&gt; uint256:\n    a: DynArray[uint256, 4000] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    b: DynArray[uint256, 4000] = a\n    return b[0]\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">print(c.foo())            # Prints 2\nprint(c.foo(gas=170000))  # Prints 0\n</code></pre>\n<h4 id=\"identity-in-abi-encoding-of-returndata\">Identity in ABI Encoding of Returndata</h4>\n<ul>\n<li>Affected versions: 0.3.2 - 0.4.0</li>\n<li>Complex types such as Dynamic array with Strings inside need to be abi encoded before being returned</li>\n<li>In that <code>return</code> there is a memory copy which can fail</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000], y: String[1000000]) -&gt; DynArray[String[1000000], 2]:\n    z: DynArray[String[1000000], 2] = [x, y]\n    # Some code\n    return z\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata0 = \"a\"*10\ncalldata1 = \"b\"*1000000\nc.foo(calldata0, calldata1)                   # Returns correct data\nc.foo(calldata0, calldata1, gas=48_400_000)   # Returns incorrect data (only first part)\n</code></pre>\n<h4 id=\"assertion-based-on-data-copied-through-identity\">Assertion based on data copied through Identity</h4>\n<ul>\n<li>Affected versions: 0.2.0 - 0.4.0</li>\n<li>An incomplete copy operation might falsify the result of a subsequent <code>assert</code></li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@internal\ndef bar() -&gt; uint256[3000]:\n    a: uint256[3000] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    return a\n\n@external\ndef foo():\n    s: uint256[3000] = self.bar()\n    assert(s[0] == 0)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">try:\n    c.foo()                     # Correctly reverts\nexcept Exception as e:\n    print(\"Correctly reverted\")\ntry:\n    c.foo(gas=210000)           # Incorrectly succeeds\n    print(\"Incorrectly succeeded\")\nexcept Exception:\n    pass\n</code></pre>\n<h4 id=\"identity-used-in-raw_revert\">Identity used in <code>raw_revert</code></h4>\n<ul>\n<li>Affected versions: 0.3.8 - 0.4.0</li>\n<li>A copy operation might appear as part of raw_revert</li>\n<li>As a result the revert reason might be incorrect</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\ndef foo(_data: Bytes[10000]):\n    b: Bytes[10000] = _data\n    raw_revert(b)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = binascii.unhexlify(\"bb\" * 10_000)\nc.foo(calldata)       # Has correct revert reason\nc.foo(calldata, gas=4_800)       # Has empty revert reason, but not out-of-gas\n</code></pre>\n<h4 id=\"identity-to-copy-static-arrays\">Identity to copy static arrays</h4>\n<ul>\n<li>Affected versions: 0.2.0 - 0.4.0</li>\n<li>Vyper might perform a memory copy for static arrays, e.g. when moving them in and out of internal functions</li>\n<li>As this access is especially cheap (due to the static checks) it can also happen for smaller sizes</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\ndef foo(x: uint256[2500]) -&gt; uint256:\n    s: uint256[2500] = x\n    t: uint256[2500] = s\n    return t[0]\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = [2] + [0] * 2499\nprint(c.foo(calldata))              # Prints 2\nprint(c.foo(calldata, gas=74500))   # Prints 0\n</code></pre>\n<h4 id=\"identity-to-copy-and-return-string-or-bytes\">Identity to copy and return String or Bytes</h4>\n<ul>\n<li>Affected versions: 0.20 - 0.4.0</li>\n<li>Multiple situations in vyper might trigger a memory copy operation, e.g. moving data in and out of internal functions</li>\n<li>If the target buffer is later returned, incorrect data might be returned</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000]) -&gt; String[1000000]:\n    return x\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = \"a\"*1000000\nx = c.foo(calldata)                 # Returns calldata\ny = c.foo(calldata, gas=8_000_000)  # Returns empty data\n</code></pre>\n<h4 id=\"identity-and-accessing-the-length-of-the-target-data\">Identity and accessing the length of the target data</h4>\n<ul>\n<li>Affected versions: 0.3.10 - 0.4.0</li>\n<li>Accessing the data is fairly cheap, making it possible for smaller data copies</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000]) -&gt; uint256:\n    y: String[1000000] = x\n    return len(y)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = \"a\"*1000000\nx = c.foo(calldata)                 # Returns correct length\ny = c.foo(calldata, gas=7_929_200)  # Returns incorrect length\n</code></pre>\n<h4 id=\"identity-to-copy-and-return-string-or-bytes-1\">Identity to copy and return String or Bytes</h4>\n<ul>\n<li>Affected versions: 0.3.10 - 0.4.0</li>\n<li>Multiple situations in vyper might trigger a memory copy operation, e.g. moving data in and out of internal functions</li>\n<li>If the target buffer is later returned, incorrect data might be returned</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000]) -&gt; String[1000000]:\n    return x\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = \"a\"*1000000\nx = c.foo(calldata)                 # Returns calldata\ny = c.foo(calldata, gas=8_000_000)  # Returns empty data\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A contract search was conducted and yielded no significant results.</p>\n<p>The advisory was rated a medium because the likelihood is low, but difficult to detect by source code analysis alone, and could yield unexpected results if a contract is affected by the bug.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-vgf2-gvx8-xwc3\">https://github.com/vyperlang/vyper/security/advisories/GHSA-vgf2-gvx8-xwc3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vgf2-gvx8-xwc3\">https://github.com/advisories/GHSA-vgf2-gvx8-xwc3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vgf2-gvx8-xwc3",
            "title": "[vyper] Vyper Does Not Check the Success of Certain Precompile Calls",
            "date_modified": "2025-01-14T16:34:21.000Z",
            "date_published": "2025-01-14T16:34:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vgf2-gvx8-xwc3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>Gradio's Access Control List (ACL) for file paths can be bypassed by altering the letter case of a blocked file or directory path. This vulnerability arises due to the lack of case normalization in the file path validation logic. On case-insensitive file systems, such as those used by Windows and macOS, this flaw enables attackers to circumvent security restrictions and access sensitive files that should be protected.</p>\n<p>This issue can lead to unauthorized data access, exposing sensitive information and undermining the integrity of Gradio's security model. Given Gradio's popularity for building web applications, particularly in machine learning and AI, this vulnerability may pose a substantial threat if exploited in production environments.</p>\n<h2 id=\"affected-version\">Affected Version</h2>\n<p>Gradio &lt;= 5.6.0</p>\n<h2 id=\"impact\">Impact</h2>\n<ul>\n<li><p><strong>Unauthorized Access</strong>: Sensitive files or directories specified in <code>blocked_paths</code> can be accessed by attackers.</p>\n</li>\n<li><p><strong>Data Exposure</strong>: Critical files, such as configuration files or user data, may be leaked.</p>\n</li>\n<li><p><strong>Security Breach</strong>: This can lead to broader application or system compromise if sensitive files contain credentials or API keys.</p>\n</li>\n</ul>\n<h2 id=\"root-cause\">Root Cause</h2>\n<p>The <a href=\"https://github.com/gradio-app/gradio/blob/main/gradio/blocks.py#L2310\"><code>blocked_paths</code></a> parameter in Gradio block's initial configuration is designed to restrict user access to specific files or directories in the local file system. However, it does not account for case-insensitive operating systems, such as Windows and macOS. This oversight enables attackers to bypass ACL restrictions by changing the case of file paths.</p>\n<p>Vulnerable snippet: </p>\n<pre><code class=\"language-python\"># https://github.com/gradio-app/gradio/blob/main/gradio/utils.py#L1500-L1517\ndef is_allowed_file(\n    path: Path,\n    blocked_paths: Sequence[str | Path],\n    allowed_paths: Sequence[str | Path],\n    created_paths: Sequence[str | Path],\n) -&gt; tuple[\n    bool, Literal[\"in_blocklist\", \"allowed\", \"created\", \"not_created_or_allowed\"]\n]:\n    in_blocklist = any(\n        is_in_or_equal(path, blocked_path) for blocked_path in blocked_paths\n    )\n    if in_blocklist:\n        return False, \"in_blocklist\"\n    if any(is_in_or_equal(path, allowed_path) for allowed_path in allowed_paths):\n        return True, \"allowed\"\n    if any(is_in_or_equal(path, created_path) for created_path in created_paths):\n        return True, \"created\"\n    return False, \"not_created_or_allowed\"\n</code></pre>\n<p>Gradio relies on <code>is_in_or_equal</code> to determine if a file path is restricted. However, this logic fails to handle case variations in paths on case-insensitive file systems, leading to the bypass.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<h3 id=\"steps-to-reproduce\">Steps to Reproduce</h3>\n<ul>\n<li><p>Deploy a Gradio demo app on a case-insensitive operating system (e.g., Windows or macOS).</p>\n<pre><code class=\"language-bash\">import gradio as gr\ndef update(name):\n    return f\"Welcome to Gradio, {name}!\"\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"Start typing below and then click **Run** to see the output.\")\n    with gr.Row():\n        inp = gr.Textbox(placeholder=\"What is your name?\")\n        out = gr.Textbox()\n    btn = gr.Button(\"Run\")\n    btn.click(fn=update, inputs=inp, outputs=out)\n\ndemo.launch(blocked_paths=['resources/admin'], allowed_paths=['resources/'])\n</code></pre>\n</li>\n<li><p>Set up the file system:</p>\n<ul>\n<li><p>Create a folder named <code>resources</code> in the same directory as the app, containing a file <code>1.txt</code>.</p>\n</li>\n<li><p>Inside the <code>resources</code> folder, create a subfolder named <code>admin</code> containing a sensitive file <code>credential.txt</code> (this file should be inaccessible due to <code>blocked_paths</code>).</p>\n</li>\n</ul>\n</li>\n<li><p>Perform the attack:</p>\n<ul>\n<li><p>Access the sensitive file using a case-altered path:</p>\n<pre><code>http://127.0.0.1:PORT/gradio_api/file=resources/adMin/credential.txt\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"expected-result\">Expected Result</h3>\n<p>Access to <code>resources/admin/credential.txt</code> should be blocked.</p>\n<h3 id=\"actual-result\">Actual Result</h3>\n<p>By altering the case in the path (e.g., <code>adMin</code>), the blocked ACL is bypassed, and unauthorized access to the sensitive file is granted.</p>\n<p><img alt=\"image-20241119172439042\" src=\"https://api.2h0ng.wiki:443/noteimages/2024/11/19/17-24-39-883969d4c31ce8a8d2a939654fab56d4.png\"></p>\n<p>This demonstration highlights that flipping the case of restricted paths allows attackers to bypass Gradio's ACL and access sensitive data.</p>\n<h2 id=\"remediation-recommendations\">Remediation Recommendations</h2>\n<ol>\n<li><p><strong>Normalize Path Case</strong>:</p>\n<ul>\n<li><p>Before evaluating paths against the ACL, normalize the case of both the requested path and the blocked paths (e.g., convert all paths to lowercase).</p>\n</li>\n<li><p>Example:</p>\n<pre><code class=\"language-python\">normalized_path = str(path).lower()\nnormalized_blocked_paths = [str(p).lower() for p in blocked_paths]\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>Update Documentation</strong>:</p>\n<ul>\n<li>Warn developers about potential risks when deploying Gradio on case-insensitive file systems.</li>\n</ul>\n</li>\n<li><p><strong>Release Security Patches</strong>:</p>\n<ul>\n<li>Notify users of the vulnerability and release an updated version of Gradio with the fixed logic.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"\"></h2>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gradio-app/gradio/security/advisories/GHSA-j2jg-fq62-7c3h\">https://github.com/gradio-app/gradio/security/advisories/GHSA-j2jg-fq62-7c3h</a></li>\n<li><a href=\"https://github.com/gradio-app/gradio/commit/6b63fdec441b5c9bf910f910a2505d8defbb6bf8\">https://github.com/gradio-app/gradio/commit/6b63fdec441b5c9bf910f910a2505d8defbb6bf8</a></li>\n<li><a href=\"https://github.com/gradio-app/gradio/releases/tag/gradio%405.11.0\">https://github.com/gradio-app/gradio/releases/tag/gradio%405.11.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2jg-fq62-7c3h\">https://github.com/advisories/GHSA-j2jg-fq62-7c3h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2jg-fq62-7c3h",
            "title": "[gradio] Gradio Blocked Path ACL Bypass Vulnerability",
            "date_modified": "2025-01-14T17:16:55.000Z",
            "date_published": "2025-01-14T16:32:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2jg-fq62-7c3h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro and Rasa Open Source that enables an attacker who has the ability to load a maliciously crafted model remotely into a Rasa instance to achieve Remote Code Execution.</p>\n<p>The prerequisites for this are:</p>\n<ul>\n<li>The HTTP API must be enabled on the Rasa instance eg with <code>--enable-api</code>. This is not the default configuration.</li>\n<li>For unauthenticated RCE to be exploitable, the user must not have configured any authentication or other security controls recommended in our documentation.</li>\n<li>For authenticated RCE, the attacker must posses a valid authentication token or JWT to interact with the Rasa API.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>We encourage you to upgrade to a version of Rasa that includes a fix. These are:</p>\n<ul>\n<li>Rasa Pro 3.8.18, 3.9.16, 3.10.12</li>\n<li>Rasa Open Source 3.6.21</li>\n</ul>\n<p>Once you have upgraded your Rasa Pro or Open Source installation, you will need to retrain your model using the fixed version of Rasa Pro or Open Source. If you have a custom component that inherits from one of the components listed below and modified the persist or load method, make sure to update your code. Please contact us in case you encounter any problems.</p>\n<p>Affected components:</p>\n<ul>\n<li><code>CountVectorFeaturizer</code></li>\n<li><code>LexicalSyntacticFeaturizer</code></li>\n<li><code>LogisticRegressionClassifier</code></li>\n<li><code>SklearnIntentClassifier</code></li>\n<li><code>DIETClassifier</code></li>\n<li><code>CRFEntityExtractor</code></li>\n<li><code>TrackerFeaturizer</code></li>\n<li><code>TEDPolicy</code></li>\n<li><code>UnexpectedIntentTEDPolicy</code></li>\n</ul>\n<p>If you are unable to upgrade immediately, please follow our mitigation advice below.</p>\n<h2 id=\"mitigation-advice\">Mitigation Advice</h2>\n<ul>\n<li><p>The unauthenticated RCE can be mitigated by ensuring that you enable authentication for the Rasa HTTP API if this is enabled. This means that in addition to passing <code>--enable-api</code> to Rasa, you should also pass an authentication configuration as described in our documentation <a href=\"https://rasa.com/docs/rasa-pro/production/rest-api/#enabling-the-rest-api\">here</a>. </p>\n</li>\n<li><p>The authenticated RCE can be mitigated by:</p>\n<ul>\n<li>Ensuring that you only load models from trusted sources such as your own CI pipelines. You can check file hashes for model archives to confirm that a model has not been tampered with between training and use.</li>\n<li>Confirming that you have sufficient access controls and utilize the principle of least privilege to control who in your organization has the ability to interact with the Rasa API even with authentication enabled.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"future-releases\">Future Releases</h2>\n<p>As an additional security step, a future release of Rasa Pro will remove the ability to enable the API without any authentication method enabled.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Rasa would like to thank Julian Scheid from Deutsche Telekom Security GmbH for responsible disclosure of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n<li><a href=\"https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6\">https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v",
            "title": "[rasa] Rasa Allows Remote Code Execution via Remote Model Loading",
            "date_modified": "2025-01-14T16:00:22.000Z",
            "date_published": "2025-01-14T16:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro and Rasa Open Source that enables an attacker who has the ability to load a maliciously crafted model remotely into a Rasa instance to achieve Remote Code Execution.</p>\n<p>The prerequisites for this are:</p>\n<ul>\n<li>The HTTP API must be enabled on the Rasa instance eg with <code>--enable-api</code>. This is not the default configuration.</li>\n<li>For unauthenticated RCE to be exploitable, the user must not have configured any authentication or other security controls recommended in our documentation.</li>\n<li>For authenticated RCE, the attacker must posses a valid authentication token or JWT to interact with the Rasa API.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>We encourage you to upgrade to a version of Rasa that includes a fix. These are:</p>\n<ul>\n<li>Rasa Pro 3.8.18, 3.9.16, 3.10.12</li>\n<li>Rasa Open Source 3.6.21</li>\n</ul>\n<p>Once you have upgraded your Rasa Pro or Open Source installation, you will need to retrain your model using the fixed version of Rasa Pro or Open Source. If you have a custom component that inherits from one of the components listed below and modified the persist or load method, make sure to update your code. Please contact us in case you encounter any problems.</p>\n<p>Affected components:</p>\n<ul>\n<li><code>CountVectorFeaturizer</code></li>\n<li><code>LexicalSyntacticFeaturizer</code></li>\n<li><code>LogisticRegressionClassifier</code></li>\n<li><code>SklearnIntentClassifier</code></li>\n<li><code>DIETClassifier</code></li>\n<li><code>CRFEntityExtractor</code></li>\n<li><code>TrackerFeaturizer</code></li>\n<li><code>TEDPolicy</code></li>\n<li><code>UnexpectedIntentTEDPolicy</code></li>\n</ul>\n<p>If you are unable to upgrade immediately, please follow our mitigation advice below.</p>\n<h2 id=\"mitigation-advice\">Mitigation Advice</h2>\n<ul>\n<li><p>The unauthenticated RCE can be mitigated by ensuring that you enable authentication for the Rasa HTTP API if this is enabled. This means that in addition to passing <code>--enable-api</code> to Rasa, you should also pass an authentication configuration as described in our documentation <a href=\"https://rasa.com/docs/rasa-pro/production/rest-api/#enabling-the-rest-api\">here</a>. </p>\n</li>\n<li><p>The authenticated RCE can be mitigated by:</p>\n<ul>\n<li>Ensuring that you only load models from trusted sources such as your own CI pipelines. You can check file hashes for model archives to confirm that a model has not been tampered with between training and use.</li>\n<li>Confirming that you have sufficient access controls and utilize the principle of least privilege to control who in your organization has the ability to interact with the Rasa API even with authentication enabled.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"future-releases\">Future Releases</h2>\n<p>As an additional security step, a future release of Rasa Pro will remove the ability to enable the API without any authentication method enabled.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Rasa would like to thank Julian Scheid from Deutsche Telekom Security GmbH for responsible disclosure of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n<li><a href=\"https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6\">https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v",
            "title": "[rasa-pro] Rasa Allows Remote Code Execution via Remote Model Loading",
            "date_modified": "2025-01-14T16:00:22.000Z",
            "date_published": "2025-01-14T16:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro and Rasa Open Source that enables an attacker who has the ability to load a maliciously crafted model remotely into a Rasa instance to achieve Remote Code Execution.</p>\n<p>The prerequisites for this are:</p>\n<ul>\n<li>The HTTP API must be enabled on the Rasa instance eg with <code>--enable-api</code>. This is not the default configuration.</li>\n<li>For unauthenticated RCE to be exploitable, the user must not have configured any authentication or other security controls recommended in our documentation.</li>\n<li>For authenticated RCE, the attacker must posses a valid authentication token or JWT to interact with the Rasa API.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>We encourage you to upgrade to a version of Rasa that includes a fix. These are:</p>\n<ul>\n<li>Rasa Pro 3.8.18, 3.9.16, 3.10.12</li>\n<li>Rasa Open Source 3.6.21</li>\n</ul>\n<p>Once you have upgraded your Rasa Pro or Open Source installation, you will need to retrain your model using the fixed version of Rasa Pro or Open Source. If you have a custom component that inherits from one of the components listed below and modified the persist or load method, make sure to update your code. Please contact us in case you encounter any problems.</p>\n<p>Affected components:</p>\n<ul>\n<li><code>CountVectorFeaturizer</code></li>\n<li><code>LexicalSyntacticFeaturizer</code></li>\n<li><code>LogisticRegressionClassifier</code></li>\n<li><code>SklearnIntentClassifier</code></li>\n<li><code>DIETClassifier</code></li>\n<li><code>CRFEntityExtractor</code></li>\n<li><code>TrackerFeaturizer</code></li>\n<li><code>TEDPolicy</code></li>\n<li><code>UnexpectedIntentTEDPolicy</code></li>\n</ul>\n<p>If you are unable to upgrade immediately, please follow our mitigation advice below.</p>\n<h2 id=\"mitigation-advice\">Mitigation Advice</h2>\n<ul>\n<li><p>The unauthenticated RCE can be mitigated by ensuring that you enable authentication for the Rasa HTTP API if this is enabled. This means that in addition to passing <code>--enable-api</code> to Rasa, you should also pass an authentication configuration as described in our documentation <a href=\"https://rasa.com/docs/rasa-pro/production/rest-api/#enabling-the-rest-api\">here</a>. </p>\n</li>\n<li><p>The authenticated RCE can be mitigated by:</p>\n<ul>\n<li>Ensuring that you only load models from trusted sources such as your own CI pipelines. You can check file hashes for model archives to confirm that a model has not been tampered with between training and use.</li>\n<li>Confirming that you have sufficient access controls and utilize the principle of least privilege to control who in your organization has the ability to interact with the Rasa API even with authentication enabled.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"future-releases\">Future Releases</h2>\n<p>As an additional security step, a future release of Rasa Pro will remove the ability to enable the API without any authentication method enabled.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Rasa would like to thank Julian Scheid from Deutsche Telekom Security GmbH for responsible disclosure of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n<li><a href=\"https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6\">https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v",
            "title": "[rasa-pro] Rasa Allows Remote Code Execution via Remote Model Loading",
            "date_modified": "2025-01-14T16:00:22.000Z",
            "date_published": "2025-01-14T16:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro and Rasa Open Source that enables an attacker who has the ability to load a maliciously crafted model remotely into a Rasa instance to achieve Remote Code Execution.</p>\n<p>The prerequisites for this are:</p>\n<ul>\n<li>The HTTP API must be enabled on the Rasa instance eg with <code>--enable-api</code>. This is not the default configuration.</li>\n<li>For unauthenticated RCE to be exploitable, the user must not have configured any authentication or other security controls recommended in our documentation.</li>\n<li>For authenticated RCE, the attacker must posses a valid authentication token or JWT to interact with the Rasa API.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>We encourage you to upgrade to a version of Rasa that includes a fix. These are:</p>\n<ul>\n<li>Rasa Pro 3.8.18, 3.9.16, 3.10.12</li>\n<li>Rasa Open Source 3.6.21</li>\n</ul>\n<p>Once you have upgraded your Rasa Pro or Open Source installation, you will need to retrain your model using the fixed version of Rasa Pro or Open Source. If you have a custom component that inherits from one of the components listed below and modified the persist or load method, make sure to update your code. Please contact us in case you encounter any problems.</p>\n<p>Affected components:</p>\n<ul>\n<li><code>CountVectorFeaturizer</code></li>\n<li><code>LexicalSyntacticFeaturizer</code></li>\n<li><code>LogisticRegressionClassifier</code></li>\n<li><code>SklearnIntentClassifier</code></li>\n<li><code>DIETClassifier</code></li>\n<li><code>CRFEntityExtractor</code></li>\n<li><code>TrackerFeaturizer</code></li>\n<li><code>TEDPolicy</code></li>\n<li><code>UnexpectedIntentTEDPolicy</code></li>\n</ul>\n<p>If you are unable to upgrade immediately, please follow our mitigation advice below.</p>\n<h2 id=\"mitigation-advice\">Mitigation Advice</h2>\n<ul>\n<li><p>The unauthenticated RCE can be mitigated by ensuring that you enable authentication for the Rasa HTTP API if this is enabled. This means that in addition to passing <code>--enable-api</code> to Rasa, you should also pass an authentication configuration as described in our documentation <a href=\"https://rasa.com/docs/rasa-pro/production/rest-api/#enabling-the-rest-api\">here</a>. </p>\n</li>\n<li><p>The authenticated RCE can be mitigated by:</p>\n<ul>\n<li>Ensuring that you only load models from trusted sources such as your own CI pipelines. You can check file hashes for model archives to confirm that a model has not been tampered with between training and use.</li>\n<li>Confirming that you have sufficient access controls and utilize the principle of least privilege to control who in your organization has the ability to interact with the Rasa API even with authentication enabled.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"future-releases\">Future Releases</h2>\n<p>As an additional security step, a future release of Rasa Pro will remove the ability to enable the API without any authentication method enabled.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Rasa would like to thank Julian Scheid from Deutsche Telekom Security GmbH for responsible disclosure of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n<li><a href=\"https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6\">https://github.com/RasaHQ/rasa/commit/2bb1d779d4f4acaf70b6dfa35dd1899dccbb1ae6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpv4-ggrr-7j9v\">https://github.com/advisories/GHSA-cpv4-ggrr-7j9v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v",
            "title": "[rasa-pro] Rasa Allows Remote Code Execution via Remote Model Loading",
            "date_modified": "2025-01-14T16:00:22.000Z",
            "date_published": "2025-01-14T16:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpv4-ggrr-7j9v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. The strip_tags() method and striptags template filter are subject to a potential denial-of-service attack via certain inputs containing large sequences of nested incomplete HTML entities.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53907\">https://nvd.nist.gov/vuln/detail/CVE-2024-53907</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/12/04/3\">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/dec/04/security-releases\">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2024/12/msg00028.html\">https://lists.debian.org/debian-lts-announce/2024/12/msg00028.html</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-156.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-156.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8498-2h75-472j\">https://github.com/advisories/GHSA-8498-2h75-472j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8498-2h75-472j",
            "title": "[django] Django denial-of-service in django.utils.html.strip_tags()",
            "date_modified": "2025-01-14T15:59:59.000Z",
            "date_published": "2024-12-06T12:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8498-2h75-472j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. The strip_tags() method and striptags template filter are subject to a potential denial-of-service attack via certain inputs containing large sequences of nested incomplete HTML entities.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53907\">https://nvd.nist.gov/vuln/detail/CVE-2024-53907</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/12/04/3\">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/dec/04/security-releases\">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2024/12/msg00028.html\">https://lists.debian.org/debian-lts-announce/2024/12/msg00028.html</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-156.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-156.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8498-2h75-472j\">https://github.com/advisories/GHSA-8498-2h75-472j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8498-2h75-472j",
            "title": "[django] Django denial-of-service in django.utils.html.strip_tags()",
            "date_modified": "2025-01-14T15:59:59.000Z",
            "date_published": "2024-12-06T12:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8498-2h75-472j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. The strip_tags() method and striptags template filter are subject to a potential denial-of-service attack via certain inputs containing large sequences of nested incomplete HTML entities.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53907\">https://nvd.nist.gov/vuln/detail/CVE-2024-53907</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/12/04/3\">https://www.openwall.com/lists/oss-security/2024/12/04/3</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/dec/04/security-releases\">https://www.djangoproject.com/weblog/2024/dec/04/security-releases</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2024/12/msg00028.html\">https://lists.debian.org/debian-lts-announce/2024/12/msg00028.html</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-156.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-156.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8498-2h75-472j\">https://github.com/advisories/GHSA-8498-2h75-472j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8498-2h75-472j",
            "title": "[django] Django denial-of-service in django.utils.html.strip_tags()",
            "date_modified": "2025-01-14T15:59:59.000Z",
            "date_published": "2024-12-06T12:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8498-2h75-472j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>virtualenv before 20.26.6 allows command injection through the activation scripts for a virtual environment. Magic template strings are not quoted correctly when replacing. NOTE: this is not the same as CVE-2024-9287.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53899\">https://nvd.nist.gov/vuln/detail/CVE-2024-53899</a></li>\n<li><a href=\"https://github.com/pypa/virtualenv/issues/2768\">https://github.com/pypa/virtualenv/issues/2768</a></li>\n<li><a href=\"https://github.com/pypa/virtualenv/pull/2771\">https://github.com/pypa/virtualenv/pull/2771</a></li>\n<li><a href=\"https://github.com/pypa/virtualenv/releases/tag/20.26.6\">https://github.com/pypa/virtualenv/releases/tag/20.26.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqc4-2hc7-8c8v\">https://github.com/advisories/GHSA-rqc4-2hc7-8c8v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqc4-2hc7-8c8v",
            "title": "[virtualenv] virtualenv allows command injection through activation scripts for a virtual environment",
            "date_modified": "2025-01-13T17:01:52.000Z",
            "date_published": "2024-11-24T18:31:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqc4-2hc7-8c8v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>LFI in Ray's log API endpoint allows attackers to read any file on the server without authentication. The issue is fixed in version 2.8.1+. Ray maintainers response can be found here: <a href=\"https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023\">https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6021\">https://nvd.nist.gov/vuln/detail/CVE-2023-6021</a></li>\n<li><a href=\"https://huntr.com/bounties/5039c045-f986-4cbc-81ac-370fe4b0d3f8\">https://huntr.com/bounties/5039c045-f986-4cbc-81ac-370fe4b0d3f8</a></li>\n<li><a href=\"https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023\">https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023</a></li>\n<li><a href=\"https://github.com/ray-project/ray/releases/tag/ray-2.8.1\">https://github.com/ray-project/ray/releases/tag/ray-2.8.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pww-qvr8-6mhp\">https://github.com/advisories/GHSA-3pww-qvr8-6mhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pww-qvr8-6mhp",
            "title": "[ray] Ray Path Traversal vulnerability",
            "date_modified": "2025-01-09T23:40:01.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pww-qvr8-6mhp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>LFI in Ray's /static/ directory allows attackers to read any file on the server without authentication. The issue is fixed in version 2.8.1+. Ray maintainers response can be found here: <a href=\"https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023\">https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6020\">https://nvd.nist.gov/vuln/detail/CVE-2023-6020</a></li>\n<li><a href=\"https://huntr.com/bounties/83dd8619-6dc3-4c98-8f1b-e620fedcd1f6\">https://huntr.com/bounties/83dd8619-6dc3-4c98-8f1b-e620fedcd1f6</a></li>\n<li><a href=\"https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023\">https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023</a></li>\n<li><a href=\"https://github.com/ray-project/ray/releases/tag/ray-2.8.1\">https://github.com/ray-project/ray/releases/tag/ray-2.8.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6cxr-8q3m-jwrr\">https://github.com/advisories/GHSA-6cxr-8q3m-jwrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6cxr-8q3m-jwrr",
            "title": "[ray] Ray Missing Authorization vulnerability",
            "date_modified": "2025-01-09T23:39:16.000Z",
            "date_published": "2023-11-16T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6cxr-8q3m-jwrr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A command injection exists in Ray's cpu_profile URL parameter allowing attackers to execute os commands on the system running the ray dashboard remotely without authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6019\">https://nvd.nist.gov/vuln/detail/CVE-2023-6019</a></li>\n<li><a href=\"https://huntr.com/bounties/d0290f3c-b302-4161-89f2-c13bb28b4cfe\">https://huntr.com/bounties/d0290f3c-b302-4161-89f2-c13bb28b4cfe</a></li>\n<li><a href=\"https://github.com/ray-project/ray/releases/tag/ray-2.8.1\">https://github.com/ray-project/ray/releases/tag/ray-2.8.1</a></li>\n<li><a href=\"https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023\">https://www.anyscale.com/blog/update-on-ray-cves-cve-2023-6019-cve-2023-6020-cve-2023-6021-cve-2023-48022-cve-2023-48023</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3xg-wv58-5p43\">https://github.com/advisories/GHSA-h3xg-wv58-5p43</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3xg-wv58-5p43",
            "title": "[ray] Ray OS Command Injection vulnerability",
            "date_modified": "2025-01-09T23:37:56.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3xg-wv58-5p43"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Vulnerability Summary</strong>\nA type confusion vulnerability exists in Strawberry GraphQL's relay integration that affects multiple ORM integrations (Django, SQLAlchemy, Pydantic). The vulnerability occurs when multiple GraphQL types are mapped to the same underlying model while using the relay <code>node</code> interface.</p>\n<p><strong>Affected Components</strong></p>\n<ul>\n<li>Strawberry GraphQL relay integration</li>\n<li>Specifically impacts implementations using:<ul>\n<li>Django integration</li>\n<li>SQLAlchemy integration</li>\n<li>Pydantic integration</li>\n</ul>\n</li>\n</ul>\n<p><strong>Technical Details</strong></p>\n<p>The vulnerability manifests when:</p>\n<ol>\n<li>Multiple GraphQL types inherit from <code>relay.Node</code></li>\n<li>These types are mapped to the same database model</li>\n<li>The global <code>node</code> field is used for type resolution</li>\n</ol>\n<p>Example of vulnerable code:</p>\n<pre><code class=\"language-python\">from fruits.models import Fruit\nimport strawberry_django\nimport strawberry\n\n@strawberry_django.type(Fruit)\nclass FruitType(relay.Node):\n    name: strawberry.auto\n\n@strawberry_django.type(Fruit)\nclass SpecialFruitType(relay.Node):\n    secret_name: strawberry.auto\n\n@strawberry.type\nclass Query:\n    node: relay.Node = strawberry_django.node()\n</code></pre>\n<p><strong>Security Impact</strong></p>\n<p>When querying for a specific type using the global <code>node</code> field (e.g., <code>FruitType:some-id</code>), the resolver may incorrectly return an instance of a different type mapped to the same model (e.g., <code>SpecialFruitType</code>). This can lead to:</p>\n<ol>\n<li>Information disclosure if the alternate type exposes sensitive fields</li>\n<li>Potential privilege escalation if the alternate type contains data intended for restricted access</li>\n</ol>\n<p><strong>Note</strong>\nEven with knowledge of the correct type name (e.g., <code>SpecialFruitType</code>), attackers may still be able to access unauthorized data through direct type queries.</p>\n<p>We recommend to use permission on fields instead of creating a dedicate type.</p>\n<p><strong>Recommendations</strong></p>\n<ol>\n<li>Avoid mapping multiple relay Node types to the same model</li>\n<li>Implement strict access controls at the field resolution level (using permissions)</li>\n<li>Consider using separate models for different access levels of the same data</li>\n<li>Update to <code>strawberry-graphql&gt;=0.257.0</code></li>\n<li>If using <code>strawberry-graphql-django</code>, update to <code>strawberry-graphql-django&gt;=0.54.0</code></li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/strawberry-graphql/strawberry/security/advisories/GHSA-5xh2-23cc-5jc6\">https://github.com/strawberry-graphql/strawberry/security/advisories/GHSA-5xh2-23cc-5jc6</a></li>\n<li><a href=\"https://github.com/strawberry-graphql/strawberry/commit/526eb82b70451c0e59d5a71ae9b7396f59974bd8\">https://github.com/strawberry-graphql/strawberry/commit/526eb82b70451c0e59d5a71ae9b7396f59974bd8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-22151\">https://nvd.nist.gov/vuln/detail/CVE-2025-22151</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5xh2-23cc-5jc6\">https://github.com/advisories/GHSA-5xh2-23cc-5jc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5xh2-23cc-5jc6",
            "title": "[strawberry-graphql] Strawberry GraphQL has type resolution vulnerability in node interface that allows potential data leakage through incorrect type resolution",
            "date_modified": "2025-01-09T22:04:51.000Z",
            "date_published": "2025-01-09T18:51:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5xh2-23cc-5jc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in pgadmin. Users logging into pgAdmin running in server mode using LDAP authentication may be attached to another user's session if multiple connection attempts occur simultaneously.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1907\">https://nvd.nist.gov/vuln/detail/CVE-2023-1907</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2218384\">https://bugzilla.redhat.com/show_bug.cgi?id=2218384</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/issues/6100\">https://github.com/pgadmin-org/pgadmin4/issues/6100</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/commit/fa29ba91632634d961f937ce3ed2c3b5a9d78f59\">https://github.com/pgadmin-org/pgadmin4/commit/fa29ba91632634d961f937ce3ed2c3b5a9d78f59</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/blob/a9974b418c49760d3989b7fb25e052ff16b89ac6/docs/en_US/release_notes_7_0.rst\">https://github.com/pgadmin-org/pgadmin4/blob/a9974b418c49760d3989b7fb25e052ff16b89ac6/docs/en_US/release_notes_7_0.rst</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w6r-748w-mh52\">https://github.com/advisories/GHSA-7w6r-748w-mh52</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w6r-748w-mh52",
            "title": "[pgadmin4] pgAdmin has Incorrect Default Permissions",
            "date_modified": "2025-01-09T17:34:21.000Z",
            "date_published": "2025-01-09T09:31:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w6r-748w-mh52"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In OpenStack Neutron before 25.0.1, neutron/extensions/tagging.py can use an incorrect ID during policy enforcement. It does not apply the proper policy check for changing network tags. An unprivileged tenant is able to change (add and clear) tags on network objects that do not belong to the tenant, and this action is not subjected to the proper policy authorization check. This affects 23 before 23.2.1, 24 before 24.0.2, and 25 before 25.0.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53916\">https://nvd.nist.gov/vuln/detail/CVE-2024-53916</a></li>\n<li><a href=\"https://github.com/openstack/neutron/blob/363ffa6e9e1ab5968f87d45bc2f1cb6394f48b9f/neutron/extensions/tagging.py#L138-L232\">https://github.com/openstack/neutron/blob/363ffa6e9e1ab5968f87d45bc2f1cb6394f48b9f/neutron/extensions/tagging.py#L138-L232</a></li>\n<li><a href=\"https://review.opendev.org/c/openstack/neutron/+/935883\">https://review.opendev.org/c/openstack/neutron/+/935883</a></li>\n<li><a href=\"https://review.opendev.org/q/project:openstack/neutron\">https://review.opendev.org/q/project:openstack/neutron</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/12/03/1\">http://www.openwall.com/lists/oss-security/2024/12/03/1</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2024-005.html\">https://security.openstack.org/ossa/OSSA-2024-005.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f27h-g923-68hw\">https://github.com/advisories/GHSA-f27h-g923-68hw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f27h-g923-68hw",
            "title": "[neutron] OpenStack Neutron can use an incorrect ID during policy enforcement",
            "date_modified": "2025-01-09T15:50:51.000Z",
            "date_published": "2024-11-25T00:31:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f27h-g923-68hw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In OpenStack Neutron before 25.0.1, neutron/extensions/tagging.py can use an incorrect ID during policy enforcement. It does not apply the proper policy check for changing network tags. An unprivileged tenant is able to change (add and clear) tags on network objects that do not belong to the tenant, and this action is not subjected to the proper policy authorization check. This affects 23 before 23.2.1, 24 before 24.0.2, and 25 before 25.0.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53916\">https://nvd.nist.gov/vuln/detail/CVE-2024-53916</a></li>\n<li><a href=\"https://github.com/openstack/neutron/blob/363ffa6e9e1ab5968f87d45bc2f1cb6394f48b9f/neutron/extensions/tagging.py#L138-L232\">https://github.com/openstack/neutron/blob/363ffa6e9e1ab5968f87d45bc2f1cb6394f48b9f/neutron/extensions/tagging.py#L138-L232</a></li>\n<li><a href=\"https://review.opendev.org/c/openstack/neutron/+/935883\">https://review.opendev.org/c/openstack/neutron/+/935883</a></li>\n<li><a href=\"https://review.opendev.org/q/project:openstack/neutron\">https://review.opendev.org/q/project:openstack/neutron</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/12/03/1\">http://www.openwall.com/lists/oss-security/2024/12/03/1</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2024-005.html\">https://security.openstack.org/ossa/OSSA-2024-005.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f27h-g923-68hw\">https://github.com/advisories/GHSA-f27h-g923-68hw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f27h-g923-68hw",
            "title": "[neutron] OpenStack Neutron can use an incorrect ID during policy enforcement",
            "date_modified": "2025-01-09T15:50:51.000Z",
            "date_published": "2024-11-25T00:31:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f27h-g923-68hw"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}