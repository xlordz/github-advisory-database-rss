{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There was a use-after-free bug when passing <code>externref</code>s from the host to guest Wasm content.</p>\n<p>To trigger the bug, you have to explicitly pass multiple <code>externref</code>s from the host to a Wasm instance at the same time, either by</p>\n<ul>\n<li>passing multiple <code>externref</code>s as arguments from host code to a Wasm function,</li>\n<li>or returning multiple <code>externref</code>s to Wasm from a multi-value return function defined in the host.</li>\n</ul>\n<p>If you do not have host code that matches one of these shapes, then you are not impacted.</p>\n<p>If Wasmtime's <a href=\"https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/crates/runtime/src/externref.rs#L493\"><code>VMExternRefActivationsTable</code></a> became filled to capacity after passing the first <code>externref</code> in, then passing in the second <code>externref</code> could trigger a garbage collection. However the first <code>externref</code> is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first <code>externref</code>, which at this point has already been freed.</p>\n<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The bug has been fixed, and users should upgrade to Wasmtime 0.30.0.</p>\n<p>Additionally, we have updated <a href=\"https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs\">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing <code>false</code> to <a href=\"https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types\"><code>wasmtime::Config::wasm_reference_types</code></a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WebAssembly/reference-types/\">The reference types Wasm proposal, which introduces <code>externref</code></a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to us on <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">the Bytecode Alliance Zulip chat</a></li>\n<li>Open an issue in <a href=\"https://github.com/bytecodealliance/wasmtime/\">the <code>bytecodealliance/wasmtime</code> repository</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3\">https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3</a></li>\n<li><a href=\"https://crates.io/crates/wasmtime\">https://crates.io/crates/wasmtime</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39216\">https://nvd.nist.gov/vuln/detail/CVE-2021-39216</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0110.html\">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0\">https://github.com/bytecodealliance/wasmtime-py/compare/0.29.0...0.30.0</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-320.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wasmtime/PYSEC-2021-320.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4cp-h94r-m7xf\">https://github.com/advisories/GHSA-v4cp-h94r-m7xf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4cp-h94r-m7xf",
            "title": "[wasmtime] Use after free passing `externref`s to Wasm in Wasmtime",
            "date_modified": "2024-11-19T18:00:39.000Z",
            "date_published": "2021-09-20T19:54:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4cp-h94r-m7xf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The order of evaluation of the arguments of the builtin functions <code>uint256_addmod</code>, <code>uint256_mulmod</code>, <code>ecadd</code> and <code>ecmul</code> does not follow source order.\n• For <code>uint256_addmod(a,b,c)</code> and <code>uint256_mulmod(a,b,c)</code>, the order is <code>c,a,b</code>.\n• For <code>ecadd(a,b)</code> and <code>ecmul(a,b)</code>, the order is <code>b,a</code>.</p>\n<p>Note that this behaviour is problematic when the evaluation of one of the arguments produces side effects that other arguments depend on. </p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/vyperlang/vyper/pull/3583\">https://github.com/vyperlang/vyper/pull/3583</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When using builtins from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-4hg4-9mf5-wxxq\">https://github.com/vyperlang/vyper/security/advisories/GHSA-4hg4-9mf5-wxxq</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/3583\">https://github.com/vyperlang/vyper/pull/3583</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-41052\">https://nvd.nist.gov/vuln/detail/CVE-2023-41052</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-168.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-168.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hg4-9mf5-wxxq\">https://github.com/advisories/GHSA-4hg4-9mf5-wxxq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hg4-9mf5-wxxq",
            "title": "[vyper] incorrect order of evaluation of side effects for some builtins",
            "date_modified": "2024-11-19T17:22:24.000Z",
            "date_published": "2023-09-04T16:39:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hg4-9mf5-wxxq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>During the audit of <a href=\"https://github.com/lidofinance/gate-seals\">Lido's Gate Seals</a> code <a href=\"https://statemind.io\">statemind</a> team identified a weird behavior of the code that uses <code>raw_call</code>: <a href=\"https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164\">https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164</a> .</p>\n<p>Construction like this:</p>\n<pre><code class=\"language-vyper\">success = raw_call(\n    sealable,\n    _abi_encode(SEAL_DURATION_SECONDS, method_id=method_id(\"pauseFor(uint256)\")),\n    revert_on_failure=False\n)\n</code></pre>\n<p>was not fully documented: <a href=\"https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call\">https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call</a> .</p>\n<p>The documentation says that: if <code>max_outsize=0</code> it should return nothing and then it says that if <code>revert_on_failure=False</code> it should return a <code>success</code> flag in the tuple of response, but what if <code>max_outsize=0</code>  and <code>revert_on_failure=False</code>.</p>\n<img src=\"https://user-images.githubusercontent.com/22330612/232125364-d2b3bbac-0b4f-40cb-80ff-f55d8eafef44.png\" alt=\"image\" width=\"715\">\n\n<p> So the team started researching what exactly happened in that case, after some research we found that the Vyper compiler generates the wrong bytecode in that case, it generates the sequence:</p>\n<pre><code>CALL // call\nMLOAD // MLOAD is wrong since the CALL result is already stored in the stack\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Example of buggy code:</p>\n<pre><code class=\"language-vyper\">@external\ndef returnSome(calling: address, a: uint256) -&gt; bool:\n    success: bool = false\n    success = raw_call(\n        calling,\n        _abi_encode(a, method_id=method_id(\"a(uint256)\")),\n        revert_on_failure=False\n        )\n</code></pre>\n<p>any contract that uses the <code>raw_call</code> with <code>revert_on_failure=False</code> and <code>max_outsize=0</code> receives the wrong response from <code>raw_call</code>. Depending on the memory garbage, the result can be either <code>True</code> or <code>False</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fix by @charles-cooper <a href=\"https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae\">https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The simple workaround is always to put  <code>max_outsize&gt;0</code>.\nWorkaround example <a href=\"https://github.com/lidofinance/gate-seals/pull/5/files\">https://github.com/lidofinance/gate-seals/pull/5/files</a></p>\n<h3 id=\"references\">References</h3>\n<p>Lido's fix: <a href=\"https://github.com/lidofinance/gate-seals/pull/5/files\">https://github.com/lidofinance/gate-seals/pull/5/files</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-w9g2-3w7p-72g9\">https://github.com/vyperlang/vyper/security/advisories/GHSA-w9g2-3w7p-72g9</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae\">https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30629\">https://nvd.nist.gov/vuln/detail/CVE-2023-30629</a></li>\n<li><a href=\"https://github.com/lidofinance/gate-seals/pull/5/files\">https://github.com/lidofinance/gate-seals/pull/5/files</a></li>\n<li><a href=\"https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call\">https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call</a></li>\n<li><a href=\"https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164\">https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-131.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-131.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w9g2-3w7p-72g9\">https://github.com/advisories/GHSA-w9g2-3w7p-72g9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w9g2-3w7p-72g9",
            "title": "[vyper] Incorrect success value returned in vyper",
            "date_modified": "2024-11-19T16:31:36.000Z",
            "date_published": "2023-04-24T22:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w9g2-3w7p-72g9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>when a calling an external contract with no return value, the contract address could be evaluated twice. this is usually only an efficiency problem, but if evaluation of the contract address has side effects, it could result in double evaluation of the side effects.</p>\n<p>in the following example, <code>Foo(msg.sender).bar()</code> is the contract address for the following call (to <code>.foo()</code>), and could get evaluated twice</p>\n<pre><code class=\"language-vyper\">interface Foo:\n    def foo(): nonpayable\n    def bar() -&gt; address: nonpayable\n\n@external\ndef do_stuff():\n    Foo(Foo(msg.sender).bar()).foo()\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>6b4d8ff185de071252feaa1c319712b2d6577f8d</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>assign contract addresses to variables. the above example would change to</p>\n<pre><code class=\"language-vyper\">@external\ndef do_stuff():\n    t: Foo = Foo(msg.sender).bar()\n    t.foo()\n</code></pre>\n<h3 id=\"references\">References</h3>\n<h3 id=\"for-more-information\">For more information</h3>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38\">https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d\">https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29255\">https://nvd.nist.gov/vuln/detail/CVE-2022-29255</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2022-43053.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2022-43053.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v9q-cgpw-cf38\">https://github.com/advisories/GHSA-4v9q-cgpw-cf38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v9q-cgpw-cf38",
            "title": "[vyper] Multiple evaluation of contract address in call in vyper",
            "date_modified": "2024-11-19T16:17:54.000Z",
            "date_published": "2022-06-06T21:23:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v9q-cgpw-cf38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When saving the contents of a rich text field in the admin interface, Wagtail does not apply server-side checks to ensure that link URLs use a valid protocol. A malicious user with access to the admin interface could thus craft a POST request to publish content with <code>javascript:</code> URLs containing arbitrary code. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 2.11.7 (for the LTS 2.11 branch) and Wagtail 2.12.4 (for the current 2.12 branch).</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For sites that cannot easily upgrade to a current supported version, the vulnerability can be patched by adding the following code to a <code>wagtail_hooks.py</code> module in any installed app:</p>\n<pre><code class=\"language-python\">from draftjs_exporter.dom import DOM\nfrom wagtail.admin.rich_text.converters.html_to_contentstate import ExternalLinkElementHandler, PageLinkElementHandler\nfrom wagtail.core import hooks\nfrom wagtail.core.whitelist import check_url\n\n\ndef link_entity(props):\n    id_ = props.get('id')\n    link_props = {}\n\n    if id_ is not None:\n        link_props['linktype'] = 'page'\n        link_props['id'] = id_\n    else:\n        link_props['href'] = check_url(props.get('url'))\n\n    return DOM.create_element('a', link_props, props['children'])\n\n\n@hooks.register('register_rich_text_features', order=1)\ndef register_link(features):\n    features.register_converter_rule('contentstate', 'link', {\n        'from_database_format': {\n            'a[href]': ExternalLinkElementHandler('LINK'),\n            'a[linktype=\"page\"]': PageLinkElementHandler('LINK'),\n        },\n        'to_database_format': {\n            'entity_decorators': {'LINK': link_entity}\n        }\n    })\n</code></pre>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Many thanks to Kevin Breen for reporting this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Visit Wagtail's <a href=\"https://docs.wagtail.io/en/stable/support.html\">support channels</a></li>\n<li>Email us at <a href=\"mailto:security@wagtail.io\">security@wagtail.io</a> (if you wish to send encrypted email, the public key ID is <code>0x6ba1e1a86e0f8ce8</code>)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-wq5h-f9p5-q7fx\">https://github.com/wagtail/wagtail/security/advisories/GHSA-wq5h-f9p5-q7fx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-29434\">https://nvd.nist.gov/vuln/detail/CVE-2021-29434</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/5c7a60977cba478f6a35390ba98cffc2bd41c8a4\">https://github.com/wagtail/wagtail/commit/5c7a60977cba478f6a35390ba98cffc2bd41c8a4</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/915f6ed2bd7d53154103cc4424a0f18695cdad6c\">https://github.com/wagtail/wagtail/commit/915f6ed2bd7d53154103cc4424a0f18695cdad6c</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/compare/v2.11.6...v2.11.7\">https://github.com/wagtail/wagtail/compare/v2.11.6...v2.11.7</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2021-114.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2021-114.yaml</a></li>\n<li><a href=\"https://pypi.org/project/wagtail\">https://pypi.org/project/wagtail</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq5h-f9p5-q7fx\">https://github.com/advisories/GHSA-wq5h-f9p5-q7fx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq5h-f9p5-q7fx",
            "title": "[wagtail] Improper validation of URLs ('Cross-site Scripting') in Wagtail rich text fields",
            "date_modified": "2024-11-19T16:02:33.000Z",
            "date_published": "2021-04-20T14:02:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq5h-f9p5-q7fx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When saving the contents of a rich text field in the admin interface, Wagtail does not apply server-side checks to ensure that link URLs use a valid protocol. A malicious user with access to the admin interface could thus craft a POST request to publish content with <code>javascript:</code> URLs containing arbitrary code. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 2.11.7 (for the LTS 2.11 branch) and Wagtail 2.12.4 (for the current 2.12 branch).</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For sites that cannot easily upgrade to a current supported version, the vulnerability can be patched by adding the following code to a <code>wagtail_hooks.py</code> module in any installed app:</p>\n<pre><code class=\"language-python\">from draftjs_exporter.dom import DOM\nfrom wagtail.admin.rich_text.converters.html_to_contentstate import ExternalLinkElementHandler, PageLinkElementHandler\nfrom wagtail.core import hooks\nfrom wagtail.core.whitelist import check_url\n\n\ndef link_entity(props):\n    id_ = props.get('id')\n    link_props = {}\n\n    if id_ is not None:\n        link_props['linktype'] = 'page'\n        link_props['id'] = id_\n    else:\n        link_props['href'] = check_url(props.get('url'))\n\n    return DOM.create_element('a', link_props, props['children'])\n\n\n@hooks.register('register_rich_text_features', order=1)\ndef register_link(features):\n    features.register_converter_rule('contentstate', 'link', {\n        'from_database_format': {\n            'a[href]': ExternalLinkElementHandler('LINK'),\n            'a[linktype=\"page\"]': PageLinkElementHandler('LINK'),\n        },\n        'to_database_format': {\n            'entity_decorators': {'LINK': link_entity}\n        }\n    })\n</code></pre>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Many thanks to Kevin Breen for reporting this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Visit Wagtail's <a href=\"https://docs.wagtail.io/en/stable/support.html\">support channels</a></li>\n<li>Email us at <a href=\"mailto:security@wagtail.io\">security@wagtail.io</a> (if you wish to send encrypted email, the public key ID is <code>0x6ba1e1a86e0f8ce8</code>)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-wq5h-f9p5-q7fx\">https://github.com/wagtail/wagtail/security/advisories/GHSA-wq5h-f9p5-q7fx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-29434\">https://nvd.nist.gov/vuln/detail/CVE-2021-29434</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/5c7a60977cba478f6a35390ba98cffc2bd41c8a4\">https://github.com/wagtail/wagtail/commit/5c7a60977cba478f6a35390ba98cffc2bd41c8a4</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/915f6ed2bd7d53154103cc4424a0f18695cdad6c\">https://github.com/wagtail/wagtail/commit/915f6ed2bd7d53154103cc4424a0f18695cdad6c</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/compare/v2.11.6...v2.11.7\">https://github.com/wagtail/wagtail/compare/v2.11.6...v2.11.7</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2021-114.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2021-114.yaml</a></li>\n<li><a href=\"https://pypi.org/project/wagtail\">https://pypi.org/project/wagtail</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq5h-f9p5-q7fx\">https://github.com/advisories/GHSA-wq5h-f9p5-q7fx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq5h-f9p5-q7fx",
            "title": "[wagtail] Improper validation of URLs ('Cross-site Scripting') in Wagtail rich text fields",
            "date_modified": "2024-11-19T16:02:33.000Z",
            "date_published": "2021-04-20T14:02:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq5h-f9p5-q7fx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When a form page type is made available to Wagtail editors through the <code>wagtail.contrib.forms</code> app, and the page template is built using Django's standard form rendering helpers such as <code>form.as_p</code> (<a href=\"https://docs.wagtail.io/en/stable/reference/contrib/forms/index.html#usage\">as directed in the documentation</a>), any HTML tags used within a form field's help text will be rendered unescaped in the page. Allowing HTML within help text is <a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.help_text\">an intentional design decision</a> by Django; however, as a matter of policy Wagtail does not allow editors to insert arbitrary HTML by default, as this could potentially be used to carry out cross-site scripting attacks, including privilege escalation. This functionality should therefore not have been made available to editor-level users.</p>\n<p>The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 2.7.4 (for the LTS 2.7 branch) and Wagtail 2.9.3 (for the current 2.9 branch). In these versions, help text will be escaped to prevent the inclusion of HTML tags. Site owners who wish to re-enable the use of HTML within help text (and are willing to accept the risk of this being exploited by editors) may set <code>WAGTAILFORMS_HELP_TEXT_ALLOW_HTML = True</code> in their configuration settings.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to the new versions can secure their form page templates by <a href=\"https://docs.djangoproject.com/en/3.0/topics/forms/#looping-over-the-form-s-fields\">rendering forms field-by-field as per Django's documentation</a>, but omitting the <code>|safe</code> filter when outputting the help text.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Many thanks to Timothy Bautista for reporting this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Visit Wagtail's <a href=\"https://docs.wagtail.io/en/stable/support.html\">support channels</a></li>\n<li>Email us at <a href=\"mailto:security@wagtail.io\">security@wagtail.io</a> (if you wish to send encrypted email, the public key ID is <code>0x6ba1e1a86e0f8ce8</code>)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-2473-9hgq-j7xw\">https://github.com/wagtail/wagtail/security/advisories/GHSA-2473-9hgq-j7xw</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/d9a41e7f24d08c024acc9a3094940199df94db34\">https://github.com/wagtail/wagtail/commit/d9a41e7f24d08c024acc9a3094940199df94db34</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.help_text\">https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.Field.help_text</a></li>\n<li><a href=\"https://docs.wagtail.io/en/stable/reference/contrib/forms/index.html#usage\">https://docs.wagtail.io/en/stable/reference/contrib/forms/index.html#usage</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/blob/master/docs/releases/2.9.3.rst\">https://github.com/wagtail/wagtail/blob/master/docs/releases/2.9.3.rst</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15118\">https://nvd.nist.gov/vuln/detail/CVE-2020-15118</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-154.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-154.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2473-9hgq-j7xw\">https://github.com/advisories/GHSA-2473-9hgq-j7xw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2473-9hgq-j7xw",
            "title": "[wagtail] Cross-Site Scripting in Wagtail",
            "date_modified": "2024-11-19T15:50:11.000Z",
            "date_published": "2020-07-20T17:50:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2473-9hgq-j7xw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A potential timing attack exists on pages or documents that have been protected with a shared password through Wagtail's \"Privacy\" controls. This password check is performed through a character-by-character string comparison, and so an attacker who is able to measure the time taken by this check to a high degree of accuracy could potentially use timing differences to gain knowledge of the password. (This is <a href=\"https://groups.google.com/d/msg/django-developers/iAaq0pvHXuA/fpUuwjK3i2wJ\">understood to be feasible on a local network, but not on the public internet</a>.)</p>\n<p>Privacy settings that restrict access to pages / documents on a per-user or per-group basis (as opposed to a shared password) are unaffected by this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 2.7.3 (for the LTS 2.7 branch), Wagtail 2.8.2 and Wagtail 2.9.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to the new versions can use <a href=\"https://docs.wagtail.io/en/stable/advanced_topics/privacy.html\">user- or group-based privacy restrictions</a> to restrict access to sensitive information; these are unaffected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6\">https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-11037\">https://nvd.nist.gov/vuln/detail/CVE-2020-11037</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/3c030490ed575bb9cd01dfb3a890477dcaeb2edf\">https://github.com/wagtail/wagtail/commit/3c030490ed575bb9cd01dfb3a890477dcaeb2edf</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/b76ab57ee859732b9cf9287d380493ab24061090\">https://github.com/wagtail/wagtail/commit/b76ab57ee859732b9cf9287d380493ab24061090</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/ba9d424bd1ca5ce1910d3de74f5cc07214fbfb11\">https://github.com/wagtail/wagtail/commit/ba9d424bd1ca5ce1910d3de74f5cc07214fbfb11</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/bac3cd0a26b023e595cf2959aae7da15bb5e4340\">https://github.com/wagtail/wagtail/commit/bac3cd0a26b023e595cf2959aae7da15bb5e4340</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-153.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-153.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jjjr-3jcw-f8v6\">https://github.com/advisories/GHSA-jjjr-3jcw-f8v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jjjr-3jcw-f8v6",
            "title": "[wagtail] Potential Observable Timing Discrepancy in Wagtail",
            "date_modified": "2024-11-19T15:42:25.000Z",
            "date_published": "2020-05-07T18:04:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jjjr-3jcw-f8v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A potential timing attack exists on pages or documents that have been protected with a shared password through Wagtail's \"Privacy\" controls. This password check is performed through a character-by-character string comparison, and so an attacker who is able to measure the time taken by this check to a high degree of accuracy could potentially use timing differences to gain knowledge of the password. (This is <a href=\"https://groups.google.com/d/msg/django-developers/iAaq0pvHXuA/fpUuwjK3i2wJ\">understood to be feasible on a local network, but not on the public internet</a>.)</p>\n<p>Privacy settings that restrict access to pages / documents on a per-user or per-group basis (as opposed to a shared password) are unaffected by this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 2.7.3 (for the LTS 2.7 branch), Wagtail 2.8.2 and Wagtail 2.9.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to the new versions can use <a href=\"https://docs.wagtail.io/en/stable/advanced_topics/privacy.html\">user- or group-based privacy restrictions</a> to restrict access to sensitive information; these are unaffected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6\">https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-11037\">https://nvd.nist.gov/vuln/detail/CVE-2020-11037</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/3c030490ed575bb9cd01dfb3a890477dcaeb2edf\">https://github.com/wagtail/wagtail/commit/3c030490ed575bb9cd01dfb3a890477dcaeb2edf</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/b76ab57ee859732b9cf9287d380493ab24061090\">https://github.com/wagtail/wagtail/commit/b76ab57ee859732b9cf9287d380493ab24061090</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/ba9d424bd1ca5ce1910d3de74f5cc07214fbfb11\">https://github.com/wagtail/wagtail/commit/ba9d424bd1ca5ce1910d3de74f5cc07214fbfb11</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/bac3cd0a26b023e595cf2959aae7da15bb5e4340\">https://github.com/wagtail/wagtail/commit/bac3cd0a26b023e595cf2959aae7da15bb5e4340</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-153.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-153.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jjjr-3jcw-f8v6\">https://github.com/advisories/GHSA-jjjr-3jcw-f8v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jjjr-3jcw-f8v6",
            "title": "[wagtail] Potential Observable Timing Discrepancy in Wagtail",
            "date_modified": "2024-11-19T15:42:25.000Z",
            "date_published": "2020-05-07T18:04:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jjjr-3jcw-f8v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A potential timing attack exists on pages or documents that have been protected with a shared password through Wagtail's \"Privacy\" controls. This password check is performed through a character-by-character string comparison, and so an attacker who is able to measure the time taken by this check to a high degree of accuracy could potentially use timing differences to gain knowledge of the password. (This is <a href=\"https://groups.google.com/d/msg/django-developers/iAaq0pvHXuA/fpUuwjK3i2wJ\">understood to be feasible on a local network, but not on the public internet</a>.)</p>\n<p>Privacy settings that restrict access to pages / documents on a per-user or per-group basis (as opposed to a shared password) are unaffected by this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 2.7.3 (for the LTS 2.7 branch), Wagtail 2.8.2 and Wagtail 2.9.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to the new versions can use <a href=\"https://docs.wagtail.io/en/stable/advanced_topics/privacy.html\">user- or group-based privacy restrictions</a> to restrict access to sensitive information; these are unaffected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6\">https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-11037\">https://nvd.nist.gov/vuln/detail/CVE-2020-11037</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/3c030490ed575bb9cd01dfb3a890477dcaeb2edf\">https://github.com/wagtail/wagtail/commit/3c030490ed575bb9cd01dfb3a890477dcaeb2edf</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/b76ab57ee859732b9cf9287d380493ab24061090\">https://github.com/wagtail/wagtail/commit/b76ab57ee859732b9cf9287d380493ab24061090</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/ba9d424bd1ca5ce1910d3de74f5cc07214fbfb11\">https://github.com/wagtail/wagtail/commit/ba9d424bd1ca5ce1910d3de74f5cc07214fbfb11</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/bac3cd0a26b023e595cf2959aae7da15bb5e4340\">https://github.com/wagtail/wagtail/commit/bac3cd0a26b023e595cf2959aae7da15bb5e4340</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-153.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/wagtail/PYSEC-2020-153.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jjjr-3jcw-f8v6\">https://github.com/advisories/GHSA-jjjr-3jcw-f8v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jjjr-3jcw-f8v6",
            "title": "[wagtail] Potential Observable Timing Discrepancy in Wagtail",
            "date_modified": "2024-11-19T15:42:25.000Z",
            "date_published": "2020-05-07T18:04:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jjjr-3jcw-f8v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When waitress receives a header that contains invalid characters it will cause the regular expression engine to catastrophically backtrack causing the process to use 100% CPU time and blocking any other interactions.</p>\n<p>This would allow an attacker to send a single request with an invalid header and take the service offline.</p>\n<p>Invalid header example:</p>\n<pre><code>Bad-header: xxxxxxxxxxxxxxx\\x10\n</code></pre>\n<p>Increasing the number of <code>x</code>'s in the header will increase the amount of time Waitress spends in the regular expression engine.</p>\n<p>This issue was introduced in version 1.4.2 when the regular expression was updated to attempt to match the behaviour required by errata associated with RFC7230.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The regular expression that is used to validate incoming headers has been updated in version 1.4.3, it is recommended that people upgrade to the new version of Waitress as soon as possible.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you have deployed a reverse proxy in front of Waitress it may already be rejecting requests that include invalid headers.</p>\n<h3 id=\"thanks\">Thanks</h3>\n<p>The Pylons Project would like to thank <a href=\"https://github.com/fzembow\">Fil Zembowicz</a> for reaching out and disclosing this vulnerability!</p>\n<h3 id=\"references\">References</h3>\n<p>Catastrophic backtracking explained: <a href=\"https://www.regular-expressions.info/catastrophic.html\">https://www.regular-expressions.info/catastrophic.html</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>open an issue at <a href=\"https://github.com/Pylons/waitress/issues\">https://github.com/Pylons/waitress/issues</a> (if not sensitive or security related)</li>\n<li>email the Pylons Security mailing list: <a href=\"mailto:pylons-project-security@googlegroups.com\">pylons-project-security@googlegroups.com</a> (if security related)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Pylons/waitress/security/advisories/GHSA-73m2-3pwg-5fgc\">https://github.com/Pylons/waitress/security/advisories/GHSA-73m2-3pwg-5fgc</a></li>\n<li><a href=\"https://github.com/Pylons/waitress/commit/6e46f9e3f014d64dd7d1e258eaf626e39870ee1f\">https://github.com/Pylons/waitress/commit/6e46f9e3f014d64dd7d1e258eaf626e39870ee1f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-5236\">https://nvd.nist.gov/vuln/detail/CVE-2020-5236</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2020-155.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2020-155.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-73m2-3pwg-5fgc\">https://github.com/advisories/GHSA-73m2-3pwg-5fgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-73m2-3pwg-5fgc",
            "title": "[waitress] Catastrophic backtracking in regex allows Denial of Service in Waitress",
            "date_modified": "2024-11-19T15:34:35.000Z",
            "date_published": "2020-02-04T03:07:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-73m2-3pwg-5fgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The patches introduced to fix <a href=\"https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4\">https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4</a> were not complete and still would allow an attacker to smuggle requests/split a HTTP request with invalid data.</p>\n<p>This updates the existing CVE with ID: CVE-2019-16789</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Waitress version 1.4.2 has been updated to now validate HTTP headers better to avoid the issue, completely fixing all known issues with whitespace.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no work-arounds, upgrading to Waitress 1.4.2 is highly recommended.</p>\n<h3 id=\"references\">References</h3>\n<p>See <a href=\"https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4\">https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4</a> for more information on the security issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>open an issue at <a href=\"https://github.com/Pylons/waitress/issues\">https://github.com/Pylons/waitress/issues</a> (if not sensitive or security related)</li>\n<li>email the Pylons Security mailing list: <a href=\"mailto:pylons-project-security@googlegroups.com\">pylons-project-security@googlegroups.com</a> (if security related)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Pylons/waitress/security/advisories/GHSA-968f-66r5-5v74\">https://github.com/Pylons/waitress/security/advisories/GHSA-968f-66r5-5v74</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16789\">https://nvd.nist.gov/vuln/detail/CVE-2019-16789</a></li>\n<li><a href=\"https://github.com/github/advisory-review/pull/14604\">https://github.com/github/advisory-review/pull/14604</a></li>\n<li><a href=\"https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes\">https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0720\">https://access.redhat.com/errata/RHSA-2020:0720</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html\">https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html</a></li>\n<li><a href=\"https://github.com/Pylons/waitress/commit/ddb65b489d01d696afa1695b75fdd5df3e4ffdf8\">https://github.com/Pylons/waitress/commit/ddb65b489d01d696afa1695b75fdd5df3e4ffdf8</a></li>\n<li><a href=\"https://github.com/Pylons/waitress/commit/11d9e138125ad46e951027184b13242a3c1de017\">https://github.com/Pylons/waitress/commit/11d9e138125ad46e951027184b13242a3c1de017</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-968f-66r5-5v74\">https://github.com/advisories/GHSA-968f-66r5-5v74</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2019-138.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2019-138.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-968f-66r5-5v74",
            "title": "[waitress] HTTP Request Smuggling in Waitress: Invalid whitespace characters in headers (Follow-up)",
            "date_modified": "2024-11-19T13:58:28.000Z",
            "date_published": "2020-01-06T18:44:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-968f-66r5-5v74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Waitress would parse the <code>Transfer-Encoding</code> header and only look for a single string value, if that value was not <code>chunked</code> it would fall through and use the <code>Content-Length</code> header instead.</p>\n<p>According to the HTTP standard <code>Transfer-Encoding</code> should be a comma separated list, with the inner-most encoding first, followed by any further transfer codings, ending with <code>chunked</code>.</p>\n<p>Requests sent with:</p>\n<pre><code>Transfer-Encoding: gzip, chunked\n</code></pre>\n<p>Would incorrectly get ignored, and the request would use a <code>Content-Length</code> header instead to determine the body size of the HTTP message.</p>\n<p>This could allow for Waitress to treat a single request as multiple requests in the case of HTTP pipelining.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is fixed in Waitress 1.4.0. This brings a range of changes to harden Waitress against potential HTTP request confusions, and may change the behaviour of Waitress behind non-conformist proxies. </p>\n<p>Waitress will now return a 501 Not Implemented error if the <code>Transfer-Encoding</code> is not <code>chunked</code> or contains multiple elements. Waitress does not support any transfer codings such as <code>gzip</code> or <code>deflate</code>.</p>\n<p>The Pylons Project recommends upgrading as soon as possible, while validating that the changes in Waitress don't cause any changes in behavior.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Various reverse proxies may have protections against sending potentially bad HTTP requests to the backend, and or hardening against potential issues like this. If the reverse proxy doesn't use HTTP/1.1 for connecting to the backend issues are also somewhat mitigated, as HTTP pipelining does not exist in HTTP/1.0 and Waitress will close the connection after every single request (unless the Keep Alive header is explicitly sent... so this is not a fool proof security method).</p>\n<h3 id=\"issuesmore-security-issues\">Issues/more security issues:</h3>\n<ul>\n<li>open an issue at <a href=\"https://github.com/Pylons/waitress/issues\">https://github.com/Pylons/waitress/issues</a> (if not sensitive or security related)</li>\n<li>email the Pylons Security mailing list: <a href=\"mailto:pylons-project-security@googlegroups.com\">pylons-project-security@googlegroups.com</a> (if security related)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Pylons/waitress/security/advisories/GHSA-g2xc-35jw-c63p\">https://github.com/Pylons/waitress/security/advisories/GHSA-g2xc-35jw-c63p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16786\">https://nvd.nist.gov/vuln/detail/CVE-2019-16786</a></li>\n<li><a href=\"https://github.com/Pylons/waitress/commit/f11093a6b3240fc26830b6111e826128af7771c3\">https://github.com/Pylons/waitress/commit/f11093a6b3240fc26830b6111e826128af7771c3</a></li>\n<li><a href=\"https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes\">https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0720\">https://access.redhat.com/errata/RHSA-2020:0720</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html\">https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2019-137.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2019-137.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g2xc-35jw-c63p\">https://github.com/advisories/GHSA-g2xc-35jw-c63p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g2xc-35jw-c63p",
            "title": "[waitress] HTTP Request Smuggling: Invalid Transfer-Encoding in Waitress",
            "date_modified": "2024-11-19T13:57:31.000Z",
            "date_published": "2019-12-20T23:04:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g2xc-35jw-c63p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Waitress implemented a &amp;quot;MAY&amp;quot; part of the RFC7230 (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.5\">https://tools.ietf.org/html/rfc7230#section-3.5</a>) which states:</p>\n<pre><code>  Although the line terminator for the start-line and header fields is\n  the sequence CRLF, a recipient MAY recognize a single LF as a line\n  terminator and ignore any preceding CR.\n</code></pre>\n<p>Unfortunately if a front-end server does not parse header fields with an LF the same way as it does those with a CRLF it can lead to the front-end and the back-end server parsing the same HTTP message in two different ways. This can lead to a potential for HTTP request smuggling/splitting whereby Waitress may see two requests while the front-end server only sees a single HTTP message.</p>\n<p>Example:</p>\n<pre><code>Content-Length: 100[CRLF]\nX-Header: x[LF]Content-Length: 0[CRLF]\n</code></pre>\n<p>Would get treated by Waitress as if it were:</p>\n<pre><code>Content-Length: 100\nX-Header: x\nContent-Length: 0\n</code></pre>\n<p>This could potentially get used by attackers to split the HTTP request and smuggle a second request in the body of the first.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is fixed in Waitress 1.4.0. This brings a range of changes to harden Waitress against potential HTTP request confusions, and may change the behaviour of Waitress behind non-conformist proxies. </p>\n<p>Waitress no longer implements the MAY part of the specification and instead requires that all lines are terminated correctly with CRLF. If any lines are found with a bare CR or LF a 400 Bad Request is sent back to the requesting entity.</p>\n<p>The Pylons Project recommends upgrading as soon as possible, while validating that the changes in Waitress don&amp;#39;t cause any changes in behavior.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Various reverse proxies may have protections against sending potentially bad HTTP requests to the backend, and or hardening against potential issues like this. If the reverse proxy doesn&amp;#39;t use HTTP/1.1 for connecting to the backend issues are also somewhat mitigated, as HTTP pipelining does not exist in HTTP/1.0 and Waitress will close the connection after every single request (unless the Keep Alive header is explicitly sent... so this is not a fool proof security method)</p>\n<h3 id=\"issuesmore-security-issues\">Issues/more security issues:</h3>\n<ul>\n<li>open an issue at <a href=\"https://github.com/Pylons/waitress/issues\">https://github.com/Pylons/waitress/issues</a> (if not sensitive or security related)</li>\n<li>email the Pylons Security mailing list: <a href=\"mailto:pylons-project-security@googlegroups.com\">pylons-project-security@googlegroups.com</a> (if security related)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Pylons/waitress/security/advisories/GHSA-pg36-wpm5-g57p\">https://github.com/Pylons/waitress/security/advisories/GHSA-pg36-wpm5-g57p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16785\">https://nvd.nist.gov/vuln/detail/CVE-2019-16785</a></li>\n<li><a href=\"https://github.com/Pylons/waitress/commit/8eba394ad75deaf9e5cd15b78a3d16b12e6b0eba\">https://github.com/Pylons/waitress/commit/8eba394ad75deaf9e5cd15b78a3d16b12e6b0eba</a></li>\n<li><a href=\"https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes\">https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0720\">https://access.redhat.com/errata/RHSA-2020:0720</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html\">https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2019-136.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/waitress/PYSEC-2019-136.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pg36-wpm5-g57p\">https://github.com/advisories/GHSA-pg36-wpm5-g57p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pg36-wpm5-g57p",
            "title": "[waitress] HTTP Request Smuggling: LF vs CRLF handling in Waitress",
            "date_modified": "2024-11-19T13:56:01.000Z",
            "date_published": "2019-12-20T23:03:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pg36-wpm5-g57p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ubireader_extract_files is vulnerable to path traversal when run against specifically crafted UBIFS files, allowing the attacker to overwrite files outside of the extraction directory (provided the process has write access to that file or directory). This is due to the fact that a node name (dent_node.name) is considered trusted and joined to the extraction directory path during processing, then the node content is written to that joined path. By crafting a malicious UBIFS file with node names holding path traversal payloads (e.g. ../../tmp/outside.txt), it's possible to force ubi_reader to write outside of the extraction directory. This issue affects ubi-reader before 0.8.5.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0591\">https://nvd.nist.gov/vuln/detail/CVE-2023-0591</a></li>\n<li><a href=\"https://github.com/jrspruitt/ubi_reader/pull/57\">https://github.com/jrspruitt/ubi_reader/pull/57</a></li>\n<li><a href=\"https://github.com/jrspruitt/ubi_reader/commit/d5d68e6b1b9f7070c29df5f67fc060f579ae9139\">https://github.com/jrspruitt/ubi_reader/commit/d5d68e6b1b9f7070c29df5f67fc060f579ae9139</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/ubi-reader/PYSEC-2023-51.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/ubi-reader/PYSEC-2023-51.yaml</a></li>\n<li><a href=\"https://onekey.com/blog/security-advisory-remote-command-execution-in-binwalk\">https://onekey.com/blog/security-advisory-remote-command-execution-in-binwalk</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vp2x-3mc3-3cj4\">https://github.com/advisories/GHSA-vp2x-3mc3-3cj4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vp2x-3mc3-3cj4",
            "title": "[ubi-reader] Path traversal in ubi-reader",
            "date_modified": "2024-11-18T23:10:29.000Z",
            "date_published": "2023-01-31T12:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vp2x-3mc3-3cj4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>safe_eval</code> function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the <code>collection.domain</code> in the webdav module or (2) the formula field in the <code>price_list</code> module.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-6633\">https://nvd.nist.gov/vuln/detail/CVE-2014-6633</a></li>\n<li><a href=\"https://bugs.tryton.org/issue4155\">https://bugs.tryton.org/issue4155</a></li>\n<li><a href=\"http://www.tryton.org/posts/security-release-for-issue4155.html\">http://www.tryton.org/posts/security-release-for-issue4155.html</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06\">https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a\">https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9jj-5qvj-5fhx\">https://github.com/advisories/GHSA-m9jj-5qvj-5fhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx",
            "title": "[trytond] Tryton vulnerable to arbitrary command execution",
            "date_modified": "2024-11-18T22:55:29.000Z",
            "date_published": "2022-05-14T03:21:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>safe_eval</code> function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the <code>collection.domain</code> in the webdav module or (2) the formula field in the <code>price_list</code> module.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-6633\">https://nvd.nist.gov/vuln/detail/CVE-2014-6633</a></li>\n<li><a href=\"https://bugs.tryton.org/issue4155\">https://bugs.tryton.org/issue4155</a></li>\n<li><a href=\"http://www.tryton.org/posts/security-release-for-issue4155.html\">http://www.tryton.org/posts/security-release-for-issue4155.html</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06\">https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a\">https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9jj-5qvj-5fhx\">https://github.com/advisories/GHSA-m9jj-5qvj-5fhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx",
            "title": "[trytond] Tryton vulnerable to arbitrary command execution",
            "date_modified": "2024-11-18T22:55:29.000Z",
            "date_published": "2022-05-14T03:21:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>safe_eval</code> function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the <code>collection.domain</code> in the webdav module or (2) the formula field in the <code>price_list</code> module.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-6633\">https://nvd.nist.gov/vuln/detail/CVE-2014-6633</a></li>\n<li><a href=\"https://bugs.tryton.org/issue4155\">https://bugs.tryton.org/issue4155</a></li>\n<li><a href=\"http://www.tryton.org/posts/security-release-for-issue4155.html\">http://www.tryton.org/posts/security-release-for-issue4155.html</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06\">https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a\">https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9jj-5qvj-5fhx\">https://github.com/advisories/GHSA-m9jj-5qvj-5fhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx",
            "title": "[trytond] Tryton vulnerable to arbitrary command execution",
            "date_modified": "2024-11-18T22:55:29.000Z",
            "date_published": "2022-05-14T03:21:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>safe_eval</code> function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the <code>collection.domain</code> in the webdav module or (2) the formula field in the <code>price_list</code> module.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-6633\">https://nvd.nist.gov/vuln/detail/CVE-2014-6633</a></li>\n<li><a href=\"https://bugs.tryton.org/issue4155\">https://bugs.tryton.org/issue4155</a></li>\n<li><a href=\"http://www.tryton.org/posts/security-release-for-issue4155.html\">http://www.tryton.org/posts/security-release-for-issue4155.html</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06\">https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a\">https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9jj-5qvj-5fhx\">https://github.com/advisories/GHSA-m9jj-5qvj-5fhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx",
            "title": "[trytond] Tryton vulnerable to arbitrary command execution",
            "date_modified": "2024-11-18T22:55:29.000Z",
            "date_published": "2022-05-14T03:21:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>safe_eval</code> function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the <code>collection.domain</code> in the webdav module or (2) the formula field in the <code>price_list</code> module.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-6633\">https://nvd.nist.gov/vuln/detail/CVE-2014-6633</a></li>\n<li><a href=\"https://bugs.tryton.org/issue4155\">https://bugs.tryton.org/issue4155</a></li>\n<li><a href=\"http://www.tryton.org/posts/security-release-for-issue4155.html\">http://www.tryton.org/posts/security-release-for-issue4155.html</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06\">https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06</a></li>\n<li><a href=\"https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a\">https://github.com/tryton/trytond/commit/3e4c2b7e8c7b3358597a0d484fa98f45483ee92a</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/trytond/PYSEC-2018-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9jj-5qvj-5fhx\">https://github.com/advisories/GHSA-m9jj-5qvj-5fhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx",
            "title": "[trytond] Tryton vulnerable to arbitrary command execution",
            "date_modified": "2024-11-18T22:55:29.000Z",
            "date_published": "2022-05-14T03:21:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9jj-5qvj-5fhx"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}