{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://xlordz.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When the Contrast initializer is configured with a <code>CONTRAST_LOG_LEVEL</code> of <code>info</code> or <code>debug</code>, the workload secret is logged to <code>stderr</code> and written to Kubernetes logs. </p>\n<p>Since <code>info</code> is the default setting, this affects all Contrast installations that don't customize their initializers' log level.</p>\n<p>The following audiences are <strong>intended</strong> to have access to workload secrets (see <a href=\"https://docs.edgeless.systems/contrast/1.7/architecture/secrets#workload-secrets\">https://docs.edgeless.systems/contrast/1.7/architecture/secrets#workload-secrets</a>):</p>\n<ul>\n<li>Contrast Coordinator (can derive all workload secrets)</li>\n<li>Contrast Initializer (obtains only the secret configured in the manifest)</li>\n<li>Seedshare owner (can derive all workload secrets)</li>\n<li>Workload owner (can update manifests to obtain secrets)</li>\n</ul>\n<p>This vulnerability allows the following parties <strong>unintended access</strong> to workload secrets issued by a Coordinator:</p>\n<ul>\n<li>Kubernetes users with <code>get</code> or <code>list</code> permission on <code>pods/logs</code>.</li>\n<li>Others with read access to the Kubernetes log storage (most notably, the cloud provider).</li>\n</ul>\n<p>This vulnerability <strong>does not affect</strong> scenarios where workload secrets are not used by the application (directly or with <a href=\"https://docs.edgeless.systems/contrast/1.7/architecture/secrets#secure-persistence\">secure persistence</a>). Applications designed for workload owner exclusion can't use workload secrets and are thus unaffected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>N/A</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This vulnerability can be mitigated by adding an environment variable <code>CONTRAST_LOG_LEVEL=warn</code> to the initializer after running <code>contrast generate</code>, and then running <code>contrast generate</code> again.</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edgelesssys/contrast/security/advisories/GHSA-h5f8-crrq-4pw8\">https://github.com/edgelesssys/contrast/security/advisories/GHSA-h5f8-crrq-4pw8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h5f8-crrq-4pw8\">https://github.com/advisories/GHSA-h5f8-crrq-4pw8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h5f8-crrq-4pw8",
            "title": "[github.com/edgelesssys/contrast] Contrast workload secrets leak to logs on INFO level",
            "date_modified": "2025-05-28T14:40:26.000Z",
            "date_published": "2025-05-28T14:40:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h5f8-crrq-4pw8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>There is a potential vulnerability in Traefik managing the requests using a <code>PathPrefix</code>, <code>Path</code> or <code>PathRegex</code> matcher.</p>\n<p>When Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, it’s possible to target a backend, exposed using another router, by-passing the middlewares chain.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-yaml\">apiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-service\nspec:\n  routes:\n    - match: PathPrefix(‘/service’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n      middlewares:\n        - name: my-middleware-a\n    - match: PathPrefix(‘/service/sub-path’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n</code></pre>\n<p>In such a case, the request <code>http://mydomain.example.com/service/sub-path/%2e%2e/other-path</code> will reach the backend <code>my-service-a</code> without operating the middleware <code>my-middleware-a</code> unless the computed path is <code>http://mydomain.example.com/service/other-path</code> and should be computes by the first router (operating <code>my-middleware-a</code>).</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.25\">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.4.1\">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>\n</ul>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<details>\n<summary>Original Description</summary>\n### Summary\n\n<p>Path traversal with \"/../\" using URL encodings (\"/%2e%2e\") allows for circumventing routing rules. </p>\n<h3 id=\"details\">Details</h3>\n<p>When having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32431\">https://nvd.nist.gov/vuln/detail/CVE-2025-32431</a></p>\n<p>Simply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:\n<a href=\"https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html\">https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup a service with two endpoints: \"/public\" and \"/private\", which returns a 200 OK for both\nSetup a Traefik proxy with a single route which points to the service using path /public</p>\n<p>Regular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)\nWhen making a request to /public/%2e%2e/private you should receive a 200 OK.</p>\n<h3 id=\"impact-1\">Impact</h3>\n<p>Impacts all traefik implementations with path prefix routes that expose only part of the downstream api</p>\n<h3 id=\"suggestion\">Suggestion</h3>\n<p>Provide configuration property which disables all path traversals. Steps:</p>\n<ol>\n<li>Decode URL</li>\n<li>Evaluate and construct relative path (do traversal before route evaluation)</li>\n<li>Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)</li></ol></details>\n\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5\">https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00\">https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.25\">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.4.1\">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vrch-868g-9jx5\">https://github.com/advisories/GHSA-vrch-868g-9jx5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vrch-868g-9jx5",
            "title": "[github.com/traefik/traefik] Traefik allows path traversal using url encoding",
            "date_modified": "2025-05-28T14:25:10.000Z",
            "date_published": "2025-05-28T14:25:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vrch-868g-9jx5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>There is a potential vulnerability in Traefik managing the requests using a <code>PathPrefix</code>, <code>Path</code> or <code>PathRegex</code> matcher.</p>\n<p>When Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, it’s possible to target a backend, exposed using another router, by-passing the middlewares chain.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-yaml\">apiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-service\nspec:\n  routes:\n    - match: PathPrefix(‘/service’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n      middlewares:\n        - name: my-middleware-a\n    - match: PathPrefix(‘/service/sub-path’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n</code></pre>\n<p>In such a case, the request <code>http://mydomain.example.com/service/sub-path/%2e%2e/other-path</code> will reach the backend <code>my-service-a</code> without operating the middleware <code>my-middleware-a</code> unless the computed path is <code>http://mydomain.example.com/service/other-path</code> and should be computes by the first router (operating <code>my-middleware-a</code>).</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.25\">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.4.1\">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>\n</ul>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<details>\n<summary>Original Description</summary>\n### Summary\n\n<p>Path traversal with \"/../\" using URL encodings (\"/%2e%2e\") allows for circumventing routing rules. </p>\n<h3 id=\"details\">Details</h3>\n<p>When having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32431\">https://nvd.nist.gov/vuln/detail/CVE-2025-32431</a></p>\n<p>Simply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:\n<a href=\"https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html\">https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup a service with two endpoints: \"/public\" and \"/private\", which returns a 200 OK for both\nSetup a Traefik proxy with a single route which points to the service using path /public</p>\n<p>Regular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)\nWhen making a request to /public/%2e%2e/private you should receive a 200 OK.</p>\n<h3 id=\"impact-1\">Impact</h3>\n<p>Impacts all traefik implementations with path prefix routes that expose only part of the downstream api</p>\n<h3 id=\"suggestion\">Suggestion</h3>\n<p>Provide configuration property which disables all path traversals. Steps:</p>\n<ol>\n<li>Decode URL</li>\n<li>Evaluate and construct relative path (do traversal before route evaluation)</li>\n<li>Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)</li></ol></details>\n\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5\">https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00\">https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.25\">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.4.1\">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vrch-868g-9jx5\">https://github.com/advisories/GHSA-vrch-868g-9jx5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vrch-868g-9jx5",
            "title": "[github.com/traefik/traefik/v2] Traefik allows path traversal using url encoding",
            "date_modified": "2025-05-28T14:25:10.000Z",
            "date_published": "2025-05-28T14:25:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vrch-868g-9jx5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>There is a potential vulnerability in Traefik managing the requests using a <code>PathPrefix</code>, <code>Path</code> or <code>PathRegex</code> matcher.</p>\n<p>When Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, it’s possible to target a backend, exposed using another router, by-passing the middlewares chain.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"language-yaml\">apiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-service\nspec:\n  routes:\n    - match: PathPrefix(‘/service’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n      middlewares:\n        - name: my-middleware-a\n    - match: PathPrefix(‘/service/sub-path’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n</code></pre>\n<p>In such a case, the request <code>http://mydomain.example.com/service/sub-path/%2e%2e/other-path</code> will reach the backend <code>my-service-a</code> without operating the middleware <code>my-middleware-a</code> unless the computed path is <code>http://mydomain.example.com/service/other-path</code> and should be computes by the first router (operating <code>my-middleware-a</code>).</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.25\">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.4.1\">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>\n</ul>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<details>\n<summary>Original Description</summary>\n### Summary\n\n<p>Path traversal with \"/../\" using URL encodings (\"/%2e%2e\") allows for circumventing routing rules. </p>\n<h3 id=\"details\">Details</h3>\n<p>When having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32431\">https://nvd.nist.gov/vuln/detail/CVE-2025-32431</a></p>\n<p>Simply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:\n<a href=\"https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html\">https://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup a service with two endpoints: \"/public\" and \"/private\", which returns a 200 OK for both\nSetup a Traefik proxy with a single route which points to the service using path /public</p>\n<p>Regular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)\nWhen making a request to /public/%2e%2e/private you should receive a 200 OK.</p>\n<h3 id=\"impact-1\">Impact</h3>\n<p>Impacts all traefik implementations with path prefix routes that expose only part of the downstream api</p>\n<h3 id=\"suggestion\">Suggestion</h3>\n<p>Provide configuration property which disables all path traversals. Steps:</p>\n<ol>\n<li>Decode URL</li>\n<li>Evaluate and construct relative path (do traversal before route evaluation)</li>\n<li>Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)</li></ol></details>\n\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5\">https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00\">https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.25\">https://github.com/traefik/traefik/releases/tag/v2.11.25</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.4.1\">https://github.com/traefik/traefik/releases/tag/v3.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vrch-868g-9jx5\">https://github.com/advisories/GHSA-vrch-868g-9jx5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vrch-868g-9jx5",
            "title": "[github.com/traefik/traefik/v3] Traefik allows path traversal using url encoding",
            "date_modified": "2025-05-28T14:25:10.000Z",
            "date_published": "2025-05-28T14:25:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vrch-868g-9jx5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in ActiveMQ Artemis. The password generated by activemq-artemis-operator does not regenerate between separated CR dependencies.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4057\">https://nvd.nist.gov/vuln/detail/CVE-2025-4057</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2025-4057\">https://access.redhat.com/security/cve/CVE-2025-4057</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2362827\">https://bugzilla.redhat.com/show_bug.cgi?id=2362827</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2025:8147\">https://access.redhat.com/errata/RHSA-2025:8147</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q5q7-8x6x-hcg2\">https://github.com/advisories/GHSA-q5q7-8x6x-hcg2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q5q7-8x6x-hcg2",
            "title": "[github.com/arkmq-org/activemq-artemis-operator] ActiveMQ Artemis AMQ Broker Operator Starting Credentials Reuse",
            "date_modified": "2025-05-27T22:50:23.000Z",
            "date_published": "2025-05-26T12:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q5q7-8x6x-hcg2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Installations which use the GitLab auth connector are vulnerable to identity spoofing by way of configuring a GitLab account with the same full name as another GitLab user who is granted access to a Concourse team by having their full name listed under <code>users</code> in the team configuration or given to the <code>--gitlab-user</code> flag.</p>\n<p>See the <a href=\"https://concourse-ci.org/gitlab-auth.html\">GitLab auth docs</a> for details.</p>\n<p>Concourse installations which do not configure the GitLab auth connector are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Concourse <a href=\"https://github.com/concourse/concourse/releases/tag/v6.3.1\">v6.3.1</a> and <a href=\"https://github.com/concourse/concourse/releases/tag/v6.4.1\">v6.4.1</a> were both released with a fix on August 4th, 2020.</p>\n<p>Both versions change the GitLab connector to use the username, rather than the full name. This was always the intent, and the previous behavior was originally reported as a bug (concourse/dex#7) prior to being reported as a security issue.</p>\n<p>Any Concourse teams which configure GitLab users will have to switch each user from their full name to their username upon upgrading to these versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>GitLab groups do not have this vulnerability, so GitLab users may be moved into groups which are then configured in the Concourse team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>concourse/dex#12: PR with the fix</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, you may reach us privately at <a href=\"mailto:concourseteam+security@gmail.com\">concourseteam+security@gmail.com</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj\">https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-5415\">https://nvd.nist.gov/vuln/detail/CVE-2020-5415</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2020-5415\">https://tanzu.vmware.com/security/cve-2020-5415</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-627p-rr78-99rj\">https://github.com/advisories/GHSA-627p-rr78-99rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-627p-rr78-99rj",
            "title": "[github.com/concourse/concourse] GitLab auth uses full name instead of username as user ID, allowing impersonation",
            "date_modified": "2025-05-27T15:54:46.000Z",
            "date_published": "2021-12-20T17:56:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-627p-rr78-99rj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Installations which use the GitLab auth connector are vulnerable to identity spoofing by way of configuring a GitLab account with the same full name as another GitLab user who is granted access to a Concourse team by having their full name listed under <code>users</code> in the team configuration or given to the <code>--gitlab-user</code> flag.</p>\n<p>See the <a href=\"https://concourse-ci.org/gitlab-auth.html\">GitLab auth docs</a> for details.</p>\n<p>Concourse installations which do not configure the GitLab auth connector are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Concourse <a href=\"https://github.com/concourse/concourse/releases/tag/v6.3.1\">v6.3.1</a> and <a href=\"https://github.com/concourse/concourse/releases/tag/v6.4.1\">v6.4.1</a> were both released with a fix on August 4th, 2020.</p>\n<p>Both versions change the GitLab connector to use the username, rather than the full name. This was always the intent, and the previous behavior was originally reported as a bug (concourse/dex#7) prior to being reported as a security issue.</p>\n<p>Any Concourse teams which configure GitLab users will have to switch each user from their full name to their username upon upgrading to these versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>GitLab groups do not have this vulnerability, so GitLab users may be moved into groups which are then configured in the Concourse team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>concourse/dex#12: PR with the fix</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, you may reach us privately at <a href=\"mailto:concourseteam+security@gmail.com\">concourseteam+security@gmail.com</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj\">https://github.com/concourse/concourse/security/advisories/GHSA-627p-rr78-99rj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-5415\">https://nvd.nist.gov/vuln/detail/CVE-2020-5415</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2020-5415\">https://tanzu.vmware.com/security/cve-2020-5415</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-627p-rr78-99rj\">https://github.com/advisories/GHSA-627p-rr78-99rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-627p-rr78-99rj",
            "title": "[github.com/concourse/dex] GitLab auth uses full name instead of username as user ID, allowing impersonation",
            "date_modified": "2025-05-27T15:54:46.000Z",
            "date_published": "2021-12-20T17:56:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-627p-rr78-99rj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Dex 2.37.0 is serving HTTPS with insecure TLS 1.0 and TLS 1.1.</p>\n<h3 id=\"details\">Details</h3>\n<p>While working on <a href=\"https://github.com/dexidp/dex/issues/2848\">https://github.com/dexidp/dex/issues/2848</a> and implementing configurable TLS support, I noticed my changes did not have any effect in TLS config, so I started investigating. </p>\n<p><a href=\"https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425\">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a> is seemingly setting TLS 1.2 as minimum version, but the whole tlsConfig is ignored after \"TLS cert reloader\" was introduced in <a href=\"https://github.com/dexidp/dex/pull/2964\">https://github.com/dexidp/dex/pull/2964</a>. Configured cipher suites are not respected either, as seen on the output.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Build Dex, generate certs with <code>gencert.sh</code>, modify <code>config.dev.yaml</code> to run on https, using generated certs.</p>\n<pre><code class=\"language-console\">issuer: http://127.0.0.1:5556/dex\n\nstorage:\n  type: sqlite3\n  config:\n    file: dex.db\n\nweb:\n  https: 127.0.0.1:5556\n  tlsCert: examples/k8s/ssl/cert.pem\n  tlsKey: examples/k8s/ssl/key.pem\n\n&lt;rest as default&gt;\n</code></pre>\n<p>Run dex <code>bin/dex serve config.dev.yaml</code>.</p>\n<p>Install <code>sslyze</code>, easy to use SSL connection analyzer:</p>\n<pre><code class=\"language-console\">pip3 install sslyze\nsslyze 127.0.0.1:5556\n</code></pre>\n<p>In Dex 2.37.0, TLS 1.0 and TLS 1.1 are enabled in addition to expected TLS 1.2 and TLS 1.3.</p>\n<pre><code class=\"language-console\"> * TLS 1.0 Cipher Suites:\n     Attempted to connect using 80 cipher suites.\n\n     The server accepted the following 6 cipher suites:\n        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      \n        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      \n        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.1 Cipher Suites:\n     Attempted to connect using 80 cipher suites.\n\n     The server accepted the following 6 cipher suites:\n        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      \n        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      \n        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.2 Cipher Suites:\n     Attempted to connect using 156 cipher suites.\n\n     The server accepted the following 11 cipher suites:\n        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      \n        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      \n        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      \n        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      \n        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      \n        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)\n        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.3 Cipher Suites:\n     Attempted to connect using 5 cipher suites.\n\n     The server accepted the following 3 cipher suites:\n        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)\n        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)\n        TLS_AES_128_GCM_SHA256                            128       ECDH: X25519 (253 bits)\n</code></pre>\n<p>In Dex 2.36.0, TLS 1.0 and TLS 1.1 are disabled as expected.</p>\n<pre><code class=\"language-console\"> * TLS 1.0 Cipher Suites:\n     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.\n\n * TLS 1.1 Cipher Suites:\n     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.\n\n * TLS 1.2 Cipher Suites:\n     Attempted to connect using 156 cipher suites.\n\n     The server accepted the following 5 cipher suites:\n        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      \n        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      \n        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)\n        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.3 Cipher Suites:\n     Attempted to connect using 5 cipher suites.\n\n     The server accepted the following 3 cipher suites:\n        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)\n        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>TLS 1.0 and TLS 1.1 connections can be decrypted by the attacker, and hence decrypt the traffic to Dex.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r\">https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23656\">https://nvd.nist.gov/vuln/detail/CVE-2024-23656</a></li>\n<li><a href=\"https://github.com/dexidp/dex/issues/2848\">https://github.com/dexidp/dex/issues/2848</a></li>\n<li><a href=\"https://github.com/dexidp/dex/pull/2964\">https://github.com/dexidp/dex/pull/2964</a></li>\n<li><a href=\"https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17\">https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17</a></li>\n<li><a href=\"https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425\">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gr79-9v6v-gc9r\">https://github.com/advisories/GHSA-gr79-9v6v-gc9r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gr79-9v6v-gc9r",
            "title": "[github.com/dexidp/dex] Dex discarding TLSconfig and always serves deprecated TLS 1.0/1.1 and insecure ciphers",
            "date_modified": "2025-05-27T15:45:14.000Z",
            "date_published": "2024-01-26T01:57:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gr79-9v6v-gc9r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3438\">https://pkg.go.dev/vuln/GO-2025-3438</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20250509-0006\">https://security.netapp.com/advisory/ntap-20250509-0006</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea\">https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-05-27T15:35:54.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3438\">https://pkg.go.dev/vuln/GO-2025-3438</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20250509-0006\">https://security.netapp.com/advisory/ntap-20250509-0006</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea\">https://github.com/grafana/grafana/commit/70073427041e15c353e0d467b714527584765aea</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-05-27T15:35:54.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL administrators can enable a setting called \"Ignoring unknown usernames\" which helps mitigate attacks that try to guess/enumerate usernames. If enabled, ZITADEL will show the password prompt even if the user doesn't exist and report \"Username or Password invalid\".\nDue to a implementation change to prevent deadlocks calling the database, the flag would not be correctly respected in all cases and an attacker would gain information if an account exist within ZITADEL, since the error message shows \"object not found\" instead of the generic error message.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.1\">2.58.1</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.1\">2.57.1</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.2\">2.56.2</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.5\">2.55.5</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.8\">2.54.8</a>\n2.53.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.53.9\">2.53.9</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-567v-6hmg-6qg7\">https://github.com/zitadel/zitadel/security/advisories/GHSA-567v-6hmg-6qg7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41952\">https://nvd.nist.gov/vuln/detail/CVE-2024-41952</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/0ab0c645ef914298c343fa39cccb1290aba48bf6\">https://github.com/zitadel/zitadel/commit/0ab0c645ef914298c343fa39cccb1290aba48bf6</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/3c7d12834e32426416235b9e3374be0f4b9380b8\">https://github.com/zitadel/zitadel/commit/3c7d12834e32426416235b9e3374be0f4b9380b8</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/5c2526c98aafd1ba206be2fa4291b1d24c384f6d\">https://github.com/zitadel/zitadel/commit/5c2526c98aafd1ba206be2fa4291b1d24c384f6d</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/8565d24fd8df5bd35294313cfbfcc2e15aea20e9\">https://github.com/zitadel/zitadel/commit/8565d24fd8df5bd35294313cfbfcc2e15aea20e9</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/b0e71a81ef39667ce2a149ce037c1ca0edbe059d\">https://github.com/zitadel/zitadel/commit/b0e71a81ef39667ce2a149ce037c1ca0edbe059d</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/fc1d415b8db5b8d481bb65206ce3fc944c0eecea\">https://github.com/zitadel/zitadel/commit/fc1d415b8db5b8d481bb65206ce3fc944c0eecea</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.53.9\">https://github.com/zitadel/zitadel/releases/tag/v2.53.9</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.8\">https://github.com/zitadel/zitadel/releases/tag/v2.54.8</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.5\">https://github.com/zitadel/zitadel/releases/tag/v2.55.5</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.2\">https://github.com/zitadel/zitadel/releases/tag/v2.56.2</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.1\">https://github.com/zitadel/zitadel/releases/tag/v2.57.1</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.1\">https://github.com/zitadel/zitadel/releases/tag/v2.58.1</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3014\">https://pkg.go.dev/vuln/GO-2024-3014</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-567v-6hmg-6qg7\">https://github.com/advisories/GHSA-567v-6hmg-6qg7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-567v-6hmg-6qg7",
            "title": "[github.com/zitadel/zitadel] ZITADEL \"ignoring unknown usernames\" vulnerability",
            "date_modified": "2025-05-27T15:08:09.000Z",
            "date_published": "2024-07-31T21:02:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-567v-6hmg-6qg7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A failure in the update logic of Rancher's admission Webhook may lead to the misconfiguration of the Webhook. This component enforces validation rules and security checks before resources are admitted into the Kubernetes cluster.</p>\n<p>When the Webhook is operating in a degraded state, it no longer validates any resources, which may result in severe privilege escalations and data corruption.</p>\n<p>The issue only affects users that upgrade from <code>2.6.x</code> or <code>2.7.x</code> to <code>2.7.2</code>. Users that did a fresh install of 2.7.2 (and did not follow an upgrade path) are not affected.</p>\n<p>The command below can be executed on the <code>local</code> cluster to determine whether the cluster is affected by this issue:</p>\n<pre><code class=\"language-sh\">$ kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io\n\nNAME                WEBHOOKS   AGE\nrancher.cattle.io   0         19h\n</code></pre>\n<p>If the resulting webhook quantity is <code>0</code>, the Rancher instance is affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include release <code>2.7.3</code> and later versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are affected and cannot update to a patched Rancher version, the recommended workaround is to manually reconfigure the Webhook with the script below. Please note that the script must be run from inside the <code>local</code> cluster or with a kubeconfig pointing to the <code>local</code> cluster which has admin permissions.</p>\n<pre><code class=\"language-yaml\">#!/bin/bash\n\nset -euo pipefail\n\nfunction prereqs() {\n    if ! [ -x \"$(command -v kubectl)\" ]; then\n      echo \"error: kubectl is not installed.\" &gt;&amp;2\n      exit 1\n    fi\n\n    if [[ -z \"$(kubectl config view -o jsonpath='{.clusters[].cluster.server}')\" ]]; then\n        echo \"error: No kubernetes cluster found on kubeconfig.\" &gt;&amp;2\n        exit 1\n    fi\n}\n\nfunction restart_deployment(){\n    kubectl rollout restart deployment rancher-webhook -n cattle-system\n    kubectl rollout status deployment rancher-webhook -n cattle-system --timeout=30s\n}\n\nfunction workaround() {\n    echo \"Cluster: $(kubectl config view -o jsonpath='{.clusters[].cluster.server}')\"\n\n    if ! kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io &gt; /dev/null 2&gt;&amp;1; then\n        echo \"webhook rancher.cattle.io not found, restarting deployment:\"\n        restart_deployment\n\n        echo \"waiting for webhook configuration\"\n        sleep 15s\n    fi\n\n    local -i webhooks\n    webhooks=\"$(kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io --no-headers | awk '{ print $2 }')\"\n\n    if [ \"${webhooks}\" == \"0\" ]; then\n        echo \"Webhook misconfiguration status: Cluster is affected by CVE-2023-22651\"\n        \n        echo \"Running workaround:\"\n        kubectl delete validatingwebhookconfiguration rancher.cattle.io\n        restart_deployment\n\n        ret=$?\n        if [ $ret -eq 0 ]; then\n            echo \"Webhook restored, CVE-2023-22651 is fixed\"\n        else\n            echo \"error trying to restart deployment. try again in a few seconds.\"\n        fi\n    else\n        echo \"Webhook misconfiguration status: not present (skipping)\"\n    fi\n\n    echo \"Done\"\n}\n\nfunction main() {\n    prereqs\n    workaround\n}\n\nmain\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/webhook/pull/216/commits/a4a498613b43a3ee93c5ab06742a3bc8adace45d\">https://github.com/rancher/webhook/pull/216/commits/a4a498613b43a3ee93c5ab06742a3bc8adace45d</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-6m9f-pj6w-w87g\">https://github.com/rancher/rancher/security/advisories/GHSA-6m9f-pj6w-w87g</a></li>\n<li><a href=\"https://github.com/rancher/rancher/releases/tag/v2.7.3\">https://github.com/rancher/rancher/releases/tag/v2.7.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22651\">https://nvd.nist.gov/vuln/detail/CVE-2023-22651</a></li>\n<li><a href=\"https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22651\">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22651</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m9f-pj6w-w87g\">https://github.com/advisories/GHSA-6m9f-pj6w-w87g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m9f-pj6w-w87g",
            "title": "[github.com/rancher/rancher] Rancher Webhook is misconfigured during upgrade process",
            "date_modified": "2025-05-27T14:46:00.000Z",
            "date_published": "2023-04-24T22:34:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m9f-pj6w-w87g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>OpenFGA v1.8.0 to v1.8.12 ( openfga-0.2.16 &lt;= Helm chart &lt;= openfga-0.2.30, v1.8.0 &lt;= docker &lt;= v.1.8.12) are vulnerable to authorization bypass when certain Check and ListObject calls are executed.</p>\n<h3 id=\"am-i-affected\">Am I Affected?</h3>\n<p>If you are using OpenFGA v1.8.0 to v1.8.12, specifically under the following conditions, you are affected by this authorization bypass vulnerability:</p>\n<ul>\n<li>Calling Check API or ListObjects with an <a href=\"https://openfga.dev/docs/concepts#what-is-an-authorization-model\">authorization model</a> that has a relationship directly assignable by both <a href=\"https://openfga.dev/docs/concepts#what-is-type-bound-public-access\">type bound public access</a> and <a href=\"https://openfga.dev/docs/modeling/building-blocks/usersets\">userset</a>, and</li>\n<li>There are check or list object queries with <a href=\"https://openfga.dev/docs/interacting/contextual-tuples\">contextual tuples</a> for the relationship that can be directly assignable by both <a href=\"https://openfga.dev/docs/concepts#what-is-type-bound-public-access\">type bound public access</a> and <a href=\"https://openfga.dev/docs/modeling/building-blocks/usersets\">userset</a>, and</li>\n<li>Those contextual tuples’s user field is an userset, and</li>\n<li>Type bound public access tuples are not assigned to the relationship</li>\n</ul>\n<h3 id=\"fix\">Fix</h3>\n<p>Upgrade to v1.8.13. This upgrade is backwards compatible.</p>\n<h3 id=\"acknowledgments\">Acknowledgments</h3>\n<p>Okta would like to thank @udyvish for discovering this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openfga/openfga/security/advisories/GHSA-c72g-53hw-82q7\">https://github.com/openfga/openfga/security/advisories/GHSA-c72g-53hw-82q7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48371\">https://nvd.nist.gov/vuln/detail/CVE-2025-48371</a></li>\n<li><a href=\"https://github.com/openfga/openfga/commit/e5960d4eba92b723de8ff3a5346a07f50c1379ca\">https://github.com/openfga/openfga/commit/e5960d4eba92b723de8ff3a5346a07f50c1379ca</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c72g-53hw-82q7\">https://github.com/advisories/GHSA-c72g-53hw-82q7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c72g-53hw-82q7",
            "title": "[github.com/openfga/openfga] OpenFGA Authorization Bypass",
            "date_modified": "2025-05-23T18:41:39.000Z",
            "date_published": "2025-05-23T18:41:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c72g-53hw-82q7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost versions 9.9.x &lt;= 9.9.0, 9.5.x &lt;= 9.5.6, 9.7.x &lt;= 9.7.5 and 9.8.x &lt;= 9.8.1 fail to disallow&nbsp;the modification of local channels by a remote, when shared channels are enabled, which allows&nbsp;a malicious remote to make an arbitrary local channel read-only.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41162\">https://nvd.nist.gov/vuln/detail/CVE-2024-41162</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3031\">https://pkg.go.dev/vuln/GO-2024-3031</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr9x-3x7m-4j75\">https://github.com/advisories/GHSA-jr9x-3x7m-4j75</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr9x-3x7m-4j75",
            "title": "[github.com/mattermost/mattermost/server/v8] Mattermost allows a remote actor to make an arbitrary local channel read-only",
            "date_modified": "2025-05-23T16:42:18.000Z",
            "date_published": "2024-08-01T15:32:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr9x-3x7m-4j75"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When using Keycloak as an oidc provider, the clientsecret gets printed into the container stdout logs for an example at container startup.</p>\n<h3 id=\"details\">Details</h3>\n<p>Container Image (15.04.2025): ghcr.io/project-zot/zot-linux-amd64:latest\nHere is an example how the configuration can look which causes the above stated problem:</p>\n<p><code>   http:       address: \"0.0.0.0\"       port: 5000       externalUrl: \"https://zot.example.com\"       auth: {         failDelay: 1,         openid: {           providers: {             oidc: {               name: \"Keycloak\",               clientid: \"zot-client-id\",               clientsecret: fsdfkmmiwljasdklfsjaskldjfkljewijrf234i52k3j45l,               keypath: \"\",               issuer: \"https://keycloak.example.com/realms/example\",               scopes: [\"openid\"]             }           }         }       }</code></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Set up a blank new zot k8s deployment with the code snippet above.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>exposure of secrets, on configuring a oidc provider</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/project-zot/zot/security/advisories/GHSA-c37v-3c8w-crq8\">https://github.com/project-zot/zot/security/advisories/GHSA-c37v-3c8w-crq8</a></li>\n<li><a href=\"https://github.com/project-zot/zot/commit/8a99a3ed231fdcd8467e986182b4705342b6a15e\">https://github.com/project-zot/zot/commit/8a99a3ed231fdcd8467e986182b4705342b6a15e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48374\">https://nvd.nist.gov/vuln/detail/CVE-2025-48374</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c37v-3c8w-crq8\">https://github.com/advisories/GHSA-c37v-3c8w-crq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c37v-3c8w-crq8",
            "title": "[zotregistry.dev/zot] zot logs secrets",
            "date_modified": "2025-05-22T21:33:44.000Z",
            "date_published": "2025-05-22T20:33:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c37v-3c8w-crq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When using the <code>fiber.Ctx.BodyParser</code> to parse into a struct with range values, a panic occurs when trying to parse a negative range index</p>\n<h3 id=\"details\">Details</h3>\n<p><code>fiber.Ctx.BodyParser</code> can map flat data to nested slices using <code>key[idx]value</code> syntax, however when idx is negative, it causes a panic instead of returning an error stating it cannot process the data. </p>\n<p>Since this data is user-provided, this could lead to denial of service for anyone relying on this <code>fiber.Ctx.BodyParser</code>  functionality  </p>\n<h3 id=\"reproducing\">Reproducing</h3>\n<p>Take a simple GoFiberV2 server which returns a JSON encoded version of the FormData</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/gofiber/fiber/v2\"\n)\n\ntype RequestBody struct {\n    NestedContent []*struct {\n        Value string `form:\"value\"`\n    } `form:\"nested-content\"`\n}\n\nfunc main() {\n    app := fiber.New()\n\n    app.Post(\"/\", func(c *fiber.Ctx) error {\n        formData := RequestBody{}\n        if err := c.BodyParser(&amp;formData); err != nil {\n            fmt.Println(err)\n            return c.SendStatus(http.StatusUnprocessableEntity)\n        }\n                c.Set(\"Content-Type\", \"application/json\")\n                s, _ := json.Marshal(formData)\n                return c.SendString(string(s))\n    })\n\n    fmt.Println(app.Listen(\":3000\"))\n}\n</code></pre>\n<p><strong>Correct Behaviour</strong>\nSend a valid request such as:</p>\n<pre><code class=\"language-bash\">curl --location 'localhost:3000' \\\n--form 'nested-content[0].value=\"Foo\"' \\\n--form 'nested-content[1].value=\"Bar\"'\n</code></pre>\n<p>You recieve valid JSON</p>\n<pre><code class=\"language-json\">{\"NestedContent\":[{\"Value\":\"Foo\"},{\"Value\":\"Bar\"}]}\n</code></pre>\n<p><strong>Crashing behaviour</strong>\nSend an invalid request such as:</p>\n<pre><code class=\"language-bash\">curl --location 'localhost:3000' \\\n--form 'nested-content[-1].value=\"Foo\"'\n</code></pre>\n<p>The server panics and crashes</p>\n<pre><code>panic: reflect: slice index out of range\n\ngoroutine 8 [running]:\nreflect.Value.Index({0x738000?, 0xc000010858?, 0x0?}, 0x738000?)\n        /usr/lib/go-1.24/src/reflect/value.go:1418 +0x167\ngithub.com/gofiber/fiber/v2/internal/schema.(*Decoder).decode(0xc00002c570, {0x75d420?, 0xc000010858?, 0x7ff424822108?}, {0xc00001c498, 0x17}, {0xc00014e2d0, 0x2, 0x2}, {0xc00002c710, ...})\n[...]\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Anyone using <code>fiber.Ctx.BodyParser</code> can/will have their servers crashed when an invalid payload is sent</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gofiber/fiber/security/advisories/GHSA-hg3g-gphw-5hhm\">https://github.com/gofiber/fiber/security/advisories/GHSA-hg3g-gphw-5hhm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-48075\">https://nvd.nist.gov/vuln/detail/CVE-2025-48075</a></li>\n<li><a href=\"https://github.com/gofiber/fiber/commit/e115c08b8f059a4a031b492aa9eef0712411853d\">https://github.com/gofiber/fiber/commit/e115c08b8f059a4a031b492aa9eef0712411853d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg3g-gphw-5hhm\">https://github.com/advisories/GHSA-hg3g-gphw-5hhm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg3g-gphw-5hhm",
            "title": "[github.com/gofiber/fiber/v2] Fiber panics when fiber.Ctx.BodyParser parses invalid range index",
            "date_modified": "2025-05-22T20:08:32.000Z",
            "date_published": "2025-05-22T20:08:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg3g-gphw-5hhm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability exists in Grafana caused by combining a client path traversal and open redirect. This allows attackers to redirect users to a website that hosts a frontend plugin that will execute arbitrary JavaScript. This vulnerability does not require editor permissions and if anonymous access is enabled, the XSS will work. If the Grafana Image Renderer plugin is installed, it is possible to exploit the open redirect to achieve a full read SSRF.</p>\n<p>The default Content-Security-Policy (CSP) in Grafana will block the XSS though the <code>connect-src</code> directive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4123\">https://nvd.nist.gov/vuln/detail/CVE-2025-4123</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2025-4123\">https://grafana.com/security/security-advisories/cve-2025-4123</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/c7a690348df761d41b659224cbc50a46a0c0e4cc\">https://github.com/grafana/grafana/commit/c7a690348df761d41b659224cbc50a46a0c0e4cc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q53q-gxq9-mgrj\">https://github.com/advisories/GHSA-q53q-gxq9-mgrj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q53q-gxq9-mgrj",
            "title": "[github.com/grafana/grafana] Grafana Cross-Site-Scripting (XSS) via custom loaded frontend plugin",
            "date_modified": "2025-05-22T18:50:44.000Z",
            "date_published": "2025-05-22T09:33:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q53q-gxq9-mgrj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Minting large amount of tokens through ibc transfer and then depositing them in validator rewards pool (via <code>DepositValidatorRewardsPool</code> message) can lead to integer overflow panic when calculating <code>cumulative_reward_ratio</code> for the validator.</p>\n<p>This calculation happens in <code>x/epoching</code> module <code>EndBlocker</code>, thus the panic will halt the chain.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Denial of Service - Due to panic in the <code>EndBlocker</code> Babylon Genesis will halt</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-869w-47c6-fq8q\">https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-869w-47c6-fq8q</a></li>\n<li><a href=\"https://github.com/babylonlabs-io/babylon/commit/f0a29d60f206268b56992fa50f38a48077eb4f59\">https://github.com/babylonlabs-io/babylon/commit/f0a29d60f206268b56992fa50f38a48077eb4f59</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3687\">https://pkg.go.dev/vuln/GO-2025-3687</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-869w-47c6-fq8q\">https://github.com/advisories/GHSA-869w-47c6-fq8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-869w-47c6-fq8q",
            "title": "[github.com/babylonlabs-io/babylon] Babylon Integer Overflow in Distribution Module CumulativeRewardRatio Calculation Leading to Chain Halt",
            "date_modified": "2025-05-22T14:57:31.000Z",
            "date_published": "2025-05-15T14:05:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-869w-47c6-fq8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A high vulnerability exists in the Babylon protocol's x/finality module due to a lack of domain separation in signed messages, combined with insufficient validation in the MsgCommitPubRandList handler. Specifically, the handler does not enforce that the submitted Commitment field is 32 bytes long. This allows an attacker to replay a signature originally generated for a different message (e.g., a Proof-of-Possession in MsgCreateFinalityProvider) as a MsgCommitPubRandList. By crafting the message parameters, an attacker can use the typically 20-byte address bytes (from the PoP context) to form the StartHeight, NumPubRand, and a shorter-than-expected Commitment (e.g., 4 bytes). The replayed signature will pass verification for this crafted message, leading to the injection of an invalid PubRand commitment.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Successful exploitation of this vulnerability, specifically via the PoP signature replay, allows an attacker to store an invalid PubRand commitment (with a non-standard length, e.g., 4 bytes) for a targeted Finality Provider (FP). Despite the commitment itself being malformed, it's the associated StartHeight and NumPubRand (derived from the replayed address bytes and typically very large) that cause severe consequences</p>\n<h3 id=\"future-recommendations\">Future recommendations</h3>\n<p>To minimize future risk of such attacks, all finality providers should:</p>\n<ol>\n<li>Never re-use your finality provider EOTS across the networks (e.g., the testnet) or for any other purpose. </li>\n<li>Never use EOTS keys to sign any other data than relevant to in-protocol messages. Ideally EOTS key should only be used to:<ul>\n<li>Sign initial proof of possession message</li>\n<li>Sign periodic randomness commits</li>\n<li>Sign finality votes with every block</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"finder\">Finder</h3>\n<p>Vulnerability discovered by:</p>\n<ul>\n<li>Marco Nunes</li>\n<li><a href=\"https://x.com/marcotnunes\">https://x.com/marcotnunes</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6\">https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6</a></li>\n<li><a href=\"https://github.com/babylonlabs-io/babylon/commit/cb5d0ecae5cebc116d09296baaed25f715f904df\">https://github.com/babylonlabs-io/babylon/commit/cb5d0ecae5cebc116d09296baaed25f715f904df</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3686\">https://pkg.go.dev/vuln/GO-2025-3686</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mm3-vfg8-7rg6\">https://github.com/advisories/GHSA-7mm3-vfg8-7rg6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mm3-vfg8-7rg6",
            "title": "[github.com/babylonlabs-io/babylon] Babylon Finality Provider `MsgCommitPubRandList` replay attack",
            "date_modified": "2025-05-22T14:56:01.000Z",
            "date_published": "2025-05-15T14:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mm3-vfg8-7rg6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Ackites KillWxapkg up to 2.4.1. It has been rated as problematic. This issue affects some unknown processing of the component wxapkg File Decompression Handler. The manipulation leads to resource consumption. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-5031\">https://nvd.nist.gov/vuln/detail/CVE-2025-5031</a></li>\n<li><a href=\"https://github.com/Ackites/KillWxapkg/issues/86\">https://github.com/Ackites/KillWxapkg/issues/86</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.309851\">https://vuldb.com/?ctiid.309851</a></li>\n<li><a href=\"https://vuldb.com/?id.309851\">https://vuldb.com/?id.309851</a></li>\n<li><a href=\"https://vuldb.com/?submit.580524\">https://vuldb.com/?submit.580524</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pqqp-7cp8-vxvf\">https://github.com/advisories/GHSA-pqqp-7cp8-vxvf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pqqp-7cp8-vxvf",
            "title": "[github.com/Ackites/KillWxapkg] Ackites KillWxapkg  Zip Bomb Resource Exhaustion",
            "date_modified": "2025-05-21T20:11:04.000Z",
            "date_published": "2025-05-21T18:33:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pqqp-7cp8-vxvf"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}