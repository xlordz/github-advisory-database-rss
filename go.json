{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Setting lower EVM call gas allows users to partially execute precompiles and error at specific points in the precompile code without reverting the partially written state. </p>\n<p>If executed on the distribution precompile when claiming funds, it could cause funds to be transferred to a user without resetting the claimable rewards to 0. The vulnerability could also be used to cause indeterministic execution by failing at other points in the code, halting validators.</p>\n<p>Any evmOS or Cosmos EVM chain using precompiles is affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability was patched by wrapping each precompile execution into an atomic function that reverts any partially committed state on error.</p>\n<ul>\n<li><a href=\"https://github.com/evmos/os\">evmos/os</a> patch file: <a href=\"https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_/\">https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_/</a></li>\n</ul>\n<p>For chains using a different file structure, you must manually apply the diff:</p>\n<h3 id=\"in-xevmstatedbgo\"><strong>In <code>x/evm/statedb.go</code>:</strong></h3>\n<p>Add the following function:</p>\n<pre><code class=\"language-go\">func (s *StateDB) RevertMultiStore(cms storetypes.CacheMultiStore, events sdk.Events) {\n    s.cacheCtx = s.cacheCtx.WithMultiStore(cms)\n    s.writeCache = func() {\n        // rollback the events to the ones\n        // on the snapshot\n        s.ctx.EventManager().EmitEvents(events)\n        cms.Write()\n    }\n}\n</code></pre>\n<h3 id=\"in-xevmstatedbjournalgo\"><strong>In <code>x/evm/statedb/journal.go</code>:</strong></h3>\n<p>Replace the <code>Revert</code> function with the following:</p>\n<pre><code class=\"language-go\">func (pc precompileCallChange) Revert(s *StateDB) {\n    // rollback multi store from cache ctx to the previous\n    // state stored in the snapshot\n    s.RevertMultiStore(pc.multiStore, pc.events)\n}\n</code></pre>\n<h3 id=\"in-precompilescommonprecompilego\"><strong>In <code>precompiles/common/precompile.go</code>:</strong></h3>\n<p>Change the function signature in <code>HandleGasError</code> to:</p>\n<pre><code class=\"language-go\">func HandleGasError(ctx sdk.Context, contract *vm.Contract, initialGas storetypes.Gas, err *error, stateDB *statedb.StateDB, snapshot snapshot) func() {\n...\n}\n</code></pre>\n<p>In the <code>HandleGasError</code> function, add the following line in the switch statement in the <code>case storetypes.ErrorOutOfGas:</code> case:</p>\n<pre><code class=\"language-go\">stateDB.RevertMultiStore(snapshot.MultiStore, snapshot.Events)\n</code></pre>\n<p>Add the following function:</p>\n<pre><code class=\"language-go\">// RunAtomic is used within the Run function of each Precompile implementation.\n// It handles rolling back to the provided snapshot if an error is returned from the core precompile logic.\n// Note: This is only required for stateful precompiles.\nfunc (p Precompile) RunAtomic(s snapshot, stateDB *statedb.StateDB, fn func() ([]byte, error)) ([]byte, error) {\n    bz, err := fn()\n    if err != nil {\n        // revert to snapshot on error\n        stateDB.RevertMultiStore(s.MultiStore, s.Events)\n    }\n    return bz, err\n}\n</code></pre>\n<h3 id=\"all-precompiles\"><strong>All Precompiles:</strong></h3>\n<p>Finally, in each precompile, locate the <code>Run</code> function, and wrap each switch statement and return values into <code>p.RunAtomic</code>. For example:</p>\n<pre><code class=\"language-go\">// Run executes the precompiled contract IBC transfer methods defined in the ABI.\nfunc (p Precompile) Run(evm *vm.EVM, contract *vm.Contract, readOnly bool) (bz []byte, err error) {\n    ctx, stateDB, snapshot, method, initialGas, args, err := p.RunSetup(evm, contract, readOnly, p.IsTransaction)\n    if err != nil {\n        return nil, err\n    }\n\n    // This handles any out of gas errors that may occur during the execution of a precompile tx or query.\n    // It avoids panics and returns the out of gas error so the EVM can continue gracefully.\n    defer cmn.HandleGasError(ctx, contract, initialGas, &amp;err, stateDB, snapshot)()\n\n        // === WRAP HERE ===\n    return p.RunAtomic(snapshot, stateDB, func() ([]byte, error) {\n        switch method.Name {\n        // TODO Approval transactions =&gt; need cosmos-sdk v0.46 &amp; ibc-go v6.2.0\n        // Authorization Methods:\n        case exampleCase:\n            bz, err = p.example(ctx, evm.Origin, stateDB, method, args)\n        default:\n            return nil, fmt.Errorf(cmn.ErrUnknownMethod, method.Name)\n        }\n\n        if err != nil {\n            return nil, err\n        }\n\n        cost := ctx.GasMeter().GasConsumed() - initialGas\n\n        if !contract.UseGas(cost) {\n            return nil, vm.ErrOutOfGas\n        }\n\n        if err := p.AddJournalEntries(stateDB, snapshot); err != nil {\n            return nil, err\n        }\n\n        return bz, nil\n    })\n}\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for chains that make use of precompiles. A coordinated upgrade is necessary to patch the issue.</p>\n<h3 id=\"testing\">Testing</h3>\n<p>A test was introduced in the distribution precompile to ensure that partial state writes no longer occur when a lower gas amount is set.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/evm/security/advisories/GHSA-mjfq-3qr2-6g84\">https://github.com/cosmos/evm/security/advisories/GHSA-mjfq-3qr2-6g84</a></li>\n<li><a href=\"https://github.com/cosmos/evm/commit/0fff8c144b24effbcb3addd666150ba5989d631c\">https://github.com/cosmos/evm/commit/0fff8c144b24effbcb3addd666150ba5989d631c</a></li>\n<li><a href=\"https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_\">https://drive.google.com/file/d/1LfC0WSrQOqwTOW3qfaE6t8Jqf1PLVtS_</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mjfq-3qr2-6g84\">https://github.com/advisories/GHSA-mjfq-3qr2-6g84</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mjfq-3qr2-6g84",
            "title": "[github.com/cosmos/evm] Cosmos EVM Allows Partial Precompile State Writes",
            "date_modified": "2025-05-14T17:35:55.000Z",
            "date_published": "2025-05-14T17:35:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mjfq-3qr2-6g84"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows an attacker who controls content on the target site, or on a subdomain of the target site (either via XSS, or otherwise) to bypass Cross-Site Request Forgery checks and issue requests on user's behalf.</p>\n<h3 id=\"details\">Details</h3>\n<p>Due to misuse of the Go <code>net/http</code> library, nosurf categorizes all incoming requests as plain-text HTTP requests, in which case the <code>Referer</code> header is not checked to have the same origin as the target webpage.</p>\n<p>If the attacker has control over HTML contents on either the target website (e.g. <code>example.com</code>), or on a website hosted on a subdomain of the target (e.g. <code>attacker.example.com</code>), they will also be able to manipulate cookies set for the target website. By acquiring the secret CSRF token from the cookie, or overriding the cookie with a new token known to the attacker, <code>attacker.example.com</code> is able to craft cross-site requests to <code>example.com</code>. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for the issue was released in nosurf 1.2.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In lieu of upgrading to a patched version of nosurf, users may additionally use another HTTP middleware to ensure that a non-safe HTTP request is coming from the same origin (e.g. by requiring a <code>Sec-Fetch-Site: same-origin</code> header in the request).</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/advisories/GHSA-rq77-p4h8-4crw\">https://github.com/advisories/GHSA-rq77-p4h8-4crw</a>\n<a href=\"https://github.com/justinas/nosurf-cve-2025-46721\">https://github.com/justinas/nosurf-cve-2025-46721</a>\n<a href=\"https://www.cve.org/CVERecord?id=CVE-2025-46721\">https://www.cve.org/CVERecord?id=CVE-2025-46721</a>\n<a href=\"https://github.com/justinas/nosurf/releases/tag/v1.2.0\">https://github.com/justinas/nosurf/releases/tag/v1.2.0</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/justinas/nosurf/security/advisories/GHSA-w9hf-35q4-vcjw\">https://github.com/justinas/nosurf/security/advisories/GHSA-w9hf-35q4-vcjw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46721\">https://nvd.nist.gov/vuln/detail/CVE-2025-46721</a></li>\n<li><a href=\"https://github.com/justinas/nosurf/commit/ec9bb776d8e5ba9e906b6eb70428f4e7b009feee\">https://github.com/justinas/nosurf/commit/ec9bb776d8e5ba9e906b6eb70428f4e7b009feee</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rq77-p4h8-4crw\">https://github.com/advisories/GHSA-rq77-p4h8-4crw</a></li>\n<li><a href=\"https://github.com/justinas/nosurf-cve-2025-46721\">https://github.com/justinas/nosurf-cve-2025-46721</a></li>\n<li><a href=\"https://github.com/justinas/nosurf/releases/tag/v1.2.0\">https://github.com/justinas/nosurf/releases/tag/v1.2.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w9hf-35q4-vcjw\">https://github.com/advisories/GHSA-w9hf-35q4-vcjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w9hf-35q4-vcjw",
            "title": "[github.com/justinas/nosurf] nosurf vulnerable to CSRF due to non-functional same-origin request checks",
            "date_modified": "2025-05-14T14:56:28.000Z",
            "date_published": "2025-05-14T14:56:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w9hf-35q4-vcjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions of OpenPubkey library prior to 0.10.0 contained a vulnerability that would allow a specially crafted JWS to bypass signature verification. As OPKSSH depends on the OpenPubkey library for authentication, this vulnerability in OpenPubkey also applies to OPKSSH versions prior to 0.5.0 and would allow an attacker to bypass OPKSSH authentication.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability does not exist in more recent versions of OPKSSH. his only impacts OPKSSH  when used to verify ssh keys on a server, the OPKSSH client is unaffected. To remediate upgrade to a version of OPKSSH v0.5.0 or greater.</p>\n<p>To determine if you are vulnerable run on your server:</p>\n<pre><code class=\"language-bash\">opkssh --version\n</code></pre>\n<p>If the version is less than 0.5.0 you should upgrade. To upgrade to the latest version run:</p>\n<pre><code class=\"language-bash\">wget -qO- \"https://raw.githubusercontent.com/openpubkey/opkssh/main/scripts/install-linux.sh\" | sudo bash\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-4658\">CVE-2025-4658</a></p>\n<p>The upstream vulnerability in OpenPubkey is <a href=\"https://www.cve.org/CVERecord?id=CVE-2025-3757\">CVE-2025-3757</a> and has the security advisory <a href=\"https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq\">https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openpubkey/opkssh/security/advisories/GHSA-56wx-66px-9j66\">https://github.com/openpubkey/opkssh/security/advisories/GHSA-56wx-66px-9j66</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4658\">https://nvd.nist.gov/vuln/detail/CVE-2025-4658</a></li>\n<li><a href=\"https://github.com/openpubkey/opkssh\">https://github.com/openpubkey/opkssh</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-56wx-66px-9j66\">https://github.com/advisories/GHSA-56wx-66px-9j66</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-56wx-66px-9j66",
            "title": "[github.com/openpubkey/opkssh] OPKSSH Vulnerable to Authentication Bypass ",
            "date_modified": "2025-05-13T21:35:00.000Z",
            "date_published": "2025-05-13T21:34:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-56wx-66px-9j66"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions of OpenPubkey library prior to 0.10.0 contained a vulnerability that would allow a specially crafted JWS to bypass signature verification.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to v0.10.0 or greater. This vulnerability is not present in versions of OpenPubkey after v0.9.0. </p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.cve.org/CVERecord?id=CVE-2025-3757\">CVE-2025-3757 </a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq\">https://github.com/openpubkey/openpubkey/security/advisories/GHSA-537f-gxgm-3jjq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3757\">https://nvd.nist.gov/vuln/detail/CVE-2025-3757</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-537f-gxgm-3jjq\">https://github.com/advisories/GHSA-537f-gxgm-3jjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-537f-gxgm-3jjq",
            "title": "[github.com/openpubkey/openpubkey] OpenPubkey Vulnerable to Authentication Bypass",
            "date_modified": "2025-05-13T21:34:05.000Z",
            "date_published": "2025-05-13T21:34:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-537f-gxgm-3jjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All Argo CD versions starting with 2.5.0-rc1 are vulnerable to an authorization bypass bug which allows a malicious Argo CD user to deploy Applications outside the configured allowed namespaces. </p>\n<h4 id=\"description-of-exploit\">Description of exploit</h4>\n<p>Reconciled Application namespaces are specified as a comma-delimited list of glob patterns. When sharding is enabled on the Application controller, it does not enforce that list of patterns when reconciling Applications. For example, if Application namespaces are configured to be <code>argocd-*</code>, the Application controller may reconcile an Application installed in a namespace called <code>other</code>, even though it does not start with <code>argocd-</code>.</p>\n<p>Reconciliation of the out-of-bounds Application is only triggered when the Application is updated, so the attacker must be able to cause an update operation on the Application resource.</p>\n<h4 id=\"limitations\">Limitations</h4>\n<p>This bug only applies to users who have explicitly enabled the \"apps-in-any-namespace\" feature by setting <code>application.namespaces</code> in the argocd-cmd-params-cm ConfigMap or otherwise setting the <code>--application-namespaces</code> flags on the Application controller and API server components. The apps-in-any-namespace feature is in beta as of this Security Advisory's publish date.</p>\n<p>The bug is also limited to Argo CD instances where sharding is enabled by increasing the <code>replicas</code> count for the Application controller.</p>\n<p>Finally, the AppProjects' <code>sourceNamespaces</code> field acts as a secondary check against this exploit. To cause reconciliation of an Application in an out-of-bounds namespace, an AppProject must be available which permits Applications in the out-of-bounds namespace.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.5.8</li>\n<li>v2.6.0-rc5</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Running only one replica of the Application controller will prevent exploitation of this bug.</p>\n<p>Making sure all AppProjects' <code>sourceNamespaces</code> are restricted within the confines of the configured Application namespaces will also prevent exploitation of this bug.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to ChangZhuo Chen (@czchen) for finding the issue and for contributing the fix!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://argo-cd--10678.org.readthedocs.build/en/10678/operator-manual/app-any-namespace/\">Documentation for apps-in-any-namespace</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22736\">https://nvd.nist.gov/vuln/detail/CVE-2023-22736</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6p4m-hw2h-6gmw\">https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6p4m-hw2h-6gmw",
            "title": "[github.com/argoproj/argo-cd/v2] Controller reconciles apps outside configured namespaces when sharding is enabled",
            "date_modified": "2025-05-13T20:56:19.000Z",
            "date_published": "2023-01-25T19:39:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6p4m-hw2h-6gmw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All Argo CD versions starting with 2.5.0-rc1 are vulnerable to an authorization bypass bug which allows a malicious Argo CD user to deploy Applications outside the configured allowed namespaces. </p>\n<h4 id=\"description-of-exploit\">Description of exploit</h4>\n<p>Reconciled Application namespaces are specified as a comma-delimited list of glob patterns. When sharding is enabled on the Application controller, it does not enforce that list of patterns when reconciling Applications. For example, if Application namespaces are configured to be <code>argocd-*</code>, the Application controller may reconcile an Application installed in a namespace called <code>other</code>, even though it does not start with <code>argocd-</code>.</p>\n<p>Reconciliation of the out-of-bounds Application is only triggered when the Application is updated, so the attacker must be able to cause an update operation on the Application resource.</p>\n<h4 id=\"limitations\">Limitations</h4>\n<p>This bug only applies to users who have explicitly enabled the \"apps-in-any-namespace\" feature by setting <code>application.namespaces</code> in the argocd-cmd-params-cm ConfigMap or otherwise setting the <code>--application-namespaces</code> flags on the Application controller and API server components. The apps-in-any-namespace feature is in beta as of this Security Advisory's publish date.</p>\n<p>The bug is also limited to Argo CD instances where sharding is enabled by increasing the <code>replicas</code> count for the Application controller.</p>\n<p>Finally, the AppProjects' <code>sourceNamespaces</code> field acts as a secondary check against this exploit. To cause reconciliation of an Application in an out-of-bounds namespace, an AppProject must be available which permits Applications in the out-of-bounds namespace.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.5.8</li>\n<li>v2.6.0-rc5</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Running only one replica of the Application controller will prevent exploitation of this bug.</p>\n<p>Making sure all AppProjects' <code>sourceNamespaces</code> are restricted within the confines of the configured Application namespaces will also prevent exploitation of this bug.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to ChangZhuo Chen (@czchen) for finding the issue and for contributing the fix!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://argo-cd--10678.org.readthedocs.build/en/10678/operator-manual/app-any-namespace/\">Documentation for apps-in-any-namespace</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6p4m-hw2h-6gmw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22736\">https://nvd.nist.gov/vuln/detail/CVE-2023-22736</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6p4m-hw2h-6gmw\">https://github.com/advisories/GHSA-6p4m-hw2h-6gmw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6p4m-hw2h-6gmw",
            "title": "[github.com/argoproj/argo-cd/v2] Controller reconciles apps outside configured namespaces when sharding is enabled",
            "date_modified": "2025-05-13T20:56:19.000Z",
            "date_published": "2023-01-25T19:39:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6p4m-hw2h-6gmw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Heap buffer overflow in libwebp allow a remote attacker to perform an out of bounds memory write via a crafted HTML page.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-4863\">https://nvd.nist.gov/vuln/detail/CVE-2023-4863</a></li>\n<li><a href=\"https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html\">https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html</a></li>\n<li><a href=\"https://crbug.com/1479274\">https://crbug.com/1479274</a></li>\n<li><a href=\"https://github.com/qnighy/libwebp-sys2-rs/pull/21\">https://github.com/qnighy/libwebp-sys2-rs/pull/21</a></li>\n<li><a href=\"https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b\">https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b</a></li>\n<li><a href=\"https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a\">https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a</a></li>\n<li><a href=\"https://bugzilla.suse.com/show_bug.cgi?id=1215231\">https://bugzilla.suse.com/show_bug.cgi?id=1215231</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=37478403\">https://news.ycombinator.com/item?id=37478403</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0060.html\">https://rustsec.org/advisories/RUSTSEC-2023-0060.html</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/CVE-2023-4863\">https://security-tracker.debian.org/tracker/CVE-2023-4863</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39823\">https://github.com/electron/electron/pull/39823</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39825\">https://github.com/electron/electron/pull/39825</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39826\">https://github.com/electron/electron/pull/39826</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39827\">https://github.com/electron/electron/pull/39827</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39828\">https://github.com/electron/electron/pull/39828</a></li>\n<li><a href=\"https://github.com/webmproject/libwebp/releases/tag/v1.3.2\">https://github.com/webmproject/libwebp/releases/tag/v1.3.2</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html\">https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html\">https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html\">https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0061.html\">https://rustsec.org/advisories/RUSTSEC-2023-0061.html</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202309-05\">https://security.gentoo.org/glsa/202309-05</a></li>\n<li><a href=\"https://www.debian.org/security/2023/dsa-5496\">https://www.debian.org/security/2023/dsa-5496</a></li>\n<li><a href=\"https://www.debian.org/security/2023/dsa-5497\">https://www.debian.org/security/2023/dsa-5497</a></li>\n<li><a href=\"https://www.debian.org/security/2023/dsa-5498\">https://www.debian.org/security/2023/dsa-5498</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/4\">http://www.openwall.com/lists/oss-security/2023/09/21/4</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/1\">http://www.openwall.com/lists/oss-security/2023/09/22/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/3\">http://www.openwall.com/lists/oss-security/2023/09/22/3</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/4\">http://www.openwall.com/lists/oss-security/2023/09/22/4</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/5\">http://www.openwall.com/lists/oss-security/2023/09/22/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/6\">http://www.openwall.com/lists/oss-security/2023/09/22/6</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/7\">http://www.openwall.com/lists/oss-security/2023/09/22/7</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/22/8\">http://www.openwall.com/lists/oss-security/2023/09/22/8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/26/1\">http://www.openwall.com/lists/oss-security/2023/09/26/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/26/7\">http://www.openwall.com/lists/oss-security/2023/09/26/7</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/28/1\">http://www.openwall.com/lists/oss-security/2023/09/28/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/28/2\">http://www.openwall.com/lists/oss-security/2023/09/28/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/28/4\">http://www.openwall.com/lists/oss-security/2023/09/28/4</a></li>\n<li><a href=\"https://github.com/jaredforth/webp/pull/30\">https://github.com/jaredforth/webp/pull/30</a></li>\n<li><a href=\"https://github.com/python-pillow/Pillow/pull/7395\">https://github.com/python-pillow/Pillow/pull/7395</a></li>\n<li><a href=\"https://github.com/jaredforth/webp/commit/9d4c56e63abecc777df71c702503c3eaabd7dcbc\">https://github.com/jaredforth/webp/commit/9d4c56e63abecc777df71c702503c3eaabd7dcbc</a></li>\n<li><a href=\"https://pillow.readthedocs.io/en/stable/releasenotes/10.0.1.html#security\">https://pillow.readthedocs.io/en/stable/releasenotes/10.0.1.html#security</a></li>\n<li><a href=\"https://github.com/ImageMagick/ImageMagick/discussions/6664\">https://github.com/ImageMagick/ImageMagick/discussions/6664</a></li>\n<li><a href=\"https://github.com/dlemstra/Magick.NET/releases/tag/13.3.0\">https://github.com/dlemstra/Magick.NET/releases/tag/13.3.0</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202401-10\">https://security.gentoo.org/glsa/202401-10</a></li>\n<li><a href=\"https://sethmlarson.dev/security-developer-in-residence-weekly-report-16\">https://sethmlarson.dev/security-developer-in-residence-weekly-report-16</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20230929-0011\">https://security.netapp.com/advisory/ntap-20230929-0011</a></li>\n<li><a href=\"https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863\">https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863</a></li>\n<li><a href=\"https://www.bentley.com/advisories/be-2023-0001\">https://www.bentley.com/advisories/be-2023-0001</a></li>\n<li><a href=\"https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks\">https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/security/advisories/mfsa2023-40\">https://www.mozilla.org/en-US/security/advisories/mfsa2023-40</a></li>\n<li><a href=\"https://www.vicarius.io/vsociety/posts/zero-day-webp-vulnerability-cve-2023-4863\">https://www.vicarius.io/vsociety/posts/zero-day-webp-vulnerability-cve-2023-4863</a></li>\n<li><a href=\"https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway\">https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway</a></li>\n<li><a href=\"https://blog.isosceles.com/the-webp-0day\">https://blog.isosceles.com/the-webp-0day</a></li>\n<li><a href=\"https://en.bandisoft.com/honeyview/history\">https://en.bandisoft.com/honeyview/history</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KUQ7CTX3W372X3UY56VVNAHCH6H2F4X3\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KUQ7CTX3W372X3UY56VVNAHCH6H2F4X3</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WTRUIS3564P7ZLM2S2IH4Y4KZ327LI4I\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WTRUIS3564P7ZLM2S2IH4Y4KZ327LI4I</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7hp-h8jx-5ppr\">https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7hp-h8jx-5ppr",
            "title": "[github.com/chai2010/webp] libwebp: OOB write in BuildHuffmanTable",
            "date_modified": "2025-05-13T20:50:33.000Z",
            "date_published": "2023-09-12T15:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7hp-h8jx-5ppr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Kyverno ignores subjectRegExp and IssuerRegExp while verifying artifact's sign with keyless mode. It allows the attacker to deploy kubernetes resources with the artifacts that were signed by unexpected certificate.</p>\n<h3 id=\"details\">Details</h3>\n<p>Kyverno checks only subject and issuer fields when verifying an artifact's signature: <a href=\"https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537\">https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537</a>. While there are subjectRegExp and issuerRegExp fields that can also be used for the defining expected subject and issue values. If the last ones are used then their values are not taken in count and there is no actually restriction for the certificate that was used for the image sign.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For the successful exploitation attacker needs:</p>\n<ul>\n<li>Private key of any certificate in the certificate chain that trusted by cosign. It can be certificate that signed by company's self-signed Root CA if they are using their own PKI.</li>\n<li>Access to container registry to push artifacts images </li>\n<li>Availability to deploy malicious artifacts to the kubernetes cluster</li>\n</ul>\n<ol>\n<li>Generate certificate that will be used for the image signing with the oidcissuer url. That can be done with the Fulcio or manually by using openssl</li>\n</ol>\n<pre><code># Create self-signed RootCA\nopenssl req -x509 -newkey rsa:4096 -keyout root-ca-key.pem -sha256 -noenc -days 9999 -subj \"/C=AA/L=Location/O=IT/OU=Security/CN=Root Certificate Authority\" -out root-ca.pem\n\n\n# Create request for the intermediate certificate\nopenssl req -noenc -newkey rsa:4096 -keyout intermediate-ca-key.pem -addext \"subjectKeyIdentifier = hash\" -addext \"keyUsage = critical,keyCertSign\" -addext \"basicConstraints = critical,CA:TRUE,pathlen:2\" -subj \"/C=AA/L=Location/O=IT/OU=Security/CN=Intermediate Certificate Authority\" -out intermediate-ca.csr\n\n# Issue intermediate cert with RootCA\nopenssl x509 -req -days 9999 -sha256 -in intermediate-ca.csr -CA root-ca.pem -CAkey root-ca-key.pem -copy_extensions copy -out intermediate-ca.pem\n\n# OID_1_1 is the hexadecimal representation of the oidcissuer url\nOID_1_1=$(echo -n \"https://me.net\" | xxd -p -u)\n\n# Create request for the leaf certificate\nopenssl req -noenc -newkey rsa:4096 -keyout my-key.pem -addext \"subjectKeyIdentifier = hash\" -addext \"basicConstraints = critical,CA:FALSE\" -addext \"keyUsage = critical,digitalSignature\" -addext \"subjectAltName = email:me@me.net\" -addext \"1.3.6.1.4.1.57264.1.1 = DER:${OID_1_1}\" -addext \"1.3.6.1.4.1.57264.1.8 = ASN1:UTF8String:https://me.net\" -subj \"/C=AA/L=Location/O=IT/OU=Security/CN=My Cosign Certificate\" -out my-cert.csr\n\n# Issue leaf cert with Intermediate CA\nopenssl x509 -req -in my-cert.csr -CA intermediate-ca.pem -CAkey intermediate-ca-key.pem -copy_extensions copy -days 9999 -sha256 -out my-cert.pem\n\n# Generate certificates chain\ncat intermediate-ca.pem root-ca.pem &gt; cert-chain.pem\n</code></pre>\n<ol start=\"2\">\n<li>Build and push container image</li>\n<li>Import key and sign the image with the generated certificate</li>\n</ol>\n<pre><code>COSIGN_PASSWORD=\"\" cosign import-key-pair --key my-key.pem --output-key-prefix=import-my-key\nCOSIGN_PASSWORD=\"\" cosign sign $IMAGE_WITH_HASH --tlog-upload=false --cert my-cert.pem --cert-chain cert-chain.pem --key import-my-key.key\n</code></pre>\n<ol start=\"3\">\n<li>Add ClusterPolicy for the Kyverno with the wrong subject and issuer regexp. Adding (Fulcio) Root CA as secret and using it in policy is optional only if cosign cannot trust it:</li>\n</ol>\n<pre><code>apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: check-image-keyless\nspec:\n  validationFailureAction: Enforce\n  webhookTimeoutSeconds: 30\n  rules:\n    - name: check-image-keyless\n      match:\n        any:\n        - resources:\n            kinds:\n              - Pod\n      context:\n        - name: encodedCert\n          apiCall:\n            urlPath: \"/api/v1/namespaces/kyverno/secrets/fulcio-ca\"\n            method: GET\n            jmesPath: \"data.\\\"fulcio-ca.pem\\\"\"\n        - name: root\n          variable:\n            jmesPath: \"base64_decode(encodedCert)\"\n      verifyImages:\n      - imageReferences:\n        - \"&lt;IMAGE_REGEXP&gt;\"\n        attestors:\n        - entries:\n          - keyless:\n              subjectRegExp: https://ivalid\n              issuerRegExp: https://ivalid\n              roots: \"{{root}}\"\n              rekor:\n                url: &lt;URL_TO_REKOR&gt;\n                pubkey: |-\n                  -----BEGIN PUBLIC KEY-----\n                  ...\n                  -----END PUBLIC KEY-----\n              ctlog:\n                pubkey: |-\n                  -----BEGIN PUBLIC KEY-----\n                  ...\n                  -----END PUBLIC KEY-----\n</code></pre>\n<ol start=\"4\">\n<li>Deploy previously signed image</li>\n</ol>\n<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: image-sign\n  name: image-sign\n  namespace: default\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: image-sign\n  strategy: {}\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: image-sign\n    spec:\n      containers:\n        - image: &lt;YOUR_IMAGE&gt;\n          imagePullPolicy: Always\n          name: image-signing\n          ports:\n            - containerPort: 5000\n          resources:\n            requests:\n              memory: 500Mi\n              cpu: 0.1\n            limits:\n              memory: 2Gi\n              cpu: 0.2\n      restartPolicy: Always\nstatus: {}\n</code></pre>\n<ol start=\"5\">\n<li>The deployment with pods will be create successfully due to not checking subjectRegExp and issuerRegExp fields validation</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>Deploying unauthorized kubernetes resources that can lead to full compromise of kubernetes cluster</p>\n<h3 id=\"ps\">P.S.</h3>\n<p>Problem was discovered by me when testing image sign verifying with keyless signing: \n<a href=\"https://kubernetes.slack.com/archives/CLGR9BJU9/p1740136401365279?thread_ts=1740136401.365279&amp;cid=CLGR9BJU9\">https://kubernetes.slack.com/archives/CLGR9BJU9/p1740136401365279?thread_ts=1740136401.365279&amp;cid=CLGR9BJU9</a>. Then it was <a href=\"https://github.com/kyverno/policies/issues/1246\">verified</a> and <a href=\"https://github.com/kyverno/kyverno/pull/12237\">fixed</a> by <a href=\"https://github.com/Mohdcode\">Mohcode</a>. But i think it should be registered as security problem such as it allows to bypass part of the verification mechanism and Kyverno users should be aware of it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kyverno/kyverno/security/advisories/GHSA-46mp-8w32-6g94\">https://github.com/kyverno/kyverno/security/advisories/GHSA-46mp-8w32-6g94</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29778\">https://nvd.nist.gov/vuln/detail/CVE-2025-29778</a></li>\n<li><a href=\"https://github.com/kyverno/policies/issues/1246\">https://github.com/kyverno/policies/issues/1246</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/pull/12237\">https://github.com/kyverno/kyverno/pull/12237</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/commit/8777672fb17bdf252bd2e7d8de3441e240404a60\">https://github.com/kyverno/kyverno/commit/8777672fb17bdf252bd2e7d8de3441e240404a60</a></li>\n<li><a href=\"https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537\">https://github.com/Mohdcode/kyverno/blob/373f942ea9fa8b63140d0eb0e101b9a5f71033f3/pkg/cosign/cosign.go#L537</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-46mp-8w32-6g94\">https://github.com/advisories/GHSA-46mp-8w32-6g94</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-46mp-8w32-6g94",
            "title": "[github.com/kyverno/kyverno] Kyverno ignores subjectRegExp and IssuerRegExp",
            "date_modified": "2025-05-08T14:51:57.000Z",
            "date_published": "2025-03-24T19:07:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-46mp-8w32-6g94"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Bleve includes HTTP utilities under bleve/http package, that are used by its sample application. \n(<a href=\"https://github.com/blevesearch/bleve-explorer\">https://github.com/blevesearch/bleve-explorer</a>)\nThese HTTP methods paves way for exploitation of a node’s filesystem where the bleve index resides, \nif the user has used bleve’s own HTTP (bleve/http) handlers for exposing the access to the indexes. \nFor instance, the CreateIndexHandler (http/index_create.go) and DeleteIndexHandler (http/index_delete.go) \nenable an attacker to create a bleve index (directory structure) anywhere where the user running the server \nhas the write permissions and to delete recursively any directory owned by the same user account.</p>\n<p>Users who have used the bleve/http package for exposing access to bleve index without the explicit \nhandling for the Role Based Access Controls(RBAC) of the index assets would be impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p><strong>No</strong>. The http package is purely intended to be used for demonstration purposes. \nAnd bleve is never designed to be handling the RBACs or it was ever advertised to be used in that way. \nHence the collaborators of this project have decided to stay away from adding any authentication or \nauthorization to bleve project at the moment.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>The bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user \ninputs as well as any authentication and authorization measures. \nSo it is recommended to not use that in production use cases.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue <a href=\"https://github.com/blevesearch/bleve/issues\">here</a>.</li>\n<li>Email us at [mailto:<a href=\"mailto:security@couchbase.com\">security@couchbase.com</a>, <a href=\"mailto:fts-team@couchbase.com\">fts-team@couchbase.com</a>].</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w\">https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31022\">https://nvd.nist.gov/vuln/detail/CVE-2022-31022</a></li>\n<li><a href=\"https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff\">https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0470\">https://pkg.go.dev/vuln/GO-2022-0470</a></li>\n<li><a href=\"https://github.com/blevesearch/bleve/commit/af9e3111dadfedf9d30f0448506b4a57fecc8550\">https://github.com/blevesearch/bleve/commit/af9e3111dadfedf9d30f0448506b4a57fecc8550</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9w9f-6mg8-jp7w\">https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9w9f-6mg8-jp7w",
            "title": "[github.com/blevesearch/bleve/v2] Missing Role Based Access Control for the REST handlers in bleve/http package",
            "date_modified": "2025-05-08T16:45:26.000Z",
            "date_published": "2022-06-03T22:17:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9w9f-6mg8-jp7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability classified as critical was found in Casdoor up to 1.811.0. This vulnerability affects the function HandleScim of the file controllers/scim.go of the component SCIM User Creation Endpoint. The manipulation leads to authorization bypass. The attack can be initiated remotely. Upgrading to version 1.812.0 is able to address this issue. The name of the patch is 3d12ac8dc2282369296c3386815c00a06c6a92fe. It is recommended to upgrade the affected component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-4210\">https://nvd.nist.gov/vuln/detail/CVE-2025-4210</a></li>\n<li><a href=\"https://github.com/casdoor/casdoor/commit/3d12ac8dc2282369296c3386815c00a06c6a92fe\">https://github.com/casdoor/casdoor/commit/3d12ac8dc2282369296c3386815c00a06c6a92fe</a></li>\n<li><a href=\"https://github.com/casdoor/casdoor/releases/tag/v1.812.0\">https://github.com/casdoor/casdoor/releases/tag/v1.812.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.307180\">https://vuldb.com/?ctiid.307180</a></li>\n<li><a href=\"https://vuldb.com/?id.307180\">https://vuldb.com/?id.307180</a></li>\n<li><a href=\"https://vuldb.com/?submit.556201\">https://vuldb.com/?submit.556201</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3661\">https://pkg.go.dev/vuln/GO-2024-3661</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8w8f-h4cm-c4pg\">https://github.com/advisories/GHSA-8w8f-h4cm-c4pg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8w8f-h4cm-c4pg",
            "title": "[github.com/casdoor/casdoor] Casdoor SCIM User Creation Endpoint scim.go HandleScim authorization in github.com/casdoor/casdoor",
            "date_modified": "2025-05-06T19:59:55.000Z",
            "date_published": "2025-05-02T18:31:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8w8f-h4cm-c4pg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL offers developers the ability to manage user sessions using the <a href=\"https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service\">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>\n<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>\n<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>\n<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v3.0.0\">3.0.0</a>\n2.71.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.71.9\">2.71.9</a>\n2.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.70.10\">2.70.10</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The recommended solution is to update ZITADEL to a patched version.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq\">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162\">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.70.10\">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.71.9\">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v3.0.0\">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46815\">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g4r8-mp7g-85fq\">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g4r8-mp7g-85fq",
            "title": "[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse",
            "date_modified": "2025-05-06T19:57:19.000Z",
            "date_published": "2025-05-06T16:51:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g4r8-mp7g-85fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL offers developers the ability to manage user sessions using the <a href=\"https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service\">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>\n<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>\n<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>\n<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v3.0.0\">3.0.0</a>\n2.71.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.71.9\">2.71.9</a>\n2.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.70.10\">2.70.10</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The recommended solution is to update ZITADEL to a patched version.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq\">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162\">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.70.10\">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.71.9\">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v3.0.0\">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46815\">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g4r8-mp7g-85fq\">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g4r8-mp7g-85fq",
            "title": "[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse",
            "date_modified": "2025-05-06T19:57:19.000Z",
            "date_published": "2025-05-06T16:51:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g4r8-mp7g-85fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL offers developers the ability to manage user sessions using the <a href=\"https://zitadel.com/docs/category/apis/resources/session_service_v2/session-service\">Session API</a>. This API enables the use of IdPs for authentication, known as idp intents.</p>\n<p>Following a successful idp intent, the client receives an id and token on a predefined URI. These id and token can then be used to authenticate the user or their session.</p>\n<p>However, it was possible to exploit this feature by repeatedly using intents. This allowed an attacker with access to the application’s URI to retrieve the id and token, enabling them to authenticate on behalf of the user.</p>\n<p>It’s important to note that the use of additional factors (MFA) prevents a complete authentication process and, consequently, access to the ZITADEL API.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v3.0.0\">3.0.0</a>\n2.71.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.71.9\">2.71.9</a>\n2.x versions are fixed on &gt;=<a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.70.10\">2.70.10</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The recommended solution is to update ZITADEL to a patched version.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Józef Chraplewski from Nedap for reporting this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq\">https://github.com/zitadel/zitadel/security/advisories/GHSA-g4r8-mp7g-85fq</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162\">https://github.com/zitadel/zitadel/commit/b1e60e7398d677f08b06fd7715227f70b7ca1162</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.70.10\">https://github.com/zitadel/zitadel/releases/tag/v2.70.10</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.71.9\">https://github.com/zitadel/zitadel/releases/tag/v2.71.9</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel/releases/tag/v3.0.0\">https://github.com/zitadel/zitadel/releases/tag/v3.0.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46815\">https://nvd.nist.gov/vuln/detail/CVE-2025-46815</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g4r8-mp7g-85fq\">https://github.com/advisories/GHSA-g4r8-mp7g-85fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g4r8-mp7g-85fq",
            "title": "[github.com/zitadel/zitadel] ZITADEL Allows IdP Intent Token Reuse",
            "date_modified": "2025-05-06T19:57:19.000Z",
            "date_published": "2025-05-06T16:51:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g4r8-mp7g-85fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It seems that when running <strong>goshs</strong> without arguments it is possible for anyone to execute commands on the server. This was tested on version <strong>1.0.4</strong> of <strong>goshs</strong>. The command function was introduced in version <strong>0.3.4</strong>.</p>\n<h3 id=\"details\">Details</h3>\n<p>It seems that the function <code>dispatchReadPump</code> does not checks the option cli <code>-c</code>, thus allowing anyone to execute arbitrary command through the use of websockets.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Used <strong>websocat</strong> for the POC:</p>\n<pre><code class=\"language-bash\">echo -e '{\"type\": \"command\", \"content\": \"id\"}' |./websocat 'ws://192.168.1.11:8000/?ws' -t\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability will only impacts goshs server on vulnerable versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/patrickhener/goshs/security/advisories/GHSA-rwj2-w85g-5cmm\">https://github.com/patrickhener/goshs/security/advisories/GHSA-rwj2-w85g-5cmm</a></li>\n<li><a href=\"https://github.com/patrickhener/goshs/commit/160220974576afe5111485b8d12fd36058984cfa\">https://github.com/patrickhener/goshs/commit/160220974576afe5111485b8d12fd36058984cfa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46816\">https://nvd.nist.gov/vuln/detail/CVE-2025-46816</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rwj2-w85g-5cmm\">https://github.com/advisories/GHSA-rwj2-w85g-5cmm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rwj2-w85g-5cmm",
            "title": "[github.com/patrickhener/goshs] goshs route not protected, allows command execution",
            "date_modified": "2025-05-06T21:44:06.000Z",
            "date_published": "2025-05-06T16:45:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rwj2-w85g-5cmm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact:</h2>\n<p>A security issue has been found in <code>terraform-provider-windns</code> before version <code>1.0.5</code>. The <code>windns_record</code> resource did not santize the input variables. This can lead to authenticated command injection in the underlyding powershell command prompt.</p>\n<h2 id=\"patches\">Patches:</h2>\n<p><a href=\"https://github.com/nrkno/terraform-provider-windns/commit/c76f69610c1b502f90aaed8c4f102194530b5bce\"><code>83ef736 (fix: better input validation)</code></a></p>\n<h2 id=\"fixed-versions\">Fixed versions:</h2>\n<ul>\n<li><code>v1.0.5</code></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nrkno/terraform-provider-windns/security/advisories/GHSA-4vgf-2cm4-mp7c\">https://github.com/nrkno/terraform-provider-windns/security/advisories/GHSA-4vgf-2cm4-mp7c</a></li>\n<li><a href=\"https://github.com/nrkno/terraform-provider-windns/commit/c76f69610c1b502f90aaed8c4f102194530b5bce\">https://github.com/nrkno/terraform-provider-windns/commit/c76f69610c1b502f90aaed8c4f102194530b5bce</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46735\">https://nvd.nist.gov/vuln/detail/CVE-2025-46735</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vgf-2cm4-mp7c\">https://github.com/advisories/GHSA-4vgf-2cm4-mp7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vgf-2cm4-mp7c",
            "title": "[github.com/nrkno/terraform-provider-windns] Terraform WinDNS Provider improperly sanitizes input variables in `windns_record`",
            "date_modified": "2025-05-06T19:56:58.000Z",
            "date_published": "2025-05-06T16:38:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vgf-2cm4-mp7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Security policies like <a href=\"https://inspektor-gadget.io/docs/latest/reference/restricting-gadgets\"><code>allowed-gadgets</code></a>,  <a href=\"https://inspektor-gadget.io/docs/latest/reference/disallow-pulling\"><code>disallow-pulling</code></a>, <a href=\"https://inspektor-gadget.io/docs/latest/reference/verify-assets#verify-image-based-gadgets\"><code>verify-image</code></a> can be bypassed by a malicious client.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users running <code>ig</code> in daemon mode or IG on Kubernetes that rely on any of the features mentioned above are vulnerable to this issue. In order to exploit this, the client needs access to the server, like the correct TLS certificates on the <code>ig daemon</code> case or access to the cluster in the Kubernetes case. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been fixed in v0.40.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is not known workaround to fix it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/inspektor-gadget/inspektor-gadget/security/advisories/GHSA-pv22-fqcj-7xwh\">https://github.com/inspektor-gadget/inspektor-gadget/security/advisories/GHSA-pv22-fqcj-7xwh</a></li>\n<li><a href=\"https://github.com/inspektor-gadget/inspektor-gadget/commit/c51d419964f5b6f9344fcad4faba70e2e025212b\">https://github.com/inspektor-gadget/inspektor-gadget/commit/c51d419964f5b6f9344fcad4faba70e2e025212b</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3665\">https://pkg.go.dev/vuln/GO-2025-3665</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pv22-fqcj-7xwh\">https://github.com/advisories/GHSA-pv22-fqcj-7xwh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pv22-fqcj-7xwh",
            "title": "[github.com/inspektor-gadget/inspektor-gadget] Inspektor Gadget Security Policies Can be Bypassed",
            "date_modified": "2025-05-06T19:13:24.000Z",
            "date_published": "2025-05-06T00:42:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pv22-fqcj-7xwh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Buoyant Edge releases before edge-25.2.1 and Enterprise for Linkerd releases 2.16.* before 2.16.5, 2.17.* before 2.17.2, and 2.18.* before 2.18.0, resource exhaustion can occur for Linkerd proxy metrics.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-43915\">https://nvd.nist.gov/vuln/detail/CVE-2025-43915</a></li>\n<li><a href=\"https://docs.buoyant.io/security/advisories/2025-01\">https://docs.buoyant.io/security/advisories/2025-01</a></li>\n<li><a href=\"https://www.buoyant.io/resources\">https://www.buoyant.io/resources</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-42mr-jpwh-m9rv\">https://github.com/advisories/GHSA-42mr-jpwh-m9rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-42mr-jpwh-m9rv",
            "title": "[github.com/linkerd/linkerd2] Linkerd resource exhaustion vulnerability",
            "date_modified": "2025-05-06T00:38:56.000Z",
            "date_published": "2025-05-05T18:32:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-42mr-jpwh-m9rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When run as a server, OPA exposes an HTTP<a href=\"https://www.openpolicyagent.org/docs/latest/rest-api/#data-api\"> Data API</a> for reading and writing documents. Requesting a virtual document through the Data API entails policy evaluation, where a Rego query containing a single data document <a href=\"https://www.openpolicyagent.org/docs/latest/policy-language/#references\">reference</a> is constructed from the requested path. This query is then used for policy evaluation.</p>\n<p>A HTTP request path can be crafted in a way that injects Rego code into the constructed query. The evaluation result cannot be made to return any other data than what is generated by the requested path, but this path can be misdirected, and the injected Rego code can be crafted to make the query succeed or fail; opening up for oracle attacks or, given the right circumstances, erroneous policy decision results. Furthermore, the injected code can be crafted to be computationally expensive, resulting in a Denial Of Service (DoS) attack.</p>\n<p><strong>Users are only impacted if all of the following apply:</strong></p>\n<ul>\n<li>OPA is deployed as a standalone server (rather than being used as a Go library)</li>\n<li>The OPA server is exposed outside of the local host in an untrusted environment.</li>\n<li>The configured <a href=\"https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization\">authorization policy</a> does not do exact matching of the <code>input.path</code> attribute when deciding if the request should be allowed.</li>\n</ul>\n<p><strong>or, if all of the following apply:</strong></p>\n<ul>\n<li>OPA is deployed as a standalone server.</li>\n<li>The service connecting to OPA allows 3rd parties to insert unsanitised text into the path of the HTTP request to OPA’s Data API.</li>\n</ul>\n<p><strong>Note:</strong> With <strong>no</strong> Authorization Policy configured for restricting API access (the default configuration), the RESTful Data API provides access for managing Rego policies; and the RESTful Query API facilitates advanced queries. Full access to these APIs provides both simpler, and broader access than what the security issue describes here can facilitate. As such, OPA servers exposed to a network are <strong>not</strong> considered affected by the attack described here if they are knowingly not restricting access through an Authorization Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in OPA v1.4.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<h4 id=\"dont-publicly-expose-opas-restful-apis\">Don’t publicly expose OPA’s RESTful APIs</h4>\n<p>Unless necessary for production reasons, network access to OPA’s RESTful APIs should be limited to <code>localhost</code> and/or trusted networks. \nSince OPA v1.0, unless otherwise configured, the server listener defaults to <code>localhost</code>.</p>\n<h4 id=\"enable-authentication-to-only-allow-access-to-trusted-clients\">Enable Authentication to Only Allow Access to Trusted Clients</h4>\n<p>A configured <a href=\"https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization\">authentication</a> scheme is a requirement when OPA is exposed in an untrusted environment. While requiring authentication alone doesn’t mitigate this attack, it effectively reduces the scope from untrusted clients to trusted clients.</p>\n<h4 id=\"perform-path-validation-using-opas-authorization-policy-functionality\">Perform Path Validation Using OPA’s Authorization Policy Functionality</h4>\n<p>OPA can be configured to use an <a href=\"https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization\">Authorization Policy</a> to validate all incoming requests.\nBy authoring the Authorization Policy to only accept paths corresponding to expected Rego package references, this attack can be fully mitigated.</p>\n<p>The HTTP path in a Data API request is of the format <code>/v1/data/{path:.+}</code> (<code>/v0/data/{path:.+}</code>, for the v0 Data API), where <code>data/{path:.+}</code> directly corresponds to a reference to a virtual document, and a prefix of <code>{path:.+}</code> corresponds to a Rego <code>package</code> declaration. \nE.g. the HTTP path <code>v1/data/do/re/mi</code> corresponds to the data reference <code>data.do.re.mi</code>, where <code>do.re</code> is the package and <code>mi</code> is the rule in the following Rego module:</p>\n<pre><code class=\"language-rego\">package do.re\n\nmi if {\n    ...\n}\n</code></pre>\n<p>Unless otherwise <a href=\"https://www.openpolicyagent.org/docs/latest/configuration/#miscellaneous\">configured</a>, OPA will use the rule at <code>data.system.authz.allow</code> as Authorization Policy. Authorization is enabled by starting OPA with the <code>--authorization=basic</code> flag, and the Authorization policy must be made available to the OPA runtime either through a bundle (via the <code>--bundle</code> flag or through <a href=\"https://www.openpolicyagent.org/docs/latest/management-discovery/\">discovery</a>) or as an individual module via the command-line.</p>\n<p>A trivial Authorization Policy example:</p>\n<pre><code class=\"language-rego\">package system.authz\n\nallowed_paths := [\n    [\"v1\", \"data\", \"policy1\", \"allow\"],\n    [\"v1\", \"data\", \"policy2\", \"allow\"],\n    ...\n]\n\nallow if {\n    input.path in allowed_paths\n}\n</code></pre>\n<p><strong>Note:</strong> configuring an Authorization Policy in OPA isn't the only way to protect against malicious request paths. Path validation and sanitisation can also be performed by connecting clients and 3rd party intermediaries, such as API gateways, reverse proxies, etc.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7\">https://github.com/open-policy-agent/opa/security/advisories/GHSA-6m8w-jc87-6cr7</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c\">https://github.com/open-policy-agent/opa/commit/ad2063247a14711882f18c387a511fc8094aa79c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-46569\">https://nvd.nist.gov/vuln/detail/CVE-2025-46569</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3660\">https://pkg.go.dev/vuln/GO-2025-3660</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m8w-jc87-6cr7\">https://github.com/advisories/GHSA-6m8w-jc87-6cr7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m8w-jc87-6cr7",
            "title": "[github.com/open-policy-agent/opa] OPA server Data API HTTP path injection of Rego",
            "date_modified": "2025-05-05T22:02:33.000Z",
            "date_published": "2025-05-01T17:02:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m8w-jc87-6cr7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified in Steve where by default it was using an insecure option that did not validate the certificate presented by the remote server while performing a TLS connection. This could allow the execution of a man-in-the-middle (MitM) attack against services using Steve.</p>\n<p>For example, Rancher relies on Steve as a dependency for its user interface (UI) to proxy requests to Kubernetes clusters. Users who have the permission to create a service in Rancher’s local cluster can take over Rancher’s UI and display their own UI to gather sensitive information. This is only possible when the setting <code>ui-offline-preferred</code> is manually set to <code>remote</code> (by default Rancher sets it to <code>dynamic</code>). This enables further attacks such as cross-site scripting (XSS), or tampering the UI to collect passwords from other users etc.</p>\n<p>Please consult the associated  <a href=\"https://attack.mitre.org/techniques/T1557/\">MITRE ATT&amp;CK - Technique - Adversary-in-the-Middle</a> for further information about this category of attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions of Steve include releases <code>v0.2.1</code>, <code>v0.3.3</code>, <code>v0.4.4</code> and <code>v0.5.13</code>.</p>\n<p>This vulnerability is addressed by changing Steve to always verify a server’s certificate based on Go’s TLS settings.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you can't upgrade to a fixed version, please make sure that you are only using Steve to connect to trusted servers.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/steve/security/advisories/GHSA-95fc-g4gj-mqmx\">https://github.com/rancher/steve/security/advisories/GHSA-95fc-g4gj-mqmx</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3648\">https://pkg.go.dev/vuln/GO-2025-3648</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95fc-g4gj-mqmx\">https://github.com/advisories/GHSA-95fc-g4gj-mqmx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95fc-g4gj-mqmx",
            "title": "[github.com/rancher/steve] Steve doesn’t verify a server’s certificate and is susceptible to man-in-the-middle (MitM) attacks",
            "date_modified": "2025-05-05T22:02:02.000Z",
            "date_published": "2025-04-25T15:12:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95fc-g4gj-mqmx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vault Community, Vault Enterprise (“Vault”) Azure Auth method did not correctly validate the claims in the Azure-issued token, resulting in the potential bypass of the bound_locations parameter on login. Fixed in Vault Community Edition 1.19.1 and Vault Enterprise 1.19.1, 1.18.7, 1.17.14, 1.16.18.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-3879\">https://nvd.nist.gov/vuln/detail/CVE-2025-3879</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2025-07-vault-s-azure-authentication-method-bound-location-restriction-could-be-bypassed-on-login/74716\">https://discuss.hashicorp.com/t/hcsec-2025-07-vault-s-azure-authentication-method-bound-location-restriction-could-be-bypassed-on-login/74716</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3662\">https://pkg.go.dev/vuln/GO-2025-3662</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f9ch-h8j7-8jwg\">https://github.com/advisories/GHSA-f9ch-h8j7-8jwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f9ch-h8j7-8jwg",
            "title": "[github.com/hashicorp/vault] Hashicorp Vault Community vulnerable to Incorrect Authorization",
            "date_modified": "2025-05-06T19:12:49.000Z",
            "date_published": "2025-05-02T18:31:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f9ch-h8j7-8jwg"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}