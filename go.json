{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Function <a href=\"https://github.com/golang-jwt/jwt/blob/c035977d9e11c351f4c05dfeae193923cbab49ee/parser.go#L138-L139\"><code>parse.ParseUnverified</code></a> currently splits (via a call to <a href=\"https://pkg.go.dev/strings#Split\">strings.Split</a>) its argument (which is untrusted data) on periods.</p>\n<p>As a result, in the face of a malicious request whose <em>Authorization</em> header consists of <code>Bearer </code> followed by many period characters, a call to that function incurs allocations to the tune of O(n) bytes (where n stands for the length of the function's argument), with a constant factor of about 16. Relevant weakness: <a href=\"https://cwe.mitre.org/data/definitions/405.html\">CWE-405: Asymmetric Resource Consumption (Amplification)</a></p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/golang-jwt/jwt/blob/c035977d9e11c351f4c05dfeae193923cbab49ee/parser.go#L138-L139\"><code>parse.ParseUnverified</code></a> </p>\n<h3 id=\"impact\">Impact</h3>\n<p>Excessive memory allocation</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/golang-jwt/jwt/security/advisories/GHSA-mh63-6h87-95cp\">https://github.com/golang-jwt/jwt/security/advisories/GHSA-mh63-6h87-95cp</a></li>\n<li><a href=\"https://github.com/golang-jwt/jwt/commit/0951d184286dece21f73c85673fd308786ffe9c3\">https://github.com/golang-jwt/jwt/commit/0951d184286dece21f73c85673fd308786ffe9c3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30204\">https://nvd.nist.gov/vuln/detail/CVE-2025-30204</a></li>\n<li><a href=\"https://github.com/golang-jwt/jwt/commit/bf316c48137a1212f8d0af9288cc9ce8e59f1afb\">https://github.com/golang-jwt/jwt/commit/bf316c48137a1212f8d0af9288cc9ce8e59f1afb</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20250404-0002\">https://security.netapp.com/advisory/ntap-20250404-0002</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mh63-6h87-95cp\">https://github.com/advisories/GHSA-mh63-6h87-95cp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mh63-6h87-95cp",
            "title": "[github.com/golang-jwt/jwt] jwt-go allows excessive memory allocation during header parsing",
            "date_modified": "2025-04-10T13:02:35.000Z",
            "date_published": "2025-03-21T22:04:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mh63-6h87-95cp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The buffer created for parsing metadata for PNG and WebP images was only bounded by their input data type, which could lead to potentially large memory allocation, and unreasonably high for image metadata. Before <code>v0.11.0</code>, If you didn't trust the input images, this could be abused to construct denial-of-service attacks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><code>v0.11.0</code> added a 10 MB upper limit.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bep/imagemeta/security/advisories/GHSA-fmhh-rw3h-785m\">https://github.com/bep/imagemeta/security/advisories/GHSA-fmhh-rw3h-785m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32025\">https://nvd.nist.gov/vuln/detail/CVE-2025-32025</a></li>\n<li><a href=\"https://github.com/bep/imagemeta/commit/ee0de9b029f4e82106729f69559f27c9a404229d\">https://github.com/bep/imagemeta/commit/ee0de9b029f4e82106729f69559f27c9a404229d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fmhh-rw3h-785m\">https://github.com/advisories/GHSA-fmhh-rw3h-785m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fmhh-rw3h-785m",
            "title": "[github.com/bep/imagemeta] bep/imagemeta allows a potentially large memory allocation in PNG and WebP parsing",
            "date_modified": "2025-04-09T12:57:57.000Z",
            "date_published": "2025-04-09T12:57:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fmhh-rw3h-785m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The EXIF data format allows for defining excessively large data structures in relatively small payloads. Before <code>v0.10.0</code>, If you didn't trust the input images, this could be abused to construct denial-of-service attacks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><code>v0.10.0</code> added LimitNumTags (default 5000) and LimitTagSize (default 10000) options.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bep/imagemeta/security/advisories/GHSA-q7rw-w4cq-2j6w\">https://github.com/bep/imagemeta/security/advisories/GHSA-q7rw-w4cq-2j6w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-32024\">https://nvd.nist.gov/vuln/detail/CVE-2025-32024</a></li>\n<li><a href=\"https://github.com/bep/imagemeta/commit/4fd89616d8bf7f9bb892360d3fb19080ec2b4602\">https://github.com/bep/imagemeta/commit/4fd89616d8bf7f9bb892360d3fb19080ec2b4602</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q7rw-w4cq-2j6w\">https://github.com/advisories/GHSA-q7rw-w4cq-2j6w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q7rw-w4cq-2j6w",
            "title": "[github.com/bep/imagemeta] bep/imagemeta allows excessively large EXIF data structures",
            "date_modified": "2025-04-09T12:57:46.000Z",
            "date_published": "2025-04-09T12:57:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q7rw-w4cq-2j6w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>moby v25.0.3 has a Race Condition vulnerability in the streamformatter package which can be used to trigger multiple concurrent write operations resulting in data corruption or application crashes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36623\">https://nvd.nist.gov/vuln/detail/CVE-2024-36623</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/5689dabfb357b673abdb4391eef426f297d7d1bb\">https://github.com/moby/moby/commit/5689dabfb357b673abdb4391eef426f297d7d1bb</a></li>\n<li><a href=\"https://gist.github.com/1047524396/c192c0159a19bf58a4373b696467dc29\">https://gist.github.com/1047524396/c192c0159a19bf58a4373b696467dc29</a></li>\n<li><a href=\"https://github.com/moby/moby/blob/v25.0.3/pkg/streamformatter/streamformatter.go#L115\">https://github.com/moby/moby/blob/v25.0.3/pkg/streamformatter/streamformatter.go#L115</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/8e3bcf19748838b30e34d612832d1dc9d90363b8\">https://github.com/moby/moby/commit/8e3bcf19748838b30e34d612832d1dc9d90363b8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gh5c-3h97-2f3q\">https://github.com/advisories/GHSA-gh5c-3h97-2f3q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gh5c-3h97-2f3q",
            "title": "[github.com/moby/moby] Moby Race Condition vulnerability",
            "date_modified": "2025-04-04T15:19:52.000Z",
            "date_published": "2024-11-29T18:34:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gh5c-3h97-2f3q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a high priority vulnerability and users must upgrade ASAP.</p>\n<p>The signature component of the authorization may be invalid, which would mean that as a client you can use any arbitrary secret to upload objects given the user already has prior WRITE permissions on the bucket,</p>\n<p>Prior knowledge of access-key, and bucket name this user might have access to - and an access-key with a WRITE permissions is necessary.</p>\n<p>However with relevant information in place, uploading random objects to buckets is trivial and easy via <code>curl</code></p>\n<h3 id=\"patches\">Patches</h3>\n<p>Yes <a href=\"https://github.com/minio/minio/pull/21103\">https://github.com/minio/minio/pull/21103</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Reject requests with <code>x-amz-content-sha256: STREAMING-UNSIGNED-PAYLOAD-TRAILER</code> for now at LB layer, ask application users to use <code>STREAMING-AWS4-HMAC-SHA256-PAYLOAD-TRAILER</code></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/minio/minio/security/advisories/GHSA-wg47-6jq2-q2hh\">https://github.com/minio/minio/security/advisories/GHSA-wg47-6jq2-q2hh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31489\">https://nvd.nist.gov/vuln/detail/CVE-2025-31489</a></li>\n<li><a href=\"https://github.com/minio/minio/pull/21103\">https://github.com/minio/minio/pull/21103</a></li>\n<li><a href=\"https://github.com/minio/minio/commit/8c70975283f9f4ce80f331a25c7475a36279e519\">https://github.com/minio/minio/commit/8c70975283f9f4ce80f331a25c7475a36279e519</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wg47-6jq2-q2hh\">https://github.com/advisories/GHSA-wg47-6jq2-q2hh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wg47-6jq2-q2hh",
            "title": "[github.com/minio/minio] MinIO performs incomplete signature validation for unsigned-trailer uploads",
            "date_modified": "2025-04-04T14:28:29.000Z",
            "date_published": "2025-04-04T14:28:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wg47-6jq2-q2hh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>Due to a weak Content Security Policy on the <code>/proxy/*</code> route, an attacker can bypass the CSP of the media proxy and execute cross-site scripting when opening external images in a new tab/window.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>A malicious feed added to Miniflux can execute arbitrary JavaScript in the user's browser when opening external resources, such as proxified images, in a new tab or window.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>The CSP for the media proxy has been changed from <code>default-src 'self'</code> to <code>default-src 'none'; form-action 'none'; sandbox;</code>.</p>\n<p>Upgrade to Miniflux &gt;= 2.2.7</p>\n<h2 id=\"credit\">Credit</h2>\n<p><a href=\"https://ryotak.net\">RyotaK</a> (GMO Flatt Security Inc.) with <a href=\"https://takumi-san.ai\">takumi-san.ai</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/miniflux/v2/security/advisories/GHSA-cq88-842x-2jhp\">https://github.com/miniflux/v2/security/advisories/GHSA-cq88-842x-2jhp</a></li>\n<li><a href=\"https://github.com/miniflux/v2/commit/cb695e653a08af4cabcb277c271ce74bd0c746e6\">https://github.com/miniflux/v2/commit/cb695e653a08af4cabcb277c271ce74bd0c746e6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31483\">https://nvd.nist.gov/vuln/detail/CVE-2025-31483</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cq88-842x-2jhp\">https://github.com/advisories/GHSA-cq88-842x-2jhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cq88-842x-2jhp",
            "title": "[miniflux.app/v2] Miniflux Media Proxy vulnerable to Stored Cross-site Scripting due to improper Content-Security-Policy configuration",
            "date_modified": "2025-04-07T19:52:04.000Z",
            "date_published": "2025-04-04T14:09:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cq88-842x-2jhp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Since <a href=\"https://github.com/miniflux/v2/releases/tag/2.0.25\">v2.0.25</a>, Miniflux will automatically <a href=\"https://miniflux.app/docs/configuration.html#proxy-images\">proxy</a> images served over HTTP to prevent mixed content errors.</p>\n<p>When an outbound request made by the Go HTTP client fails, the <code>html.ServerError</code> is <a href=\"https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L76\">returned</a> unescaped without the expected Content Security Policy <a href=\"https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L90\">header</a> added to valid responses.</p>\n<p>By creating an RSS feed item with the inline description containing an <code>&lt;img&gt;</code> tag with a <code>srcset</code> attribute pointing to an invalid URL like <code>http:a&lt;script&gt;alert(1)&lt;/script&gt;</code>, we can coerce the proxy handler into an error condition where the invalid URL is returned unescaped and in full.</p>\n<p>This results in JavaScript execution on the Miniflux instance as soon as the user is convinced (e.g. by a message in the alt text) to open the broken image.</p>\n<p>An attacker can execute arbitrary JavaScript in the context of a victim Miniflux user when they open a broken image in a crafted RSS feed. This can be used to perform actions on the Miniflux instance as that user and gain administrative access to the Miniflux instance if it is reachable and the victim is an administrator.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>PR #1746 fixes the problem. Available in Miniflux &gt;= 2.0.43.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Disable image proxy (default value is <code>http-only</code>).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://miniflux.app/docs/configuration.html#proxy-images\">https://miniflux.app/docs/configuration.html#proxy-images</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/miniflux/v2/security/advisories/GHSA-mqqg-xjhj-wfgw\">https://github.com/miniflux/v2/security/advisories/GHSA-mqqg-xjhj-wfgw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27592\">https://nvd.nist.gov/vuln/detail/CVE-2023-27592</a></li>\n<li><a href=\"https://github.com/miniflux/v2/pull/1746\">https://github.com/miniflux/v2/pull/1746</a></li>\n<li><a href=\"https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L76\">https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L76</a></li>\n<li><a href=\"https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L90\">https://github.com/miniflux/v2/blob/b2fd84e0d376a3af6329b9bb2e772ce38a25c31c/ui/proxy.go#L90</a></li>\n<li><a href=\"https://github.com/miniflux/v2/releases/tag/2.0.25\">https://github.com/miniflux/v2/releases/tag/2.0.25</a></li>\n<li><a href=\"https://github.com/miniflux/v2/releases/tag/2.0.43\">https://github.com/miniflux/v2/releases/tag/2.0.43</a></li>\n<li><a href=\"https://miniflux.app/docs/configuration.html#proxy-images\">https://miniflux.app/docs/configuration.html#proxy-images</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mqqg-xjhj-wfgw\">https://github.com/advisories/GHSA-mqqg-xjhj-wfgw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mqqg-xjhj-wfgw",
            "title": "[miniflux.app/v2] Stored XSS in Miniflux when opening a broken image due to unescaped ServerError in proxy handler",
            "date_modified": "2025-04-02T17:25:16.000Z",
            "date_published": "2025-04-02T17:25:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mqqg-xjhj-wfgw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An unauthenticated user can retrieve Prometheus metrics from a publicly reachable Miniflux instance where the <code>METRICS_COLLECTOR</code> <a href=\"https://miniflux.app/docs/configuration.html#metrics-collector\">configuration option</a> is enabled and <code>METRICS_ALLOWED_NETWORKS</code> is set to <code>127.0.0.1/8</code> (the default).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>PR #1745 fixes the problem. Available in Miniflux &gt;= 2.0.43.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Set <code>METRICS_COLLECTOR</code> to <code>false</code> (default) or run Miniflux behind a trusted reverse-proxy.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://miniflux.app/docs/configuration.html#metrics-collector\">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>\n<li><a href=\"https://miniflux.app/docs/configuration.html#metrics-allowed-networks\">https://miniflux.app/docs/configuration.html#metrics-allowed-networks</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v\">https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27591\">https://nvd.nist.gov/vuln/detail/CVE-2023-27591</a></li>\n<li><a href=\"https://github.com/miniflux/v2/pull/1745\">https://github.com/miniflux/v2/pull/1745</a></li>\n<li><a href=\"https://github.com/miniflux/v2/releases/tag/2.0.43\">https://github.com/miniflux/v2/releases/tag/2.0.43</a></li>\n<li><a href=\"https://miniflux.app/docs/configuration.html#metrics-collector\">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3qjf-qh38-x73v\">https://github.com/advisories/GHSA-3qjf-qh38-x73v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3qjf-qh38-x73v",
            "title": "[miniflux.app] Unauthenticated Miniflux user can bypass allowed networks check to obtain Prometheus metrics",
            "date_modified": "2025-04-02T17:24:12.000Z",
            "date_published": "2025-04-02T17:24:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3qjf-qh38-x73v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An unauthenticated user can retrieve Prometheus metrics from a publicly reachable Miniflux instance where the <code>METRICS_COLLECTOR</code> <a href=\"https://miniflux.app/docs/configuration.html#metrics-collector\">configuration option</a> is enabled and <code>METRICS_ALLOWED_NETWORKS</code> is set to <code>127.0.0.1/8</code> (the default).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>PR #1745 fixes the problem. Available in Miniflux &gt;= 2.0.43.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Set <code>METRICS_COLLECTOR</code> to <code>false</code> (default) or run Miniflux behind a trusted reverse-proxy.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://miniflux.app/docs/configuration.html#metrics-collector\">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>\n<li><a href=\"https://miniflux.app/docs/configuration.html#metrics-allowed-networks\">https://miniflux.app/docs/configuration.html#metrics-allowed-networks</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v\">https://github.com/miniflux/v2/security/advisories/GHSA-3qjf-qh38-x73v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27591\">https://nvd.nist.gov/vuln/detail/CVE-2023-27591</a></li>\n<li><a href=\"https://github.com/miniflux/v2/pull/1745\">https://github.com/miniflux/v2/pull/1745</a></li>\n<li><a href=\"https://github.com/miniflux/v2/releases/tag/2.0.43\">https://github.com/miniflux/v2/releases/tag/2.0.43</a></li>\n<li><a href=\"https://miniflux.app/docs/configuration.html#metrics-collector\">https://miniflux.app/docs/configuration.html#metrics-collector</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3qjf-qh38-x73v\">https://github.com/advisories/GHSA-3qjf-qh38-x73v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3qjf-qh38-x73v",
            "title": "[miniflux.app/v2] Unauthenticated Miniflux user can bypass allowed networks check to obtain Prometheus metrics",
            "date_modified": "2025-04-02T17:24:12.000Z",
            "date_published": "2025-04-02T17:24:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3qjf-qh38-x73v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The PROXY command is accepted multiple times, allowing a client to spoof its IP address when the proxy protocol is being used.</p>\n<h3 id=\"details\">Details</h3>\n<p>When ProxyOn is enabled, <a href=\"https://github.com/phires/go-guerrilla/blob/fca3b2d8957a746997c7e71fca39004f5c96e91f/server.go#L495\">it looks like the PROXY command will be accepted multiple times</a>, with later invocations overriding earlier ones.  The proxy protocol only supports one initial PROXY header; anything after that is considered part of the exchange between client and server, so the client is free to send further PROXY commands with whatever data it pleases.  go-guerrilla will treat these as coming from the reverse proxy, allowing a client to spoof its IP address.</p>\n<p>Note that the format of the PROXY header is <a href=\"https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\">well-defined</a>.  It probably shouldn't be treated as an SMTP command; parsing it the same way is likely to result in odd behavior and could lead to other vulnerabilities.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>I'm working on writing a PR to fix this vulnerability.  It'll include a unit test that will serve as a PoC on the current version.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any instance with <code>ProxyOn</code> enabled (<code>proxyon</code> in the JSON config) is affected.</p>\n<p>As far as I'm able to tell, the impact is limited to spoofing the <code>RemoteIP</code> field.  This isn't ideal, but it probably has less practical impact on an MTA than, say, a web server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/phires/go-guerrilla/security/advisories/GHSA-c2c3-pqw5-5p7c\">https://github.com/phires/go-guerrilla/security/advisories/GHSA-c2c3-pqw5-5p7c</a></li>\n<li><a href=\"https://github.com/phires/go-guerrilla/commit/7673947f2d5204a135d7ae0b7f80759e548abee6\">https://github.com/phires/go-guerrilla/commit/7673947f2d5204a135d7ae0b7f80759e548abee6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-31135\">https://nvd.nist.gov/vuln/detail/CVE-2025-31135</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2c3-pqw5-5p7c\">https://github.com/advisories/GHSA-c2c3-pqw5-5p7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2c3-pqw5-5p7c",
            "title": "[github.com/phires/go-guerrilla] Go-Guerrilla SMTP Daemon allows the PROXY command to be sent multiple times",
            "date_modified": "2025-04-02T00:49:49.000Z",
            "date_published": "2025-04-01T22:23:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2c3-pqw5-5p7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Private Data Structure Returned From A Public Method vulnerability in Apache Answer.</p>\n<p>This issue affects Apache Answer: through 1.4.2.</p>\n<p>If a user uses an externally referenced image, when a user accesses this image, the provider of the image may obtain private information about the ip address of that accessing user.\nUsers are recommended to upgrade to version 1.4.5, which fixes the issue.&nbsp;In the new version, administrators can set whether external content can be displayed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29868\">https://nvd.nist.gov/vuln/detail/CVE-2025-29868</a></li>\n<li><a href=\"https://lists.apache.org/thread/l7pohw5g03g3qsvrz8pqc9t29mdv5lhf\">https://lists.apache.org/thread/l7pohw5g03g3qsvrz8pqc9t29mdv5lhf</a></li>\n<li><a href=\"https://github.com/apache/answer/issues/1250\">https://github.com/apache/answer/issues/1250</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/01/2\">http://www.openwall.com/lists/oss-security/2025/04/01/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2025/04/02/1\">http://www.openwall.com/lists/oss-security/2025/04/02/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wqcc-mfhw-53pc\">https://github.com/advisories/GHSA-wqcc-mfhw-53pc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wqcc-mfhw-53pc",
            "title": "[github.com/apache/answer] Apache Answer User Using External Images Potentially Discloses User Information",
            "date_modified": "2025-04-03T13:23:37.000Z",
            "date_published": "2025-04-01T09:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wqcc-mfhw-53pc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>\n<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>\n<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.\nPlease consult the associated  <a href=\"https://attack.mitre.org/techniques/T1548/\">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix introduces a few changes:</p>\n<ol>\n<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>\n<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>\n</ol>\n<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.\nIf users can't upgrade, the following are recommended:</p>\n<ol>\n<li>Limit access to Rancher Restricted Admin only to trusted users.</li>\n<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g\">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8p83-cpfg-fj3g\">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8p83-cpfg-fj3g",
            "title": "[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords",
            "date_modified": "2025-04-01T14:19:31.000Z",
            "date_published": "2025-04-01T14:19:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8p83-cpfg-fj3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>\n<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>\n<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.\nPlease consult the associated  <a href=\"https://attack.mitre.org/techniques/T1548/\">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix introduces a few changes:</p>\n<ol>\n<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>\n<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>\n</ol>\n<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.\nIf users can't upgrade, the following are recommended:</p>\n<ol>\n<li>Limit access to Rancher Restricted Admin only to trusted users.</li>\n<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g\">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8p83-cpfg-fj3g\">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8p83-cpfg-fj3g",
            "title": "[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords",
            "date_modified": "2025-04-01T14:19:31.000Z",
            "date_published": "2025-04-01T14:19:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8p83-cpfg-fj3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified within Rancher where a Restricted Administrator can change the password of Administrators and take over their accounts. </p>\n<p>A Restricted Administrator should be not allowed to change the password of more privileged users unless it contains the Manage Users permissions.</p>\n<p>Rancher deployments where the Restricted Administrator role is not being used are not affected by this CVE.\nPlease consult the associated  <a href=\"https://attack.mitre.org/techniques/T1548/\">MITRE ATT&amp;CK - Technique - Abuse Elevation Control Mechanism</a> for further information about this category of attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix introduces a few changes:</p>\n<ol>\n<li>If the user has a manage-users verb, the user is allowed to edit/delete users. That way the Manage Users built in role will still be able to edit ALL users.</li>\n<li>If the user doesn't have manage-users, just edit or delete, then there is a check to ensure that the User being edited only has rules equal to or less than the editor.</li>\n</ol>\n<p>Patched versions include releases <code>v2.8.14</code>, <code>v2.9.8</code>, <code>v2.10.4</code> and <code>v2.11.0</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users are recommended to upgrade, as soon as possible, to a version of Rancher Manager that contains the fix.\nIf users can't upgrade, the following are recommended:</p>\n<ol>\n<li>Limit access to Rancher Restricted Admin only to trusted users.</li>\n<li>Downgrade Restricted Administrators to custom roles with limited permissions.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g\">https://github.com/rancher/rancher/security/advisories/GHSA-8p83-cpfg-fj3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8p83-cpfg-fj3g\">https://github.com/advisories/GHSA-8p83-cpfg-fj3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8p83-cpfg-fj3g",
            "title": "[github.com/rancher/rancher] Rancher: Restricted Administrator can change Administrator's passwords",
            "date_modified": "2025-04-01T14:19:31.000Z",
            "date_published": "2025-04-01T14:19:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8p83-cpfg-fj3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Cross-Site Scripting (XSS) vulnerability exists in Beego's <code>RenderForm()</code> function due to improper HTML escaping of user-controlled data. This vulnerability allows attackers to inject malicious JavaScript code that executes in victims' browsers, potentially leading to session hijacking, credential theft, or account takeover. The vulnerability affects any application using Beego's <code>RenderForm()</code> function with user-provided data. Since it is a high-level function generating an entire form markup, many developers would assume it automatically escapes attributes (the way most frameworks do).</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is located in the <code>renderFormField()</code> function in Beego's <code>templatefunc.go</code> file (around lines 316-356). This function directly injects user-provided values into HTML without proper escaping:</p>\n<pre><code class=\"language-go\">return fmt.Sprintf(`%v&lt;input%v%v name=\"%v\" type=\"%v\" value=\"%v\"%v&gt;`, \n    label, id, class, name, fType, value, requiredString)\n</code></pre>\n<p>None of the values (label, id, class, name, value) are properly HTML-escaped before being inserted into the HTML template. This allows attackers to break out of the attribute context or inject HTML tags directly.\nThe vulnerability can be exploited in two main ways:</p>\n<ul>\n<li>Attribute Injection: By injecting code into fields like DisplayName, an attacker can break out of the attribute context and execute JavaScript.</li>\n<li>Content Injection: By injecting HTML tags into textarea content, an attacker can execute JavaScript.</li>\n</ul>\n<p>The <code>RenderForm()</code> function returns <code>template.HTML</code>, which bypasses Go's automatic HTML escaping, making this vulnerability particularly dangerous.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Retrieve the following (secret) gist: <a href=\"https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b\">https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b</a></p>\n<p>To run it:</p>\n<pre><code class=\"language-go\">go mod init beego-xss-poc\ngo mod tidy\ngo run poc.go\n</code></pre>\n<p>Open your browser and navigate to <a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<p>The application demonstrates the vulnerability through several examples:</p>\n<ul>\n<li><code>/profile</code> - Shows a profile with malicious data in the Display Name and Bio fields</li>\n<li><code>/admin</code> - Shows multiple user profiles, including one with malicious data</li>\n<li><code>/submit</code> - Allows you to create your own profile with malicious data</li>\n</ul>\n<p>In addition, you may use this Go test in <code>templatefunc_test.go</code>. The test passes, validating the vulnerability.</p>\n<pre><code class=\"language-go\">func TestRenderFormXSSVulnerability(t *testing.T) {\n    type UserProfile struct {\n        DisplayName string `form:\"displayName,text,Name:\"`\n        Bio         string `form:\",textarea\"`\n    }\n\n    // Test case 1: Attribute injection in input field\n    maliciousUser := UserProfile{\n        DisplayName: `\" onmouseover=\"alert('XSS')\" data-malicious=\"`,\n        Bio:         \"Normal bio text\",\n    }\n\n    output := RenderForm(&amp;maliciousUser)\n\n    // The vulnerable output would contain the unescaped JavaScript\n    if !strings.Contains(string(output), `onmouseover=\"alert('XSS')\"`) {\n        t.Errorf(\"Expected XSS vulnerability in attribute, but got safe output: %v\", output)\n    }\n\n    // Test case 2: Script injection in textarea\n    maliciousUser2 := UserProfile{\n        DisplayName: \"Normal Name\",\n        Bio:         `&lt;/textarea&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;&lt;textarea&gt;`,\n    }\n\n    output = RenderForm(&amp;maliciousUser2)\n\n    // The vulnerable output would contain the unescaped script tag\n    if !strings.Contains(string(output), `&lt;/textarea&gt;&lt;script&gt;alert('XSS')`) {\n        t.Errorf(\"Expected XSS vulnerability in textarea content, but got safe output: %v\", output)\n    }\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a high-severity vulnerability with the following impacts:</p>\n<ul>\n<li>Cross-Site Scripting (XSS): Allows execution of arbitrary JavaScript in the context of the victim's browser.</li>\n<li>Session Hijacking: Attackers can steal session cookies and impersonate victims.</li>\n<li>Credential Theft: Attackers can create fake login forms to steal credentials.</li>\n<li>Account Takeover: Attackers can perform actions on behalf of the victim.</li>\n<li>Data Exfiltration: Sensitive data visible in the browser can be stolen.</li>\n</ul>\n<p>This is particularly concerning in admin panels or user management interfaces where one user's data is displayed to another user (typically an administrator).</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability can be fixed by properly escaping all user-provided values before inserting them into HTML, for example:</p>\n<pre><code class=\"language-go\">// Convert value to string and escape it\nvalueStr := \"\"\nif value != nil {\n    valueStr = template.HTMLEscapeString(fmt.Sprintf(\"%v\", value))\n}\n\n// Escape the name and label\nescapedName := template.HTMLEscapeString(name)\nescapedLabel := template.HTMLEscapeString(label)\nescapedType := template.HTMLEscapeString(fType)\n\nreturn fmt.Sprintf(`%v&lt;input%v%v name=\"%v\" type=\"%v\" value=\"%v\"%v&gt;`, \n    escapedLabel, id, class, escapedName, escapedType, valueStr, requiredString)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg\">https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg</a></li>\n<li><a href=\"https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25\">https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30223\">https://nvd.nist.gov/vuln/detail/CVE-2025-30223</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2j42-h78h-q4fg\">https://github.com/advisories/GHSA-2j42-h78h-q4fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2j42-h78h-q4fg",
            "title": "[github.com/beego/beego] Beego allows Reflected/Stored XSS in Beego's RenderForm() Function Due to Unescaped User Input",
            "date_modified": "2025-03-31T23:32:17.000Z",
            "date_published": "2025-03-31T16:55:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2j42-h78h-q4fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A Cross-Site Scripting (XSS) vulnerability exists in Beego's <code>RenderForm()</code> function due to improper HTML escaping of user-controlled data. This vulnerability allows attackers to inject malicious JavaScript code that executes in victims' browsers, potentially leading to session hijacking, credential theft, or account takeover. The vulnerability affects any application using Beego's <code>RenderForm()</code> function with user-provided data. Since it is a high-level function generating an entire form markup, many developers would assume it automatically escapes attributes (the way most frameworks do).</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is located in the <code>renderFormField()</code> function in Beego's <code>templatefunc.go</code> file (around lines 316-356). This function directly injects user-provided values into HTML without proper escaping:</p>\n<pre><code class=\"language-go\">return fmt.Sprintf(`%v&lt;input%v%v name=\"%v\" type=\"%v\" value=\"%v\"%v&gt;`, \n    label, id, class, name, fType, value, requiredString)\n</code></pre>\n<p>None of the values (label, id, class, name, value) are properly HTML-escaped before being inserted into the HTML template. This allows attackers to break out of the attribute context or inject HTML tags directly.\nThe vulnerability can be exploited in two main ways:</p>\n<ul>\n<li>Attribute Injection: By injecting code into fields like DisplayName, an attacker can break out of the attribute context and execute JavaScript.</li>\n<li>Content Injection: By injecting HTML tags into textarea content, an attacker can execute JavaScript.</li>\n</ul>\n<p>The <code>RenderForm()</code> function returns <code>template.HTML</code>, which bypasses Go's automatic HTML escaping, making this vulnerability particularly dangerous.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Retrieve the following (secret) gist: <a href=\"https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b\">https://gist.github.com/thevilledev/8fd0cab3f098320aa9daab04be59fd2b</a></p>\n<p>To run it:</p>\n<pre><code class=\"language-go\">go mod init beego-xss-poc\ngo mod tidy\ngo run poc.go\n</code></pre>\n<p>Open your browser and navigate to <a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<p>The application demonstrates the vulnerability through several examples:</p>\n<ul>\n<li><code>/profile</code> - Shows a profile with malicious data in the Display Name and Bio fields</li>\n<li><code>/admin</code> - Shows multiple user profiles, including one with malicious data</li>\n<li><code>/submit</code> - Allows you to create your own profile with malicious data</li>\n</ul>\n<p>In addition, you may use this Go test in <code>templatefunc_test.go</code>. The test passes, validating the vulnerability.</p>\n<pre><code class=\"language-go\">func TestRenderFormXSSVulnerability(t *testing.T) {\n    type UserProfile struct {\n        DisplayName string `form:\"displayName,text,Name:\"`\n        Bio         string `form:\",textarea\"`\n    }\n\n    // Test case 1: Attribute injection in input field\n    maliciousUser := UserProfile{\n        DisplayName: `\" onmouseover=\"alert('XSS')\" data-malicious=\"`,\n        Bio:         \"Normal bio text\",\n    }\n\n    output := RenderForm(&amp;maliciousUser)\n\n    // The vulnerable output would contain the unescaped JavaScript\n    if !strings.Contains(string(output), `onmouseover=\"alert('XSS')\"`) {\n        t.Errorf(\"Expected XSS vulnerability in attribute, but got safe output: %v\", output)\n    }\n\n    // Test case 2: Script injection in textarea\n    maliciousUser2 := UserProfile{\n        DisplayName: \"Normal Name\",\n        Bio:         `&lt;/textarea&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;&lt;textarea&gt;`,\n    }\n\n    output = RenderForm(&amp;maliciousUser2)\n\n    // The vulnerable output would contain the unescaped script tag\n    if !strings.Contains(string(output), `&lt;/textarea&gt;&lt;script&gt;alert('XSS')`) {\n        t.Errorf(\"Expected XSS vulnerability in textarea content, but got safe output: %v\", output)\n    }\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a high-severity vulnerability with the following impacts:</p>\n<ul>\n<li>Cross-Site Scripting (XSS): Allows execution of arbitrary JavaScript in the context of the victim's browser.</li>\n<li>Session Hijacking: Attackers can steal session cookies and impersonate victims.</li>\n<li>Credential Theft: Attackers can create fake login forms to steal credentials.</li>\n<li>Account Takeover: Attackers can perform actions on behalf of the victim.</li>\n<li>Data Exfiltration: Sensitive data visible in the browser can be stolen.</li>\n</ul>\n<p>This is particularly concerning in admin panels or user management interfaces where one user's data is displayed to another user (typically an administrator).</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability can be fixed by properly escaping all user-provided values before inserting them into HTML, for example:</p>\n<pre><code class=\"language-go\">// Convert value to string and escape it\nvalueStr := \"\"\nif value != nil {\n    valueStr = template.HTMLEscapeString(fmt.Sprintf(\"%v\", value))\n}\n\n// Escape the name and label\nescapedName := template.HTMLEscapeString(name)\nescapedLabel := template.HTMLEscapeString(label)\nescapedType := template.HTMLEscapeString(fType)\n\nreturn fmt.Sprintf(`%v&lt;input%v%v name=\"%v\" type=\"%v\" value=\"%v\"%v&gt;`, \n    escapedLabel, id, class, escapedName, escapedType, valueStr, requiredString)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg\">https://github.com/beego/beego/security/advisories/GHSA-2j42-h78h-q4fg</a></li>\n<li><a href=\"https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25\">https://github.com/beego/beego/commit/939bb18c66406466715ddadd25dd9ffa6f169e25</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-30223\">https://nvd.nist.gov/vuln/detail/CVE-2025-30223</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2j42-h78h-q4fg\">https://github.com/advisories/GHSA-2j42-h78h-q4fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2j42-h78h-q4fg",
            "title": "[github.com/beego/beego/v2] Beego allows Reflected/Stored XSS in Beego's RenderForm() Function Due to Unescaped User Input",
            "date_modified": "2025-03-31T23:32:17.000Z",
            "date_published": "2025-03-31T16:55:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2j42-h78h-q4fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The library used to extract archives (github.com/jaredallard/archives) was vulnerable to the \"zip slip\" vulnerability. This is used to extract native extension archives and repository source archives. A native extension or repository archive could be crafted in such a way where a remote code execution or modification/reading of a file is possible using the user who is running stencil.</p>\n<p>The severity is marked as \"medium\" because native extensions have always considered to be \"unsafe\" to run when not trusted. Native extensions are arbitrary code being ran, which could always do this same exploit with less steps. The medium severity is to reflect that this could be done even when a user is <em>not</em> using a native extension, for example a repository source archive. However, one would need to mutate the archives provided by Github or perform some hackery with links, which may not be possible. Thus, \"medium\" is used out of an abundance of caution where I would've labeled this as \"low\".</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in 2.3.0 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds are present.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h\">https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h\">https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h</a></li>\n<li><a href=\"https://github.com/rgst-io/stencil/security/advisories/GHSA-p799-q2pr-6mxj\">https://github.com/rgst-io/stencil/security/advisories/GHSA-p799-q2pr-6mxj</a></li>\n<li><a href=\"https://github.com/rgst-io/stencil/pull/255\">https://github.com/rgst-io/stencil/pull/255</a></li>\n<li><a href=\"https://github.com/rgst-io/stencil/commit/5482fcada0c6f77d903d13129bd656b7df80ac3a\">https://github.com/rgst-io/stencil/commit/5482fcada0c6f77d903d13129bd656b7df80ac3a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p799-q2pr-6mxj\">https://github.com/advisories/GHSA-p799-q2pr-6mxj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p799-q2pr-6mxj",
            "title": "[go.rgst.io/stencil/v2] go.rgst.io/stencil/v2 vulnerable to Path Traversal",
            "date_modified": "2025-03-29T00:08:46.000Z",
            "date_published": "2025-03-29T00:08:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p799-q2pr-6mxj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in ollama/ollama versions &lt;=0.3.14 allows a malicious user to create a customized GGUF model file that, when uploaded and created on the Ollama server, can cause a crash due to an unchecked null pointer dereference. This can lead to a Denial of Service (DoS) attack via remote network.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0312\">https://nvd.nist.gov/vuln/detail/CVE-2025-0312</a></li>\n<li><a href=\"https://huntr.com/bounties/522c87b6-a7ac-41b2-84f3-62fd58921f21\">https://huntr.com/bounties/522c87b6-a7ac-41b2-84f3-62fd58921f21</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2wh-w96x-w232\">https://github.com/advisories/GHSA-p2wh-w96x-w232</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2wh-w96x-w232",
            "title": "[github.com/ollama/ollama] Ollama Denial of Service (DoS) via Null Pointer Dereference",
            "date_modified": "2025-03-28T22:13:54.000Z",
            "date_published": "2025-03-20T12:32:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2wh-w96x-w232"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in Nethermind Juno before v0.12.5 within the Sierra bytecode decompression logic within the \"cairo-lang-starknet-classes\" library could allow remote attackers to trigger an infinite loop (and high CPU usage) by submitting a malicious Declare v2/v3 transaction. This results in a denial-of-service condition for affected Starknet full-node implementations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-29072\">https://nvd.nist.gov/vuln/detail/CVE-2025-29072</a></li>\n<li><a href=\"https://github.com/NethermindEth/juno/commit/51074875941aa111c5dd2b41f2ec890a4a15b587\">https://github.com/NethermindEth/juno/commit/51074875941aa111c5dd2b41f2ec890a4a15b587</a></li>\n<li><a href=\"https://community.starknet.io/t/starknet-security-update-potential-full-node-vulnerability-recap/115314\">https://community.starknet.io/t/starknet-security-update-potential-full-node-vulnerability-recap/115314</a></li>\n<li><a href=\"https://github.com/NethermindEth/juno/commit/b9fe28df6a4339a66f91bff723c61dc063f9ed50\">https://github.com/NethermindEth/juno/commit/b9fe28df6a4339a66f91bff723c61dc063f9ed50</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq32-8rp4-w2mc\">https://github.com/advisories/GHSA-wq32-8rp4-w2mc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq32-8rp4-w2mc",
            "title": "[github.com/NethermindEth/juno] Nethermind Juno Potential Denial of Service (DoS) via Integer Overflow",
            "date_modified": "2025-03-28T22:05:00.000Z",
            "date_published": "2025-03-27T18:31:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq32-8rp4-w2mc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious user could feed a specially crafted archive to this library causing RCE, modification of files or other bad things in the context of whatever user is running this library as, through the program that imports it.</p>\n<p>The severity highly depends on the user's permissions and environment it is being ran in (e.g., non root, read only root container would likely have no impact vs running something as root on a production system).</p>\n<p>The severity is also dependent on <strong>arbitrary archives</strong> being passed or not.</p>\n<p>Based on the above, severity high was picked to be safe.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched with the help of snyk and gosec in v1.0.1</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only workaround is to manually validate archives before submitting them to this library, however that is not recommended vs upgrading to unaffected versions.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://security.snyk.io/research/zip-slip-vulnerability\">https://security.snyk.io/research/zip-slip-vulnerability</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h\">https://github.com/jaredallard/archives/security/advisories/GHSA-j95m-rcjp-q69h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j95m-rcjp-q69h\">https://github.com/advisories/GHSA-j95m-rcjp-q69h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j95m-rcjp-q69h",
            "title": "[github.com/jaredallard/archives] github.com/jaredallard/archives Has Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
            "date_modified": "2025-03-31T13:55:02.000Z",
            "date_published": "2025-03-28T14:45:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j95m-rcjp-q69h"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}