{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>Name: ASA-2025-002: Malicious peer can stall network by disseminating seemingly valid block parts\nComponent: CometBFT\nCriticality: High (Catastrophic Impact; Possible Likelihood per <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>)\nAffected versions: &lt;= v0.38.16, v1.0.0\nAffected users: Validators, Full nodes, Users</p>\n<h3 id=\"description\">Description</h3>\n<p>A bug was identified in the CometBFT validation of block part indices and the corresponding proof part indices that can lead to incorrect processing and dissemination of invalid parts, which in turn could lead to a network halt. Additional validation was added to prevent this condition from happening.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The new CometBFT releases <a href=\"https://github.com/cometbft/cometbft/releases/tag/v1.0.1\">v1.0.1</a> and <a href=\"https://github.com/cometbft/cometbft/releases/tag/v0.38.17\">v0.38.17</a> fix this issue.</p>\n<p>Unreleased code in the main branch is patched as well.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. If a node is producing these malicious proofs, the only mitigation is to upgrade CometBFT. After upgrading, the validators then will eventually conclude the correct value.</p>\n<h3 id=\"technical-deep-dive\">Technical Deep-Dive</h3>\n<p>When the next proposer creates a block, it is split into many block parts (64kB each). Each block part is then disseminated via p2p layer in a gossip fashion. The block part contains the following fields:</p>\n<pre><code class=\"language-go\">type Part struct {\n    Index uint32            `json:\"index\"`\n    Bytes cmtbytes.HexBytes `json:\"bytes\"`\n    Proof merkle.Proof      `json:\"proof\"`\n}\n</code></pre>\n<ul>\n<li><code>Index</code> - represents the index of a block part</li>\n<li><code>Bytes</code> - the actual content</li>\n<li><code>Proof</code> - Merkle proof, which allows the receiving node to quickly verify that a <code>Part</code> is indeed a piece of the proposed block.</li>\n</ul>\n<p>The <code>Proof</code> contains the following fields:</p>\n<pre><code class=\"language-go\">type Proof struct {\n    Total    int64    `json:\"total\"`           // Total number of items.\n    Index    int64    `json:\"index\"`           // Index of item to prove.\n    LeafHash []byte   `json:\"leaf_hash\"`       // Hash of item value.\n    Aunts    [][]byte `json:\"aunts,omitempty\"` // Hashes from leaf's sibling to a root's child.\n}\n</code></pre>\n<p>Note that the total number of leaves in the Merkle tree equals the number of parts in the proposed block. Previously, CometBFT did not validate the <code>Index</code> field and specifically that <code>Part.Index</code> must be equal to <code>Part.Proof.Index</code>. This leads to a condition where, it is possible to use the proof from a different part and CometBFT accept it, even though the proof proves the different part is a piece of the proposed block and not the part that the peer actually sent to us.</p>\n<p>This condition is problematic because: </p>\n<ol>\n<li>it would disseminate the invalid block part to its neighboring nodes (because it deemed it as correct)</li>\n<li>it would mark the block part as received and ask the neighboring nodes not to relay it in the future, making it impossible to receive the correct block part.</li>\n</ol>\n<p>To address this, CometBFT was patched to verify that <code>Part.Index</code> is equal to <code>Part.Proof.Index</code>, preventing the above condition.</p>\n<h3 id=\"timeline\">Timeline</h3>\n<ul>\n<li>January 15, 2025, 12:12pm PST: Issue reported to the Cosmos Bug Bounty program</li>\n<li>January 15, 2025, 12:31pm PST: Issue triaged by Amulet on-call, and distributed to Core team</li>\n<li>January 27, 2025, 11:28pm PST: Core team completes validation of issue</li>\n<li>January 31, 2024, 2:15pm PST: Pre-notification delivered</li>\n<li>February 3rd, 2024, 9:00am UTC+4: Patch made available</li>\n</ul>\n<p>This issue was reported by <a href=\"https://github.com/unknownfeature\">unknown_feature</a> to the Cosmos Bug Bounty Program on HackerOne on January 15, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href=\"mailto:security@interchain.io\">security@interchain.io</a>. For more information about the Interchain Foundationâ€™s engagement with Amulet, and to sign up for security notification emails, please see <a href=\"https://github.com/interchainio/security\">https://github.com/interchainio/security</a>.  </p>\n<p>A Github Security Advisory for this issue is available in the CometBFT <a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-r3r4-g7hq-pq4f\">repository</a>. For more information about CometBFT, see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-r3r4-g7hq-pq4f\">https://github.com/cometbft/cometbft/security/advisories/GHSA-r3r4-g7hq-pq4f</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/f943aabc7b9201ea1089ff3381479929435ce424\">https://github.com/cometbft/cometbft/commit/f943aabc7b9201ea1089ff3381479929435ce424</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/415c0da223bb7694608913f725fa45bd7a7a46bf\">https://github.com/cometbft/cometbft/commit/415c0da223bb7694608913f725fa45bd7a7a46bf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r3r4-g7hq-pq4f\">https://github.com/advisories/GHSA-r3r4-g7hq-pq4f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r3r4-g7hq-pq4f",
            "title": "[github.com/cometbft/cometbft] CometBFT allows a malicious peer to stall the network by disseminating seemingly valid block parts",
            "date_modified": "2025-02-03T17:49:00.000Z",
            "date_published": "2025-02-03T16:48:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r3r4-g7hq-pq4f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Name: ASA-2025-002: Malicious peer can stall network by disseminating seemingly valid block parts\nComponent: CometBFT\nCriticality: High (Catastrophic Impact; Possible Likelihood per <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>)\nAffected versions: &lt;= v0.38.16, v1.0.0\nAffected users: Validators, Full nodes, Users</p>\n<h3 id=\"description\">Description</h3>\n<p>A bug was identified in the CometBFT validation of block part indices and the corresponding proof part indices that can lead to incorrect processing and dissemination of invalid parts, which in turn could lead to a network halt. Additional validation was added to prevent this condition from happening.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The new CometBFT releases <a href=\"https://github.com/cometbft/cometbft/releases/tag/v1.0.1\">v1.0.1</a> and <a href=\"https://github.com/cometbft/cometbft/releases/tag/v0.38.17\">v0.38.17</a> fix this issue.</p>\n<p>Unreleased code in the main branch is patched as well.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds for this issue. If a node is producing these malicious proofs, the only mitigation is to upgrade CometBFT. After upgrading, the validators then will eventually conclude the correct value.</p>\n<h3 id=\"technical-deep-dive\">Technical Deep-Dive</h3>\n<p>When the next proposer creates a block, it is split into many block parts (64kB each). Each block part is then disseminated via p2p layer in a gossip fashion. The block part contains the following fields:</p>\n<pre><code class=\"language-go\">type Part struct {\n    Index uint32            `json:\"index\"`\n    Bytes cmtbytes.HexBytes `json:\"bytes\"`\n    Proof merkle.Proof      `json:\"proof\"`\n}\n</code></pre>\n<ul>\n<li><code>Index</code> - represents the index of a block part</li>\n<li><code>Bytes</code> - the actual content</li>\n<li><code>Proof</code> - Merkle proof, which allows the receiving node to quickly verify that a <code>Part</code> is indeed a piece of the proposed block.</li>\n</ul>\n<p>The <code>Proof</code> contains the following fields:</p>\n<pre><code class=\"language-go\">type Proof struct {\n    Total    int64    `json:\"total\"`           // Total number of items.\n    Index    int64    `json:\"index\"`           // Index of item to prove.\n    LeafHash []byte   `json:\"leaf_hash\"`       // Hash of item value.\n    Aunts    [][]byte `json:\"aunts,omitempty\"` // Hashes from leaf's sibling to a root's child.\n}\n</code></pre>\n<p>Note that the total number of leaves in the Merkle tree equals the number of parts in the proposed block. Previously, CometBFT did not validate the <code>Index</code> field and specifically that <code>Part.Index</code> must be equal to <code>Part.Proof.Index</code>. This leads to a condition where, it is possible to use the proof from a different part and CometBFT accept it, even though the proof proves the different part is a piece of the proposed block and not the part that the peer actually sent to us.</p>\n<p>This condition is problematic because: </p>\n<ol>\n<li>it would disseminate the invalid block part to its neighboring nodes (because it deemed it as correct)</li>\n<li>it would mark the block part as received and ask the neighboring nodes not to relay it in the future, making it impossible to receive the correct block part.</li>\n</ol>\n<p>To address this, CometBFT was patched to verify that <code>Part.Index</code> is equal to <code>Part.Proof.Index</code>, preventing the above condition.</p>\n<h3 id=\"timeline\">Timeline</h3>\n<ul>\n<li>January 15, 2025, 12:12pm PST: Issue reported to the Cosmos Bug Bounty program</li>\n<li>January 15, 2025, 12:31pm PST: Issue triaged by Amulet on-call, and distributed to Core team</li>\n<li>January 27, 2025, 11:28pm PST: Core team completes validation of issue</li>\n<li>January 31, 2024, 2:15pm PST: Pre-notification delivered</li>\n<li>February 3rd, 2024, 9:00am UTC+4: Patch made available</li>\n</ul>\n<p>This issue was reported by <a href=\"https://github.com/unknownfeature\">unknown_feature</a> to the Cosmos Bug Bounty Program on HackerOne on January 15, 2025. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href=\"mailto:security@interchain.io\">security@interchain.io</a>. For more information about the Interchain Foundationâ€™s engagement with Amulet, and to sign up for security notification emails, please see <a href=\"https://github.com/interchainio/security\">https://github.com/interchainio/security</a>.  </p>\n<p>A Github Security Advisory for this issue is available in the CometBFT <a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-r3r4-g7hq-pq4f\">repository</a>. For more information about CometBFT, see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-r3r4-g7hq-pq4f\">https://github.com/cometbft/cometbft/security/advisories/GHSA-r3r4-g7hq-pq4f</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/f943aabc7b9201ea1089ff3381479929435ce424\">https://github.com/cometbft/cometbft/commit/f943aabc7b9201ea1089ff3381479929435ce424</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/415c0da223bb7694608913f725fa45bd7a7a46bf\">https://github.com/cometbft/cometbft/commit/415c0da223bb7694608913f725fa45bd7a7a46bf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r3r4-g7hq-pq4f\">https://github.com/advisories/GHSA-r3r4-g7hq-pq4f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r3r4-g7hq-pq4f",
            "title": "[github.com/cometbft/cometbft] CometBFT allows a malicious peer to stall the network by disseminating seemingly valid block parts",
            "date_modified": "2025-02-03T17:49:00.000Z",
            "date_published": "2025-02-03T16:48:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r3r4-g7hq-pq4f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Name: ASA-2025-001: Malicious peer can disrupt node's ability to sync via blocksync\nComponent: CometBFT\nCriticality: Medium (Considerable Impact; Possible Likelihood per <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>)\nAffected versions: &lt;= v0.38.16, v1.0.0\nAffected users: Validators, Full nodes</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A malicious peer may be able to interfere with a node's ability to sync blocks with peers via the blocksync mechanism. </p>\n<p>In the <code>blocksync</code> protocol peers send their <code>base</code> and <code>latest</code> heights when they connect to a new node (<code>A</code>), which is syncing to the tip of a network. <code>base</code> acts as a lower ground and informs <code>A</code> that the peer only has blocks starting from height <code>base</code>. <code>latest</code> height informs <code>A</code> about the latest block in a network. Normally, nodes would only report increasing heights:</p>\n<pre><code>B: {base: 100, latest: 1000}\nB: {base: 100, latest: 1001}\nB: {base: 100, latest: 1002}\n...\n</code></pre>\n<p>If <code>B</code> fails to provide the latest block, <code>B</code> is removed and the <code>latest</code> height (target height) is recalculated based on other nodes <code>latest</code> heights.</p>\n<p>The existing code hovewer doesn't check for the case where <code>B</code> first reports <code>latest</code> height <code>X</code> and immediately after height <code>Y</code>, where <code>X &gt; Y</code>. For example:</p>\n<pre><code>B: {base: 100, latest: 2000}\nB: {base: 100, latest: 1001}\nB: {base: 100, latest: 1002}\n...\n</code></pre>\n<p><code>A</code> will be trying to catch up to 2000 indefinitely. Even if <code>B</code> disconnects, the <code>latest</code> height (target height) won't be recalculated because <code>A</code> \"doesn't know where 2000\" came from per see.</p>\n<h4 id=\"impact-qualification\">Impact Qualification</h4>\n<p>This condition requires the introduction of malicious code in the full node first reporting a non-existing <code>latest</code> height, then reporting lower <code>latest</code> height and nodes which are syncing using <code>blocksync</code> protocol.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The new CometBFT releases <a href=\"https://github.com/cometbft/cometbft/releases/tag/v1.0.1\">v1.0.1</a> and <a href=\"https://github.com/cometbft/cometbft/releases/tag/v0.38.17\">v0.38.17</a> fix this issue.</p>\n<p>Unreleased code in the main is patched as well.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When the operator notices <code>blocksync</code> is stuck, they can identify the peer from which that message with \"invalid\" height was received. This may require increasing the logging level of the <code>blocksync</code> module. This peer can then be subsequently banned at the p2p layer as a temporary mitigation.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href=\"mailto:security@interchain.io\">security@interchain.io</a>.  For more information about the Interchain Foundationâ€™s engagement with Amulet, and to sign up for security notification emails, please see <a href=\"https://github.com/interchainio/security\">https://github.com/interchainio/security</a>.  </p>\n<p>A Github Security Advisory for this issue is available in the CometBFT <a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-22qq-3xwm-r5x4\">repository</a>. For more information about CometBFT, see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-22qq-3xwm-r5x4\">https://github.com/cometbft/cometbft/security/advisories/GHSA-22qq-3xwm-r5x4</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/0ee80cd609c7ae9fe856bdd1c6d38553fdae90ce\">https://github.com/cometbft/cometbft/commit/0ee80cd609c7ae9fe856bdd1c6d38553fdae90ce</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/2cebfde06ae5073c0b296a9d2ca6ab4b95397ea5\">https://github.com/cometbft/cometbft/commit/2cebfde06ae5073c0b296a9d2ca6ab4b95397ea5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22qq-3xwm-r5x4\">https://github.com/advisories/GHSA-22qq-3xwm-r5x4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22qq-3xwm-r5x4",
            "title": "[github.com/cometbft/cometbft] CometBFT allows a malicious peer to make node stuck in blocksync",
            "date_modified": "2025-02-03T15:55:31.000Z",
            "date_published": "2025-02-03T15:55:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22qq-3xwm-r5x4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Name: ASA-2025-001: Malicious peer can disrupt node's ability to sync via blocksync\nComponent: CometBFT\nCriticality: Medium (Considerable Impact; Possible Likelihood per <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>)\nAffected versions: &lt;= v0.38.16, v1.0.0\nAffected users: Validators, Full nodes</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A malicious peer may be able to interfere with a node's ability to sync blocks with peers via the blocksync mechanism. </p>\n<p>In the <code>blocksync</code> protocol peers send their <code>base</code> and <code>latest</code> heights when they connect to a new node (<code>A</code>), which is syncing to the tip of a network. <code>base</code> acts as a lower ground and informs <code>A</code> that the peer only has blocks starting from height <code>base</code>. <code>latest</code> height informs <code>A</code> about the latest block in a network. Normally, nodes would only report increasing heights:</p>\n<pre><code>B: {base: 100, latest: 1000}\nB: {base: 100, latest: 1001}\nB: {base: 100, latest: 1002}\n...\n</code></pre>\n<p>If <code>B</code> fails to provide the latest block, <code>B</code> is removed and the <code>latest</code> height (target height) is recalculated based on other nodes <code>latest</code> heights.</p>\n<p>The existing code hovewer doesn't check for the case where <code>B</code> first reports <code>latest</code> height <code>X</code> and immediately after height <code>Y</code>, where <code>X &gt; Y</code>. For example:</p>\n<pre><code>B: {base: 100, latest: 2000}\nB: {base: 100, latest: 1001}\nB: {base: 100, latest: 1002}\n...\n</code></pre>\n<p><code>A</code> will be trying to catch up to 2000 indefinitely. Even if <code>B</code> disconnects, the <code>latest</code> height (target height) won't be recalculated because <code>A</code> \"doesn't know where 2000\" came from per see.</p>\n<h4 id=\"impact-qualification\">Impact Qualification</h4>\n<p>This condition requires the introduction of malicious code in the full node first reporting a non-existing <code>latest</code> height, then reporting lower <code>latest</code> height and nodes which are syncing using <code>blocksync</code> protocol.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The new CometBFT releases <a href=\"https://github.com/cometbft/cometbft/releases/tag/v1.0.1\">v1.0.1</a> and <a href=\"https://github.com/cometbft/cometbft/releases/tag/v0.38.17\">v0.38.17</a> fix this issue.</p>\n<p>Unreleased code in the main is patched as well.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When the operator notices <code>blocksync</code> is stuck, they can identify the peer from which that message with \"invalid\" height was received. This may require increasing the logging level of the <code>blocksync</code> module. This peer can then be subsequently banned at the p2p layer as a temporary mitigation.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href=\"mailto:security@interchain.io\">security@interchain.io</a>.  For more information about the Interchain Foundationâ€™s engagement with Amulet, and to sign up for security notification emails, please see <a href=\"https://github.com/interchainio/security\">https://github.com/interchainio/security</a>.  </p>\n<p>A Github Security Advisory for this issue is available in the CometBFT <a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-22qq-3xwm-r5x4\">repository</a>. For more information about CometBFT, see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-22qq-3xwm-r5x4\">https://github.com/cometbft/cometbft/security/advisories/GHSA-22qq-3xwm-r5x4</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/0ee80cd609c7ae9fe856bdd1c6d38553fdae90ce\">https://github.com/cometbft/cometbft/commit/0ee80cd609c7ae9fe856bdd1c6d38553fdae90ce</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/2cebfde06ae5073c0b296a9d2ca6ab4b95397ea5\">https://github.com/cometbft/cometbft/commit/2cebfde06ae5073c0b296a9d2ca6ab4b95397ea5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22qq-3xwm-r5x4\">https://github.com/advisories/GHSA-22qq-3xwm-r5x4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22qq-3xwm-r5x4",
            "title": "[github.com/cometbft/cometbft] CometBFT allows a malicious peer to make node stuck in blocksync",
            "date_modified": "2025-02-03T15:55:31.000Z",
            "date_published": "2025-02-03T15:55:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22qq-3xwm-r5x4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-01-31T21:07:01.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-01-31T21:07:01.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-01-31T21:07:01.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-01-31T21:07:01.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-01-31T21:07:01.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana is an open-source platform for monitoring and observability. \nThe Grafana Alerting VictorOps integration was not properly protected and could be exposed to users with Viewer permission. \nFixed in versions 11.5.0, 11.4.1, 11.3.3,&nbsp;11.2.6, 11.1.11, 11.0.11 and 10.4.15</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-11741\">https://nvd.nist.gov/vuln/detail/CVE-2024-11741</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-11741\">https://grafana.com/security/security-advisories/cve-2024-11741</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxcc-2f3q-4h58\">https://github.com/advisories/GHSA-wxcc-2f3q-4h58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58",
            "title": "[github.com/grafana/grafana] Grafana Alerting VictorOps integration could be exposed to users with Viewer permission",
            "date_modified": "2025-01-31T21:07:01.000Z",
            "date_published": "2025-01-31T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxcc-2f3q-4h58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a user has restricted access to a project that is configured with <code>restricted=true</code>, they can gain root access on the system by creating a disk device with <code>shift=true</code> and creating a setuid root executable. This is possible because the <code>shift</code> property is not restricted unless <code>restricted.devices.disk.paths</code> is set.</p>\n<h3 id=\"details\">Details</h3>\n<p>The following patch shows the offending code with a possible fix:</p>\n<pre><code class=\"language-patch\">--- a/lxd/device/disk.go\n+++ b/lxd/device/disk.go\n@@ -429,17 +429,19 @@ func (d *disk) validateEnvironmentSourcePath() error {\n        if instProject.Name != api.ProjectDefaultName {\n                // If restricted disk paths are in force, then check the disk's source is allowed, and record the\n                // allowed parent path for later user during device start up sequence.\n-               if shared.IsTrue(instProject.Config[\"restricted\"]) &amp;&amp; instProject.Config[\"restricted.devices.disk.paths\"] != \"\" {\n-                       allowed, restrictedParentSourcePath := project.CheckRestrictedDevicesDiskPaths(instProject.Config, d.config[\"source\"])\n-                       if !allowed {\n-                               return fmt.Errorf(\"Disk source path %q not allowed by project for disk %q\", d.config[\"source\"], d.name)\n+               if shared.IsTrue(instProject.Config[\"restricted\"]) {\n+                       if instProject.Config[\"restricted.devices.disk.paths\"] != \"\" {\n+                               allowed, restrictedParentSourcePath := project.CheckRestrictedDevicesDiskPaths(instProject.Config, d.config[\"source\"])\n+                               if !allowed {\n+                                       return fmt.Errorf(\"Disk source path %q not allowed by project for disk %q\", d.config[\"source\"], d.name)\n+                               }\n+\n+                               d.restrictedParentSourcePath = shared.HostPath(restrictedParentSourcePath)\n                        }\n\n                        if shared.IsTrue(d.config[\"shift\"]) {\n                                return fmt.Errorf(`The \"shift\" property cannot be used with a restricted source path`)\n                        }\n-\n-                       d.restrictedParentSourcePath = shared.HostPath(restrictedParentSourcePath)\n                }\n        }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ lxc project create restricted -c restricted=true -c restricted.devices.disk=allow\n$ lxc project switch restricted\n$ lxc profile device add default root disk path=/ pool=default\n$ lxc init ubuntu:22.04 c1\n$ lxc config device add c1 d1 disk source=/ path=/mnt shift=true\n$ lxc start c1  # no error\n\n$ lxc project set restricted restricted.devices.disk.paths=/  # explicitly allow mounting /\n$ lxc restart c1\nError: Failed to start device \"d1\": The \"shift\" property cannot be used with a restricted source path\n</code></pre>\n<p>Created <a href=\"https://github.com/canonical/lxd/issues/12606\">https://github.com/canonical/lxd/issues/12606</a> to improve the documentation as per <a href=\"https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97#advisory-comment-91918\">https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97#advisory-comment-91918</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97\">https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97</a></li>\n<li><a href=\"https://github.com/canonical/lxd/issues/12606\">https://github.com/canonical/lxd/issues/12606</a></li>\n<li><a href=\"https://github.com/canonical/lxd/commit/ce1bd0dd37bb3810fe6f16c237a4b65257f231f1\">https://github.com/canonical/lxd/commit/ce1bd0dd37bb3810fe6f16c237a4b65257f231f1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x9qq-236j-gj97\">https://github.com/advisories/GHSA-x9qq-236j-gj97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x9qq-236j-gj97",
            "title": "[github.com/canonical/lxd] Canonical LXD documentation improvement to make clear restricted.devices.disk=allow without restricted.devices.disk.paths also allows shift=true",
            "date_modified": "2025-01-30T22:49:13.000Z",
            "date_published": "2023-12-05T23:32:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x9qq-236j-gj97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23216\">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47g2-qmh2-749v\">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T18:55:57.000Z",
            "date_published": "2025-01-30T17:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23216\">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47g2-qmh2-749v\">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T18:55:57.000Z",
            "date_published": "2025-01-30T17:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23216\">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47g2-qmh2-749v\">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T18:55:57.000Z",
            "date_published": "2025-01-30T17:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>By design, AdmissionPolicy and AdmissionPolicyGroup can evaluate only namespaced resources. The resources to be evaluated are determined by the rules provided by the user when defining the policy.\nThere might be Kubernetes namespaced resources that should not be validated by AdmissionPolicy and by the AdmissionPolicyGroup policies because of their sensitive nature.\nFor example, PolicyReport are namespaced resources that contain the list of non compliant objects found inside of a namespace. See <a href=\"https://docs.kubewarden.io/explanations/audit-scanner/policy-reports\">this section</a> of Kubewardenâ€™s documentation for more details about PolicyReport resources.\nAn attacker can use either an AdmissionPolicy or an AdmissionPolicyGroup to prevent the creation and update of PolicyReport objects to hide non-compliant resources.\nMoreover, the same attacker might use a mutating AdmissionPolicy to alter the contents of the PolicyReport created inside of the namespace.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Starting from the 1.21.0 release, the validation rules applied to AdmissionPolicy and AdmissionPolicyGroup have been tightened to prevent them from validating sensitive types of namespaced resources.\nThe new validation will also restrict the usage of wildcards when defining apiGroups and resources rules for AdmissionPolicy and AdmissionPolicyGroup objects.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On clusters running Kubewarden &lt; 1.21.0, the following Kubewarden policy can be applied to prevent the creation of AdmissionPolicy and AdmissionPolicyGroup resources that interact with PolicyReport resources:</p>\n<pre><code class=\"language-yaml\">apiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: \"deny-interaction-with-policyreport\"\nspec:\n  module: registry://ghcr.io/kubewarden/policies/cel-policy:latest\n  settings:\n    variables:\n      - name: hasWildcardInsideOfApiGroup\n        expression: \"object.spec.rules.exists(r, r.apiGroups.exists(ag, ag == '*'))\"\n      - name: hasWildcardInsideOfResources\n        expression: \"object.spec.rules.exists(r, r.resources.exists(ag, ag == '*' || ag == '*/*' || ag == 'policyreports/*'))\"\n      - name: dealsWithPolicyReportApiGroup\n        expression: \"object.spec.rules.exists(r, r.apiGroups.exists(ag, ag == 'wgpolicyk8s.io'))\"\n      - name: dealsWithPolicyReportResource\n        expression: \"object.spec.rules.exists(r, r.resources.exists(ag, ag == 'policyreports' || ag == 'policyreports/'))\"\n      - name: isPendingDeletion\n        expression: \"has(object.metadata.deletionTimestamp)\"\n    validations:\n      - expression: |\n          !( variables.hasWildcardInsideOfApiGroup ||\n             variables.hasWildcardInsideOfResources ||\n             variables.dealsWithPolicyReportResource ||\n             variables.dealsWithPolicyReportApiGroup\n          ) || variables.isPendingDeletion\n        message: \"cannot target PolicyReport resources or use wildcards in apiGroups or resources\"\n  rules:\n    - apiGroups: [\"policies.kubewarden.io\"]\n      apiVersions: [\"v1\"]\n      operations: [\"CREATE\", \"UPDATE\"]\n      resources: [\"admissionpolicies\", \"admissionpolicygroups\"]\n  mutating: false\n  backgroundAudit: true\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory you can contact the Kubewarden team using the procedures described under the â€œ<a href=\"https://docs.kubewarden.io/disclosure\">security disclosure</a>â€œ guidelines of the Kubewarden project.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-fc89-jghx-8pvg\">https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-fc89-jghx-8pvg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24376\">https://nvd.nist.gov/vuln/detail/CVE-2025-24376</a></li>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/commit/8124039b5f0c955d0ee8c8ca12d4415282f02d2c\">https://github.com/kubewarden/kubewarden-controller/commit/8124039b5f0c955d0ee8c8ca12d4415282f02d2c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fc89-jghx-8pvg\">https://github.com/advisories/GHSA-fc89-jghx-8pvg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fc89-jghx-8pvg",
            "title": "[github.com/kubewarden/kubewarden-controller] KubeWarden's AdmissionPolicy and AdmissionPolicyGroup policies can be used to alter PolicyReport resources",
            "date_modified": "2025-01-30T18:56:02.000Z",
            "date_published": "2025-01-30T17:52:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fc89-jghx-8pvg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <a href=\"https://docs.kubewarden.io/explanations/policy-groups\">policy group feature</a>, added to by the 1.17.0 release, introduced two new types of CRD: ClusterAdmissionPolicyGroup and AdmissionPolicyGroup. The former is cluster wide, while the latter is namespaced.</p>\n<p>By being namespaced, the AdmissionPolicyGroup has a well constrained impact on cluster resources. Hence, itâ€™s considered safe to allow non-admin users to create and manage these resources in the namespaces they own.\nKubewarden policies can be allowed to query the Kubernetes API at evaluation time; these types of policies are called â€œ<a href=\"https://docs.kubewarden.io/reference/spec/context-aware-policies\">context aware</a>â€œ.\nContext aware policies can perform list and get operations against a Kubernetes cluster. The queries are done using the ServiceAccount of the Policy Server instance that hosts the policy. That means that access to the cluster is determined by the RBAC rules that apply to that ServiceAccount.\nThe AdmissionPolicyGroup CRD allowed the deployment of context aware policies. This could allow an attacker to obtain information about resources that are out of their reach, by leveraging a higher access to the cluster granted to the ServiceAccount token used to run the policy.</p>\n<p>The impact of this vulnerability depends on the privileges that have been granted to the ServiceAccount used to run the Policy Server and assumes that users are using the recommended best practices of keeping the Policy Server's ServiceAccount least privileged. By default, the Kubewarden helm chart grants access to the following resources (cluster wide) only: Namespace, Pod, Deployment and Ingress.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Starting from the 1.21.0 release, the AdmissionPolicyGroup CRD does not allow the definition of context aware policies. No modifications are needed neither for performing the upgrade nor afterwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On clusters running Kubewarden &lt; 1.21.0, the following Kubewarden policy can be applied to prevent the creation of AdmissionPolicyGroup resources that have access to Kubernetes resources:</p>\n<pre><code class=\"language-yaml\">apiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: \"deny-admission-policy-groups-with-context-resources\"\nspec:\n  module: registry://ghcr.io/kubewarden/policies/cel-policy:latest\n  settings:\n    variables:\n      - name: hasContextAwareResources\n        expression: \"object.spec.policies.exists(p, has(object.spec.policies[p].contextAwareResources))\"\n      - name: isPendingDeletion\n        expression: \"has(object.metadata.deletionTimestamp)\"\n    validations:\n      - expression: \"!variables.hasContextAwareResources || variables.isPendingDeletion\"\n        message: \"AdmissionPolicyGroup has contextAwareResources defined\"\n  rules:\n    - apiGroups: [\"policies.kubewarden.io\"]\n      apiVersions: [\"v1\"]\n      operations: [\"CREATE\", \"UPDATE\"]\n      resources: [\"admissionpolicygroups\"]\n  mutating: false\n  backgroundAudit: true\n</code></pre>\n<p>Once the policy is applied, the <a href=\"https://docs.kubewarden.io/howtos/audit-scanner\">Kubewarden Audit Scanner</a> can be used to identify the AdmissionPolicyGroup policies that are violating this policy.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory you can contact the Kubewarden team using the procedures described under the â€œ<a href=\"https://docs.kubewarden.io/disclosure\">security disclosure</a>â€œ guidelines of the Kubewarden project.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-756x-m4mj-q96c\">https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-756x-m4mj-q96c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24784\">https://nvd.nist.gov/vuln/detail/CVE-2025-24784</a></li>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/commit/51a88dfbb4c090ce0f76a22d98106518e0824d0b\">https://github.com/kubewarden/kubewarden-controller/commit/51a88dfbb4c090ce0f76a22d98106518e0824d0b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-756x-m4mj-q96c\">https://github.com/advisories/GHSA-756x-m4mj-q96c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-756x-m4mj-q96c",
            "title": "[github.com/kubewarden/kubewarden-controller] Kubewarden-Controller information leak via AdmissionPolicyGroup Resource",
            "date_modified": "2025-01-30T18:56:07.000Z",
            "date_published": "2025-01-30T17:52:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-756x-m4mj-q96c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerable node can be forced to shutdown/crash using a specially crafted message.</p>\n<p>More in-depth details will be released at a later time.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A fix has been included in geth version 1.14.13 and onwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Unfortunately, no workaround is available.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was originally reported to Polygon Security by David Matosse (@iam-ned).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-q26p-9cq4-7fc2\">https://github.com/ethereum/go-ethereum/security/advisories/GHSA-q26p-9cq4-7fc2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24883\">https://nvd.nist.gov/vuln/detail/CVE-2025-24883</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/commit/fa9a2ff8687ec9efe57b4b9833d5590d20f8a83f\">https://github.com/ethereum/go-ethereum/commit/fa9a2ff8687ec9efe57b4b9833d5590d20f8a83f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q26p-9cq4-7fc2\">https://github.com/advisories/GHSA-q26p-9cq4-7fc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q26p-9cq4-7fc2",
            "title": "[github.com/ethereum/go-ethereum] Go Ethereum vulnerable to DoS via malicious p2p message",
            "date_modified": "2025-01-30T18:56:12.000Z",
            "date_published": "2025-01-30T17:51:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q26p-9cq4-7fc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/advisories/GHSA-274v-mgcv-cm8j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-274v-mgcv-cm8j",
            "title": "[github.com/argoproj/gitops-engine] Argo CD GitOps Engine does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T17:51:33.000Z",
            "date_published": "2025-01-30T17:51:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-274v-mgcv-cm8j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If the \"full-elastic-stack\" example vector configuration was used for a real cluster, the previous values of kubernetes secrets would have been disclosed in the audit messages.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The example has been updated to fix this in commit db1aa5b867256b0a7bf206544c6981ab068b73dc</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Replace </p>\n<pre><code class=\"language-yaml\">\n          if .request.requestKind.kind == \"Secret\" {\n            del(.request.object.data)\n            .request.object.data.redacted = \"REDACTED\"\n            del(.request.oldObject.data)\n            .request.oldObject.data.redacted = \"REDACTED\"\n          }\n</code></pre>\n<p>In the vector \"audit-files-json-parser-and-redaction\" step\nwith</p>\n<pre><code class=\"language-yaml\">\n          if .request.requestKind.kind == \"Secret\" {\n            # Redact the secret data\n            del(.request.object.data)\n            .request.object.data.redacted = \"REDACTED\"\n            del(.request.oldObject.data)\n            .request.oldObject.data.redacted = \"REDACTED\"\n            # Remove the previously set secret data - Not bothering to parse it as this annotation shouldn't ever be needed\n            del(.request.object.metadata.annotations.[\"kubectl.kubernetes.io/last-applied-configuration\"])\n            del(.request.oldObject.metadata.annotations.[\"kubectl.kubernetes.io/last-applied-configuration\"])\n          }\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RichardoC/kube-audit-rest/security/advisories/GHSA-hcr5-wv4p-h2g2\">https://github.com/RichardoC/kube-audit-rest/security/advisories/GHSA-hcr5-wv4p-h2g2</a></li>\n<li><a href=\"https://github.com/RichardoC/kube-audit-rest/commit/db1aa5b867256b0a7bf206544c6981ab068b73dc\">https://github.com/RichardoC/kube-audit-rest/commit/db1aa5b867256b0a7bf206544c6981ab068b73dc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24884\">https://nvd.nist.gov/vuln/detail/CVE-2025-24884</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcr5-wv4p-h2g2\">https://github.com/advisories/GHSA-hcr5-wv4p-h2g2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcr5-wv4p-h2g2",
            "title": "[github.com/RichardoC/kube-audit-rest] kube-audit-rest's example logging configuration could disclose secret values in the audit log",
            "date_modified": "2025-01-29T22:00:42.000Z",
            "date_published": "2025-01-29T20:47:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcr5-wv4p-h2g2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The default values for Session.config.KeepAliveInterval and Session.config.ConnectionWriteTimeout of 30s and 10s create the possibility for timed out writes that most aren't handling in their readers.</p>\n<p>Calls to Stream.Read on one side of a connection will hang until the underlying Session is closed if the corresponding Stream.Write call on the other side it's waiting for returns with ErrConnectionWriteTimeout. This happens in the case of network congestion between the two sides.</p>\n<p>If you keep Session.sendCh full (fixed capacity of 64) for ConnectionWriteTimeout, but for less than the KeepAliveInterval + ConnectionWriteTimeout (which would kill the Session), Stream.Write will return ErrConnectionWriteTimeout. The state of the underlying Session or Stream is not modified. When this happens, the other side's Stream.Read call that's waiting for that write will never return because there's no timeout for this edge-case.</p>\n<p>Since no keep alive timed out, you can continue to use the Session once the network congestion is resolved, but that Stream.Read call will only return when the Session closes or the response shows up. Since the write call on the other side timed out the call to Stream.Read will never return.</p>\n<p>Any conditions that cause network writes to stall for 10-30 seconds can trigger this Denial of Service- extremely high CPU contention on either side of the connection, BGP reconvergence, etc. To resolve the Denial of Service issue, you have to re-establish the connections, which will usually require a hard restart of the service on either end of the connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/golang/vulndb/issues/3408\">https://github.com/golang/vulndb/issues/3408</a></li>\n<li><a href=\"https://github.com/hashicorp/yamux/issues/142\">https://github.com/hashicorp/yamux/issues/142</a></li>\n<li><a href=\"https://github.com/hashicorp/yamux/pull/143\">https://github.com/hashicorp/yamux/pull/143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-29qp-crvh-w22m\">https://github.com/advisories/GHSA-29qp-crvh-w22m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-29qp-crvh-w22m",
            "title": "[github.com/hashicorp/yamux] github.com/hashicorp/yamux's DefaultConfig has dangerous defaults causing hung Read",
            "date_modified": "2025-01-29T19:19:13.000Z",
            "date_published": "2025-01-29T19:19:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-29qp-crvh-w22m"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}