{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a user has restricted access to a project that is configured with <code>restricted=true</code>, they can gain root access on the system by creating a disk device with <code>shift=true</code> and creating a setuid root executable. This is possible because the <code>shift</code> property is not restricted unless <code>restricted.devices.disk.paths</code> is set.</p>\n<h3 id=\"details\">Details</h3>\n<p>The following patch shows the offending code with a possible fix:</p>\n<pre><code class=\"language-patch\">--- a/lxd/device/disk.go\n+++ b/lxd/device/disk.go\n@@ -429,17 +429,19 @@ func (d *disk) validateEnvironmentSourcePath() error {\n        if instProject.Name != api.ProjectDefaultName {\n                // If restricted disk paths are in force, then check the disk's source is allowed, and record the\n                // allowed parent path for later user during device start up sequence.\n-               if shared.IsTrue(instProject.Config[\"restricted\"]) &amp;&amp; instProject.Config[\"restricted.devices.disk.paths\"] != \"\" {\n-                       allowed, restrictedParentSourcePath := project.CheckRestrictedDevicesDiskPaths(instProject.Config, d.config[\"source\"])\n-                       if !allowed {\n-                               return fmt.Errorf(\"Disk source path %q not allowed by project for disk %q\", d.config[\"source\"], d.name)\n+               if shared.IsTrue(instProject.Config[\"restricted\"]) {\n+                       if instProject.Config[\"restricted.devices.disk.paths\"] != \"\" {\n+                               allowed, restrictedParentSourcePath := project.CheckRestrictedDevicesDiskPaths(instProject.Config, d.config[\"source\"])\n+                               if !allowed {\n+                                       return fmt.Errorf(\"Disk source path %q not allowed by project for disk %q\", d.config[\"source\"], d.name)\n+                               }\n+\n+                               d.restrictedParentSourcePath = shared.HostPath(restrictedParentSourcePath)\n                        }\n\n                        if shared.IsTrue(d.config[\"shift\"]) {\n                                return fmt.Errorf(`The \"shift\" property cannot be used with a restricted source path`)\n                        }\n-\n-                       d.restrictedParentSourcePath = shared.HostPath(restrictedParentSourcePath)\n                }\n        }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ lxc project create restricted -c restricted=true -c restricted.devices.disk=allow\n$ lxc project switch restricted\n$ lxc profile device add default root disk path=/ pool=default\n$ lxc init ubuntu:22.04 c1\n$ lxc config device add c1 d1 disk source=/ path=/mnt shift=true\n$ lxc start c1  # no error\n\n$ lxc project set restricted restricted.devices.disk.paths=/  # explicitly allow mounting /\n$ lxc restart c1\nError: Failed to start device \"d1\": The \"shift\" property cannot be used with a restricted source path\n</code></pre>\n<p>Created <a href=\"https://github.com/canonical/lxd/issues/12606\">https://github.com/canonical/lxd/issues/12606</a> to improve the documentation as per <a href=\"https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97#advisory-comment-91918\">https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97#advisory-comment-91918</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97\">https://github.com/canonical/lxd/security/advisories/GHSA-x9qq-236j-gj97</a></li>\n<li><a href=\"https://github.com/canonical/lxd/issues/12606\">https://github.com/canonical/lxd/issues/12606</a></li>\n<li><a href=\"https://github.com/canonical/lxd/commit/ce1bd0dd37bb3810fe6f16c237a4b65257f231f1\">https://github.com/canonical/lxd/commit/ce1bd0dd37bb3810fe6f16c237a4b65257f231f1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x9qq-236j-gj97\">https://github.com/advisories/GHSA-x9qq-236j-gj97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x9qq-236j-gj97",
            "title": "[github.com/canonical/lxd] Canonical LXD documentation improvement to make clear restricted.devices.disk=allow without restricted.devices.disk.paths also allows shift=true",
            "date_modified": "2025-01-30T22:49:13.000Z",
            "date_published": "2023-12-05T23:32:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x9qq-236j-gj97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23216\">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47g2-qmh2-749v\">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T18:55:57.000Z",
            "date_published": "2025-01-30T17:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23216\">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47g2-qmh2-749v\">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T18:55:57.000Z",
            "date_published": "2025-01-30T17:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23216\">https://nvd.nist.gov/vuln/detail/CVE-2025-23216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47g2-qmh2-749v\">https://github.com/advisories/GHSA-47g2-qmh2-749v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T18:55:57.000Z",
            "date_published": "2025-01-30T17:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47g2-qmh2-749v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>By design, AdmissionPolicy and AdmissionPolicyGroup can evaluate only namespaced resources. The resources to be evaluated are determined by the rules provided by the user when defining the policy.\nThere might be Kubernetes namespaced resources that should not be validated by AdmissionPolicy and by the AdmissionPolicyGroup policies because of their sensitive nature.\nFor example, PolicyReport are namespaced resources that contain the list of non compliant objects found inside of a namespace. See <a href=\"https://docs.kubewarden.io/explanations/audit-scanner/policy-reports\">this section</a> of Kubewarden’s documentation for more details about PolicyReport resources.\nAn attacker can use either an AdmissionPolicy or an AdmissionPolicyGroup to prevent the creation and update of PolicyReport objects to hide non-compliant resources.\nMoreover, the same attacker might use a mutating AdmissionPolicy to alter the contents of the PolicyReport created inside of the namespace.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Starting from the 1.21.0 release, the validation rules applied to AdmissionPolicy and AdmissionPolicyGroup have been tightened to prevent them from validating sensitive types of namespaced resources.\nThe new validation will also restrict the usage of wildcards when defining apiGroups and resources rules for AdmissionPolicy and AdmissionPolicyGroup objects.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On clusters running Kubewarden &lt; 1.21.0, the following Kubewarden policy can be applied to prevent the creation of AdmissionPolicy and AdmissionPolicyGroup resources that interact with PolicyReport resources:</p>\n<pre><code class=\"language-yaml\">apiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: \"deny-interaction-with-policyreport\"\nspec:\n  module: registry://ghcr.io/kubewarden/policies/cel-policy:latest\n  settings:\n    variables:\n      - name: hasWildcardInsideOfApiGroup\n        expression: \"object.spec.rules.exists(r, r.apiGroups.exists(ag, ag == '*'))\"\n      - name: hasWildcardInsideOfResources\n        expression: \"object.spec.rules.exists(r, r.resources.exists(ag, ag == '*' || ag == '*/*' || ag == 'policyreports/*'))\"\n      - name: dealsWithPolicyReportApiGroup\n        expression: \"object.spec.rules.exists(r, r.apiGroups.exists(ag, ag == 'wgpolicyk8s.io'))\"\n      - name: dealsWithPolicyReportResource\n        expression: \"object.spec.rules.exists(r, r.resources.exists(ag, ag == 'policyreports' || ag == 'policyreports/'))\"\n      - name: isPendingDeletion\n        expression: \"has(object.metadata.deletionTimestamp)\"\n    validations:\n      - expression: |\n          !( variables.hasWildcardInsideOfApiGroup ||\n             variables.hasWildcardInsideOfResources ||\n             variables.dealsWithPolicyReportResource ||\n             variables.dealsWithPolicyReportApiGroup\n          ) || variables.isPendingDeletion\n        message: \"cannot target PolicyReport resources or use wildcards in apiGroups or resources\"\n  rules:\n    - apiGroups: [\"policies.kubewarden.io\"]\n      apiVersions: [\"v1\"]\n      operations: [\"CREATE\", \"UPDATE\"]\n      resources: [\"admissionpolicies\", \"admissionpolicygroups\"]\n  mutating: false\n  backgroundAudit: true\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory you can contact the Kubewarden team using the procedures described under the “<a href=\"https://docs.kubewarden.io/disclosure\">security disclosure</a>“ guidelines of the Kubewarden project.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-fc89-jghx-8pvg\">https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-fc89-jghx-8pvg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24376\">https://nvd.nist.gov/vuln/detail/CVE-2025-24376</a></li>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/commit/8124039b5f0c955d0ee8c8ca12d4415282f02d2c\">https://github.com/kubewarden/kubewarden-controller/commit/8124039b5f0c955d0ee8c8ca12d4415282f02d2c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fc89-jghx-8pvg\">https://github.com/advisories/GHSA-fc89-jghx-8pvg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fc89-jghx-8pvg",
            "title": "[github.com/kubewarden/kubewarden-controller] KubeWarden's AdmissionPolicy and AdmissionPolicyGroup policies can be used to alter PolicyReport resources",
            "date_modified": "2025-01-30T18:56:02.000Z",
            "date_published": "2025-01-30T17:52:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fc89-jghx-8pvg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <a href=\"https://docs.kubewarden.io/explanations/policy-groups\">policy group feature</a>, added to by the 1.17.0 release, introduced two new types of CRD: ClusterAdmissionPolicyGroup and AdmissionPolicyGroup. The former is cluster wide, while the latter is namespaced.</p>\n<p>By being namespaced, the AdmissionPolicyGroup has a well constrained impact on cluster resources. Hence, it’s considered safe to allow non-admin users to create and manage these resources in the namespaces they own.\nKubewarden policies can be allowed to query the Kubernetes API at evaluation time; these types of policies are called “<a href=\"https://docs.kubewarden.io/reference/spec/context-aware-policies\">context aware</a>“.\nContext aware policies can perform list and get operations against a Kubernetes cluster. The queries are done using the ServiceAccount of the Policy Server instance that hosts the policy. That means that access to the cluster is determined by the RBAC rules that apply to that ServiceAccount.\nThe AdmissionPolicyGroup CRD allowed the deployment of context aware policies. This could allow an attacker to obtain information about resources that are out of their reach, by leveraging a higher access to the cluster granted to the ServiceAccount token used to run the policy.</p>\n<p>The impact of this vulnerability depends on the privileges that have been granted to the ServiceAccount used to run the Policy Server and assumes that users are using the recommended best practices of keeping the Policy Server's ServiceAccount least privileged. By default, the Kubewarden helm chart grants access to the following resources (cluster wide) only: Namespace, Pod, Deployment and Ingress.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Starting from the 1.21.0 release, the AdmissionPolicyGroup CRD does not allow the definition of context aware policies. No modifications are needed neither for performing the upgrade nor afterwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On clusters running Kubewarden &lt; 1.21.0, the following Kubewarden policy can be applied to prevent the creation of AdmissionPolicyGroup resources that have access to Kubernetes resources:</p>\n<pre><code class=\"language-yaml\">apiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: \"deny-admission-policy-groups-with-context-resources\"\nspec:\n  module: registry://ghcr.io/kubewarden/policies/cel-policy:latest\n  settings:\n    variables:\n      - name: hasContextAwareResources\n        expression: \"object.spec.policies.exists(p, has(object.spec.policies[p].contextAwareResources))\"\n      - name: isPendingDeletion\n        expression: \"has(object.metadata.deletionTimestamp)\"\n    validations:\n      - expression: \"!variables.hasContextAwareResources || variables.isPendingDeletion\"\n        message: \"AdmissionPolicyGroup has contextAwareResources defined\"\n  rules:\n    - apiGroups: [\"policies.kubewarden.io\"]\n      apiVersions: [\"v1\"]\n      operations: [\"CREATE\", \"UPDATE\"]\n      resources: [\"admissionpolicygroups\"]\n  mutating: false\n  backgroundAudit: true\n</code></pre>\n<p>Once the policy is applied, the <a href=\"https://docs.kubewarden.io/howtos/audit-scanner\">Kubewarden Audit Scanner</a> can be used to identify the AdmissionPolicyGroup policies that are violating this policy.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory you can contact the Kubewarden team using the procedures described under the “<a href=\"https://docs.kubewarden.io/disclosure\">security disclosure</a>“ guidelines of the Kubewarden project.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-756x-m4mj-q96c\">https://github.com/kubewarden/kubewarden-controller/security/advisories/GHSA-756x-m4mj-q96c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24784\">https://nvd.nist.gov/vuln/detail/CVE-2025-24784</a></li>\n<li><a href=\"https://github.com/kubewarden/kubewarden-controller/commit/51a88dfbb4c090ce0f76a22d98106518e0824d0b\">https://github.com/kubewarden/kubewarden-controller/commit/51a88dfbb4c090ce0f76a22d98106518e0824d0b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-756x-m4mj-q96c\">https://github.com/advisories/GHSA-756x-m4mj-q96c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-756x-m4mj-q96c",
            "title": "[github.com/kubewarden/kubewarden-controller] Kubewarden-Controller information leak via AdmissionPolicyGroup Resource",
            "date_modified": "2025-01-30T18:56:07.000Z",
            "date_published": "2025-01-30T17:52:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-756x-m4mj-q96c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerable node can be forced to shutdown/crash using a specially crafted message.</p>\n<p>More in-depth details will be released at a later time.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A fix has been included in geth version 1.14.13 and onwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Unfortunately, no workaround is available.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was originally reported to Polygon Security by David Matosse (@iam-ned).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-q26p-9cq4-7fc2\">https://github.com/ethereum/go-ethereum/security/advisories/GHSA-q26p-9cq4-7fc2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24883\">https://nvd.nist.gov/vuln/detail/CVE-2025-24883</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/commit/fa9a2ff8687ec9efe57b4b9833d5590d20f8a83f\">https://github.com/ethereum/go-ethereum/commit/fa9a2ff8687ec9efe57b4b9833d5590d20f8a83f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q26p-9cq4-7fc2\">https://github.com/advisories/GHSA-q26p-9cq4-7fc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q26p-9cq4-7fc2",
            "title": "[github.com/ethereum/go-ethereum] Go Ethereum vulnerable to DoS via malicious p2p message",
            "date_modified": "2025-01-30T18:56:12.000Z",
            "date_published": "2025-01-30T17:51:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q26p-9cq4-7fc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability was discovered in Argo CD that exposed secret values in error messages and the diff view when an invalid Kubernetes Secret resource was synced from a repository. </p>\n<p>The vulnerability assumes the user has write access to the repository and can exploit it, either intentionally or unintentionally, by committing an invalid Secret to repository and triggering a Sync. Once exploited, any user with read access to Argo CD can view the exposed secret data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability is available in the following Argo CD versions:</p>\n<ul>\n<li>v2.13.4</li>\n<li>v2.12.10</li>\n<li>v2.11.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<p>Fixed with commit <a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a> &amp; <a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-47g2-qmh2-749v</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/argoproj/gitops-engine/security/advisories/GHSA-274v-mgcv-cm8j</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107\">https://github.com/argoproj/argo-cd/commit/6f5537bdf15ddbaa0f27a1a678632ff0743e4107</a></li>\n<li><a href=\"https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca\">https://github.com/argoproj/gitops-engine/commit/7e21b91e9d0f64104c8a661f3f390c5e6d73ddca</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-274v-mgcv-cm8j\">https://github.com/advisories/GHSA-274v-mgcv-cm8j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-274v-mgcv-cm8j",
            "title": "[github.com/argoproj/gitops-engine] Argo CD GitOps Engine does not scrub secret values from patch errors",
            "date_modified": "2025-01-30T17:51:33.000Z",
            "date_published": "2025-01-30T17:51:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-274v-mgcv-cm8j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If the \"full-elastic-stack\" example vector configuration was used for a real cluster, the previous values of kubernetes secrets would have been disclosed in the audit messages.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The example has been updated to fix this in commit db1aa5b867256b0a7bf206544c6981ab068b73dc</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Replace </p>\n<pre><code class=\"language-yaml\">\n          if .request.requestKind.kind == \"Secret\" {\n            del(.request.object.data)\n            .request.object.data.redacted = \"REDACTED\"\n            del(.request.oldObject.data)\n            .request.oldObject.data.redacted = \"REDACTED\"\n          }\n</code></pre>\n<p>In the vector \"audit-files-json-parser-and-redaction\" step\nwith</p>\n<pre><code class=\"language-yaml\">\n          if .request.requestKind.kind == \"Secret\" {\n            # Redact the secret data\n            del(.request.object.data)\n            .request.object.data.redacted = \"REDACTED\"\n            del(.request.oldObject.data)\n            .request.oldObject.data.redacted = \"REDACTED\"\n            # Remove the previously set secret data - Not bothering to parse it as this annotation shouldn't ever be needed\n            del(.request.object.metadata.annotations.[\"kubectl.kubernetes.io/last-applied-configuration\"])\n            del(.request.oldObject.metadata.annotations.[\"kubectl.kubernetes.io/last-applied-configuration\"])\n          }\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RichardoC/kube-audit-rest/security/advisories/GHSA-hcr5-wv4p-h2g2\">https://github.com/RichardoC/kube-audit-rest/security/advisories/GHSA-hcr5-wv4p-h2g2</a></li>\n<li><a href=\"https://github.com/RichardoC/kube-audit-rest/commit/db1aa5b867256b0a7bf206544c6981ab068b73dc\">https://github.com/RichardoC/kube-audit-rest/commit/db1aa5b867256b0a7bf206544c6981ab068b73dc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24884\">https://nvd.nist.gov/vuln/detail/CVE-2025-24884</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcr5-wv4p-h2g2\">https://github.com/advisories/GHSA-hcr5-wv4p-h2g2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcr5-wv4p-h2g2",
            "title": "[github.com/RichardoC/kube-audit-rest] kube-audit-rest's example logging configuration could disclose secret values in the audit log",
            "date_modified": "2025-01-29T22:00:42.000Z",
            "date_published": "2025-01-29T20:47:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcr5-wv4p-h2g2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The default values for Session.config.KeepAliveInterval and Session.config.ConnectionWriteTimeout of 30s and 10s create the possibility for timed out writes that most aren't handling in their readers.</p>\n<p>Calls to Stream.Read on one side of a connection will hang until the underlying Session is closed if the corresponding Stream.Write call on the other side it's waiting for returns with ErrConnectionWriteTimeout. This happens in the case of network congestion between the two sides.</p>\n<p>If you keep Session.sendCh full (fixed capacity of 64) for ConnectionWriteTimeout, but for less than the KeepAliveInterval + ConnectionWriteTimeout (which would kill the Session), Stream.Write will return ErrConnectionWriteTimeout. The state of the underlying Session or Stream is not modified. When this happens, the other side's Stream.Read call that's waiting for that write will never return because there's no timeout for this edge-case.</p>\n<p>Since no keep alive timed out, you can continue to use the Session once the network congestion is resolved, but that Stream.Read call will only return when the Session closes or the response shows up. Since the write call on the other side timed out the call to Stream.Read will never return.</p>\n<p>Any conditions that cause network writes to stall for 10-30 seconds can trigger this Denial of Service- extremely high CPU contention on either side of the connection, BGP reconvergence, etc. To resolve the Denial of Service issue, you have to re-establish the connections, which will usually require a hard restart of the service on either end of the connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/golang/vulndb/issues/3408\">https://github.com/golang/vulndb/issues/3408</a></li>\n<li><a href=\"https://github.com/hashicorp/yamux/issues/142\">https://github.com/hashicorp/yamux/issues/142</a></li>\n<li><a href=\"https://github.com/hashicorp/yamux/pull/143\">https://github.com/hashicorp/yamux/pull/143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-29qp-crvh-w22m\">https://github.com/advisories/GHSA-29qp-crvh-w22m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-29qp-crvh-w22m",
            "title": "[github.com/hashicorp/yamux] github.com/hashicorp/yamux's DefaultConfig has dangerous defaults causing hung Read",
            "date_modified": "2025-01-29T19:19:13.000Z",
            "date_published": "2025-01-29T19:19:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-29qp-crvh-w22m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in ArgoCD. The openshift.io/cluster-monitoring label is applied to all namespaces that deploy an ArgoCD CR instance, allowing the namespace to create a rogue PrometheusRule. This issue can have adverse effects on the platform monitoring stack, as the rule is rolled out cluster-wide when the label is applied.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-13484\">https://nvd.nist.gov/vuln/detail/CVE-2024-13484</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-13484\">https://access.redhat.com/security/cve/CVE-2024-13484</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2269376\">https://bugzilla.redhat.com/show_bug.cgi?id=2269376</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-58fx-7v9q-3g56\">https://github.com/advisories/GHSA-58fx-7v9q-3g56</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-58fx-7v9q-3g56",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Namespace Isolation Break",
            "date_modified": "2025-01-28T20:40:01.000Z",
            "date_published": "2025-01-28T18:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-58fx-7v9q-3g56"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in CRI-O. A path traversal issue in the log management functions (UnMountPodLogs and LinkContainerLogs) may allow an attacker with permissions to create and delete Pods to unmount arbitrary host paths, leading to node-level denial of service by unmounting critical system directories.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-0750\">https://nvd.nist.gov/vuln/detail/CVE-2025-0750</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2025-0750\">https://access.redhat.com/security/cve/CVE-2025-0750</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2339405\">https://bugzilla.redhat.com/show_bug.cgi?id=2339405</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hp5j-2585-qx6g\">https://github.com/advisories/GHSA-hp5j-2585-qx6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hp5j-2585-qx6g",
            "title": "[github.com/cri-o/cri-o] CRI-O Path Traversal vulnerability",
            "date_modified": "2025-01-28T19:15:28.000Z",
            "date_published": "2025-01-28T12:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hp5j-2585-qx6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Coinbase researchers reported 2 security issues in our implementation of the oblivious transfer (OT) based protocol <a href=\"https://eprint.iacr.org/2018/499.pdf\">DKLS</a>:</p>\n<h3 id=\"1-secret-share-recovery-attack\">1. Secret share recovery attack</h3>\n<p>If the base OT setup of the protocol is reused for another execution of the OT extension, then a malicious participant can extract a bit of the secret of another participant. By repeating the execution they can eventually recover the whole secret.</p>\n<p>Therefore, unlike our comments suggested, you <strong>must not reuse an OT setup</strong> for multiple protocol executions. </p>\n<p>We're adding a warning in the code:</p>\n<p><a href=\"https://github.com/taurushq-io/multi-party-sig/blob/9e4400fccee89be6195d0a12dd0ed052288d5040/internal/ot/extended.go#L114\">https://github.com/taurushq-io/multi-party-sig/blob/9e4400fccee89be6195d0a12dd0ed052288d5040/internal/ot/extended.go#L114</a></p>\n<h3 id=\"2-invalid-security-proof-due-to-incorrect-operator\">2. Invalid security proof due to incorrect operator</h3>\n<p>The original 2018 version of the DKLS had a typo in the OT extension protocol when computing the check value in the OT extension: the paper noted a XOR whereas it should be a field multiplication. This erroneous behavior was implemented <a href=\"https://github.com/taurushq-io/multi-party-sig/blob/4d84aafb57b437da1b933db9a265fb7ce4e7c138/internal/ot/extended.go#L188\">in our code</a>. </p>\n<p>The proof of security fails in this case. No concrete attack is known, however.</p>\n<p>The <a href=\"https://eprint.iacr.org/2018/499.pdf\">2023 update</a> of the DKLS paper reported that typo and updated the protocol definition.</p>\n<p><del>As of 20241124, patching is in progress (branch <a href=\"https://github.com/taurushq-io/multi-party-sig/tree/otfix\">otfix</a>), but not merged to the main branch yes as the tests fail to pass. We're troubleshooting the issue and will merge into the main branch when it's resolved.</del></p>\n<p>As of 20250128, a patched version is available in <a href=\"https://github.com/taurushq-io/multi-party-sig/releases/tag/v0.7.0-alpha-2025-01-28\">https://github.com/taurushq-io/multi-party-sig/releases/tag/v0.7.0-alpha-2025-01-28</a>, thanks to <a href=\"https://github.com/taurushq-io/multi-party-sig/pull/119\">https://github.com/taurushq-io/multi-party-sig/pull/119</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not reuse an OT setup in the event that an abort is detected, to eliminate the secret recovery attack.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to the Coinbase researchers Yi-Hsiu Chen and Samuel Ranellucci for discovering these issues and providing a comprehensive write-up. Thank you to Yehuda Lindell for coordinating the disclosure.\nThanks to Jay Prakash for clarifying the risk of the base setup reuse.\nThanks to @cronokirby for writing the corrected code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/taurushq-io/multi-party-sig/security/advisories/GHSA-7f6p-phw2-8253\">https://github.com/taurushq-io/multi-party-sig/security/advisories/GHSA-7f6p-phw2-8253</a></li>\n<li><a href=\"https://eprint.iacr.org/2018/499.pdf\">https://eprint.iacr.org/2018/499.pdf</a></li>\n<li><a href=\"https://github.com/taurushq-io/multi-party-sig/blob/4d84aafb57b437da1b933db9a265fb7ce4e7c138/internal/ot/extended.go#L188\">https://github.com/taurushq-io/multi-party-sig/blob/4d84aafb57b437da1b933db9a265fb7ce4e7c138/internal/ot/extended.go#L188</a></li>\n<li><a href=\"https://github.com/taurushq-io/multi-party-sig/blob/9e4400fccee89be6195d0a12dd0ed052288d5040/internal/ot/extended.go#L114\">https://github.com/taurushq-io/multi-party-sig/blob/9e4400fccee89be6195d0a12dd0ed052288d5040/internal/ot/extended.go#L114</a></li>\n<li><a href=\"https://github.com/taurushq-io/multi-party-sig/tree/otfix\">https://github.com/taurushq-io/multi-party-sig/tree/otfix</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f6p-phw2-8253\">https://github.com/advisories/GHSA-7f6p-phw2-8253</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f6p-phw2-8253",
            "title": "[github.com/taurusgroup/multi-party-sig] Taurus multi-party-sig has OT-based ECDSA protocol implementation flaws",
            "date_modified": "2025-01-28T18:06:15.000Z",
            "date_published": "2024-11-25T15:11:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f6p-phw2-8253"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When logs are written to a widely-writable directory (the default), an unprivileged attacker may predict a privileged process's log file path and pre-create a symbolic link to a sensitive file in its place. When that privileged process runs, it will follow the planted symlink and overwrite that sensitive file. To fix that, glog now causes the program to exit (with status code 2) when it finds that the configured log file already exists.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45339\">https://nvd.nist.gov/vuln/detail/CVE-2024-45339</a></li>\n<li><a href=\"https://github.com/golang/glog/pull/74\">https://github.com/golang/glog/pull/74</a></li>\n<li><a href=\"https://github.com/golang/glog/pull/74/commits/b8741656e406e66d6992bc2c9575e460ecaa0ec2\">https://github.com/golang/glog/pull/74/commits/b8741656e406e66d6992bc2c9575e460ecaa0ec2</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/H-Q4ouHWyKs\">https://groups.google.com/g/golang-announce/c/H-Q4ouHWyKs</a></li>\n<li><a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2025-3372\">https://pkg.go.dev/vuln/GO-2025-3372</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wxm-mpqj-6jpf\">https://github.com/advisories/GHSA-6wxm-mpqj-6jpf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wxm-mpqj-6jpf",
            "title": "[github.com/golang/glog] Insecure Temporary File usage in github.com/golang/glog",
            "date_modified": "2025-01-28T20:15:41.000Z",
            "date_published": "2025-01-28T17:29:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wxm-mpqj-6jpf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Imgproxy does not block the <code>0.0.0.0</code> address, even with <code>IMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES</code> set to false. This can expose services on the local host.</p>\n<h3 id=\"details\">Details</h3>\n<p>imgproxy protects against SSRF against a loopback address with the following check (<a href=\"https://github.com/imgproxy/imgproxy/blob/0f37d62fd8326a32c213b30dd52e2319770885d8/security/source.go#L43C1-L47C1\">source</a>):</p>\n<pre><code>if !config.AllowLoopbackSourceAddresses &amp;&amp; ip.IsLoopback() {\n    return ErrSourceAddressNotAllowed\n}\n</code></pre>\n<p>This check is insufficient to prevent accessing services on the local host, as services may receive traffic on <code>0.0.0.0</code>. Go's <code>IsLoopback</code> (<a href=\"https://github.com/golang/go/blob/40b3c0e58a0ae8dec4684a009bf3806769e0fc41/src/net/ip.go#L126-L131\">source</a>) strictly follows the definition of loopback IPs beginning with <code>127</code>. <code>0.0.0.0</code> is not blocked.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/imgproxy/imgproxy/security/advisories/GHSA-j2hp-6m75-v4j4\">https://github.com/imgproxy/imgproxy/security/advisories/GHSA-j2hp-6m75-v4j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24354\">https://nvd.nist.gov/vuln/detail/CVE-2025-24354</a></li>\n<li><a href=\"https://github.com/imgproxy/imgproxy/commit/3d4fed6842aa8930ec224d0ad75b0079b858e081\">https://github.com/imgproxy/imgproxy/commit/3d4fed6842aa8930ec224d0ad75b0079b858e081</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2hp-6m75-v4j4\">https://github.com/advisories/GHSA-j2hp-6m75-v4j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2hp-6m75-v4j4",
            "title": "[github.com/imgproxy/imgproxy] imgproxy is vulnerable to SSRF against 0.0.0.0",
            "date_modified": "2025-01-27T20:50:24.000Z",
            "date_published": "2025-01-27T20:50:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2hp-6m75-v4j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Private maven repository credentials leaked in application logs in case of unsuccessful retrieval operation.</p>\n<h3 id=\"details\">Details</h3>\n<p>During the execution of an updatecli pipeline which contains a <code>maven</code> source configured with basic auth credentials, the credentials are being leaked in the application execution logs in case of failure.</p>\n<p>Credentials are properly sanitized when the operation is successful but not when for whatever reason there is a failure in the maven repository .e.g. wrong coordinates provided, not existing artifact or version.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The <a href=\"https://www.updatecli.io/docs/plugins/resource/maven/\">documentation</a> currently state to provide user credentials as basic auth inside the <code>repository</code> field. e.g.</p>\n<pre><code>sources:\n  default:\n    kind: maven\n    spec:\n      repository: \"{{ requiredEnv \"MAVEN_USERNAME\" }}:{{ requiredEnv \"MAVEN_PASS\" }}@repo.example.org/releases\"\n      groupid: \"org.example.company\"\n      artifactid: \"my-artifact\"\n      versionFilter:\n        kind: regex\n        pattern: \"^23(\\.[0-9]+){1,2}$\"\n</code></pre>\n<p>Logs are sanitized properly in case of a successful operation:</p>\n<pre><code>source: source#default\n-----------------------------------------------------------\nSearching for version matching pattern \"^23(\\\\.[0-9]+){1,2}$\"\n✔ Latest version is 23.4.0 on the Maven repository at https://repo.example.org/releases/org/example/company/my-artifact/maven-metadata.xml\n</code></pre>\n<p>but leaks credentials in case the GAV coordinates are wrong (misspelled package name or missing):</p>\n<pre><code>source: source#default\n-----------------------------------------------------------\nERROR: ✗ getting latest version: URL \"https://REDACTED:REDACTED@repo.example.org/releases/org/example/company/wrong-artifact/maven-metadata.xml\" not found or in error\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>User credentials/token used to authenticate against a private maven repository can be leaked in clear-text in console or CI logs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/updatecli/updatecli/security/advisories/GHSA-v34r-vj4r-38j6\">https://github.com/updatecli/updatecli/security/advisories/GHSA-v34r-vj4r-38j6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24355\">https://nvd.nist.gov/vuln/detail/CVE-2025-24355</a></li>\n<li><a href=\"https://github.com/updatecli/updatecli/commit/344b28091ffeca5ed32e8d0f9eda542842fcd3fa\">https://github.com/updatecli/updatecli/commit/344b28091ffeca5ed32e8d0f9eda542842fcd3fa</a></li>\n<li><a href=\"https://www.updatecli.io/docs/plugins/resource/maven\">https://www.updatecli.io/docs/plugins/resource/maven</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v34r-vj4r-38j6\">https://github.com/advisories/GHSA-v34r-vj4r-38j6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v34r-vj4r-38j6",
            "title": "[github.com/updatecli/updatecli] Updatecli exposes Maven credentials in console output",
            "date_modified": "2025-01-24T18:45:24.000Z",
            "date_published": "2025-01-24T18:45:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v34r-vj4r-38j6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A user with access to a Kubernetes cluster where Envoy Gateway is installed can use a path traversal attack to execute Envoy Admin interface commands on proxies managed by Envoy Gateway. The admin interface can be used to terminate the Envoy process and extract the Envoy configuration (possibly containing confidential data). </p>\n<p>For example, the following command, if run from within the Kubernetes cluster, can be used to get the configuration dump of the proxy:</p>\n<pre><code>curl --path-as-is http://&lt;Proxy-Service-ClusterIP&gt;:19001/stats/prometheus/../../config_dump\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>1.2.6</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The <code>EnvoyProxy</code> API can be used to apply a bootstrap config patch that restricts access strictly to the prometheus stats endpoint. Find below an example of such a bootstrap patch. </p>\n<pre><code>apiVersion: gateway.envoyproxy.io/v1alpha1\nkind: EnvoyProxy\nmetadata:\n  name: custom-proxy-config\n  namespace: default\nspec:\n  bootstrap:\n    type: JSONPatch\n    jsonPatches:\n    - op: \"add\"\n      path: \"/static_resources/listeners/0/filter_chains/0/filters/0/typed_config/normalize_path\"\n      value: true\n    - op: \"replace\"\n      path: \"/static_resources/listeners/0/filter_chains/0/filters/0/typed_config/route_config/virtual_hosts/0/routes/0/match\"\n      value:\n        path: \"/stats/prometheus\"\n        headers:\n          - name: \":method\"\n            exact_match: GET\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Envoy Admin Interface: <a href=\"https://www.envoyproxy.io/docs/envoy/latest/operations/admin\">https://www.envoyproxy.io/docs/envoy/latest/operations/admin</a></li>\n<li>Envoy Configuration Best Practices: <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge\">https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/envoyproxy/gateway/security/advisories/GHSA-j777-63hf-hx76\">https://github.com/envoyproxy/gateway/security/advisories/GHSA-j777-63hf-hx76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-24030\">https://nvd.nist.gov/vuln/detail/CVE-2025-24030</a></li>\n<li><a href=\"https://github.com/envoyproxy/gateway/commit/3eb3301ab3dbf12b201b47bdb6074d1233be07bd\">https://github.com/envoyproxy/gateway/commit/3eb3301ab3dbf12b201b47bdb6074d1233be07bd</a></li>\n<li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge\">https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge</a></li>\n<li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/operations/admin\">https://www.envoyproxy.io/docs/envoy/latest/operations/admin</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j777-63hf-hx76\">https://github.com/advisories/GHSA-j777-63hf-hx76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j777-63hf-hx76",
            "title": "[github.com/envoyproxy/gateway] Envoy Admin Interface Exposed through prometheus metrics endpoint",
            "date_modified": "2025-01-23T17:51:09.000Z",
            "date_published": "2025-01-23T17:51:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j777-63hf-hx76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For users who deploy Hubble UI using either Cilium CLI or via the Cilium Helm chart, an insecure default <code>Access-Control-Allow-Origin</code> header value could lead to sensitive data exposure. A user with access to a Hubble UI instance affected by this issue could leak configuration details about the Kubernetes cluster which Hubble UI is monitoring, including node names, IP addresses, and other metadata about workloads and the cluster networking configuration. In order for this vulnerability to be exploited, a victim would have to first visit a malicious page.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was patched in <a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d</a></p>\n<p>This issue affects:</p>\n<ul>\n<li>Cilium between v1.14.0 and v1.14.18 inclusive</li>\n<li>Cilium between v1.15.0 and v1.15.12 inclusive</li>\n<li>Cilium between v1.16.0 and v1.16.5 inclusive</li>\n</ul>\n<p>This issue is patched in:</p>\n<ul>\n<li>Cilium v1.14.19</li>\n<li>Cilium v1.15.13</li>\n<li>Cilium v1.16.6</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users who deploy Hubble UI using the Cilium Helm chart directly can remove the CORS headers from the Helm template as shown in the <a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">patch</a>.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @ciffelia for reporting this issue and to @geakstr for the fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list for the Cilium security team, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-h78m-j95m-5356\">https://github.com/cilium/cilium/security/advisories/GHSA-h78m-j95m-5356</a></li>\n<li><a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23047\">https://nvd.nist.gov/vuln/detail/CVE-2025-23047</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h78m-j95m-5356\">https://github.com/advisories/GHSA-h78m-j95m-5356</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h78m-j95m-5356",
            "title": "[github.com/cilium/cilium] Cilium has an information leakage via insecure default Hubble UI CORS header",
            "date_modified": "2025-01-22T18:44:38.000Z",
            "date_published": "2025-01-22T18:09:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h78m-j95m-5356"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For users who deploy Hubble UI using either Cilium CLI or via the Cilium Helm chart, an insecure default <code>Access-Control-Allow-Origin</code> header value could lead to sensitive data exposure. A user with access to a Hubble UI instance affected by this issue could leak configuration details about the Kubernetes cluster which Hubble UI is monitoring, including node names, IP addresses, and other metadata about workloads and the cluster networking configuration. In order for this vulnerability to be exploited, a victim would have to first visit a malicious page.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was patched in <a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d</a></p>\n<p>This issue affects:</p>\n<ul>\n<li>Cilium between v1.14.0 and v1.14.18 inclusive</li>\n<li>Cilium between v1.15.0 and v1.15.12 inclusive</li>\n<li>Cilium between v1.16.0 and v1.16.5 inclusive</li>\n</ul>\n<p>This issue is patched in:</p>\n<ul>\n<li>Cilium v1.14.19</li>\n<li>Cilium v1.15.13</li>\n<li>Cilium v1.16.6</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users who deploy Hubble UI using the Cilium Helm chart directly can remove the CORS headers from the Helm template as shown in the <a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">patch</a>.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @ciffelia for reporting this issue and to @geakstr for the fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list for the Cilium security team, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-h78m-j95m-5356\">https://github.com/cilium/cilium/security/advisories/GHSA-h78m-j95m-5356</a></li>\n<li><a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23047\">https://nvd.nist.gov/vuln/detail/CVE-2025-23047</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h78m-j95m-5356\">https://github.com/advisories/GHSA-h78m-j95m-5356</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h78m-j95m-5356",
            "title": "[github.com/cilium/cilium] Cilium has an information leakage via insecure default Hubble UI CORS header",
            "date_modified": "2025-01-22T18:44:38.000Z",
            "date_published": "2025-01-22T18:09:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h78m-j95m-5356"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For users who deploy Hubble UI using either Cilium CLI or via the Cilium Helm chart, an insecure default <code>Access-Control-Allow-Origin</code> header value could lead to sensitive data exposure. A user with access to a Hubble UI instance affected by this issue could leak configuration details about the Kubernetes cluster which Hubble UI is monitoring, including node names, IP addresses, and other metadata about workloads and the cluster networking configuration. In order for this vulnerability to be exploited, a victim would have to first visit a malicious page.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was patched in <a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d</a></p>\n<p>This issue affects:</p>\n<ul>\n<li>Cilium between v1.14.0 and v1.14.18 inclusive</li>\n<li>Cilium between v1.15.0 and v1.15.12 inclusive</li>\n<li>Cilium between v1.16.0 and v1.16.5 inclusive</li>\n</ul>\n<p>This issue is patched in:</p>\n<ul>\n<li>Cilium v1.14.19</li>\n<li>Cilium v1.15.13</li>\n<li>Cilium v1.16.6</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users who deploy Hubble UI using the Cilium Helm chart directly can remove the CORS headers from the Helm template as shown in the <a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">patch</a>.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @ciffelia for reporting this issue and to @geakstr for the fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list for the Cilium security team, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-h78m-j95m-5356\">https://github.com/cilium/cilium/security/advisories/GHSA-h78m-j95m-5356</a></li>\n<li><a href=\"https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d\">https://github.com/cilium/cilium/commit/a3489f190ba6e87b5336ee685fb6c80b1270d06d</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-23047\">https://nvd.nist.gov/vuln/detail/CVE-2025-23047</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h78m-j95m-5356\">https://github.com/advisories/GHSA-h78m-j95m-5356</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h78m-j95m-5356",
            "title": "[github.com/cilium/cilium] Cilium has an information leakage via insecure default Hubble UI CORS header",
            "date_modified": "2025-01-22T18:44:38.000Z",
            "date_published": "2025-01-22T18:09:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h78m-j95m-5356"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}