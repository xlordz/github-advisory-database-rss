<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/nuget.rss</id>
    <title>Security Advisory for .NET packages hosted at the NuGet Gallery</title>
    <updated>2025-02-22T22:01:12.527Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anuget"/>
    <subtitle>Security Advisory for .NET packages hosted at the NuGet Gallery on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[AutoQueryable] AutoQueryable leaks sensitive information]]></title>
        <id>https://github.com/advisories/GHSA-m4mm-534h-5cp5</id>
        <link href="https://github.com/advisories/GHSA-m4mm-534h-5cp5"/>
        <updated>2025-02-20T22:58:43.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in trenoncourt AutoQueryable v.1.7.0 allows a remote attacker to obtain sensitive information via the Unselectable function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-57716">https://nvd.nist.gov/vuln/detail/CVE-2024-57716</a></li>
<li><a href="https://github.com/pentesttoolscom/vulnerability-research/tree/master/CVE-2024-57716">https://github.com/pentesttoolscom/vulnerability-research/tree/master/CVE-2024-57716</a></li>
<li><a href="https://github.com/trenoncourt/AutoQueryable">https://github.com/trenoncourt/AutoQueryable</a></li>
<li><a href="https://github.com/advisories/GHSA-m4mm-534h-5cp5">https://github.com/advisories/GHSA-m4mm-534h-5cp5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4mm-534h-5cp5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-20T18:31:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms.Web.Common] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms.Web.Common] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms.Web.Common] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms.Web.Common] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Duende.AccessTokenManagement] Duende.AccessTokenManagement race condition when concurrently retrieving customized Client Credentials Access Tokens]]></title>
        <id>https://github.com/advisories/GHSA-qxj7-2x7w-3mpp</id>
        <link href="https://github.com/advisories/GHSA-qxj7-2x7w-3mpp"/>
        <updated>2025-02-19T17:47:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Duende.AccessTokenManagement contains a race condition when requesting access tokens using the client credentials flow. Concurrent requests to obtain an access token using differing protocol parameters can return access tokens obtained with the wrong scope, resource indicator, or other protocol parameters. Such usage is somewhat atypical, and only a small percentage of users are likely to be affected.</p>
<h3 id="details">Details</h3>
<p>Duende.AccessTokenManagement can request access tokens using the client credentials flow in several ways. In basic usage, the client credentials flow is configured once and the parameters do not vary. In more advanced situations, requests with varying protocol parameters may be made by calling specific overloads of these methods:</p>
<ul>
<li><code>HttpContext.GetClientAccessTokenAsync()</code></li>
<li><code>IClientCredentialsTokenManagementService.GetAccessTokenAsync()</code></li>
</ul>
<p>There are overloads of both of these methods that accept a <code>TokenRequestParameters</code> object that customizes token request parameters. However, concurrent requests with varying <code>TokenRequestParameters</code> will result in the same token for all concurrent calls.</p>
<h3 id="upgrading">Upgrading</h3>
<p>Most users can simply update the NuGet package to the latest version. Customizations of the <code>IClientCredentialsTokenCache</code> that derive from the default implementation (<code>DistributedClientCredentialsTokenCache</code>) will require a small code change, as its constructor was changed to add a dependency on the <code>ITokenRequestSynchronization</code> service. The synchronization service will need to be injected into the derived class and passed to the base constructor.</p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability depends on how Duende.AccessTokenManagement is used and on the security architecture of the solution. Most users will not be vulnerable to this issue. More advanced users may run into this issue by calling the methods specified above with customized token request parameters. The impact of obtaining an access token with different than intended protocol parameters will vary depending on application logic, security architecture, and the authorization policy of the resource servers.</p>
<p>Thank you to <strong>Michael Dimoudis</strong> of <strong>PageUp</strong> for finding this issue and responsibly disclosing it!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/DuendeSoftware/foss/security/advisories/GHSA-qxj7-2x7w-3mpp">https://github.com/DuendeSoftware/foss/security/advisories/GHSA-qxj7-2x7w-3mpp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-26620">https://nvd.nist.gov/vuln/detail/CVE-2025-26620</a></li>
<li><a href="https://github.com/DuendeSoftware/foss/commit/a33332ddec0ebf3c048ba85427e3c77d47c68dac">https://github.com/DuendeSoftware/foss/commit/a33332ddec0ebf3c048ba85427e3c77d47c68dac</a></li>
<li><a href="https://github.com/advisories/GHSA-qxj7-2x7w-3mpp">https://github.com/advisories/GHSA-qxj7-2x7w-3mpp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qxj7-2x7w-3mpp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-19T17:47:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[CIE.AspNetCore.Authentication] AspNetCore Remote Authenticator for CIE3.0 Allows SAML Response Signature Verification Bypass]]></title>
        <id>https://github.com/advisories/GHSA-vq63-8f72-f486</id>
        <link href="https://github.com/advisories/GHSA-vq63-8f72-f486"/>
        <updated>2025-02-18T19:25:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Authentication using Spid and CIE is based on the SAML2 standard which provides for two entities:</p>
<p>Identity Provider (IdP): the system that authenticates users and provides identity information ( SAML assertions ) to the Service Provider, essentially, it is responsible for managing user credentials and identity;
Service Provider (SP): The system that provides a service to the user and relies on the Identity Provider to authenticate the user, receives SAML assertions from the IdP to grant access to resources.
The library <code>cie-aspnetcorerefers</code> to the second entity, i.e. the SP, and implements the validation logic of the SAML assertions present within the SAML response . The following is a summary diagram of an authentication flow via SAML:</p>
<p><img alt="" src="https://github.com/user-attachments/assets/5b10c8f8-5121-446f-95f8-c0355daa5959"></p>
<p>As shown in the diagram, the IdP, after verifying the user's credentials, generates a signed SAML response, this is propagated to the SP by the user's browser and the SP, after verifying the signature, can extract the data needed to build the user's session.</p>
<p>The signature validation logic is central as it ensures that you cannot craft a SAML response with arbitrary assertions and thus impersonate other users.</p>
<p>The following is the validation code implemented in <code>cie-aspnetcore</code>.</p>
<pre><code class="language-csharp">internal static bool VerifySignature(XmlDocument signedDocument, IdentityProvider? identityProvider = null){
    //...SNIP...
    SignedXml signedXml = new SignedXml(signedDocument);
    if (identityProvider is not null)
    {
        bool validated = false;
        foreach (var certificate in identityProvider.X509SigningCertificates){
            var publicMetadataCert = new X509Certificate2(Convert.FromBase64String(certificate));
            XmlNodeList nodeList = (signedDocument.GetElementsByTagName("ds:Signature")?.Count &gt; 1) ?
                                    signedDocument.GetElementsByTagName("ds:Signature") :
                                   (signedDocument.GetElementsByTagName("ns2:Signature")?.Count &gt; 1) ?
                                    signedDocument.GetElementsByTagName("ns2:Signature") :
                                    signedDocument.GetElementsByTagName("Signature");
            signedXml.LoadXml((XmlElement)nodeList[0]);
            validated |= signedXml.CheckSignature(publicMetadataCert, true);
        }
        return validated;
    }
    else{
        XmlNodeList nodeList = (signedDocument.GetElementsByTagName("ds:Signature")?.Count &gt; 0) ?
                               signedDocument.GetElementsByTagName("ds:Signature") :
                               signedDocument.GetElementsByTagName("Signature");
        signedXml.LoadXml((XmlElement)nodeList[0]);
        return signedXml.CheckSignature();
    }
    //...SNIP...
}
</code></pre>
<p>The parameter <code>signedDocument</code> contains the SAML response in XML format, while the parameter <code>identityProvider</code> can contain the IdP info. If the parameter <code>identityProvider</code> has been specified, the public certificates of that IdP are extracted, so as to force their use during the signature verification, otherwise the certificates configured within the application are used.</p>
<p>Next, a response envelope is generated nodeList within which all XML elements containing an XML signature of part or all of the SAML response envelope are saved.</p>
<p>Finally, the first element of this list, i.e. the first signature found, is extracted and verified.</p>
<p>In a normal authentication flow, the SAML response looks like this (note that some fields and attributes have been omitted for ease of reading):</p>
<pre><code class="language-xml">&lt;samlp:Response ID="response_id" IssueInstant="2025-01-07T13:37:00Z" Version="2.0" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"&gt;
    &lt;saml:Issuer Format="urn:oasis:names:tc:SAML:2.0:nameid-format:entity"&gt;
        https://demo.spid.gov.it/validator
    &lt;/saml:Issuer&gt;
    &lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&gt;
        &lt;ds:SignedInfo&gt;
            &lt;ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/&gt;
            &lt;ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/&gt;
            &lt;ds:Reference URI="#response_id"&gt;
                &lt;ds:Transforms&gt;
                    &lt;ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/&gt;
                &lt;/ds:Transforms&gt;
                &lt;ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
                &lt;ds:DigestValue&gt;
                    &lt;!-- DIGEST --&gt;
                &lt;/ds:DigestValue&gt;
            &lt;/ds:Reference&gt;
        &lt;/ds:SignedInfo&gt;
        &lt;ds:SignatureValue&gt;
           &lt;!-- SIGNATURE --&gt;
        &lt;/ds:SignatureValue&gt;
        &lt;ds:KeyInfo&gt;
            &lt;ds:X509Data&gt;
                &lt;ds:X509Certificate&gt;
                    &lt;!-- CERTIFICATE --&gt;
                &lt;/ds:X509Certificate&gt;
            &lt;/ds:X509Data&gt;
        &lt;/ds:KeyInfo&gt;
    &lt;/ds:Signature&gt;
    &lt;samlp:Status&gt;
        &lt;samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/&gt;
    &lt;/samlp:Status&gt;
    &lt;saml:Assertion ID="assertion_id" IssueInstant="2025-01-07T13:37:00Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
        &lt;saml:Issuer Format="urn:oasis:names:tc:SAML:2.0:nameid-format:entity"&gt;
            https://demo.spid.gov.it/validator
        &lt;/saml:Issuer&gt;
        &lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&gt;
            &lt;ds:SignedInfo&gt;
                &lt;ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/&gt;
                &lt;ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/&gt;
                &lt;ds:Reference URI="#assertion_id"&gt;
                    &lt;ds:Transforms&gt;
                        &lt;ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/&gt;
                    &lt;/ds:Transforms&gt;
                    &lt;ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
                    &lt;ds:DigestValue&gt;
                        &lt;!-- DIGEST --&gt;
                    &lt;/ds:DigestValue&gt;
                &lt;/ds:Reference&gt;
            &lt;/ds:SignedInfo&gt;
            &lt;ds:SignatureValue&gt;
                &lt;!-- SIGNATURE --&gt;
            &lt;/ds:SignatureValue&gt;
            &lt;ds:KeyInfo&gt;
                &lt;ds:X509Data&gt;
                    &lt;ds:X509Certificate&gt;
                        &lt;!-- CERTIFICATE --&gt;
                    &lt;/ds:X509Certificate&gt;
                &lt;/ds:X509Data&gt;
            &lt;/ds:KeyInfo&gt;
        &lt;/ds:Signature&gt;
        &lt;saml:AttributeStatement&gt;
            &lt;saml:Attribute Name="spidCode" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"&gt;
                &lt;saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string"&gt;
                    AGID-001
                &lt;/saml:AttributeValue&gt;
            &lt;/saml:Attribute&gt;
            &lt;!-- ... SNIP ... --&gt;
        &lt;/saml:AttributeStatement&gt;
    &lt;/saml:Assertion&gt;
&lt;/samlp:Response&gt;
</code></pre>
<p>The SDK code would get as the first element of the <code>nodeList</code>, that is <code>nodeList[0]</code>, the signature referring to the entire SAML response, in fact the reference of the first signature <code>&lt;ds:Reference URI="#response_id"&gt;</code> points to the root object <code>&lt;samlp:Response ID="response_id" ...&gt;</code>. Therefore, verifying this signature will ensure that the entire content of the SAML response is intact and authentic.</p>
<p>However, there is no guarantee that the first signature refers to the root object, so if an attacker injects a signed element as the first element, all other signatures will not be verified. The only requirement is to have a legitimately signed XML element from the IdP, which is easily accomplished using the public metadata of the IdP.</p>
<p>The SAML response would be structured like this:</p>
<p><img alt="" src="https://github.com/user-attachments/assets/42b8c97a-96ae-45c9-afed-aab7066201a1"></p>
<h3 id="impact">Impact</h3>
<p>An attacker could craft an arbitrary SAML response that would be accepted by SPs using the vulnerable SDKs, allowing him to impersonate any Spid and/or CIE user.</p>
<h3 id="complexity-of-the-attack">Complexity of the attack</h3>
<p>The attacker needs an XML block containing a valid signature from one of the IdPs accepted by the SP. As described above, this requirement is satisfied by reading the public metadata of the IdP which is represented by a signed XML block of the IdP.</p>
<h3 id="related-issues">Related issues</h3>
<p>N/A</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Clone the repository <a href="https://github.com/italia/spid-aspnetcore.git">https://github.com/italia/spid-aspnetcore.git</a></li>
<li>From the root of the project, enter the folder relating to the example webapp: <code>samples/1_SimpleSPWebApp/SPID.AspNetCore.WebApp/</code></li>
<li>Change the value of the <code>AssertionConsumerServiceURL</code> key in the file <code>appsettings.json</code> to a custom domain: <code>https://$CUSTOM_DOMAIN:$CUSTOM_PORT/signin-spid</code></li>
<li>Compile and run the sample webapp using the following command, taking care to replace the placeholders with the same values ​​used in step 3: <code>dotnet build "SPID.AspNetCore.WebApp.csproj" -o ./app/build &amp;&amp; dotnet publish "SPID.AspNetCore.WebApp.csproj" -o ./app/publish &amp;&amp; dotnet ./app/publish/SPID.AspNetCore.WebApp.dll -urls=https://$CUSTOM_DOMAIN:$CUSTOM_PORT</code></li>
<li>Visit URL: <code>https://$CUSTOM_DOMAIN:$CUSTOM_PORT/</code></li>
<li>Click "Enter with SPID" &gt; "DemoSpid" (second IdP in the list)</li>
<li>Visit the "Response" &gt; "Check Response" section</li>
<li>Insert the following string into the "Audience" field (right column): <code>https://spid.aspnetcore.it/</code></li>
<li>Click "Send response to Service Provider", note the redirect to  <code>/home/loggedin</code> and consequently the correct execution of the login on the example portal</li>
</ol>
<p><img alt="" src="https://github.com/user-attachments/assets/af3775a1-5f01-4ffa-9b28-730fef487869"></p>
<ol start="10">
<li>Repeat steps 5 to 8 inclusive</li>
<li>Intercept the HTTP request generated in step 8 via an HTTP Proxy, such as PortSwigger's BurpSuite</li>
<li>Perform URL-decoding and Base64-decoding of the POST <code>SAMLResponse</code> parameter</li>
<li>Insert the content present at the following URL in the second line of the XML: <a href="https://demo.spid.gov.it/metadata.xml">https://demo.spid.gov.it/metadata.xml</a></li>
<li>Change the contents of the tag <code>&lt;saml:Assertion&gt;</code>, for example change the <code>email</code> attribute to an arbitrary value: <code>spid.tech@shielder.it</code></li>
<li>Run Base64-encoding and then URL-encoding the <code>SAMLResponse</code> parameter</li>
<li>Send the request and note the redirect to <code>/home/loggedin</code> which demonstrates the correct identification and therefore also the verification of the arbitrary signature inserted in <code>SAMLResponse</code> despite the modification of the assertion</li>
</ol>
<p><img alt="" src="https://github.com/user-attachments/assets/a725401f-7884-4910-b4e5-b6c55c1cde83"></p>
<h3 id="recommended-solution">Recommended Solution</h3>
<p>Verify all signatures within the SAML response and do not accept unsigned XML elements.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html</a></li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li><a href="https://x.com/smaury92">Abdel Adim <code>smaury</code> Oisfi</a> di <a href="https://www.shielder.com">Shielder</a></li>
<li><a href="https://x.com/paupu_95">Paolo<code>paupu</code> Cavaglià</a> di <a href="https://www.shielder.com">Shielder</a></li>
<li><a href="https://x.com/fromveeko">Nicola <code>fromveeko</code> Davico</a> di <a href="https://www.shielder.com">Shielder</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/italia/cie-aspnetcore/security/advisories/GHSA-vq63-8f72-f486">https://github.com/italia/cie-aspnetcore/security/advisories/GHSA-vq63-8f72-f486</a></li>
<li><a href="https://github.com/italia/cie-aspnetcore/commit/e66b7f336ff5d4c69f95f197f27f3145f2484994">https://github.com/italia/cie-aspnetcore/commit/e66b7f336ff5d4c69f95f197f27f3145f2484994</a></li>
<li><a href="https://github.com/advisories/GHSA-vq63-8f72-f486">https://github.com/advisories/GHSA-vq63-8f72-f486</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vq63-8f72-f486</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-18T19:25:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[SPID.AspNetCore.Authentication] The AspNetCore Remote Authenticator for SPID Allows SAML Response Signature Verification Bypass]]></title>
        <id>https://github.com/advisories/GHSA-36h8-r92j-w9vw</id>
        <link href="https://github.com/advisories/GHSA-36h8-r92j-w9vw"/>
        <updated>2025-02-18T19:25:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Authentication using Spid and CIE is based on the SAML2 standard which provides for two entities:</p>
<p>Identity Provider (IdP): the system that authenticates users and provides identity information ( SAML assertions ) to the Service Provider, essentially, it is responsible for managing user credentials and identity;
Service Provider (SP): The system that provides a service to the user and relies on the Identity Provider to authenticate the user, receives SAML assertions from the IdP to grant access to resources.
The library <code>spid-aspnetcorerefers</code> to the second entity, i.e. the SP, and implements the validation logic of the SAML assertions present within the SAML response . The following is a summary diagram of an authentication flow via SAML:</p>
<p><img alt="" src="https://github.com/user-attachments/assets/5b10c8f8-5121-446f-95f8-c0355daa5959"></p>
<p>As shown in the diagram, the IdP, after verifying the user's credentials, generates a signed SAML response, this is propagated to the SP by the user's browser and the SP, after verifying the signature, can extract the data needed to build the user's session.</p>
<p>The signature validation logic is central as it ensures that you cannot craft a SAML response with arbitrary assertions and thus impersonate other users.</p>
<p>The following is the validation code implemented in <code>spid-aspnetcore</code>.</p>
<pre><code class="language-csharp">internal static bool VerifySignature(XmlDocument signedDocument, IdentityProvider? identityProvider = null){
    //...SNIP...
    SignedXml signedXml = new SignedXml(signedDocument);
    if (identityProvider is not null)
    {
        bool validated = false;
        foreach (var certificate in identityProvider.X509SigningCertificates){
            var publicMetadataCert = new X509Certificate2(Convert.FromBase64String(certificate));
            XmlNodeList nodeList = (signedDocument.GetElementsByTagName("ds:Signature")?.Count &gt; 1) ?
                                    signedDocument.GetElementsByTagName("ds:Signature") :
                                   (signedDocument.GetElementsByTagName("ns2:Signature")?.Count &gt; 1) ?
                                    signedDocument.GetElementsByTagName("ns2:Signature") :
                                    signedDocument.GetElementsByTagName("Signature");
            signedXml.LoadXml((XmlElement)nodeList[0]);
            validated |= signedXml.CheckSignature(publicMetadataCert, true);
        }
        return validated;
    }
    else{
        XmlNodeList nodeList = (signedDocument.GetElementsByTagName("ds:Signature")?.Count &gt; 0) ?
                               signedDocument.GetElementsByTagName("ds:Signature") :
                               signedDocument.GetElementsByTagName("Signature");
        signedXml.LoadXml((XmlElement)nodeList[0]);
        return signedXml.CheckSignature();
    }
    //...SNIP...
}
</code></pre>
<p>The parameter <code>signedDocument</code> contains the SAML response in XML format, while the parameter <code>identityProvider</code> can contain the IdP info. If the parameter <code>identityProvider</code> has been specified, the public certificates of that IdP are extracted, so as to force their use during the signature verification, otherwise the certificates configured within the application are used.</p>
<p>Next, a response envelope is generated nodeList within which all XML elements containing an XML signature of part or all of the SAML response envelope are saved.</p>
<p>Finally, the first element of this list, i.e. the first signature found, is extracted and verified.</p>
<p>In a normal authentication flow, the SAML response looks like this (note that some fields and attributes have been omitted for ease of reading):</p>
<pre><code class="language-xml">&lt;samlp:Response ID="response_id" IssueInstant="2025-01-07T13:37:00Z" Version="2.0" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"&gt;
    &lt;saml:Issuer Format="urn:oasis:names:tc:SAML:2.0:nameid-format:entity"&gt;
        https://demo.spid.gov.it/validator
    &lt;/saml:Issuer&gt;
    &lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&gt;
        &lt;ds:SignedInfo&gt;
            &lt;ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/&gt;
            &lt;ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/&gt;
            &lt;ds:Reference URI="#response_id"&gt;
                &lt;ds:Transforms&gt;
                    &lt;ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/&gt;
                &lt;/ds:Transforms&gt;
                &lt;ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
                &lt;ds:DigestValue&gt;
                    &lt;!-- DIGEST --&gt;
                &lt;/ds:DigestValue&gt;
            &lt;/ds:Reference&gt;
        &lt;/ds:SignedInfo&gt;
        &lt;ds:SignatureValue&gt;
           &lt;!-- SIGNATURE --&gt;
        &lt;/ds:SignatureValue&gt;
        &lt;ds:KeyInfo&gt;
            &lt;ds:X509Data&gt;
                &lt;ds:X509Certificate&gt;
                    &lt;!-- CERTIFICATE --&gt;
                &lt;/ds:X509Certificate&gt;
            &lt;/ds:X509Data&gt;
        &lt;/ds:KeyInfo&gt;
    &lt;/ds:Signature&gt;
    &lt;samlp:Status&gt;
        &lt;samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/&gt;
    &lt;/samlp:Status&gt;
    &lt;saml:Assertion ID="assertion_id" IssueInstant="2025-01-07T13:37:00Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
        &lt;saml:Issuer Format="urn:oasis:names:tc:SAML:2.0:nameid-format:entity"&gt;
            https://demo.spid.gov.it/validator
        &lt;/saml:Issuer&gt;
        &lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&gt;
            &lt;ds:SignedInfo&gt;
                &lt;ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/&gt;
                &lt;ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/&gt;
                &lt;ds:Reference URI="#assertion_id"&gt;
                    &lt;ds:Transforms&gt;
                        &lt;ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/&gt;
                    &lt;/ds:Transforms&gt;
                    &lt;ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/&gt;
                    &lt;ds:DigestValue&gt;
                        &lt;!-- DIGEST --&gt;
                    &lt;/ds:DigestValue&gt;
                &lt;/ds:Reference&gt;
            &lt;/ds:SignedInfo&gt;
            &lt;ds:SignatureValue&gt;
                &lt;!-- SIGNATURE --&gt;
            &lt;/ds:SignatureValue&gt;
            &lt;ds:KeyInfo&gt;
                &lt;ds:X509Data&gt;
                    &lt;ds:X509Certificate&gt;
                        &lt;!-- CERTIFICATE --&gt;
                    &lt;/ds:X509Certificate&gt;
                &lt;/ds:X509Data&gt;
            &lt;/ds:KeyInfo&gt;
        &lt;/ds:Signature&gt;
        &lt;saml:AttributeStatement&gt;
            &lt;saml:Attribute Name="spidCode" NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"&gt;
                &lt;saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string"&gt;
                    AGID-001
                &lt;/saml:AttributeValue&gt;
            &lt;/saml:Attribute&gt;
            &lt;!-- ... SNIP ... --&gt;
        &lt;/saml:AttributeStatement&gt;
    &lt;/saml:Assertion&gt;
&lt;/samlp:Response&gt;
</code></pre>
<p>The SDK code would get as the first element of the <code>nodeList</code>, that is <code>nodeList[0]</code>, the signature referring to the entire SAML response, in fact the reference of the first signature <code>&lt;ds:Reference URI="#response_id"&gt;</code> points to the root object <code>&lt;samlp:Response ID="response_id" ...&gt;</code>. Therefore, verifying this signature will ensure that the entire content of the SAML response is intact and authentic.</p>
<p>However, there is no guarantee that the first signature refers to the root object, so if an attacker injects a signed element as the first element, all other signatures will not be verified. The only requirement is to have a legitimately signed XML element from the IdP, which is easily accomplished using the public metadata of the IdP.</p>
<p>The SAML response would be structured like this:</p>
<p><img alt="" src="https://github.com/user-attachments/assets/42b8c97a-96ae-45c9-afed-aab7066201a1"></p>
<h3 id="impact">Impact</h3>
<p>An attacker could craft an arbitrary SAML response that would be accepted by SPs using the vulnerable SDKs, allowing him to impersonate any Spid and/or CIE user.</p>
<h3 id="complexity-of-the-attack">Complexity of the attack</h3>
<p>The attacker needs an XML block containing a valid signature from one of the IdPs accepted by the SP. As described above, this requirement is satisfied by reading the public metadata of the IdP which is represented by a signed XML block of the IdP.</p>
<h3 id="related-issues">Related issues</h3>
<p>N/A</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Clone the repository <a href="https://github.com/italia/spid-aspnetcore.git">https://github.com/italia/spid-aspnetcore.git</a></li>
<li>From the root of the project, enter the folder relating to the example webapp: <code>samples/1_SimpleSPWebApp/SPID.AspNetCore.WebApp/</code></li>
<li>Change the value of the <code>AssertionConsumerServiceURL</code> key in the file <code>appsettings.json</code> to a custom domain: <code>https://$CUSTOM_DOMAIN:$CUSTOM_PORT/signin-spid</code></li>
<li>Compile and run the sample webapp using the following command, taking care to replace the placeholders with the same values ​​used in step 3: <code>dotnet build "SPID.AspNetCore.WebApp.csproj" -o ./app/build &amp;&amp; dotnet publish "SPID.AspNetCore.WebApp.csproj" -o ./app/publish &amp;&amp; dotnet ./app/publish/SPID.AspNetCore.WebApp.dll -urls=https://$CUSTOM_DOMAIN:$CUSTOM_PORT</code></li>
<li>Visit URL: <code>https://$CUSTOM_DOMAIN:$CUSTOM_PORT/</code></li>
<li>Click "Enter with SPID" &gt; "DemoSpid" (second IdP in the list)</li>
<li>Visit the "Response" &gt; "Check Response" section</li>
<li>Insert the following string into the "Audience" field (right column): <code>https://spid.aspnetcore.it/</code></li>
<li>Click "Send response to Service Provider", note the redirect to  <code>/home/loggedin</code> and consequently the correct execution of the login on the example portal</li>
</ol>
<p><img alt="" src="https://github.com/user-attachments/assets/af3775a1-5f01-4ffa-9b28-730fef487869"></p>
<ol start="10">
<li>Repeat steps 5 to 8 inclusive</li>
<li>Intercept the HTTP request generated in step 8 via an HTTP Proxy, such as PortSwigger's BurpSuite</li>
<li>Perform URL-decoding and Base64-decoding of the POST <code>SAMLResponse</code> parameter</li>
<li>Insert the content present at the following URL in the second line of the XML: <a href="https://demo.spid.gov.it/metadata.xml">https://demo.spid.gov.it/metadata.xml</a></li>
<li>Change the contents of the tag <code>&lt;saml:Assertion&gt;</code>, for example change the <code>email</code> attribute to an arbitrary value: <code>spid.tech@shielder.it</code></li>
<li>Run Base64-encoding and then URL-encoding the <code>SAMLResponse</code> parameter</li>
<li>Send the request and note the redirect to <code>/home/loggedin</code> which demonstrates the correct identification and therefore also the verification of the arbitrary signature inserted in <code>SAMLResponse</code> despite the modification of the assertion</li>
</ol>
<p><img alt="" src="https://github.com/user-attachments/assets/a725401f-7884-4910-b4e5-b6c55c1cde83"></p>
<h3 id="recommended-solution">Recommended Solution</h3>
<p>Verify all signatures within the SAML response and do not accept unsigned XML elements.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html</a></li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li><a href="https://x.com/smaury92">Abdel Adim <code>smaury</code> Oisfi</a> di <a href="https://www.shielder.com">Shielder</a></li>
<li><a href="https://x.com/paupu_95">Paolo<code>paupu</code> Cavaglià</a> di <a href="https://www.shielder.com">Shielder</a></li>
<li><a href="https://x.com/fromveeko">Nicola <code>fromveeko</code> Davico</a> di <a href="https://www.shielder.com">Shielder</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/italia/spid-aspnetcore/security/advisories/GHSA-36h8-r92j-w9vw">https://github.com/italia/spid-aspnetcore/security/advisories/GHSA-36h8-r92j-w9vw</a></li>
<li><a href="https://github.com/italia/spid-aspnetcore/commit/093efa2273f8a1e0481f678a0bfcd57fbdc7b029">https://github.com/italia/spid-aspnetcore/commit/093efa2273f8a1e0481f678a0bfcd57fbdc7b029</a></li>
<li><a href="https://github.com/advisories/GHSA-36h8-r92j-w9vw">https://github.com/advisories/GHSA-36h8-r92j-w9vw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-36h8-r92j-w9vw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-02-18T19:25:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OPCFoundation.NetStandard.Opc.Ua] Authentication Bypass by Spoofing in OPC UA .NET Standard Stack]]></title>
        <id>https://github.com/advisories/GHSA-7wwr-h8cm-9jf7</id>
        <link href="https://github.com/advisories/GHSA-7wwr-h8cm-9jf7"/>
        <updated>2025-02-11T00:33:13.000Z</updated>
        <content type="html"><![CDATA[<p>Vulnerability in the OPC UA .NET Standard Stack before 1.5.374.158 allows an unauthorized attacker to bypass application authentication when using HTTPS endpoints.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42513">https://nvd.nist.gov/vuln/detail/CVE-2024-42513</a></li>
<li><a href="https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2024-42513.pdf">https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2024-42513.pdf</a></li>
<li><a href="https://github.com/OPCFoundation/UA-.NETStandard/tree/1.5.374.158">https://github.com/OPCFoundation/UA-.NETStandard/tree/1.5.374.158</a></li>
<li><a href="https://github.com/advisories/GHSA-7wwr-h8cm-9jf7">https://github.com/advisories/GHSA-7wwr-h8cm-9jf7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7wwr-h8cm-9jf7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T21:31:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OPCFoundation.NetStandard.Opc.Ua] Authorization Bypass in OPC UA .NET Standard Stack]]></title>
        <id>https://github.com/advisories/GHSA-qv5f-57gw-vx3h</id>
        <link href="https://github.com/advisories/GHSA-qv5f-57gw-vx3h"/>
        <updated>2025-02-11T00:33:09.000Z</updated>
        <content type="html"><![CDATA[<p>Vulnerability in the OPC UA .NET Standard Stack before 1.5.374.158 allows an unauthorized attacker to bypass application authentication when the deprecated Basic128Rsa15 security policy is enabled.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42512">https://nvd.nist.gov/vuln/detail/CVE-2024-42512</a></li>
<li><a href="https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2024-42512.pdf">https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2024-42512.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-qv5f-57gw-vx3h">https://github.com/advisories/GHSA-qv5f-57gw-vx3h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qv5f-57gw-vx3h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-02-10T21:31:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms.Infrastructure] Withdrawn Advisory: Umbraco Rich Text Display allows Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-572q-86rr-5vgq</id>
        <link href="https://github.com/advisories/GHSA-572q-86rr-5vgq"/>
        <updated>2025-02-13T16:44:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="withdrawn-advisory">Withdrawn Advisory</h1>
<p>This advisory has been withdrawn because the issue is a <a href="https://docs.umbraco.com/umbraco-cms/reference/security/serverside-sanitizing">documented security</a>. This link is maintained to preserve external references. For more information, see <a href="https://github.com/github/advisory-database/pull/5270">https://github.com/github/advisory-database/pull/5270</a>.</p>
<h1 id="original-advisory">Original Advisory</h1>
<p>A stored cross-site scripting (XSS) vulnerability in Umbraco CMS v14.3.1 allows attackers to execute arbitrary web scripts or HTML via a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-55488">https://nvd.nist.gov/vuln/detail/CVE-2024-55488</a></li>
<li><a href="https://www.nccgroup.com/us/research-blog/technical-advisory-cross-site-scripting-in-umbraco-rich-text-display">https://www.nccgroup.com/us/research-blog/technical-advisory-cross-site-scripting-in-umbraco-rich-text-display</a></li>
<li><a href="http://umbraco.com">http://umbraco.com</a></li>
<li><a href="https://github.com/umbraco/Umbraco-CMS/pull/17164">https://github.com/umbraco/Umbraco-CMS/pull/17164</a></li>
<li><a href="https://github.com/umbraco/Umbraco-CMS/releases/tag/release-15.0.0-rc1">https://github.com/umbraco/Umbraco-CMS/releases/tag/release-15.0.0-rc1</a></li>
<li><a href="https://github.com/github/advisory-database/pull/5270">https://github.com/github/advisory-database/pull/5270</a></li>
<li><a href="https://github.com/advisories/GHSA-572q-86rr-5vgq">https://github.com/advisories/GHSA-572q-86rr-5vgq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-572q-86rr-5vgq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-22T18:31:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tshock] TShock allows chat while not fully connected, possible ban evasion]]></title>
        <id>https://github.com/advisories/GHSA-f8mx-cwfh-7hr2</id>
        <link href="https://github.com/advisories/GHSA-f8mx-cwfh-7hr2"/>
        <updated>2025-02-03T16:02:37.000Z</updated>
        <content type="html"><![CDATA[<p>This issue was reported to TShock by @ohayo, but was found by the Discord user by the name of <code>sofurry.com</code>. Please note that this user <strong>does not own this domain on the internet, just the discord handle</strong>.</p>
<p>TShock overrides certain Terraria vanilla systems, including chat, and the connection handling, for its own purposes, like enforcing bans. When clients connect but do not complete the connection handshake (e.g., send message number 6), they can "exist" on the server, occupy a player slot, chat, and receive data from the server despite not being fully connected. Individuals who exploit this will be able to effectively harass the server, observe the server, and utilize server resources even if banned from the server.</p>
<p>For servers that operate with a proxy that strictly enforces the connection handshake/sequence, this is not an issue, but for smaller servers or servers running vanilla TShock this is an issue worth patching for.</p>
<p>PR body supplied by @ohayo (patch writer):</p>
<p>Terraria's standard server by default checks for bans upon the client sending the ConnectRequest packet, however, TShock instead chooses to check if the client connecting is banned upon the Request World Data packet.</p>
<p>A malicious client can easily just not send this packet, and still join the server even while being banned.
Also by not sending Request World Data, the malicious client is still able to receive all packets from the server &amp; even chat. </p>
<p>Other clients will not be notified of their join/leave but will be able to see them on the player list.
Leading to potential chat spam &amp; "spying" on packets of players within the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Pryaxis/TShock/security/advisories/GHSA-f8mx-cwfh-7hr2">https://github.com/Pryaxis/TShock/security/advisories/GHSA-f8mx-cwfh-7hr2</a></li>
<li><a href="https://github.com/Pryaxis/TShock/commit/134f80f5b8eac8929aa10f518c00970700d5913d">https://github.com/Pryaxis/TShock/commit/134f80f5b8eac8929aa10f518c00970700d5913d</a></li>
<li><a href="https://github.com/advisories/GHSA-f8mx-cwfh-7hr2">https://github.com/advisories/GHSA-f8mx-cwfh-7hr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8mx-cwfh-7hr2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-03T16:02:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Snowflake.Data] Snowflake.Data has weak temporary files permissions]]></title>
        <id>https://github.com/advisories/GHSA-2mqw-rq5m-8hc8</id>
        <link href="https://github.com/advisories/GHSA-2mqw-rq5m-8hc8"/>
        <updated>2025-01-29T22:00:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="issue">Issue</h3>
<p>Snowflake discovered and remediated a vulnerability in the Snowflake Connector for .NET in which files downloaded from stages are temporarily placed in a world-readable local directory, making them accessible to unauthorized users on the same machine.</p>
<p>This vulnerability affects versions 2.0.12 through 4.2.0 on Linux and macOS. Snowflake fixed the issue in version 4.3.0.</p>
<h3 id="vulnerability-details">Vulnerability Details</h3>
<p>When downloading files from stages, the Snowflake Connector for .NET uses the OS temporary directory to save files before copying them to the destination directory. The files in the temporary directory, which are removed once the write to the destination directory concludes, have world-readable permissions on Linux and macOS. This could allow any user on the local machine to access them during their limited lifetime.</p>
<h3 id="solution">Solution</h3>
<p>Snowflake released version 4.3.0 of the Snowflake Connector for .NET, which fixes this issue. We recommend users upgrade to version 4.3.0.</p>
<h3 id="additional-information">Additional Information</h3>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-net/security/advisories/GHSA-2mqw-rq5m-8hc8">https://github.com/snowflakedb/snowflake-connector-net/security/advisories/GHSA-2mqw-rq5m-8hc8</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-net/commit/89d91e8316ca213c5d184bcf469ed93977a5edf9">https://github.com/snowflakedb/snowflake-connector-net/commit/89d91e8316ca213c5d184bcf469ed93977a5edf9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24788">https://nvd.nist.gov/vuln/detail/CVE-2025-24788</a></li>
<li><a href="https://github.com/advisories/GHSA-2mqw-rq5m-8hc8">https://github.com/advisories/GHSA-2mqw-rq5m-8hc8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2mqw-rq5m-8hc8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-29T20:50:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[System.Linq.Dynamic.Core] Property reflection in System.Linq.Dynamic.Core]]></title>
        <id>https://github.com/advisories/GHSA-4cv2-4hjh-77rx</id>
        <link href="https://github.com/advisories/GHSA-4cv2-4hjh-77rx"/>
        <updated>2025-01-27T18:47:09.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in System.Linq.Dynamic.Core versions before v.1.6.0 allow remote access to properties on reflection types and static properties/fields.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51417">https://nvd.nist.gov/vuln/detail/CVE-2024-51417</a></li>
<li><a href="https://github.com/zzzprojects/System.Linq.Dynamic.Core/issues/867">https://github.com/zzzprojects/System.Linq.Dynamic.Core/issues/867</a></li>
<li><a href="https://dynamic-linq.net/expression-language#operators">https://dynamic-linq.net/expression-language#operators</a></li>
<li><a href="https://zzzprojects.com">https://zzzprojects.com</a></li>
<li><a href="https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/49b6cf0909cf3571e0d3580317675408300dbdac">https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/49b6cf0909cf3571e0d3580317675408300dbdac</a></li>
<li><a href="https://github.com/advisories/GHSA-4cv2-4hjh-77rx">https://github.com/advisories/GHSA-4cv2-4hjh-77rx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4cv2-4hjh-77rx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-01-21T21:30:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms] XSS/HTML Injection Vulnerability in Umbraco Preview Badge]]></title>
        <id>https://github.com/advisories/GHSA-69cg-w8vm-h229</id>
        <link href="https://github.com/advisories/GHSA-69cg-w8vm-h229"/>
        <updated>2025-02-19T17:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users are able to exploit an XSS vulnerability when viewing previewed content.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 10.8.8, 13.5.3, 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-69cg-w8vm-h229</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-10761">https://nvd.nist.gov/vuln/detail/CVE-2024-10761</a></li>
<li><a href="https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing">https://drive.google.com/file/d/1YoZgdlS3QT7Xu005j9RO-FFUT8RbB0Da/view?usp=sharing</a></li>
<li><a href="https://vuldb.com/?ctiid.282930">https://vuldb.com/?ctiid.282930</a></li>
<li><a href="https://vuldb.com/?id.282930">https://vuldb.com/?id.282930</a></li>
<li><a href="https://vuldb.com/?submit.427091">https://vuldb.com/?submit.427091</a></li>
<li><a href="https://github.com/advisories/GHSA-69cg-w8vm-h229">https://github.com/advisories/GHSA-69cg-w8vm-h229</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69cg-w8vm-h229</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:24:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms] Umbraco Allows User Enumeration Feasible Based On Management API Timing and Response Codes ]]></title>
        <id>https://github.com/advisories/GHSA-hmg4-wwm5-p999</id>
        <link href="https://github.com/advisories/GHSA-hmg4-wwm5-p999"/>
        <updated>2025-02-20T22:51:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Based on an analysis of response codes and timing of Umbraco 14+ management API responses, it's possible to determine whether an account exists.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-hmg4-wwm5-p999">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-hmg4-wwm5-p999</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24011">https://nvd.nist.gov/vuln/detail/CVE-2025-24011</a></li>
<li><a href="https://github.com/umbraco/Umbraco-CMS/commit/559c6c9f312df1d6eb1bde82c4b81c0896da6382">https://github.com/umbraco/Umbraco-CMS/commit/559c6c9f312df1d6eb1bde82c4b81c0896da6382</a></li>
<li><a href="https://github.com/umbraco/Umbraco-CMS/commit/839b6816f2ae3e5f54459a0f09dad6b17e2d1e07">https://github.com/umbraco/Umbraco-CMS/commit/839b6816f2ae3e5f54459a0f09dad6b17e2d1e07</a></li>
<li><a href="https://github.com/advisories/GHSA-hmg4-wwm5-p999">https://github.com/advisories/GHSA-hmg4-wwm5-p999</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hmg4-wwm5-p999</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:21:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Umbraco.Cms] Umbraco Allows User Enumeration Feasible Based On Management API Timing and Response Codes ]]></title>
        <id>https://github.com/advisories/GHSA-hmg4-wwm5-p999</id>
        <link href="https://github.com/advisories/GHSA-hmg4-wwm5-p999"/>
        <updated>2025-02-20T22:51:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Based on an analysis of response codes and timing of Umbraco 14+ management API responses, it's possible to determine whether an account exists.</p>
<h3 id="patches">Patches</h3>
<p>Will be patched in 14.3.2 and 15.1.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-hmg4-wwm5-p999">https://github.com/umbraco/Umbraco-CMS/security/advisories/GHSA-hmg4-wwm5-p999</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-24011">https://nvd.nist.gov/vuln/detail/CVE-2025-24011</a></li>
<li><a href="https://github.com/umbraco/Umbraco-CMS/commit/559c6c9f312df1d6eb1bde82c4b81c0896da6382">https://github.com/umbraco/Umbraco-CMS/commit/559c6c9f312df1d6eb1bde82c4b81c0896da6382</a></li>
<li><a href="https://github.com/umbraco/Umbraco-CMS/commit/839b6816f2ae3e5f54459a0f09dad6b17e2d1e07">https://github.com/umbraco/Umbraco-CMS/commit/839b6816f2ae3e5f54459a0f09dad6b17e2d1e07</a></li>
<li><a href="https://github.com/advisories/GHSA-hmg4-wwm5-p999">https://github.com/advisories/GHSA-hmg4-wwm5-p999</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hmg4-wwm5-p999</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-01-21T21:21:30.000Z</published>
    </entry>
</feed>