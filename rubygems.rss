<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2025-01-04T19:01:27.743Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[pwpush] Password Pusher Allows Session Token Interception Leading to Potential Hijacking]]></title>
        <id>https://github.com/advisories/GHSA-4fwj-m62q-pp47</id>
        <link href="https://github.com/advisories/GHSA-4fwj-m62q-pp47"/>
        <updated>2024-12-31T18:42:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been reported in Password Pusher where an attacker can copy the session cookie before a user logs out, potentially allowing session hijacking.</p>
<p>Although the session token is replaced and invalidated upon logout, if an attacker manages to capture the session cookie before this process, they can use the token to gain unauthorized access to the user's session until the token expires or is manually cleared.</p>
<p>This vulnerability hinges on the attacker's ability to access the session cookie during an active session, either through a man-in-the-middle attack, by exploiting another vulnerability like XSS, or via direct access to the victim's device.</p>
<h3 id="patches">Patches</h3>
<p>Although there is no direct resolution to this vulnerability, it is recommended to always use the latest version of Password Pusher to best mitigate risk.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If self-hosting, ensure Password Pusher is hosted exclusively over SSL connections to encrypt traffic and prevent session cookies from being intercepted in transit. Additionally, implement best practices in local security to safeguard user systems, browsers, and data against unauthorized access.</p>
<p>To further mitigate session hijacking risks, Password Pusher implements the following security measures:</p>
<ol>
<li><strong>Automatic Session Expiration</strong>: Sessions are automatically expired after 2 hours of inactivity, reducing the window for potential exploitation.</li>
<li><strong>Session Reset on Login and Logout</strong>: Sessions are fully reset both when a user logs in and logs out, ensuring that session tokens are not reusable post-logout. This practice invalidates old session tokens and issues new ones, minimizing the risk of session hijacking.</li>
<li><strong>Encrypted Cookies</strong>: Cookies are encrypted using the value of SECRET_KEY_BASE from the application's configuration. This encryption adds a layer of protection against tampering or reading the session cookie's contents if intercepted, although it doesn't prevent the cookie from being used if stolen.</li>
</ol>
<p><strong>Note</strong>: While these measures significantly enhance security, they are part of a broader security strategy.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://edgeguides.rubyonrails.org/security.html#session-hijacking">https://edgeguides.rubyonrails.org/security.html#session-hijacking</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thank you to <a href="https://www.ptsecurity.com/ww-en/">Positive Technologies</a> for reporting and working with me to bring this CVE to the community.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pglombardo/PasswordPusher/security/advisories/GHSA-4fwj-m62q-pp47">https://github.com/pglombardo/PasswordPusher/security/advisories/GHSA-4fwj-m62q-pp47</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-56733">https://nvd.nist.gov/vuln/detail/CVE-2024-56733</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pwpush/CVE-2024-56733.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pwpush/CVE-2024-56733.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-4fwj-m62q-pp47">https://github.com/advisories/GHSA-4fwj-m62q-pp47</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fwj-m62q-pp47</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-12-30T16:46:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Possible Content Security Policy bypass in Action Dispatch]]></title>
        <id>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</id>
        <link href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v"/>
        <updated>2024-12-11T21:18:30.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible Cross Site Scripting (XSS) vulnerability  in the <code>content_security_policy</code> helper in Action Pack.</p>
<h2 id="impact">Impact</h2>
<p>Applications which set Content-Security-Policy (CSP) headers dynamically from untrusted user input may be vulnerable to carefully crafted inputs being able to inject new directives into the CSP. This could lead to a bypass of the CSP and its protection against XSS and other attacks.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Applications can avoid setting CSP headers dynamically from untrusted input, or can validate/sanitize that input.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/ryotak">ryotak</a> for the report!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54133">https://nvd.nist.gov/vuln/detail/CVE-2024-54133</a></li>
<li><a href="https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49">https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49</a></li>
<li><a href="https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a">https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a</a></li>
<li><a href="https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542">https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542</a></li>
<li><a href="https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d">https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/advisories/GHSA-vfm5-rmrh-j26v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-10T22:42:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Possible Content Security Policy bypass in Action Dispatch]]></title>
        <id>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</id>
        <link href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v"/>
        <updated>2024-12-11T21:18:30.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible Cross Site Scripting (XSS) vulnerability  in the <code>content_security_policy</code> helper in Action Pack.</p>
<h2 id="impact">Impact</h2>
<p>Applications which set Content-Security-Policy (CSP) headers dynamically from untrusted user input may be vulnerable to carefully crafted inputs being able to inject new directives into the CSP. This could lead to a bypass of the CSP and its protection against XSS and other attacks.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Applications can avoid setting CSP headers dynamically from untrusted input, or can validate/sanitize that input.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/ryotak">ryotak</a> for the report!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54133">https://nvd.nist.gov/vuln/detail/CVE-2024-54133</a></li>
<li><a href="https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49">https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49</a></li>
<li><a href="https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a">https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a</a></li>
<li><a href="https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542">https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542</a></li>
<li><a href="https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d">https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/advisories/GHSA-vfm5-rmrh-j26v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-10T22:42:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Possible Content Security Policy bypass in Action Dispatch]]></title>
        <id>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</id>
        <link href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v"/>
        <updated>2024-12-11T21:18:30.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible Cross Site Scripting (XSS) vulnerability  in the <code>content_security_policy</code> helper in Action Pack.</p>
<h2 id="impact">Impact</h2>
<p>Applications which set Content-Security-Policy (CSP) headers dynamically from untrusted user input may be vulnerable to carefully crafted inputs being able to inject new directives into the CSP. This could lead to a bypass of the CSP and its protection against XSS and other attacks.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Applications can avoid setting CSP headers dynamically from untrusted input, or can validate/sanitize that input.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/ryotak">ryotak</a> for the report!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54133">https://nvd.nist.gov/vuln/detail/CVE-2024-54133</a></li>
<li><a href="https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49">https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49</a></li>
<li><a href="https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a">https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a</a></li>
<li><a href="https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542">https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542</a></li>
<li><a href="https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d">https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/advisories/GHSA-vfm5-rmrh-j26v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-10T22:42:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Possible Content Security Policy bypass in Action Dispatch]]></title>
        <id>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</id>
        <link href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v"/>
        <updated>2024-12-11T21:18:30.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible Cross Site Scripting (XSS) vulnerability  in the <code>content_security_policy</code> helper in Action Pack.</p>
<h2 id="impact">Impact</h2>
<p>Applications which set Content-Security-Policy (CSP) headers dynamically from untrusted user input may be vulnerable to carefully crafted inputs being able to inject new directives into the CSP. This could lead to a bypass of the CSP and its protection against XSS and other attacks.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Applications can avoid setting CSP headers dynamically from untrusted input, or can validate/sanitize that input.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/ryotak">ryotak</a> for the report!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/rails/rails/security/advisories/GHSA-vfm5-rmrh-j26v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-54133">https://nvd.nist.gov/vuln/detail/CVE-2024-54133</a></li>
<li><a href="https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49">https://github.com/rails/rails/commit/2e3f41e4538b9ca1044357f6644f037bbb7c6c49</a></li>
<li><a href="https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a">https://github.com/rails/rails/commit/3da2479cfe1e00177114b17e496213c40d286b3a</a></li>
<li><a href="https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542">https://github.com/rails/rails/commit/5558e72f22fc69c1c407b31ac5fb3b4ce087b542</a></li>
<li><a href="https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d">https://github.com/rails/rails/commit/cb16a3bb515b5d769f73926d9757270ace691f1d</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-54133.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vfm5-rmrh-j26v">https://github.com/advisories/GHSA-vfm5-rmrh-j26v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfm5-rmrh-j26v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-10T22:42:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] rails-html-sanitizer has XSS vulnerability with certain configurations]]></title>
        <id>https://github.com/advisories/GHSA-rxv5-gxqc-xx8g</id>
        <link href="https://github.com/advisories/GHSA-rxv5-gxqc-xx8g"/>
        <updated>2024-12-03T18:50:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails &gt;= 7.1.0.</p>
<ul>
<li>Versions affected: 1.6.0</li>
<li>Not affected: &lt; 1.6.0</li>
<li>Fixed versions: 1.6.1</li>
</ul>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in the following way:</p>
<ul>
<li>the "noscript" element is explicitly allowed</li>
</ul>
<p>Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information on these configuration options.</p>
<p>The default configuration is to disallow all of these elements. Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:</p>
<ol>
<li>using application configuration to configure Action View sanitizers' allowed tags:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["noscript"]
</code></pre>
<p>  see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>
<ol start="2">
<li>using a <code>:tags</code> option to the Action View helper <code>sanitize</code>:</li>
</ol>
<pre><code>&lt;%= sanitize @comment.body, tags: ["noscript"] %&gt;
</code></pre>
<p>  see <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a></p>
<ol start="3">
<li>setting Rails::HTML5::SafeListSanitizer class attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::HTML5::SafeListSanitizer.allowed_tags = ["noscript"]
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="4">
<li>using a <code>:tags</code> options to the Rails::HTML5::SafeListSanitizer instance method <code>sanitize</code>:</li>
</ol>
<pre><code class="language-ruby"># instance-level option
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["noscript"])
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="5">
<li>setting ActionText::ContentHelper module attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby">ActionText::ContentHelper.allowed_tags = ["noscript"]
</code></pre>
<p>All users overriding the allowed tags by any of the above mechanisms to include "noscript" should either upgrade or use one of the workarounds.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Any one of the following actions will work around this issue:</p>
<ul>
<li>Remove "noscript" from the overridden allowed tags,</li>
<li>Or, downgrade sanitization to HTML4 (see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information).</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li>Original report: <a href="https://hackerone.com/reports/2509647">https://hackerone.com/reports/2509647</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by So Sakaguchi (<a href="https://hackerone.com/mokusou">mokusou</a>) and <a href="https://hackerone.com/taise">taise</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-rxv5-gxqc-xx8g">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-rxv5-gxqc-xx8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53989">https://nvd.nist.gov/vuln/detail/CVE-2024-53989</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/16251735e36ebdc302e2f90f2a39cad56879414f">https://github.com/rails/rails-html-sanitizer/commit/16251735e36ebdc302e2f90f2a39cad56879414f</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53989.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53989.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-rxv5-gxqc-xx8g">https://github.com/advisories/GHSA-rxv5-gxqc-xx8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rxv5-gxqc-xx8g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-02T22:18:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] rails-html-sanitizer has XSS vulnerability with certain configurations]]></title>
        <id>https://github.com/advisories/GHSA-2x5m-9ch4-qgrr</id>
        <link href="https://github.com/advisories/GHSA-2x5m-9ch4-qgrr"/>
        <updated>2024-12-03T18:50:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails &gt;= 7.1.0.</p>
<ul>
<li>Versions affected: 1.6.0</li>
<li>Not affected: &lt; 1.6.0</li>
<li>Fixed versions: 1.6.1</li>
</ul>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in the following way:</p>
<ul>
<li>the "style" element is explicitly allowed</li>
<li>the "svg" or "math" element is not allowed</li>
</ul>
<p>Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information on these configuration options.</p>
<p>The default configuration is to disallow all of these elements. Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:</p>
<ol>
<li>using application configuration to configure Action View sanitizers' allowed tags:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["style"]
</code></pre>
<p>  see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>
<ol start="2">
<li>using a <code>:tags</code> option to the Action View helper <code>sanitize</code>:</li>
</ol>
<pre><code>&lt;%= sanitize @comment.body, tags: ["style"] %&gt;
</code></pre>
<p>  see <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a></p>
<ol start="3">
<li>setting Rails::HTML5::SafeListSanitizer class attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::HTML5::SafeListSanitizer.allowed_tags = ["style"]
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="4">
<li>using a <code>:tags</code> options to the Rails::HTML5::SafeListSanitizer instance method <code>sanitize</code>:</li>
</ol>
<pre><code class="language-ruby"># instance-level option
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["style"])
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="5">
<li>setting ActionText::ContentHelper module attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby">ActionText::ContentHelper.allowed_tags = ["style"]
</code></pre>
<p>All users overriding the allowed tags by any of the above mechanisms to include "style" and omit "svg" or "math" should either upgrade or use one of the workarounds.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Any one of the following actions will work around this issue:</p>
<ul>
<li>Remove "style" from the overridden allowed tags,</li>
<li>Or, downgrade sanitization to HTML4 (see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information).</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li>Original report: <a href="https://hackerone.com/reports/2519936">https://hackerone.com/reports/2519936</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by So Sakaguchi (<a href="https://hackerone.com/mokusou">mokusou</a>) and <a href="https://hackerone.com/taise">taise</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-2x5m-9ch4-qgrr">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-2x5m-9ch4-qgrr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53987">https://nvd.nist.gov/vuln/detail/CVE-2024-53987</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/f02ffbb8465e73920b6de0da940f5530f855965e">https://github.com/rails/rails-html-sanitizer/commit/f02ffbb8465e73920b6de0da940f5530f855965e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53987.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53987.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2x5m-9ch4-qgrr">https://github.com/advisories/GHSA-2x5m-9ch4-qgrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x5m-9ch4-qgrr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-02T21:48:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] rails-html-sanitizer has XSS vulnerability with certain configurations]]></title>
        <id>https://github.com/advisories/GHSA-cfjx-w229-hgx5</id>
        <link href="https://github.com/advisories/GHSA-cfjx-w229-hgx5"/>
        <updated>2024-12-03T18:50:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails &gt;= 7.1.0.</p>
<ul>
<li>Versions affected: 1.6.0</li>
<li>Not affected: &lt; 1.6.0</li>
<li>Fixed versions: 1.6.1</li>
</ul>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in the following way:</p>
<ul>
<li>the "math", "mtext", "table", and "style" elements are allowed</li>
<li>and either "mglyph" or "malignmark" are allowed</li>
</ul>
<p>Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information on these configuration options.</p>
<p>The default configuration is to disallow all of these elements except for "table". Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:</p>
<ol>
<li>using application configuration to configure Action View sanitizers' allowed tags:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
# or
config.action_view.sanitized_allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
</code></pre>
<p>  see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>
<ol start="2">
<li>using a <code>:tags</code> option to the Action View helper <code>sanitize</code>:</li>
</ol>
<pre><code>&lt;%= sanitize @comment.body, tags: ["math", "mtext", "table", "style", "mglyph"] %&gt;
&lt;%# or %&gt;
&lt;%= sanitize @comment.body, tags: ["math", "mtext", "table", "style", "malignmark"] %&gt;
</code></pre>
<p>  see <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a></p>
<ol start="3">
<li>setting Rails::HTML5::SafeListSanitizer class attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
# or
Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="4">
<li>using a <code>:tags</code> options to the Rails::HTML5::SafeListSanitizer instance method <code>sanitize</code>:</li>
</ol>
<pre><code class="language-ruby"># instance-level option
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "mtext", "table", "style", "mglyph"])
# or
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "mtext", "table", "style", "malignmark"])
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="5">
<li>setting ActionText::ContentHelper module attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby">ActionText::ContentHelper.allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
# or
ActionText::ContentHelper.allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
</code></pre>
<p>All users overriding the allowed tags by any of the above mechanisms to include ("math" and "mtext" and "table" and "style" and ("mglyph" or "malignmark")) should either upgrade or use one of the workarounds.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Any one of the following actions will work around this issue:</p>
<ul>
<li>Remove "mglyph" and "malignmark" from the overridden allowed tags,</li>
<li>Or, downgrade sanitization to HTML4 (see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information).</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li>Original report: <a href="https://hackerone.com/reports/2519936">https://hackerone.com/reports/2519936</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by So Sakaguchi (<a href="https://hackerone.com/mokusou">mokusou</a>) and <a href="https://hackerone.com/taise">taise</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-cfjx-w229-hgx5">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-cfjx-w229-hgx5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53988">https://nvd.nist.gov/vuln/detail/CVE-2024-53988</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/a0a3e8b76b696446ffc6bffcff3bc7b7c6393c72">https://github.com/rails/rails-html-sanitizer/commit/a0a3e8b76b696446ffc6bffcff3bc7b7c6393c72</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53988.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53988.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cfjx-w229-hgx5">https://github.com/advisories/GHSA-cfjx-w229-hgx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfjx-w229-hgx5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-02T21:48:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] rails-html-sanitizer has XSS vulnerability with certain configurations]]></title>
        <id>https://github.com/advisories/GHSA-638j-pmjw-jq48</id>
        <link href="https://github.com/advisories/GHSA-638j-pmjw-jq48"/>
        <updated>2024-12-03T18:50:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails &gt;= 7.1.0.</p>
<ul>
<li>Versions affected: 1.6.0</li>
<li>Not affected: &lt; 1.6.0</li>
<li>Fixed versions: 1.6.1</li>
</ul>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in the following way:</p>
<ul>
<li>the "math" and "style" elements are both explicitly allowed</li>
</ul>
<p>Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information on these configuration options.</p>
<p>The default configuration is to disallow these elements. Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:</p>
<ol>
<li>using application configuration to configure Action View sanitizers' allowed tags:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["math", "style"]
</code></pre>
<p>  see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>
<ol start="2">
<li>using a <code>:tags</code> option to the Action View helper <code>sanitize</code>:</li>
</ol>
<pre><code>&lt;%= sanitize @comment.body, tags: ["math", "style"] %&gt;
</code></pre>
<p>  see <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a></p>
<ol start="3">
<li>setting Rails::HTML5::SafeListSanitizer class attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "style"]
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="4">
<li>using a <code>:tags</code> options to the Rails::HTML5::SafeListSanitizer instance method <code>sanitize</code>:</li>
</ol>
<pre><code class="language-ruby"># instance-level option
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "style"])
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="5">
<li>setting ActionText::ContentHelper module attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby">ActionText::ContentHelper.allowed_tags = ["math", "style"]
</code></pre>
<p>All users overriding the allowed tags by any of the above mechanisms to include both "math" and "style" should either upgrade or use one of the workarounds.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Any one of the following actions will work around this issue:</p>
<ul>
<li>Remove "math" or "style" from the overridden allowed tags,</li>
<li>Or, downgrade sanitization to HTML4 (see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information).</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li>Original report: <a href="https://hackerone.com/reports/2519941">https://hackerone.com/reports/2519941</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by So Sakaguchi (<a href="https://hackerone.com/mokusou">mokusou</a>) and <a href="https://hackerone.com/taise">taise</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-638j-pmjw-jq48">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-638j-pmjw-jq48</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53986">https://nvd.nist.gov/vuln/detail/CVE-2024-53986</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/f02ffbb8465e73920b6de0da940f5530f855965e">https://github.com/rails/rails-html-sanitizer/commit/f02ffbb8465e73920b6de0da940f5530f855965e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53986.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53986.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-638j-pmjw-jq48">https://github.com/advisories/GHSA-638j-pmjw-jq48</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-638j-pmjw-jq48</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-02T21:48:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] rails-html-sanitize has XSS vulnerability with certain configurations]]></title>
        <id>https://github.com/advisories/GHSA-w8gc-x259-rc7x</id>
        <link href="https://github.com/advisories/GHSA-w8gc-x259-rc7x"/>
        <updated>2024-12-03T18:50:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails &gt;= 7.1.0 and Nokogiri &lt; 1.15.7, or 1.16.x &lt; 1.16.8.</p>
<ul>
<li>Versions affected: 1.6.0</li>
<li>Not affected: &lt; 1.6.0</li>
<li>Fixed versions: 1.6.1</li>
</ul>
<p>Please note that the fix in v1.6.1 is to update the dependency on Nokogiri to 1.15.7 or &gt;= 1.16.8.</p>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in either of the following ways:</p>
<ul>
<li>allow both "math" and "style" elements</li>
<li>or allow both "svg" and "style" elements</li>
</ul>
<p>Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information on these configuration options.</p>
<p>Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:</p>
<ol>
<li>using application configuration to configure Action View sanitizers' allowed tags:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["math", "style"]
# or
config.action_view.sanitized_allowed_tags = ["svg", "style"]
</code></pre>
<p>  see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>
<ol start="2">
<li>using a <code>:tags</code> option to the Action View helper <code>sanitize</code>:</li>
</ol>
<pre><code>&lt;%= sanitize @comment.body, tags: ["math", "style"] %&gt;
&lt;%# or %&gt;
&lt;%= sanitize @comment.body, tags: ["svg", "style"] %&gt;
</code></pre>
<p>  see <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a></p>
<ol start="3">
<li>setting Rails::HTML5::SafeListSanitizer class attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "style"]
# or
Rails::HTML5::SafeListSanitizer.allowed_tags = ["svg", "style"]
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="4">
<li>using a <code>:tags</code> options to the Rails::HTML5::SafeListSanitizer instance method <code>sanitize</code>:</li>
</ol>
<pre><code class="language-ruby"># instance-level option
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "style"])
# or
Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["svg", "style"])
</code></pre>
<p>  (note that this class may also be referenced as <code>Rails::Html::SafeListSanitizer</code>)</p>
<ol start="5">
<li>setting ActionText::ContentHelper module attribute <code>allowed_tags</code>:</li>
</ol>
<pre><code class="language-ruby">ActionText::ContentHelper.allowed_tags = ["math", "style"]
# or
ActionText::ContentHelper.allowed_tags = ["svg", "style"]
</code></pre>
<p>All users overriding the allowed tags by any of the above mechanisms to include (("math" or "svg") and "style") should either upgrade or use one of the workarounds.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Any one of the following actions will work around this issue:</p>
<ul>
<li>Remove "style" from the overridden allowed tags,</li>
<li>Or, remove "math" and "svg" from the overridden allowed tags,</li>
<li>Or, downgrade sanitization to HTML4 (see documentation for <a href="https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor"><code>config.action_view.sanitizer_vendor</code></a> and <a href="https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor"><code>config.action_text.sanitizer_vendor</code></a> for more information)</li>
<li>Or, independently upgrade Nokogiri to v1.15.7 or &gt;= 1.16.8.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li>Original report: <a href="https://hackerone.com/reports/2503220">https://hackerone.com/reports/2503220</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by So Sakaguchi (<a href="https://hackerone.com/mokusou">mokusou</a>) and <a href="https://hackerone.com/taise">taise</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-w8gc-x259-rc7x">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-w8gc-x259-rc7x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-53985">https://nvd.nist.gov/vuln/detail/CVE-2024-53985</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/b0220b8850d52199a15f83c472d175a4122dd7b1">https://github.com/rails/rails-html-sanitizer/commit/b0220b8850d52199a15f83c472d175a4122dd7b1</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/cd18b0ef00aad1d4a9e1c5d860cd23f80f63c505">https://github.com/rails/rails-html-sanitizer/commit/cd18b0ef00aad1d4a9e1c5d860cd23f80f63c505</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53985.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2024-53985.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-w8gc-x259-rc7x">https://github.com/advisories/GHSA-w8gc-x259-rc7x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w8gc-x259-rc7x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-12-02T21:48:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pwpush] Password Pusher rate limiter can be bypassed by forging proxy headers]]></title>
        <id>https://github.com/advisories/GHSA-ffp2-8p2h-4m5j</id>
        <link href="https://github.com/advisories/GHSA-ffp2-8p2h-4m5j"/>
        <updated>2024-11-26T18:59:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Password Pusher comes with a configurable rate limiter.  In versions prior to <a href="https://github.com/pglombardo/PasswordPusher/releases/tag/v1.49.0">v1.49.0</a>, the rate limiter could be bypassed by forging proxy headers allowing bad actors to send unlimited traffic to the site potentially causing a denial of service.</p>
<p>Additionally, with the ability to bypass rate limiting, it also allows attackers to more easily execute brute force attacks.</p>
<h3 id="patches">Patches</h3>
<p>In <a href="https://github.com/pglombardo/PasswordPusher/releases/tag/v1.49.0">v1.49.0</a>, a fix was implemented to only authorize proxies on local IPs which resolves this issue.</p>
<p>If you are running a remote proxy, please see <a href="https://docs.pwpush.com/docs/proxies/#trusted-proxies">this documentation</a> on how to authorize the IP address of your remote proxy.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It is highly suggested to upgrade to at least <a href="https://github.com/pglombardo/PasswordPusher/releases/tag/v1.49.0">v1.49.0</a> to mitigate this risk.</p>
<p>If for some reason you cannot immediately upgrade, the alternative is that you can add rules to your proxy and/or firewall to not accept external proxy headers such as <code>X-Forwarded-*</code> from clients.</p>
<h3 id="references">References</h3>
<p>The new settings are <a href="https://docs.pwpush.com/docs/proxies/#trusted-proxies">configurable to authorize remote proxies</a>.</p>
<h3 id="credits">Credits</h3>
<p>Thank you to <a href="https://www.ptsecurity.com/ww-en/">Positive Technologies</a> for reporting and working with me to bring this CVE to the community with the associated fix.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pglombardo/PasswordPusher/security/advisories/GHSA-ffp2-8p2h-4m5j">https://github.com/pglombardo/PasswordPusher/security/advisories/GHSA-ffp2-8p2h-4m5j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-52796">https://nvd.nist.gov/vuln/detail/CVE-2024-52796</a></li>
<li><a href="https://docs.pwpush.com/docs/proxies/#trusted-proxies">https://docs.pwpush.com/docs/proxies/#trusted-proxies</a></li>
<li><a href="https://github.com/pglombardo/PasswordPusher/releases/tag/v1.49.0">https://github.com/pglombardo/PasswordPusher/releases/tag/v1.49.0</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pwpush/CVE-2024-52796.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pwpush/CVE-2024-52796.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-ffp2-8p2h-4m5j">https://github.com/advisories/GHSA-ffp2-8p2h-4m5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ffp2-8p2h-4m5j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-11-20T18:24:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sinatra] Sinatra vulnerable to Reliance on Untrusted Inputs in a Security Decision]]></title>
        <id>https://github.com/advisories/GHSA-hxx2-7vcw-mqr3</id>
        <link href="https://github.com/advisories/GHSA-hxx2-7vcw-mqr3"/>
        <updated>2024-11-18T20:17:33.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package sinatra from 0.0.0 are vulnerable to Reliance on Untrusted Inputs in a Security Decision via the X-Forwarded-Host (XFH) header. When making a request to a method with redirect applied, it is possible to trigger an Open Redirect Attack by inserting an arbitrary address into this header. If used for caching purposes, such as with servers like Nginx, or as a reverse proxy, without handling the X-Forwarded-Host header, attackers can potentially exploit Cache Poisoning or Routing-based SSRF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21510">https://nvd.nist.gov/vuln/detail/CVE-2024-21510</a></li>
<li><a href="https://github.com/sinatra/sinatra/pull/2010">https://github.com/sinatra/sinatra/pull/2010</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUBY-SINATRA-6483832">https://security.snyk.io/vuln/SNYK-RUBY-SINATRA-6483832</a></li>
<li><a href="https://github.com/sinatra/sinatra/blob/b626e2d82c23b4fde0b51782fd32ca27ccde1d1a/lib/sinatra/base.rb#L319">https://github.com/sinatra/sinatra/blob/b626e2d82c23b4fde0b51782fd32ca27ccde1d1a/lib/sinatra/base.rb#L319</a></li>
<li><a href="https://github.com/sinatra/sinatra/blob/b626e2d82c23b4fde0b51782fd32ca27ccde1d1a/lib/sinatra/base.rb#L323C1-L343C17">https://github.com/sinatra/sinatra/blob/b626e2d82c23b4fde0b51782fd32ca27ccde1d1a/lib/sinatra/base.rb#L323C1-L343C17</a></li>
<li><a href="https://github.com/advisories/GHSA-hxx2-7vcw-mqr3">https://github.com/advisories/GHSA-hxx2-7vcw-mqr3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sinatra/CVE-2024-21510.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sinatra/CVE-2024-21510.yml</a></li>
<li><a href="https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#410--2024-11-18">https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#410--2024-11-18</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxx2-7vcw-mqr3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-01T06:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[decidim-meetings] decidim-meetings Cross-site scripting vulnerability in the online or hybrid meeting embeds]]></title>
        <id>https://github.com/advisories/GHSA-j4h6-gcj7-7v9v</id>
        <link href="https://github.com/advisories/GHSA-j4h6-gcj7-7v9v"/>
        <updated>2024-11-13T18:58:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The meeting embeds feature used in the online or hybrid meetings is subject to potential XSS attack through a malformed URL.</p>
<h3 id="patches">Patches</h3>
<p>Not available</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable the creation of meetings by participants in the meeting component.</p>
<h3 id="references">References</h3>
<p>OWASP ASVS v4.0.3-5.1.3</p>
<h3 id="credits">Credits</h3>
<p>This issue was discovered in a security audit organized by mitgestalten Partizipationsbüro against Decidim. The security audit was implemented by the Austrian Institute of Technology.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/decidim/decidim/security/advisories/GHSA-j4h6-gcj7-7v9v">https://github.com/decidim/decidim/security/advisories/GHSA-j4h6-gcj7-7v9v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45594">https://nvd.nist.gov/vuln/detail/CVE-2024-45594</a></li>
<li><a href="https://github.com/advisories/GHSA-j4h6-gcj7-7v9v">https://github.com/advisories/GHSA-j4h6-gcj7-7v9v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j4h6-gcj7-7v9v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-11-13T17:24:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[decidim-decidim_awesome] Decidim-Awesome has SQL injection in AdminAccountability]]></title>
        <id>https://github.com/advisories/GHSA-cxwf-qc32-375f</id>
        <link href="https://github.com/advisories/GHSA-cxwf-qc32-375f"/>
        <updated>2024-11-13T23:24:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability-type">Vulnerability type:</h2>
<p>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</p>
<h2 id="vendor">Vendor:</h2>
<p>Decidim International Community Environment</p>
<h3 id="has-vendor-conﬁrmed">Has vendor conﬁrmed:</h3>
<p>Yes</p>
<h3 id="attack-type">Attack type:</h3>
<p>Remote</p>
<h3 id="impact">Impact:</h3>
<p>Code Execution
Escalation of Privileges
Information Disclosure</p>
<h3 id="aﬀected-component">Aﬀected component:</h3>
<p>A raw sql-statement that uses an interpolated variable exists in the admin_role_actions method of the
<code>papertrail/version-model(app/models/decidim/decidim_awesome/paper_trail_version.rb</code>).</p>
<h3 id="attack-vector">Attack vector:</h3>
<p>An attacker with admin permissions could manipulate database queries in order to read out the database,
read ﬁles from the ﬁlesystem, write ﬁles from the ﬁlesystem. In the worst case, this could lead to remote code
execution on the server.
Description of the vulnerability for use in the CVE [ℹ] (<a href="https://cveproject.github.io/docs/content/key-details-">https://cveproject.github.io/docs/content/key-details-</a>
phrasing.pdf) : An improper neutralization of special elements used in an SQL command in the <code>papertrail/version- model</code> of the decidim_awesome-module &lt;= v0.11.1 (&gt; 0.9.0) allows an authenticated admin user to manipulate sql queries
to disclose information, read and write files or execute commands.</p>
<h3 id="discoverer-credits">Discoverer Credits:</h3>
<p>Wolfgang Hotwagner</p>
<h3 id="references">References:</h3>
<p><a href="https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability/">https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability/</a>
<a href="https://portswigger.net/web-security/sql-injection">https://portswigger.net/web-security/sql-injection</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/decidim-ice/decidim-module-decidim_awesome/security/advisories/GHSA-cxwf-qc32-375f">https://github.com/decidim-ice/decidim-module-decidim_awesome/security/advisories/GHSA-cxwf-qc32-375f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43415">https://nvd.nist.gov/vuln/detail/CVE-2024-43415</a></li>
<li><a href="https://github.com/decidim-ice/decidim-module-decidim_awesome/commit/84374037d34a3ac80dc18406834169c65869f11b">https://github.com/decidim-ice/decidim-module-decidim_awesome/commit/84374037d34a3ac80dc18406834169c65869f11b</a></li>
<li><a href="https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability">https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-decidim_awesome/CVE-2024-43415.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-decidim_awesome/CVE-2024-43415.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cxwf-qc32-375f">https://github.com/advisories/GHSA-cxwf-qc32-375f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxwf-qc32-375f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-12T19:52:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[decidim-decidim_awesome] Decidim-Awesome has SQL injection in AdminAccountability]]></title>
        <id>https://github.com/advisories/GHSA-cxwf-qc32-375f</id>
        <link href="https://github.com/advisories/GHSA-cxwf-qc32-375f"/>
        <updated>2024-11-13T23:24:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vulnerability-type">Vulnerability type:</h2>
<p>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</p>
<h2 id="vendor">Vendor:</h2>
<p>Decidim International Community Environment</p>
<h3 id="has-vendor-conﬁrmed">Has vendor conﬁrmed:</h3>
<p>Yes</p>
<h3 id="attack-type">Attack type:</h3>
<p>Remote</p>
<h3 id="impact">Impact:</h3>
<p>Code Execution
Escalation of Privileges
Information Disclosure</p>
<h3 id="aﬀected-component">Aﬀected component:</h3>
<p>A raw sql-statement that uses an interpolated variable exists in the admin_role_actions method of the
<code>papertrail/version-model(app/models/decidim/decidim_awesome/paper_trail_version.rb</code>).</p>
<h3 id="attack-vector">Attack vector:</h3>
<p>An attacker with admin permissions could manipulate database queries in order to read out the database,
read ﬁles from the ﬁlesystem, write ﬁles from the ﬁlesystem. In the worst case, this could lead to remote code
execution on the server.
Description of the vulnerability for use in the CVE [ℹ] (<a href="https://cveproject.github.io/docs/content/key-details-">https://cveproject.github.io/docs/content/key-details-</a>
phrasing.pdf) : An improper neutralization of special elements used in an SQL command in the <code>papertrail/version- model</code> of the decidim_awesome-module &lt;= v0.11.1 (&gt; 0.9.0) allows an authenticated admin user to manipulate sql queries
to disclose information, read and write files or execute commands.</p>
<h3 id="discoverer-credits">Discoverer Credits:</h3>
<p>Wolfgang Hotwagner</p>
<h3 id="references">References:</h3>
<p><a href="https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability/">https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability/</a>
<a href="https://portswigger.net/web-security/sql-injection">https://portswigger.net/web-security/sql-injection</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/decidim-ice/decidim-module-decidim_awesome/security/advisories/GHSA-cxwf-qc32-375f">https://github.com/decidim-ice/decidim-module-decidim_awesome/security/advisories/GHSA-cxwf-qc32-375f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43415">https://nvd.nist.gov/vuln/detail/CVE-2024-43415</a></li>
<li><a href="https://github.com/decidim-ice/decidim-module-decidim_awesome/commit/84374037d34a3ac80dc18406834169c65869f11b">https://github.com/decidim-ice/decidim-module-decidim_awesome/commit/84374037d34a3ac80dc18406834169c65869f11b</a></li>
<li><a href="https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability">https://pentest.ait.ac.at/security-advisory/decidim-awesome-sql-injection-in-adminaccountability</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-decidim_awesome/CVE-2024-43415.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-decidim_awesome/CVE-2024-43415.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cxwf-qc32-375f">https://github.com/advisories/GHSA-cxwf-qc32-375f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxwf-qc32-375f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-11-12T19:52:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mpxj] MPXJ has a Potential Path Traversal Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-j945-c44v-97g6</id>
        <link href="https://github.com/advisories/GHSA-j945-c44v-97g6"/>
        <updated>2024-10-30T14:35:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The patch for the historical vulnerability CVE-2020-35460 in MPXJ is incomplete as there is still a possibility that a malicious path could be constructed which would not be picked up by the original fix and allow files to be written to arbitrary locations.</p>
<h3 id="patches">Patches</h3>
<p>The issue is addressed in MPXJ version 13.5.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not pass zip files to MPXJ.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credits">Credits</h3>
<p>Issue report and patch provided by yyjLF and sprinkle</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/joniles/mpxj/security/advisories/GHSA-j945-c44v-97g6">https://github.com/joniles/mpxj/security/advisories/GHSA-j945-c44v-97g6</a></li>
<li><a href="https://github.com/joniles/mpxj/commit/8002802890dfdc8bc74259f37e053e15b827eea0">https://github.com/joniles/mpxj/commit/8002802890dfdc8bc74259f37e053e15b827eea0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49771">https://nvd.nist.gov/vuln/detail/CVE-2024-49771</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/mpxj/CVE-2024-49771.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/mpxj/CVE-2024-49771.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-j945-c44v-97g6">https://github.com/advisories/GHSA-j945-c44v-97g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j945-c44v-97g6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-28T18:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jquery-ui-rails] jQuery UI vulnerable to XSS when refreshing a checkboxradio with an HTML-like initial text label]]></title>
        <id>https://github.com/advisories/GHSA-h6gj-6jjq-h8g9</id>
        <link href="https://github.com/advisories/GHSA-h6gj-6jjq-h8g9"/>
        <updated>2024-10-28T18:16:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Initializing a checkboxradio widget on an input enclosed within a label makes that parent label contents considered as the input label. If you call <code>.checkboxradio( "refresh" )</code> on such a widget and the initial HTML contained encoded HTML entities, they will erroneously get decoded. This can lead to potentially executing JavaScript code.</p>
<p>For example, starting with the following initial secure HTML:</p>
<pre><code class="language-html">&lt;label&gt;
    &lt;input id="test-input"&gt;
    &amp;lt;img src=x onerror="alert(1)"&amp;gt;
&lt;/label&gt;
</code></pre>
<p>and calling:</p>
<pre><code class="language-js">$( "#test-input" ).checkboxradio();
$( "#test-input" ).checkboxradio( "refresh" );
</code></pre>
<p>will turn the initial HTML into:</p>
<pre><code class="language-html">&lt;label&gt;
    &lt;!-- some jQuery UI elements --&gt;
    &lt;input id="test-input"&gt;
    &lt;img src=x onerror="alert(1)"&gt;
&lt;/label&gt;
</code></pre>
<p>and the alert will get executed.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been patched in jQuery UI 1.13.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To remediate the issue, if you can change the initial HTML, you can wrap all the non-input contents of the <code>label</code> in a <code>span</code>:</p>
<pre><code class="language-html">&lt;label&gt;
    &lt;input id="test-input"&gt;
    &lt;span&gt;&amp;lt;img src=x onerror="alert(1)"&amp;gt;&lt;/span&gt;
&lt;/label&gt;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://blog.jqueryui.com/2022/07/jquery-ui-1-13-2-released/">https://blog.jqueryui.com/2022/07/jquery-ui-1-13-2-released/</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, search for a relevant issue in <a href="https://github.com/jquery/jquery-ui/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc">the jQuery UI repo</a>. If you don't find an answer, open a new issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9">https://github.com/jquery/jquery-ui/security/advisories/GHSA-h6gj-6jjq-h8g9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31160">https://nvd.nist.gov/vuln/detail/CVE-2022-31160</a></li>
<li><a href="https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9">https://github.com/jquery/jquery-ui/commit/8cc5bae1caa1fcf96bf5862c5646c787020ba3f9</a></li>
<li><a href="https://www.drupal.org/sa-contrib-2022-052">https://www.drupal.org/sa-contrib-2022-052</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00015.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00015.html</a></li>
<li><a href="https://blog.jqueryui.com/2022/07/jquery-ui-1-13-2-released">https://blog.jqueryui.com/2022/07/jquery-ui-1-13-2-released</a></li>
<li><a href="https://github.com/jquery-ui-rails/jquery-ui-rails/blob/master/VERSIONS.md">https://github.com/jquery-ui-rails/jquery-ui-rails/blob/master/VERSIONS.md</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6XBR3G3JR5ZIOJDO4224M3INXDS2VFDD">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6XBR3G3JR5ZIOJDO4224M3INXDS2VFDD</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J5LGNTICB5BRFAG3DHVVELS6H3CZSQMO">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J5LGNTICB5BRFAG3DHVVELS6H3CZSQMO</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QB2FJQXCNHO32VGVOC6DY6IPGVE4VDU6">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QB2FJQXCNHO32VGVOC6DY6IPGVE4VDU6</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220909-0007">https://security.netapp.com/advisory/ntap-20220909-0007</a></li>
<li><a href="https://github.com/advisories/GHSA-h6gj-6jjq-h8g9">https://github.com/advisories/GHSA-h6gj-6jjq-h8g9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6gj-6jjq-h8g9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-07-18T17:07:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rexml] REXML ReDoS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2rxp-v6pw-ch6m</id>
        <link href="https://github.com/advisories/GHSA-2rxp-v6pw-ch6m"/>
        <updated>2024-12-27T18:30:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The REXML gem before 3.3.9 has a ReDoS vulnerability when it parses an XML that has many digits between <code>&amp;#</code> and <code>x...;</code> in a hex numeric character reference (<code>&amp;#x...;</code>).</p>
<p>This does not happen with Ruby 3.2 or later. Ruby 3.1 is the only affected maintained Ruby. Note that Ruby 3.1 will reach EOL on 2025-03.</p>
<h3 id="patches">Patches</h3>
<p>The REXML gem 3.3.9 or later include the patch to fix the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Use Ruby 3.2 or later instead of Ruby 3.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.ruby-lang.org/en/news/2024/10/28/redos-rexml-cve-2024-49761/">https://www.ruby-lang.org/en/news/2024/10/28/redos-rexml-cve-2024-49761/</a>: An announce on <a href="http://www.ruby-lang.org">www.ruby-lang.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ruby/rexml/security/advisories/GHSA-2rxp-v6pw-ch6m">https://github.com/ruby/rexml/security/advisories/GHSA-2rxp-v6pw-ch6m</a></li>
<li><a href="https://github.com/ruby/rexml/commit/ce59f2eb1aeb371fe1643414f06618dbe031979f">https://github.com/ruby/rexml/commit/ce59f2eb1aeb371fe1643414f06618dbe031979f</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2024/10/28/redos-rexml-cve-2024-49761">https://www.ruby-lang.org/en/news/2024/10/28/redos-rexml-cve-2024-49761</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49761">https://nvd.nist.gov/vuln/detail/CVE-2024-49761</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rexml/CVE-2024-49761.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rexml/CVE-2024-49761.yml</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20241227-0004">https://security.netapp.com/advisory/ntap-20241227-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-2rxp-v6pw-ch6m">https://github.com/advisories/GHSA-2rxp-v6pw-ch6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2rxp-v6pw-ch6m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-28T14:10:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Autolab] Autolab Misconfigured Reset Password Permissions]]></title>
        <id>https://github.com/advisories/GHSA-v46j-h43h-rwrm</id>
        <link href="https://github.com/advisories/GHSA-v46j-h43h-rwrm"/>
        <updated>2024-11-15T01:00:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For email-based accounts, users with insufficient privileges could reset and theoretically access privileged users' accounts by resetting their passwords.</p>
<h3 id="patches">Patches</h3>
<p>This is fixed in v3.0.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/autolab/Autolab/">https://github.com/autolab/Autolab/</a>
Email us at <a href="mailto:autolab-dev@andrew.cmu.edu">autolab-dev@andrew.cmu.edu</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/autolab/Autolab/security/advisories/GHSA-v46j-h43h-rwrm">https://github.com/autolab/Autolab/security/advisories/GHSA-v46j-h43h-rwrm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-49376">https://nvd.nist.gov/vuln/detail/CVE-2024-49376</a></li>
<li><a href="https://github.com/autolab/Autolab/commit/301689ab5c5e39d13bab47b71eaf8998d04bcc9b">https://github.com/autolab/Autolab/commit/301689ab5c5e39d13bab47b71eaf8998d04bcc9b</a></li>
<li><a href="https://github.com/advisories/GHSA-v46j-h43h-rwrm">https://github.com/advisories/GHSA-v46j-h43h-rwrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v46j-h43h-rwrm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-25T19:21:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] camaleon_cms affected by cross site scripting]]></title>
        <id>https://github.com/advisories/GHSA-hhxg-rvc9-8726</id>
        <link href="https://github.com/advisories/GHSA-hhxg-rvc9-8726"/>
        <updated>2024-10-24T17:21:46.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in camaleon-cms v.2.7.5 allows remote attacker to execute arbitrary code via the content group name field.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48652">https://nvd.nist.gov/vuln/detail/CVE-2024-48652</a></li>
<li><a href="https://github.com/paragbagul111/CVE-2024-48652">https://github.com/paragbagul111/CVE-2024-48652</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/CVE-2024-48652.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/CVE-2024-48652.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-hhxg-rvc9-8726">https://github.com/advisories/GHSA-hhxg-rvc9-8726</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhxg-rvc9-8726</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-23T00:31:45.000Z</published>
    </entry>
</feed>